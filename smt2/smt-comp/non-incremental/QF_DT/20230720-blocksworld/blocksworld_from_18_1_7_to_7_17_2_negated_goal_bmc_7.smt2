(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_S_T_U_V_W_X_Y_Z 0)) (((A) (B) (C) (D) (E) (F) (G) (H) (I) (J) (K) (L) (M) (N) (O) (P) (Q) (R) (S) (T) (U) (V) (W) (X) (Y) (Z))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_S_T_U_V_W_X_Y_Z) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(declare-fun c!3 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s____ () Record_left_center_right)
(declare-fun c!4 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_____ () Record_left_center_right)
(declare-fun c!5 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c______ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s______ () Record_left_center_right)
(declare-fun c!6 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_______ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_______ () Record_left_center_right)
(declare-fun c!7 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c________ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s________ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x39 (stack D empty)))
 (let ((?x38 (stack Y ?x39)))
 (let ((?x40 (stack O ?x38)))
 (let ((?x41 (stack N ?x40)))
 (let ((?x42 (stack A ?x41)))
 (let ((?x43 (stack E ?x42)))
 (let ((?x44 (stack H ?x43)))
 (let ((?x45 (stack C ?x44)))
 (let ((?x46 (stack T ?x45)))
 (let ((?x47 (stack X ?x46)))
 (let ((?x48 (stack I ?x47)))
 (let ((?x49 (stack F ?x48)))
 (let ((?x50 (stack S ?x49)))
 (let ((?x51 (stack Z ?x50)))
 (let ((?x52 (stack J ?x51)))
 (let ((?x53 (stack B ?x52)))
 (let ((?x54 (stack L ?x53)))
 (let ((?x55 (stack K ?x54)))
 (let ((?x135 (left s_tmp_)))
 (= ?x135 ?x55)))))))))))))))))))))
(assert
 (let ((?x56 (stack P empty)))
 (let ((?x138 (center s_tmp__)))
 (= ?x138 ?x56))))
(assert
 (let ((?x57 (stack G empty)))
 (let ((?x58 (stack M ?x57)))
 (let ((?x59 (stack Q ?x58)))
 (let ((?x60 (stack R ?x59)))
 (let ((?x61 (stack U ?x60)))
 (let ((?x62 (stack V ?x61)))
 (let ((?x63 (stack W ?x62)))
 (let ((?x141 (right s_tmp___)))
 (= ?x141 ?x63))))))))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x168 (left s_tmp__)))
 (= (left s_tmp___) ?x168)))
(assert
 (let ((?x138 (center s_tmp__)))
 (= (center s_tmp___) ?x138)))
(assert
 (let ((?x172 (center s_tmp_)))
 (= ?x172 (center s_tmp))))
(assert
 (let ((?x175 (right s_tmp_)))
 (= ?x175 (right s_tmp))))
(assert
 (let ((?x135 (left s_tmp_)))
 (let ((?x168 (left s_tmp__)))
 (= ?x168 ?x135))))
(assert
 (let ((?x175 (right s_tmp_)))
 (let ((?x179 (right s_tmp__)))
 (= ?x179 ?x175))))
(assert
 (= c__ c!1))
(assert
 (let ((?x112 (left s_)))
 (let ((?x328 (left s__)))
 (let (($x346 (= ?x328 ?x112)))
 (let ((?x115 (right s_)))
 (let (($x319 ((_ is stack ) ?x115)))
 (let (($x304 (= c_ right-to-left)))
 (let (($x308 (and $x304 $x319)))
 (let ((?x117 (center s_)))
 (let (($x309 ((_ is stack ) ?x117)))
 (let (($x310 (= c_ center-to-right)))
 (let (($x314 (and $x310 $x309)))
 (let (($x315 (= c_ center-to-left)))
 (let (($x316 (and $x315 $x309)))
 (let (($x355 (ite $x316 (= ?x328 (stack (top ?x117) ?x112)) (ite $x314 $x346 (ite $x308 (= ?x328 (stack (top ?x115) ?x112)) $x346)))))
 (let (($x333 (= ?x328 (rest ?x112))))
 (let (($x323 ((_ is stack ) ?x112)))
 (let (($x324 (= c_ left-to-right)))
 (let (($x325 (and $x324 $x323)))
 (let (($x329 (= c_ left-to-center)))
 (let (($x330 (and $x329 $x323)))
 (ite $x330 $x333 (ite $x325 $x333 $x355)))))))))))))))))))))))
(assert
 (let ((?x115 (right s_)))
 (let ((?x321 (right s__)))
 (let (($x342 (= ?x321 ?x115)))
 (let (($x339 (= ?x321 (rest ?x115))))
 (let (($x319 ((_ is stack ) ?x115)))
 (let (($x302 (= c_ right-to-center)))
 (let (($x303 (and $x302 $x319)))
 (let (($x304 (= c_ right-to-left)))
 (let (($x308 (and $x304 $x319)))
 (let ((?x117 (center s_)))
 (let (($x309 ((_ is stack ) ?x117)))
 (let (($x310 (= c_ center-to-right)))
 (let (($x314 (and $x310 $x309)))
 (let (($x352 (ite $x314 (= ?x321 (stack (top ?x117) ?x115)) (ite $x308 $x339 (ite $x303 $x339 $x342)))))
 (let (($x315 (= c_ center-to-left)))
 (let (($x316 (and $x315 $x309)))
 (let ((?x112 (left s_)))
 (let (($x323 ((_ is stack ) ?x112)))
 (let (($x324 (= c_ left-to-right)))
 (let (($x325 (and $x324 $x323)))
 (let (($x329 (= c_ left-to-center)))
 (let (($x330 (and $x329 $x323)))
 (ite $x330 (= ?x321 (stack (top ?x112) ?x115)) (ite $x325 $x342 (ite $x316 $x342 $x352))))))))))))))))))))))))))
(assert
 (let ((?x117 (center s_)))
 (let ((?x312 (center s__)))
 (let (($x344 (= ?x312 ?x117)))
 (let ((?x115 (right s_)))
 (let (($x319 ((_ is stack ) ?x115)))
 (let (($x302 (= c_ right-to-center)))
 (let (($x303 (and $x302 $x319)))
 (let (($x304 (= c_ right-to-left)))
 (let (($x308 (and $x304 $x319)))
 (let (($x336 (= ?x312 (rest ?x117))))
 (let (($x309 ((_ is stack ) ?x117)))
 (let (($x310 (= c_ center-to-right)))
 (let (($x314 (and $x310 $x309)))
 (let (($x351 (ite $x314 $x336 (ite $x308 $x344 (ite $x303 (= ?x312 (stack (top ?x115) ?x117)) $x344)))))
 (let (($x315 (= c_ center-to-left)))
 (let (($x316 (and $x315 $x309)))
 (let ((?x112 (left s_)))
 (let (($x323 ((_ is stack ) ?x112)))
 (let (($x324 (= c_ left-to-right)))
 (let (($x325 (and $x324 $x323)))
 (let (($x329 (= c_ left-to-center)))
 (let (($x330 (and $x329 $x323)))
 (ite $x330 $x344 (ite $x325 (= ?x312 (stack (top ?x112) ?x117)) (ite $x316 $x336 $x351))))))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x328 (left s__)))
 (let ((?x182 (left s___)))
 (let (($x475 (= ?x182 ?x328)))
 (let ((?x321 (right s__)))
 (let ((?x442 (top ?x321)))
 (let ((?x443 (stack ?x442 ?x328)))
 (let (($x469 (= ?x182 ?x443)))
 (let (($x445 ((_ is stack ) ?x321)))
 (let (($x448 (= c__ right-to-left)))
 (let (($x449 (and $x448 $x445)))
 (let ((?x312 (center s__)))
 (let (($x450 ((_ is stack ) ?x312)))
 (let (($x451 (= c__ center-to-right)))
 (let (($x452 (and $x451 $x450)))
 (let ((?x438 (top ?x312)))
 (let ((?x439 (stack ?x438 ?x328)))
 (let (($x466 (= ?x182 ?x439)))
 (let (($x453 (= c__ center-to-left)))
 (let (($x454 (and $x453 $x450)))
 (let ((?x184 (rest ?x328)))
 (let (($x462 (= ?x182 ?x184)))
 (let (($x455 ((_ is stack ) ?x328)))
 (let (($x456 (= c__ left-to-right)))
 (let (($x457 (and $x456 $x455)))
 (let (($x458 (= c__ left-to-center)))
 (let (($x459 (and $x458 $x455)))
 (ite $x459 $x462 (ite $x457 $x462 (ite $x454 $x466 (ite $x452 $x475 (ite $x449 $x469 $x475))))))))))))))))))))))))))))))))
(assert
 (let ((?x321 (right s__)))
 (let ((?x185 (right s___)))
 (let (($x471 (= ?x185 ?x321)))
 (let ((?x441 (rest ?x321)))
 (let (($x468 (= ?x185 ?x441)))
 (let (($x445 ((_ is stack ) ?x321)))
 (let (($x446 (= c__ right-to-center)))
 (let (($x447 (and $x446 $x445)))
 (let (($x448 (= c__ right-to-left)))
 (let (($x449 (and $x448 $x445)))
 (let ((?x312 (center s__)))
 (let ((?x438 (top ?x312)))
 (let ((?x440 (stack ?x438 ?x321)))
 (let (($x467 (= ?x185 ?x440)))
 (let (($x450 ((_ is stack ) ?x312)))
 (let (($x451 (= c__ center-to-right)))
 (let (($x452 (and $x451 $x450)))
 (let (($x453 (= c__ center-to-left)))
 (let (($x454 (and $x453 $x450)))
 (let ((?x328 (left s__)))
 (let (($x455 ((_ is stack ) ?x328)))
 (let (($x456 (= c__ left-to-right)))
 (let (($x457 (and $x456 $x455)))
 (let (($x488 (ite $x457 $x471 (ite $x454 $x471 (ite $x452 $x467 (ite $x449 $x468 (ite $x447 $x468 $x471)))))))
 (let ((?x298 (top ?x328)))
 (let ((?x434 (stack ?x298 ?x321)))
 (let (($x463 (= ?x185 ?x434)))
 (let (($x458 (= c__ left-to-center)))
 (let (($x459 (and $x458 $x455)))
 (ite $x459 $x463 $x488)))))))))))))))))))))))))))))))
(assert
 (let ((?x312 (center s__)))
 (let ((?x435 (center s___)))
 (let (($x473 (= ?x435 ?x312)))
 (let ((?x321 (right s__)))
 (let ((?x442 (top ?x321)))
 (let ((?x444 (stack ?x442 ?x312)))
 (let (($x470 (= ?x435 ?x444)))
 (let (($x445 ((_ is stack ) ?x321)))
 (let (($x446 (= c__ right-to-center)))
 (let (($x447 (and $x446 $x445)))
 (let (($x448 (= c__ right-to-left)))
 (let (($x449 (and $x448 $x445)))
 (let ((?x437 (rest ?x312)))
 (let (($x465 (= ?x435 ?x437)))
 (let (($x450 ((_ is stack ) ?x312)))
 (let (($x451 (= c__ center-to-right)))
 (let (($x452 (and $x451 $x450)))
 (let (($x453 (= c__ center-to-left)))
 (let (($x454 (and $x453 $x450)))
 (let ((?x328 (left s__)))
 (let ((?x298 (top ?x328)))
 (let ((?x436 (stack ?x298 ?x312)))
 (let (($x464 (= ?x435 ?x436)))
 (let (($x455 ((_ is stack ) ?x328)))
 (let (($x456 (= c__ left-to-right)))
 (let (($x457 (and $x456 $x455)))
 (let (($x487 (ite $x457 $x464 (ite $x454 $x465 (ite $x452 $x465 (ite $x449 $x473 (ite $x447 $x470 $x473)))))))
 (let (($x458 (= c__ left-to-center)))
 (let (($x459 (and $x458 $x455)))
 (ite $x459 $x473 $x487)))))))))))))))))))))))))))))))
(assert
 (= c____ c!3))
(assert
 (let ((?x182 (left s___)))
 (let ((?x362 (left s____)))
 (let (($x613 (= ?x362 ?x182)))
 (let ((?x185 (right s___)))
 (let ((?x580 (top ?x185)))
 (let ((?x581 (stack ?x580 ?x182)))
 (let (($x607 (= ?x362 ?x581)))
 (let (($x583 ((_ is stack ) ?x185)))
 (let (($x586 (= c___ right-to-left)))
 (let (($x587 (and $x586 $x583)))
 (let ((?x435 (center s___)))
 (let (($x588 ((_ is stack ) ?x435)))
 (let (($x589 (= c___ center-to-right)))
 (let (($x590 (and $x589 $x588)))
 (let ((?x576 (top ?x435)))
 (let ((?x577 (stack ?x576 ?x182)))
 (let (($x604 (= ?x362 ?x577)))
 (let (($x591 (= c___ center-to-left)))
 (let (($x592 (and $x591 $x588)))
 (let ((?x406 (rest ?x182)))
 (let (($x600 (= ?x362 ?x406)))
 (let (($x593 ((_ is stack ) ?x182)))
 (let (($x594 (= c___ left-to-right)))
 (let (($x595 (and $x594 $x593)))
 (let (($x596 (= c___ left-to-center)))
 (let (($x597 (and $x596 $x593)))
 (ite $x597 $x600 (ite $x595 $x600 (ite $x592 $x604 (ite $x590 $x613 (ite $x587 $x607 $x613))))))))))))))))))))))))))))))))
(assert
 (let ((?x185 (right s___)))
 (let ((?x407 (right s____)))
 (let (($x609 (= ?x407 ?x185)))
 (let ((?x579 (rest ?x185)))
 (let (($x606 (= ?x407 ?x579)))
 (let (($x583 ((_ is stack ) ?x185)))
 (let (($x584 (= c___ right-to-center)))
 (let (($x585 (and $x584 $x583)))
 (let (($x586 (= c___ right-to-left)))
 (let (($x587 (and $x586 $x583)))
 (let ((?x435 (center s___)))
 (let ((?x576 (top ?x435)))
 (let ((?x578 (stack ?x576 ?x185)))
 (let (($x605 (= ?x407 ?x578)))
 (let (($x588 ((_ is stack ) ?x435)))
 (let (($x589 (= c___ center-to-right)))
 (let (($x590 (and $x589 $x588)))
 (let (($x591 (= c___ center-to-left)))
 (let (($x592 (and $x591 $x588)))
 (let ((?x182 (left s___)))
 (let (($x593 ((_ is stack ) ?x182)))
 (let (($x594 (= c___ left-to-right)))
 (let (($x595 (and $x594 $x593)))
 (let (($x626 (ite $x595 $x609 (ite $x592 $x609 (ite $x590 $x605 (ite $x587 $x606 (ite $x585 $x606 $x609)))))))
 (let ((?x433 (top ?x182)))
 (let ((?x572 (stack ?x433 ?x185)))
 (let (($x601 (= ?x407 ?x572)))
 (let (($x596 (= c___ left-to-center)))
 (let (($x597 (and $x596 $x593)))
 (ite $x597 $x601 $x626)))))))))))))))))))))))))))))))
(assert
 (let ((?x435 (center s___)))
 (let ((?x573 (center s____)))
 (let (($x611 (= ?x573 ?x435)))
 (let ((?x185 (right s___)))
 (let ((?x580 (top ?x185)))
 (let ((?x582 (stack ?x580 ?x435)))
 (let (($x608 (= ?x573 ?x582)))
 (let (($x583 ((_ is stack ) ?x185)))
 (let (($x584 (= c___ right-to-center)))
 (let (($x585 (and $x584 $x583)))
 (let (($x586 (= c___ right-to-left)))
 (let (($x587 (and $x586 $x583)))
 (let ((?x575 (rest ?x435)))
 (let (($x603 (= ?x573 ?x575)))
 (let (($x588 ((_ is stack ) ?x435)))
 (let (($x589 (= c___ center-to-right)))
 (let (($x590 (and $x589 $x588)))
 (let (($x591 (= c___ center-to-left)))
 (let (($x592 (and $x591 $x588)))
 (let ((?x182 (left s___)))
 (let ((?x433 (top ?x182)))
 (let ((?x574 (stack ?x433 ?x435)))
 (let (($x602 (= ?x573 ?x574)))
 (let (($x593 ((_ is stack ) ?x182)))
 (let (($x594 (= c___ left-to-right)))
 (let (($x595 (and $x594 $x593)))
 (let (($x625 (ite $x595 $x602 (ite $x592 $x603 (ite $x590 $x603 (ite $x587 $x611 (ite $x585 $x608 $x611)))))))
 (let (($x596 (= c___ left-to-center)))
 (let (($x597 (and $x596 $x593)))
 (ite $x597 $x611 $x625)))))))))))))))))))))))))))))))
(assert
 (= c_____ c!4))
(assert
 (let ((?x362 (left s____)))
 (let ((?x491 (left s_____)))
 (let (($x751 (= ?x491 ?x362)))
 (let ((?x407 (right s____)))
 (let ((?x718 (top ?x407)))
 (let ((?x719 (stack ?x718 ?x362)))
 (let (($x745 (= ?x491 ?x719)))
 (let (($x721 ((_ is stack ) ?x407)))
 (let (($x724 (= c____ right-to-left)))
 (let (($x725 (and $x724 $x721)))
 (let ((?x573 (center s____)))
 (let (($x726 ((_ is stack ) ?x573)))
 (let (($x727 (= c____ center-to-right)))
 (let (($x728 (and $x727 $x726)))
 (let ((?x714 (top ?x573)))
 (let ((?x715 (stack ?x714 ?x362)))
 (let (($x742 (= ?x491 ?x715)))
 (let (($x729 (= c____ center-to-left)))
 (let (($x730 (and $x729 $x726)))
 (let ((?x524 (rest ?x362)))
 (let (($x738 (= ?x491 ?x524)))
 (let (($x731 ((_ is stack ) ?x362)))
 (let (($x732 (= c____ left-to-right)))
 (let (($x733 (and $x732 $x731)))
 (let (($x734 (= c____ left-to-center)))
 (let (($x735 (and $x734 $x731)))
 (ite $x735 $x738 (ite $x733 $x738 (ite $x730 $x742 (ite $x728 $x751 (ite $x725 $x745 $x751))))))))))))))))))))))))))))))))
(assert
 (let ((?x407 (right s____)))
 (let ((?x525 (right s_____)))
 (let (($x747 (= ?x525 ?x407)))
 (let ((?x717 (rest ?x407)))
 (let (($x744 (= ?x525 ?x717)))
 (let (($x721 ((_ is stack ) ?x407)))
 (let (($x722 (= c____ right-to-center)))
 (let (($x723 (and $x722 $x721)))
 (let (($x724 (= c____ right-to-left)))
 (let (($x725 (and $x724 $x721)))
 (let ((?x573 (center s____)))
 (let ((?x714 (top ?x573)))
 (let ((?x716 (stack ?x714 ?x407)))
 (let (($x743 (= ?x525 ?x716)))
 (let (($x726 ((_ is stack ) ?x573)))
 (let (($x727 (= c____ center-to-right)))
 (let (($x728 (and $x727 $x726)))
 (let (($x729 (= c____ center-to-left)))
 (let (($x730 (and $x729 $x726)))
 (let ((?x362 (left s____)))
 (let (($x731 ((_ is stack ) ?x362)))
 (let (($x732 (= c____ left-to-right)))
 (let (($x733 (and $x732 $x731)))
 (let (($x764 (ite $x733 $x747 (ite $x730 $x747 (ite $x728 $x743 (ite $x725 $x744 (ite $x723 $x744 $x747)))))))
 (let ((?x571 (top ?x362)))
 (let ((?x710 (stack ?x571 ?x407)))
 (let (($x739 (= ?x525 ?x710)))
 (let (($x734 (= c____ left-to-center)))
 (let (($x735 (and $x734 $x731)))
 (ite $x735 $x739 $x764)))))))))))))))))))))))))))))))
(assert
 (let ((?x573 (center s____)))
 (let ((?x711 (center s_____)))
 (let (($x749 (= ?x711 ?x573)))
 (let ((?x407 (right s____)))
 (let ((?x718 (top ?x407)))
 (let ((?x720 (stack ?x718 ?x573)))
 (let (($x746 (= ?x711 ?x720)))
 (let (($x721 ((_ is stack ) ?x407)))
 (let (($x722 (= c____ right-to-center)))
 (let (($x723 (and $x722 $x721)))
 (let (($x724 (= c____ right-to-left)))
 (let (($x725 (and $x724 $x721)))
 (let ((?x713 (rest ?x573)))
 (let (($x741 (= ?x711 ?x713)))
 (let (($x726 ((_ is stack ) ?x573)))
 (let (($x727 (= c____ center-to-right)))
 (let (($x728 (and $x727 $x726)))
 (let (($x729 (= c____ center-to-left)))
 (let (($x730 (and $x729 $x726)))
 (let ((?x362 (left s____)))
 (let ((?x571 (top ?x362)))
 (let ((?x712 (stack ?x571 ?x573)))
 (let (($x740 (= ?x711 ?x712)))
 (let (($x731 ((_ is stack ) ?x362)))
 (let (($x732 (= c____ left-to-right)))
 (let (($x733 (and $x732 $x731)))
 (let (($x763 (ite $x733 $x740 (ite $x730 $x741 (ite $x728 $x741 (ite $x725 $x749 (ite $x723 $x746 $x749)))))))
 (let (($x734 (= c____ left-to-center)))
 (let (($x735 (and $x734 $x731)))
 (ite $x735 $x749 $x763)))))))))))))))))))))))))))))))
(assert
 (= c______ c!5))
(assert
 (let ((?x491 (left s_____)))
 (let ((?x629 (left s______)))
 (let (($x889 (= ?x629 ?x491)))
 (let ((?x525 (right s_____)))
 (let ((?x856 (top ?x525)))
 (let ((?x857 (stack ?x856 ?x491)))
 (let (($x883 (= ?x629 ?x857)))
 (let (($x859 ((_ is stack ) ?x525)))
 (let (($x862 (= c_____ right-to-left)))
 (let (($x863 (and $x862 $x859)))
 (let ((?x711 (center s_____)))
 (let (($x864 ((_ is stack ) ?x711)))
 (let (($x865 (= c_____ center-to-right)))
 (let (($x866 (and $x865 $x864)))
 (let ((?x852 (top ?x711)))
 (let ((?x853 (stack ?x852 ?x491)))
 (let (($x880 (= ?x629 ?x853)))
 (let (($x867 (= c_____ center-to-left)))
 (let (($x868 (and $x867 $x864)))
 (let ((?x662 (rest ?x491)))
 (let (($x876 (= ?x629 ?x662)))
 (let (($x869 ((_ is stack ) ?x491)))
 (let (($x870 (= c_____ left-to-right)))
 (let (($x871 (and $x870 $x869)))
 (let (($x872 (= c_____ left-to-center)))
 (let (($x873 (and $x872 $x869)))
 (ite $x873 $x876 (ite $x871 $x876 (ite $x868 $x880 (ite $x866 $x889 (ite $x863 $x883 $x889))))))))))))))))))))))))))))))))
(assert
 (let ((?x525 (right s_____)))
 (let ((?x663 (right s______)))
 (let (($x885 (= ?x663 ?x525)))
 (let ((?x855 (rest ?x525)))
 (let (($x882 (= ?x663 ?x855)))
 (let (($x859 ((_ is stack ) ?x525)))
 (let (($x860 (= c_____ right-to-center)))
 (let (($x861 (and $x860 $x859)))
 (let (($x862 (= c_____ right-to-left)))
 (let (($x863 (and $x862 $x859)))
 (let ((?x711 (center s_____)))
 (let ((?x852 (top ?x711)))
 (let ((?x854 (stack ?x852 ?x525)))
 (let (($x881 (= ?x663 ?x854)))
 (let (($x864 ((_ is stack ) ?x711)))
 (let (($x865 (= c_____ center-to-right)))
 (let (($x866 (and $x865 $x864)))
 (let (($x867 (= c_____ center-to-left)))
 (let (($x868 (and $x867 $x864)))
 (let ((?x491 (left s_____)))
 (let (($x869 ((_ is stack ) ?x491)))
 (let (($x870 (= c_____ left-to-right)))
 (let (($x871 (and $x870 $x869)))
 (let (($x902 (ite $x871 $x885 (ite $x868 $x885 (ite $x866 $x881 (ite $x863 $x882 (ite $x861 $x882 $x885)))))))
 (let ((?x709 (top ?x491)))
 (let ((?x848 (stack ?x709 ?x525)))
 (let (($x877 (= ?x663 ?x848)))
 (let (($x872 (= c_____ left-to-center)))
 (let (($x873 (and $x872 $x869)))
 (ite $x873 $x877 $x902)))))))))))))))))))))))))))))))
(assert
 (let ((?x711 (center s_____)))
 (let ((?x849 (center s______)))
 (let (($x887 (= ?x849 ?x711)))
 (let ((?x525 (right s_____)))
 (let ((?x856 (top ?x525)))
 (let ((?x858 (stack ?x856 ?x711)))
 (let (($x884 (= ?x849 ?x858)))
 (let (($x859 ((_ is stack ) ?x525)))
 (let (($x860 (= c_____ right-to-center)))
 (let (($x861 (and $x860 $x859)))
 (let (($x862 (= c_____ right-to-left)))
 (let (($x863 (and $x862 $x859)))
 (let ((?x851 (rest ?x711)))
 (let (($x879 (= ?x849 ?x851)))
 (let (($x864 ((_ is stack ) ?x711)))
 (let (($x865 (= c_____ center-to-right)))
 (let (($x866 (and $x865 $x864)))
 (let (($x867 (= c_____ center-to-left)))
 (let (($x868 (and $x867 $x864)))
 (let ((?x491 (left s_____)))
 (let ((?x709 (top ?x491)))
 (let ((?x850 (stack ?x709 ?x711)))
 (let (($x878 (= ?x849 ?x850)))
 (let (($x869 ((_ is stack ) ?x491)))
 (let (($x870 (= c_____ left-to-right)))
 (let (($x871 (and $x870 $x869)))
 (let (($x901 (ite $x871 $x878 (ite $x868 $x879 (ite $x866 $x879 (ite $x863 $x887 (ite $x861 $x884 $x887)))))))
 (let (($x872 (= c_____ left-to-center)))
 (let (($x873 (and $x872 $x869)))
 (ite $x873 $x887 $x901)))))))))))))))))))))))))))))))
(assert
 (= c_______ c!6))
(assert
 (let ((?x629 (left s______)))
 (let ((?x767 (left s_______)))
 (let (($x1027 (= ?x767 ?x629)))
 (let ((?x663 (right s______)))
 (let ((?x994 (top ?x663)))
 (let ((?x995 (stack ?x994 ?x629)))
 (let (($x1021 (= ?x767 ?x995)))
 (let (($x997 ((_ is stack ) ?x663)))
 (let (($x1000 (= c______ right-to-left)))
 (let (($x1001 (and $x1000 $x997)))
 (let ((?x849 (center s______)))
 (let (($x1002 ((_ is stack ) ?x849)))
 (let (($x1003 (= c______ center-to-right)))
 (let (($x1004 (and $x1003 $x1002)))
 (let ((?x990 (top ?x849)))
 (let ((?x991 (stack ?x990 ?x629)))
 (let (($x1018 (= ?x767 ?x991)))
 (let (($x1005 (= c______ center-to-left)))
 (let (($x1006 (and $x1005 $x1002)))
 (let ((?x800 (rest ?x629)))
 (let (($x1014 (= ?x767 ?x800)))
 (let (($x1007 ((_ is stack ) ?x629)))
 (let (($x1008 (= c______ left-to-right)))
 (let (($x1009 (and $x1008 $x1007)))
 (let (($x1010 (= c______ left-to-center)))
 (let (($x1011 (and $x1010 $x1007)))
 (ite $x1011 $x1014 (ite $x1009 $x1014 (ite $x1006 $x1018 (ite $x1004 $x1027 (ite $x1001 $x1021 $x1027))))))))))))))))))))))))))))))))
(assert
 (let ((?x663 (right s______)))
 (let ((?x801 (right s_______)))
 (let (($x1023 (= ?x801 ?x663)))
 (let ((?x993 (rest ?x663)))
 (let (($x1020 (= ?x801 ?x993)))
 (let (($x997 ((_ is stack ) ?x663)))
 (let (($x998 (= c______ right-to-center)))
 (let (($x999 (and $x998 $x997)))
 (let (($x1000 (= c______ right-to-left)))
 (let (($x1001 (and $x1000 $x997)))
 (let ((?x849 (center s______)))
 (let ((?x990 (top ?x849)))
 (let ((?x992 (stack ?x990 ?x663)))
 (let (($x1019 (= ?x801 ?x992)))
 (let (($x1002 ((_ is stack ) ?x849)))
 (let (($x1003 (= c______ center-to-right)))
 (let (($x1004 (and $x1003 $x1002)))
 (let (($x1005 (= c______ center-to-left)))
 (let (($x1006 (and $x1005 $x1002)))
 (let ((?x629 (left s______)))
 (let (($x1007 ((_ is stack ) ?x629)))
 (let (($x1008 (= c______ left-to-right)))
 (let (($x1009 (and $x1008 $x1007)))
 (let (($x1040 (ite $x1009 $x1023 (ite $x1006 $x1023 (ite $x1004 $x1019 (ite $x1001 $x1020 (ite $x999 $x1020 $x1023)))))))
 (let ((?x847 (top ?x629)))
 (let ((?x986 (stack ?x847 ?x663)))
 (let (($x1015 (= ?x801 ?x986)))
 (let (($x1010 (= c______ left-to-center)))
 (let (($x1011 (and $x1010 $x1007)))
 (ite $x1011 $x1015 $x1040)))))))))))))))))))))))))))))))
(assert
 (let ((?x849 (center s______)))
 (let ((?x987 (center s_______)))
 (let (($x1025 (= ?x987 ?x849)))
 (let ((?x663 (right s______)))
 (let ((?x994 (top ?x663)))
 (let ((?x996 (stack ?x994 ?x849)))
 (let (($x1022 (= ?x987 ?x996)))
 (let (($x997 ((_ is stack ) ?x663)))
 (let (($x998 (= c______ right-to-center)))
 (let (($x999 (and $x998 $x997)))
 (let (($x1000 (= c______ right-to-left)))
 (let (($x1001 (and $x1000 $x997)))
 (let ((?x989 (rest ?x849)))
 (let (($x1017 (= ?x987 ?x989)))
 (let (($x1002 ((_ is stack ) ?x849)))
 (let (($x1003 (= c______ center-to-right)))
 (let (($x1004 (and $x1003 $x1002)))
 (let (($x1005 (= c______ center-to-left)))
 (let (($x1006 (and $x1005 $x1002)))
 (let ((?x629 (left s______)))
 (let ((?x847 (top ?x629)))
 (let ((?x988 (stack ?x847 ?x849)))
 (let (($x1016 (= ?x987 ?x988)))
 (let (($x1007 ((_ is stack ) ?x629)))
 (let (($x1008 (= c______ left-to-right)))
 (let (($x1009 (and $x1008 $x1007)))
 (let (($x1039 (ite $x1009 $x1016 (ite $x1006 $x1017 (ite $x1004 $x1017 (ite $x1001 $x1025 (ite $x999 $x1022 $x1025)))))))
 (let (($x1010 (= c______ left-to-center)))
 (let (($x1011 (and $x1010 $x1007)))
 (ite $x1011 $x1025 $x1039)))))))))))))))))))))))))))))))
(assert
 (= c________ c!7))
(assert
 (let ((?x767 (left s_______)))
 (let ((?x905 (left s________)))
 (let (($x1165 (= ?x905 ?x767)))
 (let ((?x801 (right s_______)))
 (let ((?x1132 (top ?x801)))
 (let ((?x1133 (stack ?x1132 ?x767)))
 (let (($x1159 (= ?x905 ?x1133)))
 (let (($x1135 ((_ is stack ) ?x801)))
 (let (($x1138 (= c_______ right-to-left)))
 (let (($x1139 (and $x1138 $x1135)))
 (let ((?x987 (center s_______)))
 (let (($x1140 ((_ is stack ) ?x987)))
 (let (($x1141 (= c_______ center-to-right)))
 (let (($x1142 (and $x1141 $x1140)))
 (let ((?x1128 (top ?x987)))
 (let ((?x1129 (stack ?x1128 ?x767)))
 (let (($x1156 (= ?x905 ?x1129)))
 (let (($x1143 (= c_______ center-to-left)))
 (let (($x1144 (and $x1143 $x1140)))
 (let ((?x938 (rest ?x767)))
 (let (($x1152 (= ?x905 ?x938)))
 (let (($x1145 ((_ is stack ) ?x767)))
 (let (($x1146 (= c_______ left-to-right)))
 (let (($x1147 (and $x1146 $x1145)))
 (let (($x1148 (= c_______ left-to-center)))
 (let (($x1149 (and $x1148 $x1145)))
 (ite $x1149 $x1152 (ite $x1147 $x1152 (ite $x1144 $x1156 (ite $x1142 $x1165 (ite $x1139 $x1159 $x1165))))))))))))))))))))))))))))))))
(assert
 (let ((?x801 (right s_______)))
 (let ((?x939 (right s________)))
 (let (($x1161 (= ?x939 ?x801)))
 (let ((?x1131 (rest ?x801)))
 (let (($x1158 (= ?x939 ?x1131)))
 (let (($x1135 ((_ is stack ) ?x801)))
 (let (($x1136 (= c_______ right-to-center)))
 (let (($x1137 (and $x1136 $x1135)))
 (let (($x1138 (= c_______ right-to-left)))
 (let (($x1139 (and $x1138 $x1135)))
 (let ((?x987 (center s_______)))
 (let ((?x1128 (top ?x987)))
 (let ((?x1130 (stack ?x1128 ?x801)))
 (let (($x1157 (= ?x939 ?x1130)))
 (let (($x1140 ((_ is stack ) ?x987)))
 (let (($x1141 (= c_______ center-to-right)))
 (let (($x1142 (and $x1141 $x1140)))
 (let (($x1143 (= c_______ center-to-left)))
 (let (($x1144 (and $x1143 $x1140)))
 (let ((?x767 (left s_______)))
 (let (($x1145 ((_ is stack ) ?x767)))
 (let (($x1146 (= c_______ left-to-right)))
 (let (($x1147 (and $x1146 $x1145)))
 (let (($x1178 (ite $x1147 $x1161 (ite $x1144 $x1161 (ite $x1142 $x1157 (ite $x1139 $x1158 (ite $x1137 $x1158 $x1161)))))))
 (let ((?x985 (top ?x767)))
 (let ((?x1124 (stack ?x985 ?x801)))
 (let (($x1153 (= ?x939 ?x1124)))
 (let (($x1148 (= c_______ left-to-center)))
 (let (($x1149 (and $x1148 $x1145)))
 (ite $x1149 $x1153 $x1178)))))))))))))))))))))))))))))))
(assert
 (let ((?x987 (center s_______)))
 (let ((?x1125 (center s________)))
 (let (($x1163 (= ?x1125 ?x987)))
 (let ((?x801 (right s_______)))
 (let ((?x1132 (top ?x801)))
 (let ((?x1134 (stack ?x1132 ?x987)))
 (let (($x1160 (= ?x1125 ?x1134)))
 (let (($x1135 ((_ is stack ) ?x801)))
 (let (($x1136 (= c_______ right-to-center)))
 (let (($x1137 (and $x1136 $x1135)))
 (let (($x1138 (= c_______ right-to-left)))
 (let (($x1139 (and $x1138 $x1135)))
 (let ((?x1127 (rest ?x987)))
 (let (($x1155 (= ?x1125 ?x1127)))
 (let (($x1140 ((_ is stack ) ?x987)))
 (let (($x1141 (= c_______ center-to-right)))
 (let (($x1142 (and $x1141 $x1140)))
 (let (($x1143 (= c_______ center-to-left)))
 (let (($x1144 (and $x1143 $x1140)))
 (let ((?x767 (left s_______)))
 (let ((?x985 (top ?x767)))
 (let ((?x1126 (stack ?x985 ?x987)))
 (let (($x1154 (= ?x1125 ?x1126)))
 (let (($x1145 ((_ is stack ) ?x767)))
 (let (($x1146 (= c_______ left-to-right)))
 (let (($x1147 (and $x1146 $x1145)))
 (let (($x1177 (ite $x1147 $x1154 (ite $x1144 $x1155 (ite $x1142 $x1155 (ite $x1139 $x1163 (ite $x1137 $x1160 $x1163)))))))
 (let (($x1148 (= c_______ left-to-center)))
 (let (($x1149 (and $x1148 $x1145)))
 (ite $x1149 $x1163 $x1177)))))))))))))))))))))))))))))))
(assert
 (let ((?x88 (stack V (stack R empty))))
 (let ((?x939 (right s________)))
 (let (($x1181 (= ?x939 ?x88)))
 (let ((?x75 (stack C (stack H (stack O (stack I (stack K (stack G empty))))))))
 (let ((?x81 (stack P (stack A (stack D (stack Z (stack W (stack E ?x75))))))))
 (let ((?x86 (stack X (stack L (stack N (stack J (stack M ?x81)))))))
 (let ((?x1125 (center s________)))
 (let (($x1212 (= ?x1125 ?x86)))
 (let ((?x69 (stack T (stack Y (stack S (stack B (stack Q (stack U empty))))))))
 (let ((?x70 (stack F ?x69)))
 (let ((?x905 (left s________)))
 (let (($x1213 (= ?x905 ?x70)))
 (let (($x1215 (not (and $x1213 $x1212 $x1181))))
 (not $x1215)))))))))))))))
(check-sat)
(exit)
