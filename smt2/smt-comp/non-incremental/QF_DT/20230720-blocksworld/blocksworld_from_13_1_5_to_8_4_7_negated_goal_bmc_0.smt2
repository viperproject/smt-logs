(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_S 0)) (((A) (B) (C) (D) (E) (F) (G) (H) (I) (J) (K) (L) (M) (N) (O) (P) (Q) (R) (S))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_S) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x31 (stack L empty)))
 (let ((?x32 (stack A ?x31)))
 (let ((?x33 (stack J ?x32)))
 (let ((?x34 (stack P ?x33)))
 (let ((?x35 (stack B ?x34)))
 (let ((?x36 (stack I ?x35)))
 (let ((?x37 (stack M ?x36)))
 (let ((?x38 (stack D ?x37)))
 (let ((?x39 (stack R ?x38)))
 (let ((?x40 (stack G ?x39)))
 (let ((?x41 (stack E ?x40)))
 (let ((?x42 (stack S ?x41)))
 (let ((?x43 (stack Q ?x42)))
 (let ((?x114 (left s_tmp_)))
 (= ?x114 ?x43))))))))))))))))
(assert
 (let ((?x44 (stack N empty)))
 (let ((?x117 (center s_tmp__)))
 (= ?x117 ?x44))))
(assert
 (let ((?x45 (stack C empty)))
 (let ((?x46 (stack F ?x45)))
 (let ((?x47 (stack H ?x46)))
 (let ((?x48 (stack K ?x47)))
 (let ((?x49 (stack O ?x48)))
 (let ((?x120 (right s_tmp___)))
 (= ?x120 ?x49))))))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x147 (left s_tmp__)))
 (= (left s_tmp___) ?x147)))
(assert
 (let ((?x117 (center s_tmp__)))
 (= (center s_tmp___) ?x117)))
(assert
 (let ((?x151 (center s_tmp_)))
 (= ?x151 (center s_tmp))))
(assert
 (let ((?x154 (right s_tmp_)))
 (= ?x154 (right s_tmp))))
(assert
 (let ((?x114 (left s_tmp_)))
 (let ((?x147 (left s_tmp__)))
 (= ?x147 ?x114))))
(assert
 (let ((?x154 (right s_tmp_)))
 (let ((?x158 (right s_tmp__)))
 (= ?x158 ?x154))))
(assert
 (let ((?x45 (stack C empty)))
 (let ((?x62 (stack I ?x45)))
 (let ((?x63 (stack L ?x62)))
 (let ((?x64 (stack M ?x63)))
 (let ((?x65 (stack N ?x64)))
 (let ((?x66 (stack Q ?x65)))
 (let ((?x67 (stack S ?x66)))
 (let ((?x94 (right s_)))
 (let ((?x60 (stack R (stack F (stack P empty)))))
 (let ((?x61 (stack G ?x60)))
 (let ((?x96 (center s_)))
 (let ((?x51 (stack O empty)))
 (let ((?x50 (stack A ?x51)))
 (let ((?x52 (stack D ?x50)))
 (let ((?x53 (stack H ?x52)))
 (let ((?x54 (stack K ?x53)))
 (let ((?x55 (stack J ?x54)))
 (let ((?x56 (stack E ?x55)))
 (let ((?x57 (stack B ?x56)))
 (let ((?x91 (left s_)))
 (let (($x164 (not (and (= ?x91 ?x57) (= ?x96 ?x61) (= ?x94 ?x67)))))
 (not $x164)))))))))))))))))))))))
(check-sat)
(exit)
