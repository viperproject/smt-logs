(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_S_T 0)) (((A) (B) (C) (D) (E) (F) (G) (H) (I) (J) (K) (L) (M) (N) (O) (P) (Q) (R) (S) (T))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R_S_T) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x33 (stack I empty)))
 (let ((?x32 (stack F ?x33)))
 (let ((?x118 (left s_tmp_)))
 (= ?x118 ?x32)))))
(assert
 (let ((?x34 (stack C empty)))
 (let ((?x35 (stack J ?x34)))
 (let ((?x36 (stack H ?x35)))
 (let ((?x37 (stack P ?x36)))
 (let ((?x38 (stack E ?x37)))
 (let ((?x121 (center s_tmp__)))
 (= ?x121 ?x38))))))))
(assert
 (let ((?x39 (stack A empty)))
 (let ((?x40 (stack B ?x39)))
 (let ((?x41 (stack D ?x40)))
 (let ((?x42 (stack G ?x41)))
 (let ((?x43 (stack K ?x42)))
 (let ((?x44 (stack L ?x43)))
 (let ((?x45 (stack M ?x44)))
 (let ((?x46 (stack N ?x45)))
 (let ((?x47 (stack O ?x46)))
 (let ((?x48 (stack Q ?x47)))
 (let ((?x49 (stack R ?x48)))
 (let ((?x50 (stack S ?x49)))
 (let ((?x51 (stack T ?x50)))
 (let ((?x124 (right s_tmp___)))
 (= ?x124 ?x51))))))))))))))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x151 (left s_tmp__)))
 (= (left s_tmp___) ?x151)))
(assert
 (let ((?x121 (center s_tmp__)))
 (= (center s_tmp___) ?x121)))
(assert
 (let ((?x155 (center s_tmp_)))
 (= ?x155 (center s_tmp))))
(assert
 (let ((?x158 (right s_tmp_)))
 (= ?x158 (right s_tmp))))
(assert
 (let ((?x118 (left s_tmp_)))
 (let ((?x151 (left s_tmp__)))
 (= ?x151 ?x118))))
(assert
 (let ((?x158 (right s_tmp_)))
 (let ((?x162 (right s_tmp__)))
 (= ?x162 ?x158))))
(assert
 (= c__ c!1))
(assert
 (let ((?x95 (left s_)))
 (let ((?x275 (left s__)))
 (let (($x311 (= ?x275 ?x95)))
 (let ((?x98 (right s_)))
 (let (($x266 ((_ is stack ) ?x98)))
 (let (($x287 (= c_ right-to-left)))
 (let (($x270 (and $x287 $x266)))
 (let ((?x100 (center s_)))
 (let (($x271 ((_ is stack ) ?x100)))
 (let (($x272 (= c_ center-to-right)))
 (let (($x288 (and $x272 $x271)))
 (let (($x289 (= c_ center-to-left)))
 (let (($x290 (and $x289 $x271)))
 (let (($x320 (ite $x290 (= ?x275 (stack (top ?x100) ?x95)) (ite $x288 $x311 (ite $x270 (= ?x275 (stack (top ?x98) ?x95)) $x311)))))
 (let ((?x282 (rest ?x95)))
 (let (($x298 (= ?x275 ?x282)))
 (let (($x291 ((_ is stack ) ?x95)))
 (let (($x292 (= c_ left-to-right)))
 (let (($x293 (and $x292 $x291)))
 (let (($x294 (= c_ left-to-center)))
 (let (($x295 (and $x294 $x291)))
 (ite $x295 $x298 (ite $x293 $x298 $x320))))))))))))))))))))))))
(assert
 (let ((?x98 (right s_)))
 (let ((?x283 (right s__)))
 (let (($x307 (= ?x283 ?x98)))
 (let ((?x268 (rest ?x98)))
 (let (($x304 (= ?x283 ?x268)))
 (let (($x266 ((_ is stack ) ?x98)))
 (let (($x285 (= c_ right-to-center)))
 (let (($x286 (and $x285 $x266)))
 (let (($x287 (= c_ right-to-left)))
 (let (($x270 (and $x287 $x266)))
 (let ((?x100 (center s_)))
 (let (($x271 ((_ is stack ) ?x100)))
 (let (($x272 (= c_ center-to-right)))
 (let (($x288 (and $x272 $x271)))
 (let (($x317 (ite $x288 (= ?x283 (stack (top ?x100) ?x98)) (ite $x270 $x304 (ite $x286 $x304 $x307)))))
 (let (($x289 (= c_ center-to-left)))
 (let (($x290 (and $x289 $x271)))
 (let ((?x95 (left s_)))
 (let (($x291 ((_ is stack ) ?x95)))
 (let (($x292 (= c_ left-to-right)))
 (let (($x293 (and $x292 $x291)))
 (let (($x294 (= c_ left-to-center)))
 (let (($x295 (and $x294 $x291)))
 (ite $x295 (= ?x283 (stack (top ?x95) ?x98)) (ite $x293 $x307 (ite $x290 $x307 $x317)))))))))))))))))))))))))))
(assert
 (let ((?x100 (center s_)))
 (let ((?x280 (center s__)))
 (let (($x309 (= ?x280 ?x100)))
 (let ((?x98 (right s_)))
 (let (($x266 ((_ is stack ) ?x98)))
 (let (($x285 (= c_ right-to-center)))
 (let (($x286 (and $x285 $x266)))
 (let (($x287 (= c_ right-to-left)))
 (let (($x270 (and $x287 $x266)))
 (let ((?x276 (rest ?x100)))
 (let (($x301 (= ?x280 ?x276)))
 (let (($x271 ((_ is stack ) ?x100)))
 (let (($x272 (= c_ center-to-right)))
 (let (($x288 (and $x272 $x271)))
 (let (($x316 (ite $x288 $x301 (ite $x270 $x309 (ite $x286 (= ?x280 (stack (top ?x98) ?x100)) $x309)))))
 (let (($x289 (= c_ center-to-left)))
 (let (($x290 (and $x289 $x271)))
 (let ((?x95 (left s_)))
 (let (($x291 ((_ is stack ) ?x95)))
 (let (($x292 (= c_ left-to-right)))
 (let (($x293 (and $x292 $x291)))
 (let (($x294 (= c_ left-to-center)))
 (let (($x295 (and $x294 $x291)))
 (ite $x295 $x309 (ite $x293 (= ?x280 (stack (top ?x95) ?x100)) (ite $x290 $x301 $x316)))))))))))))))))))))))))))
(assert
 (let ((?x71 (stack O empty)))
 (let ((?x283 (right s__)))
 (let (($x327 (= ?x283 ?x71)))
 (let ((?x69 (stack N (stack H (stack I (stack B (stack D (stack K empty))))))))
 (let ((?x70 (stack A ?x69)))
 (let ((?x280 (center s__)))
 (let (($x369 (= ?x280 ?x70)))
 (let ((?x57 (stack F (stack P (stack Q (stack G (stack R (stack L empty))))))))
 (let ((?x63 (stack T (stack E (stack M (stack S (stack J (stack C ?x57))))))))
 (let ((?x275 (left s__)))
 (let (($x370 (= ?x275 ?x63)))
 (let (($x372 (not (and $x370 $x369 $x327))))
 (not $x372))))))))))))))
(check-sat)
(exit)
