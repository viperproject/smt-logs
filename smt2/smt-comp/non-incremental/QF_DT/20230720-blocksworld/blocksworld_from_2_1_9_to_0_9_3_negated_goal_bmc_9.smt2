(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H_I_J_K_L 0)) (((A) (B) (C) (D) (E) (F) (G) (H) (I) (J) (K) (L))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H_I_J_K_L) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(declare-fun c!3 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s____ () Record_left_center_right)
(declare-fun c!4 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_____ () Record_left_center_right)
(declare-fun c!5 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c______ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s______ () Record_left_center_right)
(declare-fun c!6 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_______ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_______ () Record_left_center_right)
(declare-fun c!7 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c________ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s________ () Record_left_center_right)
(declare-fun c!8 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_________ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_________ () Record_left_center_right)
(declare-fun c!9 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__________ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__________ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x25 (stack K empty)))
 (let ((?x24 (stack E ?x25)))
 (let ((?x94 (left s_tmp_)))
 (= ?x94 ?x24)))))
(assert
 (let ((?x26 (stack I empty)))
 (let ((?x97 (center s_tmp__)))
 (= ?x97 ?x26))))
(assert
 (let ((?x27 (stack A empty)))
 (let ((?x28 (stack B ?x27)))
 (let ((?x29 (stack C ?x28)))
 (let ((?x30 (stack D ?x29)))
 (let ((?x31 (stack F ?x30)))
 (let ((?x32 (stack G ?x31)))
 (let ((?x33 (stack H ?x32)))
 (let ((?x34 (stack J ?x33)))
 (let ((?x35 (stack L ?x34)))
 (let ((?x100 (right s_tmp___)))
 (= ?x100 ?x35))))))))))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x127 (left s_tmp__)))
 (= (left s_tmp___) ?x127)))
(assert
 (let ((?x97 (center s_tmp__)))
 (= (center s_tmp___) ?x97)))
(assert
 (let ((?x131 (center s_tmp_)))
 (= ?x131 (center s_tmp))))
(assert
 (let ((?x134 (right s_tmp_)))
 (= ?x134 (right s_tmp))))
(assert
 (let ((?x94 (left s_tmp_)))
 (let ((?x127 (left s_tmp__)))
 (= ?x127 ?x94))))
(assert
 (let ((?x134 (right s_tmp_)))
 (let ((?x138 (right s_tmp__)))
 (= ?x138 ?x134))))
(assert
 (= c__ c!1))
(assert
 (let ((?x71 (left s_)))
 (let ((?x227 (left s__)))
 (let (($x263 (= ?x227 ?x71)))
 (let ((?x74 (right s_)))
 (let (($x233 ((_ is stack ) ?x74)))
 (let (($x236 (= c_ right-to-left)))
 (let (($x237 (and $x236 $x233)))
 (let ((?x76 (center s_)))
 (let (($x238 ((_ is stack ) ?x76)))
 (let (($x239 (= c_ center-to-right)))
 (let (($x240 (and $x239 $x238)))
 (let (($x241 (= c_ center-to-left)))
 (let (($x242 (and $x241 $x238)))
 (let (($x272 (ite $x242 (= ?x227 (stack (top ?x76) ?x71)) (ite $x240 $x263 (ite $x237 (= ?x227 (stack (top ?x74) ?x71)) $x263)))))
 (let (($x250 (= ?x227 (rest ?x71))))
 (let (($x243 ((_ is stack ) ?x71)))
 (let (($x244 (= c_ left-to-right)))
 (let (($x245 (and $x244 $x243)))
 (let (($x246 (= c_ left-to-center)))
 (let (($x247 (and $x246 $x243)))
 (ite $x247 $x250 (ite $x245 $x250 $x272)))))))))))))))))))))))
(assert
 (let ((?x74 (right s_)))
 (let ((?x223 (right s__)))
 (let (($x259 (= ?x223 ?x74)))
 (let (($x256 (= ?x223 (rest ?x74))))
 (let (($x233 ((_ is stack ) ?x74)))
 (let (($x234 (= c_ right-to-center)))
 (let (($x235 (and $x234 $x233)))
 (let (($x236 (= c_ right-to-left)))
 (let (($x237 (and $x236 $x233)))
 (let ((?x76 (center s_)))
 (let (($x238 ((_ is stack ) ?x76)))
 (let (($x239 (= c_ center-to-right)))
 (let (($x240 (and $x239 $x238)))
 (let (($x269 (ite $x240 (= ?x223 (stack (top ?x76) ?x74)) (ite $x237 $x256 (ite $x235 $x256 $x259)))))
 (let (($x241 (= c_ center-to-left)))
 (let (($x242 (and $x241 $x238)))
 (let ((?x71 (left s_)))
 (let (($x243 ((_ is stack ) ?x71)))
 (let (($x244 (= c_ left-to-right)))
 (let (($x245 (and $x244 $x243)))
 (let (($x246 (= c_ left-to-center)))
 (let (($x247 (and $x246 $x243)))
 (ite $x247 (= ?x223 (stack (top ?x71) ?x74)) (ite $x245 $x259 (ite $x242 $x259 $x269))))))))))))))))))))))))))
(assert
 (let ((?x76 (center s_)))
 (let ((?x217 (center s__)))
 (let (($x261 (= ?x217 ?x76)))
 (let ((?x74 (right s_)))
 (let (($x233 ((_ is stack ) ?x74)))
 (let (($x234 (= c_ right-to-center)))
 (let (($x235 (and $x234 $x233)))
 (let (($x236 (= c_ right-to-left)))
 (let (($x237 (and $x236 $x233)))
 (let (($x253 (= ?x217 (rest ?x76))))
 (let (($x238 ((_ is stack ) ?x76)))
 (let (($x239 (= c_ center-to-right)))
 (let (($x240 (and $x239 $x238)))
 (let (($x268 (ite $x240 $x253 (ite $x237 $x261 (ite $x235 (= ?x217 (stack (top ?x74) ?x76)) $x261)))))
 (let (($x241 (= c_ center-to-left)))
 (let (($x242 (and $x241 $x238)))
 (let ((?x71 (left s_)))
 (let (($x243 ((_ is stack ) ?x71)))
 (let (($x244 (= c_ left-to-right)))
 (let (($x245 (and $x244 $x243)))
 (let (($x246 (= c_ left-to-center)))
 (let (($x247 (and $x246 $x243)))
 (ite $x247 $x261 (ite $x245 (= ?x217 (stack (top ?x71) ?x76)) (ite $x242 $x253 $x268))))))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x227 (left s__)))
 (let ((?x141 (left s___)))
 (let (($x392 (= ?x141 ?x227)))
 (let ((?x223 (right s__)))
 (let ((?x359 (top ?x223)))
 (let ((?x360 (stack ?x359 ?x227)))
 (let (($x386 (= ?x141 ?x360)))
 (let (($x362 ((_ is stack ) ?x223)))
 (let (($x365 (= c__ right-to-left)))
 (let (($x366 (and $x365 $x362)))
 (let ((?x217 (center s__)))
 (let (($x367 ((_ is stack ) ?x217)))
 (let (($x368 (= c__ center-to-right)))
 (let (($x369 (and $x368 $x367)))
 (let ((?x355 (top ?x217)))
 (let ((?x356 (stack ?x355 ?x227)))
 (let (($x383 (= ?x141 ?x356)))
 (let (($x370 (= c__ center-to-left)))
 (let (($x371 (and $x370 $x367)))
 (let ((?x143 (rest ?x227)))
 (let (($x379 (= ?x141 ?x143)))
 (let (($x372 ((_ is stack ) ?x227)))
 (let (($x373 (= c__ left-to-right)))
 (let (($x374 (and $x373 $x372)))
 (let (($x375 (= c__ left-to-center)))
 (let (($x376 (and $x375 $x372)))
 (ite $x376 $x379 (ite $x374 $x379 (ite $x371 $x383 (ite $x369 $x392 (ite $x366 $x386 $x392))))))))))))))))))))))))))))))))
(assert
 (let ((?x223 (right s__)))
 (let ((?x144 (right s___)))
 (let (($x388 (= ?x144 ?x223)))
 (let ((?x358 (rest ?x223)))
 (let (($x385 (= ?x144 ?x358)))
 (let (($x362 ((_ is stack ) ?x223)))
 (let (($x363 (= c__ right-to-center)))
 (let (($x364 (and $x363 $x362)))
 (let (($x365 (= c__ right-to-left)))
 (let (($x366 (and $x365 $x362)))
 (let ((?x217 (center s__)))
 (let ((?x355 (top ?x217)))
 (let ((?x357 (stack ?x355 ?x223)))
 (let (($x384 (= ?x144 ?x357)))
 (let (($x367 ((_ is stack ) ?x217)))
 (let (($x368 (= c__ center-to-right)))
 (let (($x369 (and $x368 $x367)))
 (let (($x370 (= c__ center-to-left)))
 (let (($x371 (and $x370 $x367)))
 (let ((?x227 (left s__)))
 (let (($x372 ((_ is stack ) ?x227)))
 (let (($x373 (= c__ left-to-right)))
 (let (($x374 (and $x373 $x372)))
 (let (($x405 (ite $x374 $x388 (ite $x371 $x388 (ite $x369 $x384 (ite $x366 $x385 (ite $x364 $x385 $x388)))))))
 (let ((?x215 (top ?x227)))
 (let ((?x351 (stack ?x215 ?x223)))
 (let (($x380 (= ?x144 ?x351)))
 (let (($x375 (= c__ left-to-center)))
 (let (($x376 (and $x375 $x372)))
 (ite $x376 $x380 $x405)))))))))))))))))))))))))))))))
(assert
 (let ((?x217 (center s__)))
 (let ((?x352 (center s___)))
 (let (($x390 (= ?x352 ?x217)))
 (let ((?x223 (right s__)))
 (let ((?x359 (top ?x223)))
 (let ((?x361 (stack ?x359 ?x217)))
 (let (($x387 (= ?x352 ?x361)))
 (let (($x362 ((_ is stack ) ?x223)))
 (let (($x363 (= c__ right-to-center)))
 (let (($x364 (and $x363 $x362)))
 (let (($x365 (= c__ right-to-left)))
 (let (($x366 (and $x365 $x362)))
 (let ((?x354 (rest ?x217)))
 (let (($x382 (= ?x352 ?x354)))
 (let (($x367 ((_ is stack ) ?x217)))
 (let (($x368 (= c__ center-to-right)))
 (let (($x369 (and $x368 $x367)))
 (let (($x370 (= c__ center-to-left)))
 (let (($x371 (and $x370 $x367)))
 (let ((?x227 (left s__)))
 (let ((?x215 (top ?x227)))
 (let ((?x353 (stack ?x215 ?x217)))
 (let (($x381 (= ?x352 ?x353)))
 (let (($x372 ((_ is stack ) ?x227)))
 (let (($x373 (= c__ left-to-right)))
 (let (($x374 (and $x373 $x372)))
 (let (($x404 (ite $x374 $x381 (ite $x371 $x382 (ite $x369 $x382 (ite $x366 $x390 (ite $x364 $x387 $x390)))))))
 (let (($x375 (= c__ left-to-center)))
 (let (($x376 (and $x375 $x372)))
 (ite $x376 $x390 $x404)))))))))))))))))))))))))))))))
(assert
 (= c____ c!3))
(assert
 (let ((?x141 (left s___)))
 (let ((?x279 (left s____)))
 (let (($x530 (= ?x279 ?x141)))
 (let ((?x144 (right s___)))
 (let ((?x497 (top ?x144)))
 (let ((?x498 (stack ?x497 ?x141)))
 (let (($x524 (= ?x279 ?x498)))
 (let (($x500 ((_ is stack ) ?x144)))
 (let (($x503 (= c___ right-to-left)))
 (let (($x504 (and $x503 $x500)))
 (let ((?x352 (center s___)))
 (let (($x505 ((_ is stack ) ?x352)))
 (let (($x506 (= c___ center-to-right)))
 (let (($x507 (and $x506 $x505)))
 (let ((?x493 (top ?x352)))
 (let ((?x494 (stack ?x493 ?x141)))
 (let (($x521 (= ?x279 ?x494)))
 (let (($x508 (= c___ center-to-left)))
 (let (($x509 (and $x508 $x505)))
 (let ((?x323 (rest ?x141)))
 (let (($x517 (= ?x279 ?x323)))
 (let (($x510 ((_ is stack ) ?x141)))
 (let (($x511 (= c___ left-to-right)))
 (let (($x512 (and $x511 $x510)))
 (let (($x513 (= c___ left-to-center)))
 (let (($x514 (and $x513 $x510)))
 (ite $x514 $x517 (ite $x512 $x517 (ite $x509 $x521 (ite $x507 $x530 (ite $x504 $x524 $x530))))))))))))))))))))))))))))))))
(assert
 (let ((?x144 (right s___)))
 (let ((?x324 (right s____)))
 (let (($x526 (= ?x324 ?x144)))
 (let ((?x496 (rest ?x144)))
 (let (($x523 (= ?x324 ?x496)))
 (let (($x500 ((_ is stack ) ?x144)))
 (let (($x501 (= c___ right-to-center)))
 (let (($x502 (and $x501 $x500)))
 (let (($x503 (= c___ right-to-left)))
 (let (($x504 (and $x503 $x500)))
 (let ((?x352 (center s___)))
 (let ((?x493 (top ?x352)))
 (let ((?x495 (stack ?x493 ?x144)))
 (let (($x522 (= ?x324 ?x495)))
 (let (($x505 ((_ is stack ) ?x352)))
 (let (($x506 (= c___ center-to-right)))
 (let (($x507 (and $x506 $x505)))
 (let (($x508 (= c___ center-to-left)))
 (let (($x509 (and $x508 $x505)))
 (let ((?x141 (left s___)))
 (let (($x510 ((_ is stack ) ?x141)))
 (let (($x511 (= c___ left-to-right)))
 (let (($x512 (and $x511 $x510)))
 (let (($x543 (ite $x512 $x526 (ite $x509 $x526 (ite $x507 $x522 (ite $x504 $x523 (ite $x502 $x523 $x526)))))))
 (let ((?x350 (top ?x141)))
 (let ((?x489 (stack ?x350 ?x144)))
 (let (($x518 (= ?x324 ?x489)))
 (let (($x513 (= c___ left-to-center)))
 (let (($x514 (and $x513 $x510)))
 (ite $x514 $x518 $x543)))))))))))))))))))))))))))))))
(assert
 (let ((?x352 (center s___)))
 (let ((?x490 (center s____)))
 (let (($x528 (= ?x490 ?x352)))
 (let ((?x144 (right s___)))
 (let ((?x497 (top ?x144)))
 (let ((?x499 (stack ?x497 ?x352)))
 (let (($x525 (= ?x490 ?x499)))
 (let (($x500 ((_ is stack ) ?x144)))
 (let (($x501 (= c___ right-to-center)))
 (let (($x502 (and $x501 $x500)))
 (let (($x503 (= c___ right-to-left)))
 (let (($x504 (and $x503 $x500)))
 (let ((?x492 (rest ?x352)))
 (let (($x520 (= ?x490 ?x492)))
 (let (($x505 ((_ is stack ) ?x352)))
 (let (($x506 (= c___ center-to-right)))
 (let (($x507 (and $x506 $x505)))
 (let (($x508 (= c___ center-to-left)))
 (let (($x509 (and $x508 $x505)))
 (let ((?x141 (left s___)))
 (let ((?x350 (top ?x141)))
 (let ((?x491 (stack ?x350 ?x352)))
 (let (($x519 (= ?x490 ?x491)))
 (let (($x510 ((_ is stack ) ?x141)))
 (let (($x511 (= c___ left-to-right)))
 (let (($x512 (and $x511 $x510)))
 (let (($x542 (ite $x512 $x519 (ite $x509 $x520 (ite $x507 $x520 (ite $x504 $x528 (ite $x502 $x525 $x528)))))))
 (let (($x513 (= c___ left-to-center)))
 (let (($x514 (and $x513 $x510)))
 (ite $x514 $x528 $x542)))))))))))))))))))))))))))))))
(assert
 (= c_____ c!4))
(assert
 (let ((?x279 (left s____)))
 (let ((?x408 (left s_____)))
 (let (($x668 (= ?x408 ?x279)))
 (let ((?x324 (right s____)))
 (let ((?x635 (top ?x324)))
 (let ((?x636 (stack ?x635 ?x279)))
 (let (($x662 (= ?x408 ?x636)))
 (let (($x638 ((_ is stack ) ?x324)))
 (let (($x641 (= c____ right-to-left)))
 (let (($x642 (and $x641 $x638)))
 (let ((?x490 (center s____)))
 (let (($x643 ((_ is stack ) ?x490)))
 (let (($x644 (= c____ center-to-right)))
 (let (($x645 (and $x644 $x643)))
 (let ((?x631 (top ?x490)))
 (let ((?x632 (stack ?x631 ?x279)))
 (let (($x659 (= ?x408 ?x632)))
 (let (($x646 (= c____ center-to-left)))
 (let (($x647 (and $x646 $x643)))
 (let ((?x441 (rest ?x279)))
 (let (($x655 (= ?x408 ?x441)))
 (let (($x648 ((_ is stack ) ?x279)))
 (let (($x649 (= c____ left-to-right)))
 (let (($x650 (and $x649 $x648)))
 (let (($x651 (= c____ left-to-center)))
 (let (($x652 (and $x651 $x648)))
 (ite $x652 $x655 (ite $x650 $x655 (ite $x647 $x659 (ite $x645 $x668 (ite $x642 $x662 $x668))))))))))))))))))))))))))))))))
(assert
 (let ((?x324 (right s____)))
 (let ((?x442 (right s_____)))
 (let (($x664 (= ?x442 ?x324)))
 (let ((?x634 (rest ?x324)))
 (let (($x661 (= ?x442 ?x634)))
 (let (($x638 ((_ is stack ) ?x324)))
 (let (($x639 (= c____ right-to-center)))
 (let (($x640 (and $x639 $x638)))
 (let (($x641 (= c____ right-to-left)))
 (let (($x642 (and $x641 $x638)))
 (let ((?x490 (center s____)))
 (let ((?x631 (top ?x490)))
 (let ((?x633 (stack ?x631 ?x324)))
 (let (($x660 (= ?x442 ?x633)))
 (let (($x643 ((_ is stack ) ?x490)))
 (let (($x644 (= c____ center-to-right)))
 (let (($x645 (and $x644 $x643)))
 (let (($x646 (= c____ center-to-left)))
 (let (($x647 (and $x646 $x643)))
 (let ((?x279 (left s____)))
 (let (($x648 ((_ is stack ) ?x279)))
 (let (($x649 (= c____ left-to-right)))
 (let (($x650 (and $x649 $x648)))
 (let (($x681 (ite $x650 $x664 (ite $x647 $x664 (ite $x645 $x660 (ite $x642 $x661 (ite $x640 $x661 $x664)))))))
 (let ((?x488 (top ?x279)))
 (let ((?x627 (stack ?x488 ?x324)))
 (let (($x656 (= ?x442 ?x627)))
 (let (($x651 (= c____ left-to-center)))
 (let (($x652 (and $x651 $x648)))
 (ite $x652 $x656 $x681)))))))))))))))))))))))))))))))
(assert
 (let ((?x490 (center s____)))
 (let ((?x628 (center s_____)))
 (let (($x666 (= ?x628 ?x490)))
 (let ((?x324 (right s____)))
 (let ((?x635 (top ?x324)))
 (let ((?x637 (stack ?x635 ?x490)))
 (let (($x663 (= ?x628 ?x637)))
 (let (($x638 ((_ is stack ) ?x324)))
 (let (($x639 (= c____ right-to-center)))
 (let (($x640 (and $x639 $x638)))
 (let (($x641 (= c____ right-to-left)))
 (let (($x642 (and $x641 $x638)))
 (let ((?x630 (rest ?x490)))
 (let (($x658 (= ?x628 ?x630)))
 (let (($x643 ((_ is stack ) ?x490)))
 (let (($x644 (= c____ center-to-right)))
 (let (($x645 (and $x644 $x643)))
 (let (($x646 (= c____ center-to-left)))
 (let (($x647 (and $x646 $x643)))
 (let ((?x279 (left s____)))
 (let ((?x488 (top ?x279)))
 (let ((?x629 (stack ?x488 ?x490)))
 (let (($x657 (= ?x628 ?x629)))
 (let (($x648 ((_ is stack ) ?x279)))
 (let (($x649 (= c____ left-to-right)))
 (let (($x650 (and $x649 $x648)))
 (let (($x680 (ite $x650 $x657 (ite $x647 $x658 (ite $x645 $x658 (ite $x642 $x666 (ite $x640 $x663 $x666)))))))
 (let (($x651 (= c____ left-to-center)))
 (let (($x652 (and $x651 $x648)))
 (ite $x652 $x666 $x680)))))))))))))))))))))))))))))))
(assert
 (= c______ c!5))
(assert
 (let ((?x408 (left s_____)))
 (let ((?x546 (left s______)))
 (let (($x806 (= ?x546 ?x408)))
 (let ((?x442 (right s_____)))
 (let ((?x773 (top ?x442)))
 (let ((?x774 (stack ?x773 ?x408)))
 (let (($x800 (= ?x546 ?x774)))
 (let (($x776 ((_ is stack ) ?x442)))
 (let (($x779 (= c_____ right-to-left)))
 (let (($x780 (and $x779 $x776)))
 (let ((?x628 (center s_____)))
 (let (($x781 ((_ is stack ) ?x628)))
 (let (($x782 (= c_____ center-to-right)))
 (let (($x783 (and $x782 $x781)))
 (let ((?x769 (top ?x628)))
 (let ((?x770 (stack ?x769 ?x408)))
 (let (($x797 (= ?x546 ?x770)))
 (let (($x784 (= c_____ center-to-left)))
 (let (($x785 (and $x784 $x781)))
 (let ((?x579 (rest ?x408)))
 (let (($x793 (= ?x546 ?x579)))
 (let (($x786 ((_ is stack ) ?x408)))
 (let (($x787 (= c_____ left-to-right)))
 (let (($x788 (and $x787 $x786)))
 (let (($x789 (= c_____ left-to-center)))
 (let (($x790 (and $x789 $x786)))
 (ite $x790 $x793 (ite $x788 $x793 (ite $x785 $x797 (ite $x783 $x806 (ite $x780 $x800 $x806))))))))))))))))))))))))))))))))
(assert
 (let ((?x442 (right s_____)))
 (let ((?x580 (right s______)))
 (let (($x802 (= ?x580 ?x442)))
 (let ((?x772 (rest ?x442)))
 (let (($x799 (= ?x580 ?x772)))
 (let (($x776 ((_ is stack ) ?x442)))
 (let (($x777 (= c_____ right-to-center)))
 (let (($x778 (and $x777 $x776)))
 (let (($x779 (= c_____ right-to-left)))
 (let (($x780 (and $x779 $x776)))
 (let ((?x628 (center s_____)))
 (let ((?x769 (top ?x628)))
 (let ((?x771 (stack ?x769 ?x442)))
 (let (($x798 (= ?x580 ?x771)))
 (let (($x781 ((_ is stack ) ?x628)))
 (let (($x782 (= c_____ center-to-right)))
 (let (($x783 (and $x782 $x781)))
 (let (($x784 (= c_____ center-to-left)))
 (let (($x785 (and $x784 $x781)))
 (let ((?x408 (left s_____)))
 (let (($x786 ((_ is stack ) ?x408)))
 (let (($x787 (= c_____ left-to-right)))
 (let (($x788 (and $x787 $x786)))
 (let (($x819 (ite $x788 $x802 (ite $x785 $x802 (ite $x783 $x798 (ite $x780 $x799 (ite $x778 $x799 $x802)))))))
 (let ((?x626 (top ?x408)))
 (let ((?x765 (stack ?x626 ?x442)))
 (let (($x794 (= ?x580 ?x765)))
 (let (($x789 (= c_____ left-to-center)))
 (let (($x790 (and $x789 $x786)))
 (ite $x790 $x794 $x819)))))))))))))))))))))))))))))))
(assert
 (let ((?x628 (center s_____)))
 (let ((?x766 (center s______)))
 (let (($x804 (= ?x766 ?x628)))
 (let ((?x442 (right s_____)))
 (let ((?x773 (top ?x442)))
 (let ((?x775 (stack ?x773 ?x628)))
 (let (($x801 (= ?x766 ?x775)))
 (let (($x776 ((_ is stack ) ?x442)))
 (let (($x777 (= c_____ right-to-center)))
 (let (($x778 (and $x777 $x776)))
 (let (($x779 (= c_____ right-to-left)))
 (let (($x780 (and $x779 $x776)))
 (let ((?x768 (rest ?x628)))
 (let (($x796 (= ?x766 ?x768)))
 (let (($x781 ((_ is stack ) ?x628)))
 (let (($x782 (= c_____ center-to-right)))
 (let (($x783 (and $x782 $x781)))
 (let (($x784 (= c_____ center-to-left)))
 (let (($x785 (and $x784 $x781)))
 (let ((?x408 (left s_____)))
 (let ((?x626 (top ?x408)))
 (let ((?x767 (stack ?x626 ?x628)))
 (let (($x795 (= ?x766 ?x767)))
 (let (($x786 ((_ is stack ) ?x408)))
 (let (($x787 (= c_____ left-to-right)))
 (let (($x788 (and $x787 $x786)))
 (let (($x818 (ite $x788 $x795 (ite $x785 $x796 (ite $x783 $x796 (ite $x780 $x804 (ite $x778 $x801 $x804)))))))
 (let (($x789 (= c_____ left-to-center)))
 (let (($x790 (and $x789 $x786)))
 (ite $x790 $x804 $x818)))))))))))))))))))))))))))))))
(assert
 (= c_______ c!6))
(assert
 (let ((?x546 (left s______)))
 (let ((?x684 (left s_______)))
 (let (($x944 (= ?x684 ?x546)))
 (let ((?x580 (right s______)))
 (let ((?x911 (top ?x580)))
 (let ((?x912 (stack ?x911 ?x546)))
 (let (($x938 (= ?x684 ?x912)))
 (let (($x914 ((_ is stack ) ?x580)))
 (let (($x917 (= c______ right-to-left)))
 (let (($x918 (and $x917 $x914)))
 (let ((?x766 (center s______)))
 (let (($x919 ((_ is stack ) ?x766)))
 (let (($x920 (= c______ center-to-right)))
 (let (($x921 (and $x920 $x919)))
 (let ((?x907 (top ?x766)))
 (let ((?x908 (stack ?x907 ?x546)))
 (let (($x935 (= ?x684 ?x908)))
 (let (($x922 (= c______ center-to-left)))
 (let (($x923 (and $x922 $x919)))
 (let ((?x717 (rest ?x546)))
 (let (($x931 (= ?x684 ?x717)))
 (let (($x924 ((_ is stack ) ?x546)))
 (let (($x925 (= c______ left-to-right)))
 (let (($x926 (and $x925 $x924)))
 (let (($x927 (= c______ left-to-center)))
 (let (($x928 (and $x927 $x924)))
 (ite $x928 $x931 (ite $x926 $x931 (ite $x923 $x935 (ite $x921 $x944 (ite $x918 $x938 $x944))))))))))))))))))))))))))))))))
(assert
 (let ((?x580 (right s______)))
 (let ((?x718 (right s_______)))
 (let (($x940 (= ?x718 ?x580)))
 (let ((?x910 (rest ?x580)))
 (let (($x937 (= ?x718 ?x910)))
 (let (($x914 ((_ is stack ) ?x580)))
 (let (($x915 (= c______ right-to-center)))
 (let (($x916 (and $x915 $x914)))
 (let (($x917 (= c______ right-to-left)))
 (let (($x918 (and $x917 $x914)))
 (let ((?x766 (center s______)))
 (let ((?x907 (top ?x766)))
 (let ((?x909 (stack ?x907 ?x580)))
 (let (($x936 (= ?x718 ?x909)))
 (let (($x919 ((_ is stack ) ?x766)))
 (let (($x920 (= c______ center-to-right)))
 (let (($x921 (and $x920 $x919)))
 (let (($x922 (= c______ center-to-left)))
 (let (($x923 (and $x922 $x919)))
 (let ((?x546 (left s______)))
 (let (($x924 ((_ is stack ) ?x546)))
 (let (($x925 (= c______ left-to-right)))
 (let (($x926 (and $x925 $x924)))
 (let (($x957 (ite $x926 $x940 (ite $x923 $x940 (ite $x921 $x936 (ite $x918 $x937 (ite $x916 $x937 $x940)))))))
 (let ((?x764 (top ?x546)))
 (let ((?x903 (stack ?x764 ?x580)))
 (let (($x932 (= ?x718 ?x903)))
 (let (($x927 (= c______ left-to-center)))
 (let (($x928 (and $x927 $x924)))
 (ite $x928 $x932 $x957)))))))))))))))))))))))))))))))
(assert
 (let ((?x766 (center s______)))
 (let ((?x904 (center s_______)))
 (let (($x942 (= ?x904 ?x766)))
 (let ((?x580 (right s______)))
 (let ((?x911 (top ?x580)))
 (let ((?x913 (stack ?x911 ?x766)))
 (let (($x939 (= ?x904 ?x913)))
 (let (($x914 ((_ is stack ) ?x580)))
 (let (($x915 (= c______ right-to-center)))
 (let (($x916 (and $x915 $x914)))
 (let (($x917 (= c______ right-to-left)))
 (let (($x918 (and $x917 $x914)))
 (let ((?x906 (rest ?x766)))
 (let (($x934 (= ?x904 ?x906)))
 (let (($x919 ((_ is stack ) ?x766)))
 (let (($x920 (= c______ center-to-right)))
 (let (($x921 (and $x920 $x919)))
 (let (($x922 (= c______ center-to-left)))
 (let (($x923 (and $x922 $x919)))
 (let ((?x546 (left s______)))
 (let ((?x764 (top ?x546)))
 (let ((?x905 (stack ?x764 ?x766)))
 (let (($x933 (= ?x904 ?x905)))
 (let (($x924 ((_ is stack ) ?x546)))
 (let (($x925 (= c______ left-to-right)))
 (let (($x926 (and $x925 $x924)))
 (let (($x956 (ite $x926 $x933 (ite $x923 $x934 (ite $x921 $x934 (ite $x918 $x942 (ite $x916 $x939 $x942)))))))
 (let (($x927 (= c______ left-to-center)))
 (let (($x928 (and $x927 $x924)))
 (ite $x928 $x942 $x956)))))))))))))))))))))))))))))))
(assert
 (= c________ c!7))
(assert
 (let ((?x684 (left s_______)))
 (let ((?x822 (left s________)))
 (let (($x1082 (= ?x822 ?x684)))
 (let ((?x718 (right s_______)))
 (let ((?x1049 (top ?x718)))
 (let ((?x1050 (stack ?x1049 ?x684)))
 (let (($x1076 (= ?x822 ?x1050)))
 (let (($x1052 ((_ is stack ) ?x718)))
 (let (($x1055 (= c_______ right-to-left)))
 (let (($x1056 (and $x1055 $x1052)))
 (let ((?x904 (center s_______)))
 (let (($x1057 ((_ is stack ) ?x904)))
 (let (($x1058 (= c_______ center-to-right)))
 (let (($x1059 (and $x1058 $x1057)))
 (let ((?x1045 (top ?x904)))
 (let ((?x1046 (stack ?x1045 ?x684)))
 (let (($x1073 (= ?x822 ?x1046)))
 (let (($x1060 (= c_______ center-to-left)))
 (let (($x1061 (and $x1060 $x1057)))
 (let ((?x855 (rest ?x684)))
 (let (($x1069 (= ?x822 ?x855)))
 (let (($x1062 ((_ is stack ) ?x684)))
 (let (($x1063 (= c_______ left-to-right)))
 (let (($x1064 (and $x1063 $x1062)))
 (let (($x1065 (= c_______ left-to-center)))
 (let (($x1066 (and $x1065 $x1062)))
 (ite $x1066 $x1069 (ite $x1064 $x1069 (ite $x1061 $x1073 (ite $x1059 $x1082 (ite $x1056 $x1076 $x1082))))))))))))))))))))))))))))))))
(assert
 (let ((?x718 (right s_______)))
 (let ((?x856 (right s________)))
 (let (($x1078 (= ?x856 ?x718)))
 (let ((?x1048 (rest ?x718)))
 (let (($x1075 (= ?x856 ?x1048)))
 (let (($x1052 ((_ is stack ) ?x718)))
 (let (($x1053 (= c_______ right-to-center)))
 (let (($x1054 (and $x1053 $x1052)))
 (let (($x1055 (= c_______ right-to-left)))
 (let (($x1056 (and $x1055 $x1052)))
 (let ((?x904 (center s_______)))
 (let ((?x1045 (top ?x904)))
 (let ((?x1047 (stack ?x1045 ?x718)))
 (let (($x1074 (= ?x856 ?x1047)))
 (let (($x1057 ((_ is stack ) ?x904)))
 (let (($x1058 (= c_______ center-to-right)))
 (let (($x1059 (and $x1058 $x1057)))
 (let (($x1060 (= c_______ center-to-left)))
 (let (($x1061 (and $x1060 $x1057)))
 (let ((?x684 (left s_______)))
 (let (($x1062 ((_ is stack ) ?x684)))
 (let (($x1063 (= c_______ left-to-right)))
 (let (($x1064 (and $x1063 $x1062)))
 (let (($x1095 (ite $x1064 $x1078 (ite $x1061 $x1078 (ite $x1059 $x1074 (ite $x1056 $x1075 (ite $x1054 $x1075 $x1078)))))))
 (let ((?x902 (top ?x684)))
 (let ((?x1041 (stack ?x902 ?x718)))
 (let (($x1070 (= ?x856 ?x1041)))
 (let (($x1065 (= c_______ left-to-center)))
 (let (($x1066 (and $x1065 $x1062)))
 (ite $x1066 $x1070 $x1095)))))))))))))))))))))))))))))))
(assert
 (let ((?x904 (center s_______)))
 (let ((?x1042 (center s________)))
 (let (($x1080 (= ?x1042 ?x904)))
 (let ((?x718 (right s_______)))
 (let ((?x1049 (top ?x718)))
 (let ((?x1051 (stack ?x1049 ?x904)))
 (let (($x1077 (= ?x1042 ?x1051)))
 (let (($x1052 ((_ is stack ) ?x718)))
 (let (($x1053 (= c_______ right-to-center)))
 (let (($x1054 (and $x1053 $x1052)))
 (let (($x1055 (= c_______ right-to-left)))
 (let (($x1056 (and $x1055 $x1052)))
 (let ((?x1044 (rest ?x904)))
 (let (($x1072 (= ?x1042 ?x1044)))
 (let (($x1057 ((_ is stack ) ?x904)))
 (let (($x1058 (= c_______ center-to-right)))
 (let (($x1059 (and $x1058 $x1057)))
 (let (($x1060 (= c_______ center-to-left)))
 (let (($x1061 (and $x1060 $x1057)))
 (let ((?x684 (left s_______)))
 (let ((?x902 (top ?x684)))
 (let ((?x1043 (stack ?x902 ?x904)))
 (let (($x1071 (= ?x1042 ?x1043)))
 (let (($x1062 ((_ is stack ) ?x684)))
 (let (($x1063 (= c_______ left-to-right)))
 (let (($x1064 (and $x1063 $x1062)))
 (let (($x1094 (ite $x1064 $x1071 (ite $x1061 $x1072 (ite $x1059 $x1072 (ite $x1056 $x1080 (ite $x1054 $x1077 $x1080)))))))
 (let (($x1065 (= c_______ left-to-center)))
 (let (($x1066 (and $x1065 $x1062)))
 (ite $x1066 $x1080 $x1094)))))))))))))))))))))))))))))))
(assert
 (= c_________ c!8))
(assert
 (let ((?x822 (left s________)))
 (let ((?x960 (left s_________)))
 (let (($x1220 (= ?x960 ?x822)))
 (let ((?x856 (right s________)))
 (let ((?x1187 (top ?x856)))
 (let ((?x1188 (stack ?x1187 ?x822)))
 (let (($x1214 (= ?x960 ?x1188)))
 (let (($x1190 ((_ is stack ) ?x856)))
 (let (($x1193 (= c________ right-to-left)))
 (let (($x1194 (and $x1193 $x1190)))
 (let ((?x1042 (center s________)))
 (let (($x1195 ((_ is stack ) ?x1042)))
 (let (($x1196 (= c________ center-to-right)))
 (let (($x1197 (and $x1196 $x1195)))
 (let ((?x1183 (top ?x1042)))
 (let ((?x1184 (stack ?x1183 ?x822)))
 (let (($x1211 (= ?x960 ?x1184)))
 (let (($x1198 (= c________ center-to-left)))
 (let (($x1199 (and $x1198 $x1195)))
 (let ((?x993 (rest ?x822)))
 (let (($x1207 (= ?x960 ?x993)))
 (let (($x1200 ((_ is stack ) ?x822)))
 (let (($x1201 (= c________ left-to-right)))
 (let (($x1202 (and $x1201 $x1200)))
 (let (($x1203 (= c________ left-to-center)))
 (let (($x1204 (and $x1203 $x1200)))
 (ite $x1204 $x1207 (ite $x1202 $x1207 (ite $x1199 $x1211 (ite $x1197 $x1220 (ite $x1194 $x1214 $x1220))))))))))))))))))))))))))))))))
(assert
 (let ((?x856 (right s________)))
 (let ((?x994 (right s_________)))
 (let (($x1216 (= ?x994 ?x856)))
 (let ((?x1186 (rest ?x856)))
 (let (($x1213 (= ?x994 ?x1186)))
 (let (($x1190 ((_ is stack ) ?x856)))
 (let (($x1191 (= c________ right-to-center)))
 (let (($x1192 (and $x1191 $x1190)))
 (let (($x1193 (= c________ right-to-left)))
 (let (($x1194 (and $x1193 $x1190)))
 (let ((?x1042 (center s________)))
 (let ((?x1183 (top ?x1042)))
 (let ((?x1185 (stack ?x1183 ?x856)))
 (let (($x1212 (= ?x994 ?x1185)))
 (let (($x1195 ((_ is stack ) ?x1042)))
 (let (($x1196 (= c________ center-to-right)))
 (let (($x1197 (and $x1196 $x1195)))
 (let (($x1198 (= c________ center-to-left)))
 (let (($x1199 (and $x1198 $x1195)))
 (let ((?x822 (left s________)))
 (let (($x1200 ((_ is stack ) ?x822)))
 (let (($x1201 (= c________ left-to-right)))
 (let (($x1202 (and $x1201 $x1200)))
 (let (($x1233 (ite $x1202 $x1216 (ite $x1199 $x1216 (ite $x1197 $x1212 (ite $x1194 $x1213 (ite $x1192 $x1213 $x1216)))))))
 (let ((?x1040 (top ?x822)))
 (let ((?x1179 (stack ?x1040 ?x856)))
 (let (($x1208 (= ?x994 ?x1179)))
 (let (($x1203 (= c________ left-to-center)))
 (let (($x1204 (and $x1203 $x1200)))
 (ite $x1204 $x1208 $x1233)))))))))))))))))))))))))))))))
(assert
 (let ((?x1042 (center s________)))
 (let ((?x1180 (center s_________)))
 (let (($x1218 (= ?x1180 ?x1042)))
 (let ((?x856 (right s________)))
 (let ((?x1187 (top ?x856)))
 (let ((?x1189 (stack ?x1187 ?x1042)))
 (let (($x1215 (= ?x1180 ?x1189)))
 (let (($x1190 ((_ is stack ) ?x856)))
 (let (($x1191 (= c________ right-to-center)))
 (let (($x1192 (and $x1191 $x1190)))
 (let (($x1193 (= c________ right-to-left)))
 (let (($x1194 (and $x1193 $x1190)))
 (let ((?x1182 (rest ?x1042)))
 (let (($x1210 (= ?x1180 ?x1182)))
 (let (($x1195 ((_ is stack ) ?x1042)))
 (let (($x1196 (= c________ center-to-right)))
 (let (($x1197 (and $x1196 $x1195)))
 (let (($x1198 (= c________ center-to-left)))
 (let (($x1199 (and $x1198 $x1195)))
 (let ((?x822 (left s________)))
 (let ((?x1040 (top ?x822)))
 (let ((?x1181 (stack ?x1040 ?x1042)))
 (let (($x1209 (= ?x1180 ?x1181)))
 (let (($x1200 ((_ is stack ) ?x822)))
 (let (($x1201 (= c________ left-to-right)))
 (let (($x1202 (and $x1201 $x1200)))
 (let (($x1232 (ite $x1202 $x1209 (ite $x1199 $x1210 (ite $x1197 $x1210 (ite $x1194 $x1218 (ite $x1192 $x1215 $x1218)))))))
 (let (($x1203 (= c________ left-to-center)))
 (let (($x1204 (and $x1203 $x1200)))
 (ite $x1204 $x1218 $x1232)))))))))))))))))))))))))))))))
(assert
 (= c__________ c!9))
(assert
 (let ((?x960 (left s_________)))
 (let ((?x1098 (left s__________)))
 (let (($x1358 (= ?x1098 ?x960)))
 (let ((?x994 (right s_________)))
 (let ((?x1325 (top ?x994)))
 (let ((?x1326 (stack ?x1325 ?x960)))
 (let (($x1352 (= ?x1098 ?x1326)))
 (let (($x1328 ((_ is stack ) ?x994)))
 (let (($x1331 (= c_________ right-to-left)))
 (let (($x1332 (and $x1331 $x1328)))
 (let ((?x1180 (center s_________)))
 (let (($x1333 ((_ is stack ) ?x1180)))
 (let (($x1334 (= c_________ center-to-right)))
 (let (($x1335 (and $x1334 $x1333)))
 (let ((?x1321 (top ?x1180)))
 (let ((?x1322 (stack ?x1321 ?x960)))
 (let (($x1349 (= ?x1098 ?x1322)))
 (let (($x1336 (= c_________ center-to-left)))
 (let (($x1337 (and $x1336 $x1333)))
 (let ((?x1131 (rest ?x960)))
 (let (($x1345 (= ?x1098 ?x1131)))
 (let (($x1338 ((_ is stack ) ?x960)))
 (let (($x1339 (= c_________ left-to-right)))
 (let (($x1340 (and $x1339 $x1338)))
 (let (($x1341 (= c_________ left-to-center)))
 (let (($x1342 (and $x1341 $x1338)))
 (ite $x1342 $x1345 (ite $x1340 $x1345 (ite $x1337 $x1349 (ite $x1335 $x1358 (ite $x1332 $x1352 $x1358))))))))))))))))))))))))))))))))
(assert
 (let ((?x994 (right s_________)))
 (let ((?x1132 (right s__________)))
 (let (($x1354 (= ?x1132 ?x994)))
 (let ((?x1324 (rest ?x994)))
 (let (($x1351 (= ?x1132 ?x1324)))
 (let (($x1328 ((_ is stack ) ?x994)))
 (let (($x1329 (= c_________ right-to-center)))
 (let (($x1330 (and $x1329 $x1328)))
 (let (($x1331 (= c_________ right-to-left)))
 (let (($x1332 (and $x1331 $x1328)))
 (let ((?x1180 (center s_________)))
 (let ((?x1321 (top ?x1180)))
 (let ((?x1323 (stack ?x1321 ?x994)))
 (let (($x1350 (= ?x1132 ?x1323)))
 (let (($x1333 ((_ is stack ) ?x1180)))
 (let (($x1334 (= c_________ center-to-right)))
 (let (($x1335 (and $x1334 $x1333)))
 (let (($x1336 (= c_________ center-to-left)))
 (let (($x1337 (and $x1336 $x1333)))
 (let ((?x960 (left s_________)))
 (let (($x1338 ((_ is stack ) ?x960)))
 (let (($x1339 (= c_________ left-to-right)))
 (let (($x1340 (and $x1339 $x1338)))
 (let (($x1371 (ite $x1340 $x1354 (ite $x1337 $x1354 (ite $x1335 $x1350 (ite $x1332 $x1351 (ite $x1330 $x1351 $x1354)))))))
 (let ((?x1178 (top ?x960)))
 (let ((?x1317 (stack ?x1178 ?x994)))
 (let (($x1346 (= ?x1132 ?x1317)))
 (let (($x1341 (= c_________ left-to-center)))
 (let (($x1342 (and $x1341 $x1338)))
 (ite $x1342 $x1346 $x1371)))))))))))))))))))))))))))))))
(assert
 (let ((?x1180 (center s_________)))
 (let ((?x1318 (center s__________)))
 (let (($x1356 (= ?x1318 ?x1180)))
 (let ((?x994 (right s_________)))
 (let ((?x1325 (top ?x994)))
 (let ((?x1327 (stack ?x1325 ?x1180)))
 (let (($x1353 (= ?x1318 ?x1327)))
 (let (($x1328 ((_ is stack ) ?x994)))
 (let (($x1329 (= c_________ right-to-center)))
 (let (($x1330 (and $x1329 $x1328)))
 (let (($x1331 (= c_________ right-to-left)))
 (let (($x1332 (and $x1331 $x1328)))
 (let ((?x1320 (rest ?x1180)))
 (let (($x1348 (= ?x1318 ?x1320)))
 (let (($x1333 ((_ is stack ) ?x1180)))
 (let (($x1334 (= c_________ center-to-right)))
 (let (($x1335 (and $x1334 $x1333)))
 (let (($x1336 (= c_________ center-to-left)))
 (let (($x1337 (and $x1336 $x1333)))
 (let ((?x960 (left s_________)))
 (let ((?x1178 (top ?x960)))
 (let ((?x1319 (stack ?x1178 ?x1180)))
 (let (($x1347 (= ?x1318 ?x1319)))
 (let (($x1338 ((_ is stack ) ?x960)))
 (let (($x1339 (= c_________ left-to-right)))
 (let (($x1340 (and $x1339 $x1338)))
 (let (($x1370 (ite $x1340 $x1347 (ite $x1337 $x1348 (ite $x1335 $x1348 (ite $x1332 $x1356 (ite $x1330 $x1353 $x1356)))))))
 (let (($x1341 (= c_________ left-to-center)))
 (let (($x1342 (and $x1341 $x1338)))
 (ite $x1342 $x1356 $x1370)))))))))))))))))))))))))))))))
(assert
 (let ((?x47 (stack K (stack G (stack C empty)))))
 (let ((?x1132 (right s__________)))
 (let (($x1374 (= ?x1132 ?x47)))
 (let ((?x41 (stack H (stack F (stack D (stack E (stack I (stack B empty))))))))
 (let ((?x44 (stack A (stack L (stack J ?x41)))))
 (let ((?x1318 (center s__________)))
 (let (($x1405 (= ?x1318 ?x44)))
 (let ((?x1098 (left s__________)))
 (let (($x1406 (= ?x1098 empty)))
 (let (($x1408 (not (and $x1406 $x1405 $x1374))))
 (not $x1408))))))))))))
(check-sat)
(exit)
