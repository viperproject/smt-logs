(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N 0)) (((A) (B) (C) (D) (E) (F) (G) (H) (I) (J) (K) (L) (M) (N))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(declare-fun c!3 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s____ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x27 (stack B empty)))
 (let ((?x26 (stack I ?x27)))
 (let ((?x28 (stack N ?x26)))
 (let ((?x29 (stack K ?x28)))
 (let ((?x30 (stack J ?x29)))
 (let ((?x31 (stack E ?x30)))
 (let ((?x32 (stack C ?x31)))
 (let ((?x33 (stack D ?x32)))
 (let ((?x34 (stack F ?x33)))
 (let ((?x35 (stack M ?x34)))
 (let ((?x36 (stack G ?x35)))
 (let ((?x37 (stack A ?x36)))
 (let ((?x98 (left s_tmp_)))
 (= ?x98 ?x37)))))))))))))))
(assert
 (let ((?x38 (stack H empty)))
 (let ((?x101 (center s_tmp__)))
 (= ?x101 ?x38))))
(assert
 (let ((?x39 (stack L empty)))
 (let ((?x104 (right s_tmp___)))
 (= ?x104 ?x39))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x131 (left s_tmp__)))
 (= (left s_tmp___) ?x131)))
(assert
 (let ((?x101 (center s_tmp__)))
 (= (center s_tmp___) ?x101)))
(assert
 (let ((?x135 (center s_tmp_)))
 (= ?x135 (center s_tmp))))
(assert
 (let ((?x138 (right s_tmp_)))
 (= ?x138 (right s_tmp))))
(assert
 (let ((?x98 (left s_tmp_)))
 (let ((?x131 (left s_tmp__)))
 (= ?x131 ?x98))))
(assert
 (let ((?x138 (right s_tmp_)))
 (let ((?x142 (right s_tmp__)))
 (= ?x142 ?x138))))
(assert
 (= c__ c!1))
(assert
 (let ((?x75 (left s_)))
 (let ((?x243 (left s__)))
 (let (($x273 (= ?x243 ?x75)))
 (let ((?x78 (right s_)))
 (let (($x234 ((_ is stack ) ?x78)))
 (let (($x231 (= c_ right-to-left)))
 (let (($x247 (and $x231 $x234)))
 (let ((?x80 (center s_)))
 (let (($x248 ((_ is stack ) ?x80)))
 (let (($x249 (= c_ center-to-right)))
 (let (($x250 (and $x249 $x248)))
 (let (($x251 (= c_ center-to-left)))
 (let (($x252 (and $x251 $x248)))
 (let (($x282 (ite $x252 (= ?x243 (stack (top ?x80) ?x75)) (ite $x250 $x273 (ite $x247 (= ?x243 (stack (top ?x78) ?x75)) $x273)))))
 (let (($x260 (= ?x243 (rest ?x75))))
 (let (($x253 ((_ is stack ) ?x75)))
 (let (($x254 (= c_ left-to-right)))
 (let (($x255 (and $x254 $x253)))
 (let (($x256 (= c_ left-to-center)))
 (let (($x257 (and $x256 $x253)))
 (ite $x257 $x260 (ite $x255 $x260 $x282)))))))))))))))))))))))
(assert
 (let ((?x78 (right s_)))
 (let ((?x245 (right s__)))
 (let (($x269 (= ?x245 ?x78)))
 (let (($x266 (= ?x245 (rest ?x78))))
 (let (($x234 ((_ is stack ) ?x78)))
 (let (($x229 (= c_ right-to-center)))
 (let (($x230 (and $x229 $x234)))
 (let (($x231 (= c_ right-to-left)))
 (let (($x247 (and $x231 $x234)))
 (let ((?x80 (center s_)))
 (let (($x248 ((_ is stack ) ?x80)))
 (let (($x249 (= c_ center-to-right)))
 (let (($x250 (and $x249 $x248)))
 (let (($x279 (ite $x250 (= ?x245 (stack (top ?x80) ?x78)) (ite $x247 $x266 (ite $x230 $x266 $x269)))))
 (let (($x251 (= c_ center-to-left)))
 (let (($x252 (and $x251 $x248)))
 (let ((?x75 (left s_)))
 (let (($x253 ((_ is stack ) ?x75)))
 (let (($x254 (= c_ left-to-right)))
 (let (($x255 (and $x254 $x253)))
 (let (($x256 (= c_ left-to-center)))
 (let (($x257 (and $x256 $x253)))
 (ite $x257 (= ?x245 (stack (top ?x75) ?x78)) (ite $x255 $x269 (ite $x252 $x269 $x279))))))))))))))))))))))))))
(assert
 (let ((?x80 (center s_)))
 (let ((?x239 (center s__)))
 (let (($x271 (= ?x239 ?x80)))
 (let ((?x78 (right s_)))
 (let (($x234 ((_ is stack ) ?x78)))
 (let (($x229 (= c_ right-to-center)))
 (let (($x230 (and $x229 $x234)))
 (let (($x231 (= c_ right-to-left)))
 (let (($x247 (and $x231 $x234)))
 (let (($x263 (= ?x239 (rest ?x80))))
 (let (($x248 ((_ is stack ) ?x80)))
 (let (($x249 (= c_ center-to-right)))
 (let (($x250 (and $x249 $x248)))
 (let (($x278 (ite $x250 $x263 (ite $x247 $x271 (ite $x230 (= ?x239 (stack (top ?x78) ?x80)) $x271)))))
 (let (($x251 (= c_ center-to-left)))
 (let (($x252 (and $x251 $x248)))
 (let ((?x75 (left s_)))
 (let (($x253 ((_ is stack ) ?x75)))
 (let (($x254 (= c_ left-to-right)))
 (let (($x255 (and $x254 $x253)))
 (let (($x256 (= c_ left-to-center)))
 (let (($x257 (and $x256 $x253)))
 (ite $x257 $x271 (ite $x255 (= ?x239 (stack (top ?x75) ?x80)) (ite $x252 $x263 $x278))))))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x243 (left s__)))
 (let ((?x145 (left s___)))
 (let (($x402 (= ?x145 ?x243)))
 (let ((?x245 (right s__)))
 (let ((?x369 (top ?x245)))
 (let ((?x370 (stack ?x369 ?x243)))
 (let (($x396 (= ?x145 ?x370)))
 (let (($x372 ((_ is stack ) ?x245)))
 (let (($x375 (= c__ right-to-left)))
 (let (($x376 (and $x375 $x372)))
 (let ((?x239 (center s__)))
 (let (($x377 ((_ is stack ) ?x239)))
 (let (($x378 (= c__ center-to-right)))
 (let (($x379 (and $x378 $x377)))
 (let ((?x365 (top ?x239)))
 (let ((?x366 (stack ?x365 ?x243)))
 (let (($x393 (= ?x145 ?x366)))
 (let (($x380 (= c__ center-to-left)))
 (let (($x381 (and $x380 $x377)))
 (let ((?x147 (rest ?x243)))
 (let (($x389 (= ?x145 ?x147)))
 (let (($x382 ((_ is stack ) ?x243)))
 (let (($x383 (= c__ left-to-right)))
 (let (($x384 (and $x383 $x382)))
 (let (($x385 (= c__ left-to-center)))
 (let (($x386 (and $x385 $x382)))
 (ite $x386 $x389 (ite $x384 $x389 (ite $x381 $x393 (ite $x379 $x402 (ite $x376 $x396 $x402))))))))))))))))))))))))))))))))
(assert
 (let ((?x245 (right s__)))
 (let ((?x148 (right s___)))
 (let (($x398 (= ?x148 ?x245)))
 (let ((?x368 (rest ?x245)))
 (let (($x395 (= ?x148 ?x368)))
 (let (($x372 ((_ is stack ) ?x245)))
 (let (($x373 (= c__ right-to-center)))
 (let (($x374 (and $x373 $x372)))
 (let (($x375 (= c__ right-to-left)))
 (let (($x376 (and $x375 $x372)))
 (let ((?x239 (center s__)))
 (let ((?x365 (top ?x239)))
 (let ((?x367 (stack ?x365 ?x245)))
 (let (($x394 (= ?x148 ?x367)))
 (let (($x377 ((_ is stack ) ?x239)))
 (let (($x378 (= c__ center-to-right)))
 (let (($x379 (and $x378 $x377)))
 (let (($x380 (= c__ center-to-left)))
 (let (($x381 (and $x380 $x377)))
 (let ((?x243 (left s__)))
 (let (($x382 ((_ is stack ) ?x243)))
 (let (($x383 (= c__ left-to-right)))
 (let (($x384 (and $x383 $x382)))
 (let (($x415 (ite $x384 $x398 (ite $x381 $x398 (ite $x379 $x394 (ite $x376 $x395 (ite $x374 $x395 $x398)))))))
 (let ((?x225 (top ?x243)))
 (let ((?x361 (stack ?x225 ?x245)))
 (let (($x390 (= ?x148 ?x361)))
 (let (($x385 (= c__ left-to-center)))
 (let (($x386 (and $x385 $x382)))
 (ite $x386 $x390 $x415)))))))))))))))))))))))))))))))
(assert
 (let ((?x239 (center s__)))
 (let ((?x362 (center s___)))
 (let (($x400 (= ?x362 ?x239)))
 (let ((?x245 (right s__)))
 (let ((?x369 (top ?x245)))
 (let ((?x371 (stack ?x369 ?x239)))
 (let (($x397 (= ?x362 ?x371)))
 (let (($x372 ((_ is stack ) ?x245)))
 (let (($x373 (= c__ right-to-center)))
 (let (($x374 (and $x373 $x372)))
 (let (($x375 (= c__ right-to-left)))
 (let (($x376 (and $x375 $x372)))
 (let ((?x364 (rest ?x239)))
 (let (($x392 (= ?x362 ?x364)))
 (let (($x377 ((_ is stack ) ?x239)))
 (let (($x378 (= c__ center-to-right)))
 (let (($x379 (and $x378 $x377)))
 (let (($x380 (= c__ center-to-left)))
 (let (($x381 (and $x380 $x377)))
 (let ((?x243 (left s__)))
 (let ((?x225 (top ?x243)))
 (let ((?x363 (stack ?x225 ?x239)))
 (let (($x391 (= ?x362 ?x363)))
 (let (($x382 ((_ is stack ) ?x243)))
 (let (($x383 (= c__ left-to-right)))
 (let (($x384 (and $x383 $x382)))
 (let (($x414 (ite $x384 $x391 (ite $x381 $x392 (ite $x379 $x392 (ite $x376 $x400 (ite $x374 $x397 $x400)))))))
 (let (($x385 (= c__ left-to-center)))
 (let (($x386 (and $x385 $x382)))
 (ite $x386 $x400 $x414)))))))))))))))))))))))))))))))
(assert
 (= c____ c!3))
(assert
 (let ((?x145 (left s___)))
 (let ((?x289 (left s____)))
 (let (($x540 (= ?x289 ?x145)))
 (let ((?x148 (right s___)))
 (let ((?x507 (top ?x148)))
 (let ((?x508 (stack ?x507 ?x145)))
 (let (($x534 (= ?x289 ?x508)))
 (let (($x510 ((_ is stack ) ?x148)))
 (let (($x513 (= c___ right-to-left)))
 (let (($x514 (and $x513 $x510)))
 (let ((?x362 (center s___)))
 (let (($x515 ((_ is stack ) ?x362)))
 (let (($x516 (= c___ center-to-right)))
 (let (($x517 (and $x516 $x515)))
 (let ((?x503 (top ?x362)))
 (let ((?x504 (stack ?x503 ?x145)))
 (let (($x531 (= ?x289 ?x504)))
 (let (($x518 (= c___ center-to-left)))
 (let (($x519 (and $x518 $x515)))
 (let ((?x333 (rest ?x145)))
 (let (($x527 (= ?x289 ?x333)))
 (let (($x520 ((_ is stack ) ?x145)))
 (let (($x521 (= c___ left-to-right)))
 (let (($x522 (and $x521 $x520)))
 (let (($x523 (= c___ left-to-center)))
 (let (($x524 (and $x523 $x520)))
 (ite $x524 $x527 (ite $x522 $x527 (ite $x519 $x531 (ite $x517 $x540 (ite $x514 $x534 $x540))))))))))))))))))))))))))))))))
(assert
 (let ((?x148 (right s___)))
 (let ((?x334 (right s____)))
 (let (($x536 (= ?x334 ?x148)))
 (let ((?x506 (rest ?x148)))
 (let (($x533 (= ?x334 ?x506)))
 (let (($x510 ((_ is stack ) ?x148)))
 (let (($x511 (= c___ right-to-center)))
 (let (($x512 (and $x511 $x510)))
 (let (($x513 (= c___ right-to-left)))
 (let (($x514 (and $x513 $x510)))
 (let ((?x362 (center s___)))
 (let ((?x503 (top ?x362)))
 (let ((?x505 (stack ?x503 ?x148)))
 (let (($x532 (= ?x334 ?x505)))
 (let (($x515 ((_ is stack ) ?x362)))
 (let (($x516 (= c___ center-to-right)))
 (let (($x517 (and $x516 $x515)))
 (let (($x518 (= c___ center-to-left)))
 (let (($x519 (and $x518 $x515)))
 (let ((?x145 (left s___)))
 (let (($x520 ((_ is stack ) ?x145)))
 (let (($x521 (= c___ left-to-right)))
 (let (($x522 (and $x521 $x520)))
 (let (($x553 (ite $x522 $x536 (ite $x519 $x536 (ite $x517 $x532 (ite $x514 $x533 (ite $x512 $x533 $x536)))))))
 (let ((?x360 (top ?x145)))
 (let ((?x499 (stack ?x360 ?x148)))
 (let (($x528 (= ?x334 ?x499)))
 (let (($x523 (= c___ left-to-center)))
 (let (($x524 (and $x523 $x520)))
 (ite $x524 $x528 $x553)))))))))))))))))))))))))))))))
(assert
 (let ((?x362 (center s___)))
 (let ((?x500 (center s____)))
 (let (($x538 (= ?x500 ?x362)))
 (let ((?x148 (right s___)))
 (let ((?x507 (top ?x148)))
 (let ((?x509 (stack ?x507 ?x362)))
 (let (($x535 (= ?x500 ?x509)))
 (let (($x510 ((_ is stack ) ?x148)))
 (let (($x511 (= c___ right-to-center)))
 (let (($x512 (and $x511 $x510)))
 (let (($x513 (= c___ right-to-left)))
 (let (($x514 (and $x513 $x510)))
 (let ((?x502 (rest ?x362)))
 (let (($x530 (= ?x500 ?x502)))
 (let (($x515 ((_ is stack ) ?x362)))
 (let (($x516 (= c___ center-to-right)))
 (let (($x517 (and $x516 $x515)))
 (let (($x518 (= c___ center-to-left)))
 (let (($x519 (and $x518 $x515)))
 (let ((?x145 (left s___)))
 (let ((?x360 (top ?x145)))
 (let ((?x501 (stack ?x360 ?x362)))
 (let (($x529 (= ?x500 ?x501)))
 (let (($x520 ((_ is stack ) ?x145)))
 (let (($x521 (= c___ left-to-right)))
 (let (($x522 (and $x521 $x520)))
 (let (($x552 (ite $x522 $x529 (ite $x519 $x530 (ite $x517 $x530 (ite $x514 $x538 (ite $x512 $x535 $x538)))))))
 (let (($x523 (= c___ left-to-center)))
 (let (($x524 (and $x523 $x520)))
 (ite $x524 $x538 $x552)))))))))))))))))))))))))))))))
(assert
 (let ((?x27 (stack B empty)))
 (let ((?x51 (stack N ?x27)))
 (let ((?x334 (right s____)))
 (let (($x556 (= ?x334 ?x51)))
 (let ((?x49 (stack C (stack D (stack G (stack K (stack I (stack F empty))))))))
 (let ((?x50 (stack A ?x49)))
 (let ((?x500 (center s____)))
 (let (($x587 (= ?x500 ?x50)))
 (let ((?x43 (stack H (stack E (stack J (stack M (stack L empty)))))))
 (let ((?x289 (left s____)))
 (let (($x588 (= ?x289 ?x43)))
 (let (($x590 (not (and $x588 $x587 $x556))))
 (not $x590))))))))))))))
(check-sat)
(exit)
