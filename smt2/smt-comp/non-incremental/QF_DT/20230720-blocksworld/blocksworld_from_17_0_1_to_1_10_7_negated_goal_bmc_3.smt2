(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R 0)) (((A) (B) (C) (D) (E) (F) (G) (H) (I) (J) (K) (L) (M) (N) (O) (P) (Q) (R))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P_Q_R) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(declare-fun c!3 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s____ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x31 (stack G empty)))
 (let ((?x30 (stack N ?x31)))
 (let ((?x32 (stack H ?x30)))
 (let ((?x33 (stack A ?x32)))
 (let ((?x34 (stack P ?x33)))
 (let ((?x35 (stack D ?x34)))
 (let ((?x36 (stack L ?x35)))
 (let ((?x37 (stack B ?x36)))
 (let ((?x38 (stack R ?x37)))
 (let ((?x39 (stack K ?x38)))
 (let ((?x40 (stack E ?x39)))
 (let ((?x41 (stack M ?x40)))
 (let ((?x42 (stack Q ?x41)))
 (let ((?x43 (stack J ?x42)))
 (let ((?x44 (stack I ?x43)))
 (let ((?x45 (stack F ?x44)))
 (let ((?x46 (stack O ?x45)))
 (let ((?x111 (left s_tmp_)))
 (= ?x111 ?x46))))))))))))))))))))
(assert
 (let ((?x114 (center s_tmp__)))
 (= ?x114 empty)))
(assert
 (let ((?x47 (stack C empty)))
 (let ((?x117 (right s_tmp___)))
 (= ?x117 ?x47))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x144 (left s_tmp__)))
 (= (left s_tmp___) ?x144)))
(assert
 (let ((?x114 (center s_tmp__)))
 (= (center s_tmp___) ?x114)))
(assert
 (let ((?x148 (center s_tmp_)))
 (= ?x148 (center s_tmp))))
(assert
 (let ((?x151 (right s_tmp_)))
 (= ?x151 (right s_tmp))))
(assert
 (let ((?x111 (left s_tmp_)))
 (let ((?x144 (left s_tmp__)))
 (= ?x144 ?x111))))
(assert
 (let ((?x151 (right s_tmp_)))
 (let ((?x155 (right s_tmp__)))
 (= ?x155 ?x151))))
(assert
 (= c__ c!1))
(assert
 (let ((?x88 (left s_)))
 (let ((?x253 (left s__)))
 (let (($x298 (= ?x253 ?x88)))
 (let ((?x91 (right s_)))
 (let (($x268 ((_ is stack ) ?x91)))
 (let (($x271 (= c_ right-to-left)))
 (let (($x272 (and $x271 $x268)))
 (let ((?x93 (center s_)))
 (let (($x273 ((_ is stack ) ?x93)))
 (let (($x275 (and (= c_ center-to-right) $x273)))
 (let (($x277 (and (= c_ center-to-left) $x273)))
 (let (($x307 (ite $x277 (= ?x253 (stack (top ?x93) ?x88)) (ite $x275 $x298 (ite $x272 (= ?x253 (stack (top ?x91) ?x88)) $x298)))))
 (let (($x285 (= ?x253 (rest ?x88))))
 (let (($x278 ((_ is stack ) ?x88)))
 (let (($x279 (= c_ left-to-right)))
 (let (($x280 (and $x279 $x278)))
 (let (($x281 (= c_ left-to-center)))
 (let (($x282 (and $x281 $x278)))
 (ite $x282 $x285 (ite $x280 $x285 $x307)))))))))))))))))))))
(assert
 (let ((?x91 (right s_)))
 (let ((?x255 (right s__)))
 (let (($x294 (= ?x255 ?x91)))
 (let (($x291 (= ?x255 (rest ?x91))))
 (let (($x268 ((_ is stack ) ?x91)))
 (let (($x269 (= c_ right-to-center)))
 (let (($x270 (and $x269 $x268)))
 (let (($x271 (= c_ right-to-left)))
 (let (($x272 (and $x271 $x268)))
 (let ((?x93 (center s_)))
 (let (($x273 ((_ is stack ) ?x93)))
 (let (($x275 (and (= c_ center-to-right) $x273)))
 (let (($x304 (ite $x275 (= ?x255 (stack (top ?x93) ?x91)) (ite $x272 $x291 (ite $x270 $x291 $x294)))))
 (let (($x277 (and (= c_ center-to-left) $x273)))
 (let ((?x88 (left s_)))
 (let (($x278 ((_ is stack ) ?x88)))
 (let (($x279 (= c_ left-to-right)))
 (let (($x280 (and $x279 $x278)))
 (let (($x281 (= c_ left-to-center)))
 (let (($x282 (and $x281 $x278)))
 (ite $x282 (= ?x255 (stack (top ?x88) ?x91)) (ite $x280 $x294 (ite $x277 $x294 $x304))))))))))))))))))))))))
(assert
 (let ((?x93 (center s_)))
 (let ((?x258 (center s__)))
 (let (($x296 (= ?x258 ?x93)))
 (let ((?x91 (right s_)))
 (let (($x268 ((_ is stack ) ?x91)))
 (let (($x269 (= c_ right-to-center)))
 (let (($x270 (and $x269 $x268)))
 (let (($x271 (= c_ right-to-left)))
 (let (($x272 (and $x271 $x268)))
 (let (($x288 (= ?x258 (rest ?x93))))
 (let (($x273 ((_ is stack ) ?x93)))
 (let (($x275 (and (= c_ center-to-right) $x273)))
 (let (($x303 (ite $x275 $x288 (ite $x272 $x296 (ite $x270 (= ?x258 (stack (top ?x91) ?x93)) $x296)))))
 (let (($x277 (and (= c_ center-to-left) $x273)))
 (let ((?x88 (left s_)))
 (let (($x278 ((_ is stack ) ?x88)))
 (let (($x279 (= c_ left-to-right)))
 (let (($x280 (and $x279 $x278)))
 (let (($x281 (= c_ left-to-center)))
 (let (($x282 (and $x281 $x278)))
 (ite $x282 $x296 (ite $x280 (= ?x258 (stack (top ?x88) ?x93)) (ite $x277 $x288 $x303))))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x253 (left s__)))
 (let ((?x158 (left s___)))
 (let (($x406 (= ?x158 ?x253)))
 (let ((?x255 (right s__)))
 (let ((?x373 (top ?x255)))
 (let ((?x374 (stack ?x373 ?x253)))
 (let (($x400 (= ?x158 ?x374)))
 (let (($x376 ((_ is stack ) ?x255)))
 (let (($x379 (= c__ right-to-left)))
 (let (($x380 (and $x379 $x376)))
 (let ((?x258 (center s__)))
 (let (($x381 ((_ is stack ) ?x258)))
 (let (($x382 (= c__ center-to-right)))
 (let (($x383 (and $x382 $x381)))
 (let ((?x369 (top ?x258)))
 (let ((?x370 (stack ?x369 ?x253)))
 (let (($x397 (= ?x158 ?x370)))
 (let (($x384 (= c__ center-to-left)))
 (let (($x385 (and $x384 $x381)))
 (let ((?x160 (rest ?x253)))
 (let (($x393 (= ?x158 ?x160)))
 (let (($x386 ((_ is stack ) ?x253)))
 (let (($x387 (= c__ left-to-right)))
 (let (($x388 (and $x387 $x386)))
 (let (($x389 (= c__ left-to-center)))
 (let (($x390 (and $x389 $x386)))
 (ite $x390 $x393 (ite $x388 $x393 (ite $x385 $x397 (ite $x383 $x406 (ite $x380 $x400 $x406))))))))))))))))))))))))))))))))
(assert
 (let ((?x255 (right s__)))
 (let ((?x161 (right s___)))
 (let (($x402 (= ?x161 ?x255)))
 (let ((?x372 (rest ?x255)))
 (let (($x399 (= ?x161 ?x372)))
 (let (($x376 ((_ is stack ) ?x255)))
 (let (($x377 (= c__ right-to-center)))
 (let (($x378 (and $x377 $x376)))
 (let (($x379 (= c__ right-to-left)))
 (let (($x380 (and $x379 $x376)))
 (let ((?x258 (center s__)))
 (let ((?x369 (top ?x258)))
 (let ((?x371 (stack ?x369 ?x255)))
 (let (($x398 (= ?x161 ?x371)))
 (let (($x381 ((_ is stack ) ?x258)))
 (let (($x382 (= c__ center-to-right)))
 (let (($x383 (and $x382 $x381)))
 (let (($x384 (= c__ center-to-left)))
 (let (($x385 (and $x384 $x381)))
 (let ((?x253 (left s__)))
 (let (($x386 ((_ is stack ) ?x253)))
 (let (($x387 (= c__ left-to-right)))
 (let (($x388 (and $x387 $x386)))
 (let (($x419 (ite $x388 $x402 (ite $x385 $x402 (ite $x383 $x398 (ite $x380 $x399 (ite $x378 $x399 $x402)))))))
 (let ((?x250 (top ?x253)))
 (let ((?x365 (stack ?x250 ?x255)))
 (let (($x394 (= ?x161 ?x365)))
 (let (($x389 (= c__ left-to-center)))
 (let (($x390 (and $x389 $x386)))
 (ite $x390 $x394 $x419)))))))))))))))))))))))))))))))
(assert
 (let ((?x258 (center s__)))
 (let ((?x366 (center s___)))
 (let (($x404 (= ?x366 ?x258)))
 (let ((?x255 (right s__)))
 (let ((?x373 (top ?x255)))
 (let ((?x375 (stack ?x373 ?x258)))
 (let (($x401 (= ?x366 ?x375)))
 (let (($x376 ((_ is stack ) ?x255)))
 (let (($x377 (= c__ right-to-center)))
 (let (($x378 (and $x377 $x376)))
 (let (($x379 (= c__ right-to-left)))
 (let (($x380 (and $x379 $x376)))
 (let ((?x368 (rest ?x258)))
 (let (($x396 (= ?x366 ?x368)))
 (let (($x381 ((_ is stack ) ?x258)))
 (let (($x382 (= c__ center-to-right)))
 (let (($x383 (and $x382 $x381)))
 (let (($x384 (= c__ center-to-left)))
 (let (($x385 (and $x384 $x381)))
 (let ((?x253 (left s__)))
 (let ((?x250 (top ?x253)))
 (let ((?x367 (stack ?x250 ?x258)))
 (let (($x395 (= ?x366 ?x367)))
 (let (($x386 ((_ is stack ) ?x253)))
 (let (($x387 (= c__ left-to-right)))
 (let (($x388 (and $x387 $x386)))
 (let (($x418 (ite $x388 $x395 (ite $x385 $x396 (ite $x383 $x396 (ite $x380 $x404 (ite $x378 $x401 $x404)))))))
 (let (($x389 (= c__ left-to-center)))
 (let (($x390 (and $x389 $x386)))
 (ite $x390 $x404 $x418)))))))))))))))))))))))))))))))
(assert
 (= c____ c!3))
(assert
 (let ((?x158 (left s___)))
 (let ((?x314 (left s____)))
 (let (($x544 (= ?x314 ?x158)))
 (let ((?x161 (right s___)))
 (let ((?x511 (top ?x161)))
 (let ((?x512 (stack ?x511 ?x158)))
 (let (($x538 (= ?x314 ?x512)))
 (let (($x514 ((_ is stack ) ?x161)))
 (let (($x517 (= c___ right-to-left)))
 (let (($x518 (and $x517 $x514)))
 (let ((?x366 (center s___)))
 (let (($x519 ((_ is stack ) ?x366)))
 (let (($x520 (= c___ center-to-right)))
 (let (($x521 (and $x520 $x519)))
 (let ((?x507 (top ?x366)))
 (let ((?x508 (stack ?x507 ?x158)))
 (let (($x535 (= ?x314 ?x508)))
 (let (($x522 (= c___ center-to-left)))
 (let (($x523 (and $x522 $x519)))
 (let ((?x345 (rest ?x158)))
 (let (($x531 (= ?x314 ?x345)))
 (let (($x524 ((_ is stack ) ?x158)))
 (let (($x525 (= c___ left-to-right)))
 (let (($x526 (and $x525 $x524)))
 (let (($x527 (= c___ left-to-center)))
 (let (($x528 (and $x527 $x524)))
 (ite $x528 $x531 (ite $x526 $x531 (ite $x523 $x535 (ite $x521 $x544 (ite $x518 $x538 $x544))))))))))))))))))))))))))))))))
(assert
 (let ((?x161 (right s___)))
 (let ((?x346 (right s____)))
 (let (($x540 (= ?x346 ?x161)))
 (let ((?x510 (rest ?x161)))
 (let (($x537 (= ?x346 ?x510)))
 (let (($x514 ((_ is stack ) ?x161)))
 (let (($x515 (= c___ right-to-center)))
 (let (($x516 (and $x515 $x514)))
 (let (($x517 (= c___ right-to-left)))
 (let (($x518 (and $x517 $x514)))
 (let ((?x366 (center s___)))
 (let ((?x507 (top ?x366)))
 (let ((?x509 (stack ?x507 ?x161)))
 (let (($x536 (= ?x346 ?x509)))
 (let (($x519 ((_ is stack ) ?x366)))
 (let (($x520 (= c___ center-to-right)))
 (let (($x521 (and $x520 $x519)))
 (let (($x522 (= c___ center-to-left)))
 (let (($x523 (and $x522 $x519)))
 (let ((?x158 (left s___)))
 (let (($x524 ((_ is stack ) ?x158)))
 (let (($x525 (= c___ left-to-right)))
 (let (($x526 (and $x525 $x524)))
 (let (($x557 (ite $x526 $x540 (ite $x523 $x540 (ite $x521 $x536 (ite $x518 $x537 (ite $x516 $x537 $x540)))))))
 (let ((?x364 (top ?x158)))
 (let ((?x503 (stack ?x364 ?x161)))
 (let (($x532 (= ?x346 ?x503)))
 (let (($x527 (= c___ left-to-center)))
 (let (($x528 (and $x527 $x524)))
 (ite $x528 $x532 $x557)))))))))))))))))))))))))))))))
(assert
 (let ((?x366 (center s___)))
 (let ((?x504 (center s____)))
 (let (($x542 (= ?x504 ?x366)))
 (let ((?x161 (right s___)))
 (let ((?x511 (top ?x161)))
 (let ((?x513 (stack ?x511 ?x366)))
 (let (($x539 (= ?x504 ?x513)))
 (let (($x514 ((_ is stack ) ?x161)))
 (let (($x515 (= c___ right-to-center)))
 (let (($x516 (and $x515 $x514)))
 (let (($x517 (= c___ right-to-left)))
 (let (($x518 (and $x517 $x514)))
 (let ((?x506 (rest ?x366)))
 (let (($x534 (= ?x504 ?x506)))
 (let (($x519 ((_ is stack ) ?x366)))
 (let (($x520 (= c___ center-to-right)))
 (let (($x521 (and $x520 $x519)))
 (let (($x522 (= c___ center-to-left)))
 (let (($x523 (and $x522 $x519)))
 (let ((?x158 (left s___)))
 (let ((?x364 (top ?x158)))
 (let ((?x505 (stack ?x364 ?x366)))
 (let (($x533 (= ?x504 ?x505)))
 (let (($x524 ((_ is stack ) ?x158)))
 (let (($x525 (= c___ left-to-right)))
 (let (($x526 (and $x525 $x524)))
 (let (($x556 (ite $x526 $x533 (ite $x523 $x534 (ite $x521 $x534 (ite $x518 $x542 (ite $x516 $x539 $x542)))))))
 (let (($x527 (= c___ left-to-center)))
 (let (($x528 (and $x527 $x524)))
 (ite $x528 $x542 $x556)))))))))))))))))))))))))))))))
(assert
 (let ((?x63 (stack Q (stack P (stack O (stack G (stack D (stack C empty))))))))
 (let ((?x64 (stack R ?x63)))
 (let ((?x346 (right s____)))
 (let (($x560 (= ?x346 ?x64)))
 (let ((?x54 (stack N (stack F (stack A (stack H (stack J (stack I empty))))))))
 (let ((?x58 (stack K (stack L (stack B (stack M ?x54))))))
 (let ((?x504 (center s____)))
 (let (($x591 (= ?x504 ?x58)))
 (let ((?x49 (stack E empty)))
 (let ((?x314 (left s____)))
 (let (($x592 (= ?x314 ?x49)))
 (let (($x594 (not (and $x592 $x591 $x560))))
 (not $x594))))))))))))))
(check-sat)
(exit)
