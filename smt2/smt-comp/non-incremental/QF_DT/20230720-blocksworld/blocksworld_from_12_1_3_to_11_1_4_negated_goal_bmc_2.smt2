(set-info :smt-lib-version 2.6)
(set-logic QF_DT)
(set-info :source |
Generated by: Federico Mora
Generated on: 2023-07-20
Generator: z3 Python bindings via UCLID5 Python API
Application: Blocksworld Automated Reasoning Problems.
Target solvers: Algaroba, cvc5, Z3, Princess
Publications: Shah, Mora and Seshia. An Eager Satisfiability Modulo Theories Solver for Algebraic Datatypes. AAAI â€™24 |)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat) 
(declare-datatypes ((Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P 0)) (((A) (B) (C) (D) (E) (F) (G) (H) (I) (J) (K) (L) (M) (N) (O) (P))))
(declare-datatypes ((Tower 0)) (((stack (top Enum_A_B_C_D_E_F_G_H_I_J_K_L_M_N_O_P) (rest Tower)) (empty))))
(declare-datatypes ((Record_left_center_right 0)) (((Record_left_center_right (left Tower) (center Tower) (right Tower)))))
(declare-datatypes ((Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center 0)) (((left-to-center) (left-to-right) (center-to-left) (center-to-right) (right-to-left) (right-to-center))))
(declare-fun s () Record_left_center_right)
(declare-fun s_tmp () Record_left_center_right)
(declare-fun c () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_tmp_ () Record_left_center_right)
(declare-fun s_tmp__ () Record_left_center_right)
(declare-fun s_tmp___ () Record_left_center_right)
(declare-fun c!0 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c_tmp____ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s_ () Record_left_center_right)
(declare-fun c_ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c!1 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c__ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s__ () Record_left_center_right)
(declare-fun c!2 () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun c___ () Enum_left-to-center_left-to-right_center-to-left_center-to-right_right-to-left_right-to-center)
(declare-fun s___ () Record_left_center_right)
(assert
 (= s_tmp s))
(assert
 (= c_tmp c))
(assert
 (let ((?x29 (stack O empty)))
 (let ((?x28 (stack K ?x29)))
 (let ((?x30 (stack B ?x28)))
 (let ((?x31 (stack N ?x30)))
 (let ((?x32 (stack P ?x31)))
 (let ((?x33 (stack M ?x32)))
 (let ((?x34 (stack I ?x33)))
 (let ((?x35 (stack D ?x34)))
 (let ((?x36 (stack G ?x35)))
 (let ((?x37 (stack E ?x36)))
 (let ((?x38 (stack J ?x37)))
 (let ((?x39 (stack A ?x38)))
 (let ((?x105 (left s_tmp_)))
 (= ?x105 ?x39)))))))))))))))
(assert
 (let ((?x40 (stack H empty)))
 (let ((?x108 (center s_tmp__)))
 (= ?x108 ?x40))))
(assert
 (let ((?x41 (stack C empty)))
 (let ((?x42 (stack F ?x41)))
 (let ((?x43 (stack L ?x42)))
 (let ((?x111 (right s_tmp___)))
 (= ?x111 ?x43))))))
(assert
 (= c_tmp____ c!0))
(assert
 (= s_ s_tmp___))
(assert
 (= c_ c_tmp____))
(assert
 (let ((?x138 (left s_tmp__)))
 (= (left s_tmp___) ?x138)))
(assert
 (let ((?x108 (center s_tmp__)))
 (= (center s_tmp___) ?x108)))
(assert
 (let ((?x142 (center s_tmp_)))
 (= ?x142 (center s_tmp))))
(assert
 (let ((?x145 (right s_tmp_)))
 (= ?x145 (right s_tmp))))
(assert
 (let ((?x105 (left s_tmp_)))
 (let ((?x138 (left s_tmp__)))
 (= ?x138 ?x105))))
(assert
 (let ((?x145 (right s_tmp_)))
 (let ((?x149 (right s_tmp__)))
 (= ?x149 ?x145))))
(assert
 (= c__ c!1))
(assert
 (let ((?x82 (left s_)))
 (let ((?x259 (left s__)))
 (let (($x286 (= ?x259 ?x82)))
 (let ((?x85 (right s_)))
 (let (($x283 ((_ is stack ) ?x85)))
 (let (($x256 (= c_ right-to-left)))
 (let (($x245 (and $x256 $x283)))
 (let ((?x87 (center s_)))
 (let (($x246 ((_ is stack ) ?x87)))
 (let (($x247 (= c_ center-to-right)))
 (let (($x263 (and $x247 $x246)))
 (let (($x264 (= c_ center-to-left)))
 (let (($x265 (and $x264 $x246)))
 (let (($x295 (ite $x265 (= ?x259 (stack (top ?x87) ?x82)) (ite $x263 $x286 (ite $x245 (= ?x259 (stack (top ?x85) ?x82)) $x286)))))
 (let (($x252 (= ?x259 (rest ?x82))))
 (let (($x260 ((_ is stack ) ?x82)))
 (let (($x261 (= c_ left-to-right)))
 (let (($x262 (and $x261 $x260)))
 (let (($x239 (= c_ left-to-center)))
 (let (($x240 (and $x239 $x260)))
 (ite $x240 $x252 (ite $x262 $x252 $x295)))))))))))))))))))))))
(assert
 (let ((?x85 (right s_)))
 (let ((?x243 (right s__)))
 (let (($x276 (= ?x243 ?x85)))
 (let (($x273 (= ?x243 (rest ?x85))))
 (let (($x283 ((_ is stack ) ?x85)))
 (let (($x254 (= c_ right-to-center)))
 (let (($x255 (and $x254 $x283)))
 (let (($x256 (= c_ right-to-left)))
 (let (($x245 (and $x256 $x283)))
 (let ((?x87 (center s_)))
 (let (($x246 ((_ is stack ) ?x87)))
 (let (($x247 (= c_ center-to-right)))
 (let (($x263 (and $x247 $x246)))
 (let (($x292 (ite $x263 (= ?x243 (stack (top ?x87) ?x85)) (ite $x245 $x273 (ite $x255 $x273 $x276)))))
 (let (($x264 (= c_ center-to-left)))
 (let (($x265 (and $x264 $x246)))
 (let ((?x82 (left s_)))
 (let (($x260 ((_ is stack ) ?x82)))
 (let (($x261 (= c_ left-to-right)))
 (let (($x262 (and $x261 $x260)))
 (let (($x239 (= c_ left-to-center)))
 (let (($x240 (and $x239 $x260)))
 (ite $x240 (= ?x243 (stack (top ?x82) ?x85)) (ite $x262 $x276 (ite $x265 $x276 $x292))))))))))))))))))))))))))
(assert
 (let ((?x87 (center s_)))
 (let ((?x279 (center s__)))
 (let (($x284 (= ?x279 ?x87)))
 (let ((?x85 (right s_)))
 (let (($x283 ((_ is stack ) ?x85)))
 (let (($x254 (= c_ right-to-center)))
 (let (($x255 (and $x254 $x283)))
 (let (($x256 (= c_ right-to-left)))
 (let (($x245 (and $x256 $x283)))
 (let (($x267 (= ?x279 (rest ?x87))))
 (let (($x246 ((_ is stack ) ?x87)))
 (let (($x247 (= c_ center-to-right)))
 (let (($x263 (and $x247 $x246)))
 (let (($x291 (ite $x263 $x267 (ite $x245 $x284 (ite $x255 (= ?x279 (stack (top ?x85) ?x87)) $x284)))))
 (let (($x264 (= c_ center-to-left)))
 (let (($x265 (and $x264 $x246)))
 (let ((?x82 (left s_)))
 (let (($x260 ((_ is stack ) ?x82)))
 (let (($x261 (= c_ left-to-right)))
 (let (($x262 (and $x261 $x260)))
 (let (($x239 (= c_ left-to-center)))
 (let (($x240 (and $x239 $x260)))
 (ite $x240 $x284 (ite $x262 (= ?x279 (stack (top ?x82) ?x87)) (ite $x265 $x267 $x291))))))))))))))))))))))))))
(assert
 (= c___ c!2))
(assert
 (let ((?x259 (left s__)))
 (let ((?x152 (left s___)))
 (let (($x415 (= ?x152 ?x259)))
 (let ((?x243 (right s__)))
 (let ((?x382 (top ?x243)))
 (let ((?x383 (stack ?x382 ?x259)))
 (let (($x409 (= ?x152 ?x383)))
 (let (($x385 ((_ is stack ) ?x243)))
 (let (($x388 (= c__ right-to-left)))
 (let (($x389 (and $x388 $x385)))
 (let ((?x279 (center s__)))
 (let (($x390 ((_ is stack ) ?x279)))
 (let (($x391 (= c__ center-to-right)))
 (let (($x392 (and $x391 $x390)))
 (let ((?x378 (top ?x279)))
 (let ((?x379 (stack ?x378 ?x259)))
 (let (($x406 (= ?x152 ?x379)))
 (let (($x393 (= c__ center-to-left)))
 (let (($x394 (and $x393 $x390)))
 (let ((?x154 (rest ?x259)))
 (let (($x402 (= ?x152 ?x154)))
 (let (($x395 ((_ is stack ) ?x259)))
 (let (($x396 (= c__ left-to-right)))
 (let (($x397 (and $x396 $x395)))
 (let (($x398 (= c__ left-to-center)))
 (let (($x399 (and $x398 $x395)))
 (ite $x399 $x402 (ite $x397 $x402 (ite $x394 $x406 (ite $x392 $x415 (ite $x389 $x409 $x415))))))))))))))))))))))))))))))))
(assert
 (let ((?x243 (right s__)))
 (let ((?x155 (right s___)))
 (let (($x411 (= ?x155 ?x243)))
 (let ((?x381 (rest ?x243)))
 (let (($x408 (= ?x155 ?x381)))
 (let (($x385 ((_ is stack ) ?x243)))
 (let (($x386 (= c__ right-to-center)))
 (let (($x387 (and $x386 $x385)))
 (let (($x388 (= c__ right-to-left)))
 (let (($x389 (and $x388 $x385)))
 (let ((?x279 (center s__)))
 (let ((?x378 (top ?x279)))
 (let ((?x380 (stack ?x378 ?x243)))
 (let (($x407 (= ?x155 ?x380)))
 (let (($x390 ((_ is stack ) ?x279)))
 (let (($x391 (= c__ center-to-right)))
 (let (($x392 (and $x391 $x390)))
 (let (($x393 (= c__ center-to-left)))
 (let (($x394 (and $x393 $x390)))
 (let ((?x259 (left s__)))
 (let (($x395 ((_ is stack ) ?x259)))
 (let (($x396 (= c__ left-to-right)))
 (let (($x397 (and $x396 $x395)))
 (let (($x428 (ite $x397 $x411 (ite $x394 $x411 (ite $x392 $x407 (ite $x389 $x408 (ite $x387 $x408 $x411)))))))
 (let ((?x238 (top ?x259)))
 (let ((?x374 (stack ?x238 ?x243)))
 (let (($x403 (= ?x155 ?x374)))
 (let (($x398 (= c__ left-to-center)))
 (let (($x399 (and $x398 $x395)))
 (ite $x399 $x403 $x428)))))))))))))))))))))))))))))))
(assert
 (let ((?x279 (center s__)))
 (let ((?x375 (center s___)))
 (let (($x413 (= ?x375 ?x279)))
 (let ((?x243 (right s__)))
 (let ((?x382 (top ?x243)))
 (let ((?x384 (stack ?x382 ?x279)))
 (let (($x410 (= ?x375 ?x384)))
 (let (($x385 ((_ is stack ) ?x243)))
 (let (($x386 (= c__ right-to-center)))
 (let (($x387 (and $x386 $x385)))
 (let (($x388 (= c__ right-to-left)))
 (let (($x389 (and $x388 $x385)))
 (let ((?x377 (rest ?x279)))
 (let (($x405 (= ?x375 ?x377)))
 (let (($x390 ((_ is stack ) ?x279)))
 (let (($x391 (= c__ center-to-right)))
 (let (($x392 (and $x391 $x390)))
 (let (($x393 (= c__ center-to-left)))
 (let (($x394 (and $x393 $x390)))
 (let ((?x259 (left s__)))
 (let ((?x238 (top ?x259)))
 (let ((?x376 (stack ?x238 ?x279)))
 (let (($x404 (= ?x375 ?x376)))
 (let (($x395 ((_ is stack ) ?x259)))
 (let (($x396 (= c__ left-to-right)))
 (let (($x397 (and $x396 $x395)))
 (let (($x427 (ite $x397 $x404 (ite $x394 $x405 (ite $x392 $x405 (ite $x389 $x413 (ite $x387 $x410 $x413)))))))
 (let (($x398 (= c__ left-to-center)))
 (let (($x399 (and $x398 $x395)))
 (ite $x399 $x413 $x427)))))))))))))))))))))))))))))))
(assert
 (let ((?x58 (stack K (stack J (stack G (stack C empty))))))
 (let ((?x155 (right s___)))
 (let (($x431 (= ?x155 ?x58)))
 (let ((?x55 (stack E empty)))
 (let ((?x375 (center s___)))
 (let (($x462 (= ?x375 ?x55)))
 (let ((?x49 (stack D (stack N (stack A (stack B (stack O (stack P empty))))))))
 (let ((?x54 (stack I (stack H (stack M (stack F (stack L ?x49)))))))
 (let ((?x152 (left s___)))
 (let (($x463 (= ?x152 ?x54)))
 (let (($x465 (not (and $x463 $x462 $x431))))
 (not $x465)))))))))))))
(check-sat)
(exit)
