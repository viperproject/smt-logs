(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Certora
Generated on: 2024-04-10
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x200 () Int)
(declare-fun x346 () Int)
(declare-fun x421 () Bool)
(declare-fun x274 () Int)
(declare-fun x399 () Int)
(declare-fun x22 () Bool)
(declare-fun x262 (Int) Int)
(declare-fun x297 () Bool)
(declare-fun x434 () Int)
(declare-fun x466 () Int)
(declare-fun x114 () Bool)
(declare-fun x201 () Int)
(declare-fun x301 () Int)
(declare-fun x474 () Int)
(declare-fun x43 () Bool)
(declare-fun x328 (Int) Int)
(declare-fun x401 () Int)
(declare-fun x492 () Int)
(declare-fun x86 () Bool)
(declare-fun x394 () Int)
(declare-fun x217 () Int)
(declare-fun x314 () Bool)
(declare-fun x210 () Bool)
(declare-fun x340 () Bool)
(declare-fun x290 () Bool)
(declare-fun x253 () Int)
(declare-fun x376 () Int)
(declare-fun x231 () Int)
(declare-fun x156 () Bool)
(declare-fun x195 () Int)
(declare-fun x168 () Bool)
(declare-fun x385 () Int)
(declare-fun x464 () Int)
(declare-fun x329 () Int)
(declare-fun x369 () Bool)
(declare-fun x324 () Int)
(declare-fun x64 (Int) Int)
(declare-fun x252 () Int)
(declare-fun x267 () Bool)
(declare-fun x167 () Int)
(declare-fun x437 () Bool)
(declare-fun x93 () Int)
(declare-fun x234 () Int)
(declare-fun x97 () Bool)
(declare-fun x102 () Bool)
(declare-fun x322 () Int)
(declare-fun x529 () Bool)
(declare-fun x24 (Int) Int)
(declare-fun x148 () Int)
(declare-fun x75 () Bool)
(declare-fun x213 (Int) Int)
(declare-fun x19 (Int) Int)
(declare-fun x183 () Int)
(declare-fun x430 () Bool)
(declare-fun x284 () Int)
(declare-fun x420 () Int)
(declare-fun x389 () Bool)
(declare-fun x342 () Bool)
(declare-fun x323 () Int)
(declare-fun x166 () Bool)
(declare-fun x256 () Int)
(declare-fun x351 () Int)
(declare-fun x496 () Int)
(declare-fun x488 () Int)
(declare-fun x326 () Bool)
(declare-fun x29 () Int)
(declare-fun x99 () Int)
(declare-fun x361 () Int)
(declare-fun x176 () Bool)
(declare-fun x14 () Int)
(declare-fun x363 () Int)
(declare-fun x384 () Bool)
(declare-fun x273 () Int)
(declare-fun x182 () Bool)
(declare-fun x359 () Int)
(declare-fun x47 () Int)
(declare-fun x427 () Int)
(declare-fun x52 () Bool)
(declare-fun x438 () Int)
(declare-fun x407 (Int Int) Int)
(declare-fun x27 () Int)
(declare-fun x104 () Int)
(declare-fun x259 () Int)
(declare-fun x33 () Bool)
(declare-fun x143 () Bool)
(declare-fun x306 () Int)
(declare-fun x72 () Int)
(declare-fun x171 () Bool)
(declare-fun x80 () Int)
(declare-fun x302 (Int Int) Int)
(declare-fun x478 () Int)
(declare-fun x147 (Int Int) Int)
(declare-fun x318 () Int)
(declare-fun x132 () Bool)
(declare-fun x41 () Int)
(declare-fun x205 () Int)
(declare-fun x155 () Bool)
(declare-fun x300 () Int)
(declare-fun x280 () Int)
(declare-fun x521 () Int)
(declare-fun x461 () Bool)
(declare-fun x485 (Int Int) Int)
(declare-fun x440 (Int Int) Int)
(declare-fun x291 () Int)
(declare-fun x190 (Int) Int)
(declare-fun x136 () Bool)
(declare-fun x214 () Int)
(declare-fun x95 () Int)
(declare-fun x173 () Int)
(declare-fun x472 (Int) Int)
(declare-fun x211 () Int)
(declare-fun x139 () Int)
(declare-fun x410 () Int)
(declare-fun x220 () Int)
(declare-fun x198 () Bool)
(declare-fun x160 () Int)
(declare-fun x336 () Int)
(declare-fun x423 () Int)
(declare-fun x81 () Int)
(declare-fun x339 () Int)
(declare-fun x142 () Bool)
(declare-fun x174 () Bool)
(declare-fun x153 () Int)
(declare-fun x96 (Int) Bool)
(declare-fun x30 () Bool)
(declare-fun x70 () Int)
(declare-fun x138 () Bool)
(declare-fun x388 () Bool)
(declare-fun x526 () Int)
(declare-fun x238 () Bool)
(declare-fun x489 () Int)
(declare-fun x333 () Int)
(declare-fun x380 () Int)
(declare-fun x445 () Int)
(declare-fun x501 (Int) Int)
(declare-fun x530 () Bool)
(declare-fun x65 () Int)
(declare-fun x293 () Bool)
(declare-fun x71 () Bool)
(declare-fun x244 () Int)
(declare-fun x371 () Int)
(declare-fun x73 () Int)
(declare-fun x236 () Int)
(declare-fun x107 () Bool)
(declare-fun x404 () Int)
(declare-fun x247 (Int) Int)
(declare-fun x353 () Bool)
(declare-fun x203 () Bool)
(declare-fun x181 (Int) Int)
(declare-fun x149 () Int)
(declare-fun x13 () Bool)
(declare-fun x495 () Bool)
(declare-fun x311 () Bool)
(declare-fun x366 () Int)
(declare-fun x4 (Int) Int)
(declare-fun x414 () Int)
(declare-fun x103 () Int)
(declare-fun x193 () Int)
(declare-fun x128 (Int Int) Int)
(declare-fun x257 () Int)
(declare-fun x225 () Bool)
(declare-fun x316 (Int) Int)
(declare-fun x226 () Bool)
(declare-fun x189 () Bool)
(declare-fun x282 () Bool)
(declare-fun x35 () Int)
(declare-fun x378 () Bool)
(declare-fun x206 () Int)
(declare-fun x169 (Int Int) Int)
(declare-fun x185 () Int)
(declare-fun x269 () Bool)
(declare-fun x447 () Int)
(declare-fun x145 () Int)
(declare-fun x294 () Int)
(declare-fun x233 () Int)
(declare-fun x133 () Int)
(declare-fun x312 () Int)
(declare-fun x392 () Int)
(declare-fun x498 () Int)
(declare-fun x486 () Bool)
(declare-fun x325 () Int)
(declare-fun x161 () Int)
(declare-fun x479 () Int)
(declare-fun x49 () Int)
(declare-fun x393 () Int)
(declare-fun x21 () Bool)
(declare-fun x39 () Int)
(declare-fun x165 () Int)
(declare-fun x98 () Bool)
(declare-fun x202 () Int)
(declare-fun x288 () Int)
(declare-fun x218 () Int)
(declare-fun x330 () Bool)
(declare-fun x315 () Int)
(declare-fun x373 () Int)
(declare-fun x276 () Int)
(declare-fun x289 () Int)
(declare-fun x212 () Bool)
(declare-fun x59 () Int)
(declare-fun x493 () Int)
(declare-fun x362 () Bool)
(declare-fun x88 (Int) Int)
(declare-fun x286 () Bool)
(declare-fun x471 () Bool)
(declare-fun x178 () Int)
(declare-fun x82 () Bool)
(declare-fun x508 () Int)
(declare-fun x308 () Int)
(declare-fun x228 () Bool)
(declare-fun x490 () Int)
(declare-fun x53 () Bool)
(declare-fun x89 () Int)
(declare-fun x126 () Int)
(declare-fun x518 () Int)
(declare-fun x448 () Int)
(declare-fun x266 (Int Int Int) Int)
(declare-fun x456 () Bool)
(declare-fun x303 (Int Int) Int)
(declare-fun x197 () Int)
(declare-fun x140 () Bool)
(declare-fun x32 () Int)
(declare-fun x285 () Int)
(declare-fun x368 () Int)
(declare-fun x121 () Int)
(declare-fun x15 () Int)
(declare-fun x396 () Int)
(declare-fun x502 () Int)
(declare-fun x345 () Int)
(declare-fun x42 () Int)
(declare-fun x158 () Int)
(declare-fun x221 () Int)
(declare-fun x432 () Int)
(declare-fun x531 () Int)
(declare-fun x403 () Int)
(declare-fun x55 () Bool)
(declare-fun x232 () Bool)
(declare-fun x129 () Bool)
(declare-fun x470 () Bool)
(declare-fun x484 () Bool)
(declare-fun x125 () Bool)
(declare-fun x245 () Bool)
(declare-fun x90 () Bool)
(declare-fun x163 (Int) Int)
(declare-fun x446 () Int)
(declare-fun x349 () Bool)
(declare-fun x405 () Bool)
(declare-fun x5 () Bool)
(declare-fun x444 () Int)
(declare-fun x390 () Int)
(declare-fun x251 () Bool)
(declare-fun x426 (Int) Int)
(declare-fun x433 () Int)
(declare-fun x356 () Int)
(declare-fun x130 () Int)
(declare-fun x45 () Int)
(declare-fun x60 () Int)
(declare-fun x451 () Int)
(declare-fun x511 () Int)
(declare-fun x51 () Bool)
(declare-fun x61 () Bool)
(declare-fun x66 (Int Int) Int)
(declare-fun x131 (Int) Int)
(declare-fun x69 () Int)
(declare-fun x467 () Bool)
(declare-fun x379 (Int) Int)
(declare-fun x12 () Bool)
(declare-fun x277 () Int)
(declare-fun x123 (Int) Int)
(declare-fun x497 () Bool)
(declare-fun x3 () Int)
(declare-fun x519 () Int)
(declare-fun x370 () Int)
(declare-fun x116 () Bool)
(declare-fun x1 () Bool)
(declare-fun x279 () Int)
(declare-fun x150 () Int)
(declare-fun x355 () Bool)
(declare-fun x10 () Int)
(declare-fun x491 () Bool)
(declare-fun x100 () Int)
(declare-fun x108 () Int)
(declare-fun x62 () Int)
(declare-fun x512 () Int)
(declare-fun x209 (Int) Int)
(declare-fun x237 () Int)
(declare-fun x332 () Int)
(declare-fun x527 () Bool)
(declare-fun x271 (Int) Int)
(declare-fun x417 () Int)
(declare-fun x106 () Int)
(declare-fun x37 () Int)
(declare-fun x439 () Bool)
(declare-fun x255 (Int) Int)
(declare-fun x382 () Int)
(declare-fun x509 () Bool)
(declare-fun x381 () Int)
(declare-fun x36 () Bool)
(declare-fun x458 () Int)
(declare-fun x452 () Int)
(declare-fun x504 () Bool)
(declare-fun x357 (Int) Int)
(declare-fun x296 () Bool)
(declare-fun x17 () Int)
(declare-fun x487 () Int)
(declare-fun x229 () Int)
(declare-fun x151 () Int)
(declare-fun x177 (Int) Int)
(declare-fun x341 () Int)
(declare-fun x175 () Int)
(declare-fun x199 () Bool)
(declare-fun x2 () Int)
(declare-fun x317 () Int)
(declare-fun x411 () Int)
(declare-fun x468 () Int)
(declare-fun x25 () Int)
(declare-fun x48 () Int)
(declare-fun x375 () Int)
(declare-fun x8 () Bool)
(declare-fun x154 () Bool)
(declare-fun x119 () Int)
(declare-fun x278 () Bool)
(declare-fun x337 () Int)
(declare-fun x94 () Int)
(declare-fun x261 () Bool)
(declare-fun x28 () Int)
(declare-fun x40 () Int)
(declare-fun x243 () Bool)
(declare-fun x242 () Bool)
(declare-fun x500 (Int) Int)
(declare-fun x110 () Int)
(declare-fun x258 () Int)
(declare-fun x134 () Int)
(declare-fun x152 () Bool)
(declare-fun x91 () Int)
(declare-fun x204 () Bool)
(declare-fun x159 () Int)
(declare-fun x85 () Bool)
(declare-fun x383 () Bool)
(declare-fun x270 () Int)
(declare-fun x265 () Bool)
(declare-fun x216 () Int)
(declare-fun x124 () Bool)
(declare-fun x9 () Int)
(declare-fun x418 () Bool)
(declare-fun x457 () Bool)
(declare-fun x352 () Int)
(declare-fun x115 () Bool)
(declare-fun x460 (Int) Int)
(declare-fun x334 () Int)
(declare-fun x454 () Int)
(declare-fun x92 () Int)
(declare-fun x515 () Bool)
(declare-fun x11 () Int)
(declare-fun x184 () Int)
(declare-fun x23 () Int)
(declare-fun x513 (Int) Int)
(declare-fun x207 () Bool)
(declare-fun x441 () Int)
(declare-fun x481 () Int)
(declare-fun x525 (Int) Int)
(declare-fun x436 () Bool)
(declare-fun x483 () Int)
(declare-fun x239 () Bool)
(declare-fun x431 () Bool)
(declare-fun x118 () Int)
(declare-fun x122 () Bool)
(declare-fun x523 () Bool)
(declare-fun x78 () Int)
(declare-fun x164 () Int)
(declare-fun x453 () Bool)
(declare-fun x305 () Int)
(declare-fun x406 () Int)
(declare-fun x338 () Int)
(declare-fun x522 () Int)
(declare-fun x395 () Int)
(declare-fun x524 () Int)
(declare-fun x275 () Int)
(declare-fun x68 () Bool)
(declare-fun x109 () Int)
(declare-fun x38 () Int)
(declare-fun x87 () Bool)
(declare-fun x76 () Int)
(declare-fun x364 () Int)
(declare-fun x54 () Bool)
(declare-fun x455 () Int)
(declare-fun x409 () Bool)
(declare-fun x443 () Int)
(declare-fun x469 () Int)
(declare-fun x63 () Int)
(declare-fun x113 () Bool)
(declare-fun x172 () Int)
(declare-fun x240 () Bool)
(declare-fun x170 () Int)
(declare-fun x79 () Int)
(declare-fun x162 () Bool)
(declare-fun x435 () Bool)
(declare-fun x57 () Bool)
(declare-fun x187 () Bool)
(declare-fun x415 () Bool)
(declare-fun x215 () Bool)
(declare-fun x398 () Bool)
(declare-fun x419 () Int)
(declare-fun x196 () Int)
(declare-fun x402 () Bool)
(declare-fun x246 () Bool)
(declare-fun x386 () Bool)
(declare-fun x292 () Int)
(declare-fun x377 () Int)
(declare-fun x412 () Int)
(declare-fun x422 () Int)
(declare-fun x77 () Bool)
(declare-fun x321 () Int)
(declare-fun x327 () Int)
(declare-fun x146 () Bool)
(declare-fun x319 () Int)
(declare-fun x283 () Bool)
(declare-fun x31 () Int)
(declare-fun x120 () Bool)
(declare-fun x520 () Int)
(declare-fun x367 () Int)
(declare-fun x449 () Int)
(declare-fun x425 () Bool)
(define-fun x391 ((x272 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x272) (>= x272 0)) x272 (- x272 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x482 ((x272 Int)) Int (ite (and (< x272 0) (>= x272 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x272 115792089237316195423570985008687907853269984665640564039457584007913129639936) x272))
(define-fun x507 ((x272 Int)) Int (ite (and (>= x272 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x272)) x272 (ite (and (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 x272) (> 231584178474632390847141970017375815706539969331281128078915168015826259279872 x272)) (- x272 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (>= x272 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (< x272 0)) (+ x272 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x303 x272 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x264 ((x499 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x499) (<= 0 x499)))
(define-fun x144 ((x499 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x499) (>= x499 0)))
(define-fun x304 ((x499 Int) (x358 Int)) Bool (= (* x358 x499) (x66 x499 x358)))
(define-fun x465 ((x499 Int) (x358 Int)) Bool (and (= (- (* (- x358 115792089237316195423570985008687907853269984665640564039457584007913129639936) x499) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x358 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x66 (- x499 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x358 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x66 x499 (- x358 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* x499 (- x358 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x358 x499) (* x358 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x66 (- x499 115792089237316195423570985008687907853269984665640564039457584007913129639936) x358))))
(define-fun x56 ((x499 Int) (x358 Int)) Bool (=> (and (< 0 x499) (< 0 x358)) (= (= x358 (x407 (x507 (x66 x499 x358)) x499)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x66 x499 x358)))))
(define-fun x222 ((x499 Int) (x358 Int)) Bool (=> (and (not (= x358 0)) (not (= 0 x499))) (and (= (x407 (x66 x499 x358) x499) x358) (= (x407 (x66 x499 x358) x358) x499))))
(define-fun x397 ((x499 Int) (x358 Int)) Bool (=> (and (< 0 x358) (> x499 0)) (= (< 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x66 x499 x358)) (< (x407 115792089237316195423570985008687907853269984665640564039457584007913129639935 x499) x358))))
(define-fun x248 ((x499 Int) (x358 Int)) Bool (and (= (x507 (x66 x499 x358)) (x507 (x66 x499 (- x358 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x507 (x66 (- x499 115792089237316195423570985008687907853269984665640564039457584007913129639936) x358)) (x507 (x66 x499 x358))) (= (x507 (x66 (- x499 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x358 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x507 (x66 x499 x358)))))
(define-fun x7 ((x499 Int) (x358 Int)) Bool (and (=> (and (and (<= x358 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 0 x358)) (and (> x499 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x499))) (= (>= (x407 57896044618658097711785492504343953926634992332820282019728792003956564819968 x358) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x499)) (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x66 (- x499 115792089237316195423570985008687907853269984665640564039457584007913129639936) x358)))) (=> (and (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x358) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x358)) (and (> x499 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x499))) (= (<= (x66 (- x499 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x358 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= (x407 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x358)) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x499)))) (=> (and (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x358) (> x358 0)) (and (< 0 x499) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x499))) (= (>= (x407 57896044618658097711785492504343953926634992332820282019728792003956564819967 x358) x499) (<= (x66 x499 x358) 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (=> (and (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x358) (<= x358 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x499) (> x499 0))) (= (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x358) (x407 57896044618658097711785492504343953926634992332820282019728792003956564819968 x499)) (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x66 x499 (- x358 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))))
(define-fun x494 ((x499 Int) (x358 Int)) Bool (and (x304 x499 x358) (x7 x499 x358) (x222 x499 x358) (x248 x499 x358) (x465 x499 x358) (x56 x499 x358) (x397 x499 x358)))
(define-fun x180 ((x499 Int)) Bool (and (= 0 (x66 0 x499)) (= 0 (x66 x499 0))))
(define-fun x354 ((x499 Int)) Bool (and (= (x66 x499 1) x499) (= (x66 1 x499) x499)))
(define-fun x127 ((x499 Int)) Bool (and (x354 x499) (x180 x499)))
(define-fun x44 ((x499 Int)) Bool (and (= (x302 115792089237316195423570985008687907853269984665640564039457584007913129639935 x499) x499) (= x499 (x302 x499 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x462 ((x499 Int)) Bool (and (= 0 (x302 0 x499)) (= 0 (x302 x499 0))))
(define-fun x46 ((x499 Int)) Bool (= x499 (x302 x499 x499)))
(define-fun x313 ((x499 Int)) Bool (and (x44 x499) (x462 x499) (x46 x499)))
(define-fun x224 ((x499 Int) (x358 Int)) Bool (= (x302 x499 x358) (x302 x358 x499)))
(define-fun x16 ((x499 Int) (x358 Int)) Bool (and (=> (<= 0 x499) (>= x499 (x302 x499 x358))) (<= 0 (x302 x499 x358)) (=> (<= 0 x358) (>= x358 (x302 x499 x358)))))
(define-fun x26 ((x499 Int) (x358 Int)) Bool (and (x16 x499 x358) (x224 x499 x358)))
(define-fun x34 ((x499 Int)) Bool (= (x303 x499 1099511627776) (x302 x499 1099511627775)))
(define-fun x141 ((x499 Int)) Bool (and (x34 x499) (x26 x499 1099511627775)))
(define-fun x254 ((x499 Int) (x358 Int)) Bool (and (> x358 (x303 x499 x358)) (>= (x303 x499 x358) 0)))
(define-fun x287 ((x499 Int) (x358 Int)) Bool (=> (and (<= 0 x499) (> x358 0)) (= (> x358 x499) (= (x303 x499 x358) x499))))
(define-fun x400 ((x499 Int) (x358 Int)) Bool (=> (and (and (>= x499 x358) (< x499 (+ x358 x358))) (< 0 x358)) (= (- x499 x358) (x303 x499 x358))))
(define-fun x476 ((x499 Int) (x358 Int)) Bool (=> (< 0 x358) (= x499 (+ (* x358 (x407 x499 x358)) (x303 x499 x358)))))
(define-fun x105 ((x499 Int) (x358 Int)) Bool (and (x254 x499 x358) (x476 x499 x358) (x400 x499 x358) (x287 x499 x358)))
(define-fun x503 ((x499 Int)) Bool (= (x303 0 x499) 0))
(define-fun x416 ((x499 Int)) Bool (= 0 (x303 x499 1)))
(define-fun x473 ((x499 Int)) Bool (= (x303 x499 x499) 0))
(define-fun x18 ((x499 Int)) Bool (and (x416 x499) (x473 x499) (x503 x499)))
(define-fun x480 ((x499 Int) (x358 Int)) Bool (=> (and (> x358 0) (< 0 x499)) (and (>= x499 (x407 x499 x358)) (>= (x407 x499 x358) 0))))
(define-fun x230 ((x499 Int) (x358 Int)) Bool (=> (and (and (<= 1 x358) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x358)) (and (< x499 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x499))) (and (>= (x407 x499 x358) 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x407 x499 x358)))))
(define-fun x475 ((x499 Int) (x358 Int)) Bool (=> (and (> x499 x358) (< 1 x358)) (> x499 (x407 x499 x358))))
(define-fun x58 ((x499 Int) (x358 Int)) Bool (=> (and (> x499 0) (< 0 x358)) (= (< x499 x358) (= 0 (x407 x499 x358)))))
(define-fun x510 ((x499 Int) (x358 Int)) Bool (=> (and (< 0 x358) (< 0 x499)) (and (<= (* x358 (x407 x499 x358)) x499) (< (- x499 x358) (* x358 (x407 x499 x358))))))
(define-fun x84 ((x499 Int) (x358 Int)) Bool (= (- x499 (x302 (- x358 1) x499)) (* (x407 x499 x358) x358)))
(define-fun x309 ((x499 Int) (x358 Int)) Bool (and (x84 x499 x358) (x480 x499 x358) (x230 x499 x358) (x58 x499 x358) (x475 x499 x358) (x510 x499 x358)))
(define-fun x343 ((x499 Int)) Bool (= 0 (x407 0 x499)))
(define-fun x263 ((x499 Int)) Bool (= x499 (x407 x499 1)))
(define-fun x424 ((x499 Int)) Bool (=> (not (= 0 x499)) (= (x407 x499 x499) 1)))
(define-fun x137 ((x499 Int)) Bool (and (x343 x499) (x424 x499) (x263 x499)))
(define-fun x365 ((x499 Int)) Bool (= (x302 x499 1) (x303 x499 2)))
(define-fun x331 ((x499 Int)) Bool (and (x26 x499 1) (x365 x499)))
(define-fun x360 ((x499 Int)) Bool (= (x302 x499 127) (x303 x499 128)))
(define-fun x347 ((x499 Int)) Bool (and (x26 x499 127) (x360 x499)))
(define-fun x192 ((x499 Int)) Bool (= (x507 x499) (+ (x302 x499 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x303 x499 32))))
(define-fun x429 ((x499 Int)) Bool (and (x26 x499 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x192 x499)))
(define-fun x83 ((x499 Int) (x358 Int)) Bool (=> (and (> x499 0) (< 0 x358)) (and (>= x499 (x66 (x407 x499 x358) x358)) (< (- x499 x358) (x66 (x407 x499 x358) x358)))))
(define-fun x50 ((x499 Int) (x358 Int)) Bool (and (x475 x499 x358) (x83 x499 x358) (x58 x499 x358) (x230 x499 x358) (x480 x499 x358)))
(define-fun x517 ((x499 Int)) Bool (and (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x440 x499 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (x440 115792089237316195423570985008687907853269984665640564039457584007913129639935 x499) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(define-fun x298 ((x499 Int)) Bool (and (= x499 (x440 x499 0)) (= x499 (x440 0 x499))))
(define-fun x117 ((x499 Int)) Bool (= x499 (x440 x499 x499)))
(define-fun x348 ((x499 Int)) Bool (and (x517 x499) (x298 x499) (x117 x499)))
(define-fun x463 ((x499 Int) (x358 Int)) Bool (= (x440 x358 x499) (x440 x499 x358)))
(define-fun x6 ((x499 Int) (x358 Int)) Bool (and (>= (+ x499 x358) (x440 x499 x358)) (=> (<= 0 x499) (>= (x440 x499 x358) x499)) (=> (<= 0 x358) (<= x358 (x440 x499 x358)))))
(define-fun x505 ((x499 Int) (x358 Int)) Bool (and (x463 x499 x358) (x6 x499 x358)))
(define-fun x112 ((x499 Int)) Bool (= (x303 x499 32) (x302 x499 31)))
(define-fun x387 ((x499 Int)) Bool (and (x26 x499 31) (x112 x499)))
(define-fun x307 ((x413 Int)) Int 0)
(define-fun x350 ((x413 Int)) Int 0)
(define-fun x450 ((x413 Int)) Int (ite (> x381 x413) (x262 x413) 0))
(define-fun x528 ((x413 Int)) Int (ite (and (<= 0 x413) (< x413 x381)) (x247 x413) (x450 x413)))
(define-fun x227 ((x413 Int)) Int (ite (= x413 x229) x361 (x88 x413)))
(define-fun x191 ((x413 Int)) Int (ite (= x288 x413) x359 (x181 x413)))
(define-fun x219 ((x413 Int)) Int (ite (= x413 x288) x404 (x191 x413)))
(define-fun x179 ((x413 Int)) Int (ite (= x288 x413) x45 (x255 x413)))
(define-fun x223 ((x413 Int)) Int (ite (= x413 x288) 1 (x209 x413)))
(define-fun x506 ((x413 Int)) Int (ite (= x288 x413) x153 (x379 x413)))
(define-fun x320 ((x413 Int)) Int (ite (= x288 x413) x41 (x24 x413)))
(define-fun x428 ((x413 Int)) Int (ite (= x288 x413) x308 (x506 x413)))
(define-fun x281 ((x413 Int)) Int (ite (= x413 x432) x458 (x500 x413)))
(define-fun x74 ((x413 Int)) Int (ite (= x432 x413) 604800 (x460 x413)))
(define-fun x194 ((x413 Int)) Int (ite (= x392 x413) x48 (x163 x413)))
(define-fun x235 ((x413 Int)) Int (ite (= x160 x413) x447 (x513 x413)))
(define-fun x186 ((x413 Int)) Int (ite (= x413 x160) x438 (x525 x413)))
(define-fun x459 ((x413 Int)) Int (ite (= x413 x160) x393 (x123 x413)))
(define-fun x299 ((x413 Int)) Int (ite (= x413 x498) x427 (x213 x413)))
(define-fun x249 ((x413 Int)) Int (ite (= x288 x413) x443 (x219 x413)))
(define-fun x295 ((x413 Int)) Int (ite (= x413 x288) x164 (x179 x413)))
(define-fun x250 ((x413 Int)) Int (ite (= x413 x288) x406 (x223 x413)))
(define-fun x260 ((x413 Int)) Int (ite (= x288 x413) x531 (x428 x413)))
(define-fun x335 ((x413 Int)) Int (ite (= x413 x288) x446 (x320 x413)))
(define-fun x188 ((x413 Int)) Int (ite (= x432 x413) x403 (x501 x413)))
(define-fun x20 ((x413 Int)) Int 0)
(define-fun x135 ((x413 Int)) Int 0)
(define-fun x157 ((x413 Int)) Int (ite (= x273 x413) 0 (x316 x413)))
(define-fun x408 ((x413 Int)) Int (ite (= x413 x318) 0 (x19 x413)))
(define-fun x208 ((x413 Int)) Int (ite x107 (x316 x413) (x157 x413)))
(define-fun x477 ((x413 Int)) Int (ite x504 (x19 x413) (x408 x413)))
(define-fun x344 ((x413 Int)) Int (ite x12 (x316 x413) (ite x107 (x316 x413) (x157 x413))))
(define-fun x516 ((x413 Int)) Int (ite (= x413 x259) x279 (x64 x413)))
(define-fun x310 ((x413 Int)) Int (ite (= x76 x413) x145 (x344 x413)))
(define-fun x514 ((x413 Int)) Int (ite x340 (x344 x413) (x310 x413)))
(define-fun x67 ((x413 Int)) Int (ite (= x108 x413) x167 (x514 x413)))
(define-fun x241 ((x413 Int)) Int (ite (= x413 x259) x454 (x64 x413)))
(define-fun x374 ((x413 Int)) Int (ite x402 (x19 x413) (ite x504 (x19 x413) (x408 x413))))
(define-fun x268 ((x413 Int)) Int (ite (= x413 x158) x159 (x472 x413)))
(define-fun x442 ((x413 Int)) Int (ite (= x413 x336) x412 (x374 x413)))
(define-fun x111 ((x413 Int)) Int (ite x189 (x374 x413) (x442 x413)))
(define-fun x101 ((x413 Int)) Int (ite (= x413 x414) x377 (x111 x413)))
(define-fun x372 ((x413 Int)) Int (ite (= x413 x158) x371 (x472 x413)))
(assert (= (x271 x288) (x271 (+ 1 x288))))
(assert (x264 x382))
(assert (x264 x27))
(assert (x264 x359))
(assert (x127 32))
(assert (= (and x471 x142) x199))
(assert (= x504 (and (not x453) x425)))
(assert (x264 x236))
(assert (x127 x324))
(assert (x348 x217))
(assert (x96 1461501637330902918203684832716283019655932542975))
(assert (= (and x36 x529) x456))
(assert (x264 x218))
(assert (= x448 (x328 (x266 64 x448 3))))
(assert (=> (<= x164 10000) (= (x271 x164) 0)))
(assert (x264 x229))
(assert (> (x485 32 x158) 10000))
(assert (=> (>= 10000 x464) (= (x271 x464) 0)))
(assert (= x314 (and x168 (not x461))))
(assert (x264 x42))
(assert (x264 x404))
(assert (= (x271 (+ x273 1)) (x271 x273)))
(assert (x137 x487))
(assert (x264 x452))
(assert (x264 x317))
(assert (not (x96 (x266 64 x448 3))))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x266 64 x23 3)))
(assert (x331 x487))
(assert (x137 (x128 2 x121)))
(assert (= (x271 (+ x410 x289)) (x271 x289)))
(assert (x26 x185 x292))
(assert (x18 1099511627776))
(assert (= (and x425 x453) x383))
(assert (x96 57896044618658097711785492504343953926634992332820282019728792003956564819968))
(assert (x264 x41))
(assert (x264 x446))
(assert (x264 x441))
(assert (x264 x130))
(assert (x264 x133))
(assert (= 0 (x271 57896044618658097711785492504343953926634992332820282019728792003956564819967)))
(assert (and (= (x66 27 3) 81) (= (x66 3 3) 9) (= 81 (x66 9 9)) (= (x66 9 3) 27)))
(assert (not (x96 (x266 64 x23 3))))
(assert (x264 x520))
(assert (= (x271 (+ x489 x289)) (x271 x289)))
(assert (x264 x193))
(assert (x494 8 x346))
(assert (= (x271 2855319274) 0))
(assert (x127 x502))
(assert (x264 x17))
(assert (= x293 (and (not x52) x484)))
(assert (x18 128))
(assert (x264 x375))
(assert (x264 x110))
(assert (x313 x479))
(assert (x264 x94))
(assert (= x470 (=> (= x90 (= (ite (< 31 x324) 1 0) 1)) (and (=> (and x90 (and (= (> x220 0) x142) (= (x485 32 x158) x336) (= x220 (x302 115792089237316195423570985008687907853269984665640564039457584007913129639904 x324)))) (and (=> (and (and (= x32 0) (= x414 x336)) (not x142)) x210) (=> x142 x156))) (=> (and (and (or (and (= 0 x323) x146) (and (and (= x17 x323) (= (x528 x337) x17)) (not x146))) (= (= x324 0) x146)) (not x90)) x124)))))
(assert (x264 x211))
(assert (x264 x464))
(assert (x105 x324 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (and x461 x168) x71))
(assert (= 0 (x271 1099511627774)))
(assert (= x225 (=> (and (= (> x40 x193) x36) (or (and x36 (and (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x169 115792089237316195423570985008687907853269984665640564039457584007913129639935 x214)) x292) (= x214 (* x502 8)) (= x185 (x528 x161)) (= (x302 x185 x292) x167) (= x502 (x302 31 x40)) (= (x391 (+ x134 x206)) x161))) (not x36))) x21)))
(assert (x264 x151))
(assert (< 10000 (x266 64 x448 3)))
(assert (x264 x153))
(assert (x264 x308))
(assert (x50 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x128 2 x121)))
(assert (x144 x11))
(assert (x264 x284))
(assert (x264 x173))
(assert (x494 8 x324))
(assert (x96 604800))
(assert (= (x328 (x266 64 x164 2)) x164))
(assert (x494 2 x40))
(assert (x264 x481))
(assert (< 10000 (x485 32 x392)))
(assert (x264 x518))
(assert (= (x271 (+ x76 1)) (x271 x76)))
(assert (x18 x487))
(assert (x264 x373))
(assert (x264 x221))
(assert (x309 (+ x324 31) 32))
(assert (x264 x81))
(assert (= (x271 (+ 1 x498)) (x271 x498)))
(assert (= (x271 (x485 32 x392)) (x485 32 x392)))
(assert (= (x190 (x266 64 x164 2)) 64))
(assert (x264 x420))
(assert (x264 x217))
(assert (= (x271 4294967295) 0))
(assert (= x484 (or x12 x415)))
(assert (= (or x286 x162) x1))
(assert (x264 x466))
(assert (x264 x399))
(assert (x264 x161))
(assert (x105 x324 32))
(assert (= (and (not x146) x171) x297))
(assert (= (x271 (x266 64 x60 2)) (x266 64 x60 2)))
(assert (x264 x38))
(assert (x313 x73))
(assert (x127 x38))
(assert (x264 x364))
(assert (= x392 (x328 (x485 32 x392))))
(assert (x264 x126))
(assert (x50 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x128 2 x104)))
(assert (x313 x202))
(assert (x144 x339))
(assert (= (=> (and (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x109) x2) (= (x391 (+ x411 x165)) x91) (= x121 (* 8 x40)) (= (ite (>= 1 x165) x91 (x440 x165 x411)) x279) (= x165 (x302 x315 x2)) (<= 1 x109) (= (* 2 x40) x411) (= x109 (x169 115792089237316195423570985008687907853269984665640564039457584007913129639935 x121))) x378) x409))
(assert (x264 x202))
(assert (x313 x324))
(assert (x96 2855319274))
(assert (x18 2))
(assert (x387 x40))
(assert (x127 x469))
(assert (x264 x300))
(assert (and (= 28269553036454149273332760011886696253239742350009903329945699220681916416 (x128 2 244)) (= (x128 2 228) 431359146674410236714672241392314090778194310760649159697657763987456) (= (x128 2 92) 4951760157141521099596496896) (= (x128 2 112) 5192296858534827628530496329220096) (= (x128 2 130) 1361129467683753853853498429727072845824) (= (x128 2 174) 23945242826029513411849172299223580994042798784118784) (= (x128 2 253) 14474011154664524427946373126085988481658748083205070504932198000989141204992) (= (x128 2 119) 664613997892457936451903530140172288) (= 26328072917139296674479506920917608079723773850137277813577744384 (x128 2 214)) (= (x128 2 223) 13479973333575319897333507543509815336818572211270286240551805124608) (= 12554203470773361527671578846415332832204710888928069025792 (x128 2 193)) (= (x128 2 137) 174224571863520493293247799005065324265472) (= (x128 2 241) 3533694129556768659166595001485837031654967793751237916243212402585239552) (= 154742504910672534362390528 (x128 2 87)) (= (x128 2 123) 10633823966279326983230456482242756608) (= (x128 2 10) 1024) (= 140737488355328 (x128 2 47)) (= (x128 2 74) 18889465931478580854784) (= (x128 2 21) 2097152) (= (x128 2 186) 98079714615416886934934209737619787751599303819750539264) (= 2787593149816327892691964784081045188247552 (x128 2 141)) (= (x128 2 234) 27606985387162255149739023449108101809804435888681546220650096895197184) (= (x128 2 143) 11150372599265311570767859136324180752990208) (= 44601490397061246283071436545296723011960832 (x128 2 145)) (= (x128 2 199) 803469022129495137770981046170581301261101496891396417650688) (= 536870912 (x128 2 29)) (= 147573952589676412928 (x128 2 67)) (= 134217728 (x128 2 27)) (= (x128 2 170) 1496577676626844588240573268701473812127674924007424) (= (x128 2 178) 383123885216472214589586756787577295904684780545900544) (= (x128 2 107) 162259276829213363391578010288128) (= 3450873173395281893717377931138512726225554486085193277581262111899648 (x128 2 231)) (= 356811923176489970264571492362373784095686656 (x128 2 148)) (= (x128 2 52) 4503599627370496) (= 12259964326927110866866776217202473468949912977468817408 (x128 2 183)) (= (x128 2 167) 187072209578355573530071658587684226515959365500928) (= 226156424291633194186662080095093570025917938800079226639565593765455331328 (x128 2 247)) (= 4611686018427387904 (x128 2 62)) (= 39614081257132168796771975168 (x128 2 95)) (= 89202980794122492566142873090593446023921664 (x128 2 146)) (= (x128 2 39) 549755813888) (= 33554432 (x128 2 25)) (= 2722258935367507707706996859454145691648 (x128 2 131)) (= 205688069665150755269371147819668813122841983204197482918576128 (x128 2 207)) (= (x128 2 215) 52656145834278593348959013841835216159447547700274555627155488768) (= 6129982163463555433433388108601236734474956488734408704 (x128 2 182)) (= (x128 2 171) 2993155353253689176481146537402947624255349848014848) (= (x128 2 140) 1393796574908163946345982392040522594123776) (= (x128 2 239) 883423532389192164791648750371459257913741948437809479060803100646309888) (= 2199023255552 (x128 2 41)) (= (x128 2 212) 6582018229284824168619876730229402019930943462534319453394436096) (= 4 (x128 2 2)) (= (x128 2 225) 53919893334301279589334030174039261347274288845081144962207220498432) (= 822752278660603021077484591278675252491367932816789931674304512 (x128 2 209)) (= 6739986666787659948666753771754907668409286105635143120275902562304 (x128 2 222)) (= (x128 2 221) 3369993333393829974333376885877453834204643052817571560137951281152) (= 128 (x128 2 7)) (= (x128 2 229) 862718293348820473429344482784628181556388621521298319395315527974912) (= 633825300114114700748351602688 (x128 2 99)) (= 72057594037927936 (x128 2 56)) (= 191561942608236107294793378393788647952342390272950272 (x128 2 177)) (= (x128 2 88) 309485009821345068724781056) (= (x128 2 213) 13164036458569648337239753460458804039861886925068638906788872192) (= 713623846352979940529142984724747568191373312 (x128 2 149)) (= 365375409332725729550921208179070754913983135744 (x128 2 158)) (= 55213970774324510299478046898216203619608871777363092441300193790394368 (x128 2 235)) (= 1180591620717411303424 (x128 2 70)) (= 324518553658426726783156020576256 (x128 2 108)) (= (x128 2 72) 4722366482869645213696) (= 14134776518227074636666380005943348126619871175004951664972849610340958208 (x128 2 243)) (= (x128 2 80) 1208925819614629174706176) (= (x128 2 219) 842498333348457493583344221469363458551160763204392890034487820288) (= 748288838313422294120286634350736906063837462003712 (x128 2 169)) (= (x128 2 195) 50216813883093446110686315385661331328818843555712276103168) (= 3291009114642412084309938365114701009965471731267159726697218048 (x128 2 211)) (= (x128 2 3) 8) (= (x128 2 34) 17179869184) (= 1461501637330902918203684832716283019655932542976 (x128 2 160)) (= 1725436586697640946858688965569256363112777243042596638790631055949824 (x128 2 230)) (= 215679573337205118357336120696157045389097155380324579848828881993728 (x128 2 227)) (= 22300745198530623141535718272648361505980416 (x128 2 144)) (= 5986310706507378352962293074805895248510699696029696 (x128 2 172)) (= 332306998946228968225951765070086144 (x128 2 118)) (= 10141204801825835211973625643008 (x128 2 103)) (= 4096 (x128 2 12)) (= (x128 2 210) 1645504557321206042154969182557350504982735865633579863348609024) (= 1048576 (x128 2 20)) (= (x128 2 120) 1329227995784915872903807060280344576) (= 32768 (x128 2 15)) (= (x128 2 196) 100433627766186892221372630771322662657637687111424552206336) (= (x128 2 168) 374144419156711147060143317175368453031918731001856) (= (x128 2 54) 18014398509481984) (= (x128 2 55) 36028797018963968) (= (x128 2 46) 70368744177664) (= 421249166674228746791672110734681729275580381602196445017243910144 (x128 2 218)) (= 21778071482940061661655974875633165533184 (x128 2 134)) (= (x128 2 188) 392318858461667547739736838950479151006397215279002157056) (= 11692013098647223345629478661730264157247460343808 (x128 2 163)) (= (x128 2 185) 49039857307708443467467104868809893875799651909875269632) (= 9223372036854775808 (x128 2 63)) (= 649037107316853453566312041152512 (x128 2 109)) (= 28948022309329048855892746252171976963317496166410141009864396001978282409984 (x128 2 254)) (= 19342813113834066795298816 (x128 2 84)) (= (x128 2 1) 2) (= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x128 2 256)) (= (x128 2 11) 2048) (= (x128 2 49) 562949953421312) (= (x128 2 93) 9903520314283042199192993792) (= 24519928653854221733733552434404946937899825954937634816 (x128 2 184)) (= 46768052394588893382517914646921056628989841375232 (x128 2 165)) (= 34359738368 (x128 2 35)) (= 200867255532373784442745261542645325315275374222849104412672 (x128 2 197)) (= (x128 2 122) 5316911983139663491615228241121378304) (= (x128 2 100) 1267650600228229401496703205376) (= 1125899906842624 (x128 2 50)) (= 316912650057057350374175801344 (x128 2 98)) (= 93536104789177786765035829293842113257979682750464 (x128 2 166)) (= (x128 2 96) 79228162514264337593543950336) (= (x128 2 76) 75557863725914323419136) (= (x128 2 236) 110427941548649020598956093796432407239217743554726184882600387580788736) (= (x128 2 152) 5708990770823839524233143877797980545530986496) (= 56539106072908298546665520023773392506479484700019806659891398441363832832 (x128 2 245)) (= (x128 2 106) 81129638414606681695789005144064) (= (x128 2 154) 22835963083295358096932575511191922182123945984) (= (x128 2 65) 36893488147419103232) (= (x128 2 37) 137438953472) (= (x128 2 82) 4835703278458516698824704) (= 182687704666362864775460604089535377456991567872 (x128 2 157)) (= 3138550867693340381917894711603833208051177722232017256448 (x128 2 191)) (= (x128 2 155) 45671926166590716193865151022383844364247891968) (= 91343852333181432387730302044767688728495783936 (x128 2 156)) (= 1427247692705959881058285969449495136382746624 (x128 2 150)) (= (x128 2 8) 256) (= 2361183241434822606848 (x128 2 71)) (= 95780971304118053647396689196894323976171195136475136 (x128 2 176)) (= 2251799813685248 (x128 2 51)) (= 2475880078570760549798248448 (x128 2 91)) (= 340282366920938463463374607431768211456 (x128 2 128)) (= (x128 2 31) 2147483648) (= (x128 2 115) 41538374868278621028243970633760768) (= 9007199254740992 (x128 2 53)) (= 411376139330301510538742295639337626245683966408394965837152256 (x128 2 208)) (= (x128 2 36) 68719476736) (= 20282409603651670423947251286016 (x128 2 104)) (= (x128 2 44) 17592186044416) (= 604462909807314587353088 (x128 2 79)) (= 730750818665451459101842416358141509827966271488 (x128 2 159)) (= (x128 2 13) 8192) (= (x128 2 233) 13803492693581127574869511724554050904902217944340773110325048447598592) (= 85070591730234615865843651857942052864 (x128 2 126)) (= (x128 2 238) 441711766194596082395824375185729628956870974218904739530401550323154944) (= (x128 2 43) 8796093022208) (= (x128 2 17) 131072) (= (x128 2 124) 21267647932558653966460912964485513216) (= (x128 2 255) 57896044618658097711785492504343953926634992332820282019728792003956564819968) (= (x128 2 216) 105312291668557186697918027683670432318895095400549111254310977536) (= 18446744073709551616 (x128 2 64)) (= 19807040628566084398385987584 (x128 2 94)) (= 1 (x128 2 0)) (= (x128 2 232) 6901746346790563787434755862277025452451108972170386555162524223799296) (= 35184372088832 (x128 2 45)) (= (x128 2 18) 262144) (= (x128 2 139) 696898287454081973172991196020261297061888) (= 67108864 (x128 2 26)) (= (x128 2 77) 151115727451828646838272) (= (x128 2 224) 26959946667150639794667015087019630673637144422540572481103610249216) (= (x128 2 127) 170141183460469231731687303715884105728) (= (x128 2 248) 452312848583266388373324160190187140051835877600158453279131187530910662656) (= (x128 2 116) 83076749736557242056487941267521536) (= 113078212145816597093331040047546785012958969400039613319782796882727665664 (x128 2 246)) (= 2596148429267413814265248164610048 (x128 2 111)) (= (x128 2 192) 6277101735386680763835789423207666416102355444464034512896) (= (x128 2 201) 3213876088517980551083924184682325205044405987565585670602752) (= (x128 2 175) 47890485652059026823698344598447161988085597568237568) (= (x128 2 89) 618970019642690137449562112) (= (x128 2 16) 65536) (= (x128 2 6) 64) (= (x128 2 138) 348449143727040986586495598010130648530944) (= 1569275433846670190958947355801916604025588861116008628224 (x128 2 190)) (= 40564819207303340847894502572032 (x128 2 105)) (= (x128 2 189) 784637716923335095479473677900958302012794430558004314112) (= 1766847064778384329583297500742918515827483896875618958121606201292619776 (x128 2 240)) (= 274877906944 (x128 2 38)) (= 401734511064747568885490523085290650630550748445698208825344 (x128 2 198)) (= (x128 2 42) 4398046511104) (= (x128 2 81) 2417851639229258349412352) (= 12855504354071922204335696738729300820177623950262342682411008 (x128 2 203)) (= 3064991081731777716716694054300618367237478244367204352 (x128 2 181)) (= 8388608 (x128 2 23)) (= (x128 2 85) 38685626227668133590597632) (= 281474976710656 (x128 2 48)) (= 590295810358705651712 (x128 2 69)) (= 2923003274661805836407369665432566039311865085952 (x128 2 161)) (= 11417981541647679048466287755595961091061972992 (x128 2 153)) (= 4294967296 (x128 2 32)) (= 2305843009213693952 (x128 2 61)) (= 42535295865117307932921825928971026432 (x128 2 125)) (= (x128 2 249) 904625697166532776746648320380374280103671755200316906558262375061821325312) (= (x128 2 135) 43556142965880123323311949751266331066368) (= (x128 2 226) 107839786668602559178668060348078522694548577690162289924414440996864) (= (x128 2 114) 20769187434139310514121985316880384) (= (x128 2 129) 680564733841876926926749214863536422912) (= (x128 2 251) 3618502788666131106986593281521497120414687020801267626233049500247285301248) (= (x128 2 252) 7237005577332262213973186563042994240829374041602535252466099000494570602496) (= 158456325028528675187087900672 (x128 2 97)) (= (x128 2 24) 16777216) (= 25108406941546723055343157692830665664409421777856138051584 (x128 2 194)) (= 1099511627776 (x128 2 40)) (= (x128 2 117) 166153499473114484112975882535043072) (= (x128 2 59) 576460752303423488) (= (x128 2 73) 9444732965739290427392) (= (x128 2 250) 1809251394333065553493296640760748560207343510400633813116524750123642650624) (= 7067388259113537318333190002971674063309935587502475832486424805170479104 (x128 2 242)) (= (x128 2 162) 5846006549323611672814739330865132078623730171904) (= (x128 2 30) 1073741824) (= 1606938044258990275541962092341162602522202993782792835301376 (x128 2 200)) (= (x128 2 136) 87112285931760246646623899502532662132736) (= (x128 2 75) 37778931862957161709568) (= (x128 2 147) 178405961588244985132285746181186892047843328) (= 8589934592 (x128 2 33)) (= (x128 2 9) 512) (= (x128 2 66) 73786976294838206464) (= (x128 2 179) 766247770432944429179173513575154591809369561091801088) (= 32 (x128 2 5)) (= (x128 2 19) 524288) (= (x128 2 132) 5444517870735015415413993718908291383296) (= 220855883097298041197912187592864814478435487109452369765200775161577472 (x128 2 237)) (= (x128 2 113) 10384593717069655257060992658440192) (= 10889035741470030830827987437816582766592 (x128 2 133)) (= (x128 2 90) 1237940039285380274899124224) (= 295147905179352825856 (x128 2 68)) (= 51422017416287688817342786954917203280710495801049370729644032 (x128 2 205)) (= (x128 2 206) 102844034832575377634685573909834406561420991602098741459288064) (= 144115188075855872 (x128 2 57)) (= (x128 2 217) 210624583337114373395836055367340864637790190801098222508621955072) (= (x128 2 60) 1152921504606846976) (= (x128 2 142) 5575186299632655785383929568162090376495104) (= 1684996666696914987166688442938726917102321526408785780068975640576 (x128 2 220)) (= 302231454903657293676544 (x128 2 78)) (= 5070602400912917605986812821504 (x128 2 102)) (= 2658455991569831745807614120560689152 (x128 2 121)) (= 11972621413014756705924586149611790497021399392059392 (x128 2 173)) (= (x128 2 110) 1298074214633706907132624082305024) (= 1532495540865888858358347027150309183618739122183602176 (x128 2 180)) (= (x128 2 58) 288230376151711744) (= 16 (x128 2 4)) (= 9671406556917033397649408 (x128 2 83)) (= 2535301200456458802993406410752 (x128 2 101)) (= 16384 (x128 2 14)) (= 77371252455336267181195264 (x128 2 86)) (= (x128 2 164) 23384026197294446691258957323460528314494920687616) (= (x128 2 22) 4194304) (= (x128 2 187) 196159429230833773869868419475239575503198607639501078528) (= 268435456 (x128 2 28)) (= (x128 2 202) 6427752177035961102167848369364650410088811975131171341205504) (= 2854495385411919762116571938898990272765493248 (x128 2 151)) (= (x128 2 204) 25711008708143844408671393477458601640355247900524685364822016)))
(assert (x96 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x309 (+ 31 x373) 32))
(assert (x264 x216))
(assert (= 0 (x271 3024000)))
(assert (x347 x441))
(assert (x264 x234))
(assert (= x152 (or x189 x199)))
(assert (x264 x214))
(assert (= x12 (and (not x82) x198)))
(assert (x105 x441 128))
(assert (x264 x79))
(assert (x264 x508))
(assert (= (x271 (x266 64 x448 3)) (x266 64 x448 3)))
(assert (= 0 (x271 1099508603775)))
(assert (= x421 (or x523 x297)))
(assert (= (x271 (x485 32 x259)) (x485 32 x259)))
(assert (x264 x419))
(assert (x264 x159))
(assert (= (x271 (+ 1 x318)) (x271 x318)))
(assert (= (and x152 x87) x54))
(assert (x264 x73))
(assert (= (x4 (x266 64 x60 2)) 2))
(assert (= (and (not x439) x497) x340))
(assert (x264 x449))
(assert (= (x271 (+ 1 x160)) (x271 x160)))
(assert (x18 x73))
(assert (x313 1099511627775))
(assert (x26 x315 x2))
(assert (x264 x363))
(assert (x331 x258))
(assert (x264 x256))
(assert (x264 x370))
(assert (x264 x376))
(assert (< (x266 64 x448 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (x190 (x485 32 x392)) 32))
(assert (= 64 (x190 (x266 64 x23 3))))
(assert (x264 x59))
(assert (x137 (x128 2 x214)))
(assert (x127 8))
(assert (x264 x280))
(assert (x264 x291))
(assert (x264 x496))
(assert (x144 x520))
(assert (x137 32))
(assert (x347 x73))
(assert (< 10000 (x485 32 x259)))
(assert (< 10000 (x266 64 x60 2)))
(assert (x264 x406))
(assert (= (x271 3054290345) 0))
(assert (x264 x62))
(assert (x264 x327))
(assert (x264 x512))
(assert (x313 x258))
(assert (x264 x447))
(assert (x429 x324))
(assert (x264 x531))
(assert (= x210 (=> (and (= x87 (< x220 x324)) (or (not x87) (and (and (= (x302 x202 x420) x377) (= (x302 31 x324) x346) (= x139 (* 8 x346)) (= (x391 (+ x337 x32)) x370) (= x420 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x169 115792089237316195423570985008687907853269984665640564039457584007913129639935 x139))) (= x202 (x528 x370))) x87))) x290)))
(assert (x264 x305))
(assert (x105 x40 32))
(assert (= x240 x228))
(assert (= x226 (=> (and (= (not (> x193 32)) x68) (= x345 (+ 1 x76)) (= x145 (x528 x206))) (and (=> (and (= x108 x345) (= 32 x134)) x225) x68))))
(assert (x96 57896044618658097711785492504343953926634992332820282019728792003956564819967))
(assert (x309 x258 2))
(assert (x264 x40))
(assert (not (x96 (x485 32 x392))))
(assert (x313 x40))
(assert (x264 x14))
(assert (x264 x69))
(assert (x264 x412))
(assert (x96 1099511627775))
(assert (= (=> (and (= x412 (x528 x337)) (= (+ 1 x336) x401) (= (not (> x220 32)) x398)) (and (=> (and (= x32 32) (= x401 x414)) x210) x398)) x156))
(assert (x96 1099508603775))
(assert (x264 x490))
(assert (x137 (+ x40 31)))
(assert (= (or x71 x314) x30))
(assert (x105 x487 2))
(assert (x264 x451))
(assert (=> (<= x60 10000) (= 0 (x271 x60))))
(assert (x96 18446744073709551615))
(assert (=> (<= x448 10000) (= 0 (x271 x448))))
(assert (x264 x45))
(assert (x264 x474))
(assert (x264 x329))
(assert (x264 x277))
(assert (= (and x457 (not x90)) x171))
(assert (x264 x468))
(assert (x137 (+ x373 31)))
(assert (x264 x200))
(assert (x264 x526))
(assert (= (x271 1461501637330902918203684832716283019655932542975) 0))
(assert (x264 x334))
(assert (x264 x195))
(assert (x264 x93))
(assert (x348 x411))
(assert (x264 x367))
(assert (x18 x258))
(assert (x505 x133 x217))
(assert (= x168 (or x421 x261)))
(assert (x264 x39))
(assert (= (x169 115792089237316195423570985008687907853269984665640564039457584007913129639935 x214) (ite (> 256 x214) (x407 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x128 2 x214)) 0)))
(assert (x309 (+ 31 x376) 32))
(assert (x387 x324))
(assert (x137 (+ x324 31)))
(assert (x264 x444))
(assert (= x158 (x328 (x485 32 x158))))
(assert (x313 127))
(assert (x313 x185))
(assert (x264 x368))
(assert (x264 x205))
(assert (x494 2 x324))
(assert (x264 x196))
(assert (x264 x381))
(assert (x264 x325))
(assert (x18 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x264 x434))
(assert (x264 x11))
(assert (x313 x420))
(assert (x264 x253))
(assert (x264 x337))
(assert (x264 x15))
(assert (= (and x82 x198) x430))
(assert (x264 x448))
(assert (= x21 (=> (and (= x454 (+ 1 x42)) (= x42 (* 2 x40))) x378)))
(assert (x264 x493))
(assert (x264 x80))
(assert (= 0 (x271 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x264 x351))
(assert (x127 x346))
(assert (x264 x109))
(assert (= (and x355 x293) x286))
(assert (x264 x279))
(assert (> (x266 64 x164 2) 10000))
(assert (= (or x116 x107) x415))
(assert (= (x271 (+ x31 x253)) (x271 x31)))
(assert (x264 x244))
(assert (x264 x78))
(assert (x264 x119))
(assert (x264 x458))
(assert (= (and x174 x207) x425))
(assert (x264 x220))
(assert (x264 x511))
(assert (= (=> (and (= (+ x451 1) x371) (= x451 (* 2 x324))) x246) x290))
(assert (x264 x9))
(assert (x264 x2))
(assert (x313 x315))
(assert (x137 (x128 2 x139)))
(assert (x18 x441))
(assert (x264 x469))
(assert (< (x266 64 x59 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (or (and x529 (not x36)) x456) x57))
(assert (= (=> (= x52 (= 1 (ite (> x40 31) 1 0))) (and (=> (and (and (or (and (= 0 x315) x355) (and (not x355) (and (= (x528 x206) x466) (= x466 x315)))) (= x355 (= 0 x40))) (not x52)) x409) (=> (and x52 (and (= (x485 32 x259) x76) (= (x302 115792089237316195423570985008687907853269984665640564039457584007913129639904 x40) x193) (= (< 0 x193) x439))) (and (=> x439 x226) (=> (and (and (= 0 x134) (= x76 x108)) (not x439)) x225))))) x228))
(assert (x264 x411))
(assert (x264 x60))
(assert (x96 3899865236))
(assert (= (x328 (x485 32 x259)) x259))
(assert (x127 x40))
(assert (= (x4 (x266 64 x59 3)) 3))
(assert (= 0 (x271 57896044618658097711785492504343953926634992332820282019728792003956564819999)))
(assert (x313 x292))
(assert (x264 x72))
(assert (x264 x315))
(assert (x264 x150))
(assert (x313 x323))
(assert (x264 x275))
(assert (x264 x3))
(assert (x264 x92))
(assert (x264 x403))
(assert (x264 x524))
(assert (x264 x145))
(assert (= (=> (= x5 (not (> x469 1))) (and (=> (and (= x305 (x391 (+ 32 x119))) (= x27 (x131 x433)) (= (x528 x368) x151) (= (x391 (+ x325 x103)) x367) (= (x528 x119) x93) (= x321 (x391 (+ 32 x367))) (= x433 (x266 64 x164 2)) (= (x223 x288) x406) (= (x528 x367) x375) (= (x391 (+ x329 32)) x368) (= (x528 x103) x327) (<= x375 18446744073709551615) (or (and (> x47 x317) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x317) (<= x47 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x47) (> x317 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (<= x406 255) (= (x391 (+ x94 32)) x234) (<= x531 1099511627775) (= x47 (x482 (- x95 31))) (= (x391 (+ x300 32)) x329) (= (x320 x288) x446) (not (= x325 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (not (= x317 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (= x403 (x357 x433)) (= x94 (x391 (+ 32 x368))) (= (x482 (- x333 191)) x351) (= x333 (x482 (- x381 x276))) (>= 1461501637330902918203684832716283019655932542975 x443) (<= x80 2) (= (not (> x469 1)) x243) (= x183 (x482 (- x381 x375))) (= x95 (x482 (- x381 x103))) (not (or (and (> x183 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x321 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (= (<= x183 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x321)) (< x183 x321)))) (= (x391 (+ 32 x103)) x300) (= x49 (x482 (- x381 x93))) (not (= x95 57896044618658097711785492504343953926634992332820282019728792003956564819999)) (<= x446 1099511627775) (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x468) (<= x351 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x468 x351)) (and (> x468 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x351))) (= (x428 x288) x531) (= (x391 (+ x317 x103)) x119) (= (x528 x234) x325) (>= 18446744073709551615 x93) (or (>= 57896044618658097711785492504343953926634992332820282019728792003956564819739 x468) (<= 57896044618658097711785492504343953926634992332820282019728792003956564819968 x468)) (= x468 (x528 x276)) (>= 1461501637330902918203684832716283019655932542975 x327) (not (or (and (> x305 x49) (= (<= x305 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x49 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x305) (> x49 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) (= x317 (x528 x94)) (= x80 (x528 x329)) (or (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x325) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x47)) (and (= (<= x47 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x325)) (< x325 x47))) (= x443 (x219 x288)) (<= x27 1461501637330902918203684832716283019655932542975) (>= 1099511627775 x403) (= (x391 (+ x276 x468)) x103)) (and x243 (=> (and (and (<= x244 127) (>= x9 1) (= (x177 x334) x9) (= (= 0 x275) x495) (= x389 false) (= false x77) (= false x98) (= x113 (or (not x362) x436)) (= x419 3054290345) (<= x244 127) (= false x467) (= x436 (not x495)) (= (x295 x28) x275) (= (x266 64 x59 3) x28) (= false x527) (= x35 x59) (= x386 false) (>= 2 x275)) (and (= x352 2855319274) (= x418 false) (>= 127 x3) (= x385 x178) (= (x177 x334) x29) (= x362 (< x385 x257)) (= x508 4) (= false x176) (= x311 false) (= x342 false) (= x11 36) (= x53 false) (= false x166) (>= 127 x3) (= false x486) (= false x155) (= false x97) (= x120 false) (>= x29 1) (= x35 x178))) x113))) x5)) x13))
(assert (x264 x356))
(assert (x96 57896044618658097711785492504343953926634992332820282019728792003956564819739))
(assert (not (x96 (x266 64 x164 2))))
(assert (< 10000 (x266 64 x59 3)))
(assert (x264 x164))
(assert (= (x266 64 x59 3) (x271 (x266 64 x59 3))))
(assert (not (x96 (x485 32 x259))))
(assert (x264 x231))
(assert (x264 x237))
(assert (x264 x312))
(assert (= x529 (or x340 x437)))
(assert (=> (>= 10000 x196) (= 0 (x271 x196))))
(assert (x264 x487))
(assert (= (x190 (x266 64 x59 3)) 64))
(assert (x264 x47))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x266 64 x164 2)))
(assert (x264 x106))
(assert (= (x271 (+ 1 x336)) (x271 x336)))
(assert (x105 x73 128))
(assert (= 64 (x190 (x266 64 x448 3))))
(assert (> (x266 64 x23 3) 10000))
(assert (x348 x133))
(assert (= 0 (x271 57896044618658097711785492504343953926634992332820282019728792003956564819968)))
(assert (x264 x394))
(assert (= (x328 (x266 64 x59 3)) x59))
(assert (x264 x70))
(assert (not (x96 (x266 64 x59 3))))
(assert (= (and x140 x430) x116))
(assert (= (or x54 (and x152 (not x87))) x261))
(assert (x264 x170))
(assert (x264 x29))
(assert (x127 2))
(assert (x264 x393))
(assert (=> (>= 10000 x229) (= 0 (x271 x229))))
(assert (x144 x508))
(assert (x313 1))
(assert (= 32 (x190 (x485 32 x158))))
(assert (x313 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x264 x390))
(assert (= (=> (and (and (and (= (or x154 (not x265)) x349) (= x449 x395) (<= x277 2) (= x449 (x247 4)) x349 (= x86 false) (<= 1 x518) (= x23 x175) (= false x8) (= false x369) (= (= x277 0) x138) (= x15 x78) (= false x384) (= x154 (not x138)) (= x518 (x177 x334)) (= x22 false) (= 3054290345 x211) (= (x266 64 x23 3) x233) (= false x353) (= x85 false) (= (x247 0) x78) (>= 127 x422) (>= 18446744073709551615 x449) (= (x255 x233) x277) (<= x422 127)) (and (= x359 x201) (and (and (= (x391 (+ 32 x231)) x206) (>= x356 1) (= (x482 (- x381 x40)) x382) (= (x528 x280) x427) (= (x391 (+ 32 x512)) x237) (= x441 (x407 x258 2)) (= (x302 1099511627775 x479) x308) (= x512 (x391 (+ x252 x276))) (= x110 (x528 x492)) (= x493 (x528 x237)) (= false x187) (= x474 (x482 (- x381 x512))) (= x452 (x482 (- x236 (mod (ite (< x376 32) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x528 x276) x252) (= (x528 x512) x447) (= x361 (x88 x229)) (<= x40 18446744073709551615) (= (+ x498 1) x259) (>= x394 1) (= x82 (> x376 31)) (= x376 (ite (< 0 x236) x441 (x302 127 x441))) (= (ite (not (= 0 x493)) 1 0) x438) (not (or (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x382) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x206)) (and (= (<= x382 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x206)) (> x206 x382)))) (or (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x252) (<= x496 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (> x496 x252) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x252) (<= x496 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) (or (>= 57896044618658097711785492504343953926634992332820282019728792003956564819739 x399) (<= 57896044618658097711785492504343953926634992332820282019728792003956564819968 x399)) (or (and (= (<= x522 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x396 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x396 x522)) (and (> x396 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x522))) (= x519 (x482 (- x381 x276))) (not (> x434 x381)) (= x41 (x24 x288)) (>= 2 x110) (or (>= x252 57896044618658097711785492504343953926634992332820282019728792003956564819968) (<= x252 57896044618658097711785492504343953926634992332820282019728792003956564819739)) (= x236 (x302 1 x258)) (= (+ x276 64) x126) (= x40 (x528 x231)) (<= x130 1461501637330902918203684832716283019655932542975) (<= x469 18446744073709551615) (>= x469 1) (= (x177 x334) x394) (= (+ 1 x448) x257) (or (and (< x312 x496) (= (<= x312 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x496))) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x312) (<= x496 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (>= 1099511627775 x41) (or (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x496) (> x39 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (= (<= x496 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x39)) (< x39 x496))) (= x524 (x302 1099511627775 x479)) (<= x356 1461501637330902918203684832716283019655932542975) (= x306 (+ x449 4)) (<= x256 127) (= (x391 (+ x396 x512)) x231) (= (+ 32 x306) x276) (= (+ 1 x432) x392) (= (x482 (- x519 191)) x496) (= x312 (x528 x276)) (= x356 (x131 x37)) (= x498 (+ 1 x160)) (= (+ x448 1) x511) (or (>= 57896044618658097711785492504343953926634992332820282019728792003956564819739 x39) (>= x39 57896044618658097711785492504343953926634992332820282019728792003956564819968)) (= x14 (x391 (+ x126 x399))) (= x130 (x528 x284)) (= (x379 x288) x153) (<= 1 x130) (= (x64 x259) x258) (= (x391 (+ x39 x276)) x284) (= x267 false) (= (x391 (+ 1 x38)) x48) (= (x528 x276) x39) (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x399) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x496)) (> x496 x399)) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x496) (> x399 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x45 (x255 x288)) (= x458 (+ x524 3024000)) (> x381 x363) (= (+ x70 x276) x434) (= x404 (x191 x288)) (or (= x452 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x452 1)) (not (= x474 57896044618658097711785492504343953926634992332820282019728792003956564819999)) (<= x447 1461501637330902918203684832716283019655932542975) (not (= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x396)) (= (x528 x14) x60) (= x70 (* x469 32)) (= (x391 (+ x312 x126)) x492) (= (x391 (+ 32 x150)) x280) (<= x60 2) (= x160 (+ x341 x81)) (>= 255 x45) (<= x524 1099508603775) (= x432 (+ 1 x288)) (= (x485 32 x392) x341) (= (x266 64 x60 2) x37) (or (<= 57896044618658097711785492504343953926634992332820282019728792003956564819968 x312) (<= x312 57896044618658097711785492504343953926634992332820282019728792003956564819739)) (= x363 (+ x306 31)) (= x81 (x507 (* 4 x38))) (= x393 (x528 x150)) (= (x391 (+ 32 x280)) x106) (= x488 x69) (<= x256 127) (= x522 (x482 (- x474 31))) (>= 2 x393) (= 3899865236 x221) (= (x528 x106) x396) (= x469 (x528 x306)) (>= x110 1) (= (x227 x334) x488) (= x201 x229) (<= x404 1461501637330902918203684832716283019655932542975) (= x399 (x528 x276)) (= x150 (x391 (+ x237 32))) (= (x266 64 x448 3) x288) (= (x163 x392) x38) (<= x153 1099511627775)) (= x366 x479)))) (and (>= x65 0) (= x215 false) (>= 1461501637330902918203684832716283019655932542975 x196) x143 (>= x201 0) (= false x245) (= false x509) (not (= x464 x218)) (not (= x196 x464)) (>= 1461501637330902918203684832716283019655932542975 x270) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x381) (= x242 false) (<= x366 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x285 x178) (not (= x334 x464)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x319) (<= x79 1461501637330902918203684832716283019655932542975) (= (> (x177 x196) 0) x136) (<= 0 x319) (<= x89 4294967295) (= x10 2855319274) (>= x381 68) (<= x464 1461501637330902918203684832716283019655932542975) (>= x334 1) (= x274 x334) (<= 0 x148) (not (= x218 x196)) (= false x33) (= (x177 x334) x62) (= false x125) (= x172 1) (= 3899865236 x423) (= x61 false) (= x251 (< 0 (x177 x334))) x136 (<= x65 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= x478 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= false x388) (not (= x334 x196)) (>= 1461501637330902918203684832716283019655932542975 x201) (= (< x285 x448) x265) (<= x148 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x520 36) (>= 1461501637330902918203684832716283019655932542975 x334) (= false x55) (<= 0 x63) (<= 1 x62) (= x143 (< 0 (x177 x464))) (>= 1461501637330902918203684832716283019655932542975 x63) (<= x178 1099511627775) (>= 127 x332) (<= x417 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x339 4) (<= 0 x89) (<= 0 x322) (>= 1461501637330902918203684832716283019655932542975 x218) (= x212 (< 0 (x177 x218))) (= x178 x175) (>= 127 x332) (<= 0 x270) (<= x448 1099511627774) (<= 1 x464) (>= x218 1) (>= x478 0) (>= x417 0) (= x338 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x521) (not (= x334 x218)) (<= 1 x196) (>= x178 0) (= x102 false) (<= x322 1461501637330902918203684832716283019655932542975) x251 (<= 0 x521) x212 (>= x366 0) (<= x490 1461501637330902918203684832716283019655932542975))) (and (=> (and x82 (and (= x294 (+ x31 x253)) (= x273 (ite (< x40 32) x31 x294)) (= x184 (+ x25 x31)) (= x253 (x407 (+ x40 31) 32)) (= x31 (x485 32 x259)) (= (> x184 x273) x140) (= x25 (x407 (+ x376 31) 32)))) (and (=> x140 x115) (=> (not x140) x240))) (=> (not x82) x228))) x278))
(assert (x264 x377))
(assert (x264 x292))
(assert (x313 31))
(assert (= (and x90 x457) x471))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x485 32 x259)))
(assert (= (and x171 x146) x523))
(assert (x264 x139))
(assert (= x162 (and (not x355) x293)))
(assert (x105 x40 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x264 x422))
(assert (x264 x479))
(assert (x96 4294967295))
(assert (x264 x32))
(assert (x264 x488))
(assert (= (x4 (x266 64 x23 3)) 3))
(assert (x96 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (= (x271 (+ 1 x259)) (x271 x259)))
(assert (x264 x395))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x485 32 x392)))
(assert (not (x96 (x266 64 x60 2))))
(assert (x264 x489))
(assert (x137 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (x309 (+ x40 31) 32))
(assert (x137 x258))
(assert (x96 1099511627774))
(assert (x264 x91))
(assert (x264 x23))
(assert (x105 x479 1099511627776))
(assert (x137 2))
(assert (= (x169 115792089237316195423570985008687907853269984665640564039457584007913129639935 x121) (ite (> 256 x121) (x407 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x128 2 x121)) 0)))
(assert (x264 x483))
(assert (= x402 (and (not x174) x207)))
(assert (x127 4))
(assert (x264 x49))
(assert (x264 x149))
(assert (= 0 (x271 3899865236)))
(assert (x264 x333))
(assert (x309 x487 2))
(assert (x264 x257))
(assert (= (x169 115792089237316195423570985008687907853269984665640564039457584007913129639935 x139) (ite (> 256 x139) (x407 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x128 2 x139)) 0)))
(assert (x105 x258 2))
(assert (= x437 (and x497 x439)))
(assert (x494 4 x38))
(assert (x264 x445))
(assert (= (x271 (+ x432 1)) (x271 x432)))
(assert (= (x271 18446744073709551615) 0))
(assert (x264 x346))
(assert (x264 x443))
(assert (x313 x2))
(assert (x137 (x128 2 x104)))
(assert (x264 x519))
(assert (x96 3024000))
(assert (x264 x252))
(assert (x96 3054290345))
(assert (x18 x324))
(assert (x264 x167))
(assert (x264 x306))
(assert (x50 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x128 2 x139)))
(assert (= x269 (or x504 x383)))
(assert (x505 x165 x411))
(assert (x494 32 x469))
(assert (x264 x502))
(assert (x264 x121))
(assert (x26 x323 x526))
(assert (x264 x134))
(assert (x18 x40))
(assert (x26 x202 x420))
(assert (= 2 (x4 (x266 64 x164 2))))
(assert (= x470 x122))
(assert (=> (>= 10000 x218) (= 0 (x271 x218))))
(assert (x141 x479))
(assert (x348 x165))
(assert (= true x198))
(assert (= (x271 (x266 64 x164 2)) (x266 64 x164 2)))
(assert (x313 x441))
(assert (x96 57896044618658097711785492504343953926634992332820282019728792003956564819999))
(assert (x264 x371))
(assert (= 0 (x271 1099511627775)))
(assert (= (x271 (+ x31 x25)) (x271 x31)))
(assert (x264 x99))
(assert (= 64 (x190 (x266 64 x60 2))))
(assert (x264 x10))
(assert (x264 x48))
(assert (x18 x479))
(assert (x264 x165))
(assert (< (x485 32 x158) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (x271 115792089237316195423570985008687907853269984665640564039457584007913129639904) 0))
(assert (= x115 (=> (and (= x118 (+ 1 x273)) (= (not (< x118 x184)) x129)) (and x129 x240))))
(assert (= (or x57 x1) x207))
(assert (x494 8 x40))
(assert (=> (>= 10000 x59) (= 0 (x271 x59))))
(assert (= (=> (and (= x75 (not (< x380 x197))) (= (+ x318 1) x380)) (and x122 x75)) x296))
(assert (x264 x410))
(assert (= (x190 (x485 32 x259)) 32))
(assert (= (x266 64 x23 3) (x271 (x266 64 x23 3))))
(assert (x264 x206))
(assert (x264 x332))
(assert (x264 x339))
(assert (x264 x323))
(assert (x264 x352))
(assert (x264 x258))
(assert (= (x169 115792089237316195423570985008687907853269984665640564039457584007913129639935 x104) (ite (> 256 x104) (x407 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x128 2 x104)) 0)))
(assert (x264 x454))
(assert (not (x96 (x485 32 x158))))
(assert (= (=> (and (<= x324 18446744073709551615) (or (= 1 x99) (= x99 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (not (= x92 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (= (x472 x158) x487) (= (x482 (- x381 x324)) x481) (= x324 (x528 x445)) (= (x302 1 x487) x291) (= x99 (x482 (- x291 (mod (ite (> 32 x373) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x528 x216) x92) (= (x391 (+ x92 x512)) x445) (or (and (< x92 x522) (= (<= x522 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x92))) (and (> x92 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x522))) (= (+ 1 x259) x158) (= x373 (ite (< 0 x291) x73 (x302 127 x73))) (= (x391 (+ x106 32)) x216) (= x73 (x407 x487 2)) (not (or (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x337) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x481)) (and (< x481 x337) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x337) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x481))))) (= x337 (x391 (+ x445 32))) (= x174 (> x373 31))) (and (=> (and (and (= x289 (x485 32 x158)) (= x100 (+ x410 x289)) (= x453 (> x197 x318)) (= (x407 (+ x373 31) 32) x489) (= x410 (x407 (+ x324 31) 32)) (= (ite (> 32 x324) x289 x100) x318) (= x197 (+ x489 x289))) x174) (and (=> x453 x296) (=> (not x453) x122))) (=> (not x174) x470))) x378))
(assert (= x246 (=> (and (or (and (= 0 x164) (not x461)) (and (and (or (<= 57896044618658097711785492504343953926634992332820282019728792003956564819968 x149) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819739 x149)) (= x200 (x528 x195)) (= x164 x200) (= x195 (x391 (+ x126 x149))) (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x496) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x149)) (> x496 x149)) (and (<= x496 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x149))) (<= x200 2) (= (x528 x276) x149)) x461)) (and (>= 2 x301) (= x301 (x528 x364)) (or (<= x170 57896044618658097711785492504343953926634992332820282019728792003956564819739) (>= x170 57896044618658097711785492504343953926634992332820282019728792003956564819968)) (or (and (> x496 x170) (= (<= x496 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x170 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x496) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x170))) (= x170 (x528 x276)) (= x364 (x391 (+ x170 x126))) (= x461 (> x301 0)))) x13)))
(assert (x313 x487))
(assert (x264 x361))
(assert (< (x266 64 x60 2) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x264 x276))
(assert (x18 32))
(assert (x264 x396))
(assert (= (and (not x140) x430) x107))
(assert (= (and x52 x484) x497))
(assert (= (x271 57896044618658097711785492504343953926634992332820282019728792003956564819739) 0))
(assert (x264 x95))
(assert (= (x4 (x266 64 x448 3)) 3))
(assert (not x278))
(assert (x494 8 x502))
(assert (x264 x324))
(assert (x264 x103))
(assert (= (x271 x341) (x271 (+ x81 x341))))
(assert (x264 x321))
(assert (x264 x185))
(assert (=> (<= x23 10000) (= 0 (x271 x23))))
(assert (x264 x522))
(assert (= (=> (and (= (x391 (+ x133 x217)) x483) (= x104 (* x324 8)) (>= x390 1) (= x526 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x390)) (= (* 2 x324) x217) (= x159 (ite (>= 1 x133) x483 (x440 x133 x217))) (= (x169 115792089237316195423570985008687907853269984665640564039457584007913129639935 x104) x390) (= x133 (x302 x323 x526))) x246) x124))
(assert (x264 x455))
(assert (x264 x104))
(assert (x264 x183))
(assert (= x60 (x328 (x266 64 x60 2))))
(assert (= x457 (or x402 x269)))
(assert (x264 x438))
(assert (x313 x526))
(assert (x50 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x128 2 x214)))
(assert (x264 x25))
(assert (x264 x301))
(assert (x429 x40))
(assert (x264 x492))
(assert (x137 (+ 31 x376)))
(assert (= (x485 32 x158) (x271 (x485 32 x158))))
(assert (= (x328 (x266 64 x23 3)) x23))
(assert (= (and (not x142) x471) x189))
(assert (= (x271 604800) 0))
(assert (x264 x427))
(assert (=> (<= x334 10000) (= (x271 x334) 0)))
(check-sat)
(exit)
