(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Certora
Generated on: 2024-04-10
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x169 () Bool)
(declare-fun x28 () Int)
(declare-fun x255 () Bool)
(declare-fun x567 () Int)
(declare-fun x204 () Int)
(declare-fun x546 () Bool)
(declare-fun x258 () Int)
(declare-fun x372 () Bool)
(declare-fun x247 () Bool)
(declare-fun x404 () Bool)
(declare-fun x165 () Int)
(declare-fun x177 (Int Int) Int)
(declare-fun x340 () Bool)
(declare-fun x59 () Int)
(declare-fun x142 () Int)
(declare-fun x257 () Int)
(declare-fun x562 () Int)
(declare-fun x137 () Bool)
(declare-fun x527 () Bool)
(declare-fun x299 () Int)
(declare-fun x190 () Int)
(declare-fun x145 () Int)
(declare-fun x193 () Bool)
(declare-fun x320 () Int)
(declare-fun x117 () Int)
(declare-fun x277 () Int)
(declare-fun x351 () Int)
(declare-fun x385 () Bool)
(declare-fun x105 () Bool)
(declare-fun x224 () Bool)
(declare-fun x342 () Int)
(declare-fun x5 () Bool)
(declare-fun x143 () Bool)
(declare-fun x75 () Int)
(declare-fun x377 () Int)
(declare-fun x154 () Bool)
(declare-fun x178 () Bool)
(declare-fun x272 () Int)
(declare-fun x538 (Int) Int)
(declare-fun x129 () Int)
(declare-fun x87 () Int)
(declare-fun x433 () Int)
(declare-fun x37 () Bool)
(declare-fun x487 () Bool)
(declare-fun x451 () Int)
(declare-fun x7 () Int)
(declare-fun x43 (Int) Int)
(declare-fun x216 () Bool)
(declare-fun x375 () Bool)
(declare-fun x456 () Bool)
(declare-fun x517 () Bool)
(declare-fun x32 () Int)
(declare-fun x370 () Int)
(declare-fun x226 () Int)
(declare-fun x345 () Int)
(declare-fun x147 () Bool)
(declare-fun x128 () Bool)
(declare-fun x309 () Bool)
(declare-fun x86 () Bool)
(declare-fun x506 () Bool)
(declare-fun x458 () Bool)
(declare-fun x289 () Int)
(declare-fun x228 (Int) Int)
(declare-fun x225 () Int)
(declare-fun x306 () Int)
(declare-fun x355 (Int) Int)
(declare-fun x328 () Int)
(declare-fun x269 () Int)
(declare-fun x279 () Bool)
(declare-fun x486 () Int)
(declare-fun x63 () Bool)
(declare-fun x21 () Int)
(declare-fun x11 () Int)
(declare-fun x1 () Int)
(declare-fun x307 () Int)
(declare-fun x384 () Int)
(declare-fun x455 () Int)
(declare-fun x172 () Bool)
(declare-fun x401 () Int)
(declare-fun x266 () Bool)
(declare-fun x134 () Int)
(declare-fun x448 () Int)
(declare-fun x479 () Int)
(declare-fun x210 (Int) Int)
(declare-fun x18 () Int)
(declare-fun x120 () Int)
(declare-fun x361 () Int)
(declare-fun x187 () Int)
(declare-fun x151 () Int)
(declare-fun x336 () Int)
(declare-fun x159 () Bool)
(declare-fun x502 () Bool)
(declare-fun x293 () Bool)
(declare-fun x337 () Int)
(declare-fun x287 () Int)
(declare-fun x114 () Int)
(declare-fun x124 () Bool)
(declare-fun x382 () Int)
(declare-fun x417 () Bool)
(declare-fun x202 () Int)
(declare-fun x235 (Int) Int)
(declare-fun x200 () Int)
(declare-fun x203 () Bool)
(declare-fun x482 () Int)
(declare-fun x316 () Int)
(declare-fun x402 () Int)
(declare-fun x76 () Int)
(declare-fun x35 () Int)
(declare-fun x170 () Bool)
(declare-fun x403 () Bool)
(declare-fun x140 () Bool)
(declare-fun x123 () Bool)
(declare-fun x208 () Int)
(declare-fun x167 () Int)
(declare-fun x268 () Int)
(declare-fun x352 () Bool)
(declare-fun x161 () Int)
(declare-fun x547 (Int Int) Int)
(declare-fun x294 () Int)
(declare-fun x29 () Bool)
(declare-fun x395 () Int)
(declare-fun x278 () Int)
(declare-fun x420 () Int)
(declare-fun x273 () Int)
(declare-fun x275 () Bool)
(declare-fun x3 () Int)
(declare-fun x162 () Bool)
(declare-fun x442 () Int)
(declare-fun x559 () Int)
(declare-fun x222 () Int)
(declare-fun x405 () Int)
(declare-fun x366 () Bool)
(declare-fun x536 () Bool)
(declare-fun x46 () Int)
(declare-fun x303 () Int)
(declare-fun x109 () Int)
(declare-fun x182 () Int)
(declare-fun x218 () Int)
(declare-fun x14 () Int)
(declare-fun x298 () Int)
(declare-fun x466 () Bool)
(declare-fun x297 () Bool)
(declare-fun x358 () Int)
(declare-fun x550 () Bool)
(declare-fun x312 () Bool)
(declare-fun x73 (Int Int) Int)
(declare-fun x184 () Int)
(declare-fun x563 () Int)
(declare-fun x516 () Bool)
(declare-fun x474 () Bool)
(declare-fun x238 () Int)
(declare-fun x26 () Int)
(declare-fun x113 () Bool)
(declare-fun x65 (Int Int) Int)
(declare-fun x223 () Bool)
(declare-fun x490 () Int)
(declare-fun x9 () Bool)
(declare-fun x234 () Bool)
(declare-fun x437 () Bool)
(declare-fun x175 (Int) Int)
(declare-fun x10 () Int)
(declare-fun x112 () Int)
(declare-fun x57 () Int)
(declare-fun x504 () Int)
(declare-fun x156 () Bool)
(declare-fun x221 () Bool)
(declare-fun x381 () Int)
(declare-fun x520 () Int)
(declare-fun x42 () Bool)
(declare-fun x354 () Int)
(declare-fun x138 () Int)
(declare-fun x397 () Bool)
(declare-fun x459 () Bool)
(declare-fun x111 () Bool)
(declare-fun x363 () Bool)
(declare-fun x387 () Bool)
(declare-fun x157 () Bool)
(declare-fun x475 () Bool)
(declare-fun x389 () Bool)
(declare-fun x96 () Bool)
(declare-fun x301 () Bool)
(declare-fun x515 () Bool)
(declare-fun x315 () Int)
(declare-fun x416 () Bool)
(declare-fun x514 () Bool)
(declare-fun x489 () Bool)
(declare-fun x396 () Bool)
(declare-fun x64 () Bool)
(declare-fun x367 () Int)
(declare-fun x552 () Int)
(declare-fun x199 () Int)
(declare-fun x48 () Bool)
(declare-fun x49 () Int)
(declare-fun x418 () Int)
(declare-fun x212 () Int)
(declare-fun x427 () Int)
(declare-fun x261 () Int)
(declare-fun x122 () Int)
(declare-fun x564 (Int) Int)
(declare-fun x256 (Int Int) Int)
(declare-fun x171 () Bool)
(declare-fun x276 () Int)
(declare-fun x132 () Int)
(declare-fun x350 () Int)
(declare-fun x192 () Int)
(declare-fun x232 () Bool)
(declare-fun x485 (Int Int) Int)
(declare-fun x133 () Bool)
(declare-fun x249 () Bool)
(declare-fun x492 () Int)
(declare-fun x79 () Int)
(declare-fun x74 () Int)
(declare-fun x244 () Int)
(declare-fun x69 () Bool)
(declare-fun x413 () Int)
(declare-fun x391 () Int)
(declare-fun x398 () Int)
(declare-fun x495 () Int)
(declare-fun x229 () Int)
(declare-fun x107 () Bool)
(declare-fun x344 () Bool)
(declare-fun x33 () Int)
(declare-fun x319 () Int)
(declare-fun x314 () Bool)
(declare-fun x410 (Int) Bool)
(declare-fun x322 () Int)
(declare-fun x286 () Bool)
(declare-fun x34 () Int)
(declare-fun x94 () Bool)
(declare-fun x457 () Int)
(declare-fun x285 () Int)
(declare-fun x419 () Int)
(declare-fun x152 (Int Int) Int)
(declare-fun x252 () Int)
(declare-fun x555 () Int)
(declare-fun x443 (Int) Int)
(declare-fun x444 (Int) Int)
(declare-fun x393 () Int)
(declare-fun x106 () Bool)
(declare-fun x429 () Bool)
(declare-fun x560 () Bool)
(declare-fun x195 () Bool)
(declare-fun x446 () Int)
(declare-fun x362 () Int)
(declare-fun x311 () Bool)
(declare-fun x174 () Int)
(declare-fun x8 () Int)
(declare-fun x281 () Int)
(declare-fun x525 () Bool)
(declare-fun x209 () Bool)
(declare-fun x483 () Bool)
(declare-fun x434 () Int)
(declare-fun x348 () Bool)
(declare-fun x246 () Int)
(declare-fun x353 () Int)
(declare-fun x92 () Int)
(declare-fun x465 () Int)
(declare-fun x561 () Int)
(declare-fun x250 () Bool)
(declare-fun x40 () Int)
(declare-fun x468 () Bool)
(declare-fun x568 () Int)
(declare-fun x453 () Int)
(declare-fun x369 (Int Int Int) Int)
(declare-fun x518 () Int)
(declare-fun x530 () Int)
(declare-fun x359 () Int)
(declare-fun x436 (Int) Int)
(declare-fun x118 () Bool)
(declare-fun x472 () Int)
(declare-fun x428 () Int)
(declare-fun x357 () Int)
(declare-fun x50 () Int)
(declare-fun x386 () Bool)
(declare-fun x227 () Int)
(declare-fun x284 () Bool)
(declare-fun x85 () Bool)
(declare-fun x288 () Bool)
(declare-fun x93 () Int)
(declare-fun x323 () Bool)
(declare-fun x539 () Int)
(declare-fun x270 () Bool)
(declare-fun x356 () Bool)
(declare-fun x508 () Bool)
(declare-fun x121 () Bool)
(declare-fun x295 () Int)
(declare-fun x341 () Bool)
(declare-fun x101 () Bool)
(declare-fun x521 () Bool)
(declare-fun x460 () Bool)
(declare-fun x488 () Int)
(declare-fun x274 () Int)
(declare-fun x334 () Bool)
(declare-fun x464 () Bool)
(declare-fun x213 () Int)
(declare-fun x549 () Int)
(declare-fun x540 () Int)
(declare-fun x139 () Bool)
(declare-fun x371 () Int)
(declare-fun x158 () Bool)
(declare-fun x449 (Int) Int)
(declare-fun x491 () Int)
(declare-fun x399 () Int)
(declare-fun x2 () Int)
(declare-fun x421 () Bool)
(declare-fun x196 () Int)
(declare-fun x219 (Int) Int)
(declare-fun x445 () Int)
(declare-fun x4 () Bool)
(declare-fun x545 (Int Int) Int)
(declare-fun x39 () Bool)
(declare-fun x390 () Int)
(declare-fun x205 () Int)
(declare-fun x507 () Int)
(declare-fun x71 () Int)
(declare-fun x125 () Bool)
(declare-fun x31 () Bool)
(declare-fun x78 () Int)
(declare-fun x233 () Bool)
(declare-fun x44 () Bool)
(declare-fun x380 () Bool)
(declare-fun x67 () Bool)
(declare-fun x22 () Int)
(declare-fun x461 () Bool)
(declare-fun x103 () Int)
(declare-fun x83 () Int)
(declare-fun x126 () Int)
(declare-fun x77 () Bool)
(declare-fun x243 () Int)
(declare-fun x500 () Int)
(declare-fun x150 () Int)
(declare-fun x136 () Int)
(declare-fun x12 () Int)
(declare-fun x423 () Bool)
(declare-fun x493 () Bool)
(declare-fun x60 () Int)
(declare-fun x510 () Int)
(declare-fun x519 () Int)
(declare-fun x52 () Int)
(declare-fun x148 () Int)
(declare-fun x253 () Int)
(declare-fun x115 () Bool)
(declare-fun x477 () Bool)
(declare-fun x541 (Int) Int)
(declare-fun x532 () Bool)
(declare-fun x180 () Bool)
(declare-fun x163 () Int)
(declare-fun x435 () Bool)
(declare-fun x130 () Int)
(declare-fun x529 () Bool)
(declare-fun x13 () Bool)
(declare-fun x291 () Int)
(declare-fun x302 () Int)
(declare-fun x378 () Bool)
(declare-fun x542 () Bool)
(declare-fun x498 () Bool)
(declare-fun x55 () Int)
(declare-fun x553 () Bool)
(declare-fun x153 () Bool)
(declare-fun x267 () Int)
(declare-fun x179 () Bool)
(declare-fun x102 () Bool)
(declare-fun x467 () Int)
(declare-fun x36 () Int)
(declare-fun x135 () Int)
(declare-fun x84 () Int)
(declare-fun x494 () Bool)
(declare-fun x317 () Bool)
(declare-fun x512 () Int)
(declare-fun x254 () Int)
(declare-fun x58 (Int Int) Int)
(declare-fun x186 () Int)
(declare-fun x523 () Int)
(declare-fun x569 () Bool)
(declare-fun x313 () Int)
(declare-fun x503 () Int)
(declare-fun x264 () Bool)
(declare-fun x424 () Int)
(declare-fun x68 () Bool)
(declare-fun x499 () Int)
(declare-fun x56 () Int)
(declare-fun x331 () Bool)
(declare-fun x185 () Bool)
(declare-fun x343 () Bool)
(declare-fun x45 () Int)
(declare-fun x548 () Bool)
(declare-fun x141 () Int)
(declare-fun x310 () Int)
(declare-fun x339 () Int)
(declare-fun x452 () Int)
(declare-fun x62 () Int)
(declare-fun x110 () Bool)
(declare-fun x149 () Bool)
(declare-fun x509 () Bool)
(declare-fun x454 () Int)
(declare-fun x89 () Int)
(declare-fun x23 () Int)
(declare-fun x160 () Int)
(declare-fun x463 () Int)
(declare-fun x38 () Bool)
(declare-fun x513 () Int)
(declare-fun x198 () Int)
(declare-fun x409 () Bool)
(declare-fun x533 () Bool)
(declare-fun x168 () Bool)
(declare-fun x388 () Bool)
(declare-fun x505 (Int) Int)
(declare-fun x524 () Bool)
(declare-fun x19 () Bool)
(declare-fun x146 () Bool)
(declare-fun x30 () Bool)
(declare-fun x329 (Int) Int)
(declare-fun x556 () Bool)
(declare-fun x373 () Int)
(declare-fun x338 () Int)
(declare-fun x194 () Int)
(declare-fun x534 (Int) Int)
(declare-fun x526 () Int)
(declare-fun x95 () Bool)
(declare-fun x447 () Int)
(declare-fun x164 () Bool)
(declare-fun x471 () Int)
(declare-fun x551 () Int)
(declare-fun x425 () Bool)
(declare-fun x400 () Int)
(declare-fun x415 () Int)
(declare-fun x462 () Int)
(declare-fun x20 (Int) Int)
(declare-fun x544 () Int)
(declare-fun x197 () Int)
(declare-fun x438 () Bool)
(declare-fun x330 () Int)
(declare-fun x558 () Int)
(declare-fun x155 () Bool)
(declare-fun x535 () Int)
(declare-fun x432 () Bool)
(declare-fun x66 () Bool)
(declare-fun x248 () Int)
(declare-fun x127 () Bool)
(declare-fun x70 () Int)
(declare-fun x206 () Bool)
(declare-fun x6 () Bool)
(declare-fun x412 () Bool)
(declare-fun x183 () Int)
(declare-fun x119 () Bool)
(declare-fun x108 () Int)
(declare-fun x116 (Int) Int)
(declare-fun x104 () Int)
(declare-fun x349 () Bool)
(declare-fun x144 () Bool)
(declare-fun x324 () Int)
(declare-fun x81 () Int)
(declare-fun x263 () Bool)
(define-fun x374 ((x470 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x470) (>= x470 0)) x470 (- x470 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x231 ((x470 Int)) Int (ite (and (< x470 0) (>= x470 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x470 115792089237316195423570985008687907853269984665640564039457584007913129639936) x470))
(define-fun x292 ((x470 Int)) Int (ite (and (>= x470 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x470)) x470 (ite (and (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 x470) (> 231584178474632390847141970017375815706539969331281128078915168015826259279872 x470)) (- x470 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (>= x470 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (< x470 0)) (+ x470 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x152 x470 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x211 ((x537 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x537) (<= 0 x537)))
(define-fun x431 ((x537 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x537) (>= x537 0)))
(define-fun x245 ((x537 Int) (x440 Int)) Bool (= (x58 x440 x537) (x58 x537 x440)))
(define-fun x497 ((x537 Int) (x440 Int)) Bool (and (=> (and (> x440 0) (< x537 0)) (> 0 (x58 x537 x440))) (=> (and (> 0 x440) (> x537 0)) (> 0 (x58 x537 x440))) (=> (and (< 0 x440) (< 0 x537)) (> (x58 x537 x440) 0)) (=> (and (< x440 0) (> 0 x537)) (< 0 (x58 x537 x440)))))
(define-fun x16 ((x537 Int) (x440 Int)) Bool (=> (and (> x440 0) (> x537 0)) (= (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x58 x537 x440)) (= x440 (x547 (x292 (x58 x537 x440)) x537)))))
(define-fun x394 ((x537 Int) (x440 Int)) Bool (=> (and (not (= x440 0)) (not (= 0 x537))) (and (= x440 (x547 (x58 x537 x440) x537)) (= x537 (x547 (x58 x537 x440) x440)))))
(define-fun x80 ((x537 Int) (x440 Int)) Bool (=> (and (< 0 x440) (> x537 0)) (= (< 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x58 x537 x440)) (< (x547 115792089237316195423570985008687907853269984665640564039457584007913129639935 x537) x440))))
(define-fun x82 ((x537 Int) (x440 Int)) Bool (and (= (x292 (x58 x537 x440)) (x292 (x58 (- x537 115792089237316195423570985008687907853269984665640564039457584007913129639936) x440))) (= (x292 (x58 x537 x440)) (x292 (x58 x537 (- x440 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x292 (x58 x537 x440)) (x292 (x58 (- x537 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x440 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))
(define-fun x189 ((x537 Int) (x440 Int)) Bool (and (=> (and (and (<= x537 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 0 x537)) (and (> x440 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x440))) (= (>= (x547 57896044618658097711785492504343953926634992332820282019728792003956564819968 x537) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x440)) (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x58 x537 (- x440 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (=> (and (and (> x440 0) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x440)) (and (> x537 0) (<= x537 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (<= (x58 x537 x440) 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= (x547 57896044618658097711785492504343953926634992332820282019728792003956564819967 x440) x537))) (=> (and (and (<= x440 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x440)) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x537) (<= x537 115792089237316195423570985008687907853269984665640564039457584007913129639935))) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x58 (- x537 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x440 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (>= (x547 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x440)) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x537)))) (=> (and (and (> x440 0) (<= x440 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (> x537 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x537 115792089237316195423570985008687907853269984665640564039457584007913129639935))) (= (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x58 (- x537 115792089237316195423570985008687907853269984665640564039457584007913129639936) x440)) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x537) (x547 57896044618658097711785492504343953926634992332820282019728792003956564819968 x440))))))
(define-fun x368 ((x537 Int) (x440 Int)) Bool (and (x497 x537 x440) (x245 x537 x440) (x80 x537 x440) (x189 x537 x440) (x16 x537 x440) (x394 x537 x440) (x82 x537 x440)))
(define-fun x554 ((x537 Int)) Bool (and (= (x58 x537 0) 0) (= (x58 0 x537) 0)))
(define-fun x481 ((x537 Int)) Bool (and (= (x58 1 x537) x537) (= (x58 x537 1) x537)))
(define-fun x478 ((x537 Int)) Bool (and (x481 x537) (x554 x537)))
(define-fun x201 ((x537 Int)) Bool (and (= x537 (x256 115792089237316195423570985008687907853269984665640564039457584007913129639935 x537)) (= x537 (x256 x537 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x327 ((x537 Int)) Bool (and (= 0 (x256 x537 0)) (= 0 (x256 0 x537))))
(define-fun x88 ((x537 Int)) Bool (= (x256 x537 x537) x537))
(define-fun x522 ((x537 Int)) Bool (and (x201 x537) (x327 x537) (x88 x537)))
(define-fun x511 ((x537 Int) (x440 Int)) Bool (= (x256 x537 x440) (x256 x440 x537)))
(define-fun x280 ((x537 Int) (x440 Int)) Bool (and (=> (<= 0 x440) (>= x440 (x256 x537 x440))) (>= (x256 x537 x440) 0) (=> (<= 0 x537) (>= x537 (x256 x537 x440)))))
(define-fun x441 ((x537 Int) (x440 Int)) Bool (and (x280 x537 x440) (x511 x537 x440)))
(define-fun x501 ((x537 Int)) Bool (= (x152 x537 32) (x256 x537 31)))
(define-fun x422 ((x537 Int)) Bool (and (x441 x537 31) (x501 x537)))
(define-fun x296 ((x537 Int) (x440 Int)) Bool (and (> x440 (x152 x537 x440)) (>= (x152 x537 x440) 0)))
(define-fun x347 ((x537 Int) (x440 Int)) Bool (=> (and (<= 0 x537) (< 0 x440)) (= (= x537 (x152 x537 x440)) (> x440 x537))))
(define-fun x166 ((x537 Int) (x440 Int)) Bool (=> (and (> x440 0) (and (<= x440 x537) (< x537 (+ x440 x440)))) (= (x152 x537 x440) (- x537 x440))))
(define-fun x496 ((x537 Int) (x440 Int)) Bool (=> (< 0 x440) (= x537 (+ (x152 x537 x440) (* (x547 x537 x440) x440)))))
(define-fun x543 ((x537 Int) (x440 Int)) Bool (and (x296 x537 x440) (x347 x537 x440) (x496 x537 x440) (x166 x537 x440)))
(define-fun x365 ((x537 Int)) Bool (= (x152 0 x537) 0))
(define-fun x260 ((x537 Int)) Bool (= 0 (x152 x537 1)))
(define-fun x414 ((x537 Int)) Bool (= 0 (x152 x537 x537)))
(define-fun x15 ((x537 Int)) Bool (and (x260 x537) (x365 x537) (x414 x537)))
(define-fun x240 ((x537 Int) (x440 Int)) Bool (= (* x440 x537) (x58 x537 x440)))
(define-fun x379 ((x537 Int) (x440 Int)) Bool (and (= (x58 (- x537 115792089237316195423570985008687907853269984665640564039457584007913129639936) x440) (- (* x440 x537) (* x440 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x58 (- x537 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x440 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* x537 (- x440 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x440 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (* (- x440 115792089237316195423570985008687907853269984665640564039457584007913129639936) x537) (x58 x537 (- x440 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x230 ((x537 Int) (x440 Int)) Bool (and (x394 x537 x440) (x379 x537 x440) (x80 x537 x440) (x82 x537 x440) (x16 x537 x440) (x189 x537 x440) (x240 x537 x440)))
(define-fun x325 ((x537 Int) (x440 Int)) Bool (=> (and (> x440 0) (> x537 0)) (and (>= (x547 x537 x440) 0) (<= (x547 x537 x440) x537))))
(define-fun x191 ((x537 Int) (x440 Int)) Bool (=> (and (and (< x537 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x537 0)) (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x440) (>= x440 1))) (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x547 x537 x440)) (>= (x547 x537 x440) 0))))
(define-fun x473 ((x537 Int) (x440 Int)) Bool (=> (and (> x537 x440) (> x440 1)) (< (x547 x537 x440) x537)))
(define-fun x241 ((x537 Int) (x440 Int)) Bool (=> (and (< 0 x440) (< 0 x537)) (= (< x537 x440) (= 0 (x547 x537 x440)))))
(define-fun x305 ((x537 Int) (x440 Int)) Bool (=> (and (< 0 x537) (< 0 x440)) (and (>= x537 (x58 (x547 x537 x440) x440)) (< (- x537 x440) (x58 (x547 x537 x440) x440)))))
(define-fun x290 ((x537 Int) (x440 Int)) Bool (and (x473 x537 x440) (x305 x537 x440) (x191 x537 x440) (x325 x537 x440) (x241 x537 x440)))
(define-fun x346 ((x537 Int)) Bool (= (x547 0 x537) 0))
(define-fun x476 ((x537 Int)) Bool (= x537 (x547 x537 1)))
(define-fun x565 ((x537 Int)) Bool (=> (not (= x537 0)) (= (x547 x537 x537) 1)))
(define-fun x566 ((x537 Int)) Bool (and (x565 x537) (x346 x537) (x476 x537)))
(define-fun x90 ((x537 Int)) Bool (and (= (x65 x537 115792089237316195423570985008687907853269984665640564039457584007913129639935) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x65 115792089237316195423570985008687907853269984665640564039457584007913129639935 x537) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(define-fun x531 ((x537 Int)) Bool (and (= x537 (x65 x537 0)) (= x537 (x65 0 x537))))
(define-fun x426 ((x537 Int)) Bool (= x537 (x65 x537 x537)))
(define-fun x570 ((x537 Int)) Bool (and (x90 x537) (x426 x537) (x531 x537)))
(define-fun x271 ((x537 Int) (x440 Int)) Bool (= (x65 x440 x537) (x65 x537 x440)))
(define-fun x407 ((x537 Int) (x440 Int)) Bool (and (=> (<= 0 x537) (<= x537 (x65 x537 x440))) (>= (+ x537 x440) (x65 x537 x440)) (=> (>= x440 0) (<= x440 (x65 x537 x440)))))
(define-fun x54 ((x537 Int) (x440 Int)) Bool (and (x271 x537 x440) (x407 x537 x440)))
(define-fun x188 ((x537 Int) (x440 Int)) Bool (=> (and (< 0 x440) (< 0 x537)) (and (< (- x537 x440) (* (x547 x537 x440) x440)) (<= (* x440 (x547 x537 x440)) x537))))
(define-fun x557 ((x537 Int) (x440 Int)) Bool (= (* (x547 x537 x440) x440) (- x537 (x256 (- x440 1) x537))))
(define-fun x61 ((x537 Int) (x440 Int)) Bool (and (x241 x537 x440) (x191 x537 x440) (x557 x537 x440) (x188 x537 x440) (x473 x537 x440) (x325 x537 x440)))
(define-fun x469 ((x537 Int)) Bool (= (x256 x537 1) (x152 x537 2)))
(define-fun x25 ((x537 Int)) Bool (and (x469 x537) (x441 x537 1)))
(define-fun x47 ((x537 Int)) Bool (= (x152 x537 128) (x256 x537 127)))
(define-fun x360 ((x537 Int)) Bool (and (x47 x537) (x441 x537 127)))
(define-fun x176 ((x408 Int)) Int 0)
(define-fun x406 ((x408 Int)) Int 0)
(define-fun x480 ((x408 Int)) Int 0)
(define-fun x24 ((x408 Int)) Int 0)
(define-fun x237 ((x408 Int)) Int 0)
(define-fun x318 ((x408 Int)) Int 0)
(define-fun x262 ((x408 Int)) Int 0)
(define-fun x282 ((x408 Int)) Int 0)
(define-fun x450 ((x408 Int)) Int 0)
(define-fun x207 ((x408 Int)) Int 0)
(define-fun x304 ((x408 Int)) Int 0)
(define-fun x51 ((x408 Int)) Int (ite (< x408 x568) (x43 x408) 0))
(define-fun x173 ((x408 Int)) Int (ite (and (> x568 x408) (<= 0 x408)) (x355 x408) (x51 x408)))
(define-fun x332 ((x408 Int)) Int (ite (= x93 x408) x8 (x235 x408)))
(define-fun x217 ((x408 Int)) Int (ite (= x408 x401) x222 (x332 x408)))
(define-fun x333 ((x408 Int)) Int (ite (= x408 128) 13 (x237 x408)))
(define-fun x91 ((x408 Int)) Int (ite (= x408 160) 39553310892875263560936207548857176834471854732421237974622739861269930573824 (x480 x408)))
(define-fun x97 ((x408 Int)) Int (ite (= 192 x408) 4 (x406 x408)))
(define-fun x214 ((x408 Int)) Int (ite (= 224 x408) 39473711962023174749424659199615060097653232135126263878786656434573155500032 (x176 x408)))
(define-fun x131 ((x408 Int)) Int (ite (= x408 256) 72464927124685711895252664195178772226123872012682517813167109100718830649344 (x450 x408)))
(define-fun x528 ((x408 Int)) Int (ite (and (> 288 x408) (>= x408 256)) (x329 (- x408 256)) (x131 x408)))
(define-fun x411 ((x408 Int)) Int 0)
(define-fun x300 ((x408 Int)) Int 0)
(define-fun x376 ((x408 Int)) Int (ite (= x408 x384) 0 (x228 x408)))
(define-fun x484 ((x408 Int)) Int (ite (= x420 x408) 0 (x210 x408)))
(define-fun x215 ((x408 Int)) Int (ite (= x71 x408) 0 (x534 x408)))
(define-fun x236 ((x408 Int)) Int (ite (= x408 x350) 0 (x175 x408)))
(define-fun x283 ((x408 Int)) Int (ite x403 (x228 x408) (x376 x408)))
(define-fun x181 ((x408 Int)) Int (ite x67 (x210 x408) (x484 x408)))
(define-fun x41 ((x408 Int)) Int (ite x146 (x534 x408) (x215 x408)))
(define-fun x242 ((x408 Int)) Int (ite x95 (x175 x408) (x236 x408)))
(define-fun x383 ((x408 Int)) Int (ite x5 (x228 x408) (ite x403 (x228 x408) (x376 x408))))
(define-fun x308 ((x408 Int)) Int (ite (= x434 x408) x390 (x383 x408)))
(define-fun x364 ((x408 Int)) Int (ite x297 (x210 x408) (ite x67 (x210 x408) (x484 x408))))
(define-fun x326 ((x408 Int)) Int (ite (= x408 320) 22163329580580053030292883849319169862539958002407764210677428189014622470144 (x318 x408)))
(define-fun x321 ((x408 Int)) Int (ite (= x408 x558) x33 (x364 x408)))
(define-fun x265 ((x408 Int)) Int (ite x387 (x534 x408) (ite x146 (x534 x408) (x215 x408))))
(define-fun x17 ((x408 Int)) Int (ite (= x408 x26) x313 (x265 x408)))
(define-fun x99 ((x408 Int)) Int (ite x128 (x175 x408) (ite x95 (x175 x408) (x236 x408))))
(define-fun x430 ((x408 Int)) Int (ite (= x408 x322) x415 (x99 x408)))
(define-fun x220 ((x408 Int)) Int (ite (= 288 x408) 1 (x262 x408)))
(define-fun x98 ((x408 Int)) Int (ite (and (<= 256 x408) (< x408 288)) (x329 (- x408 256)) (x282 x408)))
(define-fun x72 ((x408 Int)) Int (ite x9 (x528 x408) (x131 x408)))
(define-fun x335 ((x408 Int)) Int (ite (= x408 352) 34602258808455191227493136189427688107261027562213901346293687426555358216192 (x72 x408)))
(define-fun x251 ((x408 Int)) Int (ite (= 356 x408) x401 (x335 x408)))
(define-fun x392 ((x408 Int)) Int (ite (= 388 x408) 0 (x251 x408)))
(define-fun x239 ((x408 Int)) Int (ite (= x408 420) 0 (x392 x408)))
(define-fun x100 ((x408 Int)) Int (ite (= 452 x408) 57005 (x239 x408)))
(define-fun x439 ((x537 Int) (x440 Int) (x259 Int) (x27 Int)) Bool (=> (and (>= x440 0) (<= x440 x27) (<= x537 x259) (>= x537 0)) (>= (x58 x259 x27) (x58 x537 x440))))
(define-fun x53 ((x537 Int) (x440 Int) (x259 Int) (x27 Int)) Bool (=> (= x537 x259) (= (x58 x537 (- x440 x27)) (- (x58 x537 x440) (x58 x259 x27)))))
(assert (x211 x302))
(assert (x211 x467))
(assert (x211 x358))
(assert (< 10000 (x369 64 x160 161)))
(assert (= (=> (and (= x417 false) (= x29 false) (= false x438) (= false x107) (= x423 (>= x150 x457))) x423) x506))
(assert (x566 (+ x10 31)))
(assert (x368 x519 (- x112 x22)))
(assert (x211 x212))
(assert (x441 x12 x257))
(assert (x478 (- x22 x225)))
(assert (x211 x520))
(assert (x211 x273))
(assert (x53 x519 x112 x14 x519))
(assert (not (x410 (x369 64 x160 161))))
(assert (=> (<= x93 10000) (= (x20 x93) 0)))
(assert (x53 x519 x112 x22 x14))
(assert (x25 x362))
(assert (= (x505 (x369 64 x238 159)) 159))
(assert (x543 x492 128))
(assert (x211 x490))
(assert (x211 x391))
(assert (x478 (- x225 x14)))
(assert (x211 x202))
(assert (x211 x370))
(assert (x211 x7))
(assert (x431 x87))
(assert (x211 x448))
(assert (x439 x225 x112 x112 x519))
(assert (= x30 (and (not x232) x388)))
(assert (= (x219 (x177 32 154)) 154))
(assert (x478 (- x519 x22)))
(assert (x290 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x545 2 x510)))
(assert (x211 x393))
(assert (x61 x361 2))
(assert (x478 x526))
(assert (= (x20 x420) (x20 (+ x420 x324))))
(assert (x211 x530))
(assert (x478 x225))
(assert (= (x219 (x369 64 x160 158)) x160))
(assert (x368 x519 (- x112 x519)))
(assert (x211 x503))
(assert (< (x369 64 x160 161) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x211 x539))
(assert (> (x369 64 x160 156) 10000))
(assert (x211 x109))
(assert (x211 x21))
(assert (x478 (- x225 x112)))
(assert (x439 x14 x519 x14 x22))
(assert (x570 x402))
(assert (x566 (x545 2 x433)))
(assert (x410 39473711962023174749424659199615060097653232135126263878786656434573155500032))
(assert (= x334 x147))
(assert (= (and x514 x6) x39))
(assert (x211 x315))
(assert (x360 x56))
(assert (x53 x14 x22 x519 x14))
(assert (= (and (not x19) x459) x403))
(assert (x53 x112 x225 x519 x112))
(assert (x522 x563))
(assert (= (ite (> 256 x161) (x547 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x545 2 x161)) 0) (x485 115792089237316195423570985008687907853269984665640564039457584007913129639935 x161)))
(assert (not (x410 (x369 64 x160 156))))
(assert (x211 x78))
(assert (x54 x453 x471))
(assert (= x37 (and x397 x489)))
(assert (x211 x361))
(assert (x543 x62 2))
(assert (=> (<= x424 10000) (= (x20 x424) 0)))
(assert (x211 x57))
(assert (x211 x196))
(assert (x211 x81))
(assert (x543 x56 128))
(assert (= x101 (=> (and (= x45 (+ 1 x71)) (= x250 (not (< x45 x446)))) (and x250 x396))))
(assert (x211 x294))
(assert (x368 x519 (- x112 x225)))
(assert (x211 x445))
(assert (x211 x330))
(assert (x15 x62))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x369 64 x238 156)))
(assert (x566 x330))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x177 32 3)))
(assert (= (x20 (+ x294 x384)) (x20 x384)))
(assert (x211 x307))
(assert (x15 x202))
(assert (x522 x202))
(assert (x211 x141))
(assert (x61 (+ x520 31) 32))
(assert (x478 (- x22 x519)))
(assert (x431 x200))
(assert (x570 x453))
(assert (x230 8 x202))
(assert (x211 x472))
(assert (x368 x112 (- x225 x112)))
(assert (> (x177 32 155) 10000))
(assert (x368 x14 x22))
(assert (x211 x291))
(assert (= (ite (< x136 256) (x547 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x545 2 x136)) 0) (x485 115792089237316195423570985008687907853269984665640564039457584007913129639935 x136)))
(assert (x368 x14 (- x519 x14)))
(assert (x211 x433))
(assert (x53 x112 x519 x225 x112))
(assert (and (= 27 (x58 9 3)) (= (x58 27 3) 81) (= (x58 3 3) 9) (= 81 (x58 9 9))))
(assert (x360 x492))
(assert (x211 x145))
(assert (x15 x362))
(assert (not (x410 (x369 64 x238 161))))
(assert (x211 x1))
(assert (x478 (- x519 x112)))
(assert (= (x369 64 x160 161) (x20 (x369 64 x160 161))))
(assert (= x550 (and x94 x123)))
(assert (= (x20 39553310892875263560936207548857176834471854732421237974622739861269930573824) 0))
(assert (= x86 (=> (and (or (and x502 (and (= 1 x400) (= x151 1))) (and (= x148 x151) (not x502))) (= 1 x398)) x38)))
(assert (not (x410 (x369 64 x160 159))))
(assert (= x96 (and x113 x106)))
(assert (x211 x117))
(assert (=> (<= x59 10000) (= 0 (x20 x59))))
(assert (x61 x330 2))
(assert (< 10000 (x369 64 x238 161)))
(assert (= x193 (=> (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x134) (>= 1461501637330902918203684832716283019655932542975 x424) (= x483 false) (= false x375) (= x3 0) (<= x208 1461501637330902918203684832716283019655932542975) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x337) (>= 1461501637330902918203684832716283019655932542975 x455) (>= x377 0) (<= 1 x405) x119 (= false x521) (= x377 x120) (not (= x424 x59)) (<= x377 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x463 1) (= (> (x449 x59) 0) x456) (= (< 0 (x449 x463)) x119) (= (> (x449 x424) 0) x153) (<= x567 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x299) (not (= x401 x59)) (<= 4 x568) (<= x130 1461501637330902918203684832716283019655932542975) (= x518 36) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x120 x198)) (>= x254 0) (>= 1461501637330902918203684832716283019655932542975 x401) (>= x455 0) (<= 1 x401) (= false x536) (= x159 false) (<= 0 x567) (<= x142 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x314 false) (= (+ x198 x120) x134) (= x405 (x449 x401)) (<= x276 1461501637330902918203684832716283019655932542975) (>= x513 0) (>= 1461501637330902918203684832716283019655932542975 x192) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x513) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x568) (<= 0 x337) (<= x248 255) (= x277 x427) (= x401 x18) (>= 127 x549) (<= 0 x205) (= x125 false) (not (= x424 x401)) (not (= x59 x463)) (= false x121) (>= x134 0) (>= 1461501637330902918203684832716283019655932542975 x277) (>= 1461501637330902918203684832716283019655932542975 x268) (<= x261 115792089237316195423570985008687907853269984665640564039457584007913129639935) x153 (= 0 x512) (= (x58 x14 x519) x377) (= false x548) (= x87 4) (not (= x401 x463)) (>= 1461501637330902918203684832716283019655932542975 x59) x352 (<= 0 x142) (>= x59 1) (<= x254 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= x205 4294967295) (>= 127 x549) (>= 1461501637330902918203684832716283019655932542975 x463) (<= x299 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x268) (<= 1 x424) (= 404098525 x451) (= x134 x108) (>= x276 0) (< (x58 x14 x519) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= x287 1461501637330902918203684832716283019655932542975) (not (= x424 x463)) (>= x130 0) (= (< 0 (x449 x401)) x352) (= 2167012380 x345) x456 (>= 1461501637330902918203684832716283019655932542975 x227) (= x133 false) (<= 0 x261) (<= 0 x277)) (and (or (and x123 (and (= (x369 64 x160 158) x540) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x167 x307)) (= (x541 x295) x22) (= x183 x448) (<= x114 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x122 0) (= x307 x122) (< (x58 x14 x22) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x183 x114) (= (+ x307 x167) x114) (>= x114 0) (= x167 (x443 x540)) (= x295 (x369 64 x160 156)) (<= x122 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x122 (x58 x14 x22)))) (and (and (= x316 (x444 x199)) (= (x369 64 x160 159) x199) (= x448 x316)) (not x123))) (and (>= 127 x336) (= (= 0 x174) x123) (= x427 x160) (>= 2 x174) (= x160 x187) (<= 1 x303) (= (x449 x401) x303) (<= x336 127) (= false x263) (= false x13) (= x491 (x369 64 x160 161)) (= x218 1889567281) (= (x538 x491) x174)))) x380)))
(assert (x53 x112 x225 x519 x14))
(assert (x54 x504 x244))
(assert (x431 x40))
(assert (x422 x339))
(assert (= x297 (and (not x6) x514)))
(assert (x211 x413))
(assert (= x344 (or x44 x9)))
(assert (x566 2))
(assert (x566 (x545 2 x196)))
(assert (x522 x50))
(assert (x211 x390))
(assert (x211 x138))
(assert (x211 x84))
(assert (x230 8 x76))
(assert (x410 382502381645197248123620639812464696550576095234))
(assert true)
(assert (x211 x11))
(assert (x53 x14 x22 x519 x112))
(assert (= (x564 (x369 64 x160 156)) 64))
(assert (= 0 (x20 4294967295)))
(assert (< 10000 (x369 64 x238 156)))
(assert (x53 x14 x519 x112 x225))
(assert (x211 x339))
(assert (x478 x298))
(assert (x211 x342))
(assert (< 10000 (x369 64 x160 158)))
(assert (x211 x49))
(assert (x566 x362))
(assert (x478 x519))
(assert (< (x369 64 x160 158) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x368 x14 (- x22 x112)))
(assert (not (x410 (x369 64 x238 158))))
(assert (x368 x112 (- x225 x22)))
(assert (= (and x524 x102) x487))
(assert (= (or x37 x140) x171))
(assert (x211 x453))
(assert (x211 x257))
(assert (x211 x552))
(assert (= 158 (x505 (x369 64 x238 158))))
(assert (not (x410 (x177 32 3))))
(assert (x211 x499))
(assert (x410 39553310892875263560936207548857176834471854732421237974622739861269930573824))
(assert (= (or x348 x569) x106))
(assert (x368 x112 x225))
(assert (= x224 (and x223 x494)))
(assert (x570 x504))
(assert (x53 x225 x112 x519 x14))
(assert (x53 x112 x225 x112 x519))
(assert (x53 x225 x112 x22 x14))
(assert (= (x564 (x177 32 3)) 32))
(assert (x368 x519 (- x14 x519)))
(assert (x439 x14 x22 x112 x519))
(assert (x566 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (x15 2))
(assert (x566 (+ 31 x520)))
(assert (x211 x510))
(assert (x211 x351))
(assert (x211 x14))
(assert (= (x369 64 x160 159) (x20 (x369 64 x160 159))))
(assert (x211 x243))
(assert (= x38 (=> (and (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x40) (>= x40 32) (= 256 x285) (= 128 x274) (= (> x186 0) x143) (= 192 x495)) (or (and (not x143) (= x145 x186)) (and (and (= 1 x145) (>= 4294967295 x40) (<= 32 x40)) x143))) x172)))
(assert (x566 (x545 2 x353)))
(assert (= (ite (> 256 x319) (x547 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x545 2 x319)) 0) (x485 115792089237316195423570985008687907853269984665640564039457584007913129639935 x319)))
(assert (x522 x269))
(assert (x211 x457))
(assert (x360 x479))
(assert (= x309 (and (not x42) x556)))
(assert (< (x177 32 4) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= x140 (and x397 (not x489))))
(assert (x211 x519))
(assert (x211 x75))
(assert (= (ite (> 256 x472) (x547 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x545 2 x472)) 0) (x485 115792089237316195423570985008687907853269984665640564039457584007913129639935 x472)))
(assert (x211 x8))
(assert (= 64 (x564 (x369 64 x238 156))))
(assert (x211 x103))
(assert (x439 x112 x519 x14 x22))
(assert (x570 x523))
(assert (x211 x471))
(assert (x211 x272))
(assert (x53 x22 x14 x14 x519))
(assert (= x341 (and (not x105) x195)))
(assert (x211 x148))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x177 32 155)))
(assert (x211 x76))
(assert (x211 x136))
(assert (x543 x362 2))
(assert (= (x505 (x369 64 x238 161)) 161))
(assert (< 10000 (x369 64 x238 158)))
(assert (x439 x225 x112 x14 x519))
(assert (< (x369 64 x160 156) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x25 x361))
(assert (x478 (- x14 x22)))
(assert (x522 x479))
(assert (x522 x330))
(assert (x53 x112 x519 x112 x225))
(assert (x61 (+ x10 31) 32))
(assert (x211 x112))
(assert (> (x177 32 3) 10000))
(assert (x53 x22 x14 x112 x519))
(assert (x439 x519 x14 x14 x22))
(assert (= x524 (or x30 x169)))
(assert (x522 x361))
(assert (= (x20 x350) (x20 (+ x399 x350))))
(assert (x53 x22 x14 x112 x225))
(assert (x211 x182))
(assert (=> (>= 10000 x238) (= 0 (x20 x238))))
(assert (x478 (- x22 x14)))
(assert (= (x20 18446744073709551615) 0))
(assert (= x569 (and x429 x502)))
(assert (x478 x112))
(assert (x211 x200))
(assert (x439 x112 x519 x112 x225))
(assert (x211 x28))
(assert (x211 x183))
(assert (x15 x492))
(assert (x211 x226))
(assert (x522 x84))
(assert (= x532 (=> (and (= (= 1 (ite (< 31 x339) 1 0)) x232) (or (and (not x232) (and (= x320 (x374 (+ x402 x103))) (= (x256 x141 x28) x402) (= (* 8 x339) x319) (= (ite (>= 1 x402) x320 (x65 x402 x103)) x291) (= (x326 320) x141) (= (* 2 x339) x103) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x49) x28) (>= x49 1) (= (x485 115792089237316195423570985008687907853269984665640564039457584007913129639935 x319) x49))) (and (and (= (x256 x381 x138) x33) (= (x256 31 x339) x165) (= x472 (* 8 x165)) (= (x326 320) x381) (= x535 (+ 1 x395)) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x485 115792089237316195423570985008687907853269984665640564039457584007913129639935 x472)) x138) (= (x177 32 4) x558) (= (* 2 x339) x395)) x232))) x435)))
(assert (x211 x32))
(assert (x211 x36))
(assert (x431 x518))
(assert (x543 x361 2))
(assert (x53 x14 x519 x22 x14))
(assert (x522 x482))
(assert (x478 x213))
(assert (= (and x149 x221) x162))
(assert (x368 x519 (- x14 x22)))
(assert (x478 (- x14 x519)))
(assert (x211 x190))
(assert (= 64 (x564 (x369 64 x238 158))))
(assert (= (ite (> 256 x433) (x547 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x545 2 x433)) 0) (x485 115792089237316195423570985008687907853269984665640564039457584007913129639935 x433)))
(assert (= x529 (or x4 x95)))
(assert (x211 x161))
(assert (x211 x35))
(assert (= (and x553 x502) x185))
(assert (= x459 (and x344 x474)))
(assert (x566 (x545 2 x510)))
(assert (x410 404098525))
(assert (= 0 (x20 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x211 x253))
(assert (x368 x519 (- x14 x112)))
(assert (x368 x112 (- x519 x112)))
(assert (x368 x22 (- x14 x112)))
(assert (x53 x519 x14 x112 x225))
(assert (x522 x55))
(assert (x422 x202))
(assert (= x195 (or x5 x68)))
(assert (= (ite (> 256 x510) (x547 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x545 2 x510)) 0) (x485 115792089237316195423570985008687907853269984665640564039457584007913129639935 x510)))
(assert (= x111 (=> (and (= x339 (x220 288)) (= (x256 1 x62) x109) (= (> x367 31) x6) (or (= 1 x83) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x83)) (= (x547 x62 2) x56) (= x83 (x231 (- x109 (mod (ite (< x367 32) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (>= 18446744073709551615 x339) (= (ite (< 0 x109) x56 (x256 127 x56)) x367)) (and (=> (not x6) x532) (=> (and x6 (and (= (x177 32 4) x420) (= (> x488 x420) x64) (= x324 (x547 (+ x367 31) 32)) (= x488 (+ x324 x420)))) (and (=> (not x64) x139) (=> x64 x288)))))))
(assert (= (and x409 x143) x9))
(assert (x566 x62))
(assert (= 158 (x505 (x369 64 x160 158))))
(assert (x230 8 x165))
(assert (x211 x60))
(assert (= x509 (and x69 x487)))
(assert (x566 (x545 2 x472)))
(assert (x211 x229))
(assert (= x429 (or x550 x110)))
(assert (x441 x84 x23))
(assert (= (x485 115792089237316195423570985008687907853269984665640564039457584007913129639935 x196) (ite (> 256 x196) (x547 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x545 2 x196)) 0)))
(assert (x53 x519 x112 x112 x225))
(assert (= (x20 (x177 32 154)) (x177 32 154)))
(assert (= 0 (x20 57005)))
(assert (x368 x22 (- x14 x519)))
(assert (x368 x14 (- x22 x14)))
(assert (not (x410 (x369 64 x238 159))))
(assert (= (x564 (x369 64 x160 159)) 64))
(assert (x439 x22 x14 x112 x519))
(assert (= (x20 1889567281) 0))
(assert (x410 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (= x279 (=> (and (= (+ 1 x384) x551) (= (not (> x194 x551)) x389)) (and x168 x389))))
(assert (x211 x479))
(assert (x211 x382))
(assert (= (and (not x102) x524) x387))
(assert (x422 x213))
(assert (= 0 (x20 382502381645197248123620639812464696550576095234)))
(assert (= (x20 (+ x71 1)) (x20 x71)))
(assert (x53 x519 x14 x14 x22))
(assert (x211 x33))
(assert (x543 x330 2))
(assert (x230 2 x50))
(assert (= (and x39 x64) x124))
(assert (x522 x12))
(assert (= (and x344 (not x474)) x5))
(assert (x211 x258))
(assert (x53 x14 x22 x112 x225))
(assert (x211 x287))
(assert (=> (>= 10000 x160) (= (x20 x160) 0)))
(assert (x211 x246))
(assert (= x4 (and x224 x31)))
(assert (x368 x112 (- x225 x519)))
(assert (x368 x14 x519))
(assert (x439 x14 x519 x112 x519))
(assert (= x475 (or x124 x67)))
(assert (x566 (+ x367 31)))
(assert (x290 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x545 2 x319)))
(assert (x522 1))
(assert (x211 x555))
(assert (x211 x55))
(assert (x211 x10))
(assert (x543 x559 128))
(assert (x15 x559))
(assert (< (x177 32 154) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x431 x243))
(assert (= x160 (x219 (x369 64 x160 161))))
(assert (x211 x336))
(assert (= 0 (x20 1461501637330902918203684832716283019655932542975)))
(assert (x53 x22 x14 x225 x112))
(assert (x53 x519 x112 x14 x22))
(assert (x211 x74))
(assert (x522 31))
(assert (= (and x39 (not x64)) x67))
(assert (x290 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x545 2 x196)))
(assert (x441 x338 x442))
(assert (x478 (- x22 x112)))
(assert (x211 x197))
(assert (= (or x171 x96) x553))
(assert (x211 x447))
(assert (= (and x42 x556) x432))
(assert (= (and x224 (not x31)) x95))
(assert (x211 x192))
(assert (x368 x14 (- x22 x225)))
(assert (= (x20 (+ 1 x350)) (x20 x350)))
(assert (x15 x56))
(assert (x211 x208))
(assert (x211 x454))
(assert (= 3 (x219 (x177 32 3))))
(assert (x211 x398))
(assert (x211 x507))
(assert (= x238 (x219 (x369 64 x238 156))))
(assert (= (x369 64 x160 158) (x20 (x369 64 x160 158))))
(assert (x211 x353))
(assert (x290 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x545 2 x136)))
(assert (x570 x103))
(assert (x478 x339))
(assert (x478 (- x225 x519)))
(assert (= x160 (x219 (x369 64 x160 156))))
(assert (x211 x324))
(assert (x211 x248))
(assert (x211 x198))
(assert (x211 x465))
(assert (x211 x544))
(assert (= (or x158 x185) x409))
(assert (x570 x471))
(assert (x25 x62))
(assert (x211 x204))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x369 64 x238 161)))
(assert (= 0 (x20 2167012380)))
(assert (x290 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x545 2 x161)))
(assert (x15 x479))
(assert (= x85 (and (not x416) x466)))
(assert (x439 x519 x112 x14 x519))
(assert (x290 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x545 2 x472)))
(assert (x522 x138))
(assert (x211 x244))
(assert (x211 x306))
(assert (x211 x150))
(assert (x230 2 x213))
(assert (x211 x549))
(assert (x53 x22 x14 x519 x112))
(assert (= (x219 (x369 64 x160 159)) x160))
(assert (x290 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x545 2 x433)))
(assert (x478 x14))
(assert (x53 x519 x14 x225 x112))
(assert (= true x94))
(assert (x211 x523))
(assert (= x110 (and (not x123) x94)))
(assert (= x556 (or x128 x529)))
(assert (x566 32))
(assert (x211 x303))
(assert (x211 x222))
(assert (x478 x50))
(assert (x211 x225))
(assert (x543 x202 32))
(assert (x441 x381 x138))
(assert (x439 x112 x225 x112 x519))
(assert (=> (<= x463 10000) (= 0 (x20 x463))))
(assert (x211 x535))
(assert (x368 x112 (- x519 x22)))
(assert (= 64 (x564 (x369 64 x160 158))))
(assert (x439 x22 x14 x14 x519))
(assert (x211 x126))
(assert (= (and x195 x105) x233))
(assert (x53 x14 x22 x14 x519))
(assert (x522 x381))
(assert (= (x20 (x369 64 x160 156)) (x369 64 x160 156)))
(assert (x211 x568))
(assert (not (x410 (x177 32 4))))
(assert (= 0 (x20 57896044618658097711785492504343953926634992332820282019728792003956564819967)))
(assert (x53 x14 x22 x112 x519))
(assert (= (x219 (x369 64 x238 158)) x238))
(assert (x54 x402 x103))
(assert (x53 x519 x14 x112 x519))
(assert (and (= 140737488355328 (x545 2 47)) (= (x545 2 54) 18014398509481984) (= (x545 2 118) 332306998946228968225951765070086144) (= (x545 2 48) 281474976710656) (= (x545 2 83) 9671406556917033397649408) (= (x545 2 97) 158456325028528675187087900672) (= 32 (x545 2 5)) (= (x545 2 84) 19342813113834066795298816) (= (x545 2 113) 10384593717069655257060992658440192) (= (x545 2 15) 32768) (= 324518553658426726783156020576256 (x545 2 108)) (= 4294967296 (x545 2 32)) (= (x545 2 49) 562949953421312) (= 713623846352979940529142984724747568191373312 (x545 2 149)) (= (x545 2 245) 56539106072908298546665520023773392506479484700019806659891398441363832832) (= 18446744073709551616 (x545 2 64)) (= 1427247692705959881058285969449495136382746624 (x545 2 150)) (= 191561942608236107294793378393788647952342390272950272 (x545 2 177)) (= 178405961588244985132285746181186892047843328 (x545 2 147)) (= 383123885216472214589586756787577295904684780545900544 (x545 2 178)) (= (x545 2 1) 2) (= 1267650600228229401496703205376 (x545 2 100)) (= (x545 2 21) 2097152) (= (x545 2 224) 26959946667150639794667015087019630673637144422540572481103610249216) (= 16384 (x545 2 14)) (= (x545 2 109) 649037107316853453566312041152512) (= 17592186044416 (x545 2 44)) (= 9444732965739290427392 (x545 2 73)) (= 20282409603651670423947251286016 (x545 2 104)) (= (x545 2 33) 8589934592) (= 6129982163463555433433388108601236734474956488734408704 (x545 2 182)) (= 11417981541647679048466287755595961091061972992 (x545 2 153)) (= (x545 2 165) 46768052394588893382517914646921056628989841375232) (= (x545 2 13) 8192) (= (x545 2 251) 3618502788666131106986593281521497120414687020801267626233049500247285301248) (= 730750818665451459101842416358141509827966271488 (x545 2 159)) (= 431359146674410236714672241392314090778194310760649159697657763987456 (x545 2 228)) (= 1361129467683753853853498429727072845824 (x545 2 130)) (= (x545 2 230) 1725436586697640946858688965569256363112777243042596638790631055949824) (= (x545 2 30) 1073741824) (= 1208925819614629174706176 (x545 2 80)) (= 17179869184 (x545 2 34)) (= 215679573337205118357336120696157045389097155380324579848828881993728 (x545 2 227)) (= (x545 2 220) 1684996666696914987166688442938726917102321526408785780068975640576) (= 21267647932558653966460912964485513216 (x545 2 124)) (= 131072 (x545 2 17)) (= (x545 2 38) 274877906944) (= (x545 2 128) 340282366920938463463374607431768211456) (= 803469022129495137770981046170581301261101496891396417650688 (x545 2 199)) (= 1180591620717411303424 (x545 2 70)) (= 2993155353253689176481146537402947624255349848014848 (x545 2 171)) (= (x545 2 186) 98079714615416886934934209737619787751599303819750539264) (= (x545 2 206) 102844034832575377634685573909834406561420991602098741459288064) (= (x545 2 203) 12855504354071922204335696738729300820177623950262342682411008) (= (x545 2 157) 182687704666362864775460604089535377456991567872) (= 862718293348820473429344482784628181556388621521298319395315527974912 (x545 2 229)) (= 784637716923335095479473677900958302012794430558004314112 (x545 2 189)) (= 4611686018427387904 (x545 2 62)) (= (x545 2 93) 9903520314283042199192993792) (= (x545 2 218) 421249166674228746791672110734681729275580381602196445017243910144) (= 55213970774324510299478046898216203619608871777363092441300193790394368 (x545 2 235)) (= 22300745198530623141535718272648361505980416 (x545 2 144)) (= 822752278660603021077484591278675252491367932816789931674304512 (x545 2 209)) (= (x545 2 75) 37778931862957161709568) (= (x545 2 145) 44601490397061246283071436545296723011960832) (= 162259276829213363391578010288128 (x545 2 107)) (= 8796093022208 (x545 2 43)) (= (x545 2 167) 187072209578355573530071658587684226515959365500928) (= 316912650057057350374175801344 (x545 2 98)) (= 7237005577332262213973186563042994240829374041602535252466099000494570602496 (x545 2 252)) (= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x545 2 256)) (= (x545 2 193) 12554203470773361527671578846415332832204710888928069025792) (= (x545 2 253) 14474011154664524427946373126085988481658748083205070504932198000989141204992) (= 205688069665150755269371147819668813122841983204197482918576128 (x545 2 207)) (= 107839786668602559178668060348078522694548577690162289924414440996864 (x545 2 226)) (= (x545 2 42) 4398046511104) (= 100433627766186892221372630771322662657637687111424552206336 (x545 2 196)) (= 18889465931478580854784 (x545 2 74)) (= 113078212145816597093331040047546785012958969400039613319782796882727665664 (x545 2 246)) (= 38685626227668133590597632 (x545 2 85)) (= (x545 2 254) 28948022309329048855892746252171976963317496166410141009864396001978282409984) (= (x545 2 202) 6427752177035961102167848369364650410088811975131171341205504) (= 68719476736 (x545 2 36)) (= 348449143727040986586495598010130648530944 (x545 2 138)) (= 12259964326927110866866776217202473468949912977468817408 (x545 2 183)) (= 441711766194596082395824375185729628956870974218904739530401550323154944 (x545 2 238)) (= (x545 2 0) 1) (= (x545 2 180) 1532495540865888858358347027150309183618739122183602176) (= 6739986666787659948666753771754907668409286105635143120275902562304 (x545 2 222)) (= (x545 2 71) 2361183241434822606848) (= (x545 2 111) 2596148429267413814265248164610048) (= 21778071482940061661655974875633165533184 (x545 2 134)) (= (x545 2 140) 1393796574908163946345982392040522594123776) (= (x545 2 25) 33554432) (= (x545 2 23) 8388608) (= (x545 2 215) 52656145834278593348959013841835216159447547700274555627155488768) (= (x545 2 237) 220855883097298041197912187592864814478435487109452369765200775161577472) (= 89202980794122492566142873090593446023921664 (x545 2 146)) (= (x545 2 250) 1809251394333065553493296640760748560207343510400633813116524750123642650624) (= 1766847064778384329583297500742918515827483896875618958121606201292619776 (x545 2 240)) (= 5444517870735015415413993718908291383296 (x545 2 132)) (= 9007199254740992 (x545 2 53)) (= 51422017416287688817342786954917203280710495801049370729644032 (x545 2 205)) (= 47890485652059026823698344598447161988085597568237568 (x545 2 175)) (= 696898287454081973172991196020261297061888 (x545 2 139)) (= (x545 2 188) 392318858461667547739736838950479151006397215279002157056) (= (x545 2 115) 41538374868278621028243970633760768) (= (x545 2 3) 8) (= (x545 2 185) 49039857307708443467467104868809893875799651909875269632) (= 70368744177664 (x545 2 46)) (= (x545 2 173) 11972621413014756705924586149611790497021399392059392) (= 1099511627776 (x545 2 40)) (= 87112285931760246646623899502532662132736 (x545 2 136)) (= 4096 (x545 2 12)) (= 452312848583266388373324160190187140051835877600158453279131187530910662656 (x545 2 248)) (= 34359738368 (x545 2 35)) (= 6901746346790563787434755862277025452451108972170386555162524223799296 (x545 2 232)) (= 904625697166532776746648320380374280103671755200316906558262375061821325312 (x545 2 249)) (= (x545 2 231) 3450873173395281893717377931138512726225554486085193277581262111899648) (= (x545 2 174) 23945242826029513411849172299223580994042798784118784) (= (x545 2 243) 14134776518227074636666380005943348126619871175004951664972849610340958208) (= (x545 2 79) 604462909807314587353088) (= (x545 2 69) 590295810358705651712) (= 50216813883093446110686315385661331328818843555712276103168 (x545 2 195)) (= (x545 2 39) 549755813888) (= 77371252455336267181195264 (x545 2 86)) (= 19807040628566084398385987584 (x545 2 94)) (= (x545 2 234) 27606985387162255149739023449108101809804435888681546220650096895197184) (= 10889035741470030830827987437816582766592 (x545 2 133)) (= (x545 2 123) 10633823966279326983230456482242756608) (= (x545 2 45) 35184372088832) (= 39614081257132168796771975168 (x545 2 95)) (= 411376139330301510538742295639337626245683966408394965837152256 (x545 2 208)) (= 85070591730234615865843651857942052864 (x545 2 126)) (= 5316911983139663491615228241121378304 (x545 2 122)) (= (x545 2 137) 174224571863520493293247799005065324265472) (= (x545 2 90) 1237940039285380274899124224) (= 302231454903657293676544 (x545 2 78)) (= 5708990770823839524233143877797980545530986496 (x545 2 152)) (= (x545 2 247) 226156424291633194186662080095093570025917938800079226639565593765455331328) (= (x545 2 154) 22835963083295358096932575511191922182123945984) (= 75557863725914323419136 (x545 2 76)) (= 512 (x545 2 9)) (= 1125899906842624 (x545 2 50)) (= (x545 2 233) 13803492693581127574869511724554050904902217944340773110325048447598592) (= 1461501637330902918203684832716283019655932542976 (x545 2 160)) (= (x545 2 59) 576460752303423488) (= (x545 2 96) 79228162514264337593543950336) (= (x545 2 24) 16777216) (= (x545 2 89) 618970019642690137449562112) (= (x545 2 239) 883423532389192164791648750371459257913741948437809479060803100646309888) (= 9223372036854775808 (x545 2 63)) (= 2048 (x545 2 11)) (= (x545 2 198) 401734511064747568885490523085290650630550748445698208825344) (= (x545 2 22) 4194304) (= (x545 2 57) 144115188075855872) (= (x545 2 20) 1048576) (= (x545 2 101) 2535301200456458802993406410752) (= (x545 2 60) 1152921504606846976) (= 5575186299632655785383929568162090376495104 (x545 2 142)) (= (x545 2 61) 2305843009213693952) (= (x545 2 191) 3138550867693340381917894711603833208051177722232017256448) (= (x545 2 255) 57896044618658097711785492504343953926634992332820282019728792003956564819968) (= (x545 2 92) 4951760157141521099596496896) (= (x545 2 161) 2923003274661805836407369665432566039311865085952) (= 36893488147419103232 (x545 2 65)) (= (x545 2 125) 42535295865117307932921825928971026432) (= (x545 2 26) 67108864) (= (x545 2 91) 2475880078570760549798248448) (= (x545 2 176) 95780971304118053647396689196894323976171195136475136) (= 73786976294838206464 (x545 2 66)) (= 2658455991569831745807614120560689152 (x545 2 121)) (= (x545 2 8) 256) (= (x545 2 244) 28269553036454149273332760011886696253239742350009903329945699220681916416) (= 680564733841876926926749214863536422912 (x545 2 129)) (= 110427941548649020598956093796432407239217743554726184882600387580788736 (x545 2 236)) (= (x545 2 162) 5846006549323611672814739330865132078623730171904) (= 5192296858534827628530496329220096 (x545 2 112)) (= 93536104789177786765035829293842113257979682750464 (x545 2 166)) (= (x545 2 119) 664613997892457936451903530140172288) (= 524288 (x545 2 19)) (= 4722366482869645213696 (x545 2 72)) (= 2147483648 (x545 2 31)) (= 16 (x545 2 4)) (= (x545 2 135) 43556142965880123323311949751266331066368) (= 766247770432944429179173513575154591809369561091801088 (x545 2 179)) (= (x545 2 41) 2199023255552) (= (x545 2 102) 5070602400912917605986812821504) (= 53919893334301279589334030174039261347274288845081144962207220498432 (x545 2 225)) (= (x545 2 103) 10141204801825835211973625643008) (= (x545 2 116) 83076749736557242056487941267521536) (= (x545 2 127) 170141183460469231731687303715884105728) (= 288230376151711744 (x545 2 58)) (= (x545 2 169) 748288838313422294120286634350736906063837462003712) (= 13479973333575319897333507543509815336818572211270286240551805124608 (x545 2 223)) (= (x545 2 131) 2722258935367507707706996859454145691648) (= (x545 2 170) 1496577676626844588240573268701473812127674924007424) (= (x545 2 27) 134217728) (= 154742504910672534362390528 (x545 2 87)) (= (x545 2 190) 1569275433846670190958947355801916604025588861116008628224) (= 309485009821345068724781056 (x545 2 88)) (= (x545 2 210) 1645504557321206042154969182557350504982735865633579863348609024) (= (x545 2 187) 196159429230833773869868419475239575503198607639501078528) (= 374144419156711147060143317175368453031918731001856 (x545 2 168)) (= 26328072917139296674479506920917608079723773850137277813577744384 (x545 2 214)) (= 842498333348457493583344221469363458551160763204392890034487820288 (x545 2 219)) (= 11150372599265311570767859136324180752990208 (x545 2 143)) (= 4835703278458516698824704 (x545 2 82)) (= 1298074214633706907132624082305024 (x545 2 110)) (= (x545 2 37) 137438953472) (= (x545 2 211) 3291009114642412084309938365114701009965471731267159726697218048) (= (x545 2 28) 268435456) (= (x545 2 16) 65536) (= (x545 2 184) 24519928653854221733733552434404946937899825954937634816) (= 1329227995784915872903807060280344576 (x545 2 120)) (= (x545 2 158) 365375409332725729550921208179070754913983135744) (= 6277101735386680763835789423207666416102355444464034512896 (x545 2 192)) (= 2854495385411919762116571938898990272765493248 (x545 2 151)) (= 128 (x545 2 7)) (= (x545 2 241) 3533694129556768659166595001485837031654967793751237916243212402585239552) (= 151115727451828646838272 (x545 2 77)) (= 91343852333181432387730302044767688728495783936 (x545 2 156)) (= (x545 2 55) 36028797018963968) (= 1024 (x545 2 10)) (= 5986310706507378352962293074805895248510699696029696 (x545 2 172)) (= 356811923176489970264571492362373784095686656 (x545 2 148)) (= (x545 2 29) 536870912) (= (x545 2 200) 1606938044258990275541962092341162602522202993782792835301376) (= (x545 2 221) 3369993333393829974333376885877453834204643052817571560137951281152) (= 72057594037927936 (x545 2 56)) (= 6582018229284824168619876730229402019930943462534319453394436096 (x545 2 212)) (= 2251799813685248 (x545 2 51)) (= 7067388259113537318333190002971674063309935587502475832486424805170479104 (x545 2 242)) (= 262144 (x545 2 18)) (= (x545 2 164) 23384026197294446691258957323460528314494920687616) (= (x545 2 52) 4503599627370496) (= (x545 2 99) 633825300114114700748351602688) (= (x545 2 217) 210624583337114373395836055367340864637790190801098222508621955072) (= (x545 2 141) 2787593149816327892691964784081045188247552) (= (x545 2 216) 105312291668557186697918027683670432318895095400549111254310977536) (= 3064991081731777716716694054300618367237478244367204352 (x545 2 181)) (= 45671926166590716193865151022383844364247891968 (x545 2 155)) (= 13164036458569648337239753460458804039861886925068638906788872192 (x545 2 213)) (= 20769187434139310514121985316880384 (x545 2 114)) (= (x545 2 201) 3213876088517980551083924184682325205044405987565585670602752) (= (x545 2 6) 64) (= (x545 2 2) 4) (= (x545 2 204) 25711008708143844408671393477458601640355247900524685364822016) (= (x545 2 106) 81129638414606681695789005144064) (= 166153499473114484112975882535043072 (x545 2 117)) (= (x545 2 81) 2417851639229258349412352) (= 147573952589676412928 (x545 2 67)) (= (x545 2 163) 11692013098647223345629478661730264157247460343808) (= (x545 2 197) 200867255532373784442745261542645325315275374222849104412672) (= 295147905179352825856 (x545 2 68)) (= (x545 2 105) 40564819207303340847894502572032) (= (x545 2 194) 25108406941546723055343157692830665664409421777856138051584)))
(assert (x53 x112 x225 x14 x22))
(assert (x211 x518))
(assert (= x128 (and (not x223) x494)))
(assert (x53 x519 x112 x519 x14))
(assert (= (x20 (x369 64 x238 156)) (x369 64 x238 156)))
(assert (x439 x14 x22 x14 x519))
(assert (x422 x50))
(assert (= (=> (and (and (= (x449 382502381645197248123620639812464696550576095234) x190) (= x454 352) (= (= (x436 382502381645197248123620639812464696550576095234) x246) x421) (= x311 (>= (x436 x401) x182)) (<= 1 x204) (= x182 (x217 x401)) x311 (>= x190 1) x421 (= (x217 382502381645197248123620639812464696550576095234) x246) (<= x200 4294967295)) (or (not x502) (and (= x36 0) x502))) x515) x412))
(assert (= 32 (x564 (x177 32 154))))
(assert (x211 x395))
(assert (x439 x225 x112 x14 x22))
(assert (= (x219 (x177 32 155)) 155))
(assert (x211 x83))
(assert (x522 x23))
(assert (x478 x22))
(assert (x478 (- x112 x14)))
(assert (x211 x298))
(assert (x211 x281))
(assert (x211 x285))
(assert (= x238 (x219 (x369 64 x238 161))))
(assert (x211 x451))
(assert (x211 x104))
(assert (x439 x519 x14 x112 x519))
(assert (= (or x312 x162) x508))
(assert (x211 x482))
(assert (x230 8 x50))
(assert (x211 x87))
(assert (x410 2167012380))
(assert (x211 x402))
(assert (x478 x165))
(assert (x441 x226 x55))
(assert (x441 x500 x269))
(assert (x439 x14 x22 x112 x225))
(assert (x230 2 x339))
(assert (= x312 (and x149 (not x221))))
(assert (x478 (- x112 x22)))
(assert (= (=> (= x113 (> x104 0)) (and (=> (and (not x113) (and (or (and (= x419 1) (not x489)) (and (= x281 1) x489)) (and (= x489 (= x89 0)) (= x419 (ite x489 1 0)) (= (x449 x401) x35) (= (ite (> x35 0) 1 0) x89)))) x301) (=> (and (= 1 x104) x113) x86))) x546))
(assert (x230 2 x202))
(assert (= (=> (and (= (x98 256) x112) (= x492 (x547 x361 2)) (or (= 1 x370) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x370)) (= (x231 (- x74 (mod (ite (> 32 x520) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x370) (= 0 x503) (= (x256 1 x361) x74) (= 0 x14) (= x202 (x333 128)) (= (ite (> x74 0) x492 (x256 127 x492)) x520) (= (> x520 31) x102) (= 0 x132) (<= x202 18446744073709551615)) (and (=> (and x102 (and (= (x547 (+ 31 x520) 32) x302) (= x71 (x177 32 154)) (= (> x446 x71) x69) (= x446 (+ x302 x71)))) (and (=> x69 x101) (=> (not x69) x396))) (=> (not x102) x216))) x435))
(assert (x211 x500))
(assert (x478 8))
(assert (= (or x475 x297) x388))
(assert (x211 x56))
(assert (x368 x14 (- x519 x112)))
(assert (x211 x419))
(assert (x431 x289))
(assert (= (x20 (+ 1 x420)) (x20 x420)))
(assert (x478 (- x225 x22)))
(assert (x478 (- x112 x519)))
(assert (x15 x50))
(assert (= x86 x301))
(assert (= x127 (=> (and (= (+ 1 x350) x310) (= x264 (not (< x310 x373)))) (and x264 x334))))
(assert (x211 x46))
(assert (= (x20 22163329580580053030292883849319169862539958002407764210677428189014622470144) 0))
(assert (x211 x163))
(assert (x368 x112 (- x519 x225)))
(assert (x211 x362))
(assert (x410 22163329580580053030292883849319169862539958002407764210677428189014622470144))
(assert (= 0 (x20 404098525)))
(assert (x211 x452))
(assert (=> (>= 10000 x401) (= 0 (x20 x401))))
(assert (= (=> (and (= x467 (x231 (- x253 (mod (ite (> 32 x252) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x333 128) x50) (<= x151 255) (<= x50 18446744073709551615) (<= 1 x145) (= x212 288) (= x252 (ite (< 0 x253) x559 (x256 127 x559))) (or (= 1 x467) (= x467 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (>= x151 1) (= x474 (> x252 31)) (= (x256 1 x330) x253) (= (x98 256) x273) (= x559 (x547 x330 2))) (and (=> (and x474 (and (= x384 (x177 32 3)) (= (x547 (+ x252 31) 32) x294) (= x194 (+ x294 x384)) (= (< x384 x194) x19))) (and (=> x19 x279) (=> (not x19) x168))) (=> (not x474) x249))) x172))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x369 64 x160 159)))
(assert (x522 x56))
(assert (x410 34602258808455191227493136189427688107261027562213901346293687426555358216192))
(assert (x478 (- x519 x14)))
(assert (not (x410 (x369 64 x160 158))))
(assert (x543 x50 32))
(assert (x211 x23))
(assert (x441 x141 x28))
(assert (x53 x14 x519 x519 x112))
(assert (x211 x186))
(assert (x570 x342))
(assert (x566 x361))
(assert (x439 x519 x14 x112 x225))
(assert (x211 x289))
(assert (not (x410 (x369 64 x238 156))))
(assert (x211 x278))
(assert (x211 x50))
(assert (= (or x387 x461) x466))
(assert (x522 x257))
(assert (= (x505 (x369 64 x160 161)) 161))
(assert (= (x177 32 155) (x20 (x177 32 155))))
(assert (x368 x112 (- x225 x14)))
(assert (x522 x28))
(assert (> (x177 32 4) 10000))
(assert (x211 x120))
(assert (x211 x492))
(assert (x211 x274))
(assert (x368 x519 (- x14 x225)))
(assert (x211 x89))
(assert (x61 x362 2))
(assert (not x193))
(assert (= (x20 39473711962023174749424659199615060097653232135126263878786656434573155500032) 0))
(assert (x61 x62 2))
(assert (x211 x59))
(assert (x53 x112 x519 x14 x22))
(assert (x15 128))
(assert (x543 x339 32))
(assert (x522 x339))
(assert (= (x20 72464927124685711895252664195178772226123872012682517813167109100718830649344) 0))
(assert (= (and x553 (not x502)) x158))
(assert (x439 x112 x225 x14 x519))
(assert (x522 x559))
(assert (= (=> (and (or (and (and (= x353 (* 8 x202)) (= x2 (ite (>= 1 x453) x46 (x65 x453 x471))) (= (x374 (+ x453 x471)) x46) (<= 1 x552) (= x500 (x91 160)) (= x471 (* x202 2)) (= x269 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x552)) (= (x256 x500 x269) x453) (= (x485 115792089237316195423570985008687907853269984665640564039457584007913129639935 x353) x552)) (not x416)) (and x416 (and (= x76 (x256 31 x202)) (= x161 (* x76 8)) (= x313 (x256 x84 x23)) (= x418 (* x202 2)) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x485 115792089237316195423570985008687907853269984665640564039457584007913129639935 x161)) x23) (= (x91 160) x84) (= x26 (x177 32 154)) (= (+ 1 x418) x544)))) (= x416 (= 1 (ite (< 31 x202) 1 0)))) x323) x216))
(assert (x211 x313))
(assert (= x146 (and (not x69) x487)))
(assert (x522 x141))
(assert (= (and x502 x317) x144))
(assert (= 64 (x564 (x369 64 x238 159))))
(assert (= (x485 115792089237316195423570985008687907853269984665640564039457584007913129639935 x353) (ite (> 256 x353) (x547 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x545 2 x353)) 0)))
(assert (x543 x213 32))
(assert (x441 x482 x563))
(assert (x522 x213))
(assert (x230 8 x526))
(assert (x410 4294967295))
(assert (x439 x519 x112 x112 x225))
(assert (x61 (+ x252 31) 32))
(assert (= (or (and (not x502) x317) x144) x149))
(assert (x25 x330))
(assert (x53 x112 x225 x14 x519))
(assert (= (=> (and (and x425 (= x542 false) (= (x355 0) x32) (= x209 false) (= false x77) (= false x458) (= x32 x357) (= false x560) (= (<= x448 x108) x425)) (and (or (and (not x502) (= (ite x502 1 0) x104)) (and (and (<= x281 255) (= x104 (ite (> 1 x281) 1 0))) x502)) (and (>= 127 x359) (= x468 false) (= (x235 x93) x8) (>= 127 x359) (= x275 false) (= x93 x455) (>= x163 1) (>= 255 x148) (= x445 2167012380) (= (= 0 x148) x502) (= (x332 x401) x70) (= x163 (x449 x401)) (= x222 x70)))) x546) x380))
(assert (x478 x76))
(assert (< 10000 (x369 64 x238 159)))
(assert (= x317 (or x309 x432)))
(assert (x53 x14 x22 x225 x112))
(assert (x53 x225 x112 x112 x519))
(assert (= (or x146 x509) x461))
(assert (x478 2))
(assert (x211 x167))
(assert (x211 x381))
(assert (x478 (- x112 x225)))
(assert (x522 x500))
(assert (x368 x225 (- x112 x519)))
(assert (x230 8 x298))
(assert (= x249 x168))
(assert (x439 x519 x112 x14 x22))
(assert (x211 x187))
(assert (= x532 x139))
(assert (= (or x437 x403) x68))
(assert (x211 x418))
(assert (x368 x225 (- x112 x22)))
(assert (x15 x330))
(assert (not (x410 (x177 32 154))))
(assert (x368 x225 (- x112 x14)))
(assert (x211 x40))
(assert (x290 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x545 2 x353)))
(assert (= 64 (x564 (x369 64 x160 161))))
(assert (x61 (+ 31 x367) 32))
(assert (x211 x399))
(assert (x439 x112 x225 x14 x22))
(assert (x211 x252))
(assert (x211 x70))
(assert (x211 x316))
(assert (= x323 (=> (and (= (x97 192) x213) (= (> x10 31) x223) (= x10 (ite (< 0 x555) x479 (x256 127 x479))) (= (x231 (- x555 (mod (ite (> 32 x10) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x258) (>= 18446744073709551615 x213) (or (= x258 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x258 1)) (= x555 (x256 1 x362)) (= x479 (x547 x362 2))) (and (=> (not x223) x147) (=> (and x223 (and (= (x547 (+ x10 31) 32) x399) (= (+ x350 x399) x373) (= x31 (< x350 x373)) (= x350 (x177 32 155)))) (and (=> x31 x127) (=> (not x31) x334)))))))
(assert (= x348 (and x429 (not x502))))
(assert (= x514 (or x233 x341)))
(assert (x53 x14 x519 x14 x22))
(assert (x211 x359))
(assert (x211 x504))
(assert (x522 x362))
(assert (x230 8 x339))
(assert (x211 x442))
(assert (x566 (x545 2 x136)))
(assert (x522 127))
(assert (x570 x244))
(assert (= 32 (x564 (x177 32 4))))
(assert (= x288 (=> (and (= (not (> x488 x129)) x293) (= x129 (+ 1 x420))) (and x139 x293))))
(assert (x478 (- x14 x225)))
(assert (x54 x523 x342))
(assert (= (x564 (x369 64 x238 161)) 64))
(assert (x211 x22))
(assert (x211 x405))
(assert (x439 x112 x519 x14 x519))
(assert (= (and x409 (not x143)) x44))
(assert (x410 1461501637330902918203684832716283019655932542975))
(assert (= (x20 (x369 64 x238 161)) (x369 64 x238 161)))
(assert (x410 18446744073709551615))
(assert (= (x20 34602258808455191227493136189427688107261027562213901346293687426555358216192) 0))
(assert (x211 x424))
(assert (x566 (+ x252 31)))
(assert (x211 x93))
(assert (x211 x238))
(assert (= (x20 (+ x71 x302)) (x20 x71)))
(assert (x360 x559))
(assert (x211 x132))
(assert (x211 x319))
(assert (x53 x112 x519 x22 x14))
(assert (= (x177 32 4) (x20 (x177 32 4))))
(assert (x211 x526))
(assert (= x216 x396))
(assert (x410 1889567281))
(assert (x211 x108))
(assert (x211 x462))
(assert (x522 x338))
(assert (x410 72464927124685711895252664195178772226123872012682517813167109100718830649344))
(assert (x368 x14 (- x519 x22)))
(assert (x211 x267))
(assert (= x397 (and (not x113) x106)))
(assert (x211 x463))
(assert (= (x20 (x369 64 x238 159)) (x369 64 x238 159)))
(assert (x211 x401))
(assert (x211 x160))
(assert (x211 x320))
(assert (< 10000 (x177 32 154)))
(assert (x211 x151))
(assert (x15 x213))
(assert (= x147 (=> (and (or (and x42 (and (= x229 (* x213 2)) (= (x214 224) x226) (= x526 (x256 31 x213)) (= x415 (x256 x226 x55)) (= x55 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x485 115792089237316195423570985008687907853269984665640564039457584007913129639935 x196))) (= x322 (x177 32 155)) (= (* x526 8) x196) (= x184 (+ x229 1)))) (and (not x42) (and (= (x256 x482 x563) x523) (= x126 (x485 115792089237316195423570985008687907853269984665640564039457584007913129639935 x510)) (= (ite (<= x523 1) x306 (x65 x523 x342)) x393) (<= 1 x126) (= (x214 224) x482) (= x510 (* x213 8)) (= x306 (x374 (+ x342 x523))) (= (* 2 x213) x342) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x126) x563)))) (= x42 (= 1 (ite (< 31 x213) 1 0)))) x412)))
(assert (x478 (- x519 x225)))
(assert (x522 x62))
(assert (x53 x225 x112 x14 x22))
(assert (x410 57896044618658097711785492504343953926634992332820282019728792003956564819967))
(assert (x211 x328))
(assert (x566 (x545 2 x319)))
(assert (= 159 (x505 (x369 64 x160 159))))
(assert (x478 (- x14 x112)))
(assert (= (x20 x384) (x20 (+ x384 1))))
(assert (= (and x388 x232) x169))
(assert (x211 x184))
(assert (= (x219 (x369 64 x238 159)) x238))
(assert (x15 x339))
(assert (= 32 (x564 (x177 32 155))))
(assert (= x494 (or x533 x85)))
(assert (x211 x174))
(assert (= 156 (x505 (x369 64 x238 156))))
(assert (x368 x519 (- x112 x14)))
(assert (< (x369 64 x238 159) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x211 x269))
(assert (x368 x14 (- x519 x225)))
(assert (x53 x14 x519 x225 x112))
(assert (= (and x416 x466) x533))
(assert (= x249 (=> (and (or (and (not x105) (and (= x257 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x328)) (>= x328 1) (= (x374 (+ x244 x504)) x486) (= x351 (ite (>= 1 x504) x486 (x65 x504 x244))) (= (x485 115792089237316195423570985008687907853269984665640564039457584007913129639935 x433) x328) (= x433 (* x50 8)) (= (x256 x12 x257) x504) (= x12 (x91 160)) (= (* x50 2) x244))) (and (and (= (x256 31 x50) x298) (= x442 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x485 115792089237316195423570985008687907853269984665640564039457584007913129639935 x136))) (= x530 (+ 1 x452)) (= x452 (* 2 x50)) (= (x91 160) x338) (= x434 (x177 32 3)) (= x136 (* x298 8)) (= x390 (x256 x338 x442))) x105)) (= (= 1 (ite (> x50 31) 1 0)) x105)) x111)))
(assert (x211 x357))
(assert (x368 x22 (- x14 x225)))
(assert (x211 x486))
(assert (x522 x442))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x369 64 x238 158)))
(assert (x53 x225 x112 x14 x519))
(assert (x15 x361))
(assert (x211 x563))
(assert (= 156 (x505 (x369 64 x160 156))))
(assert (x368 x112 x519))
(assert (x211 x2))
(assert (x439 x22 x14 x112 x225))
(assert (= (x369 64 x238 158) (x20 (x369 64 x238 158))))
(assert (= (and x19 x459) x437))
(assert (x211 x559))
(assert (x53 x519 x14 x519 x112))
(assert (x211 x227))
(assert (= (x219 (x177 32 4)) 4))
(assert (x53 x112 x519 x519 x14))
(assert (x368 x112 (- x519 x14)))
(assert (x211 x495))
(assert (x211 x12))
(assert (x478 x202))
(assert (= (=> (and (and (= false x255) (= 4 x243) (= x150 x34) (= x21 404098525) (= x60 (x449 x401)) (= x179 false) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x507 x198)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x58 x112 x519)) (= x92 (x58 x112 x519)) (<= 0 x92) (= false x63) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x92) (= x79 x277) (= x460 false) (= false x66) (>= 127 x447) (= (+ x507 x198) x34) (= x386 false) (<= 1 x60) (>= x34 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x34) (= x507 x92) (= x154 false) (>= 127 x447) (= x340 false) (= 36 x289)) (and (or (and (not x221) (and (= x52 (x369 64 x238 159)) (= x75 x457) (= (x444 x52) x75))) (and (and (= x462 x457) (= x371 (x369 64 x238 158)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x428) (< (+ x391 x81) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= x561 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x561 0) (= (x443 x371) x391) (< (x58 x112 x225) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x428) (= x81 x561) (= (x58 x112 x225) x561) (= (+ x81 x391) x428) (= x225 (x541 x562)) (= x462 x428) (= (x369 64 x238 156) x562)) x221)) (and (= 1889567281 x1) (= x247 false) (= x238 x358) (= x278 (x538 x135)) (= false x234) (= (x449 x401) x465) (<= x278 2) (>= 127 x382) (= x238 x79) (= x135 (x369 64 x238 161)) (= (= 0 x278) x221) (>= x465 1) (<= x382 127)))) x506) x515))
(assert (x368 x14 (- x22 x519)))
(assert (not (x410 (x177 32 155))))
(assert (x211 x354))
(assert (x522 x492))
(assert (x53 x112 x225 x22 x14))
(assert (x566 (x545 2 x161)))
(assert (x211 x62))
(assert (x211 x213))
(assert (x410 57005))
(assert (x15 32))
(assert (x230 8 x213))
(assert (x211 x400))
(assert (x211 x338))
(assert (x522 x226))
(assert (x543 x479 128))
(assert (x211 x415))
(assert (> (x369 64 x160 159) 10000))
(assert (= (x177 32 3) (x20 (x177 32 3))))
(assert (x211 x218))
(assert (x211 x367))
(assert (x211 x165))
(assert (x439 x14 x519 x112 x225))
(check-sat)
(exit)
