(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Certora
Generated on: 2024-04-10
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x542 () Int)
(declare-fun x232 () Int)
(declare-fun x386 () Bool)
(declare-fun x429 () Int)
(declare-fun x281 () Bool)
(declare-fun x525 () Int)
(declare-fun x546 () Bool)
(declare-fun x457 () Int)
(declare-fun x221 () Int)
(declare-fun x197 () Int)
(declare-fun x120 () Int)
(declare-fun x510 () Int)
(declare-fun x607 () Int)
(declare-fun x407 () Int)
(declare-fun x32 () Int)
(declare-fun x162 () Bool)
(declare-fun x289 (Int Int Int) Int)
(declare-fun x449 () Bool)
(declare-fun x249 () Int)
(declare-fun x374 () Int)
(declare-fun x549 () Bool)
(declare-fun x599 () Bool)
(declare-fun x451 () Int)
(declare-fun x91 () Int)
(declare-fun x61 () Int)
(declare-fun x288 () Bool)
(declare-fun x6 () Int)
(declare-fun x280 () Bool)
(declare-fun x27 () Int)
(declare-fun x80 () Int)
(declare-fun x313 () Bool)
(declare-fun x605 () Int)
(declare-fun x340 () Int)
(declare-fun x555 () Int)
(declare-fun x579 () Bool)
(declare-fun x187 () Int)
(declare-fun x277 () Int)
(declare-fun x359 () Int)
(declare-fun x105 () Int)
(declare-fun x217 () Bool)
(declare-fun x20 () Int)
(declare-fun x475 () Bool)
(declare-fun x257 () Int)
(declare-fun x64 () Int)
(declare-fun x531 () Int)
(declare-fun x556 (Int) Int)
(declare-fun x622 () Int)
(declare-fun x434 () Int)
(declare-fun x314 () Int)
(declare-fun x403 () Bool)
(declare-fun x218 () Bool)
(declare-fun x501 () Int)
(declare-fun x111 () Bool)
(declare-fun x629 (Int Int) Int)
(declare-fun x114 () Int)
(declare-fun x366 () Bool)
(declare-fun x606 () Int)
(declare-fun x620 () Int)
(declare-fun x590 () Int)
(declare-fun x300 () Bool)
(declare-fun x172 () Int)
(declare-fun x334 () Int)
(declare-fun x150 () Bool)
(declare-fun x486 () Bool)
(declare-fun x419 () Int)
(declare-fun x595 () Bool)
(declare-fun x524 () Bool)
(declare-fun x447 () Int)
(declare-fun x430 () Int)
(declare-fun x428 () Bool)
(declare-fun x118 () Int)
(declare-fun x270 () Int)
(declare-fun x50 (Int Int) Int)
(declare-fun x185 () Int)
(declare-fun x502 () Int)
(declare-fun x632 () Int)
(declare-fun x569 () Int)
(declare-fun x310 () Int)
(declare-fun x166 () Int)
(declare-fun x618 () Bool)
(declare-fun x583 () Int)
(declare-fun x420 () Bool)
(declare-fun x18 () Bool)
(declare-fun x362 () Bool)
(declare-fun x488 () Int)
(declare-fun x338 () Int)
(declare-fun x278 () Bool)
(declare-fun x517 () Bool)
(declare-fun x97 () Int)
(declare-fun x573 () Bool)
(declare-fun x509 () Int)
(declare-fun x377 () Bool)
(declare-fun x473 () Int)
(declare-fun x647 () Bool)
(declare-fun x363 () Bool)
(declare-fun x372 () Int)
(declare-fun x612 () Bool)
(declare-fun x346 () Int)
(declare-fun x345 () Bool)
(declare-fun x92 (Int) Int)
(declare-fun x268 () Int)
(declare-fun x65 () Int)
(declare-fun x246 () Int)
(declare-fun x581 () Int)
(declare-fun x102 () Bool)
(declare-fun x132 () Bool)
(declare-fun x38 () Bool)
(declare-fun x219 () Int)
(declare-fun x215 () Bool)
(declare-fun x547 () Bool)
(declare-fun x265 () Int)
(declare-fun x623 () Bool)
(declare-fun x342 () Int)
(declare-fun x506 () Bool)
(declare-fun x186 () Int)
(declare-fun x481 () Int)
(declare-fun x158 () Int)
(declare-fun x584 () Int)
(declare-fun x193 () Bool)
(declare-fun x43 () Int)
(declare-fun x182 () Int)
(declare-fun x244 () Bool)
(declare-fun x598 () Bool)
(declare-fun x266 () Bool)
(declare-fun x627 () Bool)
(declare-fun x416 () Bool)
(declare-fun x336 () Int)
(declare-fun x84 () Int)
(declare-fun x77 () Int)
(declare-fun x398 () Int)
(declare-fun x115 () Int)
(declare-fun x242 () Bool)
(declare-fun x513 () Int)
(declare-fun x332 () Bool)
(declare-fun x388 () Int)
(declare-fun x286 () Bool)
(declare-fun x406 () Bool)
(declare-fun x79 () Int)
(declare-fun x443 () Int)
(declare-fun x554 () Int)
(declare-fun x188 () Bool)
(declare-fun x229 () Int)
(declare-fun x226 () Int)
(declare-fun x494 () Bool)
(declare-fun x256 () Int)
(declare-fun x136 (Int Int) Int)
(declare-fun x101 () Int)
(declare-fun x67 () Bool)
(declare-fun x638 () Int)
(declare-fun x521 (Int Int) Int)
(declare-fun x349 () Int)
(declare-fun x138 () Int)
(declare-fun x175 () Bool)
(declare-fun x157 () Int)
(declare-fun x474 () Bool)
(declare-fun x448 () Bool)
(declare-fun x53 () Int)
(declare-fun x439 () Int)
(declare-fun x427 () Int)
(declare-fun x126 () Int)
(declare-fun x532 () Bool)
(declare-fun x283 () Int)
(declare-fun x165 () Bool)
(declare-fun x148 () Int)
(declare-fun x582 () Int)
(declare-fun x436 () Bool)
(declare-fun x462 (Int) Int)
(declare-fun x202 () Int)
(declare-fun x373 () Int)
(declare-fun x560 () Int)
(declare-fun x495 () Int)
(declare-fun x306 () Bool)
(declare-fun x271 () Int)
(declare-fun x233 () Int)
(declare-fun x113 () Bool)
(declare-fun x456 (Int) Int)
(declare-fun x30 () Int)
(declare-fun x491 () Bool)
(declare-fun x152 () Int)
(declare-fun x82 () Bool)
(declare-fun x593 () Int)
(declare-fun x574 () Int)
(declare-fun x393 () Int)
(declare-fun x231 () Int)
(declare-fun x73 () Int)
(declare-fun x455 () Int)
(declare-fun x184 () Bool)
(declare-fun x216 () Bool)
(declare-fun x463 () Int)
(declare-fun x294 () Bool)
(declare-fun x471 () Bool)
(declare-fun x480 () Int)
(declare-fun x4 () Bool)
(declare-fun x371 () Int)
(declare-fun x384 () Int)
(declare-fun x460 () Int)
(declare-fun x611 () Int)
(declare-fun x409 () Int)
(declare-fun x201 () Bool)
(declare-fun x163 () Int)
(declare-fun x464 (Int) Int)
(declare-fun x98 () Int)
(declare-fun x69 () Int)
(declare-fun x198 () Int)
(declare-fun x450 () Bool)
(declare-fun x250 () Int)
(declare-fun x331 (Int Int) Int)
(declare-fun x160 () Int)
(declare-fun x171 () Bool)
(declare-fun x170 () Int)
(declare-fun x143 (Int) Int)
(declare-fun x180 () Int)
(declare-fun x13 () Int)
(declare-fun x405 () Int)
(declare-fun x348 () Int)
(declare-fun x628 () Int)
(declare-fun x72 () Bool)
(declare-fun x467 () Int)
(declare-fun x81 () Bool)
(declare-fun x458 (Int Int) Int)
(declare-fun x206 () Bool)
(declare-fun x17 () Int)
(declare-fun x613 () Int)
(declare-fun x47 () Int)
(declare-fun x615 (Int) Int)
(declare-fun x375 () Int)
(declare-fun x515 () Bool)
(declare-fun x9 () Int)
(declare-fun x411 () Bool)
(declare-fun x562 () Bool)
(declare-fun x528 () Int)
(declare-fun x635 () Bool)
(declare-fun x54 () Bool)
(declare-fun x55 () Int)
(declare-fun x641 () Bool)
(declare-fun x191 () Bool)
(declare-fun x260 () Int)
(declare-fun x496 () Int)
(declare-fun x365 () Int)
(declare-fun x238 () Int)
(declare-fun x312 () Bool)
(declare-fun x63 () Int)
(declare-fun x566 () Bool)
(declare-fun x203 () Int)
(declare-fun x207 () Bool)
(declare-fun x529 () Int)
(declare-fun x551 () Int)
(declare-fun x610 () Bool)
(declare-fun x418 (Int Int) Int)
(declare-fun x291 () Bool)
(declare-fun x631 () Int)
(declare-fun x438 () Int)
(declare-fun x24 () Int)
(declare-fun x129 () Int)
(declare-fun x308 () Int)
(declare-fun x465 () Int)
(declare-fun x518 () Int)
(declare-fun x16 () Int)
(declare-fun x563 () Bool)
(declare-fun x214 () Int)
(declare-fun x625 () Bool)
(declare-fun x88 () Int)
(declare-fun x297 () Int)
(declare-fun x259 () Bool)
(declare-fun x442 () Int)
(declare-fun x575 () Int)
(declare-fun x253 () Int)
(declare-fun x328 () Bool)
(declare-fun x497 () Int)
(declare-fun x614 () Bool)
(declare-fun x178 () Int)
(declare-fun x600 () Int)
(declare-fun x279 () Int)
(declare-fun x534 () Int)
(declare-fun x287 () Int)
(declare-fun x74 () Int)
(declare-fun x325 () Int)
(declare-fun x356 () Bool)
(declare-fun x526 () Int)
(declare-fun x541 () Int)
(declare-fun x492 () Int)
(declare-fun x57 () Int)
(declare-fun x469 () Bool)
(declare-fun x211 () Int)
(declare-fun x28 () Bool)
(declare-fun x107 () Int)
(declare-fun x539 () Int)
(declare-fun x11 () Bool)
(declare-fun x482 () Int)
(declare-fun x33 () Int)
(declare-fun x296 () Int)
(declare-fun x309 () Bool)
(declare-fun x128 () Bool)
(declare-fun x168 () Int)
(declare-fun x487 () Int)
(declare-fun x261 () Int)
(declare-fun x591 () Bool)
(declare-fun x324 () Int)
(declare-fun x543 () Int)
(declare-fun x254 () Int)
(declare-fun x161 () Bool)
(declare-fun x119 () Int)
(declare-fun x48 () Bool)
(declare-fun x40 () Bool)
(declare-fun x329 () Int)
(declare-fun x127 (Int) Int)
(declare-fun x364 () Bool)
(declare-fun x62 () Bool)
(declare-fun x192 () Int)
(declare-fun x272 () Int)
(declare-fun x299 () Bool)
(declare-fun x437 () Int)
(declare-fun x273 () Int)
(declare-fun x71 () Bool)
(declare-fun x41 () Int)
(declare-fun x239 () Bool)
(declare-fun x21 () Int)
(declare-fun x144 () Int)
(declare-fun x321 () Int)
(declare-fun x117 () Int)
(declare-fun x251 () Int)
(declare-fun x195 () Int)
(declare-fun x642 () Int)
(declare-fun x130 () Int)
(declare-fun x200 () Bool)
(declare-fun x199 (Int) Bool)
(declare-fun x183 () Bool)
(declare-fun x110 (Int Int) Int)
(declare-fun x83 () Bool)
(declare-fun x489 () Int)
(declare-fun x395 () Int)
(declare-fun x370 () Int)
(declare-fun x527 () Bool)
(declare-fun x572 () Int)
(declare-fun x116 () Int)
(declare-fun x240 () Bool)
(declare-fun x385 () Int)
(declare-fun x89 () Int)
(declare-fun x597 () Bool)
(declare-fun x479 () Bool)
(declare-fun x228 () Int)
(declare-fun x8 () Bool)
(declare-fun x453 () Int)
(declare-fun x108 () Int)
(declare-fun x58 () Bool)
(declare-fun x96 () Int)
(declare-fun x472 () Int)
(declare-fun x156 () Int)
(declare-fun x567 () Int)
(declare-fun x337 () Bool)
(declare-fun x210 () Int)
(declare-fun x176 () Int)
(declare-fun x190 () Int)
(declare-fun x194 () Bool)
(declare-fun x644 () Int)
(declare-fun x335 () Int)
(declare-fun x99 () Bool)
(declare-fun x588 () Int)
(declare-fun x408 () Bool)
(declare-fun x236 () Int)
(declare-fun x19 () Bool)
(declare-fun x360 () Int)
(declare-fun x46 () Int)
(declare-fun x49 () Int)
(declare-fun x93 () Int)
(declare-fun x503 (Int) Int)
(declare-fun x344 () Int)
(declare-fun x548 () Int)
(declare-fun x643 () Bool)
(declare-fun x381 () Bool)
(declare-fun x540 () Int)
(declare-fun x292 () Int)
(declare-fun x592 () Int)
(declare-fun x538 () Int)
(declare-fun x154 () Bool)
(declare-fun x106 () Bool)
(declare-fun x140 () Int)
(declare-fun x485 () Bool)
(declare-fun x2 () Bool)
(declare-fun x478 () Bool)
(declare-fun x498 (Int) Int)
(declare-fun x619 () Int)
(declare-fun x378 () Int)
(declare-fun x145 () Int)
(declare-fun x86 () Bool)
(declare-fun x397 () Int)
(declare-fun x639 () Bool)
(declare-fun x76 () Int)
(declare-fun x14 () Int)
(declare-fun x396 () Bool)
(declare-fun x153 () Int)
(declare-fun x426 () Int)
(declare-fun x322 () Int)
(declare-fun x1 () Bool)
(declare-fun x151 () Bool)
(declare-fun x608 () Int)
(declare-fun x36 () Bool)
(declare-fun x645 () Int)
(declare-fun x586 () Int)
(declare-fun x212 () Bool)
(declare-fun x380 () Bool)
(declare-fun x307 () Int)
(declare-fun x323 () Bool)
(declare-fun x248 () Int)
(declare-fun x269 () Bool)
(declare-fun x164 () Int)
(declare-fun x425 () Int)
(declare-fun x354 () Int)
(declare-fun x209 () Bool)
(declare-fun x621 () Int)
(declare-fun x7 () Bool)
(declare-fun x112 () Int)
(declare-fun x412 () Int)
(declare-fun x387 () Bool)
(declare-fun x421 (Int) Int)
(declare-fun x424 () Bool)
(declare-fun x367 () Bool)
(declare-fun x552 (Int Int) Int)
(declare-fun x243 () Bool)
(declare-fun x459 () Bool)
(declare-fun x604 () Int)
(declare-fun x304 () Int)
(declare-fun x227 () Bool)
(declare-fun x519 () Bool)
(declare-fun x422 () Bool)
(declare-fun x59 () Int)
(declare-fun x369 () Int)
(declare-fun x484 () Int)
(declare-fun x347 () Bool)
(declare-fun x26 () Int)
(declare-fun x22 () Int)
(declare-fun x646 () Int)
(declare-fun x66 () Bool)
(declare-fun x536 () Bool)
(declare-fun x317 () Bool)
(declare-fun x122 () Bool)
(declare-fun x70 () Int)
(declare-fun x490 () Bool)
(declare-fun x284 () Bool)
(declare-fun x37 () Int)
(declare-fun x401 () Int)
(declare-fun x516 () Int)
(declare-fun x520 () Int)
(declare-fun x383 () Int)
(declare-fun x553 () Int)
(declare-fun x530 () Int)
(declare-fun x25 () Int)
(declare-fun x446 () Int)
(declare-fun x640 () Int)
(declare-fun x564 () Int)
(declare-fun x507 () Bool)
(declare-fun x452 () Int)
(declare-fun x45 () Int)
(declare-fun x602 () Int)
(declare-fun x315 () Bool)
(declare-fun x263 () Int)
(declare-fun x87 () Int)
(declare-fun x298 () Int)
(declare-fun x578 () Bool)
(declare-fun x413 () Bool)
(declare-fun x10 () Int)
(declare-fun x56 () Int)
(declare-fun x624 () Bool)
(declare-fun x350 () Bool)
(declare-fun x537 () Int)
(declare-fun x650 () Int)
(declare-fun x508 () Int)
(declare-fun x147 () Int)
(declare-fun x649 () Int)
(declare-fun x223 () Bool)
(declare-fun x104 () Bool)
(declare-fun x235 () Int)
(declare-fun x390 () Bool)
(declare-fun x341 () Int)
(declare-fun x561 () Bool)
(declare-fun x432 () Bool)
(declare-fun x414 () Int)
(declare-fun x570 () Bool)
(declare-fun x208 () Int)
(declare-fun x410 () Int)
(declare-fun x512 () Bool)
(declare-fun x316 () Bool)
(declare-fun x571 () Int)
(declare-fun x535 () Int)
(declare-fun x39 (Int) Int)
(declare-fun x181 () Int)
(declare-fun x327 () Int)
(declare-fun x441 () Bool)
(declare-fun x60 () Int)
(declare-fun x435 () Int)
(declare-fun x3 () Int)
(declare-fun x205 () Int)
(declare-fun x31 () Bool)
(declare-fun x247 () Bool)
(declare-fun x505 () Int)
(declare-fun x594 () Int)
(declare-fun x400 () Int)
(declare-fun x225 () Int)
(declare-fun x174 () Bool)
(declare-fun x52 () Bool)
(declare-fun x139 () Bool)
(declare-fun x51 (Int) Int)
(declare-fun x196 () Bool)
(declare-fun x189 () Int)
(declare-fun x601 () Int)
(declare-fun x274 () Int)
(declare-fun x358 () Int)
(declare-fun x634 () Int)
(declare-fun x258 () Int)
(declare-fun x276 () Bool)
(declare-fun x576 () Bool)
(declare-fun x85 () Int)
(declare-fun x142 (Int) Int)
(declare-fun x545 () Bool)
(declare-fun x559 () Int)
(define-fun x293 ((x301 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x301) (>= x301 0)) x301 (- x301 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x339 ((x301 Int)) Int (ite (and (< x301 0) (>= x301 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x301 115792089237316195423570985008687907853269984665640564039457584007913129639936) x301))
(define-fun x399 ((x301 Int)) Int (ite (and (>= x301 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x301)) x301 (ite (and (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 x301) (> 231584178474632390847141970017375815706539969331281128078915168015826259279872 x301)) (- x301 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (>= x301 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (< x301 0)) (+ x301 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x521 x301 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x90 ((x402 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x402) (<= 0 x402)))
(define-fun x267 ((x402 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x402) (>= x402 0)))
(define-fun x134 ((x402 Int) (x431 Int)) Bool (= (* x431 x402) (x458 x402 x431)))
(define-fun x603 ((x402 Int) (x431 Int)) Bool (and (= (- (* (- x431 115792089237316195423570985008687907853269984665640564039457584007913129639936) x402) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x431 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x458 (- x402 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x431 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x458 x402 (- x431 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* x402 (- x431 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* x431 x402) (* x431 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x458 (- x402 115792089237316195423570985008687907853269984665640564039457584007913129639936) x431))))
(define-fun x255 ((x402 Int) (x431 Int)) Bool (=> (and (< 0 x402) (< 0 x431)) (= (= x431 (x136 (x399 (x458 x402 x431)) x402)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x458 x402 x431)))))
(define-fun x382 ((x402 Int) (x431 Int)) Bool (=> (and (not (= x431 0)) (not (= 0 x402))) (and (= (x136 (x458 x402 x431) x402) x431) (= (x136 (x458 x402 x431) x431) x402))))
(define-fun x500 ((x402 Int) (x431 Int)) Bool (=> (and (< 0 x431) (> x402 0)) (= (< 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x458 x402 x431)) (< (x136 115792089237316195423570985008687907853269984665640564039457584007913129639935 x402) x431))))
(define-fun x415 ((x402 Int) (x431 Int)) Bool (and (= (x399 (x458 x402 x431)) (x399 (x458 x402 (- x431 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x399 (x458 (- x402 115792089237316195423570985008687907853269984665640564039457584007913129639936) x431)) (x399 (x458 x402 x431))) (= (x399 (x458 (- x402 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x431 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x399 (x458 x402 x431)))))
(define-fun x177 ((x402 Int) (x431 Int)) Bool (and (=> (and (and (<= x431 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 0 x431)) (and (> x402 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x402))) (= (>= (x136 57896044618658097711785492504343953926634992332820282019728792003956564819968 x431) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x402)) (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x458 (- x402 115792089237316195423570985008687907853269984665640564039457584007913129639936) x431)))) (=> (and (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x431) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x431)) (and (> x402 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x402))) (= (<= (x458 (- x402 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x431 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= (x136 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x431)) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x402)))) (=> (and (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x431) (> x431 0)) (and (< 0 x402) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x402))) (= (>= (x136 57896044618658097711785492504343953926634992332820282019728792003956564819967 x431) x402) (<= (x458 x402 x431) 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (=> (and (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x431) (<= x431 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x402) (> x402 0))) (= (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x431) (x136 57896044618658097711785492504343953926634992332820282019728792003956564819968 x402)) (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x458 x402 (- x431 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))))
(define-fun x109 ((x402 Int) (x431 Int)) Bool (and (x134 x402 x431) (x177 x402 x431) (x382 x402 x431) (x415 x402 x431) (x603 x402 x431) (x255 x402 x431) (x500 x402 x431)))
(define-fun x230 ((x402 Int)) Bool (and (= 0 (x458 0 x402)) (= 0 (x458 x402 0))))
(define-fun x617 ((x402 Int)) Bool (and (= (x458 x402 1) x402) (= (x458 1 x402) x402)))
(define-fun x121 ((x402 Int)) Bool (and (x617 x402) (x230 x402)))
(define-fun x476 ((x402 Int)) Bool (and (= (x418 115792089237316195423570985008687907853269984665640564039457584007913129639935 x402) x402) (= x402 (x418 x402 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x285 ((x402 Int)) Bool (and (= 0 (x418 0 x402)) (= 0 (x418 x402 0))))
(define-fun x445 ((x402 Int)) Bool (= x402 (x418 x402 x402)))
(define-fun x159 ((x402 Int)) Bool (and (x476 x402) (x285 x402) (x445 x402)))
(define-fun x404 ((x402 Int) (x431 Int)) Bool (= (x418 x402 x431) (x418 x431 x402)))
(define-fun x275 ((x402 Int) (x431 Int)) Bool (and (=> (<= 0 x402) (>= x402 (x418 x402 x431))) (<= 0 (x418 x402 x431)) (=> (<= 0 x431) (>= x431 (x418 x402 x431)))))
(define-fun x523 ((x402 Int) (x431 Int)) Bool (and (x275 x402 x431) (x404 x402 x431)))
(define-fun x237 ((x402 Int)) Bool (= (x521 x402 4294967296) (x418 x402 4294967295)))
(define-fun x131 ((x402 Int)) Bool (and (x237 x402) (x523 x402 4294967295)))
(define-fun x493 ((x402 Int) (x431 Int)) Bool (and (> x431 (x521 x402 x431)) (>= (x521 x402 x431) 0)))
(define-fun x550 ((x402 Int) (x431 Int)) Bool (=> (and (<= 0 x402) (> x431 0)) (= (> x431 x402) (= (x521 x402 x431) x402))))
(define-fun x609 ((x402 Int) (x431 Int)) Bool (=> (and (and (>= x402 x431) (< x402 (+ x431 x431))) (< 0 x431)) (= (- x402 x431) (x521 x402 x431))))
(define-fun x155 ((x402 Int) (x431 Int)) Bool (=> (< 0 x431) (= x402 (+ (* x431 (x136 x402 x431)) (x521 x402 x431)))))
(define-fun x179 ((x402 Int) (x431 Int)) Bool (and (x493 x402 x431) (x155 x402 x431) (x609 x402 x431) (x550 x402 x431)))
(define-fun x577 ((x402 Int)) Bool (= (x521 0 x402) 0))
(define-fun x423 ((x402 Int)) Bool (= 0 (x521 x402 1)))
(define-fun x392 ((x402 Int)) Bool (= (x521 x402 x402) 0))
(define-fun x103 ((x402 Int)) Bool (and (x423 x402) (x392 x402) (x577 x402)))
(define-fun x637 ((x402 Int) (x431 Int)) Bool (=> (and (> x431 0) (< 0 x402)) (and (>= x402 (x136 x402 x431)) (>= (x136 x402 x431) 0))))
(define-fun x544 ((x402 Int) (x431 Int)) Bool (=> (and (and (<= 1 x431) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x431)) (and (< x402 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x402))) (and (>= (x136 x402 x431) 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x136 x402 x431)))))
(define-fun x330 ((x402 Int) (x431 Int)) Bool (=> (and (> x402 x431) (< 1 x431)) (> x402 (x136 x402 x431))))
(define-fun x558 ((x402 Int) (x431 Int)) Bool (=> (and (> x402 0) (< 0 x431)) (= (< x402 x431) (= 0 (x136 x402 x431)))))
(define-fun x167 ((x402 Int) (x431 Int)) Bool (=> (and (< 0 x431) (< 0 x402)) (and (<= (* x431 (x136 x402 x431)) x402) (< (- x402 x431) (* x431 (x136 x402 x431))))))
(define-fun x630 ((x402 Int) (x431 Int)) Bool (= (- x402 (x418 (- x431 1) x402)) (* (x136 x402 x431) x431)))
(define-fun x245 ((x402 Int) (x431 Int)) Bool (and (x630 x402 x431) (x637 x402 x431) (x544 x402 x431) (x558 x402 x431) (x330 x402 x431) (x167 x402 x431)))
(define-fun x514 ((x402 Int)) Bool (= 0 (x136 0 x402)))
(define-fun x444 ((x402 Int)) Bool (= x402 (x136 x402 1)))
(define-fun x379 ((x402 Int)) Bool (=> (not (= 0 x402)) (= (x136 x402 x402) 1)))
(define-fun x220 ((x402 Int)) Bool (and (x514 x402) (x379 x402) (x444 x402)))
(define-fun x351 ((x402 Int)) Bool (= (x418 x402 1) (x521 x402 2)))
(define-fun x133 ((x402 Int)) Bool (and (x523 x402 1) (x351 x402)))
(define-fun x477 ((x402 Int)) Bool (= (x418 x402 127) (x521 x402 128)))
(define-fun x29 ((x402 Int)) Bool (and (x523 x402 127) (x477 x402)))
(define-fun x596 ((x402 Int)) Bool (= (x418 x402 1461501637330902918203684832716283019655932542975) (x521 x402 1461501637330902918203684832716283019655932542976)))
(define-fun x125 ((x402 Int)) Bool (and (x523 x402 1461501637330902918203684832716283019655932542975) (x596 x402)))
(define-fun x303 ((x402 Int)) Bool (= (x521 x402 256) (x418 x402 255)))
(define-fun x95 ((x402 Int)) Bool (and (x303 x402) (x523 x402 255)))
(define-fun x204 ((x402 Int)) Bool (= (+ (x418 x402 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x521 x402 32)) (x399 x402)))
(define-fun x319 ((x402 Int)) Bool (and (x204 x402) (x523 x402 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(define-fun x391 ((x402 Int) (x431 Int)) Bool (=> (and (< 0 x431) (> x402 0)) (and (<= (x458 (x136 x402 x431) x431) x402) (< (- x402 x431) (x458 (x136 x402 x431) x431)))))
(define-fun x149 ((x402 Int) (x431 Int)) Bool (and (x558 x402 x431) (x330 x402 x431) (x391 x402 x431) (x544 x402 x431) (x637 x402 x431)))
(define-fun x565 ((x402 Int)) Bool (and (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x552 x402 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (x552 115792089237316195423570985008687907853269984665640564039457584007913129639935 x402) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(define-fun x636 ((x402 Int)) Bool (and (= x402 (x552 x402 0)) (= (x552 0 x402) x402)))
(define-fun x394 ((x402 Int)) Bool (= (x552 x402 x402) x402))
(define-fun x264 ((x402 Int)) Bool (and (x565 x402) (x636 x402) (x394 x402)))
(define-fun x616 ((x402 Int) (x431 Int)) Bool (= (x552 x402 x431) (x552 x431 x402)))
(define-fun x173 ((x402 Int) (x431 Int)) Bool (and (=> (>= x402 0) (<= x402 (x552 x402 x431))) (>= (+ x431 x402) (x552 x402 x431)) (=> (<= 0 x431) (>= (x552 x402 x431) x431))))
(define-fun x648 ((x402 Int) (x431 Int)) Bool (and (x616 x402 x431) (x173 x402 x431)))
(define-fun x42 ((x402 Int)) Bool (= (x521 x402 32) (x418 x402 31)))
(define-fun x361 ((x402 Int)) Bool (and (x523 x402 31) (x42 x402)))
(define-fun x75 ((x402 Int)) Bool (= (x418 x402 115792089237316195423570985008687907852929702298798853738508473738074905378815) (- x402 (x418 x402 340282366841710300949110269838224261120))))
(define-fun x585 ((x402 Int)) Bool (and (x523 x402 115792089237316195423570985008687907852929702298798853738508473738074905378815) (x75 x402)))
(define-fun x466 ((x402 Int)) Bool (= (+ (x418 x402 340282366841710300949110269838224261120) (x521 x402 79228162514264337593543950336)) (x521 x402 340282366920938463463374607431768211456)))
(define-fun x169 ((x402 Int)) Bool (and (x466 x402) (x523 x402 340282366841710300949110269838224261120)))
(define-fun x23 ((x402 Int)) Bool (= (- x402 (x418 x402 6277101735386680763495507056286727952638980837032266301440)) (x418 x402 115792089237316195417293883273301227089774477609353836086818603170880863338495)))
(define-fun x352 ((x402 Int)) Bool (and (x23 x402) (x523 x402 115792089237316195417293883273301227089774477609353836086818603170880863338495)))
(define-fun x234 ((x402 Int)) Bool (= (x521 x402 6277101735386680763835789423207666416102355444464034512896) (+ (x521 x402 340282366920938463463374607431768211456) (x418 x402 6277101735386680763495507056286727952638980837032266301440))))
(define-fun x241 ((x402 Int)) Bool (and (x234 x402) (x523 x402 6277101735386680763495507056286727952638980837032266301440)))
(define-fun x376 ((x402 Int)) Bool (= (x418 x402 18446744073709551615) (x521 x402 18446744073709551616)))
(define-fun x461 ((x402 Int)) Bool (and (x376 x402) (x523 x402 18446744073709551615)))
(define-fun x533 ((x504 Int)) Int 0)
(define-fun x470 ((x504 Int)) Int 0)
(define-fun x318 ((x504 Int)) Int 0)
(define-fun x468 ((x504 Int)) Int 0)
(define-fun x389 ((x504 Int)) Int 0)
(define-fun x141 ((x504 Int)) Int 0)
(define-fun x252 ((x504 Int)) Int 0)
(define-fun x589 ((x504 Int)) Int 0)
(define-fun x511 ((x504 Int)) Int 0)
(define-fun x417 ((x504 Int)) Int 0)
(define-fun x135 ((x504 Int)) Int (ite (= x504 x185) 0 (x498 x504)))
(define-fun x368 ((x504 Int)) Int (ite x491 (x498 x504) (ite x573 (x498 x504) (x135 x504))))
(define-fun x68 ((x504 Int)) Int (ite (= x504 x63) x393 (x368 x504)))
(define-fun x311 ((x504 Int)) Int (ite x623 (x368 x504) (x68 x504)))
(define-fun x557 ((x504 Int)) Int (ite (= x10 x504) x287 (x311 x504)))
(define-fun x433 ((x504 Int)) Int (ite x191 (x311 x504) (x557 x504)))
(define-fun x295 ((x504 Int)) Int (ite (= x33 x504) x112 (x433 x504)))
(define-fun x94 ((x504 Int)) Int (ite (= x504 x33) x176 (x368 x504)))
(define-fun x35 ((x504 Int)) Int (ite x36 (x295 x504) (x94 x504)))
(define-fun x483 ((x504 Int)) Int (ite (= x504 x172) x80 (x35 x504)))
(define-fun x587 ((x504 Int)) Int (ite (= x504 x172) x395 (x483 x504)))
(define-fun x146 ((x504 Int)) Int (ite (= x504 x525) 0 (x498 x504)))
(define-fun x34 ((x504 Int)) Int (ite x309 (x498 x504) (ite x281 (x498 x504) (x146 x504))))
(define-fun x282 ((x504 Int)) Int (ite (= x504 x254) x520 (x34 x504)))
(define-fun x305 ((x504 Int)) Int (ite x86 (x34 x504) (x282 x504)))
(define-fun x137 ((x504 Int)) Int (ite (= x504 x190) x425 (x305 x504)))
(define-fun x353 ((x504 Int)) Int (ite x450 (x305 x504) (x137 x504)))
(define-fun x333 ((x504 Int)) Int (ite (= x504 x583) x25 (x353 x504)))
(define-fun x499 ((x504 Int)) Int (ite (= x504 x583) x446 (x34 x504)))
(define-fun x355 ((x504 Int)) Int (ite x99 (x333 x504) (x499 x504)))
(define-fun x454 ((x504 Int)) Int (ite (= x504 x21) x56 (x355 x504)))
(define-fun x580 ((x504 Int)) Int (ite (= x504 x21) x37 (x454 x504)))
(define-fun x302 ((x504 Int)) Int (ite x102 (x587 x504) (x580 x504)))
(define-fun x262 ((x504 Int)) Int 0)
(define-fun x12 ((x504 Int)) Int (ite (> x530 x504) (x615 x504) 0))
(define-fun x626 ((x504 Int)) Int (ite (and (>= x504 0) (< x504 x530)) (x39 x504) (x12 x504)))
(define-fun x326 ((x504 Int)) Int (ite (= x504 x501) x41 (x143 x504)))
(define-fun x15 ((x504 Int)) Int (ite (= x504 128) x384 (x389 x504)))
(define-fun x44 ((x504 Int)) Int (ite (and (<= 160 x504) (> (+ 160 x384) x504)) (x626 (- (+ x430 x504) 160)) (x318 x504)))
(define-fun x633 ((x504 Int)) Int (ite (= x144 x504) 0 (x44 x504)))
(define-fun x124 ((x504 Int)) Int (ite (and (< x504 x505) (<= 0 x504)) (x633 (+ x504 160)) (x462 x504)))
(define-fun x222 ((x504 Int)) Int (x124 x504))
(define-fun x440 ((x504 Int)) Int (x127 x504))
(define-fun x568 ((x504 Int)) Int (ite (= x101 x504) x233 (x470 x504)))
(define-fun x78 ((x504 Int)) Int (ite (and (> (+ x649 x233) x504) (>= x504 x649)) (x127 (- x504 x649)) (x533 x504)))
(define-fun x343 ((x504 Int)) Int (ite (= 128 x504) x384 (x589 x504)))
(define-fun x290 ((x504 Int)) Int (ite (and (<= 160 x504) (> (+ 160 x384) x504)) (x626 (- (+ x504 x430) 160)) (x252 x504)))
(define-fun x100 ((x504 Int)) Int (ite (= x504 x268) 0 (x290 x504)))
(define-fun x320 ((x504 Int)) Int (ite (and (< x504 x265) (<= 0 x504)) (x100 (+ x504 160)) (x51 x504)))
(define-fun x5 ((x504 Int)) Int (x320 x504))
(define-fun x522 ((x504 Int)) Int (x142 x504))
(define-fun x213 ((x504 Int)) Int (ite (= x504 x160) x398 (x141 x504)))
(define-fun x357 ((x504 Int)) Int (ite (and (> (+ x398 x85) x504) (<= x85 x504)) (x142 (- x504 x85)) (x468 x504)))
(define-fun x123 ((x504 Int)) Int (ite x281 (x498 x504) (x146 x504)))
(define-fun x224 ((x504 Int)) Int (ite x573 (x498 x504) (x135 x504)))
(assert (x109 3 x13))
(assert (x90 x25))
(assert (x220 x374))
(assert (x121 x410))
(assert (x121 x129))
(assert (x220 (x50 2 x621)))
(assert (x90 x105))
(assert (x29 x484))
(assert (x159 6277101735386680763495507056286727952638980837032266301440))
(assert (= (x464 (+ x551 2)) (x464 x551)))
(assert (x90 x526))
(assert (= (or x191 x269) x36))
(assert (x90 x370))
(assert (x90 x427))
(assert (x220 x611))
(assert (x159 x49))
(assert (x90 x426))
(assert (x121 (- x79 1)))
(assert (and (= (x50 2 69) 590295810358705651712) (= 268435456 (x50 2 28)) (= 6901746346790563787434755862277025452451108972170386555162524223799296 (x50 2 232)) (= 1152921504606846976 (x50 2 60)) (= (x50 2 20) 1048576) (= (x50 2 133) 10889035741470030830827987437816582766592) (= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x50 2 256)) (= 18446744073709551616 (x50 2 64)) (= 105312291668557186697918027683670432318895095400549111254310977536 (x50 2 216)) (= (x50 2 42) 4398046511104) (= (x50 2 182) 6129982163463555433433388108601236734474956488734408704) (= 862718293348820473429344482784628181556388621521298319395315527974912 (x50 2 229)) (= 151115727451828646838272 (x50 2 77)) (= 536870912 (x50 2 29)) (= 140737488355328 (x50 2 47)) (= (x50 2 163) 11692013098647223345629478661730264157247460343808) (= (x50 2 102) 5070602400912917605986812821504) (= (x50 2 138) 348449143727040986586495598010130648530944) (= (x50 2 109) 649037107316853453566312041152512) (= (x50 2 137) 174224571863520493293247799005065324265472) (= 340282366920938463463374607431768211456 (x50 2 128)) (= (x50 2 105) 40564819207303340847894502572032) (= 14134776518227074636666380005943348126619871175004951664972849610340958208 (x50 2 243)) (= 288230376151711744 (x50 2 58)) (= 5444517870735015415413993718908291383296 (x50 2 132)) (= 17179869184 (x50 2 34)) (= (x50 2 54) 18014398509481984) (= (x50 2 85) 38685626227668133590597632) (= 713623846352979940529142984724747568191373312 (x50 2 149)) (= (x50 2 195) 50216813883093446110686315385661331328818843555712276103168) (= 131072 (x50 2 17)) (= 154742504910672534362390528 (x50 2 87)) (= (x50 2 227) 215679573337205118357336120696157045389097155380324579848828881993728) (= 158456325028528675187087900672 (x50 2 97)) (= (x50 2 31) 2147483648) (= (x50 2 37) 137438953472) (= 57896044618658097711785492504343953926634992332820282019728792003956564819968 (x50 2 255)) (= (x50 2 250) 1809251394333065553493296640760748560207343510400633813116524750123642650624) (= 98079714615416886934934209737619787751599303819750539264 (x50 2 186)) (= (x50 2 218) 421249166674228746791672110734681729275580381602196445017243910144) (= (x50 2 172) 5986310706507378352962293074805895248510699696029696) (= 9444732965739290427392 (x50 2 73)) (= 8 (x50 2 3)) (= 524288 (x50 2 19)) (= 401734511064747568885490523085290650630550748445698208825344 (x50 2 198)) (= (x50 2 45) 35184372088832) (= (x50 2 178) 383123885216472214589586756787577295904684780545900544) (= 6427752177035961102167848369364650410088811975131171341205504 (x50 2 202)) (= (x50 2 141) 2787593149816327892691964784081045188247552) (= 4 (x50 2 2)) (= (x50 2 57) 144115188075855872) (= 633825300114114700748351602688 (x50 2 99)) (= 803469022129495137770981046170581301261101496891396417650688 (x50 2 199)) (= 77371252455336267181195264 (x50 2 86)) (= 748288838313422294120286634350736906063837462003712 (x50 2 169)) (= (x50 2 161) 2923003274661805836407369665432566039311865085952) (= 5192296858534827628530496329220096 (x50 2 112)) (= (x50 2 248) 452312848583266388373324160190187140051835877600158453279131187530910662656) (= 1099511627776 (x50 2 40)) (= (x50 2 247) 226156424291633194186662080095093570025917938800079226639565593765455331328) (= (x50 2 35) 34359738368) (= (x50 2 44) 17592186044416) (= (x50 2 27) 134217728) (= (x50 2 155) 45671926166590716193865151022383844364247891968) (= 11972621413014756705924586149611790497021399392059392 (x50 2 173)) (= 23384026197294446691258957323460528314494920687616 (x50 2 164)) (= 25711008708143844408671393477458601640355247900524685364822016 (x50 2 204)) (= (x50 2 207) 205688069665150755269371147819668813122841983204197482918576128) (= 5846006549323611672814739330865132078623730171904 (x50 2 162)) (= (x50 2 88) 309485009821345068724781056) (= 10141204801825835211973625643008 (x50 2 103)) (= (x50 2 191) 3138550867693340381917894711603833208051177722232017256448) (= (x50 2 230) 1725436586697640946858688965569256363112777243042596638790631055949824) (= (x50 2 16) 65536) (= 83076749736557242056487941267521536 (x50 2 116)) (= (x50 2 189) 784637716923335095479473677900958302012794430558004314112) (= 2658455991569831745807614120560689152 (x50 2 121)) (= 46768052394588893382517914646921056628989841375232 (x50 2 165)) (= (x50 2 5) 32) (= (x50 2 253) 14474011154664524427946373126085988481658748083205070504932198000989141204992) (= 10384593717069655257060992658440192 (x50 2 113)) (= (x50 2 140) 1393796574908163946345982392040522594123776) (= (x50 2 177) 191561942608236107294793378393788647952342390272950272) (= 187072209578355573530071658587684226515959365500928 (x50 2 167)) (= (x50 2 225) 53919893334301279589334030174039261347274288845081144962207220498432) (= (x50 2 12) 4096) (= (x50 2 66) 73786976294838206464) (= 1 (x50 2 0)) (= (x50 2 203) 12855504354071922204335696738729300820177623950262342682411008) (= (x50 2 231) 3450873173395281893717377931138512726225554486085193277581262111899648) (= 67108864 (x50 2 26)) (= (x50 2 25) 33554432) (= 1766847064778384329583297500742918515827483896875618958121606201292619776 (x50 2 240)) (= (x50 2 71) 2361183241434822606848) (= 13803492693581127574869511724554050904902217944340773110325048447598592 (x50 2 233)) (= 1180591620717411303424 (x50 2 70)) (= 36893488147419103232 (x50 2 65)) (= 10633823966279326983230456482242756608 (x50 2 123)) (= (x50 2 15) 32768) (= (x50 2 171) 2993155353253689176481146537402947624255349848014848) (= (x50 2 14) 16384) (= 43556142965880123323311949751266331066368 (x50 2 135)) (= 21778071482940061661655974875633165533184 (x50 2 134)) (= 302231454903657293676544 (x50 2 78)) (= (x50 2 185) 49039857307708443467467104868809893875799651909875269632) (= (x50 2 24) 16777216) (= 1208925819614629174706176 (x50 2 80)) (= (x50 2 106) 81129638414606681695789005144064) (= (x50 2 206) 102844034832575377634685573909834406561420991602098741459288064) (= 22835963083295358096932575511191922182123945984 (x50 2 154)) (= (x50 2 90) 1237940039285380274899124224) (= (x50 2 159) 730750818665451459101842416358141509827966271488) (= 3064991081731777716716694054300618367237478244367204352 (x50 2 181)) (= 618970019642690137449562112 (x50 2 89)) (= (x50 2 62) 4611686018427387904) (= (x50 2 101) 2535301200456458802993406410752) (= 200867255532373784442745261542645325315275374222849104412672 (x50 2 197)) (= 9903520314283042199192993792 (x50 2 93)) (= 7237005577332262213973186563042994240829374041602535252466099000494570602496 (x50 2 252)) (= 70368744177664 (x50 2 46)) (= 13479973333575319897333507543509815336818572211270286240551805124608 (x50 2 223)) (= 5575186299632655785383929568162090376495104 (x50 2 142)) (= (x50 2 41) 2199023255552) (= 220855883097298041197912187592864814478435487109452369765200775161577472 (x50 2 237)) (= (x50 2 174) 23945242826029513411849172299223580994042798784118784) (= (x50 2 68) 295147905179352825856) (= 162259276829213363391578010288128 (x50 2 107)) (= (x50 2 95) 39614081257132168796771975168) (= 6739986666787659948666753771754907668409286105635143120275902562304 (x50 2 222)) (= (x50 2 192) 6277101735386680763835789423207666416102355444464034512896) (= (x50 2 117) 166153499473114484112975882535043072) (= 332306998946228968225951765070086144 (x50 2 118)) (= 5316911983139663491615228241121378304 (x50 2 122)) (= (x50 2 48) 281474976710656) (= 100433627766186892221372630771322662657637687111424552206336 (x50 2 196)) (= (x50 2 170) 1496577676626844588240573268701473812127674924007424) (= 18889465931478580854784 (x50 2 74)) (= 664613997892457936451903530140172288 (x50 2 119)) (= 680564733841876926926749214863536422912 (x50 2 129)) (= (x50 2 245) 56539106072908298546665520023773392506479484700019806659891398441363832832) (= 26959946667150639794667015087019630673637144422540572481103610249216 (x50 2 224)) (= (x50 2 21) 2097152) (= (x50 2 98) 316912650057057350374175801344) (= 1125899906842624 (x50 2 50)) (= 1267650600228229401496703205376 (x50 2 100)) (= (x50 2 127) 170141183460469231731687303715884105728) (= 44601490397061246283071436545296723011960832 (x50 2 145)) (= (x50 2 219) 842498333348457493583344221469363458551160763204392890034487820288) (= (x50 2 187) 196159429230833773869868419475239575503198607639501078528) (= (x50 2 92) 4951760157141521099596496896) (= (x50 2 94) 19807040628566084398385987584) (= 64 (x50 2 6)) (= (x50 2 36) 68719476736) (= 2854495385411919762116571938898990272765493248 (x50 2 151)) (= 9223372036854775808 (x50 2 63)) (= (x50 2 235) 55213970774324510299478046898216203619608871777363092441300193790394368) (= (x50 2 82) 4835703278458516698824704) (= (x50 2 148) 356811923176489970264571492362373784095686656) (= (x50 2 217) 210624583337114373395836055367340864637790190801098222508621955072) (= (x50 2 72) 4722366482869645213696) (= (x50 2 184) 24519928653854221733733552434404946937899825954937634816) (= (x50 2 143) 11150372599265311570767859136324180752990208) (= (x50 2 150) 1427247692705959881058285969449495136382746624) (= 3213876088517980551083924184682325205044405987565585670602752 (x50 2 201)) (= 72057594037927936 (x50 2 56)) (= (x50 2 67) 147573952589676412928) (= 20769187434139310514121985316880384 (x50 2 114)) (= 91343852333181432387730302044767688728495783936 (x50 2 156)) (= (x50 2 61) 2305843009213693952) (= (x50 2 84) 19342813113834066795298816) (= 1073741824 (x50 2 30)) (= 1532495540865888858358347027150309183618739122183602176 (x50 2 180)) (= (x50 2 39) 549755813888) (= (x50 2 8) 256) (= 576460752303423488 (x50 2 59)) (= 822752278660603021077484591278675252491367932816789931674304512 (x50 2 209)) (= (x50 2 146) 89202980794122492566142873090593446023921664) (= 178405961588244985132285746181186892047843328 (x50 2 147)) (= (x50 2 55) 36028797018963968) (= 107839786668602559178668060348078522694548577690162289924414440996864 (x50 2 226)) (= (x50 2 228) 431359146674410236714672241392314090778194310760649159697657763987456) (= (x50 2 158) 365375409332725729550921208179070754913983135744) (= (x50 2 18) 262144) (= (x50 2 111) 2596148429267413814265248164610048) (= 87112285931760246646623899502532662132736 (x50 2 136)) (= (x50 2 208) 411376139330301510538742295639337626245683966408394965837152256) (= (x50 2 190) 1569275433846670190958947355801916604025588861116008628224) (= 8589934592 (x50 2 33)) (= (x50 2 238) 441711766194596082395824375185729628956870974218904739530401550323154944) (= (x50 2 241) 3533694129556768659166595001485837031654967793751237916243212402585239552) (= 392318858461667547739736838950479151006397215279002157056 (x50 2 188)) (= 5708990770823839524233143877797980545530986496 (x50 2 152)) (= (x50 2 214) 26328072917139296674479506920917608079723773850137277813577744384) (= 12259964326927110866866776217202473468949912977468817408 (x50 2 183)) (= (x50 2 153) 11417981541647679048466287755595961091061972992) (= (x50 2 236) 110427941548649020598956093796432407239217743554726184882600387580788736) (= 21267647932558653966460912964485513216 (x50 2 124)) (= (x50 2 212) 6582018229284824168619876730229402019930943462534319453394436096) (= 113078212145816597093331040047546785012958969400039613319782796882727665664 (x50 2 246)) (= 4194304 (x50 2 22)) (= (x50 2 131) 2722258935367507707706996859454145691648) (= (x50 2 38) 274877906944) (= (x50 2 176) 95780971304118053647396689196894323976171195136475136) (= (x50 2 9) 512) (= (x50 2 52) 4503599627370496) (= (x50 2 157) 182687704666362864775460604089535377456991567872) (= (x50 2 244) 28269553036454149273332760011886696253239742350009903329945699220681916416) (= (x50 2 160) 1461501637330902918203684832716283019655932542976) (= 22300745198530623141535718272648361505980416 (x50 2 144)) (= (x50 2 249) 904625697166532776746648320380374280103671755200316906558262375061821325312) (= 883423532389192164791648750371459257913741948437809479060803100646309888 (x50 2 239)) (= 374144419156711147060143317175368453031918731001856 (x50 2 168)) (= (x50 2 120) 1329227995784915872903807060280344576) (= 16 (x50 2 4)) (= (x50 2 175) 47890485652059026823698344598447161988085597568237568) (= (x50 2 96) 79228162514264337593543950336) (= (x50 2 104) 20282409603651670423947251286016) (= 3291009114642412084309938365114701009965471731267159726697218048 (x50 2 211)) (= (x50 2 126) 85070591730234615865843651857942052864) (= 27606985387162255149739023449108101809804435888681546220650096895197184 (x50 2 234)) (= (x50 2 108) 324518553658426726783156020576256) (= (x50 2 254) 28948022309329048855892746252171976963317496166410141009864396001978282409984) (= (x50 2 110) 1298074214633706907132624082305024) (= (x50 2 242) 7067388259113537318333190002971674063309935587502475832486424805170479104) (= 604462909807314587353088 (x50 2 79)) (= (x50 2 75) 37778931862957161709568) (= 1024 (x50 2 10)) (= 2475880078570760549798248448 (x50 2 91)) (= 2 (x50 2 1)) (= 9671406556917033397649408 (x50 2 83)) (= 1361129467683753853853498429727072845824 (x50 2 130)) (= (x50 2 53) 9007199254740992) (= (x50 2 210) 1645504557321206042154969182557350504982735865633579863348609024) (= (x50 2 13) 8192) (= 1606938044258990275541962092341162602522202993782792835301376 (x50 2 200)) (= 12554203470773361527671578846415332832204710888928069025792 (x50 2 193)) (= (x50 2 139) 696898287454081973172991196020261297061888) (= 52656145834278593348959013841835216159447547700274555627155488768 (x50 2 215)) (= 42535295865117307932921825928971026432 (x50 2 125)) (= (x50 2 115) 41538374868278621028243970633760768) (= (x50 2 194) 25108406941546723055343157692830665664409421777856138051584) (= 8796093022208 (x50 2 43)) (= 93536104789177786765035829293842113257979682750464 (x50 2 166)) (= (x50 2 251) 3618502788666131106986593281521497120414687020801267626233049500247285301248) (= (x50 2 220) 1684996666696914987166688442938726917102321526408785780068975640576) (= (x50 2 221) 3369993333393829974333376885877453834204643052817571560137951281152) (= (x50 2 213) 13164036458569648337239753460458804039861886925068638906788872192) (= (x50 2 51) 2251799813685248) (= (x50 2 81) 2417851639229258349412352) (= 8388608 (x50 2 23)) (= 51422017416287688817342786954917203280710495801049370729644032 (x50 2 205)) (= 2048 (x50 2 11)) (= 4294967296 (x50 2 32)) (= (x50 2 49) 562949953421312) (= 766247770432944429179173513575154591809369561091801088 (x50 2 179)) (= 75557863725914323419136 (x50 2 76)) (= 128 (x50 2 7))))
(assert (= x106 (=> (and (and (and (>= x608 1) (<= x575 127) (<= 1 x560) (= 3930543824 x98) (= x496 (x339 (- x263 (mod (ite (< x91 32) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= x344 x401) (or (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x496) (= x496 1)) (= (x498 x581) x555) (= x581 (+ x292 x181)) (= x459 false) (= x210 (x136 x273 2)) (= (x136 x195 18446744073709551616) x6) (= (x418 4294967295 x6) x118) (= (x498 x574) x273) (= (x498 98298139780651710009176378764859410129414531797962094797816435375964751540092) x608) (= x84 x120) (= (ite (< 0 x263) x210 (x418 127 x210)) x91) (< x344 x560) (= x614 (= 0 x91)) (= x226 (x418 4294967295 x414)) (= (x136 x460 4294967296) x414) (>= x385 1) (= x292 (x331 32 98298139780651710009176378764859410129414531797962094797816435375964751540092)) (= (x399 (* x344 3)) x181) (= (x498 x581) x460) (= x195 (x498 x581)) (= (x498 98298139780651710009176378764859410129414531797962094797816435375964751540092) x560) (< x344 x608) (= (x418 1 x273) x263) (= (x418 4294967295 x555) x147) (<= x575 127) (= false x441) (= x574 (+ x581 1)) (= x385 (x503 x107))) (= x344 x214)) (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x45) (>= 1461501637330902918203684832716283019655932542975 x634) (<= 1 x354) (= x327 5) (>= 1461501637330902918203684832716283019655932542975 x107) (<= 0 x548) (= x64 x107) (<= 0 x634) (= x1 false) (<= x116 1461501637330902918203684832716283019655932542975) (= x227 false) (= x72 false) (>= 1461501637330902918203684832716283019655932542975 x628) x71 (= 1642477181 x246) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x457) (>= 1461501637330902918203684832716283019655932542975 x372) (= false x306) (= x426 68) (<= 0 x378) (<= x334 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x498 98298139780651710009176378764859410129414531797962094797816435375964751540092) x310) (<= x378 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= true x183) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x528) (>= x622 0) (>= x107 1) (<= 0 x116) (= x613 4) (= false x212) (<= x97 4294967295) (<= 0 x628) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x508) (= false x259) (>= x457 0) (<= x205 127) (>= x372 0) (= x354 (x503 x107)) (>= x508 0) (= x597 false) (= x214 x508) (= x315 false) (<= x622 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= false x507) (= x71 (> (x503 x107) 0)) (>= x528 0) (<= x310 4) (= x120 x334) (<= x205 127) (= x618 false) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x407) (>= x45 0) (= 1890728005 x534) (<= x548 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x334 0) (>= x97 0) (>= x412 0) (>= x407 0) (= 3 x163) (<= x412 115792089237316195423570985008687907853269984665640564039457584007913129639935))) (and (=> (and (= (> x91 31) x449) (not x614)) (and (=> (not x449) x641) (=> (and (and (= (+ 416 x91) x20) (= (< 448 x20) x240)) x449) (and (=> x240 x128) (=> (not x240) x390))))) (=> x614 x641)))))
(assert (= 32 (x456 (x331 32 x583))))
(assert (x90 x365))
(assert (x90 x70))
(assert (x90 x202))
(assert (x90 x85))
(assert (x109 340282366920938463463374607431768211456 x365))
(assert (x109 32 (- x537 1)))
(assert (x90 x401))
(assert (= (and x4 x347) x48))
(assert (x90 x156))
(assert (x131 x229))
(assert (x199 1890728005))
(assert (x90 x9))
(assert (x90 x59))
(assert (x523 x238 x3))
(assert (= (or x8 x566) x547))
(assert (= x243 (and x82 (not x436))))
(assert (x29 x210))
(assert (x179 x74 4294967296))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x331 32 x33)))
(assert (x90 x446))
(assert (x159 31))
(assert (= x31 (or x411 x99)))
(assert (x90 x117))
(assert (x159 x221))
(assert (x90 x484))
(assert (x90 x325))
(assert (= (and x420 (not x162)) x191))
(assert (x220 18446744073709551616))
(assert (x90 x520))
(assert (x109 32 x540))
(assert (= x583 (x556 (x331 32 x583))))
(assert (x133 x374))
(assert (= x390 x641))
(assert (x90 x26))
(assert (= x40 (and x48 x278)))
(assert (x90 x32))
(assert (x220 x250))
(assert (x90 x118))
(assert (x220 x88))
(assert (x103 x6))
(assert (= x11 (=> (= (= (ite (> x49 31) 1 0) 1) x436) (and (=> (and x436 (and (= x465 (x418 115792089237316195423570985008687907853269984665640564039457584007913129639904 x49)) (= (x331 32 x583) x254) (= x150 (> x465 0)))) (and (=> x150 x122) (=> (and (and (= x254 x190) (= x564 32)) (not x150)) x244))) (=> (and (and (= x113 (= x49 0)) (or (and (= x238 0) x113) (and (and (= x238 x455) (= x455 (x78 x60)) (= (x293 (+ 32 x101)) x60)) (not x113)))) (not x436)) x381)))))
(assert (x90 x107))
(assert (x264 x604))
(assert (x220 (+ x145 31)))
(assert (= x532 (and x490 x610)))
(assert (x90 x429))
(assert (= (x464 (x289 64 x13 43465671953818058730967268728385526579518180683106539896923398506788491384179)) (x289 64 x13 43465671953818058730967268728385526579518180683106539896923398506788491384179)))
(assert (x90 x46))
(assert (= (and x28 x240) x132))
(assert (x90 x187))
(assert (x90 x338))
(assert (x103 x57))
(assert (x90 x497))
(assert (x103 x374))
(assert (x245 x308 18446744073709551616))
(assert (x103 4294967296))
(assert (x90 x555))
(assert (= (or x102 x31) x66))
(assert (x90 x152))
(assert (= (x464 1642477181) 0))
(assert (x90 x619))
(assert (< (x289 64 x168 x260) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (x464 x93) (x464 (+ x487 x93))))
(assert (not (x199 (x331 32 x33))))
(assert (x90 x613))
(assert (x90 x463))
(assert (x461 x481))
(assert (x95 x164))
(assert (x90 x298))
(assert (x90 x74))
(assert (x90 x84))
(assert (= 0 (x464 57896044618658097711785492504343953926634992332820282019728792003956564819967)))
(assert (x103 x14))
(assert (x109 32 x79))
(assert (= x625 (and (not x614) x154)))
(assert (x103 x481))
(assert (x179 x229 4294967296))
(assert (x131 x203))
(assert (x159 115792089237316195417293883273301227089774477609353836086818603170880863338495))
(assert (= x363 (=> (= x612 (not (< 480 x256))) (and x494 x612))))
(assert (= (ite (> 256 x621) (x136 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x50 2 x621)) 0) (x629 115792089237316195423570985008687907853269984665640564039457584007913129639935 x621)))
(assert (= x627 (and x82 x436)))
(assert (x220 (x50 2 x341)))
(assert (not (x199 (x289 64 x13 43465671953818058730967268728385526579518180683106539896923398506788491384179))))
(assert (x90 x182))
(assert (= x478 (and x635 x291)))
(assert (x90 x329))
(assert (x90 x342))
(assert (x585 x76))
(assert (= (x464 1461501637330902918203684832716283019655932542975) 0))
(assert (x103 x203))
(assert (x159 340282366841710300949110269838224261120))
(assert (x109 8 x375))
(assert (x179 x49 32))
(assert (= (x289 64 x211 x22) (x464 (x289 64 x211 x22))))
(assert (x159 x238))
(assert (x90 x496))
(assert (x90 x77))
(assert (x159 115792089237316195423570985008687907852929702298798853738508473738074905378815))
(assert (x103 x229))
(assert (x90 x246))
(assert (x90 x531))
(assert (x199 4294967294))
(assert (x159 18446744073709551615))
(assert (x179 x502 32))
(assert (x245 (+ 31 x384) 32))
(assert (x199 6277101735386680763835789423207666416102355444464034512896))
(assert (x179 x76 340282366920938463463374607431768211456))
(assert (= 0 (x464 98298139780651710009176378764859410129414531797962094797816435375964751540092)))
(assert (x90 x646))
(assert (x361 x502))
(assert (x121 x79))
(assert (x90 x510))
(assert (x199 115792089237316195423570985008687907853269984665640564039457584007913129639934))
(assert (x90 x341))
(assert (x90 x518))
(assert (= (x464 x61) (x464 (+ x274 x61))))
(assert (x199 43465671953818058730967268728385526579518180683106539896923398506788491384179))
(assert (x90 x138))
(assert (x131 x414))
(assert (x159 x140))
(assert (= (and x194 x532) x291))
(assert (x90 x437))
(assert (x90 x256))
(assert (x103 x164))
(assert (x103 79228162514264337593543950336))
(assert (x179 x57 4294967296))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x289 64 x211 x22)))
(assert (x90 x157))
(assert (x90 x344))
(assert (x133 x283))
(assert (= x171 (=> (= (not (< 1 x451)) x345) (and (=> (and (= (x35 98298139780651710009176378764859410129414531797962094797816435375964751540092) x219) (= x314 (x483 x172)) (<= x329 4294967294) (= (x35 98298139780651710009176378764859410129414531797962094797816435375964751540092) x336) (>= x129 1) (= x395 (+ x340 x388)) (= (x35 x172) x76) (= x586 (* x129 79228162514264337593543950336)) (= (x136 x250 79228162514264337593543950336) x229) (= (+ x518 x297) x172) (= (x418 115792089237316195423570985008687907852929702298798853738508473738074905378815 x76) x257) (= x329 (x418 4294967295 x229)) (= x340 (* 340282366920938463463374607431768211456 x365)) (= x80 (+ x257 x586)) (= (x399 (* 3 x13)) x518) (= (x418 115792089237316195417293883273301227089774477609353836086818603170880863338495 x314) x388) (>= x336 1) (> x219 x13) (> x336 x13) (>= x219 1) (= x129 (+ x451 x329)) (>= 4294967295 x129) (= (x331 32 98298139780651710009176378764859410129414531797962094797816435375964751540092) x297) (= (x35 x119) x250) (= (x418 18446744073709551615 x481) x365)) x18) x345))))
(assert (= (=> (and (= (* x49 8) x621) (= (ite (<= x553 1) x279 (x552 x553 x65)) x446) (= x3 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x400)) (= (x418 x238 x3) x553) (= x65 (* x49 2)) (= (x629 115792089237316195423570985008687907853269984665640564039457584007913129639935 x621) x400) (= (x293 (+ x65 x553)) x279) (<= 1 x400)) x38) x381))
(assert (x103 x555))
(assert (x220 (+ x49 31)))
(assert (= (and x625 (not x449)) x416))
(assert (x90 x369))
(assert (x179 x414 4294967296))
(assert (x90 x487))
(assert (x90 x601))
(assert (x179 x273 2))
(assert (x90 x307))
(assert (x220 x559))
(assert (x90 x203))
(assert (= x260 (x92 (x289 64 x168 x260))))
(assert (= x38 (=> (= (not (> x451 1)) x561) (and x561 (=> (and (>= x96 1) (= x324 (* x410 79228162514264337593543950336)) (<= 1 x410) (= (+ x180 x405) x21) (< x13 x96) (= (x331 32 98298139780651710009176378764859410129414531797962094797816435375964751540092) x405) (= (+ x463 x451) x410) (= (x136 x130 79228162514264337593543950336) x46) (= (x355 98298139780651710009176378764859410129414531797962094797816435375964751540092) x419) (= (x454 x21) x232) (<= 1 x419) (<= x410 4294967295) (= (x418 4294967295 x46) x463) (= (x355 98298139780651710009176378764859410129414531797962094797816435375964751540092) x96) (= x130 (x355 x640)) (= (x418 115792089237316195423570985008687907852929702298798853738508473738074905378815 x620) x645) (= x620 (x355 x21)) (= x187 (x418 18446744073709551615 x481)) (= x56 (+ x645 x324)) (= (* x187 340282366920938463463374607431768211456) x108) (<= x463 4294967294) (= x158 (x418 115792089237316195417293883273301227089774477609353836086818603170880863338495 x232)) (> x419 x13) (= (x399 (* 3 x13)) x180) (= (+ x108 x158) x37)) x18)))))
(assert (x121 144))
(assert (x159 x164))
(assert (x29 x140))
(assert (< 10000 (x331 32 x33)))
(assert (x199 79228162514264337593543950336))
(assert (< 10000 (x289 64 x13 43465671953818058730967268728385526579518180683106539896923398506788491384179)))
(assert (= (and x422 x403) x284))
(assert (x90 x480))
(assert (x90 x195))
(assert (x125 x271))
(assert (x90 x501))
(assert (x90 x397))
(assert (= (x464 43465671953818058730967268728385526579518180683106539896923398506788491384179) 0))
(assert (x103 x210))
(assert (= 64 (x456 (x289 64 x13 43465671953818058730967268728385526579518180683106539896923398506788491384179))))
(assert (x220 x482))
(assert (x90 x126))
(assert (x523 x571 x497))
(assert (x90 x324))
(assert (x90 x37))
(assert (x90 x384))
(assert (x90 x460))
(assert (= x424 (and x243 (not x113))))
(assert (= (x464 x170) (x464 (+ x567 x170))))
(assert (x199 3618502788666131106986593281521497120414687020801267626233049500247285301247))
(assert (x90 x632))
(assert (x90 x631))
(assert (x245 x559 4294967296))
(assert (= (and x627 (not x150)) x86))
(assert (x90 x129))
(assert (< 10000 (x289 64 x211 x22)))
(assert (x90 x219))
(assert (= x196 (and (not x408) x174)))
(assert (= (x331 32 x33) (x464 (x331 32 x33))))
(assert (x90 x112))
(assert (x103 x314))
(assert (x319 x49))
(assert (x103 x489))
(assert (x159 4294967295))
(assert (x90 x274))
(assert (x109 79228162514264337593543950336 x410))
(assert (x90 x91))
(assert (x220 (+ 31 x384)))
(assert (x90 x374))
(assert (= (x464 340282366920938463463374607431768211456) 0))
(assert (x159 x74))
(assert (x159 1461501637330902918203684832716283019655932542975))
(assert (x241 x314))
(assert (x90 x257))
(assert (x90 x87))
(assert (x90 x430))
(assert (= (x464 x492) (x464 (+ 1 x492))))
(assert (x90 x144))
(assert (x159 x314))
(assert (> (x331 32 x583) 10000))
(assert (x90 x439))
(assert (x90 x76))
(assert (=> (<= x107 10000) (= (x464 x107) 0)))
(assert (x109 8 x502))
(assert (x179 x210 128))
(assert (x90 x272))
(assert (x90 x502))
(assert (x220 x308))
(assert (=> (>= 10000 x501) (= (x464 x501) 0)))
(assert (x159 x114))
(assert (= (or x200 x424) x411))
(assert (= (x464 (+ 1 x525)) (x464 x525)))
(assert (x90 x604))
(assert (= (x456 (x289 64 x211 x22)) 64))
(assert (x109 2 x49))
(assert (x199 115792089237316195417293883273301227089774477609353836086818603170880863338495))
(assert (x90 x649))
(assert (= (x464 x405) (x464 (+ x405 x180))))
(assert (not (x199 (x331 32 x583))))
(assert (x90 x650))
(assert (x90 x24))
(assert (< (x331 32 98298139780651710009176378764859410129414531797962094797816435375964751540092) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x220 79228162514264337593543950336))
(assert (x90 x314))
(assert (x199 98298139780651710009176378764859410129414531797962094797816435375964751540092))
(assert (= (and x350 x332) x639))
(assert (x121 x600))
(assert (x109 2 x502))
(assert (= x281 (and (not x635) x291)))
(assert (x159 x273))
(assert (x90 x160))
(assert (and (= 81 (x458 27 3)) (= (x458 9 9) 81) (= (x458 9 3) 27) (= 9 (x458 3 3))))
(assert (= (x464 6277101735386680763835789423207666416102355444464034512896) 0))
(assert (x121 x451))
(assert (x159 x229))
(assert (= x28 (and x625 x449)))
(assert (x179 x6 4294967296))
(assert (x90 x3))
(assert (x90 x168))
(assert (x103 x26))
(assert (= x122 (=> (and (= x520 (x78 x434)) (= x349 (+ x254 1)) (= (not (< 32 x465)) x276) (= (x293 (+ 32 x101)) x434)) (and x276 (=> (and (= x190 x349) (= x564 64)) x244)))))
(assert (= 0 (x464 3618502788666131106986593281521497120414687020801267626233049500247285301247)))
(assert (x90 x582))
(assert (x90 x180))
(assert (x245 x88 6277101735386680763835789423207666416102355444464034512896))
(assert (x90 x354))
(assert (= (and x403 (not x422)) x479))
(assert (x90 x250))
(assert (x159 x203))
(assert (= (and x515 x364) x299))
(assert (x90 x226))
(assert (x90 x375))
(assert (x90 x261))
(assert (= x22 (x92 (x289 64 x211 x22))))
(assert (= (x464 (x289 64 x168 x260)) (x289 64 x168 x260)))
(assert (x131 x369))
(assert (x125 x14))
(assert (x90 x233))
(assert (x131 x74))
(assert (= (and x188 x323) x566))
(assert (x90 x620))
(assert (= x420 (or x40 x623)))
(assert (x90 x594))
(assert (x245 x482 79228162514264337593543950336))
(assert (x90 x571))
(assert (x179 x314 6277101735386680763835789423207666416102355444464034512896))
(assert (= (=> (and (= x236 (+ 1 x525)) (= (not (< x236 x248)) x294)) (and x337 x294)) x545))
(assert (x90 x197))
(assert (x220 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (x159 x6))
(assert (x159 x497))
(assert (x90 x442))
(assert (x179 x620 79228162514264337593543950336))
(assert (= true x154))
(assert (= x200 (and x243 x113)))
(assert (x179 x271 1461501637330902918203684832716283019655932542976))
(assert (x245 (+ x502 31) 32))
(assert (x199 4294967296))
(assert (= (x464 18446744073709551616) 0))
(assert (x159 x571))
(assert (x90 x115))
(assert (x159 x210))
(assert (x90 x539))
(assert (x199 57896044618658097711785492504343953926634992332820282019728792003956564819967))
(assert (x159 x232))
(assert (x220 x195))
(assert true)
(assert (= (=> (and (= (* 2 x49) x157) (= (+ 1 x157) x25)) x38) x242))
(assert (x90 x268))
(assert (x90 x559))
(assert (x179 x221 4294967296))
(assert (x220 32))
(assert (x90 x6))
(assert (x267 x613))
(assert (x133 x338))
(assert (= (=> (and (or (and x162 (and (= x341 (* 8 x272)) (= (x293 (+ x160 x148)) x531) (= (x418 31 x502) x272) (= (x357 x531) x571) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x629 115792089237316195423570985008687907853269984665640564039457584007913129639935 x341)) x497) (= x287 (x418 x571 x497)))) (not x162)) (= (> x502 x115) x162)) x207) x536))
(assert (x90 x336))
(assert (x90 x451))
(assert (x90 x560))
(assert (x90 x593))
(assert (= (x464 1890728005) 0))
(assert (x245 x195 18446744073709551616))
(assert (= (and x515 (not x364)) x174))
(assert (x90 x53))
(assert (=> (<= x168 10000) (= (x464 x168) 0)))
(assert (= (x464 (+ x346 x358)) (x464 x346)))
(assert (x241 x232))
(assert (x220 x130))
(assert (x220 (x50 2 x594)))
(assert (x90 x251))
(assert (x109 3 x600))
(assert (not (x199 (x289 64 x211 x22))))
(assert (x90 x20))
(assert (x90 x340))
(assert (x103 x74))
(assert (x103 18446744073709551616))
(assert (x90 x270))
(assert (x109 8 x272))
(assert (x149 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x50 2 x594)))
(assert (x90 x360))
(assert (= x18 (=> (and (and (= false x317) (= x153 x508) (= x208 x334) (= x644 68) (= x413 false)) (and (= x153 x600) (and (>= x442 1) (= (x418 4294967295 x369) x383) (= x321 (x418 4294967295 x489)) (= x437 (x339 (- x9 (mod (ite (< x16 32) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (>= x584 1) (= x111 false) (= (x136 x559 4294967296) x369) (= (x418 1 x374) x9) (= (x331 32 98298139780651710009176378764859410129414531797962094797816435375964751540092) x359) (= x300 false) (>= 127 x59) (= x484 (x136 x374 2)) (= (x302 x231) x374) (= x308 (x302 x492)) (= x32 (x418 4294967295 x203)) (= (+ x359 x258) x492) (= x517 (= x16 0)) (= x584 (x302 98298139780651710009176378764859410129414531797962094797816435375964751540092)) (= (x136 x308 18446744073709551616) x203) (= (x399 (* 3 x600)) x258) (>= 127 x59) (> x582 x600) (= x298 x600) (= x559 (x302 x492)) (< x600 x584) (= (ite (< 0 x9) x484 (x418 127 x484)) x16) (or (= x437 1) (= x437 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= x70 3930543824) (= x489 (x136 x482 79228162514264337593543950336)) (= x543 (x418 4294967295 x74)) (= x442 (x503 x107)) (= (x302 x492) x482) (= (x302 98298139780651710009176378764859410129414531797962094797816435375964751540092) x582) (= (x302 x492) x74) (= x231 (+ x492 1)) (>= x582 1) (= x182 x208)))) (and (=> x517 x217) (=> (and (not x517) (= (> x16 31) x422)) (and (=> (and x422 (and (= x256 (+ 416 x16)) (= x469 (> x256 448)))) (and (=> x469 x363) (=> (not x469) x494))) (=> (not x422) x217)))))))
(assert (= x216 (or x573 x239)))
(assert (x121 x13))
(assert (x179 x203 4294967296))
(assert (= 0 (x464 79228162514264337593543950336)))
(assert (x103 x49))
(assert (x90 x265))
(assert (x199 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (x90 x373))
(assert (x109 8 x49))
(assert (x90 x584))
(assert (= (x464 82185713109400095055331377371876241954396308028721386073307644494260448768274) 0))
(assert (x220 4294967296))
(assert (x90 x383))
(assert (x90 x43))
(assert (x159 x178))
(assert (x90 x611))
(assert (x159 x46))
(assert (x121 2))
(assert (= x8 (and x188 (not x323))))
(assert (x90 x467))
(assert (x90 x101))
(assert (< 10000 (x289 64 x168 x260)))
(assert (x121 x187))
(assert (x159 x502))
(assert (x121 x272))
(assert (x90 x564))
(assert (x179 x49 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x90 x607))
(assert (= (x556 (x289 64 x211 x22)) x211))
(assert (= (and x332 (not x350)) x491))
(assert (x103 32))
(assert (x103 x273))
(assert (= x83 (and x312 x387)))
(assert (= x128 (=> (= x223 (not (< 480 x20))) (and x223 x390))))
(assert (x90 x388))
(assert (x220 (+ 31 x495)))
(assert (x179 x26 128))
(assert (x90 x114))
(assert (x245 (+ 31 x145) 32))
(assert (x90 x192))
(assert (x103 x283))
(assert (x220 (x50 2 x87)))
(assert (x121 8))
(assert (x245 x611 79228162514264337593543950336))
(assert (x90 x569))
(assert (x121 x49))
(assert (x199 18446744073709551616))
(assert (x121 32))
(assert (x90 x229))
(assert (x121 x344))
(assert (= (=> (and (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x605) x114) (= x606 (x293 (+ x604 x539))) (= (x418 x638 x114) x604) (= x539 (* x502 2)) (= x605 (x629 115792089237316195423570985008687907853269984665640564039457584007913129639935 x594)) (= x594 (* x502 8)) (<= 1 x605) (= (ite (<= x604 1) x606 (x552 x604 x539)) x176)) x171) x524))
(assert (x90 x542))
(assert (x199 1461501637330902918203684832716283019655932542975))
(assert (x90 x176))
(assert (x90 x235))
(assert (x90 x575))
(assert (x90 x481))
(assert (x90 x495))
(assert (x109 340282366920938463463374607431768211456 x187))
(assert (= (=> (and (= (+ x270 1) x112) (= (* x502 2) x270)) x171) x207))
(assert (x267 x644))
(assert (x149 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x50 2 x341)))
(assert (x264 x539))
(assert (x179 x374 2))
(assert (x90 x395))
(assert (x90 x505))
(assert (x159 x369))
(assert (x90 x425))
(assert (= (and x174 x408) x377))
(assert (x90 x638))
(assert (not (x199 (x331 32 98298139780651710009176378764859410129414531797962094797816435375964751540092))))
(assert (x90 x605))
(assert (x179 x232 6277101735386680763835789423207666416102355444464034512896))
(assert (= x641 (=> (and (and (= x593 (x39 0)) (= false x52) (= 2 x529) (= x451 (x39 36)) (= x643 false) (<= x530 57896044618658097711785492504343953926634992332820282019728792003956564819967) (not (< x84 x118)) (= x607 x451) (>= 4294967294 x118) (<= 180 x530) (<= 1 x147) (= x328 false) (<= x451 4294967295) (= true x570) (<= x226 4294967294) (= x249 x13) (< x84 x147) (= (x39 4) x13) (>= 4294967295 x147) (= false x562) (>= x451 1) (= x73 (x39 68)) (= 0 x528) (>= 4294967294 x84) (= x53 x593) (= x7 false) (= x73 x360) (not (> x226 x84)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x13) (<= x73 18446744073709551615)) (and (= x628 x631) (and (= x622 x481) (and (= x362 false) (= x58 false) (>= x117 1) (= x152 (+ x73 4)) (= x251 (+ x384 x430)) (= x384 (x626 x152)) (>= 127 x453) (= (+ x152 31) x55) (= x43 x192) (= (x326 x107) x43) (= (+ 32 x152) x430) (= x271 (x498 82185713109400095055331377371876241954396308028721386073307644494260448768274)) (> x530 x55) (= x569 (x339 (- x631 x253))) (>= x384 144) (= (x503 x107) x117) (= (x143 x501) x41) (= x467 1890728005) (= (x418 1461501637330902918203684832716283019655932542975 x271) x253) (<= x384 618475290480) (= x628 x501) (= x249 x427) (= x235 82185713109400095055331377371876241954396308028721386073307644494260448768274) (= (< 0 x569) x610) (>= 127 x453) (not (< x530 x251)))))) (and (=> (and (and (= x373 (x339 (- x24 (mod (ite (< x495 32) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x15 128) x505) (<= 1 x619) (= (x399 (* x13 3)) x370) (< x13 x261) (<= x49 18446744073709551615) (< x13 x138) (<= x233 115792089237316195423570985008687907853269984665640564039457584007913129639904) (<= x348 x488) (= (x136 x198 79228162514264337593543950336) x221) (= (* x540 32) x77) (= (x399 (* 3 x13)) x487) (= x505 x439) (= x101 (+ 160 x77)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x101) (= x488 (* 32 x537)) (<= x101 115792089237316195423570985008687907853269984665640564039457584007913129639934) (<= 1 x138) (= x283 (x498 x583)) (= (x498 x438) x14) (= x438 (+ x551 2)) (= x138 (x498 98298139780651710009176378764859410129414531797962094797816435375964751540092)) (= x156 x631) (= x107 x228) (= x140 (x136 x283 2)) (= 144 x89) (= x649 (x293 (+ 32 x101))) (= x435 (x331 32 98298139780651710009176378764859410129414531797962094797816435375964751540092)) (= x588 0) (or (= x373 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 1 x373)) (= x572 (* 32 (- x537 1))) (> x650 x13) (<= 1 x650) (= x233 x348) (= (x289 64 x13 43465671953818058730967268728385526579518180683106539896923398506788491384179) x22) (= (+ x93 x487) x551) (= (x498 98298139780651710009176378764859410129414531797962094797816435375964751540092) x650) (= x261 (x498 98298139780651710009176378764859410129414531797962094797816435375964751540092)) (>= x554 1) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x101) (> x429 x13) (<= x537 3618502788666131106986593281521497120414687020801267626233049500247285301247) (< x572 x348) (= x93 (x331 32 98298139780651710009176378764859410129414531797962094797816435375964751540092)) (= x583 (x289 64 x211 x22)) (<= 1 x261) (= x49 (x568 x101)) (> x554 x101) (= (x418 1 x283) x24) (= x156 (x418 1461501637330902918203684832716283019655932542975 x14)) (= (x136 x88 6277101735386680763835789423207666416102355444464034512896) x164) (>= x537 0) (= (+ x370 x435) x640) (= (+ x384 160) x144) (>= x429 1) (= x447 x473) (= (x293 (+ (mod x488 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x293 (+ 32 x101)))) x554) (= x384 x447) (= (x498 98298139780651710009176378764859410129414531797962094797816435375964751540092) x429) (= x307 x233) (= (ite (> x24 0) x140 (x418 127 x140)) x495) (= x473 (* 144 x451)) (>= 255 x619) (= (x418 4294967295 x221) x211) (= (x498 x640) x198) (= (x136 (+ 31 x384) 32) x540) (= (x498 x551) x88) (= x194 (< 31 x495)) (= (x418 255 x164) x619)) x610) (and (=> (not x194) x11) (=> (and (and (= x274 (x136 (+ 31 x495) 32)) (= (ite (< x49 32) x61 x452) x525) (= (+ x61 x526) x452) (= (x331 32 x583) x61) (= x526 (x136 (+ x49 31) 32)) (= (+ x274 x61) x248) (= x635 (> x248 x525))) x194) (and (=> (not x635) x337) (=> x635 x545))))) (=> (and (not x610) (and (= x335 144) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x160) (= x346 (x331 32 98298139780651710009176378764859410129414531797962094797816435375964751540092)) (= (x339 (- x646 (mod (ite (< x145 32) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x105) (= (x293 (+ 32 x160)) x85) (= (x136 x611 79228162514264337593543950336) x57) (>= x304 1) (< x27 x590) (= (x418 1 x338) x646) (= (x498 x119) x611) (= x197 x265) (= (x343 128) x265) (= x338 (x498 x33)) (<= x398 115792089237316195423570985008687907853269984665640564039457584007913129639904) (<= 1 x592) (= (+ x346 x358) x119) (= (x399 (* 3 x13)) x358) (> x592 x13) (= x513 x384) (= x260 (x289 64 x13 43465671953818058730967268728385526579518180683106539896923398506788491384179)) (= 0 x30) (= (+ x397 160) x160) (= x513 x322) (= x33 (x289 64 x168 x260)) (= (+ x384 160) x268) (or (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x105) (= 1 x105)) (= (x293 (+ (x293 (+ x160 32)) (mod x296 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x304) (= (< 31 x145) x350) (= x398 x642) (= x168 (x418 4294967295 x57)) (> x601 x13) (= x592 (x498 98298139780651710009176378764859410129414531797962094797816435375964751540092)) (= x397 (* x542 32)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x160) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x160) (= x26 (x136 x338 2)) (= x296 (* x79 32)) (= x145 (ite (> x646 0) x26 (x418 127 x26))) (= (x136 (+ 31 x384) 32) x542) (= x27 (* 32 (- x79 1))) (= (x213 x160) x502) (<= x502 18446744073709551615) (= (x498 98298139780651710009176378764859410129414531797962094797816435375964751540092) x601) (<= 0 x79) (= x17 x107) (< x160 x304) (>= x601 1) (= (* 144 x451) x322) (<= x590 x296) (>= 3618502788666131106986593281521497120414687020801267626233049500247285301247 x79) (= x398 x590))) (and (=> (not x350) x19) (=> (and x350 (and (= x371 (+ x170 x535)) (= x567 (x136 (+ x145 31) 32)) (= (x331 32 x33) x170) (= (x136 (+ 31 x502) 32) x535) (= x62 (> x443 x185)) (= (ite (< x502 32) x170 x371) x185) (= x443 (+ x567 x170)))) (and (=> x62 x81) (=> (not x62) x218)))))))))
(assert (x90 x592))
(assert (= (and (not x367) x196) x519))
(assert (x179 x283 2))
(assert (x90 x554))
(assert (x159 x414))
(assert (x90 x49))
(assert (x90 x210))
(assert (x179 x164 256))
(assert (= (x464 (+ 1 x254)) (x464 x254)))
(assert (x245 x374 2))
(assert (= x599 (or x281 x478)))
(assert (x245 x250 79228162514264337593543950336))
(assert (x90 x530))
(assert (= x366 (or (and (not x469) x284) x67)))
(assert (= 0 (x464 4294967294)))
(assert (x199 4294967295))
(assert (not (x199 (x289 64 x168 x260))))
(assert (x245 x198 79228162514264337593543950336))
(assert (x648 x604 x539))
(assert (x90 x489))
(assert (x179 x555 4294967296))
(assert (x90 x186))
(assert (= x99 (or x450 x83)))
(assert (x90 x642))
(assert (x90 x221))
(assert (= (ite (< x341 256) (x136 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x50 2 x341)) 0) (x629 115792089237316195423570985008687907853269984665640564039457584007913129639935 x341)))
(assert (x90 x513))
(assert (x179 x502 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x90 x130))
(assert (x199 340282366920938463463374607431768211456))
(assert (x121 (- x537 1)))
(assert (x90 x189))
(assert (x90 x409))
(assert (x109 32 (- x79 1)))
(assert (x103 2))
(assert (x90 x253))
(assert (x121 x502))
(assert (= 0 (x464 618475290480)))
(assert (x179 x14 1461501637330902918203684832716283019655932542976))
(assert (x159 x484))
(assert (= (x464 x63) (x464 (+ 1 x63))))
(assert (x245 (+ 31 x495) 32))
(assert (x90 x88))
(assert (x159 x342))
(assert (x131 x57))
(assert (x159 x283))
(assert (= (x464 (+ x435 x370)) (x464 x435)))
(assert (= 64 (x456 (x289 64 x168 x260))))
(assert (x199 1642477181))
(assert (x90 x516))
(assert (x90 x258))
(assert (= (x556 (x331 32 x33)) x33))
(assert (= (=> (and (= false x579) (= x201 false) (= x396 (not x2)) (= x2 (= 4 x69)) (= x356 false) (= false x104) (= 4 x541)) x396) x54))
(assert (x169 x620))
(assert (= (x92 (x289 64 x13 43465671953818058730967268728385526579518180683106539896923398506788491384179)) 43465671953818058730967268728385526579518180683106539896923398506788491384179))
(assert (= (x464 (x331 32 x583)) (x331 32 x583)))
(assert (x90 x586))
(assert (x90 x567))
(assert (= (x464 (+ x535 x170)) (x464 x170)))
(assert (x90 x321))
(assert (= x269 (and x420 x162)))
(assert (x199 82185713109400095055331377371876241954396308028721386073307644494260448768274))
(assert (= (and x284 x469) x67))
(assert (x159 x3))
(assert (x159 x271))
(assert (= x312 (or x86 x316)))
(assert (x90 x553))
(assert (= x82 (or x309 x599)))
(assert (= x19 (=> (= (= 1 (ite (< 31 x502) 1 0)) x347) (and (=> (and (and (= x278 (> x115 0)) (= x63 (x331 32 x33)) (= (x418 115792089237316195423570985008687907853269984665640564039457584007913129639904 x502) x115)) x347) (and (=> x278 x206) (=> (and (and (= 32 x148) (= x10 x63)) (not x278)) x536))) (=> (and (not x347) (and (= x323 (= x502 0)) (or (and (and (= x632 (x293 (+ 32 x160))) (= x277 (x357 x632)) (= x277 x638)) (not x323)) (and (= 0 x638) x323)))) x524)))))
(assert (= (x464 115792089237316195423570985008687907853269984665640564039457584007913129639934) 0))
(assert (= (x464 (+ 1 x581)) (x464 x581)))
(assert (= (x456 (x331 32 98298139780651710009176378764859410129414531797962094797816435375964751540092)) 32))
(assert (x90 x178))
(assert (x220 2))
(assert (x199 618475290480))
(assert (x585 x620))
(assert (x199 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x220 x273))
(assert (x90 x96))
(assert (x121 79228162514264337593543950336))
(assert (x90 x447))
(assert (x90 x145))
(assert (= (and x490 (not x610)) x332))
(assert (= (x464 3930543824) 0))
(assert (x103 x271))
(assert (x159 x76))
(assert (x90 x80))
(assert (= (and x639 (not x62)) x573))
(assert (x90 x277))
(assert (x90 x263))
(assert (x90 x279))
(assert (x90 x181))
(assert (x90 x13))
(assert (x179 x140 128))
(assert (x245 (+ 31 x49) 32))
(assert (= (ite (> 256 x594) (x136 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x50 2 x594)) 0) (x629 115792089237316195423570985008687907853269984665640564039457584007913129639935 x594)))
(assert (= (and (not x278) x48) x623))
(assert (x90 x148))
(assert (x90 x310))
(assert (x90 x232))
(assert (x121 340282366920938463463374607431768211456))
(assert (x159 x374))
(assert (= x527 (and x367 x196)))
(assert (x159 x638))
(assert (x103 x221))
(assert (x523 x178 x342))
(assert (= 0 (x464 4294967296)))
(assert (x90 x414))
(assert (x131 x46))
(assert (x90 x65))
(assert (x131 x6))
(assert (x121 x537))
(assert (x90 x166))
(assert (x245 x283 2))
(assert (x90 x287))
(assert (x90 x465))
(assert (x159 255))
(assert (=> (<= x13 10000) (= (x464 x13) 0)))
(assert (x149 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x50 2 x87)))
(assert (x90 x540))
(assert (x199 3930543824))
(assert (x220 6277101735386680763835789423207666416102355444464034512896))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x331 32 x583)))
(assert (x319 x502))
(assert (x103 6277101735386680763835789423207666416102355444464034512896))
(assert (x90 x69))
(assert (x90 x73))
(assert (x159 x555))
(assert (x352 x314))
(assert (x90 x453))
(assert (x90 x419))
(assert (x121 x375))
(assert (x90 x509))
(assert (x90 x621))
(assert (x131 x489))
(assert (x179 x369 4294967296))
(assert (= x81 (=> (and (= x165 (not (< x47 x443))) (= x47 (+ 1 x185))) (and x218 x165))))
(assert (x103 x46))
(assert (x90 x358))
(assert (x264 x65))
(assert (x109 79228162514264337593543950336 x129))
(assert (x103 256))
(assert (x264 x553))
(assert (x220 x283))
(assert (x90 x14))
(assert (x109 32 x537))
(assert (x90 x211))
(assert (x90 x538))
(assert (x103 x338))
(assert (x220 x338))
(assert (x159 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x90 x600))
(assert (x90 x147))
(assert (= 0 (x464 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (x90 x410))
(assert (x245 x273 2))
(assert (x90 x535))
(assert (x267 x426))
(assert (= x217 x494))
(assert (x169 x76))
(assert (x90 x158))
(assert (x245 x460 4294967296))
(assert (= x239 (and x62 x639)))
(assert (< 10000 (x331 32 98298139780651710009176378764859410129414531797962094797816435375964751540092)))
(assert (= x450 (and (not x387) x312)))
(assert (x179 x232 340282366920938463463374607431768211456))
(assert (x90 x543))
(assert (= (and x627 x150) x316))
(assert (x90 x60))
(assert (not x106))
(assert (x133 x273))
(assert (= (=> (and (or (and x364 (= 4 x69)) (and (not x364) (and (or (and (not x408) (and (= (> x543 x182) x367) (or (and (= x69 2) x367) (and (not x367) (= x69 (ite (> x321 x182) 1 0)))))) (and (= 3 x69) x408)) (= (< x182 x383) x408)))) (= x364 (< x182 x32))) x54) x217))
(assert (x90 x55))
(assert (x90 x482))
(assert (= (x456 (x331 32 x33)) 32))
(assert (x109 3 x344))
(assert (x90 x400))
(assert (= (x464 (+ x359 x258)) (x464 x359)))
(assert (= (x464 (+ 1 x185)) (x464 x185)))
(assert (= 0 (x464 4294967295)))
(assert (x90 x398))
(assert (= x515 (or x479 x366 (and x66 x517))))
(assert (= (or x216 x491) x4))
(assert (x90 x16))
(assert (x90 x249))
(assert (x90 x608))
(assert (x121 x540))
(assert (x159 x338))
(assert (x179 x46 4294967296))
(assert (x90 x308))
(assert (x90 x238))
(assert (= (x556 (x289 64 x168 x260)) x168))
(assert (x179 x489 4294967296))
(assert (x103 x140))
(assert (x103 1461501637330902918203684832716283019655932542976))
(assert (x90 x283))
(assert (x179 x484 128))
(assert (x90 x602))
(assert (x159 1))
(assert (x159 x481))
(assert (x90 x57))
(assert (x90 x198))
(assert (x90 x164))
(assert (= (x464 x297) (x464 (+ x297 x518))))
(assert (x103 x76))
(assert (x523 x638 x114))
(assert (x220 x198))
(assert (x90 x385))
(assert (x90 x98))
(assert (x90 x304))
(assert (x179 x76 79228162514264337593543950336))
(assert (x159 x489))
(assert (x121 x542))
(assert (x29 x26))
(assert (x109 144 x451))
(assert (x159 x14))
(assert (x131 x221))
(assert (x90 x140))
(assert (x179 x314 340282366920938463463374607431768211456))
(assert (x90 x644))
(assert (= (x464 115792089237316195417293883273301227089774477609353836086818603170880863338495) 0))
(assert (= x309 (and x532 (not x194))))
(assert (= (=> (and (= (> x49 x465) x387) (or (and x387 (and (= (x78 x202) x178) (= (x418 31 x49) x375) (= x87 (* x375 8)) (= (x418 x178 x342) x425) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x629 115792089237316195423570985008687907853269984665640564039457584007913129639935 x87)) x342) (= (x293 (+ x564 x101)) x202))) (not x387))) x242) x244))
(assert (= x206 (=> (and (= (x357 x538) x393) (= (+ 1 x63) x472) (= (not (< 32 x115)) x288) (= x538 (x293 (+ x160 32)))) (and (=> (and (= 64 x148) (= x472 x10)) x536) x288))))
(assert (=> (>= 10000 x211) (= 0 (x464 x211))))
(assert (x90 x606))
(assert (x220 (+ x502 31)))
(assert (x103 x414))
(assert (x159 x620))
(assert (x103 x620))
(assert (= 0 (x464 18446744073709551615)))
(assert (= (x331 32 98298139780651710009176378764859410129414531797962094797816435375964751540092) (x464 (x331 32 98298139780651710009176378764859410129414531797962094797816435375964751540092))))
(assert (x121 3))
(assert (x103 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x90 x645))
(assert (= (x556 (x289 64 x13 43465671953818058730967268728385526579518180683106539896923398506788491384179)) x13))
(assert (= x576 (or (and (not x240) x28) x132)))
(assert (x90 x225))
(assert (x103 x502))
(assert (= (x464 (+ x61 x526)) (x464 x61)))
(assert (x90 x434))
(assert (< (x289 64 x13 43465671953818058730967268728385526579518180683106539896923398506788491384179) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x121 x365))
(assert (x179 x620 340282366920938463463374607431768211456))
(assert (= x337 x11))
(assert (x159 x26))
(assert (x352 x232))
(assert (x90 x205))
(assert (x103 128))
(assert (x90 x271))
(assert (x103 340282366920938463463374607431768211456))
(assert (x245 x130 79228162514264337593543950336))
(assert (= x102 (or x547 x36)))
(assert (= 0 (x464 115792089237316195423570985008687907852929702298798853738508473738074905378815)))
(assert (x90 x273))
(assert (x103 x369))
(assert (x90 x108))
(assert (x103 x232))
(assert (x90 x41))
(assert (x159 x57))
(assert (= 98298139780651710009176378764859410129414531797962094797816435375964751540092 (x556 (x331 32 98298139780651710009176378764859410129414531797962094797816435375964751540092))))
(assert (x648 x553 x65))
(assert (= (x629 115792089237316195423570985008687907853269984665640564039457584007913129639935 x87) (ite (< x87 256) (x136 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x50 2 x87)) 0)))
(assert (x90 x455))
(assert (= x19 x218))
(assert (x90 x393))
(assert (x109 32 x542))
(assert (x199 18446744073709551615))
(assert (= (x464 x292) (x464 (+ x292 x181))))
(assert (x159 127))
(assert (x245 x338 2))
(assert (= x403 (and x66 (not x517))))
(assert (x103 x484))
(assert (x220 x460))
(assert (= x175 (or x299 x519 x527 x377)))
(assert (x199 115792089237316195423570985008687907852929702298798853738508473738074905378815))
(assert (= (or x576 x416 (and x154 x614)) x490))
(assert (= x188 (and x4 (not x347))))
(assert (= (x464 115792089237316195423570985008687907853269984665640564039457584007913129639935) 0))
(assert (x149 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x50 2 x621)))
(assert (x90 x56))
(assert (x131 x555))
(assert (x179 x338 2))
(assert (x179 x481 18446744073709551616))
(assert (x361 x49))
(check-sat)
(exit)
