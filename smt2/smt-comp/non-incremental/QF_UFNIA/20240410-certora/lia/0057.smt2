(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Certora
Generated on: 2024-04-10
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x70 () Bool)
(declare-fun x822 () Bool)
(declare-fun x44 () Int)
(declare-fun x627 () Int)
(declare-fun x994 () Bool)
(declare-fun x650 () Bool)
(declare-fun x395 () Int)
(declare-fun x1077 () Int)
(declare-fun x427 () Int)
(declare-fun x79 () Bool)
(declare-fun x629 () Int)
(declare-fun x1130 () Int)
(declare-fun x860 () Int)
(declare-fun x967 () Int)
(declare-fun x185 () Bool)
(declare-fun x402 () Bool)
(declare-fun x1055 () Int)
(declare-fun x1035 () Int)
(declare-fun x1031 () Int)
(declare-fun x781 () Int)
(declare-fun x891 () Int)
(declare-fun x682 () Int)
(declare-fun x813 () Bool)
(declare-fun x596 () Int)
(declare-fun x368 () Bool)
(declare-fun x176 () Int)
(declare-fun x634 () Int)
(declare-fun x921 () Int)
(declare-fun x1002 () Int)
(declare-fun x440 () Bool)
(declare-fun x149 () Int)
(declare-fun x416 () Int)
(declare-fun x740 () Int)
(declare-fun x349 () Int)
(declare-fun x922 (Int Int) Bool)
(declare-fun x1154 () Int)
(declare-fun x220 () Int)
(declare-fun x83 () Bool)
(declare-fun x647 () Int)
(declare-fun x121 () Int)
(declare-fun x518 () Int)
(declare-fun x1137 () Bool)
(declare-fun x818 () Int)
(declare-fun x857 () Bool)
(declare-fun x523 () Int)
(declare-fun x770 () Int)
(declare-fun x555 () Bool)
(declare-fun x578 () Int)
(declare-fun x249 () Int)
(declare-fun x865 () Bool)
(declare-fun x193 () Int)
(declare-fun x483 () Int)
(declare-fun x512 () Int)
(declare-fun x491 () Int)
(declare-fun x640 () Int)
(declare-fun x470 () Int)
(declare-fun x829 () Int)
(declare-fun x1123 () Bool)
(declare-fun x476 () Bool)
(declare-fun x820 () Int)
(declare-fun x111 () Bool)
(declare-fun x910 (Int Int) Int)
(declare-fun x177 () Int)
(declare-fun x907 () Int)
(declare-fun x522 () Int)
(declare-fun x1146 () Int)
(declare-fun x1086 (Int) Int)
(declare-fun x172 () Int)
(declare-fun x738 () Int)
(declare-fun x623 () Int)
(declare-fun x275 () Int)
(declare-fun x362 () Int)
(declare-fun x735 () Int)
(declare-fun x117 () Bool)
(declare-fun x688 () Int)
(declare-fun x932 () Bool)
(declare-fun x727 () Int)
(declare-fun x168 () Int)
(declare-fun x1061 () Bool)
(declare-fun x289 () Int)
(declare-fun x356 () Bool)
(declare-fun x1156 () Int)
(declare-fun x141 () Int)
(declare-fun x950 () Int)
(declare-fun x775 () Bool)
(declare-fun x898 () Int)
(declare-fun x784 () Bool)
(declare-fun x407 () Int)
(declare-fun x1182 () Int)
(declare-fun x729 () Int)
(declare-fun x33 () Int)
(declare-fun x432 () Int)
(declare-fun x787 () Bool)
(declare-fun x119 () Int)
(declare-fun x315 () Int)
(declare-fun x664 () Int)
(declare-fun x749 () Int)
(declare-fun x754 () Int)
(declare-fun x525 () Int)
(declare-fun x48 () Int)
(declare-fun x413 () Bool)
(declare-fun x1202 () Bool)
(declare-fun x1079 () Int)
(declare-fun x687 () Int)
(declare-fun x942 () Int)
(declare-fun x583 () Int)
(declare-fun x720 () Int)
(declare-fun x479 () Int)
(declare-fun x372 () Int)
(declare-fun x1070 () Int)
(declare-fun x903 () Int)
(declare-fun x108 () Int)
(declare-fun x94 () Bool)
(declare-fun x836 () Int)
(declare-fun x684 () Int)
(declare-fun x595 () Int)
(declare-fun x474 () Bool)
(declare-fun x593 () Int)
(declare-fun x406 () Int)
(declare-fun x229 () Bool)
(declare-fun x244 () Bool)
(declare-fun x855 () Int)
(declare-fun x124 () Int)
(declare-fun x904 () Int)
(declare-fun x1011 (Int) Int)
(declare-fun x452 () Int)
(declare-fun x515 () Int)
(declare-fun x554 (Int) Bool)
(declare-fun x375 (Int) Int)
(declare-fun x174 () Int)
(declare-fun x962 () Int)
(declare-fun x982 () Int)
(declare-fun x196 () Bool)
(declare-fun x801 () Int)
(declare-fun x78 () Int)
(declare-fun x344 () Int)
(declare-fun x52 () Int)
(declare-fun x1066 () Bool)
(declare-fun x521 () Bool)
(declare-fun x74 () Int)
(declare-fun x768 () Int)
(declare-fun x114 () Bool)
(declare-fun x654 () Int)
(declare-fun x154 () Int)
(declare-fun x365 () Int)
(declare-fun x516 () Int)
(declare-fun x418 () Int)
(declare-fun x1131 () Int)
(declare-fun x130 () Int)
(declare-fun x371 () Bool)
(declare-fun x777 () Int)
(declare-fun x803 () Int)
(declare-fun x308 () Int)
(declare-fun x1019 () Int)
(declare-fun x316 () Int)
(declare-fun x653 () Int)
(declare-fun x702 () Int)
(declare-fun x138 () Int)
(declare-fun x100 () Int)
(declare-fun x446 (Int) Int)
(declare-fun x1127 () Int)
(declare-fun x297 () Bool)
(declare-fun x871 (Int) Int)
(declare-fun x156 () Int)
(declare-fun x642 () Int)
(declare-fun x464 () Bool)
(declare-fun x162 () Int)
(declare-fun x37 () Bool)
(declare-fun x576 () Int)
(declare-fun x867 () Int)
(declare-fun x771 () Int)
(declare-fun x353 () Bool)
(declare-fun x1207 () Int)
(declare-fun x191 () Int)
(declare-fun x161 (Int Int) Int)
(declare-fun x839 () Int)
(declare-fun x811 () Bool)
(declare-fun x908 () Int)
(declare-fun x1098 () Int)
(declare-fun x325 () Int)
(declare-fun x939 () Int)
(declare-fun x222 () Int)
(declare-fun x821 () Bool)
(declare-fun x3 () Bool)
(declare-fun x388 () Int)
(declare-fun x646 () Int)
(declare-fun x1078 () Bool)
(declare-fun x335 () Int)
(declare-fun x56 () Int)
(declare-fun x975 () Int)
(declare-fun x934 () Int)
(declare-fun x93 () Int)
(declare-fun x323 () Int)
(declare-fun x641 () Int)
(declare-fun x257 () Bool)
(declare-fun x21 () Bool)
(declare-fun x914 () Int)
(declare-fun x389 () Int)
(declare-fun x1180 () Int)
(declare-fun x1012 () Int)
(declare-fun x743 () Bool)
(declare-fun x158 () Int)
(declare-fun x1161 () Bool)
(declare-fun x212 () Int)
(declare-fun x658 () Int)
(declare-fun x965 () Int)
(declare-fun x230 () Int)
(declare-fun x590 () Bool)
(declare-fun x59 (Int) Int)
(declare-fun x475 () Int)
(declare-fun x933 () Bool)
(declare-fun x614 () Int)
(declare-fun x143 () Int)
(declare-fun x570 () Bool)
(declare-fun x991 () Int)
(declare-fun x1188 () Int)
(declare-fun x392 () Int)
(declare-fun x506 () Int)
(declare-fun x287 () Bool)
(declare-fun x1103 () Int)
(declare-fun x969 () Int)
(declare-fun x631 () Int)
(declare-fun x1169 () Bool)
(declare-fun x663 () Int)
(declare-fun x88 () Int)
(declare-fun x846 () Int)
(declare-fun x361 (Int Int Int Int Int) Int)
(declare-fun x210 () Bool)
(declare-fun x497 () Int)
(declare-fun x318 () Int)
(declare-fun x763 () Int)
(declare-fun x205 () Int)
(declare-fun x304 () Int)
(declare-fun x568 () Int)
(declare-fun x1152 (Int) Int)
(declare-fun x200 () Bool)
(declare-fun x1197 () Int)
(declare-fun x370 () Bool)
(declare-fun x825 () Bool)
(declare-fun x367 () Int)
(declare-fun x32 () Bool)
(declare-fun x374 () Int)
(declare-fun x1071 () Int)
(declare-fun x983 () Int)
(declare-fun x758 () Bool)
(declare-fun x889 () Bool)
(declare-fun x85 () Int)
(declare-fun x831 () Bool)
(declare-fun x500 () Int)
(declare-fun x1162 () Int)
(declare-fun x366 () Bool)
(declare-fun x71 () Bool)
(declare-fun x1195 () Int)
(declare-fun x945 () Int)
(declare-fun x274 () Int)
(declare-fun x338 () Bool)
(declare-fun x618 () Int)
(declare-fun x952 () Int)
(declare-fun x779 () Int)
(declare-fun x1149 () Int)
(declare-fun x1016 () Int)
(declare-fun x597 () Int)
(declare-fun x598 () Bool)
(declare-fun x757 () Int)
(declare-fun x221 (Int) Int)
(declare-fun x486 () Bool)
(declare-fun x776 () Bool)
(declare-fun x253 () Int)
(declare-fun x935 () Int)
(declare-fun x19 () Bool)
(declare-fun x279 () Int)
(declare-fun x298 () Bool)
(declare-fun x426 () Bool)
(declare-fun x302 () Bool)
(declare-fun x797 () Int)
(declare-fun x194 () Bool)
(declare-fun x503 () Int)
(declare-fun x2 () Int)
(declare-fun x233 () Int)
(declare-fun x360 () Int)
(declare-fun x785 () Bool)
(declare-fun x326 () Int)
(declare-fun x656 () Int)
(declare-fun x940 () Int)
(declare-fun x617 () Int)
(declare-fun x946 () Bool)
(declare-fun x1114 () Bool)
(declare-fun x466 () Int)
(declare-fun x824 () Int)
(declare-fun x1143 () Bool)
(declare-fun x1087 () Int)
(declare-fun x152 () Int)
(declare-fun x1020 (Int Int) Int)
(declare-fun x677 () Bool)
(declare-fun x39 () Bool)
(declare-fun x134 () Int)
(declare-fun x1196 () Int)
(declare-fun x288 () Int)
(declare-fun x376 () Bool)
(declare-fun x125 () Bool)
(declare-fun x459 () Bool)
(declare-fun x1060 () Bool)
(declare-fun x454 () Int)
(declare-fun x726 () Int)
(declare-fun x47 () Int)
(declare-fun x1209 () Bool)
(declare-fun x562 () Int)
(declare-fun x651 () Int)
(declare-fun x1033 () Int)
(declare-fun x31 () Int)
(declare-fun x791 () Int)
(declare-fun x1210 () Int)
(declare-fun x381 () Bool)
(declare-fun x1164 () Int)
(declare-fun x1057 () Int)
(declare-fun x678 () Int)
(declare-fun x53 () Bool)
(declare-fun x580 () Bool)
(declare-fun x1185 () Int)
(declare-fun x484 () Int)
(declare-fun x692 () Int)
(declare-fun x104 () Bool)
(declare-fun x760 () Int)
(declare-fun x548 () Int)
(declare-fun x567 () Bool)
(declare-fun x425 () Int)
(declare-fun x211 () Int)
(declare-fun x765 () Int)
(declare-fun x662 () Int)
(declare-fun x866 (Int) Int)
(declare-fun x496 () Int)
(declare-fun x972 () Bool)
(declare-fun x706 () Int)
(declare-fun x1101 () Int)
(declare-fun x675 () Int)
(declare-fun x892 () Int)
(declare-fun x655 () Int)
(declare-fun x148 () Int)
(declare-fun x1064 () Int)
(declare-fun x700 () Bool)
(declare-fun x187 () Bool)
(declare-fun x1171 () Int)
(declare-fun x600 () Int)
(declare-fun x30 () Bool)
(declare-fun x1155 () Int)
(declare-fun x538 () Int)
(declare-fun x405 () Int)
(declare-fun x306 () Bool)
(declare-fun x378 () Int)
(declare-fun x586 () Int)
(declare-fun x411 () Int)
(declare-fun x1010 () Bool)
(declare-fun x458 () Int)
(declare-fun x535 () Bool)
(declare-fun x885 () Bool)
(declare-fun x387 () Int)
(declare-fun x968 () Int)
(declare-fun x166 () Int)
(declare-fun x628 () Int)
(declare-fun x137 () Int)
(declare-fun x861 () Int)
(declare-fun x703 () Int)
(declare-fun x766 () Int)
(declare-fun x357 () Int)
(declare-fun x65 () Bool)
(declare-fun x1025 () Int)
(declare-fun x4 () Int)
(declare-fun x673 () Int)
(declare-fun x171 () Int)
(declare-fun x639 (Int) Int)
(declare-fun x494 () Int)
(declare-fun x843 () Bool)
(declare-fun x695 () Int)
(declare-fun x877 () Int)
(declare-fun x272 () Int)
(declare-fun x773 () Int)
(declare-fun x6 (Int Int Int Int) Int)
(declare-fun x937 () Bool)
(declare-fun x806 () Int)
(declare-fun x180 () Int)
(declare-fun x29 () Int)
(declare-fun x13 (Int Int Int Int) Int)
(declare-fun x691 () Int)
(declare-fun x201 () Int)
(declare-fun x750 () Int)
(declare-fun x1084 () Int)
(declare-fun x546 () Int)
(declare-fun x874 () Bool)
(declare-fun x64 () Int)
(declare-fun x1172 () Int)
(declare-fun x1112 () Int)
(declare-fun x666 () Int)
(declare-fun x373 () Int)
(declare-fun x1085 () Int)
(declare-fun x443 () Bool)
(declare-fun x1176 () Int)
(declare-fun x913 () Int)
(declare-fun x1047 () Bool)
(declare-fun x363 () Int)
(declare-fun x160 (Int) Int)
(declare-fun x1151 () Int)
(declare-fun x271 () Bool)
(declare-fun x572 () Int)
(declare-fun x630 () Bool)
(declare-fun x840 () Bool)
(declare-fun x519 () Bool)
(declare-fun x1121 () Int)
(declare-fun x1190 () Int)
(declare-fun x545 () Int)
(declare-fun x246 () Int)
(declare-fun x408 () Int)
(declare-fun x415 () Int)
(declare-fun x203 () Bool)
(declare-fun x722 () Bool)
(declare-fun x1080 () Int)
(declare-fun x587 () Int)
(declare-fun x996 () Int)
(declare-fun x86 () Int)
(declare-fun x635 () Bool)
(declare-fun x602 () Int)
(declare-fun x126 () Int)
(declare-fun x680 () Int)
(declare-fun x434 () Int)
(declare-fun x251 () Bool)
(declare-fun x896 () Bool)
(declare-fun x206 () Int)
(declare-fun x127 () Int)
(declare-fun x944 () Int)
(declare-fun x992 () Int)
(declare-fun x321 () Bool)
(declare-fun x645 () Int)
(declare-fun x882 () Int)
(declare-fun x488 () Int)
(declare-fun x1150 () Bool)
(declare-fun x12 () Bool)
(declare-fun x236 () Int)
(declare-fun x101 () Bool)
(declare-fun x75 () Bool)
(declare-fun x912 (Int) Int)
(declare-fun x981 () Int)
(declare-fun x250 () Int)
(declare-fun x1173 () Int)
(declare-fun x990 () Bool)
(declare-fun x1017 () Int)
(declare-fun x527 () Int)
(declare-fun x633 () Int)
(declare-fun x260 () Int)
(declare-fun x214 () Int)
(declare-fun x419 () Int)
(declare-fun x354 () Int)
(declare-fun x971 () Bool)
(declare-fun x112 () Bool)
(declare-fun x510 (Int) Int)
(declare-fun x1030 () Int)
(declare-fun x683 () Bool)
(declare-fun x403 () Int)
(declare-fun x1141 () Int)
(declare-fun x1009 () Bool)
(declare-fun x807 () Bool)
(declare-fun x869 () Bool)
(declare-fun x509 () Int)
(declare-fun x1125 () Int)
(declare-fun x36 () Int)
(declare-fun x636 () Int)
(declare-fun x1178 () Bool)
(declare-fun x449 () Int)
(declare-fun x714 () Int)
(declare-fun x61 () Bool)
(declare-fun x300 () Int)
(declare-fun x529 () Bool)
(declare-fun x547 () Int)
(declare-fun x1001 () Int)
(declare-fun x573 () Bool)
(declare-fun x1133 (Int Int) Int)
(declare-fun x1053 () Bool)
(declare-fun x262 () Int)
(declare-fun x25 () Bool)
(declare-fun x409 () Int)
(declare-fun x679 (Int) Int)
(declare-fun x400 () Int)
(declare-fun x1177 () Int)
(declare-fun x584 () Bool)
(declare-fun x528 () Int)
(declare-fun x1088 () Int)
(declare-fun x826 () Int)
(declare-fun x601 () Bool)
(declare-fun x1191 () Int)
(declare-fun x1056 () Int)
(declare-fun x805 () Int)
(declare-fun x854 () Int)
(declare-fun x588 () Int)
(declare-fun x129 () Bool)
(declare-fun x1163 () Bool)
(declare-fun x208 () Bool)
(declare-fun x894 () Int)
(declare-fun x451 () Int)
(declare-fun x231 () Bool)
(declare-fun x385 () Int)
(declare-fun x1096 () Bool)
(declare-fun x293 () Bool)
(declare-fun x99 () Int)
(declare-fun x659 () Int)
(declare-fun x22 () Int)
(declare-fun x638 (Int) Int)
(declare-fun x463 () Int)
(declare-fun x383 () Bool)
(declare-fun x107 () Int)
(declare-fun x959 () Int)
(declare-fun x1059 () Int)
(declare-fun x816 () Int)
(declare-fun x198 () Int)
(declare-fun x1119 () Int)
(declare-fun x1142 () Bool)
(declare-fun x616 () Int)
(declare-fun x213 () Bool)
(declare-fun x609 () Int)
(declare-fun x163 () Bool)
(declare-fun x1183 () Bool)
(declare-fun x681 () Int)
(declare-fun x1204 () Int)
(declare-fun x1090 () Int)
(declare-fun x819 () Bool)
(declare-fun x340 () Bool)
(declare-fun x948 () Bool)
(declare-fun x936 () Int)
(declare-fun x286 () Int)
(declare-fun x424 () Int)
(declare-fun x118 () Int)
(declare-fun x798 () Bool)
(declare-fun x1189 () Bool)
(declare-fun x534 () Int)
(declare-fun x725 () Int)
(declare-fun x215 () Int)
(declare-fun x964 () Int)
(declare-fun x721 () Int)
(declare-fun x442 () Int)
(declare-fun x909 () Int)
(declare-fun x444 () Int)
(declare-fun x96 () Int)
(declare-fun x949 () Int)
(declare-fun x870 () Int)
(declare-fun x155 () Int)
(declare-fun x879 () Int)
(declare-fun x886 (Int) Int)
(declare-fun x369 () Int)
(declare-fun x1003 () Int)
(declare-fun x1175 () Bool)
(declare-fun x1058 () Int)
(declare-fun x665 () Int)
(declare-fun x918 () Int)
(declare-fun x924 () Int)
(declare-fun x737 () Int)
(declare-fun x998 () Int)
(declare-fun x795 () Int)
(declare-fun x810 () Int)
(declare-fun x859 () Bool)
(declare-fun x541 () Bool)
(declare-fun x893 () Int)
(declare-fun x958 () Int)
(declare-fun x364 () Int)
(declare-fun x612 () Int)
(declare-fun x514 () Int)
(declare-fun x1187 () Bool)
(declare-fun x841 () Int)
(declare-fun x307 () Int)
(declare-fun x505 () Int)
(declare-fun x291 () Int)
(declare-fun x50 () Bool)
(declare-fun x184 () Int)
(declare-fun x1045 () Int)
(declare-fun x182 () Int)
(declare-fun x352 () Int)
(declare-fun x327 () Int)
(declare-fun x84 () Bool)
(declare-fun x281 (Int) Int)
(declare-fun x919 () Bool)
(declare-fun x531 () Bool)
(declare-fun x472 (Int) Int)
(declare-fun x38 () Int)
(declare-fun x465 () Bool)
(declare-fun x469 () Int)
(declare-fun x1034 () Int)
(declare-fun x339 () Int)
(declare-fun x876 () Int)
(declare-fun x1068 () Int)
(declare-fun x1069 () Int)
(declare-fun x1004 () Int)
(declare-fun x1093 () Int)
(declare-fun x1024 () Int)
(declare-fun x830 (Int) Int)
(declare-fun x1075 () Int)
(declare-fun x980 () Int)
(declare-fun x712 () Int)
(declare-fun x277 () Int)
(declare-fun x1201 () Int)
(declare-fun x613 () Int)
(declare-fun x87 () Int)
(declare-fun x643 () Bool)
(declare-fun x1042 () Int)
(declare-fun x259 () Int)
(declare-fun x81 () Int)
(declare-fun x960 () Int)
(declare-fun x355 () Int)
(declare-fun x17 (Int Int Int Int Int Int Int Int) Int)
(declare-fun x1136 () Int)
(declare-fun x1120 () Int)
(declare-fun x858 () Int)
(declare-fun x350 () Int)
(declare-fun x888 (Int) Int)
(declare-fun x774 () Int)
(declare-fun x941 () Bool)
(declare-fun x881 () Int)
(declare-fun x542 () Int)
(declare-fun x468 () Int)
(declare-fun x878 () Int)
(declare-fun x120 () Int)
(declare-fun x1165 () Int)
(declare-fun x916 () Bool)
(declare-fun x1008 (Int) Int)
(declare-fun x455 () Int)
(declare-fun x428 () Bool)
(declare-fun x751 () Bool)
(declare-fun x938 () Int)
(declare-fun x672 () Int)
(declare-fun x848 () Bool)
(declare-fun x342 () Int)
(declare-fun x346 () Bool)
(declare-fun x11 () Bool)
(declare-fun x482 () Int)
(declare-fun x549 () Int)
(declare-fun x501 (Int Int) Int)
(declare-fun x73 () Int)
(declare-fun x204 () Int)
(declare-fun x963 () Int)
(declare-fun x689 () Int)
(declare-fun x1144 () Int)
(declare-fun x1158 () Int)
(declare-fun x328 () Int)
(declare-fun x423 () Int)
(declare-fun x845 () Bool)
(declare-fun x345 () Int)
(declare-fun x55 () Int)
(declare-fun x175 () Int)
(declare-fun x704 () Bool)
(declare-fun x814 () Int)
(declare-fun x697 () Bool)
(declare-fun x799 () Int)
(declare-fun x1110 () Bool)
(declare-fun x1 () Int)
(declare-fun x594 () Int)
(declare-fun x1073 () Int)
(declare-fun x632 () Bool)
(declare-fun x438 () Int)
(declare-fun x89 () Int)
(declare-fun x756 () Int)
(declare-fun x142 (Int Int Int Int Int Int) Int)
(declare-fun x625 () Int)
(declare-fun x450 () Bool)
(declare-fun x947 (Int) Int)
(declare-fun x611 () Bool)
(declare-fun x842 () Int)
(declare-fun x699 () Int)
(declare-fun x135 () Int)
(declare-fun x334 () Int)
(declare-fun x569 () Bool)
(declare-fun x146 () Int)
(declare-fun x574 () Int)
(declare-fun x832 () Bool)
(declare-fun x436 () Int)
(declare-fun x1048 () Int)
(declare-fun x1194 () Int)
(declare-fun x1097 (Int) Int)
(declare-fun x245 () Bool)
(declare-fun x493 () Int)
(declare-fun x439 () Bool)
(declare-fun x1082 () Int)
(declare-fun x844 () Bool)
(declare-fun x58 () Bool)
(declare-fun x782 () Int)
(declare-fun x218 () Int)
(declare-fun x815 () Int)
(declare-fun x809 () Int)
(declare-fun x24 () Int)
(declare-fun x693 () Int)
(declare-fun x585 () Bool)
(declare-fun x1046 () Int)
(declare-fun x159 () Int)
(declare-fun x694 () Int)
(declare-fun x1026 () Bool)
(declare-fun x1095 () Bool)
(declare-fun x993 () Int)
(declare-fun x1159 () Int)
(declare-fun x985 () Int)
(declare-fun x752 (Int Int Int) Int)
(declare-fun x23 () Int)
(declare-fun x1132 () Int)
(declare-fun x72 () Bool)
(declare-fun x41 () Int)
(declare-fun x1138 () Bool)
(declare-fun x197 () Int)
(declare-fun x823 () Int)
(declare-fun x263 () Int)
(declare-fun x747 () Int)
(declare-fun x1014 () Int)
(declare-fun x1006 () Int)
(declare-fun x954 () Int)
(declare-fun x467 () Bool)
(declare-fun x951 () Bool)
(declare-fun x292 () Int)
(declare-fun x1111 () Bool)
(declare-fun x997 () Bool)
(declare-fun x492 () Int)
(declare-fun x5 () Int)
(declare-fun x54 () Bool)
(declare-fun x1023 () Int)
(declare-fun x223 () Int)
(declare-fun x540 () Int)
(declare-fun x1166 () Int)
(declare-fun x755 () Int)
(declare-fun x202 () Int)
(declare-fun x701 () Int)
(declare-fun x767 () Int)
(declare-fun x283 () Int)
(declare-fun x106 () Bool)
(declare-fun x708 () Int)
(declare-fun x537 () Bool)
(declare-fun x1102 () Int)
(declare-fun x51 () Int)
(declare-fun x481 () Int)
(declare-fun x256 () Bool)
(declare-fun x312 () Bool)
(declare-fun x989 () Bool)
(declare-fun x414 () Int)
(declare-fun x761 () Int)
(declare-fun x668 () Int)
(declare-fun x897 (Int) Int)
(declare-fun x209 () Int)
(declare-fun x953 () Int)
(declare-fun x1065 () Int)
(declare-fun x970 () Bool)
(declare-fun x228 () Bool)
(declare-fun x928 () Bool)
(declare-fun x1160 () Int)
(declare-fun x783 () Int)
(declare-fun x1043 () Int)
(declare-fun x128 () Bool)
(declare-fun x728 () Int)
(declare-fun x207 () Int)
(declare-fun x435 () Int)
(declare-fun x417 () Int)
(declare-fun x1140 () Bool)
(declare-fun x900 () Bool)
(declare-fun x8 () Bool)
(declare-fun x513 () Bool)
(declare-fun x314 () Int)
(declare-fun x974 () Int)
(declare-fun x164 () Int)
(declare-fun x26 () Int)
(declare-fun x730 () Bool)
(declare-fun x67 () Int)
(declare-fun x999 () Int)
(declare-fun x1081 () Bool)
(declare-fun x46 () Int)
(declare-fun x199 () Bool)
(declare-fun x1206 () Int)
(declare-fun x219 () Int)
(declare-fun x786 () Int)
(declare-fun x1028 () Bool)
(declare-fun x744 () Int)
(declare-fun x851 () Int)
(declare-fun x957 () Bool)
(declare-fun x621 () Int)
(declare-fun x255 () Int)
(declare-fun x460 () Bool)
(declare-fun x719 () Bool)
(declare-fun x333 () Bool)
(declare-fun x671 () Int)
(declare-fun x984 () Int)
(declare-fun x217 () Int)
(declare-fun x98 () Int)
(declare-fun x359 () Int)
(declare-fun x35 () Int)
(declare-fun x144 () Bool)
(declare-fun x7 () Bool)
(declare-fun x895 () Int)
(declare-fun x430 () Int)
(declare-fun x178 () Int)
(declare-fun x234 () Int)
(declare-fun x1050 () Int)
(declare-fun x769 () Bool)
(declare-fun x66 () Int)
(declare-fun x309 () Int)
(declare-fun x1027 () Int)
(declare-fun x1107 () Int)
(declare-fun x524 () Int)
(declare-fun x764 () Bool)
(declare-fun x794 (Int) Int)
(declare-fun x652 () Int)
(declare-fun x429 () Bool)
(declare-fun x20 (Int) Int)
(declare-fun x979 () Int)
(declare-fun x563 () Int)
(declare-fun x248 () Int)
(declare-fun x1040 () Bool)
(declare-fun x225 () Int)
(declare-fun x920 () Bool)
(declare-fun x864 () Int)
(declare-fun x873 () Int)
(declare-fun x828 () Int)
(declare-fun x927 () Int)
(declare-fun x77 () Int)
(declare-fun x1203 () Bool)
(declare-fun x122 () Int)
(declare-fun x575 () Int)
(declare-fun x170 () Int)
(declare-fun x480 () Int)
(declare-fun x1179 () Int)
(declare-fun x243 () Int)
(declare-fun x132 () Int)
(declare-fun x739 () Int)
(declare-fun x862 () Int)
(declare-fun x657 () Bool)
(declare-fun x619 () Int)
(declare-fun x915 () Int)
(declare-fun x192 () Int)
(declare-fun x759 () Int)
(declare-fun x571 () Int)
(declare-fun x15 () Int)
(declare-fun x97 () Int)
(declare-fun x305 () Int)
(declare-fun x1029 () Int)
(declare-fun x276 () Int)
(declare-fun x532 () Int)
(declare-fun x319 () Int)
(declare-fun x499 () Bool)
(declare-fun x169 () Bool)
(declare-fun x264 () Bool)
(declare-fun x709 () Int)
(declare-fun x299 () Int)
(declare-fun x14 () Int)
(declare-fun x931 (Int Int) Int)
(declare-fun x917 () Int)
(declare-fun x332 () Int)
(declare-fun x1117 () Bool)
(declare-fun x322 () Int)
(declare-fun x267 () Bool)
(declare-fun x517 () Int)
(declare-fun x620 () Int)
(declare-fun x60 () Int)
(declare-fun x543 () Int)
(declare-fun x780 () Int)
(declare-fun x103 () Int)
(declare-fun x303 () Int)
(declare-fun x715 () Int)
(declare-fun x145 () Int)
(declare-fun x189 () Int)
(declare-fun x852 () Int)
(declare-fun x82 () Bool)
(declare-fun x195 () Int)
(declare-fun x147 () Int)
(declare-fun x589 () Int)
(declare-fun x686 () Int)
(declare-fun x883 () Int)
(declare-fun x605 () Int)
(declare-fun x330 () Int)
(declare-fun x216 () Bool)
(declare-fun x63 () Int)
(declare-fun x1062 () Int)
(declare-fun x899 () Bool)
(declare-fun x462 () Bool)
(declare-fun x817 () Int)
(declare-fun x929 () Int)
(declare-fun x254 () Int)
(declare-fun x294 () Int)
(declare-fun x1170 () Int)
(declare-fun x329 () Int)
(declare-fun x536 () Bool)
(declare-fun x716 (Int Int) Int)
(declare-fun x1013 () Bool)
(declare-fun x850 () Bool)
(declare-fun x626 () Int)
(declare-fun x511 () Int)
(declare-fun x280 () Int)
(declare-fun x556 () Bool)
(declare-fun x1105 () Int)
(declare-fun x868 () Int)
(declare-fun x498 () Bool)
(declare-fun x607 () Int)
(declare-fun x733 () Int)
(declare-fun x133 () Int)
(declare-fun x320 () Int)
(declare-fun x504 () Int)
(declare-fun x270 () Int)
(declare-fun x284 () Bool)
(declare-fun x564 () Int)
(declare-fun x457 () Int)
(declare-fun x324 () Int)
(declare-fun x530 () Bool)
(declare-fun x717 () Bool)
(declare-fun x520 () Int)
(declare-fun x901 () Int)
(declare-fun x422 () Bool)
(declare-fun x105 () Bool)
(declare-fun x1186 () Bool)
(declare-fun x310 () Int)
(declare-fun x1134 () Int)
(declare-fun x943 () Int)
(declare-fun x1036 () Int)
(declare-fun x1094 () Int)
(declare-fun x1041 () Int)
(declare-fun x139 (Int Int) Int)
(declare-fun x91 () Int)
(declare-fun x1039 () Int)
(declare-fun x1000 () Int)
(declare-fun x792 () Int)
(declare-fun x102 () Int)
(declare-fun x649 () Int)
(declare-fun x92 () Int)
(declare-fun x685 () Int)
(declare-fun x241 (Int) Int)
(declare-fun x90 () Int)
(declare-fun x40 () Int)
(declare-fun x906 () Bool)
(declare-fun x1167 () Int)
(declare-fun x1044 () Bool)
(declare-fun x1208 () Bool)
(declare-fun x27 () Int)
(declare-fun x240 () Int)
(declare-fun x489 (Int Int) Int)
(declare-fun x1007 (Int) Int)
(declare-fun x853 () Int)
(declare-fun x551 () Int)
(declare-fun x1051 () Int)
(declare-fun x748 () Bool)
(declare-fun x838 () Int)
(declare-fun x397 () Int)
(declare-fun x789 () Bool)
(declare-fun x875 () Int)
(declare-fun x1128 () Int)
(declare-fun x812 () Bool)
(declare-fun x421 (Int) Int)
(declare-fun x887 () Int)
(declare-fun x247 () Int)
(declare-fun x669 () Int)
(declare-fun x232 () Bool)
(declare-fun x42 () Bool)
(declare-fun x833 () Int)
(declare-fun x16 () Int)
(declare-fun x471 () Int)
(declare-fun x1099 () Int)
(declare-fun x746 () Int)
(declare-fun x80 () Int)
(declare-fun x351 () Bool)
(declare-fun x358 () Int)
(declare-fun x285 () Bool)
(declare-fun x553 () Int)
(declare-fun x1211 () Int)
(declare-fun x956 () Int)
(declare-fun x295 () Int)
(declare-fun x268 () Int)
(declare-fun x734 () Bool)
(declare-fun x926 () Int)
(declare-fun x336 () Bool)
(declare-fun x1126 () Int)
(declare-fun x1181 () Int)
(declare-fun x661 (Int) Int)
(declare-fun x837 () Int)
(declare-fun x1108 () Int)
(declare-fun x606 () Int)
(declare-fun x1037 () Bool)
(declare-fun x265 () Int)
(declare-fun x835 () Int)
(declare-fun x10 () Bool)
(declare-fun x123 () Int)
(declare-fun x741 () Int)
(declare-fun x711 () Int)
(declare-fun x736 (Int) Int)
(declare-fun x379 () Int)
(declare-fun x485 () Bool)
(declare-fun x1135 () Int)
(declare-fun x772 () Bool)
(declare-fun x453 () Int)
(declare-fun x637 (Int Int Int Int Int Int Int) Int)
(declare-fun x448 () Int)
(define-fun x604 ((x1153 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1153) (>= x1153 0)) x1153 (- x1153 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x269 ((x1153 Int)) Int (ite (and (< x1153 0) (>= x1153 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x1153 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1153))
(define-fun x615 ((x1153 Int)) Int (ite (and (>= x1153 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1153)) x1153 (ite (and (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1153) (> 231584178474632390847141970017375815706539969331281128078915168015826259279872 x1153)) (- x1153 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (>= x1153 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (< x1153 0)) (+ x1153 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x1133 x1153 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x599 ((x113 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x113) (<= 0 x113)))
(define-fun x1148 ((x113 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x113) (>= x113 0)))
(define-fun x577 ((x113 Int)) Bool (and (<= x113 1461501637330902918203684832716283019655932542975) (<= 0 x113)))
(define-fun x533 ((x113 Int)) Bool (and (= x113 (x910 115792089237316195423570985008687907853269984665640564039457584007913129639935 x113)) (= (x910 x113 115792089237316195423570985008687907853269984665640564039457584007913129639935) x113)))
(define-fun x1139 ((x113 Int)) Bool (and (= 0 (x910 x113 0)) (= 0 (x910 0 x113))))
(define-fun x849 ((x113 Int)) Bool (= (x910 x113 x113) x113))
(define-fun x238 ((x113 Int)) Bool (and (x533 x113) (x1139 x113) (x849 x113)))
(define-fun x690 ((x113 Int) (x235 Int)) Bool (= (x910 x235 x113) (x910 x113 x235)))
(define-fun x68 ((x113 Int) (x235 Int)) Bool (and (=> (>= x113 0) (>= x113 (x910 x113 x235))) (=> (<= 0 x235) (>= x235 (x910 x113 x235))) (>= (x910 x113 x235) 0)))
(define-fun x1199 ((x113 Int) (x235 Int)) Bool (and (x690 x113 x235) (x68 x113 x235)))
(define-fun x43 ((x113 Int)) Bool (= (x1133 x113 1461501637330902918203684832716283019655932542976) (x910 x113 1461501637330902918203684832716283019655932542975)))
(define-fun x582 ((x113 Int)) Bool (and (x43 x113) (x1199 x113 1461501637330902918203684832716283019655932542975)))
(define-fun x977 ((x113 Int) (x235 Int)) Bool (and (> x235 (x1133 x113 x235)) (>= (x1133 x113 x235) 0)))
(define-fun x558 ((x113 Int) (x235 Int)) Bool (=> (and (< 0 x235) (>= x113 0)) (= (> x235 x113) (= x113 (x1133 x113 x235)))))
(define-fun x796 ((x113 Int) (x235 Int)) Bool (=> (and (< 0 x235) (and (> (+ x235 x235) x113) (>= x113 x235))) (= (- x113 x235) (x1133 x113 x235))))
(define-fun x559 ((x113 Int) (x235 Int)) Bool (=> (< 0 x235) (= (+ (* (x139 x113 x235) x235) (x1133 x113 x235)) x113)))
(define-fun x186 ((x113 Int) (x235 Int)) Bool (and (x796 x113 x235) (x558 x113 x235) (x559 x113 x235) (x977 x113 x235)))
(define-fun x311 ((x113 Int)) Bool (= 0 (x1133 0 x113)))
(define-fun x57 ((x113 Int)) Bool (= 0 (x1133 x113 1)))
(define-fun x696 ((x113 Int)) Bool (= (x1133 x113 x113) 0))
(define-fun x404 ((x113 Int)) Bool (and (x57 x113) (x311 x113) (x696 x113)))
(define-fun x301 ((x113 Int)) Bool (= (x910 x113 255) (x1133 x113 256)))
(define-fun x557 ((x113 Int)) Bool (and (x301 x113) (x1199 x113 255)))
(define-fun x1083 ((x113 Int) (x235 Int)) Bool (=> (and (> x113 0) (< 0 x235)) (and (>= x113 (x139 x113 x235)) (>= (x139 x113 x235) 0))))
(define-fun x718 ((x113 Int) (x235 Int)) Bool (=> (and (and (<= 1 x235) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x235)) (and (< x113 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x113))) (and (< (x139 x113 x235) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= (x139 x113 x235) 0))))
(define-fun x961 ((x113 Int) (x235 Int)) Bool (=> (and (> x113 x235) (> x235 1)) (> x113 (x139 x113 x235))))
(define-fun x987 ((x113 Int) (x235 Int)) Bool (=> (and (< 0 x113) (> x235 0)) (= (= 0 (x139 x113 x235)) (< x113 x235))))
(define-fun x226 ((x113 Int) (x235 Int)) Bool (=> (and (< 0 x113) (< 0 x235)) (and (>= x113 (* x235 (x139 x113 x235))) (< (- x113 x235) (* x235 (x139 x113 x235))))))
(define-fun x1129 ((x113 Int) (x235 Int)) Bool (= (- x113 (x910 (- x235 1) x113)) (* (x139 x113 x235) x235)))
(define-fun x110 ((x113 Int) (x235 Int)) Bool (and (x987 x113 x235) (x718 x113 x235) (x1129 x113 x235) (x1083 x113 x235) (x961 x113 x235) (x226 x113 x235)))
(define-fun x173 ((x113 Int)) Bool (= 0 (x139 0 x113)))
(define-fun x502 ((x113 Int)) Bool (= (x139 x113 1) x113))
(define-fun x1147 ((x113 Int)) Bool (=> (not (= x113 0)) (= (x139 x113 x113) 1)))
(define-fun x313 ((x113 Int)) Bool (and (x502 x113) (x1147 x113) (x173 x113)))
(define-fun x290 ((x113 Int) (x235 Int)) Bool (= (* x235 x113) (x1020 x113 x235)))
(define-fun x800 ((x113 Int) (x235 Int)) Bool (and (= (x1020 (- x113 115792089237316195423570985008687907853269984665640564039457584007913129639936) x235) (- (* x113 x235) (* x235 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x1020 (- x113 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x235 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* x113 (- x235 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x235 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x1020 x113 (- x235 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* x113 (- x235 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x778 ((x113 Int) (x235 Int)) Bool (=> (and (> x235 0) (< 0 x113)) (= (= (x139 (x615 (x1020 x113 x235)) x113) x235) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x1020 x113 x235)))))
(define-fun x343 ((x113 Int) (x235 Int)) Bool (=> (and (not (= 0 x235)) (not (= 0 x113))) (and (= x235 (x139 (x1020 x113 x235) x113)) (= (x139 (x1020 x113 x235) x235) x113))))
(define-fun x393 ((x113 Int) (x235 Int)) Bool (=> (and (> x113 0) (> x235 0)) (= (> x235 (x139 115792089237316195423570985008687907853269984665640564039457584007913129639935 x113)) (> (x1020 x113 x235) 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x157 ((x113 Int) (x235 Int)) Bool (and (= (x615 (x1020 x113 x235)) (x615 (x1020 (- x113 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x235 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x615 (x1020 x113 (- x235 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x615 (x1020 x113 x235))) (= (x615 (x1020 (- x113 115792089237316195423570985008687907853269984665640564039457584007913129639936) x235)) (x615 (x1020 x113 x235)))))
(define-fun x1072 ((x113 Int) (x235 Int)) Bool (and (=> (and (and (<= x113 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x113 0)) (and (<= x235 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> x235 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (>= (x139 57896044618658097711785492504343953926634992332820282019728792003956564819968 x113) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x235)) (>= (x1020 x113 (- x235 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968)))) (=> (and (and (<= x235 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 0 x235)) (and (<= x113 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x113 0))) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x1020 x113 x235)) (<= x113 (x139 57896044618658097711785492504343953926634992332820282019728792003956564819967 x235)))) (=> (and (and (> x113 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x113 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x235) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x235))) (= (>= (x139 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x235)) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x113)) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x1020 (- x113 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x235 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (=> (and (and (< 0 x235) (<= x235 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x113) (<= x113 115792089237316195423570985008687907853269984665640564039457584007913129639935))) (= (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x1020 (- x113 115792089237316195423570985008687907853269984665640564039457584007913129639936) x235)) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x113) (x139 57896044618658097711785492504343953926634992332820282019728792003956564819968 x235))))))
(define-fun x45 ((x113 Int) (x235 Int)) Bool (and (x157 x113 x235) (x1072 x113 x235) (x393 x113 x235) (x343 x113 x235) (x800 x113 x235) (x778 x113 x235) (x290 x113 x235)))
(define-fun x742 ((x113 Int)) Bool (and (= 0 (x1020 x113 0)) (= (x1020 0 x113) 0)))
(define-fun x872 ((x113 Int)) Bool (and (= x113 (x1020 1 x113)) (= (x1020 x113 1) x113)))
(define-fun x386 ((x113 Int)) Bool (and (x742 x113) (x872 x113)))
(define-fun x151 ((x113 Int)) Bool (= (x615 x113) (+ (x1133 x113 32) (x910 x113 115792089237316195423570985008687907853269984665640564039457584007913129639904))))
(define-fun x394 ((x113 Int)) Bool (and (x1199 x113 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x151 x113)))
(define-fun x490 ((x113 Int)) Bool (= (x1133 x113 32) (x910 x113 31)))
(define-fun x856 ((x113 Int)) Bool (and (x490 x113) (x1199 x113 31)))
(define-fun x109 ((x113 Int) (x235 Int)) Bool (and (x961 x113 x235) (x226 x113 x235) (x1083 x113 x235) (x987 x113 x235) (x718 x113 x235)))
(define-fun x1193 ((x113 Int)) Bool (= (x1133 x113 26959946667150639794667015087019630673637144422540572481103610249216) (x910 x113 26959946667150639794667015087019630673637144422540572481103610249215)))
(define-fun x1198 ((x113 Int)) Bool (and (x1199 x113 26959946667150639794667015087019630673637144422540572481103610249215) (x1193 x113)))
(define-fun x1091 ((x113 Int) (x235 Int)) Bool (= (x1020 x235 x113) (x1020 x113 x235)))
(define-fun x1116 ((x113 Int) (x235 Int)) Bool (and (=> (and (> x235 0) (> x113 0)) (< 0 (x1020 x113 x235))) (=> (and (> 0 x113) (> x235 0)) (> 0 (x1020 x113 x235))) (=> (and (> 0 x235) (> x113 0)) (> 0 (x1020 x113 x235))) (=> (and (< x113 0) (< x235 0)) (> (x1020 x113 x235) 0))))
(define-fun x976 ((x113 Int) (x235 Int)) Bool (and (x1072 x113 x235) (x393 x113 x235) (x157 x113 x235) (x343 x113 x235) (x1091 x113 x235) (x1116 x113 x235) (x778 x113 x235)))
(define-fun x1018 ((x113 Int)) Bool (= (+ (x910 x113 115792089210356248756420345214020892766250353992003419616917011526809519390720) (x1133 x113 26959946667150639794667015087019630673637144422540572481103610249216)) (x615 x113)))
(define-fun x412 ((x113 Int)) Bool (and (x1018 x113) (x1199 x113 115792089210356248756420345214020892766250353992003419616917011526809519390720)))
(define-fun x95 ((x1076 Int)) Int (ite (< x1076 x783) (x1007 x1076) 0))
(define-fun x1049 ((x1076 Int)) Int (ite (> x967 x1076) (x1008 x1076) 0))
(define-fun x461 ((x1076 Int)) Int 0)
(define-fun x1032 ((x1076 Int)) Int (ite (< x1076 x458) (x59 x1076) 0))
(define-fun x622 ((x1076 Int)) Int (ite (and (<= 0 x1076) (> x458 x1076)) (x866 x1076) (x1032 x1076)))
(define-fun x1052 ((x1076 Int)) Int (ite (= x1076 x137) x824 (x421 x1076)))
(define-fun x401 ((x1076 Int)) Int (ite (= x612 x1076) x842 (x1052 x1076)))
(define-fun x167 ((x1076 Int)) Int (ite (= 128 x1076) x378 (x461 x1076)))
(define-fun x242 ((x1076 Int)) Int (ite (and (>= x1076 160) (> (+ 160 x378) x1076)) (x622 (- (+ x1076 x564) 160)) (x167 x1076)))
(define-fun x1067 ((x1076 Int)) Int (ite (= x259 x1076) 0 (x242 x1076)))
(define-fun x648 ((x1076 Int)) Int (ite (= 5 x1076) x494 (x1152 x1076)))
(define-fun x724 ((x1076 Int)) Int (ite (and (<= x763 x1076) (> (+ x307 x763) x1076)) (x622 (- (+ x1076 x99) x763)) (x1067 x1076)))
(define-fun x410 ((x1076 Int)) Int (ite (= x198 x1076) 84814075808141314178395468817534025465894426928601295766380145544921651250904 (x724 x1076)))
(define-fun x239 ((x1076 Int)) Int (ite (= x1076 x352) x130 (x410 x1076)))
(define-fun x560 ((x1076 Int)) Int (ite (= x1076 x602) x300 (x239 x1076)))
(define-fun x930 ((x1076 Int)) Int (ite (= x929 x1076) x397 (x560 x1076)))
(define-fun x1022 ((x1076 Int)) Int (ite (= x1076 x134) x921 (x930 x1076)))
(define-fun x790 ((x1076 Int)) Int (ite (= x1046 x1076) x212 (x1022 x1076)))
(define-fun x581 ((x1076 Int)) Int (ite (= x1166 x1076) x135 (x790 x1076)))
(define-fun x273 ((x1076 Int)) Int (ite (= x1076 x968) x86 (x581 x1076)))
(define-fun x431 ((x1076 Int)) Int (ite (= x1076 x1080) x46 (x273 x1076)))
(define-fun x116 ((x1076 Int)) Int (ite (= x1076 x596) x891 (x431 x1076)))
(define-fun x539 ((x1076 Int)) Int (ite (= x1076 x728) x782 (x116 x1076)))
(define-fun x863 ((x1076 Int)) Int (ite (= x1076 x763) x942 (x539 x1076)))
(define-fun x317 ((x1076 Int)) Int (ite (= x1149 x1076) 32523383700587834770323112271211932718128200013265661849047136999858837557784 (x863 x1076)))
(define-fun x181 ((x1076 Int)) Int (ite (= x453 x1076) x1094 (x317 x1076)))
(define-fun x552 ((x1076 Int)) Int (ite (= x1076 x678) x612 (x181 x1076)))
(define-fun x925 ((x1076 Int)) Int (ite (= x294 x1076) x118 (x552 x1076)))
(define-fun x676 ((x1076 Int)) Int (ite (= x388 x1076) 11307821214581659709333104004754678501295896940003961331978279688272766566400 (x925 x1076)))
(define-fun x153 ((x1076 Int)) Int (ite (= x877 x1076) 452312848583266388373324160190187140051835877600158453279131187530910662656 (x676 x1076)))
(define-fun x1192 ((x1076 Int)) Int (ite (= x572 x1076) x1077 (x153 x1076)))
(define-fun x890 ((x1076 Int)) Int (ite (= x481 x1076) x400 (x1192 x1076)))
(define-fun x827 ((x1076 Int)) Int (ite (= x1076 x532) x392 (x890 x1076)))
(define-fun x1145 ((x1076 Int)) Int (ite (= x108 x1076) 0 (x827 x1076)))
(define-fun x252 ((x1076 Int)) Int (ite (= x1076 x640) 10019309979067222254582373821846632475949454479833780424560900009889672200192 (x1145 x1076)))
(define-fun x566 ((x1076 Int)) Int (ite (= x1076 x623) x55 (x252 x1076)))
(define-fun x348 ((x1076 Int)) Int (ite (= x1076 x1134) x665 (x566 x1076)))
(define-fun x341 ((x1076 Int)) Int (ite (= x515 x1076) x854 (x348 x1076)))
(define-fun x1118 ((x1076 Int)) Int (ite (= x1090 x1076) x60 (x341 x1076)))
(define-fun x76 ((x1076 Int)) Int (ite (= x1076 x999) x767 (x1118 x1076)))
(define-fun x1021 ((x1076 Int)) Int (ite (= x1076 x372) x263 (x76 x1076)))
(define-fun x644 ((x1076 Int)) Int (ite (= x640 x1076) 0 (x1145 x1076)))
(define-fun x420 ((x1076 Int)) Int (ite (= x496 x1076) x55 (x644 x1076)))
(define-fun x660 ((x1076 Int)) Int (ite (= x1076 x631) x449 (x420 x1076)))
(define-fun x1122 ((x1076 Int)) Int (ite (= x606 x1076) x694 (x660 x1076)))
(define-fun x1124 ((x1076 Int)) Int (ite (= x1076 x1035) x425 (x1122 x1076)))
(define-fun x377 ((x1076 Int)) Int (x1049 x1076))
(define-fun x1063 ((x1076 Int)) Int (ite (= 0 x1076) x525 (x446 x1076)))
(define-fun x258 ((x1076 Int)) Int (ite (= x206 x1076) x525 (x1124 x1076)))
(define-fun x136 ((x1076 Int)) Int (ite (= x621 x1076) 11430537079145650693387304458692941425836787954612963690241153482819318579200 (x1145 x1076)))
(define-fun x456 ((x1076 Int)) Int (ite (= x1076 x875) x55 (x136 x1076)))
(define-fun x131 ((x1076 Int)) Int (ite (= x1076 x640) x159 (x456 x1076)))
(define-fun x296 ((x1076 Int)) Int (ite (= x1076 x155) 0 (x131 x1076)))
(define-fun x69 ((x1076 Int)) Int (ite (= x411 x1076) x980 (x296 x1076)))
(define-fun x1168 ((x1076 Int)) Int (ite (= x617 x1076) x907 (x69 x1076)))
(define-fun x793 ((x1076 Int)) Int (ite (= x1076 x218) x694 (x1168 x1076)))
(define-fun x802 ((x1076 Int)) Int (ite (= x985 x1076) x425 (x793 x1076)))
(define-fun x1054 ((x1076 Int)) Int (x95 x1076))
(define-fun x667 ((x1076 Int)) Int (ite (= 0 x1076) x583 (x736 x1076)))
(define-fun x526 ((x1076 Int)) Int (ite (= x1076 x247) x583 (x802 x1076)))
(define-fun x34 ((x1076 Int)) Int (ite (= x1076 x741) x549 (x1021 x1076)))
(define-fun x732 ((x1076 Int)) Int (ite x428 (x1021 x1076) (ite x50 (x76 x1076) (ite x885 (x1118 x1076) (ite x937 (x341 x1076) (x34 x1076))))))
(define-fun x380 ((x1076 Int)) Int (ite (= x288 x1076) x4 (x732 x1076)))
(define-fun x995 ((x1076 Int)) Int (ite x465 (x380 x1076) (x732 x1076)))
(define-fun x28 ((x1076 Int)) Int (ite (and (> (+ 32 x640) x1076) (<= x640 x1076)) (x661 (- x1076 x640)) (x995 x1076)))
(define-fun x723 ((x1076 Int)) Int (ite x21 (x28 x1076) (x995 x1076)))
(define-fun x473 ((x1076 Int)) Int (ite x1013 (x723 x1076) (ite x232 (ite x104 (x258 x1076) (x526 x1076)) (x1145 x1076))))
(define-fun x579 ((x1076 Int)) Int (ite (= x1076 x419) 53345939417071456220559631604471678769232717410092326094220293271952667181056 (x473 x1076)))
(define-fun x1200 ((x1076 Int)) Int (ite (= x1076 x56) x130 (x579 x1076)))
(define-fun x698 ((x1076 Int)) Int (ite (= x1167 x1076) x300 (x1200 x1076)))
(define-fun x973 ((x1076 Int)) Int (ite (= x417 x1076) x921 (x698 x1076)))
(define-fun x390 ((x1076 Int)) Int (ite (= x1076 x1027) x212 (x973 x1076)))
(define-fun x477 ((x1076 Int)) Int (ite (= x1076 x814) x135 (x390 x1076)))
(define-fun x398 ((x1076 Int)) Int (ite (= x1076 x766) x86 (x477 x1076)))
(define-fun x1113 ((x1076 Int)) Int (ite (= x1076 x1006) x46 (x398 x1076)))
(define-fun x804 ((x1076 Int)) Int (ite (= x330 x1076) x891 (x1113 x1076)))
(define-fun x1184 ((x1076 Int)) Int (ite (= x182 x1076) x1131 (x804 x1076)))
(define-fun x1174 ((x1076 Int)) Int (ite (= x222 x1076) x1093 (x1184 x1076)))
(define-fun x190 ((x1076 Int)) Int (ite (= x1076 x858) x307 (x1174 x1076)))
(define-fun x478 ((x1076 Int)) Int (ite (and (<= x1185 x1076) (< x1076 (+ x307 x1185))) (x622 (- (+ x1076 x99) x1185)) (x190 x1076)))
(define-fun x905 ((x1076 Int)) Int (ite (= x1076 x280) 0 (x478 x1076)))
(define-fun x1106 ((x1076 Int)) Int (ite (= x430 x1076) x270 (x905 x1076)))
(define-fun x808 ((x1076 Int)) Int (ite (= x1076 x1088) x936 (x1106 x1076)))
(define-fun x847 ((x1076 Int)) Int (ite (= x740 x1076) x671 (x808 x1076)))
(define-fun x1104 ((x1076 Int)) Int (ite (= x493 x1076) x939 (x847 x1076)))
(define-fun x115 ((x1076 Int)) Int (ite (= x1076 x868) x1136 (x1104 x1076)))
(define-fun x183 ((x1076 Int)) Int (ite (= x1076 x726) x887 (x115 x1076)))
(define-fun x487 ((x1076 Int)) Int (ite x1081 (x115 x1076) (ite x84 (x1104 x1076) (ite x832 (x847 x1076) (ite x825 (x808 x1076) (x183 x1076))))))
(define-fun x713 ((x1076 Int)) Int (ite (= x523 x1076) x913 (x487 x1076)))
(define-fun x140 ((x1076 Int)) Int (ite x383 (x713 x1076) (x487 x1076)))
(define-fun x911 ((x1076 Int)) Int (ite (and (< x1076 x419) (<= x419 x1076)) (x886 (- x1076 x419)) (x140 x1076)))
(define-fun x923 ((x1076 Int)) Int (ite x535 (x473 x1076) (x911 x1076)))
(define-fun x670 ((x1076 Int)) Int (ite x535 (x401 x1076) (x947 x1076)))
(define-fun x188 ((x1076 Int)) Int (ite (= x419 x1076) x307 (x923 x1076)))
(define-fun x1157 ((x1076 Int)) Int (ite (and (>= x1076 x915) (< x1076 (+ x307 x915))) (x622 (- (+ x1076 x99) x915)) (x188 x1076)))
(define-fun x608 ((x1076 Int)) Int (ite (= x1076 x488) 0 (x1157 x1076)))
(define-fun x902 ((x1076 Int)) Int (ite (= x612 x1076) x901 (x670 x1076)))
(define-fun x731 ((x1076 Int)) Int (ite (= x1076 x130) x803 (x902 x1076)))
(define-fun x49 ((x1076 Int)) Int (ite (and (> 0 x1076) (<= 0 x1076)) (x241 x1076) (x608 x1076)))
(define-fun x603 ((x1076 Int)) Int 0)
(define-fun x150 ((x1076 Int)) Int (ite x42 (x912 x1076) (x731 x1076)))
(define-fun x391 ((x1076 Int)) Int (ite (= x130 x1076) x363 (x150 x1076)))
(define-fun x550 ((x1076 Int)) Int (ite (= x612 x1076) x149 (x391 x1076)))
(define-fun x1089 ((x1076 Int)) Int (ite x129 (ite x464 (x150 x1076) (ite x798 (x670 x1076) (x550 x1076))) (x670 x1076)))
(define-fun x179 ((x1076 Int)) Int (ite x476 (ite x196 (x888 x1076) (x871 x1076)) (x1089 x1076)))
(define-fun x988 ((x1076 Int)) Int (ite x129 (ite x464 (ite x42 (x49 x1076) (x608 x1076)) (ite x798 (x608 x1076) (ite x42 (x49 x1076) (x608 x1076)))) (x608 x1076)))
(define-fun x396 ((x1076 Int)) Int (ite (= x607 x1076) x1071 (x988 x1076)))
(define-fun x495 ((x1076 Int)) Int (ite (= x1076 x349) x175 (x396 x1076)))
(define-fun x447 ((x1076 Int)) Int (ite (= x1076 x205) x666 (x495 x1076)))
(define-fun x884 ((x1076 Int)) Int (ite (= x571 x1076) x1056 (x447 x1076)))
(define-fun x834 ((x1076 Int)) Int (ite (and (<= 0 x1076) (> 32 x1076)) (x160 x1076) (x884 x1076)))
(define-fun x433 ((x1076 Int)) Int (ite (and (>= x1076 x205) (< x1076 x205)) (x472 (- x1076 x205)) (x988 x1076)))
(define-fun x1015 ((x1076 Int)) Int (ite (= x205 x1076) x904 (x433 x1076)))
(define-fun x441 ((x1076 Int)) Int (ite (and (> (+ x904 x563) x1076) (>= x1076 x563)) (x472 (- x1076 x563)) (x1015 x1076)))
(define-fun x508 ((x1076 Int)) Int (ite x476 (ite x196 (x834 x1076) (ite x194 (x433 x1076) (x441 x1076))) (x988 x1076)))
(define-fun x382 ((x1076 Int)) Int (ite (= x1076 x597) x291 (x508 x1076)))
(define-fun x165 ((x1076 Int)) Int (ite (= x597 x1076) x291 (x508 x1076)))
(define-fun x762 ((x1076 Int)) Int (ite x785 (x382 x1076) (x165 x1076)))
(define-fun x1100 ((x1076 Int)) Int (ite (= x597 x1076) 66559029714281558484110900056217435723262332508534932952963113331629997686784 (x762 x1076)))
(define-fun x745 ((x1076 Int)) Int (ite (= x1076 x709) x55 (x1100 x1076)))
(define-fun x282 ((x1076 Int)) Int (ite (= x914 x1076) x1130 (x745 x1076)))
(define-fun x624 ((x1076 Int)) Int (ite (= x1076 x612) x777 (x1089 x1076)))
(define-fun x507 ((x1076 Int)) Int (ite (= x1071 x1076) x534 (x624 x1076)))
(define-fun x705 ((x538 Int) (x733 Int) (x956 Int)) Bool (or (or (or (and (or (not (and (x922 x538 x733) (x922 x538 x956))) (or (x922 x956 x733) (x922 x733 x956))) (and (or (x922 x538 x956) (not (and (x922 x538 x733) (x922 x733 x956)))) (and (or (not (and (x922 x538 x733) (x922 x733 x538))) (= x538 x733)) (x922 x538 x538)))) (not (and (<= 0 x956) (>= 1461501637330902918203684832716283019655932542975 x956)))) (not (and (>= x733 0) (>= 1461501637330902918203684832716283019655932542975 x733)))) (not (and (<= x538 1461501637330902918203684832716283019655932542975) (>= x538 0)))))
(define-fun x62 ((x436 Int)) Bool (or (not (and (<= 0 x436) (<= x436 1461501637330902918203684832716283019655932542975))) (x922 x436 x1001)))
(define-fun x674 ((x364 Int) (x750 Int)) Bool (or (or (= 0 x750) (not (and (>= 1461501637330902918203684832716283019655932542975 x750) (>= x750 0))) (not (x922 x364 x750)) (= x750 x364) (not (= (x1011 x750) 0))) (not (and (<= 0 x364) (<= x364 1461501637330902918203684832716283019655932542975)))))
(define-fun x1038 ((x278 Int)) Bool (=> (and (>= 1461501637330902918203684832716283019655932542975 x278) (>= x278 0)) (x577 (x1011 x278))))
(define-fun x266 ((x89 Int)) Bool (or (not (and (<= x89 1461501637330902918203684832716283019655932542975) (>= x89 0))) (= (x1011 x89) 0) (x922 x1075 x89)))
(define-fun x347 () Bool (and (x705 x1075 x482 x1075) (x705 x1075 x774 x1075) (x705 x1075 x659 x1075)))
(define-fun x592 () Bool (and (x705 x1075 x482 x774) (x705 x1075 x774 x774) (x705 x1075 x482 x659) (x705 x1075 x659 x482) (x705 x1075 x659 x774) (x705 x1075 x482 x482) (x705 x1075 x659 x659) (x705 x1075 x774 x659) (x705 x1075 x774 x482)))
(define-fun x788 () Bool (and (x705 x1075 x1075 x774) (x705 x1075 x1075 x659) (x705 x1075 x1075 x482)))
(define-fun x1005 () Bool (and (x705 x1075 x1075 x482) (x705 x1075 x1075 x659) (x705 x1075 x1075 x774)))
(define-fun x591 () Bool (and (x705 x774 x659 x1075) (x705 x659 x482 x1075) (x705 x482 x482 x1075) (x705 x482 x659 x1075) (x705 x774 x774 x1075) (x705 x482 x774 x1075) (x705 x774 x482 x1075) (x705 x659 x774 x1075) (x705 x659 x659 x1075)))
(define-fun x986 () Bool (and (x705 x659 x1075 x1075) (x705 x482 x1075 x1075) (x705 x774 x1075 x1075)))
(define-fun x1092 () Bool (and (x705 x1075 x1075 x659) (x705 x1075 x1075 x774) (x705 x1075 x1075 x482)))
(define-fun x261 () Bool (and (x705 x774 x1075 x659) (x705 x774 x1075 x774) (x705 x482 x1075 x482) (x705 x482 x1075 x659) (x705 x659 x1075 x659) (x705 x482 x1075 x774) (x705 x659 x1075 x774) (x705 x774 x1075 x482) (x705 x659 x1075 x482)))
(define-fun x18 () Bool (and (x705 x482 x1075 x482) (x705 x659 x1075 x774) (x705 x774 x1075 x482) (x705 x482 x1075 x774) (x705 x659 x1075 x482) (x705 x482 x1075 x659) (x705 x774 x1075 x774) (x705 x774 x1075 x659) (x705 x659 x1075 x659)))
(define-fun x978 () Bool (and (x705 x659 x1075 x774) (x705 x774 x1075 x482) (x705 x774 x1075 x659) (x705 x482 x1075 x482) (x705 x482 x1075 x659) (x705 x659 x1075 x482) (x705 x659 x1075 x659) (x705 x482 x1075 x774) (x705 x774 x1075 x774)))
(define-fun x710 () Bool (and (x705 x1075 x659 x1075) (x705 x1075 x774 x1075) (x705 x1075 x482 x1075)))
(define-fun x9 () Bool (and (x705 x1075 x482 x1075) (x705 x1075 x774 x1075) (x705 x1075 x659 x1075)))
(define-fun x384 () Bool (and (x705 x1075 x659 x774) (x705 x1075 x659 x482) (x705 x1075 x482 x482) (x705 x1075 x774 x659) (x705 x1075 x774 x482) (x705 x1075 x482 x659) (x705 x1075 x659 x659) (x705 x1075 x774 x774) (x705 x1075 x482 x774)))
(define-fun x1205 () Bool (and (x705 x1075 x774 x482) (x705 x1075 x659 x482) (x705 x1075 x774 x659) (x705 x1075 x482 x482) (x705 x1075 x482 x774) (x705 x1075 x659 x774) (x705 x1075 x659 x659) (x705 x1075 x774 x774) (x705 x1075 x482 x659)))
(define-fun x544 () Bool (and (x705 x1075 x1075 x774) (x705 x1075 x1075 x659) (x705 x1075 x1075 x482)))
(define-fun x955 () Bool (and (x705 x1075 x482 x774) (x705 x1075 x774 x774) (x705 x1075 x659 x482) (x705 x1075 x774 x482) (x705 x1075 x482 x482) (x705 x1075 x659 x774) (x705 x1075 x774 x659) (x705 x1075 x659 x659) (x705 x1075 x482 x659)))
(define-fun x331 () Bool (and (x705 x1075 x482 x1075) (x705 x1075 x774 x1075) (x705 x1075 x659 x1075)))
(define-fun x437 () Bool (and (x705 x659 x482 x1075) (x705 x659 x659 x1075) (x705 x774 x774 x1075) (x705 x774 x482 x1075) (x705 x482 x482 x1075) (x705 x774 x659 x1075) (x705 x482 x774 x1075) (x705 x482 x659 x1075) (x705 x659 x774 x1075)))
(define-fun x337 () Bool (and (x705 x1075 x1075 x482) (x705 x1075 x1075 x774) (x705 x1075 x1075 x659)))
(define-fun x237 () Bool (and (x705 x482 x1075 x482) (x705 x659 x1075 x774) (x705 x774 x1075 x482) (x705 x659 x1075 x482) (x705 x482 x1075 x659) (x705 x659 x1075 x659) (x705 x774 x1075 x659) (x705 x482 x1075 x774) (x705 x774 x1075 x774)))
(define-fun x610 () Bool (and x978 x592 x955 x437 x9 x544 x261 x18 x384 x237 x591 x337 x788 x347 x710 x331 x986 x1005 x1092 x1205))
(define-fun x561 () Bool (x62 x1075))
(define-fun x1109 () Bool x561)
(define-fun x753 () Bool (and (x674 x1075 x659) (x674 x1075 x482) (x674 x1075 x774)))
(define-fun x1115 () Bool x753)
(define-fun x227 () Bool (and (x1038 x774) (x1038 x482) (x1038 x659)))
(define-fun x445 () Bool x227)
(define-fun x880 () Bool (and (x266 x482) (x266 x659) (x266 x774)))
(define-fun x707 () Bool (and (x266 x659) (x266 x482) (x266 x774)))
(define-fun x966 () Bool (and x707 x880))
(define-fun x399 ((x113 Int) (x235 Int) (x224 Int) (x565 Int)) Bool (=> (and (<= x235 x565) (>= x113 0) (<= 0 x235) (>= x224 x113)) (<= (x1020 x113 x235) (x1020 x224 x565))))
(define-fun x1074 ((x113 Int) (x235 Int) (x224 Int) (x565 Int)) Bool (=> (= x224 x113) (= (x1020 x113 (- x235 x565)) (- (x1020 x113 x235) (x1020 x224 x565)))))
(assert (x599 x935))
(assert (=> (>= 10000 x309) (= 0 (x679 x309))))
(assert (x599 x141))
(assert (x599 x645))
(assert (= (and x459 x994) x529))
(assert (x599 x791))
(assert (x599 x249))
(assert (x599 x815))
(assert (x599 x322))
(assert (= (and x340 (not x584)) x105))
(assert (=> (>= 10000 x815) (= (x679 x815) 0)))
(assert (= (x510 (x17 x1204 x1135 x466 x1108 x248 x332 x861 x119)) x861))
(assert (x599 x463))
(assert (x599 x102))
(assert (= (=> (and (or (and x19 (= x205 x120)) (and (not x19) (and (< x205 x475) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x205) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x205) (= (+ 63 x904) x500) (= (x604 (+ x979 x205)) x475) (= x979 (x910 115792089237316195423570985008687907853269984665640564039457584007913129639904 x500)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x205) (<= 1 x475) (= x563 (x604 (+ 32 x205))) (= x475 x120)))) (and (= (x1089 x1071) x616) (>= x138 0) (= x102 (x507 x1071)) (= x19 (= x904 0)) (= (= x102 (x871 x1071)) x776) (= x138 (+ x253 x457)) (= (- x962 x457) x777) (>= x369 1) (= (x1089 x612) x934) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x457 x616)) (< (+ x457 x253) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x284 (<= x904 4294967295) (>= x934 x457) (= x663 (x507 x612)) (= x253 (x624 x1071)) (= x962 (x1089 x612)) (= x1039 0) (= x534 x138) x776 (= (>= (x871 x612) x663) x284) (<= x138 115792089237316195423570985008687907853269984665640564039457584007913129639935))) x1142) x485))
(assert (< (x489 x727 x649) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (=> (>= 10000 x322) (= 0 (x679 x322))))
(assert (= (x281 (x489 x625 x1)) x1))
(assert (x599 x915))
(assert (=> (<= x254 10000) (= 0 (x679 x254))))
(assert (x599 x711))
(assert (x313 32))
(assert (x599 x277))
(assert (x599 x260))
(assert (x599 x1088))
(assert (x599 x1062))
(assert (x599 x960))
(assert (= (and x1175 (not x1061)) x825))
(assert (= (and x1026 x971) x785))
(assert (x582 x614))
(assert (not (x554 (x17 x162 x817 x249 x374 x1024 x310 x405 x1125))))
(assert (= x765 (x221 (x6 x1204 x996 x673 x765))))
(assert (= 0 (x679 11430537079145650693387304458692941425836787954612963690241153482819318579200)))
(assert (x599 x1056))
(assert (> (x6 x625 x833 x944 x2) 10000))
(assert (not (x554 (x142 x625 x595 x801 x737 x882 x546))))
(assert (x599 x1177))
(assert (= (or x635 x383) x7))
(assert (= (and x1150 x216) x722))
(assert (x599 x424))
(assert (x599 x176))
(assert (x599 x135))
(assert (x599 x134))
(assert (=> (<= x944 10000) (= (x679 x944) 0)))
(assert (x599 x818))
(assert (=> (<= x701 10000) (= (x679 x701) 0)))
(assert (=> (>= 10000 x310) (= 0 (x679 x310))))
(assert (x404 x993))
(assert (not (x554 (x6 x1204 x996 x673 x765))))
(assert (= x727 (x375 (x142 x727 x209 x829 x1182 x362 x682))))
(assert (= x66 (x221 (x17 x727 x982 x1062 x66 x846 x950 x1002 x103))))
(assert (= (and x199 x338) x535))
(assert (x599 x708))
(assert (x599 x286))
(assert (= (x615 (ite (< (* 8 (- 32 x781)) 256) (x501 2 (* (- 32 x781) 8)) 0)) (x161 1 (* (- 32 x781) 8))))
(assert (= (x281 (x142 x162 x895 x51 x195 x211 x746)) x895))
(assert (x599 x757))
(assert (x599 x914))
(assert (=> (<= x362 10000) (= (x679 x362) 0)))
(assert (x599 x780))
(assert (= (x1086 (x752 x1204 x279 x1079)) x1079))
(assert (x599 x524))
(assert (x186 x993 32))
(assert (x599 x572))
(assert (x404 x26))
(assert (= (and x1114 x906) x1137))
(assert (x599 x686))
(assert (x599 x563))
(assert (not (x554 (x142 x727 x209 x829 x1182 x362 x682))))
(assert (= x274 (x375 (x142 x274 x924 x1059 x444 x806 x268))))
(assert (x599 x354))
(assert (x599 x641))
(assert (= x1204 (x375 (x6 x1204 x996 x673 x765))))
(assert (x599 x795))
(assert (x599 x209))
(assert (= (and x1186 (not x1138)) x464))
(assert (=> (>= 10000 x693) (= 0 (x679 x693))))
(assert (x599 x854))
(assert (x186 x862 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x142 x625 x595 x801 x737 x882 x546)))
(assert (= (x281 (x361 x274 x795 x5 x1211 x1160)) x795))
(assert (< (x489 x625 x1) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x404 32))
(assert x445)
(assert (=> (>= 10000 x1144) (= 0 (x679 x1144))))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x489 x274 x31)))
(assert (x599 x189))
(assert (x599 x694))
(assert (x599 x1027))
(assert (x599 x146))
(assert (=> (>= 10000 x686) (= 0 (x679 x686))))
(assert (x599 x1120))
(assert (x582 x414))
(assert (= (and x298 x916) x340))
(assert (=> (>= 10000 x747) (= 0 (x679 x747))))
(assert (x599 x342))
(assert (x238 x262))
(assert (= (x1086 (x361 x274 x795 x5 x1211 x1160)) x5))
(assert (x599 x671))
(assert (x599 x703))
(assert (=> (>= 10000 x649) (= (x679 x649) 0)))
(assert (x599 x702))
(assert (x186 x1141 32))
(assert (=> (<= x1135 10000) (= (x679 x1135) 0)))
(assert (= (x679 (x142 x274 x924 x1059 x444 x806 x268)) (x142 x274 x924 x1059 x444 x806 x268)))
(assert (=> (>= 10000 x1045) (= (x679 x1045) 0)))
(assert (= (x679 115792089237316195423570985008687907853269984665640564039457584007913129639838) 0))
(assert (x404 x1141))
(assert (not (x554 (x489 x274 x31))))
(assert (x599 x171))
(assert (x599 x1090))
(assert (=> (>= 10000 x626) (= (x679 x626) 0)))
(assert (= x664 (x1086 (x637 x162 x701 x664 x358 x735 x1173 x85))))
(assert (=> (<= x305 10000) (= 0 (x679 x305))))
(assert (x599 x327))
(assert (x599 x295))
(assert (x599 x248))
(assert (x599 x36))
(assert (x599 x907))
(assert (x599 x389))
(assert (x577 x1001))
(assert (x599 x527))
(assert (x599 x963))
(assert (= (x281 (x17 x1204 x1135 x466 x1108 x248 x332 x861 x119)) x1135))
(assert (x599 x44))
(assert (x599 x936))
(assert (< (x17 x162 x817 x249 x374 x1024 x310 x405 x1125) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x599 x96))
(assert (=> (<= x801 10000) (= (x679 x801) 0)))
(assert (x599 x894))
(assert (< (x6 x1204 x996 x673 x765) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x599 x547))
(assert (x599 x867))
(assert (= x970 (=> (and (= x1012 x24) (= x308 x324)) x114)))
(assert (x599 x127))
(assert (=> (<= x682 10000) (= (x679 x682) 0)))
(assert (x599 x379))
(assert (not (x554 (x6 x274 x1042 x322 x327))))
(assert (x599 x506))
(assert (= (x752 64 x168 8) (x679 (x752 64 x168 8))))
(assert (= x129 (or x730 x464 x798)))
(assert (x599 x468))
(assert (x394 x500))
(assert (x599 x664))
(assert (x599 x626))
(assert (x599 x108))
(assert (=> (>= 10000 x575) (= 0 (x679 x575))))
(assert (x599 x883))
(assert (= x200 (and x371 x58)))
(assert (x599 x727))
(assert (x599 x578))
(assert (= x727 (x375 (x637 x727 x367 x1146 x791 x835 x715 x315))))
(assert (not (x554 (x752 x274 x63 x695))))
(assert (= x1204 (x375 (x361 x1204 x265 x93 x304 x1180))))
(assert (=> (>= 10000 x471) (= 0 (x679 x471))))
(assert (x599 x263))
(assert (x599 x942))
(assert (= x203 (=> (and (or (and (= x164 x87) (not x1138)) (and x1138 (and (= x295 (x150 x130)) (= x423 (+ x672 x316)) (< (+ x672 x316) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x423 0) (= (ite (= x164 0) x300 0) x316) (= x672 (x391 x612)) (= x149 x423) (<= x423 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x87 x164) (= x363 (- x295 x316))))) (= x1138 (= x164 0))) x210)))
(assert (= 0 (x679 33528237782592280163068556224972516439282563014722366175641814928123294921928)))
(assert (x599 x974))
(assert (= (and x19 x1044) x194))
(assert (x599 x621))
(assert (= (and x1208 x972) x426))
(assert (=> (>= 10000 x528) (= 0 (x679 x528))))
(assert (x186 x283 1461501637330902918203684832716283019655932542976))
(assert (x599 x98))
(assert (=> (>= 10000 x1158) (= 0 (x679 x1158))))
(assert (x599 x119))
(assert (= (x20 (x142 x274 x924 x1059 x444 x806 x268)) x806))
(assert (= (x510 (x637 x625 x1206 x172 x768 x88 x927 x469)) x469))
(assert (x599 x782))
(assert (= x1028 (=> (and (= (x269 (- x1107 32)) x159) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639844 x640)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639844 x640)) (= (x269 (- x155 x640)) x1107) (= x155 (x604 (+ x875 32))) (> x155 x640) (= x697 (>= 224 x1204)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x640) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639844 x640)) (= x621 (x604 (+ x640 32))) (<= x640 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= x1204 (x131 x640)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x640) (= (x604 (+ 28 x621)) x875) (= (x604 (+ x640 32)) x699)) (and (=> (and (= x435 (x802 (x604 (+ x411 32)))) (= x332 (x131 x627)) (= x786 (x604 (+ 32 x699))) (= x907 (x269 (- x449 4))) (= (x17 x1204 x1135 x466 x1108 x248 x332 x861 x119) x1036) (= (x830 0) x517) (= (x604 (+ 32 x617)) x218) (= x514 (x361 x1204 x265 x93 x304 x1180)) (= x1191 (x131 x574)) (= (x604 (+ 64 x699)) x974) (= x265 (x131 x699)) (= (x604 (+ x699 64)) x586) (= x627 (x604 (+ 128 x699))) (= x1012 x867) (= x248 (x131 x184)) (= (x604 (+ x699 128)) x711) (= (x604 (+ 64 x699)) x945) (= (x131 x974) x765) (= x853 (x637 x1204 x686 x143 x1194 x260 x820 x528)) (= (x131 x448) x1108) (= (x131 x360) x119) (= x1165 (x604 (+ x699 96))) (= x184 (x604 (+ x699 96))) (= x985 (x604 (+ x218 32))) (= x1003 (x142 x1204 x837 x1191 x1144 x964 x309)) (= (x131 x699) x1135) (= (x526 x903) x867) (= x680 (x604 (+ 32 x699))) (= (x131 x122) x528) (= (x131 x810) x964) (= (x604 (+ x699 64)) x1016) (= (x604 (+ 32 x699)) x178) (= x122 (x604 (+ x699 160))) (= (x752 x1204 x279 x1079) x174) (= (x489 x1204 x1177) x1033) (>= 1461501637330902918203684832716283019655932542975 x583) (= (x6 x1204 x996 x673 x765) x593) (= (x131 x1172) x861) (= x1172 (x604 (+ x699 160))) (= x279 (x131 x699)) (= (x269 (- x411 32)) x903) (= x304 (x131 x586)) (= x980 (ite (= x1204 0) x517 (ite (<= x1204 32) x1033 (ite (<= x1204 64) x174 (ite (<= x1204 96) x593 (ite (>= 128 x1204) x514 (ite (>= 160 x1204) x1003 (ite (>= 192 x1204) x853 (ite (>= 224 x1204) x1036 x747))))))))) (= (x131 x1165) x260) (= (x604 (+ 32 x699)) x350) (= x466 (x131 x178)) (= (x131 x1016) x1144) (= x574 (x604 (+ x699 32))) (= (x131 x786) x93) (= x702 128) (or (and (<= x155 115792089237316195423570985008687907853269984665640564039457584007913129639934) (>= x155 115792089237316195423570985008687907853269984665640564039457584007913129639906)) (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639903 x155) (<= 1 x155))) (= (x802 (x604 (+ 96 x411))) x589) (= (x131 x699) x837) (= x820 (x131 x711)) (= (x131 x805) x1180) (= x996 (x131 x699)) (= (x13 x1128 x435 x408 x589) x583) (= (x269 (- x411 32)) x247) (= x617 (x604 (+ x411 32))) (= x1079 (x131 x680)) (= x673 (x131 x350)) (= (x604 (+ x699 192)) x360) (= x309 (x131 x1014)) (= (x131 x945) x1194) (= x1177 (x131 x699)) (< x155 x411) (= x576 (x604 (+ 32 x699))) (= x411 x324) (= x448 (x604 (+ x699 64))) (= x411 (x604 (+ x155 32))) (= x408 (x802 (x604 (+ x411 64)))) (= x810 (x604 (+ x699 96))) (= x1014 (x604 (+ 128 x699))) (= x143 (x131 x576)) (= (x131 x699) x686) (= x805 (x604 (+ 96 x699))) (= x1128 (x802 x411))) x970) x697))))
(assert (= (x897 (x17 x274 x754 x626 x379 x305 x969 x64 x292)) x969))
(assert (= x727 (x375 (x6 x727 x575 x703 x773))))
(assert (=> (<= x211 10000) (= (x679 x211) 0)))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x361 x625 x1048 x141 x779 x975)))
(assert (=> (>= 10000 x1177) (= (x679 x1177) 0)))
(assert (x599 x614))
(assert (x599 x395))
(assert (= x141 (x1086 (x361 x625 x1048 x141 x779 x975))))
(assert (x599 x809))
(assert (= (or x1037 x257) x1044))
(assert (= x315 (x510 (x637 x727 x367 x1146 x791 x835 x715 x315))))
(assert (x1148 x468))
(assert (=> (<= x578 10000) (= (x679 x578) 0)))
(assert (= x1029 (x1086 (x752 x162 x984 x1029))))
(assert (x599 x940))
(assert (x386 (- 32 x90)))
(assert (=> (>= 10000 x66) (= 0 (x679 x66))))
(assert (=> (<= x873 10000) (= (x679 x873) 0)))
(assert (x599 x1059))
(assert (< 10000 (x752 x727 x44 x669)))
(assert (x599 x921))
(assert (x599 x1176))
(assert (< (x489 x162 x471) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= x1204 (x375 (x142 x1204 x837 x1191 x1144 x964 x309))))
(assert (x599 x1194))
(assert (=> (>= 10000 x695) (= 0 (x679 x695))))
(assert (=> (>= 10000 x88) (= (x679 x88) 0)))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x142 x727 x209 x829 x1182 x362 x682)))
(assert (=> (>= 10000 x344) (= 0 (x679 x344))))
(assert (x599 x182))
(assert (x599 x430))
(assert (x599 x91))
(assert (=> (>= 10000 x1201) (= (x679 x1201) 0)))
(assert (x599 x392))
(assert (x599 x525))
(assert (x599 x215))
(assert (x404 x283))
(assert (x599 x574))
(assert (not (x554 (x17 x727 x982 x1062 x66 x846 x950 x1002 x103))))
(assert (= (x139 x202 452312848583266388373324160190187140051835877600158453279131187530910662656) (x716 x202 248)))
(assert (x599 x147))
(assert (x599 x636))
(assert (x599 x326))
(assert (= 0 (x679 1781416757497172237285707461672121659281076687163700985222424369352509686767)))
(assert (= (x679 (x17 x274 x754 x626 x379 x305 x969 x64 x292)) (x17 x274 x754 x626 x379 x305 x969 x64 x292)))
(assert (x599 x358))
(assert (x599 x254))
(assert (x599 x835))
(assert (= x971 (or x321 x476)))
(assert (x599 x193))
(assert (= x1186 (or x42 x402)))
(assert (x577 x1075))
(assert (x599 x1211))
(assert (= x50 (and (not x486) x200)))
(assert (x599 x1043))
(assert (x599 x714))
(assert (x599 x605))
(assert (=> (>= 10000 x735) (= 0 (x679 x735))))
(assert (=> (>= 10000 x103) (= 0 (x679 x103))))
(assert (< 10000 (x17 x162 x817 x249 x374 x1024 x310 x405 x1125)))
(assert (x599 x360))
(assert (= x310 (x897 (x17 x162 x817 x249 x374 x1024 x310 x405 x1125))))
(assert (x599 x211))
(assert (x599 x466))
(assert (x599 x272))
(assert (x599 x310))
(assert (x238 x694))
(assert (x386 x1120))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x142 x162 x895 x51 x195 x211 x746)))
(assert (=> (<= x898 10000) (= (x679 x898) 0)))
(assert (x599 x548))
(assert (not (x554 (x17 x625 x91 x1050 x1041 x154 x1158 x815 x1190))))
(assert (x599 x1172))
(assert (x45 8 (- 32 x90)))
(assert (= (and x1178 x213) x1066))
(assert (= (x679 (x361 x274 x795 x5 x1211 x1160)) (x361 x274 x795 x5 x1211 x1160)))
(assert (=> (<= x162 10000) (= 0 (x679 x162))))
(assert (=> (>= 10000 x612) (= (x679 x612) 0)))
(assert (= (x17 x162 x817 x249 x374 x1024 x310 x405 x1125) (x679 (x17 x162 x817 x249 x374 x1024 x310 x405 x1125))))
(assert (x599 x493))
(assert (= (and x486 x200) x994))
(assert (= x344 (x281 (x6 x162 x344 x898 x100))))
(assert (=> (<= x100 10000) (= 0 (x679 x100))))
(assert (< (x752 x625 x651 x797) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x976 x771 x23))
(assert (x599 x1164))
(assert (= (x1086 (x142 x625 x595 x801 x737 x882 x546)) x801))
(assert (= (x221 (x6 x727 x575 x703 x773)) x773))
(assert (x599 x97))
(assert (x599 x471))
(assert (= (and x32 x1189) x474))
(assert (x599 x1002))
(assert (x599 x706))
(assert (x599 x359))
(assert (=> (>= 10000 x315) (= 0 (x679 x315))))
(assert (=> (<= x358 10000) (= (x679 x358) 0)))
(assert (x599 x268))
(assert (= (x638 (x17 x625 x91 x1050 x1041 x154 x1158 x815 x1190)) x1190))
(assert (x599 x365))
(assert (= (x375 (x752 x162 x984 x1029)) x162))
(assert (x599 x649))
(assert (x599 x617))
(assert (=> (<= x1210 10000) (= (x679 x1210) 0)))
(assert (= 0 (x679 10019309979067222254582373821846632475949454479833780424560900009889672200192)))
(assert (x599 x352))
(assert (x599 x207))
(assert (x599 x294))
(assert (x186 x862 26959946667150639794667015087019630673637144422540572481103610249216))
(assert (x599 x1039))
(assert (x404 (ite (> 256 (* 8 (- 32 x90))) (x501 2 (* 8 (- 32 x90))) 0)))
(assert (x238 x522))
(assert (= (x281 (x637 x274 x873 x92 x1045 x518 x320 x917)) x873))
(assert (=> (<= x292 10000) (= (x679 x292) 0)))
(assert (x599 x418))
(assert (= x21 (and x125 x228)))
(assert (x599 x618))
(assert (x599 x771))
(assert (x599 x1004))
(assert (= x754 (x281 (x17 x274 x754 x626 x379 x305 x969 x64 x292))))
(assert (= x358 (x221 (x637 x162 x701 x664 x358 x735 x1173 x85))))
(assert (= (=> (and (= x1099 (ite (> x618 0) x618 (ite (= (x910 1461501637330902918203684832716283019655932542975 x26) 1) 1 0))) (= x899 (not (> x712 1))) (= x1099 0)) (and x899 (=> (and (= x614 (x648 33528237782592280163068556224972516439282563014722366175641814928123294921928)) (= x509 (x910 1461501637330902918203684832716283019655932542975 x614)) (= x338 (= x509 0))) (and (=> x338 x700) (=> (and (and (= x814 (x604 (+ x1027 32))) (= x430 (x604 (+ 32 x330))) (= (+ 31 x307) x1141) (= (x604 (+ 4 x419)) x56) (= x766 (x604 (+ 32 x814))) (= x1088 (x604 (+ x729 x1185))) (= (< 0 x818) x1061) (= (x910 1461501637330902918203684832716283019655932542975 x614) x588) (= (x910 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1141) x729) (= x818 (x808 128)) (= (x604 (+ x766 32)) x1006) (= (x604 (+ x222 32)) x417) (= x182 (x604 (+ x430 32))) (= x280 (x604 (+ x307 x1185))) (= x1167 (x604 (+ x56 32))) (= x1027 (x604 (+ 32 x417))) (= (x604 (+ 32 x858)) x1185) (= x330 (x604 (+ 32 x1006))) (= x858 (x604 (+ 32 x182))) (= (x604 (+ 32 x1088)) x740) (= x222 (x604 (+ x1167 32))) (= x936 (x1106 128)) (= x1093 (x269 (- x858 x56))) (= x270 (x269 (- x1088 x56)))) (not x338)) (and (=> (and x1061 (and (= (> x818 32) x844) (= (x808 160) x671))) (and (=> (not x844) x1053) (=> (and (and (= x939 (x847 192)) (= (x604 (+ 32 x740)) x493) (= x972 (< 64 x818))) x844) (and (=> (not x972) x1053) (=> (and x972 (and (= (> x818 96) x285) (= (x604 (+ x740 64)) x868) (= x1136 (x1104 224)))) (and (=> (not x285) x1053) (=> x285 x117))))))) (=> (not x1061) x1053))))))) x990))
(assert (x599 x1171))
(assert (= x440 (=> (= (= x921 1) x906) (and (=> (and (not x906) (and (= x244 (>= x1119 x300)) (= (x670 x130) x714) (= x981 (x608 x419)) (= x1119 (x670 x612)) (= (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x300 x714)) x208) (= x1189 (and x208 x244)))) (and (=> (and (and (and (= (> x164 0) x611) (= x991 (+ x1154 x300)) (= x901 (- x926 x300)) (= x803 x991) (= x926 (x670 x612)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x991) (<= 0 x991) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x300 x1154)) (= x1154 (x902 x130))) (or (and x611 (and (= (<= x479 (x912 x612)) x775) (= x479 (x731 x612)) (<= x468 4294967295) (= (= (x912 x130) x1207) x106) x106 x775 (= x1207 (x731 x130)))) (not x611))) x1189) x203) (=> (and (not x1189) (= 0 x87)) x210))) (=> (and x906 (= 1 x654)) x370)))))
(assert (= x555 (and x704 (not x499))))
(assert (= 0 (x679 115792089237316195423570985008687907853269984665640564039457584007913129639906)))
(assert (x599 x1165))
(assert (= x162 (x375 (x361 x162 x29 x158 x81 x952))))
(assert (x599 x503))
(assert (=> (>= 10000 x2) (= 0 (x679 x2))))
(assert (x599 x868))
(assert (= x797 (x1086 (x752 x625 x651 x797))))
(assert (=> (<= x1041 10000) (= (x679 x1041) 0)))
(assert (x599 x1055))
(assert (x599 x634))
(assert (= 64 (x375 (x752 64 x55 x170))))
(assert (x599 x576))
(assert (not (x554 (x142 x162 x895 x51 x195 x211 x746))))
(assert (= 0 (x679 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (x599 x964))
(assert (x599 x1024))
(assert (x599 x673))
(assert (= x833 (x281 (x6 x625 x833 x944 x2))))
(assert (x599 x77))
(assert (x45 32 x828))
(assert (x599 x534))
(assert (x599 x274))
(assert (=> (<= x1160 10000) (= 0 (x679 x1160))))
(assert (x599 x492))
(assert (=> (<= x1042 10000) (= 0 (x679 x1042))))
(assert (= (x679 (x142 x625 x595 x801 x737 x882 x546)) (x142 x625 x595 x801 x737 x882 x546)))
(assert (= (x897 (x142 x1204 x837 x1191 x1144 x964 x309)) x309))
(assert (= (and x256 x39) x356))
(assert (x599 x781))
(assert (= (x20 (x17 x625 x91 x1050 x1041 x154 x1158 x815 x1190)) x154))
(assert (= (x1086 (x17 x727 x982 x1062 x66 x846 x950 x1002 x103)) x1062))
(assert (x599 x427))
(assert (=> (<= x895 10000) (= 0 (x679 x895))))
(assert (= (x375 (x752 x1204 x279 x1079)) x1204))
(assert (= (x1086 (x361 x727 x1210 x547 x1164 x693)) x547))
(assert (=> (<= x938 10000) (= 0 (x679 x938))))
(assert (x599 x385))
(assert (= x933 (or x30 x232)))
(assert (x599 x1058))
(assert (=> (>= 10000 x327) (= 0 (x679 x327))))
(assert (x238 x147))
(assert (x45 64 x212))
(assert (x404 x694))
(assert (x599 x378))
(assert (= (x679 53345939417071456220559631604471678769232717410092326094220293271952667181056) 0))
(assert (x599 x981))
(assert (< 10000 (x637 x162 x701 x664 x358 x735 x1173 x85)))
(assert (not (x554 (x6 x625 x833 x944 x2))))
(assert (x599 x633))
(assert (x599 x594))
(assert (=> (<= x44 10000) (= (x679 x44) 0)))
(assert (x599 x455))
(assert (x1148 x156))
(assert (= 0 (x679 115792089237316195423570985008687907853269984665640564039457584007913129639844)))
(assert (x599 x687))
(assert (= x546 (x897 (x142 x625 x595 x801 x737 x882 x546))))
(assert (= (or x105 x231) x467))
(assert (x404 x522))
(assert (= (x375 (x361 x625 x1048 x141 x779 x975)) x625))
(assert (x599 x1023))
(assert (x599 x861))
(assert (> (x17 x625 x91 x1050 x1041 x154 x1158 x815 x1190) 10000))
(assert (=> (>= 10000 x917) (= (x679 x917) 0)))
(assert (= x898 (x1086 (x6 x162 x344 x898 x100))))
(assert (= (=> (and (= x355 x175) (= x215 x314)) x462) x889))
(assert (= x274 (x375 (x17 x274 x754 x626 x379 x305 x969 x64 x292))))
(assert (and (= 98079714615416886934934209737619787751599303819750539264 (x501 2 186)) (= 137438953472 (x501 2 37)) (= 19342813113834066795298816 (x501 2 84)) (= 883423532389192164791648750371459257913741948437809479060803100646309888 (x501 2 239)) (= (x501 2 152) 5708990770823839524233143877797980545530986496) (= (x501 2 42) 4398046511104) (= 1766847064778384329583297500742918515827483896875618958121606201292619776 (x501 2 240)) (= (x501 2 47) 140737488355328) (= 26959946667150639794667015087019630673637144422540572481103610249216 (x501 2 224)) (= (x501 2 221) 3369993333393829974333376885877453834204643052817571560137951281152) (= 803469022129495137770981046170581301261101496891396417650688 (x501 2 199)) (= 210624583337114373395836055367340864637790190801098222508621955072 (x501 2 217)) (= (x501 2 76) 75557863725914323419136) (= 4611686018427387904 (x501 2 62)) (= (x501 2 7) 128) (= 83076749736557242056487941267521536 (x501 2 116)) (= 3291009114642412084309938365114701009965471731267159726697218048 (x501 2 211)) (= (x501 2 102) 5070602400912917605986812821504) (= 22300745198530623141535718272648361505980416 (x501 2 144)) (= 18014398509481984 (x501 2 54)) (= (x501 2 238) 441711766194596082395824375185729628956870974218904739530401550323154944) (= (x501 2 138) 348449143727040986586495598010130648530944) (= 21267647932558653966460912964485513216 (x501 2 124)) (= 14474011154664524427946373126085988481658748083205070504932198000989141204992 (x501 2 253)) (= (x501 2 132) 5444517870735015415413993718908291383296) (= (x501 2 85) 38685626227668133590597632) (= (x501 2 39) 549755813888) (= 36028797018963968 (x501 2 55)) (= (x501 2 115) 41538374868278621028243970633760768) (= (x501 2 2) 4) (= 6277101735386680763835789423207666416102355444464034512896 (x501 2 192)) (= 2251799813685248 (x501 2 51)) (= (x501 2 10) 1024) (= 81129638414606681695789005144064 (x501 2 106)) (= (x501 2 50) 1125899906842624) (= 24519928653854221733733552434404946937899825954937634816 (x501 2 184)) (= (x501 2 87) 154742504910672534362390528) (= 182687704666362864775460604089535377456991567872 (x501 2 157)) (= 10889035741470030830827987437816582766592 (x501 2 133)) (= 6129982163463555433433388108601236734474956488734408704 (x501 2 182)) (= (x501 2 29) 536870912) (= 95780971304118053647396689196894323976171195136475136 (x501 2 176)) (= (x501 2 67) 147573952589676412928) (= 356811923176489970264571492362373784095686656 (x501 2 148)) (= (x501 2 210) 1645504557321206042154969182557350504982735865633579863348609024) (= (x501 2 256) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= 392318858461667547739736838950479151006397215279002157056 (x501 2 188)) (= (x501 2 246) 113078212145816597093331040047546785012958969400039613319782796882727665664) (= (x501 2 174) 23945242826029513411849172299223580994042798784118784) (= 4951760157141521099596496896 (x501 2 92)) (= 40564819207303340847894502572032 (x501 2 105)) (= 2361183241434822606848 (x501 2 71)) (= (x501 2 83) 9671406556917033397649408) (= 20769187434139310514121985316880384 (x501 2 114)) (= 16384 (x501 2 14)) (= 170141183460469231731687303715884105728 (x501 2 127)) (= 9444732965739290427392 (x501 2 73)) (= (x501 2 69) 590295810358705651712) (= (x501 2 103) 10141204801825835211973625643008) (= (x501 2 12) 4096) (= (x501 2 245) 56539106072908298546665520023773392506479484700019806659891398441363832832) (= 401734511064747568885490523085290650630550748445698208825344 (x501 2 198)) (= 27606985387162255149739023449108101809804435888681546220650096895197184 (x501 2 234)) (= 524288 (x501 2 19)) (= (x501 2 208) 411376139330301510538742295639337626245683966408394965837152256) (= 51422017416287688817342786954917203280710495801049370729644032 (x501 2 205)) (= 53919893334301279589334030174039261347274288845081144962207220498432 (x501 2 225)) (= (x501 2 142) 5575186299632655785383929568162090376495104) (= (x501 2 164) 23384026197294446691258957323460528314494920687616) (= (x501 2 227) 215679573337205118357336120696157045389097155380324579848828881993728) (= (x501 2 4) 16) (= 8589934592 (x501 2 33)) (= (x501 2 40) 1099511627776) (= 110427941548649020598956093796432407239217743554726184882600387580788736 (x501 2 236)) (= 162259276829213363391578010288128 (x501 2 107)) (= (x501 2 26) 67108864) (= 18889465931478580854784 (x501 2 74)) (= 842498333348457493583344221469363458551160763204392890034487820288 (x501 2 219)) (= 618970019642690137449562112 (x501 2 89)) (= (x501 2 13) 8192) (= 2475880078570760549798248448 (x501 2 91)) (= (x501 2 222) 6739986666787659948666753771754907668409286105635143120275902562304) (= 562949953421312 (x501 2 49)) (= 7067388259113537318333190002971674063309935587502475832486424805170479104 (x501 2 242)) (= 2923003274661805836407369665432566039311865085952 (x501 2 161)) (= (x501 2 200) 1606938044258990275541962092341162602522202993782792835301376) (= (x501 2 237) 220855883097298041197912187592864814478435487109452369765200775161577472) (= 45671926166590716193865151022383844364247891968 (x501 2 155)) (= 309485009821345068724781056 (x501 2 88)) (= 134217728 (x501 2 27)) (= 20282409603651670423947251286016 (x501 2 104)) (= 4835703278458516698824704 (x501 2 82)) (= 89202980794122492566142873090593446023921664 (x501 2 146)) (= (x501 2 213) 13164036458569648337239753460458804039861886925068638906788872192) (= 1237940039285380274899124224 (x501 2 90)) (= 1073741824 (x501 2 30)) (= (x501 2 9) 512) (= 1152921504606846976 (x501 2 60)) (= 102844034832575377634685573909834406561420991602098741459288064 (x501 2 206)) (= 3618502788666131106986593281521497120414687020801267626233049500247285301248 (x501 2 251)) (= (x501 2 46) 70368744177664) (= 2722258935367507707706996859454145691648 (x501 2 131)) (= 822752278660603021077484591278675252491367932816789931674304512 (x501 2 209)) (= (x501 2 149) 713623846352979940529142984724747568191373312) (= 42535295865117307932921825928971026432 (x501 2 125)) (= (x501 2 180) 1532495540865888858358347027150309183618739122183602176) (= 4194304 (x501 2 22)) (= 105312291668557186697918027683670432318895095400549111254310977536 (x501 2 216)) (= (x501 2 163) 11692013098647223345629478661730264157247460343808) (= 26328072917139296674479506920917608079723773850137277813577744384 (x501 2 214)) (= 302231454903657293676544 (x501 2 78)) (= (x501 2 218) 421249166674228746791672110734681729275580381602196445017243910144) (= 9007199254740992 (x501 2 53)) (= 340282366920938463463374607431768211456 (x501 2 128)) (= (x501 2 193) 12554203470773361527671578846415332832204710888928069025792) (= (x501 2 241) 3533694129556768659166595001485837031654967793751237916243212402585239552) (= 6901746346790563787434755862277025452451108972170386555162524223799296 (x501 2 232)) (= (x501 2 201) 3213876088517980551083924184682325205044405987565585670602752) (= (x501 2 136) 87112285931760246646623899502532662132736) (= (x501 2 38) 274877906944) (= (x501 2 203) 12855504354071922204335696738729300820177623950262342682411008) (= (x501 2 44) 17592186044416) (= (x501 2 52) 4503599627370496) (= (x501 2 95) 39614081257132168796771975168) (= (x501 2 190) 1569275433846670190958947355801916604025588861116008628224) (= (x501 2 212) 6582018229284824168619876730229402019930943462534319453394436096) (= (x501 2 160) 1461501637330902918203684832716283019655932542976) (= 431359146674410236714672241392314090778194310760649159697657763987456 (x501 2 228)) (= (x501 2 63) 9223372036854775808) (= 452312848583266388373324160190187140051835877600158453279131187530910662656 (x501 2 248)) (= 32768 (x501 2 15)) (= (x501 2 230) 1725436586697640946858688965569256363112777243042596638790631055949824) (= (x501 2 79) 604462909807314587353088) (= (x501 2 11) 2048) (= 1427247692705959881058285969449495136382746624 (x501 2 150)) (= 324518553658426726783156020576256 (x501 2 108)) (= (x501 2 31) 2147483648) (= 34359738368 (x501 2 35)) (= 7237005577332262213973186563042994240829374041602535252466099000494570602496 (x501 2 252)) (= 187072209578355573530071658587684226515959365500928 (x501 2 167)) (= 1361129467683753853853498429727072845824 (x501 2 130)) (= (x501 2 154) 22835963083295358096932575511191922182123945984) (= 49039857307708443467467104868809893875799651909875269632 (x501 2 185)) (= (x501 2 243) 14134776518227074636666380005943348126619871175004951664972849610340958208) (= 64 (x501 2 6)) (= 158456325028528675187087900672 (x501 2 97)) (= (x501 2 175) 47890485652059026823698344598447161988085597568237568) (= (x501 2 21) 2097152) (= 25711008708143844408671393477458601640355247900524685364822016 (x501 2 204)) (= 2 (x501 2 1)) (= 268435456 (x501 2 28)) (= 1 (x501 2 0)) (= 174224571863520493293247799005065324265472 (x501 2 137)) (= 11972621413014756705924586149611790497021399392059392 (x501 2 173)) (= 166153499473114484112975882535043072 (x501 2 117)) (= (x501 2 156) 91343852333181432387730302044767688728495783936) (= 200867255532373784442745261542645325315275374222849104412672 (x501 2 197)) (= (x501 2 8) 256) (= 1298074214633706907132624082305024 (x501 2 110)) (= 2305843009213693952 (x501 2 61)) (= (x501 2 77) 151115727451828646838272) (= (x501 2 166) 93536104789177786765035829293842113257979682750464) (= (x501 2 64) 18446744073709551616) (= 10384593717069655257060992658440192 (x501 2 113)) (= (x501 2 81) 2417851639229258349412352) (= (x501 2 244) 28269553036454149273332760011886696253239742350009903329945699220681916416) (= (x501 2 122) 5316911983139663491615228241121378304) (= (x501 2 140) 1393796574908163946345982392040522594123776) (= 46768052394588893382517914646921056628989841375232 (x501 2 165)) (= 191561942608236107294793378393788647952342390272950272 (x501 2 177)) (= 16777216 (x501 2 24)) (= 33554432 (x501 2 25)) (= (x501 2 112) 5192296858534827628530496329220096) (= 107839786668602559178668060348078522694548577690162289924414440996864 (x501 2 226)) (= (x501 2 170) 1496577676626844588240573268701473812127674924007424) (= 12259964326927110866866776217202473468949912977468817408 (x501 2 183)) (= (x501 2 66) 73786976294838206464) (= (x501 2 18) 262144) (= 281474976710656 (x501 2 48)) (= (x501 2 151) 2854495385411919762116571938898990272765493248) (= (x501 2 34) 17179869184) (= (x501 2 196) 100433627766186892221372630771322662657637687111424552206336) (= 8796093022208 (x501 2 43)) (= (x501 2 147) 178405961588244985132285746181186892047843328) (= 1048576 (x501 2 20)) (= (x501 2 202) 6427752177035961102167848369364650410088811975131171341205504) (= (x501 2 23) 8388608) (= (x501 2 86) 77371252455336267181195264) (= (x501 2 119) 664613997892457936451903530140172288) (= 1809251394333065553493296640760748560207343510400633813116524750123642650624 (x501 2 250)) (= 205688069665150755269371147819668813122841983204197482918576128 (x501 2 207)) (= (x501 2 129) 680564733841876926926749214863536422912) (= (x501 2 100) 1267650600228229401496703205376) (= (x501 2 41) 2199023255552) (= (x501 2 36) 68719476736) (= 365375409332725729550921208179070754913983135744 (x501 2 158)) (= 10633823966279326983230456482242756608 (x501 2 123)) (= (x501 2 59) 576460752303423488) (= 2993155353253689176481146537402947624255349848014848 (x501 2 171)) (= (x501 2 249) 904625697166532776746648320380374280103671755200316906558262375061821325312) (= 4722366482869645213696 (x501 2 72)) (= (x501 2 118) 332306998946228968225951765070086144) (= (x501 2 220) 1684996666696914987166688442938726917102321526408785780068975640576) (= 383123885216472214589586756787577295904684780545900544 (x501 2 178)) (= (x501 2 145) 44601490397061246283071436545296723011960832) (= (x501 2 247) 226156424291633194186662080095093570025917938800079226639565593765455331328) (= (x501 2 98) 316912650057057350374175801344) (= 633825300114114700748351602688 (x501 2 99)) (= (x501 2 3) 8) (= (x501 2 195) 50216813883093446110686315385661331328818843555712276103168) (= 9903520314283042199192993792 (x501 2 93)) (= (x501 2 45) 35184372088832) (= (x501 2 58) 288230376151711744) (= 32 (x501 2 5)) (= 696898287454081973172991196020261297061888 (x501 2 139)) (= 784637716923335095479473677900958302012794430558004314112 (x501 2 189)) (= (x501 2 255) 57896044618658097711785492504343953926634992332820282019728792003956564819968) (= (x501 2 254) 28948022309329048855892746252171976963317496166410141009864396001978282409984) (= (x501 2 120) 1329227995784915872903807060280344576) (= 3138550867693340381917894711603833208051177722232017256448 (x501 2 191)) (= (x501 2 181) 3064991081731777716716694054300618367237478244367204352) (= (x501 2 223) 13479973333575319897333507543509815336818572211270286240551805124608) (= (x501 2 187) 196159429230833773869868419475239575503198607639501078528) (= 766247770432944429179173513575154591809369561091801088 (x501 2 179)) (= (x501 2 153) 11417981541647679048466287755595961091061972992) (= 2658455991569831745807614120560689152 (x501 2 121)) (= 374144419156711147060143317175368453031918731001856 (x501 2 168)) (= (x501 2 16) 65536) (= 2596148429267413814265248164610048 (x501 2 111)) (= (x501 2 169) 748288838313422294120286634350736906063837462003712) (= 4294967296 (x501 2 32)) (= 13803492693581127574869511724554050904902217944340773110325048447598592 (x501 2 233)) (= (x501 2 17) 131072) (= 730750818665451459101842416358141509827966271488 (x501 2 159)) (= (x501 2 57) 144115188075855872) (= (x501 2 126) 85070591730234615865843651857942052864) (= (x501 2 70) 1180591620717411303424) (= 2787593149816327892691964784081045188247552 (x501 2 141)) (= (x501 2 65) 36893488147419103232) (= (x501 2 109) 649037107316853453566312041152512) (= (x501 2 143) 11150372599265311570767859136324180752990208) (= (x501 2 135) 43556142965880123323311949751266331066368) (= 295147905179352825856 (x501 2 68)) (= (x501 2 101) 2535301200456458802993406410752) (= (x501 2 94) 19807040628566084398385987584) (= (x501 2 134) 21778071482940061661655974875633165533184) (= (x501 2 56) 72057594037927936) (= 3450873173395281893717377931138512726225554486085193277581262111899648 (x501 2 231)) (= 79228162514264337593543950336 (x501 2 96)) (= 1208925819614629174706176 (x501 2 80)) (= (x501 2 229) 862718293348820473429344482784628181556388621521298319395315527974912) (= (x501 2 172) 5986310706507378352962293074805895248510699696029696) (= 52656145834278593348959013841835216159447547700274555627155488768 (x501 2 215)) (= (x501 2 194) 25108406941546723055343157692830665664409421777856138051584) (= 55213970774324510299478046898216203619608871777363092441300193790394368 (x501 2 235)) (= 37778931862957161709568 (x501 2 75)) (= 5846006549323611672814739330865132078623730171904 (x501 2 162))))
(assert (= (x752 x1204 x279 x1079) (x679 (x752 x1204 x279 x1079))))
(assert (x599 x92))
(assert (x599 x93))
(assert (< 10000 (x489 x274 x31)))
(assert (> (x489 x1204 x1177) 10000))
(assert (= (or (and x843 x819) x498) x812))
(assert (x599 x405))
(assert (= (x20 (x17 x162 x817 x249 x374 x1024 x310 x405 x1125)) x1024))
(assert (x599 x926))
(assert (x554 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x599 x756))
(assert (> (x637 x625 x1206 x172 x768 x88 x927 x469) 10000))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x752 64 x1082 2)))
(assert (x386 1))
(assert (x599 x720))
(assert (x599 x1127))
(assert (x599 x518))
(assert (x599 x470))
(assert (x186 x147 1461501637330902918203684832716283019655932542976))
(assert (x599 x1042))
(assert (= (x510 (x17 x727 x982 x1062 x66 x846 x950 x1002 x103)) x1002))
(assert (x599 x839))
(assert (=> (<= x669 10000) (= 0 (x679 x669))))
(assert (x599 x1101))
(assert (= 0 (x679 452312848583266388373324160190187140051835877600158453279131187530910662656)))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x361 x1204 x265 x93 x304 x1180)))
(assert (=> (>= 10000 x81) (= 0 (x679 x81))))
(assert (x238 x497))
(assert (=> (<= x773 10000) (= (x679 x773) 0)))
(assert (= x791 (x221 (x637 x727 x367 x1146 x791 x835 x715 x315))))
(assert (= x734 (and x1044 (not x19))))
(assert (> (x361 x1204 x265 x93 x304 x1180) 10000))
(assert (x404 x414))
(assert (x599 x24))
(assert (=> (>= 10000 x546) (= 0 (x679 x546))))
(assert (x599 x206))
(assert (= x305 (x20 (x17 x274 x754 x626 x379 x305 x969 x64 x292))))
(assert (x599 x88))
(assert (= (and x285 x426) x683))
(assert (x599 x367))
(assert (x599 x1069))
(assert (x599 x126))
(assert (x599 x759))
(assert (= x865 (=> (and (and (= x883 (x910 1461501637330902918203684832716283019655932542975 x26)) (= x920 (not (> x883 0)))) (or (and (not x920) (and (= x618 (ite (= x1197 0) 1 0)) (= (x910 1461501637330902918203684832716283019655932542975 x414) x1197) (= x414 (x648 x145)) (= (x910 1461501637330902918203684832716283019655932542975 x26) x1082) (= x145 (x752 64 x1082 2)))) (and (= x618 (ite x920 1 0)) x920))) x990)))
(assert (x238 x721))
(assert (x599 x1128))
(assert (x599 x623))
(assert (x599 x475))
(assert (< 10000 (x752 x274 x63 x695)))
(assert (x599 x407))
(assert (= x374 (x221 (x17 x162 x817 x249 x374 x1024 x310 x405 x1125))))
(assert (x238 x414))
(assert (x599 x1185))
(assert (x599 x81))
(assert (=> (>= 10000 x248) (= (x679 x248) 0)))
(assert (x599 x103))
(assert (x554 26959946667150639794667015087019630673637144422540572481103610249215))
(assert (= (and x1123 x381) x635))
(assert (= (x375 (x142 x162 x895 x51 x195 x211 x746)) x162))
(assert (= x982 (x281 (x17 x727 x982 x1062 x66 x846 x950 x1002 x103))))
(assert (x599 x66))
(assert (x599 x148))
(assert (= x162 (x375 (x6 x162 x344 x898 x100))))
(assert (= x30 (or x932 x71)))
(assert (x238 31))
(assert (x599 x162))
(assert (x599 x320))
(assert (x599 x903))
(assert (=> (<= x46 10000) (= 0 (x679 x46))))
(assert (= x829 (x1086 (x142 x727 x209 x829 x1182 x362 x682))))
(assert (x554 66559029714281558484110900056217435723262332508534932952963113331629997686784))
(assert (x856 x818))
(assert (=> (>= 10000 x673) (= 0 (x679 x673))))
(assert (= x798 (and (not x1189) x32)))
(assert (x599 x682))
(assert (= x924 (x281 (x142 x274 x924 x1059 x444 x806 x268))))
(assert (x1148 x1121))
(assert (x599 x1070))
(assert (=> (>= 10000 x249) (= (x679 x249) 0)))
(assert (x599 x46))
(assert (x554 452312848583266388373324160190187140051835877600158453279131187530910662656))
(assert (= x669 (x1086 (x752 x727 x44 x669))))
(assert (= x1209 (=> (and (or (and (and (= (x604 (+ x288 32)) x395) (= x721 (x732 x288)) (= x395 x760) (= x692 (x269 (- (mod (x161 1 (* (- 32 x90) 8)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1))) (= x497 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x692)) (= (x269 (- x647 x90)) x288) (= (x910 x497 x721) x4)) (not x39)) (and (= x647 x760) x39)) (and (= x90 (x910 31 x993)) (= (= 0 x90) x39) (= x647 (x604 (+ x1090 x993))))) x264)))
(assert (= x1037 (and x450 (not x650))))
(assert (x599 x1181))
(assert (x599 x130))
(assert (x599 x509))
(assert (= (x638 (x17 x1204 x1135 x466 x1108 x248 x332 x861 x119)) x119))
(assert (=> (<= x466 10000) (= (x679 x466) 0)))
(assert (not (x554 (x489 x1204 x1177))))
(assert (x599 x918))
(assert (x599 x913))
(assert (x599 x1191))
(assert (< 10000 (x17 x274 x754 x626 x379 x305 x969 x64 x292)))
(assert (< (x17 x1204 x1135 x466 x1108 x248 x332 x861 x119) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (and x743 x598) x429))
(assert (= (x20 (x142 x162 x895 x51 x195 x211 x746)) x211))
(assert (= x1081 (and x426 (not x285))))
(assert (=> (>= 10000 x1194) (= 0 (x679 x1194))))
(assert (=> (<= x664 10000) (= (x679 x664) 0)))
(assert (x582 x147))
(assert (x599 x1065))
(assert (= x556 (and x555 x946)))
(assert (= x92 (x1086 (x637 x274 x873 x92 x1045 x518 x320 x917))))
(assert (x238 x756))
(assert (x599 x1121))
(assert (x238 255))
(assert (x599 x773))
(assert (not (x554 (x142 x1204 x837 x1191 x1144 x964 x309))))
(assert (x599 x669))
(assert (= (and (not x843) x819) x498))
(assert (x599 x1016))
(assert (= (and x474 x611) x42))
(assert (x599 x369))
(assert (x599 x735))
(assert (x599 x587))
(assert (x599 x1119))
(assert (x599 x685))
(assert (= x287 (and x75 x772)))
(assert (x599 x656))
(assert (=> (<= x715 10000) (= 0 (x679 x715))))
(assert (> (x489 x162 x471) 10000))
(assert (x599 x846))
(assert (x599 x315))
(assert (x404 x614))
(assert (=> (<= x1059 10000) (= (x679 x1059) 0)))
(assert (x599 x862))
(assert (x599 x469))
(assert (x599 x300))
(assert (= (x1086 (x6 x1204 x996 x673 x765)) x673))
(assert (= 0 (x679 26959946667150639794667015087019630673637144422540572481103610249215)))
(assert (x110 (+ 31 x307) 32))
(assert (x599 x663))
(assert (= x93 (x1086 (x361 x1204 x265 x93 x304 x1180))))
(assert (=> (>= 10000 x625) (= (x679 x625) 0)))
(assert (x386 (x501 2 (* 8 (- 32 x781)))))
(assert (= x820 (x897 (x637 x1204 x686 x143 x1194 x260 x820 x528))))
(assert (< 10000 (x17 x1204 x1135 x466 x1108 x248 x332 x861 x119)))
(assert (= x630 (=> (and (= false x951) (= x482 x1075) (= false x1183) (= x954 0) (= x293 (or (not (and (<= 0 x659) (>= 1461501637330902918203684832716283019655932542975 x659))) (= (x1011 x659) 0) (x922 x1075 x659))) (= x643 false) (= x1034 (x1011 x482)) (<= x1034 1461501637330902918203684832716283019655932542975) (= x1202 (= x1034 0)) (= x1078 (and x293 x840)) (= (not x1202) x840) (>= x1034 0) (= false x811)) x1078)))
(assert (< (x142 x274 x924 x1059 x444 x806 x268) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (=> (= (= x46 0) x845) (and (=> (and (and (or (and (and (< (x1020 x492 x86) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x1098 (x615 (x1020 x492 x86))) (>= x492 1) (= x175 x1098)) (not x213)) (and x213 (= 0 x175))) (and (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x193 x135))) (= (x604 (+ x193 x135)) x492) (= (= 0 x492) x213))) (not x845)) x896) (=> (and (and (or (and (not x598) (= x23 x838)) (and (= x23 x86) x598)) (= (> x838 x86) x598)) x845) x531))) x245))
(assert (x599 x481))
(assert (x599 x250))
(assert (x599 x1195))
(assert (x386 64))
(assert (x599 x259))
(assert (= x764 (and x125 (not x228))))
(assert (=> (>= 10000 x833) (= 0 (x679 x833))))
(assert (x599 x982))
(assert (x599 x651))
(assert (= x257 (and x650 x450)))
(assert (x599 x2))
(assert (x186 x818 32))
(assert (=> (<= x1050 10000) (= (x679 x1050) 0)))
(assert (=> (<= x1164 10000) (= 0 (x679 x1164))))
(assert (x599 x945))
(assert (x599 x1098))
(assert (not (x554 (x752 64 x55 x170))))
(assert (x599 x335))
(assert (x599 x289))
(assert (x599 x324))
(assert (x599 x344))
(assert (=> (>= 10000 x746) (= (x679 x746) 0)))
(assert (x599 x292))
(assert (x599 x842))
(assert (= (x897 (x637 x274 x873 x92 x1045 x518 x320 x917)) x320))
(assert (x599 x309))
(assert (x554 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (x386 65))
(assert (< 10000 (x142 x274 x924 x1059 x444 x806 x268)))
(assert (= x1182 (x221 (x142 x727 x209 x829 x1182 x362 x682))))
(assert (=> (>= 10000 x547) (= (x679 x547) 0)))
(assert (x1148 x780))
(assert (x599 x149))
(assert (x599 x975))
(assert (x599 x962))
(assert (x599 x678))
(assert (x599 x233))
(assert (< 10000 (x142 x1204 x837 x1191 x1144 x964 x309)))
(assert (x582 x283))
(assert (=> (<= x1190 10000) (= (x679 x1190) 0)))
(assert (< (x752 64 x55 x170) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x599 x1093))
(assert (= (x637 x274 x873 x92 x1045 x518 x320 x917) (x679 (x637 x274 x873 x92 x1045 x518 x320 x917))))
(assert (= x779 (x221 (x361 x625 x1048 x141 x779 x975))))
(assert (x394 x1141))
(assert (x599 x63))
(assert (x599 x692))
(assert (= (x679 (x6 x162 x344 x898 x100)) (x6 x162 x344 x898 x100)))
(assert (x599 x600))
(assert (=> (<= x279 10000) (= (x679 x279) 0)))
(assert (= x1173 (x897 (x637 x162 x701 x664 x358 x735 x1173 x85))))
(assert (x599 x640))
(assert (= (x1086 (x17 x162 x817 x249 x374 x1024 x310 x405 x1125)) x249))
(assert (= x575 (x281 (x6 x727 x575 x703 x773))))
(assert (= (x679 (x6 x727 x575 x703 x773)) (x6 x727 x575 x703 x773)))
(assert (= x195 (x221 (x142 x162 x895 x51 x195 x211 x746))))
(assert (= x649 (x281 (x489 x727 x649))))
(assert (x599 x357))
(assert (= (x1086 (x637 x1204 x686 x143 x1194 x260 x820 x528)) x143))
(assert (= x831 (and x971 (not x1026))))
(assert (= (x361 x625 x1048 x141 x779 x975) (x679 (x361 x625 x1048 x141 x779 x975))))
(assert (= x957 (or x734 x194)))
(assert (x599 x1035))
(assert (x599 x803))
(assert (x599 x768))
(assert (= (x375 (x752 64 x168 8)) 64))
(assert (= x1146 (x1086 (x637 x727 x367 x1146 x791 x835 x715 x315))))
(assert (x599 x78))
(assert (=> (>= 10000 x837) (= 0 (x679 x837))))
(assert (= (or x1013 x933) x336))
(assert (x599 x308))
(assert (x599 x820))
(assert (= x1045 (x221 (x637 x274 x873 x92 x1045 x518 x320 x917))))
(assert (x599 x1046))
(assert (= (x20 (x637 x274 x873 x92 x1045 x518 x320 x917)) x518))
(assert (x599 x1207))
(assert (x599 x891))
(assert (=> (>= 10000 x379) (= (x679 x379) 0)))
(assert (=> (<= x982 10000) (= (x679 x982) 0)))
(assert (x313 (+ x307 31)))
(assert (x599 x712))
(assert (x599 x123))
(assert (not (x554 (x361 x162 x29 x158 x81 x952))))
(assert (= x952 (x20 (x361 x162 x29 x158 x81 x952))))
(assert (= (x638 (x17 x727 x982 x1062 x66 x846 x950 x1002 x103)) x103))
(assert (not (x554 (x489 x727 x649))))
(assert (= x471 (x281 (x489 x162 x471))))
(assert (= (x20 (x637 x1204 x686 x143 x1194 x260 x820 x528)) x260))
(assert (x554 115792089237316195423570985008687907853269984665640564039457584007913129639844))
(assert (= x196 (or x287 x787)))
(assert (x599 x26))
(assert (x599 x564))
(assert (=> (>= 10000 x846) (= (x679 x846) 0)))
(assert (x599 x154))
(assert (x599 x452))
(assert (x599 x680))
(assert (x599 x1162))
(assert (=> (<= x1182 10000) (= 0 (x679 x1182))))
(assert (x599 x1173))
(assert (= (x679 (x17 x625 x91 x1050 x1041 x154 x1158 x815 x1190)) (x17 x625 x91 x1050 x1041 x154 x1158 x815 x1190)))
(assert (= (x679 (x142 x1204 x837 x1191 x1144 x964 x309)) (x142 x1204 x837 x1191 x1144 x964 x309)))
(assert (x599 x409))
(assert (x599 x655))
(assert (> (x142 x625 x595 x801 x737 x882 x546) 10000))
(assert (x599 x323))
(assert (= (x897 (x17 x727 x982 x1062 x66 x846 x950 x1002 x103)) x950))
(assert (x599 x805))
(assert (x599 x814))
(assert (= x700 (=> (and (or (and (and (= x634 x15) (= (x269 (- x176 2500)) x15)) x536) (and (= x212 x634) (not x536))) (and (= x536 (= 0 x86)) (= x915 (x604 (+ x419 32))) (<= x419 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= (x604 (+ x307 x915)) x488) (= x828 (x139 (+ 31 x307) 32)) (= x205 (x604 (+ (mod (+ x641 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x419))) (<= x419 115792089237316195423570985008687907853269984665640564039457584007913129639934) (< x419 x205) (= x609 (x139 x354 63)) (= x983 (x604 (+ x212 2500))) (= (ite (< x609 x983) x983 x609) x620) (<= x419 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= (x615 (* 64 x212)) x354) (= x641 (* 32 x828)) (not (< x277 x940)) (<= 1 x205) (= x940 (x604 (+ x620 500))))) x440)))
(assert (x554 57896044618658097711785492504343953926634992332820282019728792003956564819967))
(assert (= (=> (and (or (not x1026) x1026) (= (= 0 x654) x1026)) x82) x601))
(assert (x238 x500))
(assert (not (x554 (x361 x274 x795 x5 x1211 x1160))))
(assert (x599 x770))
(assert (x599 x952))
(assert (= x975 (x20 (x361 x625 x1048 x141 x779 x975))))
(assert (=> (<= x1180 10000) (= (x679 x1180) 0)))
(assert (= x274 (x375 (x489 x274 x31))))
(assert (= (and x1114 (not x906)) x32))
(assert (= (x281 (x361 x162 x29 x158 x81 x952)) x29))
(assert (x599 x595))
(assert (x599 x222))
(assert (x599 x934))
(assert (= x625 (x375 (x6 x625 x833 x944 x2))))
(assert (not (x554 (x489 x625 x1))))
(assert (x599 x612))
(assert (x599 x613))
(assert (x599 x332))
(assert (x599 x218))
(assert (x599 x797))
(assert (x599 x810))
(assert (x599 x523))
(assert (x599 x1170))
(assert (x599 x374))
(assert (x599 x388))
(assert (= (x752 64 x1082 2) (x679 (x752 64 x1082 2))))
(assert (= (x679 4294967295) 0))
(assert (x599 x99))
(assert (=> (>= 10000 x274) (= (x679 x274) 0)))
(assert (=> (<= x975 10000) (= (x679 x975) 0)))
(assert (= (and x353 x1117) x371))
(assert (x599 x303))
(assert (< 10000 (x142 x727 x209 x829 x1182 x362 x682)))
(assert (= x1108 (x221 (x17 x1204 x1135 x466 x1108 x248 x332 x861 x119))))
(assert (x599 x350))
(assert (x599 x553))
(assert (x599 x158))
(assert (x599 x841))
(assert (x599 x998))
(assert (=> (<= x829 10000) (= 0 (x679 x829))))
(assert (x599 x944))
(assert (< (x489 x1204 x1177) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x599 x892))
(assert (x110 (+ x378 31) 32))
(assert (not (x554 (x752 64 x168 8))))
(assert (x599 x217))
(assert (x599 x177))
(assert (x386 (x501 2 (* (- 32 x90) 8))))
(assert (= 0 (x679 115792089237316195423570985008687907853269984665640564039457584007913129639836)))
(assert (= (x679 66559029714281558484110900056217435723262332508534932952963113331629997686784) 0))
(assert (x599 x1045))
(assert (= (x1086 (x752 64 x55 x170)) x170))
(assert (x599 x522))
(assert (= x1211 (x221 (x361 x274 x795 x5 x1211 x1160))))
(assert (x599 x318))
(assert (x599 x73))
(assert (x1199 x497 x721))
(assert (not (x554 (x830 0))))
(assert (=> (<= x779 10000) (= 0 (x679 x779))))
(assert (=> (<= x964 10000) (= (x679 x964) 0)))
(assert (x599 x345))
(assert (= (x375 (x752 x274 x63 x695)) x274))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x637 x625 x1206 x172 x768 x88 x927 x469)))
(assert (x599 x159))
(assert (= (x752 x162 x984 x1029) (x679 (x752 x162 x984 x1029))))
(assert (= (x375 (x637 x274 x873 x92 x1045 x518 x320 x917)) x274))
(assert (x599 x829))
(assert (x599 x607))
(assert (x599 x1130))
(assert (=> (<= x765 10000) (= 0 (x679 x765))))
(assert (x599 x408))
(assert (=> (<= x651 10000) (= (x679 x651) 0)))
(assert (x599 x701))
(assert (x386 x771))
(assert (= (x281 (x752 64 x168 8)) x168))
(assert (> (x361 x727 x1210 x547 x1164 x693) 10000))
(assert (x599 x172))
(assert (x599 x1031))
(assert (x599 x985))
(assert (x599 x87))
(assert (x554 1781416757497172237285707461672121659281076687163700985222424369352509686768))
(assert (= (x375 (x752 64 x1082 2)) 64))
(assert (x599 x316))
(assert (x599 x575))
(assert (x599 x662))
(assert (x599 x1019))
(assert (x599 x387))
(assert (x238 1461501637330902918203684832716283019655932542975))
(assert (x599 x908))
(assert (=> (<= x154 10000) (= (x679 x154) 0)))
(assert (> (x637 x1204 x686 x143 x1194 x260 x820 x528) 10000))
(assert (x386 x212))
(assert (= (x375 (x830 0)) 0))
(assert (x599 x195))
(assert (= (x221 (x17 x274 x754 x626 x379 x305 x969 x64 x292)) x379))
(assert (= (x375 (x6 x274 x1042 x322 x327)) x274))
(assert (= x1144 (x221 (x142 x1204 x837 x1191 x1144 x964 x309))))
(assert (x599 x419))
(assert (=> (>= 10000 x797) (= (x679 x797) 0)))
(assert (=> (>= 10000 x130) (= 0 (x679 x130))))
(assert (x599 x1041))
(assert (= 0 x1001))
(assert (x599 x373))
(assert (x599 x589))
(assert (= (x20 (x637 x727 x367 x1146 x791 x835 x715 x315)) x835))
(assert (= x528 (x510 (x637 x1204 x686 x143 x1194 x260 x820 x528))))
(assert (> (x6 x727 x575 x703 x773) 10000))
(assert (x599 x620))
(assert (x599 x330))
(assert (x599 x457))
(assert (= x158 (x1086 (x361 x162 x29 x158 x81 x952))))
(assert (x599 x984))
(assert (x599 x606))
(assert (x599 x596))
(assert (x599 x744))
(assert (x599 x411))
(assert (x599 x1094))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x637 x274 x873 x92 x1045 x518 x320 x917)))
(assert (= (x281 (x752 x1204 x279 x1079)) x279))
(assert (= (x679 (x489 x727 x649)) (x489 x727 x649)))
(assert (=> (<= x64 10000) (= 0 (x679 x64))))
(assert (x599 x665))
(assert (=> (>= 10000 x158) (= (x679 x158) 0)))
(assert (x582 x756))
(assert (=> (>= 10000 x882) (= 0 (x679 x882))))
(assert (=> (>= 10000 x518) (= 0 (x679 x518))))
(assert (x599 x917))
(assert (x404 x500))
(assert (x599 x133))
(assert (x599 x515))
(assert (= (and x216 (not x1150)) x104))
(assert (x599 x652))
(assert (x599 x500))
(assert (=> (<= x969 10000) (= 0 (x679 x969))))
(assert (x599 x100))
(assert (= x772 (or x1066 x312)))
(assert (= x71 (and x556 x3)))
(assert (= (and x994 (not x459)) x428))
(assert (= (x638 (x17 x274 x754 x626 x379 x305 x969 x64 x292)) x292))
(assert (x599 x270))
(assert (x238 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (=> (<= x265 10000) (= 0 (x679 x265))))
(assert (= x531 (=> (and (or (and (and (>= x771 1) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x1020 x771 x23)) (= x645 (x615 (x1020 x771 x23))) (= x645 x457)) (not x650)) (and x650 (= x457 0))) (and (not (>= (+ x135 x193) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (= 0 x771) x650) (= (x604 (+ x193 x135)) x771))) x485)))
(assert (x599 x693))
(assert (x599 x873))
(assert (and (= 27 (x1020 9 3)) (= (x1020 3 3) 9) (= 81 (x1020 27 3)) (= (x1020 9 9) 81)))
(assert (x554 53345939417071456220559631604471678769232717410092326094220293271952667181056))
(assert (x599 x488))
(assert (x238 x1141))
(assert (x599 x219))
(assert (x599 x801))
(assert (x599 x479))
(assert (x599 x520))
(assert (x313 x202))
(assert (x599 x725))
(assert (= x932 (and (not x3) x556)))
(assert (x599 x786))
(assert (< 10000 (x752 x1204 x279 x1079)))
(assert (x599 x118))
(assert (x599 x729))
(assert (= (=> (and (= x308 x640) (= x24 x694)) x114) x530))
(assert (= x1177 (x281 (x489 x1204 x1177))))
(assert (x599 x355))
(assert (= (or x764 x21) x1013))
(assert (x599 x164))
(assert (x599 x979))
(assert (= x1175 (and (not x338) x199)))
(assert (x599 x1136))
(assert (not (x554 (x361 x1204 x265 x93 x304 x1180))))
(assert (=> (<= x405 10000) (= (x679 x405) 0)))
(assert (=> (<= x1191 10000) (= 0 (x679 x1191))))
(assert (= (x679 (x142 x727 x209 x829 x1182 x362 x682)) (x142 x727 x209 x829 x1182 x362 x682)))
(assert (x599 x234))
(assert (x599 x86))
(assert (x554 4294967296))
(assert (= (x281 (x752 64 x1082 2)) x1082))
(assert (x599 x1108))
(assert (x313 63))
(assert (x599 x205))
(assert (x976 x492 x86))
(assert (x186 x1141 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= x625 (x375 (x142 x625 x595 x801 x737 x882 x546))))
(assert (x599 x864))
(assert (= (x375 (x489 x727 x649)) x727))
(assert (= (x20 (x17 x1204 x1135 x466 x1108 x248 x332 x861 x119)) x248))
(assert (> (x489 x625 x1) 10000))
(assert (x599 x684))
(assert (=> (<= x63 10000) (= 0 (x679 x63))))
(assert (x599 x763))
(assert (< 10000 (x752 64 x55 x170)))
(assert (x599 x35))
(assert (= x651 (x281 (x752 x625 x651 x797))))
(assert (= x117 (=> (and (= (x115 256) x887) (= x726 (x604 (+ x740 96))) (= x585 (not (> x818 128)))) (and x585 x1053))))
(assert (= (x615 (ite (< (* (- 32 x90) 8) 256) (x501 2 (* 8 (- 32 x90))) 0)) (x161 1 (* (- 32 x90) 8))))
(assert (x599 x747))
(assert (x186 x522 256))
(assert (> (x361 x274 x795 x5 x1211 x1160) 10000))
(assert (= x885 (and (not x58) x371)))
(assert (= 0 (x679 84814075808141314178395468817534025465894426928601295766380145544921651250904)))
(assert (=> (>= 10000 x768) (= (x679 x768) 0)))
(assert (= x1204 (x375 (x489 x1204 x1177))))
(assert (not (x554 (x361 x625 x1048 x141 x779 x975))))
(assert (x599 x516))
(assert (=> (>= 10000 x209) (= 0 (x679 x209))))
(assert (< 10000 (x6 x162 x344 x898 x100)))
(assert (x599 x90))
(assert (x599 x143))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x637 x1204 x686 x143 x1194 x260 x820 x528)))
(assert (=> (<= x791 10000) (= 0 (x679 x791))))
(assert (=> (<= x119 10000) (= 0 (x679 x119))))
(assert (x599 x1149))
(assert (=> (>= 10000 x148) (= 0 (x679 x148))))
(assert (= (=> (and (= x419 x308) (= x24 x26)) x865) x114))
(assert (= (or x7 x535) x513))
(assert (x599 x992))
(assert (x599 x184))
(assert (x599 x1057))
(assert (= (x679 115792089237316195423570985008687907853269984665640564039457584007913129639903) 0))
(assert (not (x554 (x361 x727 x1210 x547 x1164 x693))))
(assert (= x91 (x281 (x17 x625 x91 x1050 x1041 x154 x1158 x815 x1190))))
(assert (x599 x64))
(assert (=> (<= x984 10000) (= 0 (x679 x984))))
(assert (> (x361 x162 x29 x158 x81 x952) 10000))
(assert (= x682 (x897 (x142 x727 x209 x829 x1182 x362 x682))))
(assert (x599 x1087))
(assert (x554 115792089237316195423570985008687907853269984665640564039457584007913129639836))
(assert (x554 115792089237316195423570985008687907853269984665640564039457584007913129639903))
(assert (x599 x1188))
(assert (= x264 (=> (and (and (= (> x613 0) x228) (>= x1058 1) (= (x639 x959) x1058) (= (x269 (- x760 x640)) x36) (>= x1101 32)) (or (and (and (<= x1101 4294967295) (= 1 x234) (<= 32 x1101)) x228) (and (not x228) (= x234 x613)))) x519)))
(assert (x599 x602))
(assert (x599 x568))
(assert (x1148 x783))
(assert (= x1123 (or x832 x683 x84 x1081 x825)))
(assert (x599 x349))
(assert (x386 8))
(assert (x599 x305))
(assert (= (x221 (x142 x625 x595 x801 x737 x882 x546)) x737))
(assert (x599 x546))
(assert (=> (>= 10000 x93) (= 0 (x679 x93))))
(assert (x404 x738))
(assert (= x82 (=> (and (or x843 (and (not x843) (and (= x359 (x179 x578)) x821 x112 (>= x272 1) (= (ite (not (= 0 x654)) 1 0) x1130) (= (x639 x578) x272) (= x709 (x604 (+ 4 x597))) (= (<= x77 (x794 x612)) x112) (= (x910 1461501637330902918203684832716283019655932542975 x614) x578) (>= x841 1) (= x77 (x179 x612)) (>= 4294967295 x1121) (= x821 (= (x794 x578) x359)) (= (x604 (+ 32 x709)) x914)))) (and (= (x910 1461501637330902918203684832716283019655932542975 x614) x463) (= x843 (= x463 0)))) x630)))
(assert (x1148 x967))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x6 x162 x344 x898 x100)))
(assert (x599 x858))
(assert (x599 x783))
(assert (x599 x882))
(assert (= (and x467 (not x845)) x1178))
(assert (= 8 (x1086 (x752 64 x168 8))))
(assert (x599 x1160))
(assert (=> (<= x444 10000) (= (x679 x444) 0)))
(assert (x599 x155))
(assert (x599 x448))
(assert (x599 x22))
(assert (= (x281 (x752 64 x55 x170)) x55))
(assert (x599 x625))
(assert (x599 x938))
(assert (x599 x688))
(assert (= true x704))
(assert (= (x489 x625 x1) (x679 (x489 x625 x1))))
(assert (x404 (ite (< (* (- 32 x781) 8) 256) (x501 2 (* 8 (- 32 x781))) 0)))
(assert (x599 x435))
(assert (x599 x1084))
(assert (= (x375 (x361 x727 x1210 x547 x1164 x693)) x727))
(assert (= (x679 (x752 x625 x651 x797)) (x752 x625 x651 x797)))
(assert (=> (<= x1082 10000) (= (x679 x1082) 0)))
(assert (x238 115792089210356248756420345214020892766250353992003419616917011526809519390720))
(assert (x599 x454))
(assert (x599 x838))
(assert (= (x375 (x637 x1204 x686 x143 x1194 x260 x820 x528)) x1204))
(assert (= x996 (x281 (x6 x1204 x996 x673 x765))))
(assert (x599 x647))
(assert (= (x679 (x752 x274 x63 x695)) (x752 x274 x63 x695)))
(assert (= x927 (x897 (x637 x625 x1206 x172 x768 x88 x927 x469))))
(assert (= (x679 (x6 x625 x833 x944 x2)) (x6 x625 x833 x944 x2)))
(assert (x599 x1158))
(assert (=> (<= x950 10000) (= (x679 x950) 0)))
(assert (x599 x837))
(assert (x599 x246))
(assert (x599 x904))
(assert (= x8 (=> (and (= x346 (>= (x947 x612) x725)) (= (x401 x588) x201) (= (x269 (- x708 x419)) x121) (<= x1127 4294967295) (= (= (x947 x588) x201) x1060) (= (x639 x588) x1019) (>= x992 1) x1060 (>= x1019 1) x346 (= (x401 x612) x725)) x700)))
(assert (x599 x737))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x361 x727 x1210 x547 x1164 x693)))
(assert (= (x679 1786122754) 0))
(assert (x599 x180))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x752 x1204 x279 x1079)))
(assert (x599 x616))
(assert (x599 x654))
(assert (x599 x1048))
(assert (=> (>= 10000 x820) (= 0 (x679 x820))))
(assert (= (x1086 (x17 x1204 x1135 x466 x1108 x248 x332 x861 x119)) x466))
(assert (x599 x765))
(assert (x238 x283))
(assert (= (x679 (x361 x1204 x265 x93 x304 x1180)) (x361 x1204 x265 x93 x304 x1180)))
(assert (x599 x1134))
(assert (=> (>= 10000 x1071) (= 0 (x679 x1071))))
(assert (x599 x1144))
(assert (x599 x403))
(assert (= (x281 (x6 x274 x1042 x322 x327)) x1042))
(assert (x599 x721))
(assert (x599 x695))
(assert (= (and x474 (not x611)) x402))
(assert (x599 x1141))
(assert (x599 x860))
(assert (x599 x1012))
(assert (x599 x855))
(assert (= x1204 (x375 (x17 x1204 x1135 x466 x1108 x248 x332 x861 x119))))
(assert (x599 x1029))
(assert (= 0 (x679 1781416757497172237285707461672121659281076687163700985222424369352509686768)))
(assert (= (and x256 (not x39)) x465))
(assert (x599 x1151))
(assert (= (=> (and (and (and (= x1181 (x421 x148)) (= x148 x1132)) (and (and (and (= x852 x1162) (and (not (> x99 x458)) (not (< x458 x564)) (= false x65) (= x1170 x892) (= (+ x378 x564) x1195) (= (x139 (+ 31 x378) 32) x1120) (= x1025 (+ x870 4)) (= x46 (x910 1461501637330902918203684832716283019655932542975 x147)) (= (<= x625 224) x900) (not (< x458 x1195)) (= x1065 (+ 4 x655)) (= x342 x191) (= (x604 (+ x782 1)) x494) (= x307 (x622 x1065)) (= (+ x1162 x78) x276) (= x415 (x639 x612)) (= x53 false) (>= x276 0) (= (- x1105 x1162) x824) (= x275 128) (= x99 (+ 32 x1065)) (>= 127 x74) (= (x421 x137) x1105) (= (+ 160 x681) x763) (= x373 1786122754) (not (> x22 x458)) (= (x910 1461501637330902918203684832716283019655932542975 x756) x891) (= x921 (x910 255 x522)) (<= x307 4294967296) (= (* x1120 32) x681) (= x276 x842) (= (x1052 x612) x78) (<= x74 127) (= (+ 32 x1025) x564) (= x378 (x622 x1025)) (= (x269 (- (mod (+ x307 x763) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x763)) x625) (= x243 x520) (= x1132 x137) (>= x415 1) (= x133 x864) (= x259 (+ x378 160)) (= x782 (x1152 5)) (<= x276 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (+ x307 x99) x22) (= (x910 1461501637330902918203684832716283019655932542975 x283) x130) (<= x378 4294967296) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x78 x1162)))) (= x1131 x1132)) (and (= x98 x756) (= x870 (x866 292)) (= (x866 132) x212) (= x809 x1043) (= (x866 196) x86) (= x455 x655) (= x756 (x866 260)) (= x147 (x866 228)) (= x870 x744) (= x300 x191) (= (x866 68) x655) (= x1095 false) (= x522 (x866 100)) (= x1043 (x866 0)) (= x852 x600) (= (x866 164) x135) (<= x600 x1181) (= x522 x658) (= x135 x892) (<= x870 4294967296) (= x483 x147) (= x133 x86) (= x365 x283) (<= x655 4294967296) (= x300 (x866 36)) (= (x866 4) x283) (= x520 x212)))) (and x719 (= false x569) x717 (>= 1461501637330902918203684832716283019655932542975 x484) (= x717 x610) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x852) (<= 0 x1132) (= x966 x521) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x668) (>= x668 0) (>= 1461501637330902918203684832716283019655932542975 x792) (<= x14 115792089237316195423570985008687907853269984665640564039457584007913129639935) x1187 (<= x1132 1461501637330902918203684832716283019655932542975) (<= x491 1461501637330902918203684832716283019655932542975) (<= x67 4294967295) (= true x989) (>= x792 0) (>= x491 1) (= x271 true) (>= 1461501637330902918203684832716283019655932542975 x511) (= x612 x675) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x458) x521 (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1068) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x236) x677 (= x537 false) (= x491 (x1011 x774)) (= x512 1786122754) (= x1075 x774) (= 0 x329) (<= 0 x511) (<= 1 x612) (= 10 x192) (>= x458 388) (= x1109 x719) (>= x852 0) (>= x653 0) (= x1187 (> (x639 x612) 0)) (<= x612 1461501637330902918203684832716283019655932542975) (= x366 false) (>= x38 0) (<= x38 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x1068 0) (>= x14 0) (>= x236 0) (>= x67 0) (<= 0 x642) (<= x642 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= true x748) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x653) (= false x857) (= x1115 x677) (<= 0 x484))) (and (=> (and (= x1158 (x724 x685)) (= (+ x763 160) x1057) (= (x724 x97) x882) (= x397 (ite (= x625 0) x646 (ite (>= 32 x625) x406 (ite (<= x625 64) x876 (ite (>= 96 x625) x230 (ite (>= 128 x625) x47 (ite (>= 160 x625) x689 (ite (<= x625 192) x893 (ite (>= 224 x625) x319 x325))))))))) (= x1050 (x724 x318)) (= (x724 x763) x595) (= x1046 (+ 32 x134)) (= (+ x602 32) x929) (= (+ x763 128) x180) (= x97 (+ 96 x763)) (= x691 (+ x763 64)) (= x204 (+ 128 x763)) (= x1080 (+ 32 x968)) (= x172 (x724 x223)) (= (+ 32 x1166) x968) (= (x752 x625 x651 x797) x876) (< x763 x294) (= (+ x763 160) x1085) (= (x724 x204) x546) (= (+ 96 x763) x250) (= (x489 x625 x1) x406) (= (x724 x763) x1206) (= (x6 x625 x833 x944 x2) x230) (= x469 (x724 x1085)) (= (x142 x625 x595 x801 x737 x882 x546) x689) (= (+ x763 64) x146) (= x134 (+ 32 x929)) (= x2 (x724 x1069)) (= x893 (x637 x625 x1206 x172 x768 x88 x927 x469)) (= (x724 x250) x154) (= x823 (+ 32 x763)) (= (+ 32 x763) x223) (= x779 (x724 x219)) (= x162 (x863 x763)) (= (+ x763 96) x879) (= (x17 x625 x91 x1050 x1041 x154 x1158 x815 x1190) x319) (= x516 (+ 64 x763)) (= x141 (x724 x1087)) (= x737 (x724 x691)) (= x801 (x724 x548)) (= x602 (+ 32 x352)) (= (+ 32 x763) x894) (= (x724 x1073) x1190) (= x815 (x724 x1057)) (= x540 (+ 32 x763)) (= (+ x763 96) x1023) (= x797 (x724 x823)) (= (+ x1046 32) x1166) (= (x724 x516) x768) (= x91 (x724 x763)) (= x942 (x269 (- x220 32))) (= (x830 0) x646) (= x294 (+ x728 32)) (= (x724 x879) x975) (= x596 (+ 32 x1080)) (= x651 (x724 x763)) (= x833 (x724 x763)) (= (+ 128 x763) x685) (= (+ x763 64) x1069) (= x728 (+ x596 32)) (= (+ 32 x763) x318) (= (x724 x763) x1) (= x219 (+ x763 64)) (= x944 (x724 x894)) (= (x724 x763) x1048) (= (+ 32 x198) x352) (= (x724 x1023) x88) (= x1073 (+ 192 x763)) (= x1087 (+ x763 32)) (= (+ 32 x763) x548) (= (+ 32 x763) x198) (= (<= x162 224) x859) (>= 1 x921) (= (x269 (- x294 x763)) x220) (= (x361 x625 x1048 x141 x779 x975) x47) (= x927 (x724 x180)) (= x1041 (x724 x146))) (and x859 (=> (and (= (+ 32 x1149) x453) (= (x863 x540) x895) (= (x863 x409) x211) (= (x863 x540) x984) (= x454 (+ x540 128)) (= x310 (x863 x545)) (= (x863 x233) x195) (= x532 (+ 32 x678)) (= (+ x540 128) x545) (= x1149 (+ x294 32)) (= x470 (+ 32 x540)) (= (x6 x162 x344 x898 x100) x1126) (= (+ 160 x540) x1084) (= (<= x274 224) x948) (= (x863 x636) x374) (= (+ 96 x540) x706) (= x51 (x863 x403)) (= (x863 x540) x471) (= (x863 x1112) x1024) (= x81 (x863 x189)) (= x358 (x863 x35)) (= x687 (+ 160 x540)) (= (x863 x470) x898) (= x836 (x637 x162 x701 x664 x358 x735 x1173 x85)) (= x400 (ite (= 0 x162) x438 (ite (>= 32 x162) x619 (ite (<= x162 64) x1102 (ite (>= 96 x162) x1126 (ite (<= x162 128) x339 (ite (<= x162 160) x909 (ite (>= 192 x162) x836 (ite (<= x162 224) x628 x938))))))))) (= (+ x453 32) x678) (= x403 (+ x540 32)) (= x100 (x863 x389)) (= (x863 x540) x701) (= (+ 64 x540) x389) (= (+ x540 32) x1171) (= (x17 x162 x817 x249 x374 x1024 x310 x405 x1125) x628) (< x294 x532) (= (x863 x540) x29) (= (+ x540 96) x908) (= x839 (+ 32 x540)) (= (x361 x162 x29 x158 x81 x952) x339) (= (+ x294 32) x568) (= (x489 x162 x471) x619) (= (+ 32 x540) x770) (= x918 (+ x540 32)) (= (+ 192 x540) x152) (= x249 (x863 x918)) (= x158 (x863 x1171)) (= (+ x540 64) x233) (= x438 (x830 0)) (= x817 (x863 x540)) (= (x863 x908) x952) (= (+ x540 96) x1112) (= (x863 x152) x1125) (= x189 (+ x540 64)) (= (x863 x839) x1029) (= x746 (x863 x684)) (= x1102 (x752 x162 x984 x1029)) (= x118 (x269 (- x755 32))) (= x684 (+ 128 x540)) (= x664 (x863 x770)) (= (x925 x294) x274) (= x636 (+ x540 64)) (= (x269 (- x532 x294)) x755) (= (+ 96 x540) x409) (= (x863 x540) x344) (= (x142 x162 x895 x51 x195 x211 x746) x909) (= x405 (x863 x1084)) (= (+ x540 64) x35) (= (x863 x454) x1173) (= x85 (x863 x687)) (= (x863 x706) x735)) (and x948 (=> (and (= x518 (x925 x418)) (= x481 (+ x572 32)) (= (+ 128 x568) x217) (= x877 (+ x388 1)) (= x124 (x142 x274 x924 x1059 x444 x806 x268)) (= x407 (+ 96 x568)) (= (x637 x274 x873 x92 x1045 x518 x320 x917) x505) (= (+ x568 160) x1051) (= x958 (+ x568 128)) (= (+ 128 x568) x749) (= (x6 x274 x1042 x322 x327) x1196) (= (x17 x274 x754 x626 x379 x305 x969 x64 x292) x562) (= x385 (+ x568 32)) (= x1045 (x925 x1070)) (= x1159 (+ x568 160)) (= x1160 (x925 x1031)) (= (+ x568 32) x1179) (= x320 (x925 x217)) (= (x925 x568) x1042) (= x424 (+ x568 32)) (= (x925 x80) x444) (= x969 (x925 x958)) (= (x925 x416) x1211) (= x1077 (ite (= 0 x274) x434 (ite (>= 32 x274) x255 (ite (>= 64 x274) x1064 (ite (>= 96 x274) x1196 (ite (>= 128 x274) x543 (ite (>= 160 x274) x124 (ite (>= 192 x274) x505 (ite (>= 224 x274) x562 x254))))))))) (= (+ x532 32) x388) (= (+ x568 64) x656) (= x92 (x925 x48)) (= x268 (x925 x749)) (= (x925 x568) x63) (= x1059 (x925 x385)) (= x695 (x925 x1179)) (= (+ 32 x568) x27) (< x532 x108) (= x48 (+ x568 32)) (= (x925 x424) x322) (= x255 (x489 x274 x31)) (= (>= 224 x727) x333) (= (x925 x1159) x64) (= x949 (+ 32 x568)) (= x416 (+ 64 x568)) (= x727 (x827 x532)) (= x1031 (+ x568 96)) (= (+ 64 x568) x542) (= x795 (x925 x568)) (= (x830 0) x434) (= (x752 x274 x63 x695) x1064) (= x418 (+ 96 x568)) (= (x361 x274 x795 x5 x1211 x1160) x543) (= x31 (x925 x568)) (= x40 (+ x568 96)) (= x924 (x925 x568)) (= x392 (x269 (- x1017 32))) (= (+ x568 192) x553) (= x305 (x925 x407)) (= (x925 x1051) x917) (= (+ 64 x568) x80) (= x108 (+ x481 32)) (= x292 (x925 x553)) (= x806 (x925 x40)) (= (x925 x568) x754) (= x572 (+ 1 x877)) (= x1070 (+ x568 64)) (= (x925 x949) x5) (= (x925 x542) x327) (= x761 (+ 32 x532)) (= x379 (x925 x656)) (= (x925 x27) x626) (= x1017 (x269 (- x108 x532))) (= x873 (x925 x568))) (and (=> (and (= (x827 x551) x1062) (= x44 (x827 x761)) (> x640 x108) (= x851 (+ 32 x761)) (= (x827 x761) x575) (= (x827 x761) x367) (= x197 (+ 32 x761)) (= x640 (+ 32 x108)) (= (+ x761 32) x328) (= x362 (x827 x334)) (= x66 (x827 x587)) (= (x827 x197) x1146) (= (x827 x527) x703) (= (+ x761 64) x860) (= (x827 x1151) x835) (= x587 (+ 64 x761)) (= (+ 96 x761) x652) (= x715 (x827 x1000)) (= x506 (+ 160 x761)) (= (x827 x761) x1210) (= x214 (+ 192 x761)) (= x103 (x827 x214)) (= (x827 x826) x547) (= (+ x761 64) x52) (<= 1 x712) (= x315 (x827 x960)) (= x1030 (+ 64 x761)) (= x16 (+ x761 64)) (= x712 (x648 4)) (= x334 (+ x761 96)) (= (x827 x1030) x1182) (>= 1781416757497172237285707461672121659281076687163700985222424369352509686768 x712) (= x449 (x716 x202 248)) (= x878 (+ x761 128)) (= x1002 (x827 x506)) (= (x827 x761) x209) (= (+ 160 x761) x960) (= (x489 x727 x649) x225) (= x425 (x1145 192)) (= (x827 x16) x791) (= 0 x998) (= (x752 x727 x44 x669) x739) (<= 65 x662) (= x881 (x830 0)) (= x846 (x827 x345)) (= x527 (+ 32 x761)) (= x432 (x17 x727 x982 x1062 x66 x846 x950 x1002 x103)) (= x451 (x637 x727 x367 x1146 x791 x835 x715 x315)) (= x694 (x1145 160)) (= (x142 x727 x209 x829 x1182 x362 x682) x240) (= (+ 128 x761) x1000) (= x826 (+ x761 32)) (= (= 0 x449) x499) (= x1188 (+ x761 128)) (= (+ x761 96) x1151) (= (ite (= x727 0) x881 (ite (<= x727 32) x225 (ite (<= x727 64) x739 (ite (<= x727 96) x953 (ite (>= 128 x727) x107 (ite (>= 160 x727) x240 (ite (<= x727 192) x451 (ite (<= x727 224) x432 x1201)))))))) x55) (= x693 (x827 x652)) (= x829 (x827 x851)) (= (+ x761 32) x551) (= x965 65) (= x953 (x6 x727 x575 x703 x773)) (= x345 (+ 96 x761)) (not (< x662 x855)) (= (* x712 65) x855) (= x649 (x827 x761)) (= x202 (x1145 224)) (= x662 (x1145 128)) (= x950 (x827 x1188)) (= x669 (x827 x328)) (= x1164 (x827 x860)) (= x773 (x827 x52)) (= x107 (x361 x727 x1210 x547 x1164 x693)) (= x682 (x827 x878)) (= (x827 x761) x982)) (and (=> (and (and (= (x269 (- x515 x623)) x665) (= (x604 (+ x963 x127)) x286) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x127 x963))) (= x33 (* 65 x712)) (= (x604 (+ 32 x515)) x1090) (not (> x33 x425)) (<= x963 115792089237316195423570985008687907853269984665640564039457584007913129639838) (= x959 (x910 1461501637330902918203684832716283019655932542975 x694)) (= x623 (x604 (+ 4 x640))) (<= 65 x425) (not (< x207 x127)) (not (< x1155 x286)) (= 32 x123) (= x854 (x348 x503)) (= 65 x688) (>= x207 97) (>= 1781416757497172237285707461672121659281076687163700985222424369352509686767 x712) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639903 x425) (= x963 (x1145 x503)) (= (x1145 128) x207) (= (x604 (+ 160 x425)) x503) (= (+ x425 32) x127) (<= 1 x712) (= (x604 (+ x1134 32)) x515) (= x1134 (x604 (+ x623 32))) (= (x341 x503) x993) (= x353 (< 0 x993)) (= (x1145 128) x1155) (= x427 32) (= (x604 (+ 32 x503)) x633)) x499) (and (=> (and (and (= x58 (< 32 x993)) (= (x341 x633) x60)) x353) (and (=> (not x58) x1209) (=> (and (and (= x486 (< 64 x993)) (= x999 (x604 (+ x1090 32))) (= x126 (x604 (+ x633 32))) (= x767 (x1118 x126))) x58) (and (=> (and (and (= (> x993 96) x459) (= (x604 (+ x1090 64)) x372) (= x73 (x604 (+ 64 x633))) (= x263 (x76 x73))) x486) (and (=> (not x459) x1209) (=> x459 x83))) (=> (not x486) x1209))))) (=> (not x353) x1209))) (=> (and (not x499) (= (= 1 x449) x946)) (and (=> (and (and (and (= x1156 (x910 1461501637330902918203684832716283019655932542975 x694)) (= x3 (not (= x1131 x1156))) (= x799 (ite x3 1 0))) (or (and (and (= (x910 1461501637330902918203684832716283019655932542975 x694) x168) (= (x752 64 x55 x170) x943) (<= 1 x1176) (= x170 (x752 64 x168 8)) (= x1176 (x648 x943))) x3) (and (not x3) (= x799 0)))) x946) x530) (=> (and (= (> x449 30) x1150) (not x946)) (and (=> x1150 x1028) (=> (and (not x1150) (and (not (= x640 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (= (x604 (+ x606 32)) x1035) (= (x604 (+ x640 32)) x496) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x640)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x640) (= x631 (x604 (+ 32 x496))) (= x1012 x246) (= x246 (x258 x289)) (= x525 (x13 x504 x442 x326 x323)) (= x496 x324) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x640)) (< x640 x496) (= 128 x156) (= x323 (x1124 (x604 (+ 96 x496)))) (>= 1461501637330902918203684832716283019655932542975 x525) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x640) (= x289 (x269 (- x496 32))) (= (x1124 x496) x504) (= x606 (x604 (+ 32 x631))) (= (x1124 (x604 (+ x496 64))) x326) (<= x640 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= (x1124 (x604 (+ 32 x496))) x442) (= x206 (x269 (- x496 32))))) x970))))))) x333)))))) x900)) x1096))
(assert (x599 x307))
(assert (x599 x262))
(assert (= x370 (=> (and (not (> x171 x1004)) (= x193 (x269 (- x1004 x171))) (= (ite (= 0 (ite (= 0 x654) (ite (= 0 x212) 1 0) (ite (= x654 0) 1 0))) (ite (= 0 x654) (ite (= 0 x212) 1 0) (ite (= 0 x654) 1 0)) (ite (= x86 0) 1 0)) x335) (= 0 x335) (= (> x86 0) x916)) (and (=> (and (and (or (and x584 (= x484 x1071)) (and (not x584) (= x1071 x891))) (= (= x891 0) x584)) x916) x245) (=> (and (not x916) (and (= x597 x205) (= x291 0))) x601)))))
(assert (> (x752 x625 x651 x797) 10000))
(assert (= (x489 x162 x471) (x679 (x489 x162 x471))))
(assert (> (x637 x727 x367 x1146 x791 x835 x715 x315) 10000))
(assert (x1198 x738))
(assert (= x625 (x375 (x17 x625 x91 x1050 x1041 x154 x1158 x815 x1190))))
(assert (x599 x1103))
(assert (= x232 (or x104 x722)))
(assert (x599 x586))
(assert (x238 x26))
(assert (< (x752 x274 x63 x695) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (x1086 (x6 x727 x575 x703 x773)) x703))
(assert (x599 x1051))
(assert (x599 x504))
(assert (x599 x1107))
(assert (x313 (+ 31 x378)))
(assert (x599 x1082))
(assert (x599 x870))
(assert (= (x897 (x142 x162 x895 x51 x195 x211 x746)) x746))
(assert (x557 x522))
(assert (x599 x458))
(assert (=> (<= x927 10000) (= 0 (x679 x927))))
(assert (x599 x833))
(assert (x582 x26))
(assert (= x162 (x375 (x17 x162 x817 x249 x374 x1024 x310 x405 x1125))))
(assert (x599 x191))
(assert (x554 115792089237316195423570985008687907853269984665640564039457584007913129639934))
(assert (x554 10019309979067222254582373821846632475949454479833780424560900009889672200192))
(assert (=> (<= x727 10000) (= 0 (x679 x727))))
(assert (x599 x175))
(assert (< 10000 (x489 x727 x649)))
(assert (= (x679 115792089237316195423570985008687907853269984665640564039457584007913129639934) 0))
(assert (= (x375 (x361 x274 x795 x5 x1211 x1160)) x274))
(assert (x599 x545))
(assert (x599 x887))
(assert (=> (<= x332 10000) (= (x679 x332) 0)))
(assert (=> (>= 10000 x924) (= (x679 x924) 0)))
(assert (x599 x166))
(assert (= (x221 (x17 x625 x91 x1050 x1041 x154 x1158 x815 x1190)) x1041))
(assert (x599 x417))
(assert (x599 x253))
(assert (x599 x826))
(assert (= (and x1186 x1138) x730))
(assert (x404 x147))
(assert (< (x17 x274 x754 x626 x379 x305 x969 x64 x292) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x45 65 x712))
(assert (x599 x817))
(assert (x599 x23))
(assert (= x251 (and (not x920) x336)))
(assert (= x846 (x20 (x17 x727 x982 x1062 x66 x846 x950 x1002 x103))))
(assert (= (x375 (x637 x625 x1206 x172 x768 x88 x927 x469)) x625))
(assert (= x199 (or x10 x251)))
(assert (=> (>= 10000 x85) (= (x679 x85) 0)))
(assert (x599 x1204))
(assert (x238 x862))
(assert (not (x554 (x142 x274 x924 x1059 x444 x806 x268))))
(assert (< (x361 x274 x795 x5 x1211 x1160) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x599 x202))
(assert (x599 x223))
(assert (x404 x818))
(assert (=> (>= 10000 x168) (= 0 (x679 x168))))
(assert (x599 x480))
(assert (= (x1086 (x142 x274 x924 x1059 x444 x806 x268)) x1059))
(assert (= (x679 (x637 x162 x701 x664 x358 x735 x1173 x85)) (x637 x162 x701 x664 x358 x735 x1173 x85)))
(assert (x599 x1105))
(assert (x599 x699))
(assert (x599 x799))
(assert (x599 x1201))
(assert (x599 x178))
(assert (x599 x571))
(assert (x599 x728))
(assert (x599 x1030))
(assert (x404 x862))
(assert (= (x679 115792089210356248756420345214020892766250353992003419616917011526809519390720) 0))
(assert (x554 11430537079145650693387304458692941425836787954612963690241153482819318579200))
(assert (x599 x1179))
(assert (= (and x460 (not x844)) x832))
(assert (= x1210 (x281 (x361 x727 x1210 x547 x1164 x693))))
(assert (x386 x23))
(assert (x599 x760))
(assert (= (and x536 x513) x1047))
(assert (=> (>= 10000 x1125) (= 0 (x679 x1125))))
(assert (x599 x372))
(assert (x599 x755))
(assert (< (x637 x162 x701 x664 x358 x735 x1173 x85) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (x1086 (x17 x625 x91 x1050 x1041 x154 x1158 x815 x1190)) x1050))
(assert (= x84 (and x1208 (not x972))))
(assert (= x519 (=> (and (= (x910 115792089210356248756420345214020892766250353992003419616917011526809519390720 x862) x757) (<= 1 x234) (= x26 x694) (= x862 (x723 x640)) (= x757 10019309979067222254582373821846632475949454479833780424560900009889672200192) (= x640 x419)) x865)))
(assert (x599 x715))
(assert (=> (<= x1108 10000) (= 0 (x679 x1108))))
(assert (= x937 (and (not x353) x1117)))
(assert (x599 x449))
(assert (not (x554 (x17 x1204 x1135 x466 x1108 x248 x332 x861 x119))))
(assert (= x917 (x510 (x637 x274 x873 x92 x1045 x518 x320 x917))))
(assert (x599 x767))
(assert (= (x375 (x489 x162 x471)) x162))
(assert (< (x752 64 x168 8) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x45 8 (- 32 x781)))
(assert (not (x554 (x752 x1204 x279 x1079))))
(assert (x45 32 x1120))
(assert (x599 x629))
(assert (x599 x959))
(assert (=> (>= 10000 x141) (= 0 (x679 x141))))
(assert (= x312 (and x1178 (not x213))))
(assert (= x85 (x510 (x637 x162 x701 x664 x358 x735 x1173 x85))))
(assert (= (x510 (x17 x274 x754 x626 x379 x305 x969 x64 x292)) x64))
(assert (x599 x968))
(assert (= (x221 (x6 x162 x344 x898 x100)) x100))
(assert (x599 x265))
(assert (x599 x121))
(assert (> (x6 x274 x1042 x322 x327) 10000))
(assert (= x817 (x281 (x17 x162 x817 x249 x374 x1024 x310 x405 x1125))))
(assert (x599 x898))
(assert (x554 11307821214581659709333104004754678501295896940003961331978279688272766566400))
(assert (=> (>= 10000 x806) (= (x679 x806) 0)))
(assert (= x367 (x281 (x637 x727 x367 x1146 x791 x835 x715 x315))))
(assert (=> (>= 10000 x817) (= 0 (x679 x817))))
(assert (x599 x993))
(assert (=> (>= 10000 x195) (= 0 (x679 x195))))
(assert (x599 x877))
(assert (x599 x588))
(assert (x599 x1025))
(assert (= (x489 x274 x31) (x679 (x489 x274 x31))))
(assert (=> (<= x320 10000) (= (x679 x320) 0)))
(assert (x599 x198))
(assert (x1148 x904))
(assert (x599 x967))
(assert (= x625 (x375 (x489 x625 x1))))
(assert (= (and x1175 x1061) x460))
(assert (x186 x414 1461501637330902918203684832716283019655932542976))
(assert (x599 x1050))
(assert (= (x679 (x361 x162 x29 x158 x81 x952)) (x361 x162 x29 x158 x81 x952)))
(assert (x599 x1206))
(assert (=> (<= x31 10000) (= 0 (x679 x31))))
(assert (= (x897 (x142 x274 x924 x1059 x444 x806 x268)) x268))
(assert (x599 x1099))
(assert (x404 256))
(assert (x599 x761))
(assert (x599 x415))
(assert (> (x17 x727 x982 x1062 x66 x846 x950 x1002 x103) 10000))
(assert (= (x17 x727 x982 x1062 x66 x846 x950 x1002 x103) (x679 (x17 x727 x982 x1062 x66 x846 x950 x1002 x103))))
(assert (x599 x1146))
(assert (= x735 (x20 (x637 x162 x701 x664 x358 x735 x1173 x85))))
(assert (not (x554 (x6 x727 x575 x703 x773))))
(assert (x412 x862))
(assert (x554 32523383700587834770323112271211932718128200013265661849047136999858837557784))
(assert (= (x20 (x142 x625 x595 x801 x737 x882 x546)) x882))
(assert (< 10000 (x6 x1204 x996 x673 x765)))
(assert (=> (<= x1079 10000) (= 0 (x679 x1079))))
(assert (=> (>= 10000 x1211) (= (x679 x1211) 0)))
(assert (< (x6 x274 x1042 x322 x327) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (=> (<= x1048 10000) (= (x679 x1048) 0)))
(assert (x599 x549))
(assert (= (=> (and (= x291 x355) (= x215 x597)) x601) x462))
(assert (= (x20 (x361 x727 x1210 x547 x1164 x693)) x693))
(assert (x599 x666))
(assert (x599 x16))
(assert (x599 x927))
(assert (= x625 (x375 (x752 x625 x651 x797))))
(assert (> (x752 x162 x984 x1029) 10000))
(assert (= (x20 (x142 x1204 x837 x1191 x1144 x964 x309)) x964))
(assert (= (and x298 (not x916)) x321))
(assert (=> (<= x1 10000) (= 0 (x679 x1))))
(assert (x599 x740))
(assert (x599 x741))
(assert (x599 x583))
(assert (x599 x779))
(assert (= x265 (x281 (x361 x1204 x265 x93 x304 x1180))))
(assert (x386 x828))
(assert (x599 x314))
(assert (x386 32))
(assert (x1148 x1101))
(assert (= (x679 (x637 x727 x367 x1146 x791 x835 x715 x315)) (x637 x727 x367 x1146 x791 x835 x715 x315)))
(assert (=> (<= x29 10000) (= 0 (x679 x29))))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x17 x625 x91 x1050 x1041 x154 x1158 x815 x1190)))
(assert (= (x281 (x142 x727 x209 x829 x1182 x362 x682)) x209))
(assert (x599 x875))
(assert (x186 x756 1461501637330902918203684832716283019655932542976))
(assert (= (x375 (x637 x162 x701 x664 x358 x735 x1173 x85)) x162))
(assert (x599 x999))
(assert (x186 x614 1461501637330902918203684832716283019655932542976))
(assert (x599 x497))
(assert (x599 x328))
(assert (x599 x1071))
(assert (= (x281 (x752 x727 x44 x669)) x44))
(assert (x599 x304))
(assert (x599 x949))
(assert (= x727 (x375 (x17 x727 x982 x1062 x66 x846 x950 x1002 x103))))
(assert (x599 x201))
(assert (not (x554 (x752 64 x1082 2))))
(assert (= x327 (x221 (x6 x274 x1042 x322 x327))))
(assert (< 10000 (x752 64 x1082 2)))
(assert (x599 x453))
(assert (not (x554 (x752 x162 x984 x1029))))
(assert (=> (>= 10000 x703) (= 0 (x679 x703))))
(assert (x599 x958))
(assert (< 10000 (x361 x625 x1048 x141 x779 x975)))
(assert (x599 x220))
(assert (= x322 (x1086 (x6 x274 x1042 x322 x327))))
(assert (x599 x1112))
(assert (x599 x542))
(assert (= x984 (x281 (x752 x162 x984 x1029))))
(assert (x599 x27))
(assert (x109 x354 63))
(assert (x404 x756))
(assert (x599 x983))
(assert (x599 x132))
(assert (x404 1461501637330902918203684832716283019655932542976))
(assert (> (x752 64 x168 8) 10000))
(assert (x599 x31))
(assert (x186 (ite (< (* 8 (- 32 x781)) 256) (x501 2 (* (- 32 x781) 8)) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x599 x51))
(assert (x599 x212))
(assert (x599 x48))
(assert (=> (<= x325 10000) (= (x679 x325) 0)))
(assert (=> (<= x1173 10000) (= 0 (x679 x1173))))
(assert (x238 x614))
(assert (x599 x80))
(assert (x599 x691))
(assert (x599 x85))
(assert (x313 x354))
(assert (not (x554 (x637 x1204 x686 x143 x1194 x260 x820 x528))))
(assert (x599 x749))
(assert (=> (<= x143 10000) (= 0 (x679 x143))))
(assert (=> (>= 10000 x268) (= 0 (x679 x268))))
(assert (not (x554 (x752 x727 x44 x669))))
(assert (x599 x1))
(assert (= x12 (and x513 (not x536))))
(assert (= (x281 (x752 x274 x63 x695)) x63))
(assert (= (x510 (x17 x162 x817 x249 x374 x1024 x310 x405 x1125)) x405))
(assert (x599 x879))
(assert (< (x361 x162 x29 x158 x81 x952) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x599 x738))
(assert (= x1160 (x20 (x361 x274 x795 x5 x1211 x1160))))
(assert (x599 x1210))
(assert (x554 115792089237316195423570985008687907853269984665640564039457584007913129639838))
(assert (x599 x969))
(assert (= (x6 x274 x1042 x322 x327) (x679 (x6 x274 x1042 x322 x327))))
(assert (not (x554 (x637 x625 x1206 x172 x768 x88 x927 x469))))
(assert (= (=> (and (= x215 x120) (= x355 x457)) x462) x1142))
(assert (x186 x694 1461501637330902918203684832716283019655932542976))
(assert (=> (<= x1062 10000) (= 0 (x679 x1062))))
(assert (=> (>= 10000 x92) (= 0 (x679 x92))))
(assert (= (x281 (x489 x274 x31)) x31))
(assert (x599 x631))
(assert (= x216 (and (not x946) x555)))
(assert (= x1075 1))
(assert (x599 x15))
(assert (x386 (- 32 x781)))
(assert (x599 x197))
(assert (= (x510 (x17 x625 x91 x1050 x1041 x154 x1158 x815 x1190)) x815))
(assert (x599 x551))
(assert (not (x554 (x637 x274 x873 x92 x1045 x518 x320 x917))))
(assert (x599 x806))
(assert (x599 x362))
(assert (= (=> (and (or (and (= x708 x816) x381) (and (not x381) (and (= (x910 x262 x357) x913) (= x357 (x487 x523)) (= x523 (x269 (- x816 x781))) (= x303 (x604 (+ 32 x523))) (= x708 x303) (= x262 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x177)) (= (x269 (- (mod (x161 1 (* (- 32 x781) 8)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1)) x177)))) (and (= x781 (x910 31 x818)) (= (= 0 x781) x381) (= (x604 (+ x818 x740)) x816))) x8) x1053))
(assert (x599 x137))
(assert (= x768 (x221 (x637 x625 x1206 x172 x768 x88 x927 x469))))
(assert (= (=> (and (= x741 (x604 (+ x1090 96))) (= (x604 (+ 96 x633)) x299) (= x185 (not (< 128 x993))) (= (x1021 x299) x549)) (and x185 x1209)) x83))
(assert (= x1114 (or x12 x1047)))
(assert (x599 x280))
(assert (= x1164 (x221 (x361 x727 x1210 x547 x1164 x693))))
(assert (= (x221 (x637 x1204 x686 x143 x1194 x260 x820 x528)) x1194))
(assert (x599 x816))
(assert (x186 x26 1461501637330902918203684832716283019655932542976))
(assert (x599 x494))
(assert (= (x281 (x637 x162 x701 x664 x358 x735 x1173 x85)) x701))
(assert (=> (>= 10000 x952) (= 0 (x679 x952))))
(assert (x599 x334))
(assert (x599 x726))
(assert (=> (<= x1029 10000) (= 0 (x679 x1029))))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x752 x162 x984 x1029)))
(assert (x599 x1006))
(assert (=> (<= x51 10000) (= (x679 x51) 0)))
(assert (x856 x993))
(assert (= (x281 (x142 x1204 x837 x1191 x1144 x964 x309)) x837))
(assert (x599 x929))
(assert (= (x830 0) (x679 (x830 0))))
(assert (x599 x247))
(assert (x599 x416))
(assert (x599 x40))
(assert (x386 x492))
(assert (x599 x1180))
(assert (= x362 (x20 (x142 x727 x209 x829 x1182 x362 x682))))
(assert (= x1191 (x1086 (x142 x1204 x837 x1191 x1144 x964 x309))))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x6 x727 x575 x703 x773)))
(assert (< (x6 x625 x833 x944 x2) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (not (x554 (x637 x727 x367 x1146 x791 x835 x715 x315))))
(assert (=> (>= 10000 x367) (= (x679 x367) 0)))
(assert (= 2 (x1086 (x752 64 x1082 2))))
(assert (x599 x1080))
(assert (x599 x1182))
(assert (= (and x844 x460) x1208))
(assert (x186 (ite (> 256 (* (- 32 x90) 8)) (x501 2 (* (- 32 x90) 8)) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (x142 x162 x895 x51 x195 x211 x746) (x679 (x142 x162 x895 x51 x195 x211 x746))))
(assert (x554 115792089237316195423570985008687907853269984665640564039457584007913129639906))
(assert (x599 x33))
(assert (= x476 (or x196 x957)))
(assert (not (x554 (x752 x625 x651 x797))))
(assert (x599 x442))
(assert (x599 x828))
(assert (x599 x152))
(assert (= (and x920 x336) x10))
(assert (x599 x1000))
(assert (x599 x1156))
(assert (x599 x924))
(assert (= (x897 (x17 x1204 x1135 x466 x1108 x248 x332 x861 x119)) x332))
(assert (x599 x60))
(assert (x599 x52))
(assert (> (x637 x274 x873 x92 x1045 x518 x320 x917) 10000))
(assert (x599 x122))
(assert (x599 x288))
(assert (=> (>= 10000 x137) (= (x679 x137) 0)))
(assert (x599 x746))
(assert (= x944 (x1086 (x6 x625 x833 x944 x2))))
(assert (=> (>= 10000 x260) (= (x679 x260) 0)))
(assert (= x1117 (and x499 x704)))
(assert (x599 x532))
(assert (=> (<= x754 10000) (= (x679 x754) 0)))
(assert (x554 1781416757497172237285707461672121659281076687163700985222424369352509686767))
(assert (=> (>= 10000 x1206) (= 0 (x679 x1206))))
(assert (x1199 x262 x357))
(assert (x599 x754))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x17 x727 x982 x1062 x66 x846 x950 x1002 x103)))
(assert (x1148 x1127))
(assert (x599 x1014))
(assert (x599 x414))
(assert (x599 x214))
(assert (= (or x129 x1137) x298))
(assert (=> (>= 10000 x595) (= (x679 x595) 0)))
(assert (= (x638 (x17 x162 x817 x249 x374 x1024 x310 x405 x1125)) x1125))
(assert (= x896 (=> (and (and (= (+ x720 76450787359836037641860180984291677749980919077056822294353438043884394381312) x1056) (<= x780 4294967295) (= (x910 26959946667150639794667015087019630673637144422540572481103610249215 x738) x720) (= (>= (x888 x612) x480) x439) x848 (= (= 0 x780) x75) (= (x269 (- x314 x205)) x166) (= x571 (x604 (+ x205 32))) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639836 x205)) (<= 1 x387) (<= x205 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= (x604 (+ 32 x607)) x349) (= (x604 (+ x349 32)) x314) (= (x604 (+ 36 x205)) x607) (not (= x205 115792089237316195423570985008687907853269984665640564039457584007913129639836)) (> x314 x205) (not (= x205 115792089237316195423570985008687907853269984665640564039457584007913129639836)) (= (x447 x571) x738) (= x848 (= x759 (x888 x46))) (= x605 (x269 (- x452 10000))) (<= x205 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= (x269 (- x166 32)) x666) x439 (= x759 (x1089 x46)) (= (x1089 x612) x480) (<= x205 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= (x160 0) x935) (= x594 (x884 x205))) (or (and (not x75) (and (= x132 1) (<= 1 x935) (= x780 32))) (and (= x132 x387) x75))) x889)))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x752 x727 x44 x669)))
(assert (= x81 (x221 (x361 x162 x29 x158 x81 x952))))
(assert (x599 x627))
(assert (x1148 x702))
(assert (x599 x275))
(assert (=> (>= 10000 x861) (= 0 (x679 x861))))
(assert (x238 x357))
(assert (x599 x168))
(assert (x599 x243))
(assert (x599 x56))
(assert (x554 115792089210356248756420345214020892766250353992003419616917011526809519390720))
(assert (x599 x1131))
(assert (x554 84814075808141314178395468817534025465894426928601295766380145544921651250904))
(assert (=> (<= x588 10000) (= (x679 x588) 0)))
(assert (= (x281 (x637 x1204 x686 x143 x1194 x260 x820 x528)) x686))
(assert (=> (>= 10000 x374) (= (x679 x374) 0)))
(assert (=> (>= 10000 x1146) (= (x679 x1146) 0)))
(assert (= 0 (x679 1461501637330902918203684832716283019655932542975)))
(assert (= x304 (x221 (x361 x1204 x265 x93 x304 x1180))))
(assert (x599 x283))
(assert (=> (<= x172 10000) (= (x679 x172) 0)))
(assert (= x869 (and x743 (not x598))))
(assert (=> (<= x737 10000) (= 0 (x679 x737))))
(assert (x238 x818))
(assert (= x819 (or x785 x831)))
(assert (= x787 (and x772 (not x75))))
(assert true)
(assert (=> (>= 10000 x835) (= (x679 x835) 0)))
(assert (= x695 (x1086 (x752 x274 x63 x695))))
(assert (= (or x937 x529 x885 x428 x50) x256))
(assert (x599 x1197))
(assert (= (and x584 x340) x231))
(assert (x599 x895))
(assert (x45 1 (x501 2 (* 8 (- 32 x90)))))
(assert (=> (>= 10000 x1002) (= 0 (x679 x1002))))
(assert (x599 x204))
(assert (not (x554 (x489 x162 x471))))
(assert (= (x489 x1204 x1177) (x679 (x489 x1204 x1177))))
(assert (x386 x86))
(assert (= (x1086 (x17 x274 x754 x626 x379 x305 x969 x64 x292)) x626))
(assert (x599 x1125))
(assert (= x2 (x221 (x6 x625 x833 x944 x2))))
(assert (x386 x712))
(assert (x599 x5))
(assert (x599 x425))
(assert (x582 x694))
(assert (x599 x4))
(assert (= x51 (x1086 (x142 x162 x895 x51 x195 x211 x746))))
(assert (x599 x325))
(assert (x599 x766))
(assert (x599 x540))
(assert (= 0 (x679 76450787359836037641860180984291677749980919077056822294353438043884394381312)))
(assert (x599 x156))
(assert (x599 x483))
(assert (x313 452312848583266388373324160190187140051835877600158453279131187530910662656))
(assert (= x595 (x281 (x142 x625 x595 x801 x737 x882 x546))))
(assert (x599 x74))
(assert (x599 x1154))
(assert (x238 x993))
(assert (x45 1 (x501 2 (* 8 (- 32 x781)))))
(assert (= (x1086 (x637 x625 x1206 x172 x768 x88 x927 x469)) x172))
(assert (x238 x738))
(assert (x599 x709))
(assert (=> (>= 10000 x5) (= 0 (x679 x5))))
(assert (= (x679 4294967296) 0))
(assert (x599 x1079))
(assert (x599 x965))
(assert (not x1096))
(assert (=> (<= x996 10000) (= (x679 x996) 0)))
(assert (x599 x291))
(assert (= x450 (or x869 x429)))
(assert (x599 x1017))
(assert (x599 x996))
(assert (x599 x528))
(assert (= x1180 (x20 (x361 x1204 x265 x93 x304 x1180))))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x142 x1204 x837 x1191 x1144 x964 x309)))
(assert (x599 x878))
(assert (x554 76450787359836037641860180984291677749980919077056822294353438043884394381312))
(assert (x404 26959946667150639794667015087019630673637144422540572481103610249216))
(assert (< 10000 (x830 0)))
(assert (x599 x1073))
(assert (x599 x1085))
(assert (not (x554 (x17 x274 x754 x626 x379 x305 x969 x64 x292))))
(assert (= (x637 x1204 x686 x143 x1194 x260 x820 x528) (x679 (x637 x1204 x686 x143 x1194 x260 x820 x528))))
(assert (x186 x500 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= 0 (x679 11307821214581659709333104004754678501295896940003961331978279688272766566400)))
(assert (x404 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x599 x672))
(assert (= (x637 x625 x1206 x172 x768 x88 x927 x469) (x679 (x637 x625 x1206 x172 x768 x88 x927 x469))))
(assert (x238 26959946667150639794667015087019630673637144422540572481103610249215))
(assert (x599 x823))
(assert (= x210 (=> (= x654 x87) x370)))
(assert (x554 4294967295))
(assert (= (x361 x727 x1210 x547 x1164 x693) (x679 (x361 x727 x1210 x547 x1164 x693))))
(assert (= (and (not x381) x1123) x383))
(assert (x599 x1167))
(assert (=> (<= x1024 10000) (= 0 (x679 x1024))))
(assert (= 0 (x679 32523383700587834770323112271211932718128200013265661849047136999858837557784)))
(assert (=> (<= x795 10000) (= 0 (x679 x795))))
(assert (x599 x1135))
(assert (= (x679 (x752 64 x55 x170)) (x752 64 x55 x170)))
(assert (not (x554 (x637 x162 x701 x664 x358 x735 x1173 x85))))
(assert (=> (>= 10000 x304) (= (x679 x304) 0)))
(assert (x599 x851))
(assert (x599 x279))
(assert (x599 x1166))
(assert (= (x679 (x6 x1204 x996 x673 x765)) (x6 x1204 x996 x673 x765)))
(assert (x599 x658))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x637 x727 x367 x1146 x791 x835 x715 x315)))
(assert (x599 x950))
(assert (x554 33528237782592280163068556224972516439282563014722366175641814928123294921928))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x830 0)))
(assert (=> (<= x469 10000) (= (x679 x469) 0)))
(assert (= (x897 (x17 x625 x91 x1050 x1041 x154 x1158 x815 x1190)) x1158))
(assert (=> (<= x1204 10000) (= (x679 x1204) 0)))
(assert (x186 x500 32))
(assert (x599 x299))
(assert (= (x679 (x752 x727 x44 x669)) (x752 x727 x44 x669)))
(assert (x110 x202 452312848583266388373324160190187140051835877600158453279131187530910662656))
(assert (not (x554 (x6 x162 x344 x898 x100))))
(assert (= x743 (and x845 x467)))
(assert (x599 x444))
(assert (x186 x738 26959946667150639794667015087019630673637144422540572481103610249216))
(assert (x599 x597))
(assert (=> (<= x91 10000) (= (x679 x91) 0)))
(assert (x599 x1155))
(assert (= (x375 (x752 x727 x44 x669)) x727))
(assert (x599 x609))
(assert (x599 x681))
(assert (= 0 (x679 57896044618658097711785492504343953926634992332820282019728792003956564819967)))
(assert (x599 x120))
(assert (> (x142 x162 x895 x51 x195 x211 x746) 10000))
(assert (x599 x29))
(assert (= (x897 (x637 x727 x367 x1146 x791 x835 x715 x315)) x715))
(assert (= (x281 (x637 x625 x1206 x172 x768 x88 x927 x469)) x1206))
(assert (= (x679 115792089237316195423570985008687907853269984665640564039457584007913129639935) 0))
(assert (x554 1786122754))
(assert (x599 x1190))
(assert (= (x20 (x637 x625 x1206 x172 x768 x88 x927 x469)) x88))
(assert (= (x281 (x361 x625 x1048 x141 x779 x975)) x1048))
(assert (x554 1461501637330902918203684832716283019655932542975))
(assert (=> (>= 10000 x959) (= (x679 x959) 0)))
(assert (= (or x356 x465) x125))
(assert (= x444 (x221 (x142 x274 x924 x1059 x444 x806 x268))))
(assert (x599 x496))
(assert (x599 x939))
(assert (x599 x1159))
(assert (= (x17 x1204 x1135 x466 x1108 x248 x332 x861 x119) (x679 (x17 x1204 x1135 x466 x1108 x248 x332 x861 x119))))
(check-sat)
(exit)
