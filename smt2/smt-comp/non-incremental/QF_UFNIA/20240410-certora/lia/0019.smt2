(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Certora
Generated on: 2024-04-10
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x71 () Int)
(declare-fun x418 () Int)
(declare-fun x80 () Int)
(declare-fun x267 () Bool)
(declare-fun x411 () Bool)
(declare-fun x147 () Bool)
(declare-fun x119 () Int)
(declare-fun x318 (Int) Int)
(declare-fun x295 () Int)
(declare-fun x473 () Int)
(declare-fun x412 () Int)
(declare-fun x322 () Bool)
(declare-fun x47 () Int)
(declare-fun x142 () Bool)
(declare-fun x134 () Bool)
(declare-fun x324 () Bool)
(declare-fun x455 () Int)
(declare-fun x166 () Int)
(declare-fun x35 (Int) Int)
(declare-fun x9 () Int)
(declare-fun x258 () Bool)
(declare-fun x146 () Int)
(declare-fun x483 () Int)
(declare-fun x300 () Bool)
(declare-fun x463 () Int)
(declare-fun x247 () Int)
(declare-fun x229 (Int) Bool)
(declare-fun x339 () Bool)
(declare-fun x399 () Int)
(declare-fun x210 () Bool)
(declare-fun x500 () Bool)
(declare-fun x481 () Int)
(declare-fun x287 () Int)
(declare-fun x156 () Bool)
(declare-fun x241 () Int)
(declare-fun x117 () Int)
(declare-fun x260 () Int)
(declare-fun x123 () Int)
(declare-fun x175 () Int)
(declare-fun x177 () Int)
(declare-fun x130 () Bool)
(declare-fun x404 () Int)
(declare-fun x283 () Int)
(declare-fun x145 (Int) Int)
(declare-fun x202 () Bool)
(declare-fun x52 () Int)
(declare-fun x335 () Bool)
(declare-fun x394 () Int)
(declare-fun x405 () Bool)
(declare-fun x491 () Bool)
(declare-fun x131 () Int)
(declare-fun x193 () Int)
(declare-fun x293 () Int)
(declare-fun x38 () Int)
(declare-fun x185 () Bool)
(declare-fun x189 () Int)
(declare-fun x53 () Int)
(declare-fun x6 () Int)
(declare-fun x317 () Int)
(declare-fun x207 () Int)
(declare-fun x341 () Int)
(declare-fun x492 () Int)
(declare-fun x281 () Int)
(declare-fun x458 () Int)
(declare-fun x23 () Int)
(declare-fun x274 () Bool)
(declare-fun x37 () Int)
(declare-fun x182 () Int)
(declare-fun x216 () Int)
(declare-fun x139 () Int)
(declare-fun x434 () Int)
(declare-fun x56 (Int Int) Int)
(declare-fun x364 () Bool)
(declare-fun x196 () Int)
(declare-fun x388 () Int)
(declare-fun x330 () Int)
(declare-fun x162 () Int)
(declare-fun x88 () Int)
(declare-fun x443 () Int)
(declare-fun x57 () Int)
(declare-fun x89 () Int)
(declare-fun x143 () Int)
(declare-fun x409 () Bool)
(declare-fun x183 () Int)
(declare-fun x381 () Int)
(declare-fun x152 () Bool)
(declare-fun x328 () Int)
(declare-fun x138 () Bool)
(declare-fun x385 () Int)
(declare-fun x374 () Int)
(declare-fun x456 () Bool)
(declare-fun x347 () Bool)
(declare-fun x140 () Bool)
(declare-fun x132 () Int)
(declare-fun x333 () Int)
(declare-fun x34 () Int)
(declare-fun x351 () Bool)
(declare-fun x63 () Int)
(declare-fun x70 () Int)
(declare-fun x447 () Int)
(declare-fun x367 () Bool)
(declare-fun x179 () Bool)
(declare-fun x10 () Int)
(declare-fun x337 () Int)
(declare-fun x136 () Bool)
(declare-fun x225 () Int)
(declare-fun x181 () Int)
(declare-fun x178 () Int)
(declare-fun x231 (Int) Int)
(declare-fun x192 () Int)
(declare-fun x376 () Int)
(declare-fun x304 () Int)
(declare-fun x226 () Int)
(declare-fun x440 () Int)
(declare-fun x426 () Int)
(declare-fun x184 () Int)
(declare-fun x365 () Bool)
(declare-fun x76 () Bool)
(declare-fun x174 () Int)
(declare-fun x453 () Int)
(declare-fun x8 (Int Int) Int)
(declare-fun x233 () Int)
(declare-fun x321 () Bool)
(declare-fun x285 () Int)
(declare-fun x387 () Bool)
(declare-fun x90 () Int)
(declare-fun x116 () Int)
(declare-fun x354 () Bool)
(declare-fun x245 () Int)
(declare-fun x159 () Int)
(declare-fun x325 () Bool)
(declare-fun x252 () Int)
(declare-fun x79 () Int)
(declare-fun x223 () Int)
(declare-fun x271 () Int)
(declare-fun x55 () Int)
(declare-fun x497 () Int)
(declare-fun x109 () Bool)
(declare-fun x62 () Int)
(declare-fun x415 () Int)
(declare-fun x42 () Int)
(declare-fun x137 () Int)
(declare-fun x251 () Int)
(declare-fun x14 () Bool)
(declare-fun x240 () Int)
(declare-fun x257 () Int)
(declare-fun x312 () Int)
(declare-fun x423 () Bool)
(declare-fun x494 () Int)
(declare-fun x485 () Int)
(declare-fun x227 () Bool)
(declare-fun x478 () Bool)
(declare-fun x248 () Int)
(declare-fun x190 () Int)
(declare-fun x441 () Int)
(declare-fun x370 () Int)
(declare-fun x307 () Int)
(declare-fun x150 () Bool)
(declare-fun x502 () Bool)
(declare-fun x493 () Int)
(declare-fun x342 () Bool)
(declare-fun x95 () Bool)
(declare-fun x148 () Int)
(declare-fun x291 () Bool)
(declare-fun x103 () Int)
(declare-fun x68 (Int) Int)
(declare-fun x176 () Bool)
(declare-fun x25 () Bool)
(declare-fun x373 () Bool)
(declare-fun x254 () Int)
(declare-fun x340 () Bool)
(declare-fun x429 () Int)
(declare-fun x393 () Int)
(declare-fun x425 () Int)
(declare-fun x435 (Int Int) Int)
(declare-fun x421 () Int)
(declare-fun x12 () Int)
(declare-fun x69 (Int) Int)
(declare-fun x486 () Int)
(declare-fun x457 () Int)
(declare-fun x219 (Int Int Int) Int)
(declare-fun x338 () Bool)
(declare-fun x313 () Int)
(declare-fun x168 () Int)
(declare-fun x195 () Int)
(declare-fun x331 () Bool)
(declare-fun x11 () Int)
(declare-fun x334 () Bool)
(declare-fun x84 (Int) Int)
(declare-fun x488 () Bool)
(declare-fun x135 () Int)
(declare-fun x107 () Int)
(declare-fun x282 () Int)
(declare-fun x104 () Bool)
(declare-fun x67 () Bool)
(declare-fun x4 () Int)
(declare-fun x256 () Int)
(declare-fun x169 () Int)
(declare-fun x464 () Bool)
(declare-fun x462 (Int Int) Int)
(declare-fun x249 () Int)
(declare-fun x400 () Int)
(declare-fun x380 (Int) Int)
(declare-fun x224 () Bool)
(declare-fun x17 () Int)
(declare-fun x265 () Int)
(declare-fun x459 () Int)
(declare-fun x78 (Int Int) Int)
(declare-fun x82 () Int)
(declare-fun x390 () Int)
(declare-fun x59 () Int)
(declare-fun x217 () Int)
(declare-fun x310 () Int)
(declare-fun x378 () Int)
(declare-fun x24 () Int)
(declare-fun x127 () Int)
(declare-fun x450 () Int)
(declare-fun x348 () Bool)
(declare-fun x470 () Int)
(declare-fun x51 () Int)
(declare-fun x149 (Int) Int)
(declare-fun x391 () Bool)
(declare-fun x201 () Bool)
(declare-fun x371 () Int)
(declare-fun x299 () Bool)
(declare-fun x126 () Bool)
(declare-fun x275 () Int)
(declare-fun x165 () Int)
(declare-fun x255 () Int)
(declare-fun x262 () Bool)
(declare-fun x39 () Int)
(declare-fun x121 () Int)
(declare-fun x246 () Int)
(declare-fun x66 () Int)
(declare-fun x96 () Int)
(declare-fun x301 () Int)
(declare-fun x386 () Int)
(declare-fun x366 () Int)
(declare-fun x235 () Int)
(declare-fun x465 () Int)
(declare-fun x199 () Int)
(declare-fun x222 (Int) Int)
(declare-fun x432 () Int)
(declare-fun x474 () Int)
(declare-fun x487 () Int)
(declare-fun x356 () Bool)
(declare-fun x22 () Bool)
(declare-fun x172 () Int)
(declare-fun x54 () Int)
(declare-fun x167 () Int)
(declare-fun x214 () Int)
(declare-fun x188 () Int)
(declare-fun x99 () Int)
(declare-fun x48 () Int)
(declare-fun x357 () Int)
(declare-fun x220 () Int)
(declare-fun x413 () Int)
(declare-fun x250 () Int)
(declare-fun x157 () Int)
(declare-fun x288 () Int)
(declare-fun x208 () Bool)
(declare-fun x379 () Int)
(declare-fun x60 () Bool)
(declare-fun x349 () Bool)
(declare-fun x243 () Int)
(declare-fun x94 () Int)
(declare-fun x454 () Int)
(declare-fun x362 () Bool)
(declare-fun x372 () Int)
(declare-fun x74 (Int) Int)
(declare-fun x50 () Int)
(declare-fun x496 () Int)
(declare-fun x238 () Int)
(declare-fun x237 () Int)
(declare-fun x21 () Int)
(declare-fun x446 () Bool)
(declare-fun x144 (Int) Int)
(declare-fun x442 (Int) Int)
(declare-fun x124 () Int)
(declare-fun x336 () Bool)
(declare-fun x26 () Bool)
(declare-fun x475 () Bool)
(declare-fun x91 (Int) Int)
(declare-fun x482 () Int)
(declare-fun x294 () Bool)
(declare-fun x332 () Int)
(declare-fun x403 () Int)
(declare-fun x355 (Int) Bool)
(declare-fun x417 () Bool)
(declare-fun x424 () Int)
(declare-fun x128 () Bool)
(declare-fun x153 () Int)
(declare-fun x73 () Int)
(declare-fun x209 () Bool)
(declare-fun x36 () Int)
(declare-fun x43 () Int)
(declare-fun x467 () Int)
(declare-fun x28 () Int)
(declare-fun x160 () Bool)
(declare-fun x471 () Int)
(declare-fun x498 () Int)
(declare-fun x100 () Bool)
(declare-fun x263 (Int Int) Int)
(declare-fun x113 () Int)
(declare-fun x230 () Int)
(declare-fun x264 () Bool)
(declare-fun x40 () Int)
(declare-fun x92 () Int)
(declare-fun x361 () Int)
(declare-fun x398 () Bool)
(declare-fun x41 () Int)
(declare-fun x499 (Int Int) Int)
(declare-fun x266 () Int)
(declare-fun x118 () Bool)
(declare-fun x438 () Int)
(declare-fun x45 () Int)
(declare-fun x480 () Bool)
(declare-fun x197 () Int)
(declare-fun x320 () Bool)
(declare-fun x30 () Int)
(declare-fun x363 () Int)
(declare-fun x228 () Bool)
(declare-fun x87 () Bool)
(declare-fun x479 () Int)
(declare-fun x141 () Int)
(declare-fun x2 () Int)
(declare-fun x449 () Int)
(declare-fun x77 () Int)
(declare-fun x292 (Int) Int)
(declare-fun x259 () Int)
(declare-fun x163 () Int)
(declare-fun x359 () Int)
(declare-fun x33 () Int)
(declare-fun x72 (Int Int) Int)
(declare-fun x212 () Bool)
(declare-fun x431 () Int)
(declare-fun x279 () Int)
(declare-fun x46 () Int)
(declare-fun x244 () Int)
(declare-fun x125 () Int)
(declare-fun x445 () Int)
(declare-fun x410 () Int)
(declare-fun x105 () Bool)
(declare-fun x213 () Int)
(declare-fun x5 () Bool)
(declare-fun x49 () Bool)
(declare-fun x106 () Int)
(declare-fun x316 () Int)
(declare-fun x101 () Int)
(declare-fun x439 () Bool)
(declare-fun x427 () Bool)
(declare-fun x211 () Int)
(declare-fun x268 () Bool)
(declare-fun x350 () Bool)
(declare-fun x102 () Bool)
(declare-fun x112 () Bool)
(declare-fun x315 () Int)
(declare-fun x97 () Bool)
(declare-fun x451 () Int)
(declare-fun x303 () Bool)
(declare-fun x329 () Int)
(declare-fun x360 () Int)
(declare-fun x422 () Int)
(declare-fun x489 () Bool)
(declare-fun x306 () Int)
(declare-fun x476 () Bool)
(declare-fun x461 () Bool)
(declare-fun x85 () Bool)
(declare-fun x406 () Int)
(declare-fun x284 () Bool)
(declare-fun x346 () Int)
(declare-fun x420 () Int)
(declare-fun x218 () Int)
(declare-fun x437 () Int)
(declare-fun x129 () Bool)
(declare-fun x122 () Bool)
(declare-fun x495 (Int) Int)
(declare-fun x194 (Int) Int)
(declare-fun x187 () Int)
(declare-fun x120 () Int)
(declare-fun x203 () Int)
(declare-fun x110 () Int)
(declare-fun x236 () Int)
(declare-fun x289 () Bool)
(declare-fun x161 () Int)
(declare-fun x164 () Int)
(declare-fun x353 () Bool)
(declare-fun x261 () Int)
(declare-fun x383 () Int)
(declare-fun x368 () Bool)
(declare-fun x93 () Int)
(declare-fun x270 (Int Int) Int)
(declare-fun x180 () Int)
(declare-fun x305 () Bool)
(define-fun x433 ((x297 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x297) (>= x297 0)) x297 (- x297 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x186 ((x297 Int)) Int (ite (and (< x297 0) (>= x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x297 115792089237316195423570985008687907853269984665640564039457584007913129639936) x297))
(define-fun x308 ((x297 Int)) Int (ite (and (>= x297 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x297)) x297 (ite (and (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 x297) (> 231584178474632390847141970017375815706539969331281128078915168015826259279872 x297)) (- x297 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (>= x297 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (< x297 0)) (+ x297 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x8 x297 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x311 ((x19 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x19) (<= 0 x19)))
(define-fun x302 ((x19 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x19) (>= x19 0)))
(define-fun x448 ((x19 Int) (x344 Int)) Bool (=> (and (> x344 0) (< 0 x19)) (and (>= x19 (x263 x19 x344)) (<= 0 (x263 x19 x344)))))
(define-fun x98 ((x19 Int) (x344 Int)) Bool (=> (and (and (<= 1 x344) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x344)) (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x19) (>= x19 0))) (and (>= (x263 x19 x344) 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x263 x19 x344)))))
(define-fun x392 ((x19 Int) (x344 Int)) Bool (=> (and (> x19 x344) (> x344 1)) (> x19 (x263 x19 x344))))
(define-fun x198 ((x19 Int) (x344 Int)) Bool (=> (and (< 0 x344) (> x19 0)) (= (< x19 x344) (= (x263 x19 x344) 0))))
(define-fun x83 ((x19 Int) (x344 Int)) Bool (=> (and (> x19 0) (< 0 x344)) (and (> (* x344 (x263 x19 x344)) (- x19 x344)) (<= (* (x263 x19 x344) x344) x19))))
(define-fun x173 ((x19 Int) (x344 Int)) Bool (= (- x19 (x56 (- x344 1) x19)) (* x344 (x263 x19 x344))))
(define-fun x151 ((x19 Int) (x344 Int)) Bool (and (x173 x19 x344) (x83 x19 x344) (x392 x19 x344) (x98 x19 x344) (x448 x19 x344) (x198 x19 x344)))
(define-fun x407 ((x19 Int)) Bool (= (x263 0 x19) 0))
(define-fun x29 ((x19 Int)) Bool (= (x263 x19 1) x19))
(define-fun x326 ((x19 Int)) Bool (=> (not (= x19 0)) (= 1 (x263 x19 x19))))
(define-fun x358 ((x19 Int)) Bool (and (x29 x19) (x407 x19) (x326 x19)))
(define-fun x273 ((x19 Int)) Bool (and (= (x56 x19 115792089237316195423570985008687907853269984665640564039457584007913129639935) x19) (= x19 (x56 115792089237316195423570985008687907853269984665640564039457584007913129639935 x19))))
(define-fun x64 ((x19 Int)) Bool (and (= 0 (x56 x19 0)) (= 0 (x56 0 x19))))
(define-fun x466 ((x19 Int)) Bool (= x19 (x56 x19 x19)))
(define-fun x375 ((x19 Int)) Bool (and (x273 x19) (x64 x19) (x466 x19)))
(define-fun x276 ((x19 Int) (x344 Int)) Bool (= (x56 x344 x19) (x56 x19 x344)))
(define-fun x501 ((x19 Int) (x344 Int)) Bool (and (>= (x56 x19 x344) 0) (=> (>= x344 0) (<= (x56 x19 x344) x344)) (=> (<= 0 x19) (<= (x56 x19 x344) x19))))
(define-fun x428 ((x19 Int) (x344 Int)) Bool (and (x501 x19 x344) (x276 x19 x344)))
(define-fun x396 ((x19 Int)) Bool (= (x56 x19 255) (x8 x19 256)))
(define-fun x13 ((x19 Int)) Bool (and (x396 x19) (x428 x19 255)))
(define-fun x472 ((x19 Int) (x344 Int)) Bool (and (>= (x8 x19 x344) 0) (< (x8 x19 x344) x344)))
(define-fun x401 ((x19 Int) (x344 Int)) Bool (=> (and (< 0 x344) (>= x19 0)) (= (= (x8 x19 x344) x19) (> x344 x19))))
(define-fun x27 ((x19 Int) (x344 Int)) Bool (=> (and (and (> (+ x344 x344) x19) (<= x344 x19)) (> x344 0)) (= (x8 x19 x344) (- x19 x344))))
(define-fun x171 ((x19 Int) (x344 Int)) Bool (=> (< 0 x344) (= (+ (* (x263 x19 x344) x344) (x8 x19 x344)) x19)))
(define-fun x7 ((x19 Int) (x344 Int)) Bool (and (x472 x19 x344) (x401 x19 x344) (x171 x19 x344) (x27 x19 x344)))
(define-fun x397 ((x19 Int)) Bool (= 0 (x8 0 x19)))
(define-fun x280 ((x19 Int)) Bool (= 0 (x8 x19 1)))
(define-fun x242 ((x19 Int)) Bool (= (x8 x19 x19) 0))
(define-fun x296 ((x19 Int)) Bool (and (x397 x19) (x242 x19) (x280 x19)))
(define-fun x444 ((x19 Int) (x344 Int)) Bool (= (x435 x19 x344) (* x344 x19)))
(define-fun x61 ((x19 Int) (x344 Int)) Bool (and (= (- (* x19 x344) (* x344 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x435 (- x19 115792089237316195423570985008687907853269984665640564039457584007913129639936) x344)) (= (x435 (- x19 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x344 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* x19 (- x344 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x344 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* x19 (- x344 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x435 x19 (- x344 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x327 ((x19 Int) (x344 Int)) Bool (=> (and (> x19 0) (< 0 x344)) (= (= (x263 (x308 (x435 x19 x344)) x19) x344) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x435 x19 x344)))))
(define-fun x86 ((x19 Int) (x344 Int)) Bool (=> (and (not (= 0 x19)) (not (= 0 x344))) (and (= (x263 (x435 x19 x344) x344) x19) (= (x263 (x435 x19 x344) x19) x344))))
(define-fun x234 ((x19 Int) (x344 Int)) Bool (=> (and (> x19 0) (< 0 x344)) (= (> x344 (x263 115792089237316195423570985008687907853269984665640564039457584007913129639935 x19)) (< 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x435 x19 x344)))))
(define-fun x58 ((x19 Int) (x344 Int)) Bool (and (= (x308 (x435 x19 x344)) (x308 (x435 (- x19 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x344 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x308 (x435 x19 x344)) (x308 (x435 (- x19 115792089237316195423570985008687907853269984665640564039457584007913129639936) x344))) (= (x308 (x435 x19 x344)) (x308 (x435 x19 (- x344 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))
(define-fun x15 ((x19 Int) (x344 Int)) Bool (and (=> (and (and (> x19 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x19)) (and (> x344 0) (<= x344 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (>= (x435 (- x19 115792089237316195423570985008687907853269984665640564039457584007913129639936) x344) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968)) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x19) (x263 57896044618658097711785492504343953926634992332820282019728792003956564819968 x344)))) (=> (and (and (< 0 x19) (<= x19 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (> x344 0) (<= x344 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (<= x19 (x263 57896044618658097711785492504343953926634992332820282019728792003956564819967 x344)) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x435 x19 x344)))) (=> (and (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x344) (<= x344 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (and (< 0 x19) (<= x19 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x344) (x263 57896044618658097711785492504343953926634992332820282019728792003956564819968 x19)) (>= (x435 x19 (- x344 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968)))) (=> (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x344) (> x344 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (<= x19 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> x19 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (<= (x435 (- x19 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x344 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x19) (x263 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x344)))))))
(define-fun x452 ((x19 Int) (x344 Int)) Bool (and (x58 x19 x344) (x444 x19 x344) (x15 x19 x344) (x327 x19 x344) (x61 x19 x344) (x234 x19 x344) (x86 x19 x344)))
(define-fun x206 ((x19 Int)) Bool (and (= 0 (x435 0 x19)) (= (x435 x19 0) 0)))
(define-fun x460 ((x19 Int)) Bool (and (= x19 (x435 1 x19)) (= (x435 x19 1) x19)))
(define-fun x408 ((x19 Int)) Bool (and (x206 x19) (x460 x19)))
(define-fun x323 ((x19 Int)) Bool (= (x56 x19 26959946667150639794667015087019630673637144422540572481103610249215) (x8 x19 26959946667150639794667015087019630673637144422540572481103610249216)))
(define-fun x290 ((x19 Int)) Bool (and (x428 x19 26959946667150639794667015087019630673637144422540572481103610249215) (x323 x19)))
(define-fun x16 ((x19 Int)) Bool (and (= (x270 115792089237316195423570985008687907853269984665640564039457584007913129639935 x19) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x270 x19 115792089237316195423570985008687907853269984665640564039457584007913129639935) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(define-fun x402 ((x19 Int)) Bool (and (= (x270 0 x19) x19) (= (x270 x19 0) x19)))
(define-fun x286 ((x19 Int)) Bool (= x19 (x270 x19 x19)))
(define-fun x205 ((x19 Int)) Bool (and (x16 x19) (x402 x19) (x286 x19)))
(define-fun x32 ((x19 Int) (x344 Int)) Bool (= (x270 x19 x344) (x270 x344 x19)))
(define-fun x343 ((x19 Int) (x344 Int)) Bool (and (=> (<= 0 x19) (<= x19 (x270 x19 x344))) (>= (+ x344 x19) (x270 x19 x344)) (=> (>= x344 0) (>= (x270 x19 x344) x344))))
(define-fun x44 ((x19 Int) (x344 Int)) Bool (and (x343 x19 x344) (x32 x19 x344)))
(define-fun x133 ((x277 Int)) Int 0)
(define-fun x221 ((x277 Int)) Int 0)
(define-fun x369 ((x277 Int)) Int 0)
(define-fun x81 ((x277 Int)) Int 0)
(define-fun x154 ((x277 Int)) Int 0)
(define-fun x436 ((x277 Int)) Int 0)
(define-fun x272 ((x277 Int)) Int (ite (= 128 x277) 904250603428552709895185118199468575982109441609966099573332780532423983104 (x369 x277)))
(define-fun x419 ((x277 Int)) Int (ite (= x277 132) 0 (x272 x277)))
(define-fun x352 ((x277 Int)) Int (ite (= x277 0) x40 (x495 x277)))
(define-fun x155 ((x277 Int)) Int (ite (and (<= 128 x277) (< x277 160)) (x352 (- x277 128)) (x133 x277)))
(define-fun x314 ((x277 Int)) Int 0)
(define-fun x215 ((x277 Int)) Int 0)
(define-fun x115 ((x277 Int)) Int (ite (= 4 x277) x213 (x215 x277)))
(define-fun x490 ((x277 Int)) Int (ite (= x277 36) x77 (x115 x277)))
(define-fun x170 ((x277 Int)) Int (ite (= x277 68) x243 (x490 x277)))
(define-fun x298 ((x277 Int)) Int (ite (= x277 100) 128 (x170 x277)))
(define-fun x430 ((x277 Int)) Int (ite (= x277 132) x450 (x298 x277)))
(define-fun x389 ((x277 Int)) Int (ite (and (>= x277 164) (> (+ 164 x37) x277)) (x318 (- x277 164)) (x430 x277)))
(define-fun x111 ((x277 Int)) Int (ite (= x277 x103) x378 (x84 x277)))
(define-fun x269 ((x277 Int)) Int (ite (= x277 164) 904250603428552709895185118199468575982109441609966099573332780532423983104 (x221 x277)))
(define-fun x204 ((x277 Int)) Int (ite (= 128 x277) 36 (x269 x277)))
(define-fun x345 ((x277 Int)) Int (ite (= x277 160) x400 (x204 x277)))
(define-fun x18 ((x277 Int)) Int (ite (= 0 x277) x497 (x91 x277)))
(define-fun x477 ((x277 Int)) Int (ite (= 0 x277) x386 (x345 x277)))
(define-fun x377 ((x277 Int)) Int (ite (= x277 232) 115792089210356248756420345214020892766250353992003419616917011526809519390720 (x477 x277)))
(define-fun x200 ((x277 Int)) Int (ite (= x277 196) 36 (x377 x277)))
(define-fun x484 ((x277 Int)) Int (ite (= x277 228) x125 (x200 x277)))
(define-fun x319 ((x277 Int)) Int (ite (= 0 x277) x293 (x231 x277)))
(define-fun x414 ((x277 Int)) Int (ite (= x277 0) x470 (x484 x277)))
(define-fun x31 ((x277 Int)) Int (ite x152 (x414 x277) (x477 x277)))
(define-fun x20 ((x277 Int)) Int (ite (= x312 x277) 0 (x31 x277)))
(define-fun x395 ((x277 Int)) Int (ite (= x277 x17) x88 (x20 x277)))
(define-fun x191 ((x277 Int)) Int (ite (= x123 x277) x110 (x395 x277)))
(define-fun x158 ((x277 Int)) Int (ite (= x277 0) x195 (x191 x277)))
(define-fun x114 ((x277 Int)) Int (ite x417 (x81 x277) (ite x138 (x158 x277) (x31 x277))))
(define-fun x3 ((x277 Int)) Int (ite (= x277 x207) x421 (x114 x277)))
(define-fun x278 ((x277 Int)) Int (ite (= x307 x277) x59 (x3 x277)))
(define-fun x309 ((x277 Int)) Int (ite (= x277 x70) x41 (x278 x277)))
(define-fun x232 ((x277 Int)) Int (ite (= x277 x496) x366 (x309 x277)))
(define-fun x253 ((x277 Int)) Int (ite (and (>= x277 x393) (> (+ x393 x90) x277)) (x389 (- (+ 164 x277) x393)) (x232 x277)))
(define-fun x108 ((x277 Int)) Int (ite (= x465 x277) 0 (x253 x277)))
(define-fun x1 ((x277 Int)) Int (ite (= x277 x89) x287 (x380 x277)))
(define-fun x239 ((x277 Int)) Int (ite (= x277 x216) 53088212814352749625721495065708639950629078354262018589583637907274549166080 (x108 x277)))
(define-fun x469 ((x277 Int)) Int (ite (= x277 x10) x259 (x239 x277)))
(define-fun x75 ((x277 Int)) Int (ite (= x277 0) x381 (x145 x277)))
(define-fun x382 ((x277 Int)) Int 0)
(define-fun x65 ((x277 Int)) Int 0)
(define-fun x416 ((x277 Int)) Int 0)
(define-fun x384 ((x277 Int)) Int 0)
(define-fun x468 ((x277 Int)) Int (ite (= x277 0) x245 (x442 x277)))
(assert (x311 x189))
(assert (= (x222 x42) (x222 (+ x42 3))))
(assert (= x266 (x69 (x219 64 x113 x266))))
(assert (x311 x496))
(assert (x355 2598255213))
(assert (x355 115792089210356248756420345214020892766250353992003419616917011526809519390720))
(assert (= 4 (x69 (x219 64 x255 4))))
(assert (= (x74 (x219 52 x421 x59)) 52))
(assert (> (x219 64 x162 4) 10000))
(assert (< (x219 64 x132 x254) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (x222 (x219 64 x73 1)) (x219 64 x73 1)))
(assert (x311 x213))
(assert (x311 x438))
(assert (= 64 (x74 (x219 64 x73 1))))
(assert (= x255 (x292 (x219 64 x255 4))))
(assert (= (x219 64 x157 1) (x222 (x219 64 x157 1))))
(assert (< (x219 64 x157 1) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x311 x363))
(assert (= x254 (x292 (x219 64 x254 x132))))
(assert (x311 x153))
(assert (= x140 (=> (and (= x70 x218) (= x53 1)) x122)))
(assert (x311 x17))
(assert (x151 x333 256))
(assert (= 64 (x74 (x219 64 x474 1))))
(assert (= 64 (x74 (x219 64 x493 x54))))
(assert (= (x222 53088212814352749625721495065708639950629078354262018589583637907274549166080) 0))
(assert (x311 x451))
(assert (x311 x146))
(assert (x311 x317))
(assert (> (x219 64 x254 x132) 10000))
(assert (x311 x24))
(assert (x311 x381))
(assert (= (=> (and (= x225 (x108 x496)) (= (not (> x225 1)) x60)) (and (=> (= x38 x418) x324) x60)) x142))
(assert (= x474 (x292 (x219 64 x474 1))))
(assert (x311 x245))
(assert (x355 904250603428552709895185118199468575982109441609966099573332780532423983104))
(assert (x311 x421))
(assert (x311 x121))
(assert (> (x219 64 x233 1) 10000))
(assert (= (x69 (x219 64 x166 x256)) x256))
(assert (x375 x421))
(assert (x311 x103))
(assert (= x301 (x292 (x219 64 x301 x394))))
(assert (not (x355 (x219 64 x279 x285))))
(assert (= (x69 (x219 64 x146 x266)) x266))
(assert (= (x219 52 x421 x59) (x222 (x219 52 x421 x59))))
(assert (< 10000 (x219 64 x132 x254)))
(assert (x355 4270483121))
(assert (= (and x130 x427) x22))
(assert (x311 x241))
(assert (= (x222 (+ 3 x432)) (x222 x432)))
(assert (x311 x307))
(assert (= (x222 115792089237316195423570985008687907853269984665640564039457584007913129639904) 0))
(assert (x205 x9))
(assert (< (x219 64 x226 x66) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (x222 (x219 64 x23 x316)) (x219 64 x23 x316)))
(assert (x311 x359))
(assert (x311 x260))
(assert (not (x355 (x219 64 x166 x256))))
(assert (x205 x260))
(assert (x311 x265))
(assert (=> (>= 10000 x279) (= (x222 x279) 0)))
(assert (x311 x329))
(assert (= (x263 x421 256) (x78 x421 8)))
(assert (= (=> (and (and (= x196 (+ 1 x432)) (<= 1 x372) (= x443 0) (= x146 (x78 x421 8)) (= x266 (+ x432 3)) (= x271 (x219 64 x146 x266)) (= x455 (x56 255 x421)) (= x39 (x149 x196)) (= x93 (ite x489 1 0)) (= x463 (x72 1 x455)) (= (x56 x6 x463) x443) (= x372 (x194 x432)) (= x379 0) (= x432 (x219 64 x493 x54)) (= x6 (x380 x271)) (= x489 (not (< x390 x39))) (= (x219 64 x255 1) x54)) (or (and (and (= x304 (x68 x139)) (not (< x304 x390)) (= x139 (+ 1 x196))) x489) (and (= x93 1) (not x489)))) x488) x122))
(assert (= (x292 (x219 64 x493 x54)) x493))
(assert (x311 x279))
(assert (=> (<= x226 10000) (= (x222 x226) 0)))
(assert (x311 x141))
(assert (= (x308 (ite (> 256 x455) (x462 2 x455) 0)) (x72 1 x455)))
(assert (= (x222 79228162514264337593543950336) 0))
(assert (=> (>= 10000 x59) (= (x222 x59) 0)))
(assert (x311 x207))
(assert (x311 x36))
(assert (= (x219 64 x113 x266) (x222 (x219 64 x113 x266))))
(assert (x296 x282))
(assert (not (x355 (x219 64 x157 1))))
(assert (= 1 (x69 (x219 64 x174 1))))
(assert (x311 x393))
(assert (x311 x443))
(assert (x311 x246))
(assert (= (x74 (x219 64 x255 1)) 64))
(assert (= 64 (x74 (x219 64 x166 x256))))
(assert (= 0 (x222 904250603428552709895185118199468575982109441609966099573332780532423983104)))
(assert (x311 x99))
(assert (= x316 (x69 (x219 64 x23 x316))))
(assert (=> (<= x23 10000) (= 0 (x222 x23))))
(assert (=> (>= 10000 x117) (= (x222 x117) 0)))
(assert (x311 x172))
(assert (< (x219 64 x233 1) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (< (x219 64 x255 4) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (x222 (x219 64 x174 1)) (x219 64 x174 1)))
(assert (x311 x197))
(assert (= (x219 64 x279 x285) (x222 (x219 64 x279 x285))))
(assert (x358 x421))
(assert (x311 x162))
(assert (x311 x337))
(assert (x296 256))
(assert (x311 x371))
(assert (x311 x199))
(assert (> (x219 64 x474 1) 10000))
(assert (=> (>= 10000 x474) (= (x222 x474) 0)))
(assert (x311 x137))
(assert (not (x355 (x219 64 x255 4))))
(assert (x311 x93))
(assert (< (x219 64 x255 1) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x311 x94))
(assert (x408 1))
(assert (x311 x117))
(assert (x375 x449))
(assert (x311 x47))
(assert (x311 x127))
(assert (= (and (not x354) x500) x76))
(assert (x7 x2 26959946667150639794667015087019630673637144422540572481103610249216))
(assert (x311 x315))
(assert (x311 x361))
(assert (x311 x255))
(assert (x311 x166))
(assert (x375 255))
(assert (= (x74 (x219 64 x157 1)) 64))
(assert (= (x308 (ite (> 256 x55) (x462 2 x55) 0)) (x72 1 x55)))
(assert (= (x222 x432) (x222 (+ 1 x432))))
(assert (= (x78 x473 8) (x263 x473 256)))
(assert (x311 x39))
(assert (x302 x153))
(assert (x311 x131))
(assert (x408 (x462 2 x55)))
(assert (x311 x332))
(assert (x452 32 x450))
(assert (x296 x2))
(assert (not (x355 (x219 64 x233 1))))
(assert (< 10000 (x219 64 x146 x266)))
(assert (x408 79228162514264337593543950336))
(assert (x428 x106 x425))
(assert (= (x69 (x219 64 x254 x132)) x132))
(assert (= x409 (and x128 x291)))
(assert (not (x355 (x219 64 x146 x266))))
(assert (= 64 (x74 (x219 64 x301 x394))))
(assert (x311 x188))
(assert (x311 x203))
(assert (x311 x492))
(assert (x358 x333))
(assert (= (x74 (x219 64 x132 x254)) 64))
(assert (x311 x167))
(assert (x311 x123))
(assert (x355 464684736))
(assert (= 0 (x222 4270483121)))
(assert (x311 x474))
(assert (x311 x357))
(assert (x7 x282 26959946667150639794667015087019630673637144422540572481103610249216))
(assert (=> (>= 10000 x113) (= (x222 x113) 0)))
(assert (= (x222 388749022) 0))
(assert (x311 x163))
(assert (x311 x283))
(assert (= (x222 (x219 64 x493 x54)) (x219 64 x493 x54)))
(assert (= 0 (x222 464684736)))
(assert (= x373 (=> (and (= (= 0 x357) x387) (or (and (not x387) (and (<= x17 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= x180 (x191 x451)) (or (<= x17 115792089237316195423570985008687907853269984665640564039457584007913129639899) (>= x17 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (= (x433 (+ x17 36)) x312) (= (x433 (+ 32 x312)) x12) (= (ite x350 1 0) x245) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639868 x17)) (= x116 (x468 0)) (not (= x17 115792089237316195423570985008687907853269984665640564039457584007913129639868)) (= x413 (x395 x123)) (= x255 x310) (> x12 x17) (<= x17 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= x451 (+ x123 4)) (= x203 1) (or (>= x17 115792089237316195423570985008687907853269984665640564039457584007913129639904) (<= x17 115792089237316195423570985008687907853269984665640564039457584007913129639899)) (= (x229 x180) x350) (= (x186 (- x445 32)) x88) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639868 x17)) (<= x17 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= x445 (x186 (- x12 x17))) (= (x433 (+ 32 x17)) x123) (= (x468 0) x195) (or (>= x17 115792089237316195423570985008687907853269984665640564039457584007913129639904) (<= x17 115792089237316195423570985008687907853269984665640564039457584007913129639899)) (>= x116 1) (= x110 (+ x403 904250603428552709895185118199468575982109441609966099573332780532423983104)) (= (x56 26959946667150639794667015087019630673637144422540572481103610249215 x413) x403) (= x218 x12))) (and x387 (and (= 1 x357) (= x218 x17))))) x140)))
(assert (x311 x370))
(assert (x311 x41))
(assert (x311 x374))
(assert (x311 x459))
(assert (= (x222 (x219 64 x233 1)) (x219 64 x233 1)))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x219 52 x421 x59)))
(assert (=> (>= 10000 x255) (= 0 (x222 x255))))
(assert (x311 x379))
(assert (< 10000 (x219 64 x437 x50)))
(assert (= x275 (x292 (x219 64 x275 x33))))
(assert (=> (<= x174 10000) (= 0 (x222 x174))))
(assert (= (x69 (x219 64 x474 1)) 1))
(assert (x452 1 (x462 2 x148)))
(assert (x355 115792089237316195423570985008687907853269984665640564039457584007913129639868))
(assert (x311 x434))
(assert (=> (<= x421 10000) (= (x222 x421) 0)))
(assert (x375 x164))
(assert (= (x222 1461501637330902918203684832716283019655932542975) 0))
(assert (x452 1 (x462 2 x455)))
(assert (x311 x62))
(assert (not (x355 (x219 64 x254 x132))))
(assert (= (x74 (x219 64 x23 x316)) 64))
(assert (= 64 (x74 (x219 64 x275 x33))))
(assert (x408 (x462 2 x148)))
(assert (x311 x79))
(assert (= (x292 (x219 64 x157 1)) x157))
(assert (= x279 (x292 (x219 64 x279 x285))))
(assert (> (x219 64 x226 x66) 10000))
(assert (x452 1 (x462 2 x371)))
(assert (x151 x473 256))
(assert (not (x355 (x219 64 x493 x54))))
(assert (x311 x71))
(assert (x375 x473))
(assert (< (x219 64 x174 1) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= 0 (x222 2598255213)))
(assert (= x166 (x292 (x219 64 x166 x256))))
(assert (x311 x450))
(assert (= (x222 (x219 64 x254 x132)) (x219 64 x254 x132)))
(assert (x290 x2))
(assert (= (x222 (+ x196 1)) (x222 x196)))
(assert (x311 x34))
(assert (x311 x107))
(assert (= (x74 (x219 64 x255 4)) 64))
(assert (not (x355 (x219 64 x437 x50))))
(assert (< 10000 (x219 64 x73 1)))
(assert (x311 x485))
(assert (x355 137438953604))
(assert (x311 x275))
(assert (x311 x51))
(assert (x290 x413))
(assert (= x5 (and (not x128) x291)))
(assert (=> (<= x92 10000) (= (x222 x92) 0)))
(assert (x355 115792089237316195423570985008687907853269984665640564039457584007913129639853))
(assert (= x132 (x292 (x219 64 x132 x254))))
(assert (= x226 (x292 (x219 64 x226 x66))))
(assert (x355 115792089237316195423570985008687907853269984665640564039457584007913129639934))
(assert (x311 x132))
(assert (x408 x450))
(assert (x408 (x462 2 x371)))
(assert (and (= (x435 9 3) 27) (= (x435 27 3) 81) (= 9 (x435 3 3)) (= 81 (x435 9 9))))
(assert (x358 x473))
(assert (= x73 (x292 (x219 64 x73 1))))
(assert (= (x219 64 x255 4) (x222 (x219 64 x255 4))))
(assert (x311 x184))
(assert (x296 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x311 x110))
(assert (= x33 (x69 (x219 64 x275 x33))))
(assert (not x398))
(assert (= x417 (and x284 x464)))
(assert (= (x308 (ite (> 256 x148) (x462 2 x148) 0)) (x72 1 x148)))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x219 64 x474 1)))
(assert (x311 x43))
(assert (x311 x497))
(assert (x311 x455))
(assert (x311 x90))
(assert (x311 x244))
(assert (x311 x193))
(assert (x311 x124))
(assert (x311 x463))
(assert (= (x222 1315048582) 0))
(assert (x7 x421 256))
(assert (x311 x372))
(assert (x311 x333))
(assert (x311 x92))
(assert (x355 2544733239))
(assert (x311 x235))
(assert (x311 x237))
(assert (x311 x383))
(assert (not (x355 (x219 64 x162 4))))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x219 64 x279 x285)))
(assert (=> (>= 10000 x241) (= 0 (x222 x241))))
(assert (= (x219 64 x474 1) (x222 (x219 64 x474 1))))
(assert (x311 x429))
(assert (=> (>= 10000 x177) (= 0 (x222 x177))))
(assert (x311 x148))
(assert (x302 x175))
(assert (x311 x248))
(assert (x355 1315048582))
(assert (x311 x449))
(assert (x311 x73))
(assert (x7 x473 256))
(assert (= (x222 115792089237316195423570985008687907853269984665640564039457584007913129639934) 0))
(assert (= (x222 x306) (x222 (+ x306 3))))
(assert (x311 x12))
(assert (x296 (ite (> 256 x55) (x462 2 x55) 0)))
(assert (x355 79228162514264337593543950336))
(assert (x296 x413))
(assert (x311 x119))
(assert (< 10000 (x219 64 x255 1)))
(assert (= (x292 (x219 64 x255 1)) x255))
(assert (x311 x168))
(assert (x311 x465))
(assert (x311 x233))
(assert (x296 26959946667150639794667015087019630673637144422540572481103610249216))
(assert (= (or x409 x5) x160))
(assert (< 10000 (x219 64 x23 x316)))
(assert (= (x292 (x219 64 x146 x266)) x146))
(assert (=> (<= x73 10000) (= 0 (x222 x73))))
(assert (x311 x230))
(assert (x311 x23))
(assert (x311 x164))
(assert (> (x219 64 x301 x394) 10000))
(assert (x375 x425))
(assert (x311 x157))
(assert (= (x222 2510660263) 0))
(assert (x311 x293))
(assert (x151 x421 256))
(assert (= 1 (x69 (x219 64 x157 1))))
(assert (x311 x2))
(assert (x311 x257))
(assert (x311 x388))
(assert (= (x292 (x219 52 x421 x59)) x421))
(assert (= x291 (and x500 x354)))
(assert (x311 x454))
(assert (x311 x312))
(assert (not (x355 (x219 64 x275 x33))))
(assert (not (x355 (x219 64 x23 x316))))
(assert (= (x292 (x219 64 x23 x316)) x23))
(assert (= 4 (x69 (x219 64 x162 4))))
(assert (= (and x284 (not x464)) x130))
(assert (x355 2510660263))
(assert (= x394 (x69 (x219 64 x301 x394))))
(assert (x311 x410))
(assert (=> (<= x162 10000) (= (x222 x162) 0)))
(assert (x311 x6))
(assert (= (x74 (x219 64 x113 x266)) 64))
(assert (x375 x2))
(assert (=> (<= x166 10000) (= 0 (x222 x166))))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x219 64 x162 4)))
(assert (= x174 (x292 (x219 64 x174 1))))
(assert (x302 x141))
(assert (x13 x421))
(assert (x428 x449 x164))
(assert (= (x74 (x219 64 x233 1)) 64))
(assert (= (or x262 x340) x500))
(assert (x311 x259))
(assert (x375 x413))
(assert (x311 x413))
(assert (x311 x390))
(assert (not (x355 (x219 64 x113 x266))))
(assert (= (x263 x333 256) (x78 x333 8)))
(assert (x7 x413 26959946667150639794667015087019630673637144422540572481103610249216))
(assert (= (x222 x251) (x222 (+ x251 2))))
(assert (= 0 (x222 2544733239)))
(assert (x375 26959946667150639794667015087019630673637144422540572481103610249215))
(assert (x311 x482))
(assert (=> (<= x275 10000) (= 0 (x222 x275))))
(assert (x311 x217))
(assert (x13 x473))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x219 64 x254 x132)))
(assert (x311 x125))
(assert (< (x219 64 x275 x33) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (=> (and (and (<= 0 x161) x227 (<= 1 x117) (>= 1461501637330902918203684832716283019655932542975 x453) (not (= x117 x177)) (<= x440 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x313 x192) (>= x192 0) (= (< 0 (x144 x92)) x411) x439 (>= x82 0) (<= 1 x177) (= (> (x144 x117) 0) x300) (<= 0 x453) (= x288 0) (<= 0 x330) (>= 1461501637330902918203684832716283019655932542975 x117) (>= x440 0) (<= x92 1461501637330902918203684832716283019655932542975) (not (= x92 x241)) (not (= x177 x92)) (not (= x117 x241)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x80) (<= 0 x457) x300 (not (= x117 x92)) (<= x360 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (< 0 (x144 x177)) x439) (>= 1461501637330902918203684832716283019655932542975 x241) (<= x161 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x360 0) (<= x250 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 1 x92) x411 (<= 0 x250) (<= x177 1461501637330902918203684832716283019655932542975) (<= x82 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= x46 1461501637330902918203684832716283019655932542975) (<= 0 x46) (<= 0 x80) (<= x457 1461501637330902918203684832716283019655932542975) (not (= x241 x177)) (<= 0 x214) (= x141 36) (>= x241 1) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x214) (<= x330 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x227 (< 0 (x144 x241))) (>= 1461501637330902918203684832716283019655932542975 x192)) (and (and (= x192 x240) (= x162 x313) (= x388 (x144 x241)) (= false x349) (= 2598255213 x235) (<= x383 255) (= x320 false) (= x118 false) (>= 127 x4) (= false x274) (= x101 (x219 64 x162 4)) (<= x4 127) (<= 1 x388) (= x264 (not (= x404 0))) (= x34 36) (= x404 (ite (not (= 0 x383)) 1 0)) (= false x299) (= (x35 x101) x383) (= false x258)) (and (and (= (ite x491 1 0) x40) (= (x229 x265) x491) (= x341 x330) (= (x419 132) x265) (= 100 x422) (= x481 x399) (<= 1 x94) (= (not (= x36 0)) x25) (>= 127 x11) (= false x209) (= x143 x360) (= x338 false) (= false x26) (= (x155 128) x24) (= x120 x192) (= x159 4270483121) (= false x305) (= x63 x481) (= (x144 x241) x94) (= x163 128) (= (ite (not (= x24 0)) 1 0) x36) (= false x348) (= x364 false) (= x481 x240) (>= 127 x11)) (and (= x120 x174) (and (and (and (= x256 (+ x306 3)) (= x423 false) (= (x78 x333 8) x166) (= false x502) (= x351 false) (>= 127 x246) (= (ite (not (= x119 0)) 1 0) x238) (= x341 x333) (= x244 464684736) (= x376 (x219 64 x166 x256)) (= x333 x248) (<= x246 127) (= (x380 x376) x449) (= (x72 1 x371) x164) (>= x261 1) (= x306 (x219 64 x437 x50)) (>= 137438953604 x471) (= x360 x45) (= false x134) (= x458 (x56 x449 x164)) (= x261 (x144 x241)) (<= 164 x471) (= x330 x281) (= x178 x192) (= x478 (not (= 0 x238))) (= false x95) (= false x202) (= (x219 64 x174 1) x50) (= (ite (not (= x458 0)) 1 0) x119) (<= x450 4294967295) (= (x56 255 x333) x371)) (and (= x178 x213) (and (= x178 x255) (and (= x45 x77) (and (= x45 x493) (and (and (and (= x471 x295) (= x281 x421) (= false x476) (= 128 x454) (= x37 (* 32 x450)) (= (+ 164 x37) x295)) (and (and (= x440 x390) (and (= x457 x103) (= false x185) (= 2 x47) (<= 1 x429) (= x487 (x219 64 x255 4)) (= x329 x346) (<= x217 255) (= x378 (x84 x103)) (= x255 x332) (= false x49) (= x217 (x35 x487)) (>= 4294967295 x366) (= x220 x421) (= (x111 x241) x329) (not (> x167 x471)) (<= x199 127) (= x315 388749022) (= x464 (> x217 0)) (= x385 (* x366 32)) (= (+ x385 164) x167) (>= 127 x199) (not (= x131 2)) (= (x389 132) x366) (= (x144 x241) x429))) (= x259 x457))) (= x243 x281))))))) (= x143 x437)))))) (and (=> (and (= 128 x70) x464) x122) (=> (and (and (and (= (ite x325 1 0) x497) (= 160 x137) (= x57 (x345 164)) (= 0 x172) (= x386 (x18 0)) (= (= 0 x374) x427) (= (x204 160) x2) (= (x56 26959946667150639794667015087019630673637144422540572481103610249215 x2) x485) (= x96 904250603428552709895185118199468575982109441609966099573332780532423983104) (= (+ 904250603428552709895185118199468575982109441609966099573332780532423983104 x485) x400) (= x374 (ite (> x370 0) 1 0)) (= x255 x21) (= x325 (x229 x57)) (= x370 (x18 0))) (or (and (and (= x125 (+ 904250603428552709895185118199468575982109441609966099573332780532423983104 x415)) (= 264 x17) (= (ite (= x165 0) 1 0) x357) (= (ite x201 1 0) x293) (= x183 x255) (= (x319 0) x459) (= (x319 0) x470) (= (x56 26959946667150639794667015087019630673637144422540572481103610249215 x282) x415) (= (ite (< 0 x459) 1 0) x165) (= x79 (x484 232)) (= x420 228) (= (x200 228) x282) (= x201 (x229 x79)) (= 115792089210356248756420345214020892766250353992003419616917011526809519390720 x182)) (not x427)) (and x427 (and (= 196 x17) (= x357 x374))))) (not x464)) x373))) x398))
(assert (x311 x195))
(assert (x311 x400))
(assert (x355 4294967295))
(assert (= (x69 (x219 64 x279 x285)) x285))
(assert (x311 x412))
(assert (= 0 (x222 26959946667150639794667015087019630673637144422540572481103610249215)))
(assert (= 0 (x222 4294967295)))
(assert (not (x355 (x219 52 x421 x59))))
(assert (= (x222 (x219 64 x255 1)) (x219 64 x255 1)))
(assert (x311 x304))
(assert (x311 x57))
(assert (x7 (ite (< x455 256) (x462 2 x455) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x311 x226))
(assert (> (x219 64 x113 x266) 10000))
(assert (x311 x386))
(assert (x311 x220))
(assert (x355 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (> (x219 64 x279 x285) 10000))
(assert (x355 115792089237316195423570985008687907853269984665640564039457584007913129639850))
(assert (x311 x261))
(assert (= x138 (and (not x387) x289)))
(assert (x311 x180))
(assert (< 10000 (x219 52 x421 x59)))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x219 64 x23 x316)))
(assert (x311 x30))
(assert (= x284 true))
(assert (x311 x165))
(assert (x311 x113))
(assert (x311 x424))
(assert (= x59 (x69 (x219 52 x421 x59))))
(assert (x311 x437))
(assert (x375 x106))
(assert (x311 x169))
(assert (= (x219 64 x226 x66) (x222 (x219 64 x226 x66))))
(assert (= (or x152 x22) x289))
(assert (= (x222 115792089237316195423570985008687907853269984665640564039457584007913129639868) 0))
(assert (x302 x422))
(assert (x311 x346))
(assert (= x488 (=> (and (= x254 (x219 52 x421 x59)) (= (x186 (- x168 32)) x41) (= (x433 (+ x90 x393)) x465) (= (< 0 x230) x354) (= (x108 x496) x230) (< x70 x496) (< x496 x216) (= (x186 (- x496 x70)) x168) (= (* x366 32) x90) (= (x433 (+ x207 32)) x307) (= x412 (x194 x432)) (= x496 (x433 (+ x307 20))) (or (<= x70 115792089237316195423570985008687907853269984665640564039457584007913129639850) (<= 115792089237316195423570985008687907853269984665640564039457584007913129639853 x70)) (= x434 (* 32 x366)) (<= 2 x216) (= x216 (x433 (+ (mod (+ 32 x434) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x496))) (= (x433 (+ 32 x70)) x207) (or (<= 115792089237316195423570985008687907853269984665640564039457584007913129639853 x70) (<= x70 115792089237316195423570985008687907853269984665640564039457584007913129639850)) (= (x433 (+ 32 x496)) x393) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639933 x70) (= (* x259 79228162514264337593543950336) x59) (<= x70 115792089237316195423570985008687907853269984665640564039457584007913129639933) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639933 x70) (or (<= 115792089237316195423570985008687907853269984665640564039457584007913129639853 x70) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639850 x70))) (and (=> (and x354 (and (and (>= x363 1) (= x132 (x108 x424)) (= (x433 (+ 32 x496)) x424) (= (< x254 x132) x128) (= (x108 x496) x363)) (or (and (and (= x479 x418) (= x479 (x219 64 x132 x254))) (not x128)) (and x128 (and (= x426 (x219 64 x254 x132)) (= x426 x418)))))) x142) (=> (and (not x354) (= x254 x38)) x324)))))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x219 64 x166 x256)))
(assert (x408 x259))
(assert (x311 x282))
(assert (x311 x238))
(assert (not (x355 (x219 64 x73 1))))
(assert (x311 x11))
(assert (< (x219 64 x493 x54) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= x152 (and x130 (not x427))))
(assert (x311 x445))
(assert (x7 x333 256))
(assert (x408 x366))
(assert (= x179 (or x76 x160)))
(assert (= 64 (x74 (x219 64 x279 x285))))
(assert (x311 x422))
(assert (=> (>= 10000 x233) (= (x222 x233) 0)))
(assert (= 1 (x69 (x219 64 x73 1))))
(assert (x302 x317))
(assert (=> (<= x103 10000) (= (x222 x103) 0)))
(assert (= 64 (x74 (x219 64 x437 x50))))
(assert (= 0 (x222 115792089210356248756420345214020892766250353992003419616917011526809519390720)))
(assert (x290 x282))
(assert (x296 x473))
(assert (x311 x135))
(assert (=> (<= x132 10000) (= 0 (x222 x132))))
(assert (= (x74 (x219 64 x254 x132)) 64))
(assert (x311 x53))
(assert (x311 x287))
(assert (= x113 (x292 (x219 64 x113 x266))))
(assert (x311 x37))
(assert (= 0 (x222 137438953604)))
(assert (x311 x415))
(assert (x311 x216))
(assert (x311 x55))
(assert (= (and x489 x150) x262))
(assert (= (x69 (x219 64 x132 x254)) x254))
(assert (x311 x218))
(assert (x311 x249))
(assert (x311 x116))
(assert (x311 x301))
(assert (x7 (ite (> 256 x371) (x462 2 x371) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (< (x219 64 x113 x266) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= 1 (x69 (x219 64 x255 1))))
(assert (=> (>= 10000 x146) (= (x222 x146) 0)))
(assert (=> (<= x157 10000) (= (x222 x157) 0)))
(assert (and (= 2722258935367507707706996859454145691648 (x462 2 131)) (= 549755813888 (x462 2 39)) (= (x462 2 87) 154742504910672534362390528) (= (x462 2 100) 1267650600228229401496703205376) (= (x462 2 162) 5846006549323611672814739330865132078623730171904) (= 22300745198530623141535718272648361505980416 (x462 2 144)) (= 128 (x462 2 7)) (= 340282366920938463463374607431768211456 (x462 2 128)) (= (x462 2 108) 324518553658426726783156020576256) (= 1427247692705959881058285969449495136382746624 (x462 2 150)) (= (x462 2 52) 4503599627370496) (= (x462 2 245) 56539106072908298546665520023773392506479484700019806659891398441363832832) (= (x462 2 179) 766247770432944429179173513575154591809369561091801088) (= 14134776518227074636666380005943348126619871175004951664972849610340958208 (x462 2 243)) (= (x462 2 28) 268435456) (= (x462 2 10) 1024) (= 3450873173395281893717377931138512726225554486085193277581262111899648 (x462 2 231)) (= 2361183241434822606848 (x462 2 71)) (= (x462 2 135) 43556142965880123323311949751266331066368) (= (x462 2 216) 105312291668557186697918027683670432318895095400549111254310977536) (= 93536104789177786765035829293842113257979682750464 (x462 2 166)) (= (x462 2 199) 803469022129495137770981046170581301261101496891396417650688) (= 95780971304118053647396689196894323976171195136475136 (x462 2 176)) (= 664613997892457936451903530140172288 (x462 2 119)) (= 226156424291633194186662080095093570025917938800079226639565593765455331328 (x462 2 247)) (= 134217728 (x462 2 27)) (= 411376139330301510538742295639337626245683966408394965837152256 (x462 2 208)) (= (x462 2 210) 1645504557321206042154969182557350504982735865633579863348609024) (= (x462 2 136) 87112285931760246646623899502532662132736) (= 196159429230833773869868419475239575503198607639501078528 (x462 2 187)) (= (x462 2 189) 784637716923335095479473677900958302012794430558004314112) (= 274877906944 (x462 2 38)) (= (x462 2 22) 4194304) (= 22835963083295358096932575511191922182123945984 (x462 2 154)) (= (x462 2 153) 11417981541647679048466287755595961091061972992) (= (x462 2 238) 441711766194596082395824375185729628956870974218904739530401550323154944) (= 39614081257132168796771975168 (x462 2 95)) (= 822752278660603021077484591278675252491367932816789931674304512 (x462 2 209)) (= 536870912 (x462 2 29)) (= 55213970774324510299478046898216203619608871777363092441300193790394368 (x462 2 235)) (= 9223372036854775808 (x462 2 63)) (= 1725436586697640946858688965569256363112777243042596638790631055949824 (x462 2 230)) (= (x462 2 157) 182687704666362864775460604089535377456991567872) (= 25711008708143844408671393477458601640355247900524685364822016 (x462 2 204)) (= 2199023255552 (x462 2 41)) (= 2305843009213693952 (x462 2 61)) (= (x462 2 213) 13164036458569648337239753460458804039861886925068638906788872192) (= 1496577676626844588240573268701473812127674924007424 (x462 2 170)) (= (x462 2 255) 57896044618658097711785492504343953926634992332820282019728792003956564819968) (= 576460752303423488 (x462 2 59)) (= 1606938044258990275541962092341162602522202993782792835301376 (x462 2 200)) (= 70368744177664 (x462 2 46)) (= 26328072917139296674479506920917608079723773850137277813577744384 (x462 2 214)) (= (x462 2 192) 6277101735386680763835789423207666416102355444464034512896) (= 16 (x462 2 4)) (= 696898287454081973172991196020261297061888 (x462 2 139)) (= 12855504354071922204335696738729300820177623950262342682411008 (x462 2 203)) (= (x462 2 43) 8796093022208) (= (x462 2 225) 53919893334301279589334030174039261347274288845081144962207220498432) (= 40564819207303340847894502572032 (x462 2 105)) (= (x462 2 140) 1393796574908163946345982392040522594123776) (= (x462 2 158) 365375409332725729550921208179070754913983135744) (= 6427752177035961102167848369364650410088811975131171341205504 (x462 2 202)) (= 220855883097298041197912187592864814478435487109452369765200775161577472 (x462 2 237)) (= (x462 2 23) 8388608) (= (x462 2 3) 8) (= 3138550867693340381917894711603833208051177722232017256448 (x462 2 191)) (= 356811923176489970264571492362373784095686656 (x462 2 148)) (= (x462 2 74) 18889465931478580854784) (= (x462 2 253) 14474011154664524427946373126085988481658748083205070504932198000989141204992) (= 24519928653854221733733552434404946937899825954937634816 (x462 2 184)) (= (x462 2 36) 68719476736) (= 512 (x462 2 9)) (= 11150372599265311570767859136324180752990208 (x462 2 143)) (= 421249166674228746791672110734681729275580381602196445017243910144 (x462 2 218)) (= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x462 2 256)) (= (x462 2 110) 1298074214633706907132624082305024) (= 649037107316853453566312041152512 (x462 2 109)) (= (x462 2 104) 20282409603651670423947251286016) (= 9671406556917033397649408 (x462 2 83)) (= (x462 2 17) 131072) (= 288230376151711744 (x462 2 58)) (= (x462 2 54) 18014398509481984) (= 4611686018427387904 (x462 2 62)) (= (x462 2 113) 10384593717069655257060992658440192) (= (x462 2 132) 5444517870735015415413993718908291383296) (= 9903520314283042199192993792 (x462 2 93)) (= (x462 2 16) 65536) (= 83076749736557242056487941267521536 (x462 2 116)) (= (x462 2 86) 77371252455336267181195264) (= (x462 2 55) 36028797018963968) (= (x462 2 246) 113078212145816597093331040047546785012958969400039613319782796882727665664) (= (x462 2 201) 3213876088517980551083924184682325205044405987565585670602752) (= (x462 2 164) 23384026197294446691258957323460528314494920687616) (= (x462 2 94) 19807040628566084398385987584) (= 2854495385411919762116571938898990272765493248 (x462 2 151)) (= (x462 2 248) 452312848583266388373324160190187140051835877600158453279131187530910662656) (= 2923003274661805836407369665432566039311865085952 (x462 2 161)) (= (x462 2 252) 7237005577332262213973186563042994240829374041602535252466099000494570602496) (= (x462 2 229) 862718293348820473429344482784628181556388621521298319395315527974912) (= (x462 2 239) 883423532389192164791648750371459257913741948437809479060803100646309888) (= (x462 2 79) 604462909807314587353088) (= (x462 2 66) 73786976294838206464) (= 11692013098647223345629478661730264157247460343808 (x462 2 163)) (= 295147905179352825856 (x462 2 68)) (= (x462 2 186) 98079714615416886934934209737619787751599303819750539264) (= (x462 2 49) 562949953421312) (= (x462 2 211) 3291009114642412084309938365114701009965471731267159726697218048) (= 44601490397061246283071436545296723011960832 (x462 2 145)) (= 4 (x462 2 2)) (= (x462 2 188) 392318858461667547739736838950479151006397215279002157056) (= (x462 2 33) 8589934592) (= 5070602400912917605986812821504 (x462 2 102)) (= (x462 2 242) 7067388259113537318333190002971674063309935587502475832486424805170479104) (= 1569275433846670190958947355801916604025588861116008628224 (x462 2 190)) (= (x462 2 236) 110427941548649020598956093796432407239217743554726184882600387580788736) (= (x462 2 37) 137438953472) (= (x462 2 47) 140737488355328) (= 348449143727040986586495598010130648530944 (x462 2 138)) (= 21267647932558653966460912964485513216 (x462 2 124)) (= (x462 2 193) 12554203470773361527671578846415332832204710888928069025792) (= (x462 2 84) 19342813113834066795298816) (= (x462 2 64) 18446744073709551616) (= (x462 2 50) 1125899906842624) (= (x462 2 96) 79228162514264337593543950336) (= (x462 2 85) 38685626227668133590597632) (= (x462 2 126) 85070591730234615865843651857942052864) (= (x462 2 11) 2048) (= 5192296858534827628530496329220096 (x462 2 112)) (= 3618502788666131106986593281521497120414687020801267626233049500247285301248 (x462 2 251)) (= 2658455991569831745807614120560689152 (x462 2 121)) (= (x462 2 91) 2475880078570760549798248448) (= (x462 2 44) 17592186044416) (= 162259276829213363391578010288128 (x462 2 107)) (= 590295810358705651712 (x462 2 69)) (= (x462 2 114) 20769187434139310514121985316880384) (= 178405961588244985132285746181186892047843328 (x462 2 147)) (= (x462 2 159) 730750818665451459101842416358141509827966271488) (= 1073741824 (x462 2 30)) (= 10889035741470030830827987437816582766592 (x462 2 133)) (= 4096 (x462 2 12)) (= 633825300114114700748351602688 (x462 2 99)) (= 151115727451828646838272 (x462 2 77)) (= 11972621413014756705924586149611790497021399392059392 (x462 2 173)) (= (x462 2 32) 4294967296) (= (x462 2 34) 17179869184) (= (x462 2 24) 16777216) (= (x462 2 197) 200867255532373784442745261542645325315275374222849104412672) (= 210624583337114373395836055367340864637790190801098222508621955072 (x462 2 217)) (= (x462 2 40) 1099511627776) (= (x462 2 78) 302231454903657293676544) (= 4398046511104 (x462 2 42)) (= 174224571863520493293247799005065324265472 (x462 2 137)) (= 4835703278458516698824704 (x462 2 82)) (= 9444732965739290427392 (x462 2 73)) (= 26959946667150639794667015087019630673637144422540572481103610249216 (x462 2 224)) (= 89202980794122492566142873090593446023921664 (x462 2 146)) (= 64 (x462 2 6)) (= 32 (x462 2 5)) (= (x462 2 19) 524288) (= (x462 2 183) 12259964326927110866866776217202473468949912977468817408) (= 2417851639229258349412352 (x462 2 81)) (= (x462 2 195) 50216813883093446110686315385661331328818843555712276103168) (= (x462 2 101) 2535301200456458802993406410752) (= 170141183460469231731687303715884105728 (x462 2 127)) (= 8192 (x462 2 13)) (= (x462 2 169) 748288838313422294120286634350736906063837462003712) (= (x462 2 228) 431359146674410236714672241392314090778194310760649159697657763987456) (= 187072209578355573530071658587684226515959365500928 (x462 2 167)) (= 4722366482869645213696 (x462 2 72)) (= (x462 2 234) 27606985387162255149739023449108101809804435888681546220650096895197184) (= (x462 2 97) 158456325028528675187087900672) (= (x462 2 149) 713623846352979940529142984724747568191373312) (= 16384 (x462 2 14)) (= (x462 2 206) 102844034832575377634685573909834406561420991602098741459288064) (= (x462 2 215) 52656145834278593348959013841835216159447547700274555627155488768) (= 13479973333575319897333507543509815336818572211270286240551805124608 (x462 2 223)) (= 5986310706507378352962293074805895248510699696029696 (x462 2 172)) (= (x462 2 111) 2596148429267413814265248164610048) (= 5575186299632655785383929568162090376495104 (x462 2 142)) (= (x462 2 249) 904625697166532776746648320380374280103671755200316906558262375061821325312) (= 34359738368 (x462 2 35)) (= (x462 2 254) 28948022309329048855892746252171976963317496166410141009864396001978282409984) (= (x462 2 76) 75557863725914323419136) (= 28269553036454149273332760011886696253239742350009903329945699220681916416 (x462 2 244)) (= 2147483648 (x462 2 31)) (= 1 (x462 2 0)) (= (x462 2 20) 1048576) (= 281474976710656 (x462 2 48)) (= 680564733841876926926749214863536422912 (x462 2 129)) (= 191561942608236107294793378393788647952342390272950272 (x462 2 177)) (= 3369993333393829974333376885877453834204643052817571560137951281152 (x462 2 221)) (= 147573952589676412928 (x462 2 67)) (= 1208925819614629174706176 (x462 2 80)) (= 1237940039285380274899124224 (x462 2 90)) (= 3533694129556768659166595001485837031654967793751237916243212402585239552 (x462 2 241)) (= (x462 2 88) 309485009821345068724781056) (= (x462 2 160) 1461501637330902918203684832716283019655932542976) (= 1684996666696914987166688442938726917102321526408785780068975640576 (x462 2 220)) (= 9007199254740992 (x462 2 53)) (= 42535295865117307932921825928971026432 (x462 2 125)) (= (x462 2 219) 842498333348457493583344221469363458551160763204392890034487820288) (= 23945242826029513411849172299223580994042798784118784 (x462 2 174)) (= (x462 2 25) 33554432) (= 35184372088832 (x462 2 45)) (= 166153499473114484112975882535043072 (x462 2 117)) (= 2251799813685248 (x462 2 51)) (= (x462 2 123) 10633823966279326983230456482242756608) (= (x462 2 181) 3064991081731777716716694054300618367237478244367204352) (= 1152921504606846976 (x462 2 60)) (= 21778071482940061661655974875633165533184 (x462 2 134)) (= 383123885216472214589586756787577295904684780545900544 (x462 2 178)) (= (x462 2 98) 316912650057057350374175801344) (= (x462 2 240) 1766847064778384329583297500742918515827483896875618958121606201292619776) (= (x462 2 70) 1180591620717411303424) (= (x462 2 15) 32768) (= (x462 2 92) 4951760157141521099596496896) (= 6739986666787659948666753771754907668409286105635143120275902562304 (x462 2 222)) (= 13803492693581127574869511724554050904902217944340773110325048447598592 (x462 2 233)) (= (x462 2 250) 1809251394333065553493296640760748560207343510400633813116524750123642650624) (= (x462 2 168) 374144419156711147060143317175368453031918731001856) (= (x462 2 122) 5316911983139663491615228241121378304) (= (x462 2 182) 6129982163463555433433388108601236734474956488734408704) (= (x462 2 152) 5708990770823839524233143877797980545530986496) (= 36893488147419103232 (x462 2 65)) (= (x462 2 196) 100433627766186892221372630771322662657637687111424552206336) (= 144115188075855872 (x462 2 57)) (= 37778931862957161709568 (x462 2 75)) (= (x462 2 165) 46768052394588893382517914646921056628989841375232) (= (x462 2 185) 49039857307708443467467104868809893875799651909875269632) (= (x462 2 1) 2) (= (x462 2 130) 1361129467683753853853498429727072845824) (= 41538374868278621028243970633760768 (x462 2 115)) (= 67108864 (x462 2 26)) (= (x462 2 212) 6582018229284824168619876730229402019930943462534319453394436096) (= 25108406941546723055343157692830665664409421777856138051584 (x462 2 194)) (= (x462 2 156) 91343852333181432387730302044767688728495783936) (= (x462 2 180) 1532495540865888858358347027150309183618739122183602176) (= (x462 2 118) 332306998946228968225951765070086144) (= (x462 2 106) 81129638414606681695789005144064) (= (x462 2 18) 262144) (= 2787593149816327892691964784081045188247552 (x462 2 141)) (= 10141204801825835211973625643008 (x462 2 103)) (= (x462 2 8) 256) (= 618970019642690137449562112 (x462 2 89)) (= (x462 2 232) 6901746346790563787434755862277025452451108972170386555162524223799296) (= (x462 2 205) 51422017416287688817342786954917203280710495801049370729644032) (= 215679573337205118357336120696157045389097155380324579848828881993728 (x462 2 227)) (= (x462 2 171) 2993155353253689176481146537402947624255349848014848) (= (x462 2 56) 72057594037927936) (= 205688069665150755269371147819668813122841983204197482918576128 (x462 2 207)) (= 45671926166590716193865151022383844364247891968 (x462 2 155)) (= (x462 2 175) 47890485652059026823698344598447161988085597568237568) (= (x462 2 120) 1329227995784915872903807060280344576) (= (x462 2 226) 107839786668602559178668060348078522694548577690162289924414440996864) (= (x462 2 198) 401734511064747568885490523085290650630550748445698208825344) (= (x462 2 21) 2097152)))
(assert (x311 x481))
(assert (x311 x295))
(assert (< 10000 (x219 64 x174 1)))
(assert (= (x222 115792089237316195423570985008687907853269984665640564039457584007913129639935) 0))
(assert (=> (>= 10000 x493) (= 0 (x222 x493))))
(assert (= 64 (x74 (x219 64 x146 x266))))
(assert (not (x355 (x219 64 x226 x66))))
(assert (x355 53088212814352749625721495065708639950629078354262018589583637907274549166080))
(assert (> (x219 64 x255 4) 10000))
(assert (= 64 (x74 (x219 64 x226 x66))))
(assert (not (x355 (x219 64 x174 1))))
(assert (x311 x225))
(assert (x311 x48))
(assert (x311 x4))
(assert (=> (>= 10000 x437) (= 0 (x222 x437))))
(assert (x355 115792089237316195423570985008687907853269984665640564039457584007913129639933))
(assert (x311 x9))
(assert (not (x355 (x219 64 x301 x394))))
(assert (x375 x463))
(assert (x311 x403))
(assert (= (x222 (x219 64 x275 x33)) (x219 64 x275 x33)))
(assert (not (x355 (x219 64 x132 x254))))
(assert (x311 x52))
(assert (x375 x6))
(assert (= (x219 64 x146 x266) (x222 (x219 64 x146 x266))))
(assert (x358 256))
(assert (x296 (ite (> 256 x455) (x462 2 x455) 0)))
(assert (not (x355 (x219 64 x255 1))))
(assert (x311 x473))
(assert (= (and (not x489) x150) x340))
(assert (= (x219 64 x301 x394) (x222 (x219 64 x301 x394))))
(assert (x355 115792089237316195423570985008687907853269984665640564039457584007913129639899))
(assert (< (x219 64 x301 x394) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x311 x182))
(assert (x311 x70))
(assert (< 10000 (x219 64 x166 x256)))
(assert (x452 1 (x462 2 x55)))
(assert (< (x219 64 x73 1) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x311 x328))
(assert (x311 x486))
(assert (= (x222 115792089237316195423570985008687907853269984665640564039457584007913129639933) 0))
(assert (x408 (x462 2 x455)))
(assert (= (x222 (x219 64 x166 x256)) (x219 64 x166 x256)))
(assert (= x233 (x292 (x219 64 x233 1))))
(assert (x302 x492))
(assert (x311 x441))
(assert (x311 x404))
(assert (=> (>= 10000 x301) (= (x222 x301) 0)))
(assert (x311 x96))
(assert (= (x74 (x219 64 x174 1)) 64))
(assert (x296 x333))
(assert (x311 x366))
(assert (> (x219 64 x157 1) 10000))
(assert (x355 388749022))
(assert (x7 (ite (> 256 x148) (x462 2 x148) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x311 x175))
(assert (x7 (ite (> 256 x55) (x462 2 x55) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x311 x243))
(assert (x375 x333))
(assert (x311 x425))
(assert (x311 x40))
(assert (x311 x177))
(assert (= (x222 (x219 64 x162 4)) (x219 64 x162 4)))
(assert (x355 26959946667150639794667015087019630673637144422540572481103610249215))
(assert (x44 x9 x260))
(assert (= (and x289 x387) x335))
(assert (x296 (ite (> 256 x148) (x462 2 x148) 0)))
(assert (x355 1461501637330902918203684832716283019655932542975))
(assert (x311 x10))
(assert (x408 32))
(assert (= x66 (x69 (x219 64 x226 x66))))
(assert (x311 x493))
(assert (x311 x494))
(assert (= (x308 (ite (< x371 256) (x462 2 x371) 0)) (x72 1 x371)))
(assert (x311 x470))
(assert (x355 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x311 x458))
(assert (< 10000 (x219 64 x275 x33)))
(assert (x311 x106))
(assert (x311 x174))
(assert (x311 x420))
(assert (x311 x63))
(assert (x302 x34))
(assert (x452 32 x366))
(assert (= x162 (x292 (x219 64 x162 4))))
(assert (not (x355 (x219 64 x474 1))))
(assert (x311 x159))
(assert (> (x219 64 x493 x54) 10000))
(assert (x452 79228162514264337593543950336 x259))
(assert (= (x69 (x219 64 x233 1)) 1))
(assert (= (x222 (+ 1 x190)) (x222 x190)))
(assert (= (x222 (x219 64 x132 x254)) (x219 64 x132 x254)))
(assert (= (x219 64 x437 x50) (x222 (x219 64 x437 x50))))
(assert (x428 x6 x463))
(assert (= (or x417 x85) x150))
(assert (= (or x335 x138) x85))
(assert (x296 (ite (> 256 x371) (x462 2 x371) 0)))
(assert (x311 x378))
(assert (x311 x77))
(assert (= x54 (x69 (x219 64 x493 x54))))
(assert (= (x222 115792089237316195423570985008687907853269984665640564039457584007913129639850) 0))
(assert (x311 x211))
(assert (x311 x385))
(assert (= 64 (x74 (x219 64 x162 4))))
(assert (= (x222 115792089237316195423570985008687907853269984665640564039457584007913129639899) 0))
(assert (x302 x471))
(assert (= (x222 115792089237316195423570985008687907853269984665640564039457584007913129639853) 0))
(assert (x311 x471))
(assert (x13 x333))
(assert (< (x219 64 x437 x50) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= x50 (x69 (x219 64 x437 x50))))
(assert (x375 x282))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x219 64 x146 x266)))
(assert (x311 x88))
(assert (= x324 (=> (and (= (x72 1 x148) x260) (= x38 x412) (= x482 1) (= (x270 x9 x260) x287) (= x147 false) (= x328 (x433 (+ 32 x216))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x216) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x216) (= (x433 (+ 4 x216)) x10) (= x368 (or x264 x25)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x216) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x216)) (= x113 (x78 x421 8)) (< x216 x328) (not (= x216 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (= (x219 64 x113 x266) x89) (= false x67) (= (x56 255 x421) x148) (= x124 1) (not (= x216 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (= (x380 x89) x9)) (and (=> (and (and (and (= x394 (x219 64 x157 1)) (= x97 false) (= (x144 x241) x30) (= (x219 64 x301 x394) x28) (= x362 (not x224)) (<= 1 x30) (= x467 x301) (= false x353) (= (= x494 0) x224) (= x104 false) (>= 127 x257) (= x456 false) (<= x257 127) (= x365 false) (= 2510660263 x188) (= (x194 x28) x494) (= false x294)) (= x447 x157)) (and (= x360 x467) (= 68 x492) (= x447 x192))) (and (=> (= (not x478) x102) (and x102 (=> (and (and (= 68 x175) (= x223 x192) (= x360 x431)) (and (and (and (= (x149 x181) x52) (>= 127 x361) (= x156 false) (= (x219 64 x474 1) x285) (<= 1 x107) (= x247 x360) (= false x342) (= x153 68) (= x441 2544733239) (= x190 (x219 64 x279 x285)) (>= 127 x361) (= x192 x236) (= false x336) (= x431 x279) (= (+ 1 x190) x181) (= x391 false) (= false x334) (= (x144 x241) x107) (= false x367) (= x210 (<= x52 x440))) (and (= x236 x233) (and (= x176 (>= x410 x440)) (= (+ x251 2) x406) (<= 1 x189) (= x66 (x219 64 x233 1)) (= (x144 x241) x189) (= (x68 x406) x410) (= x184 1315048582) (>= 127 x127) (<= x127 127) (= x226 x247) (= x251 (x219 64 x226 x66)) (= false x267) (= x129 false) (= x321 false) (= (and x210 x176) x356) (= x303 false) (= x100 false) (= false x331)))) (= x223 x474))) (and (=> (and (and (= x498 x360) (= 100 x317) (= x187 x330) (= x252 x192)) (and (and (and (= false x461) (= (x72 1 x55) x425) (= false x268) (= x322 false) (= x473 x187) (= (ite (not (= x237 0)) 1 0) x359) (= x33 (x219 64 x73 1)) (= (ite (not (= x71 0)) 1 0) x237) (= x405 false) (= x483 (x219 64 x23 x316)) (= x486 464684736) (= x105 (not (= x359 0))) (<= x193 127) (>= 127 x193) (= x23 (x78 x473 8)) (= (x56 255 x473) x55) (= x316 (+ 3 x42)) (= (x144 x241) x249) (= (x1 x483) x106) (= x121 x473) (= false x212) (= (x56 x106 x425) x71) (= x42 (x219 64 x275 x33)) (= false x126) (<= 1 x249)) (= x275 x498)) (= x252 x73))) x105) x356)))) x362)) x368))))
(assert (x311 x59))
(assert (= (x292 (x219 64 x437 x50)) x437))
(assert (x296 x421))
(check-sat)
(exit)
