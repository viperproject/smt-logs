(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Certora
Generated on: 2024-04-10
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x367 () Bool)
(declare-fun x823 () Int)
(declare-fun x1113 () Bool)
(declare-fun x230 () Int)
(declare-fun x1149 () Bool)
(declare-fun x996 () Int)
(declare-fun x595 () Int)
(declare-fun x873 () Int)
(declare-fun x351 () Int)
(declare-fun x97 () Bool)
(declare-fun x605 () Bool)
(declare-fun x675 () Bool)
(declare-fun x810 () Int)
(declare-fun x249 () Int)
(declare-fun x768 () Bool)
(declare-fun x377 () Int)
(declare-fun x999 (Int Int Int Int Int) Int)
(declare-fun x11 () Int)
(declare-fun x868 () Int)
(declare-fun x496 () Int)
(declare-fun x991 () Int)
(declare-fun x453 () Bool)
(declare-fun x299 () Int)
(declare-fun x902 () Int)
(declare-fun x1056 () Int)
(declare-fun x1094 () Int)
(declare-fun x793 (Int Int Int) Int)
(declare-fun x916 () Int)
(declare-fun x392 () Int)
(declare-fun x256 () Bool)
(declare-fun x455 () Int)
(declare-fun x567 () Int)
(declare-fun x442 () Bool)
(declare-fun x857 () Int)
(declare-fun x236 () Int)
(declare-fun x288 () Int)
(declare-fun x31 () Int)
(declare-fun x349 () Int)
(declare-fun x640 () Bool)
(declare-fun x583 () Int)
(declare-fun x622 () Bool)
(declare-fun x658 () Bool)
(declare-fun x1161 () Bool)
(declare-fun x362 () Int)
(declare-fun x734 () Int)
(declare-fun x1104 () Bool)
(declare-fun x853 () Int)
(declare-fun x609 () Bool)
(declare-fun x206 () Int)
(declare-fun x125 () Int)
(declare-fun x101 () Bool)
(declare-fun x1159 () Int)
(declare-fun x780 () Int)
(declare-fun x115 () Bool)
(declare-fun x617 () Int)
(declare-fun x489 () Bool)
(declare-fun x1148 () Int)
(declare-fun x620 () Int)
(declare-fun x923 () Bool)
(declare-fun x673 () Int)
(declare-fun x538 () Bool)
(declare-fun x664 () Int)
(declare-fun x559 () Int)
(declare-fun x118 () Int)
(declare-fun x610 () Bool)
(declare-fun x1180 () Int)
(declare-fun x659 () Bool)
(declare-fun x140 () Int)
(declare-fun x1144 () Int)
(declare-fun x1128 () Int)
(declare-fun x286 () Int)
(declare-fun x108 () Int)
(declare-fun x782 () Int)
(declare-fun x597 () Bool)
(declare-fun x928 () Bool)
(declare-fun x1078 () Int)
(declare-fun x756 () Int)
(declare-fun x1111 () Int)
(declare-fun x770 () Int)
(declare-fun x47 () Int)
(declare-fun x1132 () Int)
(declare-fun x976 () Int)
(declare-fun x1182 () Bool)
(declare-fun x403 () Int)
(declare-fun x849 () Bool)
(declare-fun x591 () Bool)
(declare-fun x1134 () Int)
(declare-fun x184 () Bool)
(declare-fun x1034 () Int)
(declare-fun x212 () Int)
(declare-fun x590 () Int)
(declare-fun x1072 () Int)
(declare-fun x954 () Int)
(declare-fun x430 () Int)
(declare-fun x213 () Int)
(declare-fun x388 () Int)
(declare-fun x663 () Int)
(declare-fun x625 () Int)
(declare-fun x86 () Bool)
(declare-fun x387 () Bool)
(declare-fun x504 () Bool)
(declare-fun x94 () Bool)
(declare-fun x130 () Bool)
(declare-fun x790 () Int)
(declare-fun x766 () Int)
(declare-fun x905 () Int)
(declare-fun x746 () Bool)
(declare-fun x1004 () Bool)
(declare-fun x1195 () Int)
(declare-fun x1181 () Int)
(declare-fun x851 () Int)
(declare-fun x1060 () Bool)
(declare-fun x414 () Bool)
(declare-fun x685 () Int)
(declare-fun x219 () Bool)
(declare-fun x965 () Int)
(declare-fun x72 () Bool)
(declare-fun x2 () Int)
(declare-fun x68 () Int)
(declare-fun x511 () Int)
(declare-fun x871 () Int)
(declare-fun x1168 () Int)
(declare-fun x208 () Int)
(declare-fun x343 () Int)
(declare-fun x170 () Int)
(declare-fun x938 () Bool)
(declare-fun x696 () Int)
(declare-fun x436 () Int)
(declare-fun x138 () Bool)
(declare-fun x534 () Int)
(declare-fun x1145 () Int)
(declare-fun x1093 () Int)
(declare-fun x203 () Int)
(declare-fun x987 () Bool)
(declare-fun x587 () Bool)
(declare-fun x1130 () Int)
(declare-fun x689 () Int)
(declare-fun x89 () Int)
(declare-fun x196 () Int)
(declare-fun x554 () Bool)
(declare-fun x708 () Int)
(declare-fun x1163 () Int)
(declare-fun x776 () Int)
(declare-fun x251 () Bool)
(declare-fun x962 (Int) Bool)
(declare-fun x328 () Int)
(declare-fun x631 () Int)
(declare-fun x155 () Bool)
(declare-fun x413 () Int)
(declare-fun x1133 () Bool)
(declare-fun x85 () Bool)
(declare-fun x870 () Int)
(declare-fun x1085 () Int)
(declare-fun x1143 (Int Int Int Int) Int)
(declare-fun x522 () Int)
(declare-fun x255 () Int)
(declare-fun x731 () Bool)
(declare-fun x845 () Int)
(declare-fun x322 () Int)
(declare-fun x814 () Bool)
(declare-fun x662 () Int)
(declare-fun x997 () Int)
(declare-fun x290 () Int)
(declare-fun x1150 () Int)
(declare-fun x252 () Int)
(declare-fun x1074 () Int)
(declare-fun x777 () Int)
(declare-fun x951 () Int)
(declare-fun x1035 () Int)
(declare-fun x253 () Int)
(declare-fun x1191 () Bool)
(declare-fun x216 () Int)
(declare-fun x1114 () Int)
(declare-fun x585 () Int)
(declare-fun x828 () Bool)
(declare-fun x608 () Int)
(declare-fun x451 () Bool)
(declare-fun x50 () Bool)
(declare-fun x921 () Int)
(declare-fun x141 () Bool)
(declare-fun x1185 () Int)
(declare-fun x376 () Int)
(declare-fun x624 () Bool)
(declare-fun x515 () Int)
(declare-fun x1099 () Bool)
(declare-fun x185 () Int)
(declare-fun x638 () Bool)
(declare-fun x581 () Int)
(declare-fun x588 () Bool)
(declare-fun x317 () Int)
(declare-fun x1136 () Int)
(declare-fun x468 () Bool)
(declare-fun x960 () Int)
(declare-fun x386 (Int) Int)
(declare-fun x321 () Int)
(declare-fun x796 () Bool)
(declare-fun x1026 () Int)
(declare-fun x1151 () Bool)
(declare-fun x763 () Bool)
(declare-fun x644 (Int) Int)
(declare-fun x36 () Int)
(declare-fun x487 () Int)
(declare-fun x87 () Int)
(declare-fun x669 () Bool)
(declare-fun x29 () Bool)
(declare-fun x886 () Int)
(declare-fun x1046 () Int)
(declare-fun x859 () Bool)
(declare-fun x687 () Int)
(declare-fun x348 () Bool)
(declare-fun x279 () Int)
(declare-fun x250 () Int)
(declare-fun x27 () Int)
(declare-fun x682 () Int)
(declare-fun x989 () Int)
(declare-fun x694 () Int)
(declare-fun x978 () Int)
(declare-fun x264 () Int)
(declare-fun x751 () Int)
(declare-fun x521 () Int)
(declare-fun x940 () Int)
(declare-fun x816 () Int)
(declare-fun x735 () Bool)
(declare-fun x707 () Int)
(declare-fun x243 () Bool)
(declare-fun x429 () Bool)
(declare-fun x647 () Int)
(declare-fun x621 () Int)
(declare-fun x637 (Int Int) Int)
(declare-fun x202 () Int)
(declare-fun x1003 () Int)
(declare-fun x764 () Int)
(declare-fun x1175 () Int)
(declare-fun x273 () Int)
(declare-fun x133 () Int)
(declare-fun x752 () Int)
(declare-fun x1063 () Int)
(declare-fun x62 () Int)
(declare-fun x903 (Int) Int)
(declare-fun x574 () Bool)
(declare-fun x1109 () Bool)
(declare-fun x562 () Bool)
(declare-fun x910 () Int)
(declare-fun x234 () Int)
(declare-fun x281 () Int)
(declare-fun x915 () Int)
(declare-fun x179 () Int)
(declare-fun x1070 () Int)
(declare-fun x395 (Int) Int)
(declare-fun x418 (Int Int Int Int Int Int) Int)
(declare-fun x448 () Bool)
(declare-fun x670 () Int)
(declare-fun x706 (Int) Int)
(declare-fun x1089 () Bool)
(declare-fun x90 () Int)
(declare-fun x927 () Bool)
(declare-fun x667 () Int)
(declare-fun x311 () Bool)
(declare-fun x214 () Int)
(declare-fun x818 () Int)
(declare-fun x123 () Int)
(declare-fun x335 () Int)
(declare-fun x34 () Int)
(declare-fun x380 () Int)
(declare-fun x894 (Int) Int)
(declare-fun x1030 () Bool)
(declare-fun x482 () Bool)
(declare-fun x739 () Int)
(declare-fun x1006 () Int)
(declare-fun x984 () Int)
(declare-fun x420 () Int)
(declare-fun x112 () Int)
(declare-fun x201 () Int)
(declare-fun x665 () Bool)
(declare-fun x598 () Bool)
(declare-fun x972 () Bool)
(declare-fun x471 () Int)
(declare-fun x837 () Int)
(declare-fun x289 (Int) Int)
(declare-fun x293 () Bool)
(declare-fun x900 () Int)
(declare-fun x995 () Int)
(declare-fun x463 () Bool)
(declare-fun x771 () Int)
(declare-fun x1014 () Bool)
(declare-fun x897 () Int)
(declare-fun x1140 () Int)
(declare-fun x1193 () Int)
(declare-fun x952 () Int)
(declare-fun x205 () Int)
(declare-fun x173 () Bool)
(declare-fun x434 () Bool)
(declare-fun x1177 () Bool)
(declare-fun x570 () Bool)
(declare-fun x1127 () Int)
(declare-fun x684 () Int)
(declare-fun x1125 () Bool)
(declare-fun x325 () Int)
(declare-fun x806 () Int)
(declare-fun x568 () Int)
(declare-fun x361 () Int)
(declare-fun x258 () Bool)
(declare-fun x327 () Int)
(declare-fun x840 () Int)
(declare-fun x794 () Int)
(declare-fun x466 () Bool)
(declare-fun x182 () Bool)
(declare-fun x171 () Int)
(declare-fun x1121 () Int)
(declare-fun x950 () Int)
(declare-fun x1172 () Int)
(declare-fun x550 () Int)
(declare-fun x1033 () Int)
(declare-fun x445 () Int)
(declare-fun x266 () Bool)
(declare-fun x930 () Bool)
(declare-fun x423 () Int)
(declare-fun x122 () Int)
(declare-fun x193 () Int)
(declare-fun x864 (Int Int) Int)
(declare-fun x686 () Int)
(declare-fun x613 () Bool)
(declare-fun x1176 () Int)
(declare-fun x1043 () Int)
(declare-fun x1194 () Bool)
(declare-fun x294 () Int)
(declare-fun x1201 () Bool)
(declare-fun x599 () Bool)
(declare-fun x722 () Int)
(declare-fun x934 () Int)
(declare-fun x512 () Bool)
(declare-fun x113 () Bool)
(declare-fun x383 () Bool)
(declare-fun x23 () Int)
(declare-fun x635 () Int)
(declare-fun x114 () Int)
(declare-fun x726 () Int)
(declare-fun x25 () Bool)
(declare-fun x263 () Bool)
(declare-fun x885 () Bool)
(declare-fun x772 () Int)
(declare-fun x679 () Int)
(declare-fun x144 () Int)
(declare-fun x981 () Bool)
(declare-fun x204 () Int)
(declare-fun x933 () Int)
(declare-fun x370 () Int)
(declare-fun x412 () Int)
(declare-fun x577 () Int)
(declare-fun x167 () Int)
(declare-fun x53 () Int)
(declare-fun x795 () Int)
(declare-fun x785 () Int)
(declare-fun x200 () Int)
(declare-fun x838 (Int) Int)
(declare-fun x1025 () Bool)
(declare-fun x416 () Int)
(declare-fun x757 () Bool)
(declare-fun x1081 () Int)
(declare-fun x831 () Int)
(declare-fun x419 () Int)
(declare-fun x509 () Int)
(declare-fun x1158 () Int)
(declare-fun x1211 () Int)
(declare-fun x541 () Int)
(declare-fun x313 () Int)
(declare-fun x899 () Int)
(declare-fun x248 () Bool)
(declare-fun x1178 () Bool)
(declare-fun x742 () Bool)
(declare-fun x462 () Bool)
(declare-fun x346 () Int)
(declare-fun x210 (Int Int) Int)
(declare-fun x1105 () Int)
(declare-fun x465 () Int)
(declare-fun x660 () Int)
(declare-fun x373 () Int)
(declare-fun x28 () Int)
(declare-fun x1106 () Int)
(declare-fun x215 () Bool)
(declare-fun x817 () Int)
(declare-fun x531 () Bool)
(declare-fun x409 () Bool)
(declare-fun x1077 () Int)
(declare-fun x493 () Int)
(declare-fun x677 () Int)
(declare-fun x96 () Bool)
(declare-fun x1017 () Int)
(declare-fun x227 () Int)
(declare-fun x1165 () Bool)
(declare-fun x733 () Int)
(declare-fun x593 () Int)
(declare-fun x653 () Int)
(declare-fun x285 () Bool)
(declare-fun x799 () Int)
(declare-fun x545 () Int)
(declare-fun x514 () Int)
(declare-fun x841 () Int)
(declare-fun x778 () Bool)
(declare-fun x846 () Int)
(declare-fun x1064 () Bool)
(declare-fun x834 () Int)
(declare-fun x331 () Int)
(declare-fun x1039 () Bool)
(declare-fun x765 () Int)
(declare-fun x350 () Int)
(declare-fun x718 () Int)
(declare-fun x992 () Bool)
(declare-fun x233 (Int) Int)
(declare-fun x1061 () Int)
(declare-fun x730 () Bool)
(declare-fun x209 () Int)
(declare-fun x1154 (Int) Int)
(declare-fun x479 () Int)
(declare-fun x190 () Bool)
(declare-fun x1196 () Int)
(declare-fun x491 () Int)
(declare-fun x65 () Int)
(declare-fun x986 () Int)
(declare-fun x697 () Bool)
(declare-fun x1019 () Int)
(declare-fun x973 () Int)
(declare-fun x433 () Int)
(declare-fun x247 () Bool)
(declare-fun x464 () Int)
(declare-fun x119 (Int) Int)
(declare-fun x353 () Int)
(declare-fun x714 () Int)
(declare-fun x424 () Int)
(declare-fun x54 () Int)
(declare-fun x163 () Int)
(declare-fun x74 () Int)
(declare-fun x789 () Bool)
(declare-fun x69 () Bool)
(declare-fun x329 () Int)
(declare-fun x529 () Int)
(declare-fun x955 () Int)
(declare-fun x603 () Int)
(declare-fun x564 () Int)
(declare-fun x702 () Int)
(declare-fun x194 () Bool)
(declare-fun x791 () Bool)
(declare-fun x229 () Int)
(declare-fun x1028 () Int)
(declare-fun x744 () Int)
(declare-fun x1146 () Int)
(declare-fun x914 () Int)
(declare-fun x158 () Int)
(declare-fun x260 () Int)
(declare-fun x1139 () Int)
(declare-fun x917 () Bool)
(declare-fun x199 () Int)
(declare-fun x693 () Int)
(declare-fun x223 () Int)
(declare-fun x211 () Int)
(declare-fun x81 () Int)
(declare-fun x174 () Int)
(declare-fun x139 () Int)
(declare-fun x57 () Int)
(declare-fun x508 () Int)
(declare-fun x401 () Int)
(declare-fun x20 () Bool)
(declare-fun x983 () Int)
(declare-fun x298 () Int)
(declare-fun x1050 () Bool)
(declare-fun x629 () Int)
(declare-fun x103 () Bool)
(declare-fun x596 () Int)
(declare-fun x993 () Int)
(declare-fun x308 () Bool)
(declare-fun x754 () Int)
(declare-fun x330 () Int)
(declare-fun x836 () Int)
(declare-fun x600 () Int)
(declare-fun x390 () Int)
(declare-fun x552 () Int)
(declare-fun x1152 () Int)
(declare-fun x982 () Bool)
(declare-fun x235 () Int)
(declare-fun x557 () Int)
(declare-fun x712 () Bool)
(declare-fun x99 () Int)
(declare-fun x131 () Int)
(declare-fun x402 () Bool)
(declare-fun x1 () Int)
(declare-fun x729 () Int)
(declare-fun x270 () Bool)
(declare-fun x672 () Int)
(declare-fun x655 (Int) Int)
(declare-fun x601 () Bool)
(declare-fun x781 () Int)
(declare-fun x1002 () Int)
(declare-fun x527 () Int)
(declare-fun x1054 () Int)
(declare-fun x297 () Int)
(declare-fun x710 () Bool)
(declare-fun x1088 () Int)
(declare-fun x725 () Int)
(declare-fun x715 () Int)
(declare-fun x341 () Int)
(declare-fun x589 () Int)
(declare-fun x941 () Bool)
(declare-fun x76 () Int)
(declare-fun x75 () Int)
(declare-fun x368 () Bool)
(declare-fun x1083 () Int)
(declare-fun x269 () Bool)
(declare-fun x661 () Int)
(declare-fun x876 () Int)
(declare-fun x484 () Bool)
(declare-fun x1167 () Int)
(declare-fun x889 () Int)
(declare-fun x106 () Int)
(declare-fun x523 () Int)
(declare-fun x191 () Bool)
(declare-fun x358 () Int)
(declare-fun x526 () Bool)
(declare-fun x492 () Bool)
(declare-fun x19 () Bool)
(declare-fun x639 () Int)
(declare-fun x822 () Int)
(declare-fun x1071 () Int)
(declare-fun x875 () Int)
(declare-fun x743 () Int)
(declare-fun x239 (Int Int) Int)
(declare-fun x898 () Int)
(declare-fun x460 () Int)
(declare-fun x979 () Int)
(declare-fun x939 (Int) Int)
(declare-fun x815 () Bool)
(declare-fun x966 (Int) Int)
(declare-fun x949 () Bool)
(declare-fun x935 () Int)
(declare-fun x953 () Bool)
(declare-fun x446 () Bool)
(declare-fun x602 () Bool)
(declare-fun x1051 () Int)
(declare-fun x467 () Int)
(declare-fun x788 () Int)
(declare-fun x477 () Int)
(declare-fun x844 () Int)
(declare-fun x959 () Int)
(declare-fun x458 () Int)
(declare-fun x302 () Int)
(declare-fun x254 () Int)
(declare-fun x866 () Int)
(declare-fun x904 () Int)
(declare-fun x379 () Int)
(declare-fun x1116 (Int) Int)
(declare-fun x355 () Int)
(declare-fun x543 () Int)
(declare-fun x510 () Int)
(declare-fun x616 () Bool)
(declare-fun x272 () Int)
(declare-fun x267 () Int)
(declare-fun x1188 () Int)
(declare-fun x150 () Bool)
(declare-fun x980 () Int)
(declare-fun x988 () Int)
(declare-fun x198 () Int)
(declare-fun x283 () Int)
(declare-fun x1016 () Int)
(declare-fun x913 () Bool)
(declare-fun x901 () Int)
(declare-fun x92 () Int)
(declare-fun x411 () Int)
(declare-fun x1040 (Int Int Int Int Int Int Int Int) Int)
(declare-fun x149 () Int)
(declare-fun x792 () Int)
(declare-fun x478 () Int)
(declare-fun x516 () Bool)
(declare-fun x824 () Int)
(declare-fun x749 () Int)
(declare-fun x623 () Int)
(declare-fun x450 () Bool)
(declare-fun x561 () Int)
(declare-fun x676 () Bool)
(declare-fun x852 () Int)
(declare-fun x931 () Int)
(declare-fun x549 () Int)
(declare-fun x911 () Int)
(declare-fun x1065 () Bool)
(declare-fun x417 () Int)
(declare-fun x326 () Int)
(declare-fun x146 () Int)
(declare-fun x310 () Int)
(declare-fun x217 () Int)
(declare-fun x192 () Int)
(declare-fun x1062 () Bool)
(declare-fun x1000 () Bool)
(declare-fun x45 () Int)
(declare-fun x1008 () Int)
(declare-fun x476 () Int)
(declare-fun x337 () Int)
(declare-fun x1076 () Int)
(declare-fun x116 () Int)
(declare-fun x226 () Int)
(declare-fun x936 () Int)
(declare-fun x301 () Int)
(declare-fun x544 () Bool)
(declare-fun x275 () Int)
(declare-fun x472 () Int)
(declare-fun x537 () Int)
(declare-fun x1024 () Int)
(declare-fun x84 () Int)
(declare-fun x44 () Int)
(declare-fun x48 () Int)
(declare-fun x556 () Bool)
(declare-fun x277 () Int)
(declare-fun x1013 () Int)
(declare-fun x378 () Bool)
(declare-fun x164 () Bool)
(declare-fun x222 () Bool)
(declare-fun x964 () Bool)
(declare-fun x584 () Int)
(declare-fun x46 () Int)
(declare-fun x909 () Int)
(declare-fun x33 () Int)
(declare-fun x165 () Int)
(declare-fun x937 () Int)
(declare-fun x958 () Int)
(declare-fun x755 () Int)
(declare-fun x761 () Bool)
(declare-fun x73 () Int)
(declare-fun x501 () Int)
(declare-fun x66 () Bool)
(declare-fun x128 () Int)
(declare-fun x497 () Int)
(declare-fun x93 () Bool)
(declare-fun x880 () Bool)
(declare-fun x646 () Int)
(declare-fun x49 () Int)
(declare-fun x67 () Int)
(declare-fun x39 () Int)
(declare-fun x1108 () Int)
(declare-fun x862 () Bool)
(declare-fun x740 () Int)
(declare-fun x70 () Int)
(declare-fun x513 () Int)
(declare-fun x407 () Int)
(declare-fun x813 () Int)
(declare-fun x457 () Bool)
(declare-fun x1012 () Int)
(declare-fun x175 () Int)
(declare-fun x176 () Int)
(declare-fun x865 () Bool)
(declare-fun x231 () Int)
(declare-fun x177 () Bool)
(declare-fun x1011 () Bool)
(declare-fun x1171 (Int) Int)
(declare-fun x906 () Int)
(declare-fun x1213 () Int)
(declare-fun x284 () Int)
(declare-fun x1005 () Int)
(declare-fun x398 (Int) Int)
(declare-fun x674 () Int)
(declare-fun x441 () Int)
(declare-fun x63 () Int)
(declare-fun x339 () Int)
(declare-fun x912 () Int)
(declare-fun x475 () Bool)
(declare-fun x767 () Bool)
(declare-fun x985 () Int)
(declare-fun x315 () Int)
(declare-fun x805 () Int)
(declare-fun x505 () Bool)
(declare-fun x579 () Int)
(declare-fun x606 () Bool)
(declare-fun x926 () Int)
(declare-fun x528 () Bool)
(declare-fun x1160 () Int)
(declare-fun x262 () Int)
(declare-fun x60 () Int)
(declare-fun x819 (Int) Int)
(declare-fun x98 () Int)
(declare-fun x835 () Int)
(declare-fun x495 () Int)
(declare-fun x148 () Int)
(declare-fun x296 () Bool)
(declare-fun x808 () Int)
(declare-fun x1183 () Bool)
(declare-fun x1079 () Int)
(declare-fun x948 () Bool)
(declare-fun x704 () Int)
(declare-fun x410 () Bool)
(declare-fun x750 () Int)
(declare-fun x197 () Bool)
(declare-fun x716 () Int)
(declare-fun x307 () Int)
(declare-fun x17 () Int)
(declare-fun x957 () Int)
(declare-fun x244 () Int)
(declare-fun x18 () Int)
(declare-fun x394 () Int)
(declare-fun x555 () Int)
(declare-fun x1095 () Int)
(declare-fun x872 () Int)
(declare-fun x151 () Int)
(declare-fun x237 () Bool)
(declare-fun x304 () Int)
(declare-fun x535 () Int)
(declare-fun x470 () Int)
(declare-fun x152 () Bool)
(declare-fun x172 () Int)
(declare-fun x825 () Int)
(declare-fun x221 () Bool)
(declare-fun x636 () Int)
(declare-fun x1091 () Bool)
(declare-fun x874 () Int)
(declare-fun x738 () Int)
(declare-fun x558 () Bool)
(declare-fun x1037 () Int)
(declare-fun x145 () Int)
(declare-fun x100 () Bool)
(declare-fun x287 () Int)
(declare-fun x975 () Int)
(declare-fun x340 (Int) Int)
(declare-fun x1205 () Int)
(declare-fun x503 () Int)
(declare-fun x435 () Int)
(declare-fun x333 () Int)
(declare-fun x887 () Int)
(declare-fun x546 () Int)
(declare-fun x651 () Int)
(declare-fun x1041 () Int)
(declare-fun x634 () Int)
(declare-fun x863 () Int)
(declare-fun x1122 () Int)
(declare-fun x961 () Int)
(declare-fun x713 () Int)
(declare-fun x1204 () Int)
(declare-fun x384 () Bool)
(declare-fun x432 () Int)
(declare-fun x232 () Int)
(declare-fun x929 () Int)
(declare-fun x1097 () Int)
(declare-fun x1164 () Int)
(declare-fun x1147 () Int)
(declare-fun x312 () Int)
(declare-fun x703 () Bool)
(declare-fun x1053 () Int)
(declare-fun x893 () Int)
(declare-fun x26 (Int Int Int Int Int Int Int) Int)
(declare-fun x1207 () Bool)
(declare-fun x942 () Int)
(declare-fun x483 () Int)
(declare-fun x536 () Int)
(declare-fun x1179 () Int)
(declare-fun x1131 () Int)
(declare-fun x1199 () Bool)
(declare-fun x539 () Int)
(declare-fun x443 () Int)
(declare-fun x524 () Int)
(declare-fun x727 (Int Int) Int)
(declare-fun x572 () Int)
(declare-fun x1155 () Int)
(declare-fun x1214 () Int)
(declare-fun x994 () Int)
(declare-fun x1208 () Int)
(declare-fun x709 () Bool)
(declare-fun x580 () Bool)
(declare-fun x360 () Bool)
(declare-fun x540 () Bool)
(declare-fun x1059 () Bool)
(declare-fun x357 () Int)
(declare-fun x820 () Int)
(declare-fun x594 () Int)
(declare-fun x1055 () Int)
(declare-fun x408 () Int)
(declare-fun x908 () Int)
(declare-fun x882 () Int)
(declare-fun x473 () Bool)
(declare-fun x619 () Int)
(declare-fun x105 () Int)
(declare-fun x695 () Int)
(declare-fun x59 () Int)
(declare-fun x797 (Int) Int)
(declare-fun x1170 () Int)
(declare-fun x238 () Int)
(declare-fun x9 () Int)
(declare-fun x907 () Bool)
(declare-fun x121 () Int)
(declare-fun x1126 () Int)
(declare-fun x1141 () Int)
(declare-fun x228 () Bool)
(declare-fun x1057 () Bool)
(declare-fun x826 () Int)
(declare-fun x633 () Int)
(declare-fun x82 () Bool)
(declare-fun x162 () Int)
(declare-fun x779 () Int)
(declare-fun x1187 () Bool)
(declare-fun x612 () Int)
(declare-fun x1202 () Bool)
(declare-fun x51 () Bool)
(declare-fun x1118 () Int)
(declare-fun x650 () Int)
(declare-fun x154 () Int)
(declare-fun x78 () Int)
(declare-fun x688 () Int)
(declare-fun x303 () Int)
(declare-fun x444 () Int)
(declare-fun x481 () Int)
(declare-fun x8 () Bool)
(declare-fun x728 () Bool)
(declare-fun x178 () Int)
(declare-fun x858 () Int)
(declare-fun x224 () Bool)
(declare-fun x291 () Int)
(declare-fun x769 () Int)
(declare-fun x161 () Int)
(declare-fun x77 () Int)
(declare-fun x1007 (Int) Int)
(declare-fun x1032 () Int)
(declare-fun x305 () Bool)
(declare-fun x850 () Bool)
(declare-fun x1100 () Int)
(declare-fun x877 () Int)
(declare-fun x737 () Int)
(declare-fun x830 () Int)
(declare-fun x1075 () Int)
(declare-fun x1018 () Int)
(declare-fun x1047 () Bool)
(declare-fun x1023 () Int)
(declare-fun x3 (Int) Int)
(declare-fun x701 () Int)
(declare-fun x15 () Int)
(declare-fun x58 () Bool)
(declare-fun x240 () Int)
(declare-fun x699 (Int Int) Int)
(declare-fun x422 () Int)
(declare-fun x654 () Bool)
(declare-fun x736 () Int)
(declare-fun x391 () Int)
(declare-fun x1210 () Int)
(declare-fun x720 () Int)
(declare-fun x649 () Int)
(declare-fun x183 () Int)
(declare-fun x38 () Int)
(declare-fun x490 () Int)
(declare-fun x604 () Int)
(declare-fun x1173 () Int)
(declare-fun x922 () Int)
(declare-fun x1120 () Int)
(declare-fun x692 () Bool)
(declare-fun x614 () Int)
(declare-fun x1048 () Int)
(declare-fun x618 (Int Int) Int)
(declare-fun x956 () Int)
(declare-fun x316 () Int)
(declare-fun x319 () Int)
(declare-fun x811 (Int) Int)
(declare-fun x1042 () Int)
(declare-fun x1029 () Int)
(declare-fun x678 () Int)
(declare-fun x278 () Int)
(declare-fun x1027 () Int)
(declare-fun x717 () Int)
(declare-fun x1123 () Int)
(declare-fun x1066 () Int)
(declare-fun x648 () Int)
(declare-fun x582 () Bool)
(declare-fun x334 () Bool)
(declare-fun x274 () Int)
(declare-fun x71 () Int)
(declare-fun x700 () Int)
(declare-fun x180 (Int) Int)
(declare-fun x449 () Bool)
(declare-fun x1189 () Int)
(declare-fun x136 () Bool)
(declare-fun x55 () Int)
(declare-fun x802 () Int)
(declare-fun x786 (Int) Int)
(declare-fun x107 () Int)
(declare-fun x1015 () Bool)
(declare-fun x127 () Int)
(declare-fun x551 () Bool)
(declare-fun x519 () Int)
(declare-fun x40 () Bool)
(declare-fun x946 (Int Int Int Int) Int)
(declare-fun x566 () Int)
(declare-fun x456 () Int)
(declare-fun x918 () Int)
(declare-fun x924 () Int)
(declare-fun x860 () Int)
(declare-fun x724 () Int)
(declare-fun x246 () Int)
(declare-fun x571 () Bool)
(declare-fun x1107 () Int)
(declare-fun x405 () Int)
(declare-fun x592 () Bool)
(declare-fun x332 () Int)
(declare-fun x1215 (Int Int) Int)
(declare-fun x1020 () Int)
(declare-fun x156 () Int)
(declare-fun x157 () Int)
(declare-fun x352 () Int)
(declare-fun x563 () Int)
(declare-fun x7 () Int)
(declare-fun x1090 () Int)
(declare-fun x245 () Int)
(declare-fun x532 () Int)
(declare-fun x134 () Bool)
(declare-fun x160 () Int)
(declare-fun x1049 () Bool)
(declare-fun x575 () Int)
(declare-fun x1058 () Int)
(declare-fun x61 (Int) Int)
(declare-fun x611 () Int)
(declare-fun x842 () Int)
(declare-fun x111 () Int)
(declare-fun x627 () Int)
(declare-fun x35 () Int)
(declare-fun x1110 () Int)
(declare-fun x338 () Int)
(declare-fun x42 () Bool)
(declare-fun x569 () Int)
(declare-fun x968 () Bool)
(declare-fun x1186 () Int)
(declare-fun x671 () Int)
(declare-fun x218 () Int)
(declare-fun x498 () Int)
(declare-fun x399 (Int) Int)
(declare-fun x657 () Int)
(declare-fun x1021 () Bool)
(declare-fun x809 () Int)
(declare-fun x1124 () Int)
(declare-fun x153 () Bool)
(declare-fun x641 () Int)
(declare-fun x1044 () Int)
(declare-fun x969 () Int)
(declare-fun x652 (Int) Int)
(declare-fun x891 () Bool)
(declare-fun x480 () Int)
(declare-fun x732 () Int)
(declare-fun x280 () Int)
(declare-fun x469 () Int)
(declare-fun x502 () Int)
(declare-fun x615 () Int)
(declare-fun x827 () Int)
(declare-fun x459 (Int) Int)
(declare-fun x461 () Bool)
(declare-fun x525 () Int)
(declare-fun x542 () Bool)
(declare-fun x1098 () Int)
(declare-fun x883 () Bool)
(declare-fun x1162 () Int)
(declare-fun x363 () Bool)
(declare-fun x220 () Bool)
(declare-fun x110 () Int)
(declare-fun x356 () Int)
(declare-fun x132 () Int)
(declare-fun x784 () Int)
(declare-fun x506 () Bool)
(declare-fun x261 () Int)
(declare-fun x354 (Int Int) Bool)
(declare-fun x186 () Int)
(declare-fun x787 () Bool)
(declare-fun x21 () Bool)
(declare-fun x945 (Int Int) Int)
(declare-fun x832 () Int)
(declare-fun x1103 () Int)
(declare-fun x1198 () Int)
(declare-fun x741 () Int)
(declare-fun x13 () Int)
(declare-fun x314 () Int)
(declare-fun x565 () Bool)
(declare-fun x666 () Int)
(declare-fun x888 () Int)
(declare-fun x282 () Int)
(declare-fun x719 () Bool)
(declare-fun x143 () Int)
(declare-fun x642 () Bool)
(declare-fun x318 () Int)
(declare-fun x632 () Int)
(declare-fun x856 () Int)
(declare-fun x30 () Bool)
(declare-fun x120 () Int)
(declare-fun x41 () Bool)
(declare-fun x147 () Int)
(declare-fun x268 (Int) Int)
(declare-fun x507 (Int) Int)
(declare-fun x867 () Bool)
(define-fun x474 ((x137 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x137) (>= x137 0)) x137 (- x137 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x306 ((x137 Int)) Int (ite (and (< x137 0) (>= x137 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x137 115792089237316195423570985008687907853269984665640564039457584007913129639936) x137))
(define-fun x271 ((x137 Int)) Int (ite (and (>= x137 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x137)) x137 (ite (and (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 x137) (> 231584178474632390847141970017375815706539969331281128078915168015826259279872 x137)) (- x137 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (>= x137 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (< x137 0)) (+ x137 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x864 x137 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x117 ((x385 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x385) (<= 0 x385)))
(define-fun x428 ((x385 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x385) (>= x385 0)))
(define-fun x573 ((x385 Int)) Bool (and (<= x385 1461501637330902918203684832716283019655932542975) (<= 0 x385)))
(define-fun x990 ((x385 Int)) Bool (and (= x385 (x239 115792089237316195423570985008687907853269984665640564039457584007913129639935 x385)) (= (x239 x385 115792089237316195423570985008687907853269984665640564039457584007913129639935) x385)))
(define-fun x645 ((x385 Int)) Bool (and (= 0 (x239 x385 0)) (= 0 (x239 0 x385))))
(define-fun x406 ((x385 Int)) Bool (= (x239 x385 x385) x385))
(define-fun x80 ((x385 Int)) Bool (and (x990 x385) (x645 x385) (x406 x385)))
(define-fun x79 ((x385 Int) (x374 Int)) Bool (= (x239 x374 x385) (x239 x385 x374)))
(define-fun x947 ((x385 Int) (x374 Int)) Bool (and (=> (>= x385 0) (>= x385 (x239 x385 x374))) (=> (<= 0 x374) (>= x374 (x239 x385 x374))) (>= (x239 x385 x374) 0)))
(define-fun x668 ((x385 Int) (x374 Int)) Bool (and (x79 x385 x374) (x947 x385 x374)))
(define-fun x276 ((x385 Int)) Bool (= (x864 x385 1461501637330902918203684832716283019655932542976) (x239 x385 1461501637330902918203684832716283019655932542975)))
(define-fun x102 ((x385 Int)) Bool (and (x276 x385) (x668 x385 1461501637330902918203684832716283019655932542975)))
(define-fun x365 ((x385 Int) (x374 Int)) Bool (and (> x374 (x864 x385 x374)) (>= (x864 x385 x374) 0)))
(define-fun x400 ((x385 Int) (x374 Int)) Bool (=> (and (< 0 x374) (>= x385 0)) (= (> x374 x385) (= x385 (x864 x385 x374)))))
(define-fun x774 ((x385 Int) (x374 Int)) Bool (=> (and (< 0 x374) (and (> (+ x374 x374) x385) (>= x385 x374))) (= (- x385 x374) (x864 x385 x374))))
(define-fun x1038 ((x385 Int) (x374 Int)) Bool (=> (< 0 x374) (= (+ (* (x618 x385 x374) x374) (x864 x385 x374)) x385)))
(define-fun x344 ((x385 Int) (x374 Int)) Bool (and (x774 x385 x374) (x400 x385 x374) (x1038 x385 x374) (x365 x385 x374)))
(define-fun x698 ((x385 Int)) Bool (= 0 (x864 0 x385)))
(define-fun x336 ((x385 Int)) Bool (= 0 (x864 x385 1)))
(define-fun x225 ((x385 Int)) Bool (= (x864 x385 x385) 0))
(define-fun x691 ((x385 Int)) Bool (and (x336 x385) (x698 x385) (x225 x385)))
(define-fun x56 ((x385 Int)) Bool (= (x239 x385 255) (x864 x385 256)))
(define-fun x12 ((x385 Int)) Bool (and (x56 x385) (x668 x385 255)))
(define-fun x758 ((x385 Int) (x374 Int)) Bool (=> (and (> x385 0) (< 0 x374)) (and (>= x385 (x618 x385 x374)) (>= (x618 x385 x374) 0))))
(define-fun x804 ((x385 Int) (x374 Int)) Bool (=> (and (and (<= 1 x374) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x374)) (and (< x385 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x385))) (and (< (x618 x385 x374) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= (x618 x385 x374) 0))))
(define-fun x452 ((x385 Int) (x374 Int)) Bool (=> (and (> x385 x374) (> x374 1)) (> x385 (x618 x385 x374))))
(define-fun x396 ((x385 Int) (x374 Int)) Bool (=> (and (< 0 x385) (> x374 0)) (= (= 0 (x618 x385 x374)) (< x385 x374))))
(define-fun x1157 ((x385 Int) (x374 Int)) Bool (=> (and (< 0 x385) (< 0 x374)) (and (>= x385 (* x374 (x618 x385 x374))) (< (- x385 x374) (* x374 (x618 x385 x374))))))
(define-fun x530 ((x385 Int) (x374 Int)) Bool (= (- x385 (x239 (- x374 1) x385)) (* (x618 x385 x374) x374)))
(define-fun x499 ((x385 Int) (x374 Int)) Bool (and (x396 x385 x374) (x804 x385 x374) (x530 x385 x374) (x758 x385 x374) (x452 x385 x374) (x1157 x385 x374)))
(define-fun x295 ((x385 Int)) Bool (= 0 (x618 0 x385)))
(define-fun x447 ((x385 Int)) Bool (= (x618 x385 1) x385))
(define-fun x265 ((x385 Int)) Bool (=> (not (= x385 0)) (= (x618 x385 x385) 1)))
(define-fun x745 ((x385 Int)) Bool (and (x447 x385) (x265 x385) (x295 x385)))
(define-fun x855 ((x385 Int) (x374 Int)) Bool (= (* x374 x385) (x1215 x385 x374)))
(define-fun x1197 ((x385 Int) (x374 Int)) Bool (and (= (x1215 (- x385 115792089237316195423570985008687907853269984665640564039457584007913129639936) x374) (- (* x385 x374) (* x374 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x1215 (- x385 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x374 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* x385 (- x374 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x374 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x1215 x385 (- x374 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* x385 (- x374 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x142 ((x385 Int) (x374 Int)) Bool (=> (and (> x374 0) (< 0 x385)) (= (= (x618 (x271 (x1215 x385 x374)) x385) x374) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x1215 x385 x374)))))
(define-fun x628 ((x385 Int) (x374 Int)) Bool (=> (and (not (= 0 x374)) (not (= 0 x385))) (and (= x374 (x618 (x1215 x385 x374) x385)) (= (x618 (x1215 x385 x374) x374) x385))))
(define-fun x878 ((x385 Int) (x374 Int)) Bool (=> (and (> x385 0) (> x374 0)) (= (> x374 (x618 115792089237316195423570985008687907853269984665640564039457584007913129639935 x385)) (> (x1215 x385 x374) 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x88 ((x385 Int) (x374 Int)) Bool (and (= (x271 (x1215 x385 x374)) (x271 (x1215 (- x385 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x374 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x271 (x1215 x385 (- x374 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x271 (x1215 x385 x374))) (= (x271 (x1215 (- x385 115792089237316195423570985008687907853269984665640564039457584007913129639936) x374)) (x271 (x1215 x385 x374)))))
(define-fun x1084 ((x385 Int) (x374 Int)) Bool (and (=> (and (and (<= x385 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x385 0)) (and (<= x374 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> x374 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (>= (x618 57896044618658097711785492504343953926634992332820282019728792003956564819968 x385) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x374)) (>= (x1215 x385 (- x374 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968)))) (=> (and (and (<= x374 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 0 x374)) (and (<= x385 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x385 0))) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x1215 x385 x374)) (<= x385 (x618 57896044618658097711785492504343953926634992332820282019728792003956564819967 x374)))) (=> (and (and (> x385 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x385 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x374) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x374))) (= (>= (x618 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x374)) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x385)) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x1215 (- x385 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x374 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (=> (and (and (< 0 x374) (<= x374 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x385) (<= x385 115792089237316195423570985008687907853269984665640564039457584007913129639935))) (= (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x1215 (- x385 115792089237316195423570985008687907853269984665640564039457584007913129639936) x374)) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x385) (x618 57896044618658097711785492504343953926634992332820282019728792003956564819968 x374))))))
(define-fun x1174 ((x385 Int) (x374 Int)) Bool (and (x88 x385 x374) (x1084 x385 x374) (x878 x385 x374) (x628 x385 x374) (x1197 x385 x374) (x142 x385 x374) (x855 x385 x374)))
(define-fun x1086 ((x385 Int)) Bool (and (= 0 (x1215 x385 0)) (= (x1215 0 x385) 0)))
(define-fun x124 ((x385 Int)) Bool (and (= x385 (x1215 1 x385)) (= (x1215 x385 1) x385)))
(define-fun x560 ((x385 Int)) Bool (and (x1086 x385) (x124 x385)))
(define-fun x1142 ((x385 Int)) Bool (= (x271 x385) (+ (x864 x385 32) (x239 x385 115792089237316195423570985008687907853269984665640564039457584007913129639904))))
(define-fun x135 ((x385 Int)) Bool (and (x668 x385 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x1142 x385)))
(define-fun x775 ((x385 Int)) Bool (= (x864 x385 32) (x239 x385 31)))
(define-fun x486 ((x385 Int)) Bool (and (x775 x385) (x668 x385 31)))
(define-fun x690 ((x385 Int) (x374 Int)) Bool (and (x452 x385 x374) (x1157 x385 x374) (x758 x385 x374) (x396 x385 x374) (x804 x385 x374)))
(define-fun x292 ((x385 Int)) Bool (= (x864 x385 26959946667150639794667015087019630673637144422540572481103610249216) (x239 x385 26959946667150639794667015087019630673637144422540572481103610249215)))
(define-fun x43 ((x385 Int)) Bool (and (x668 x385 26959946667150639794667015087019630673637144422540572481103610249215) (x292 x385)))
(define-fun x681 ((x385 Int) (x374 Int)) Bool (= (x1215 x374 x385) (x1215 x385 x374)))
(define-fun x1068 ((x385 Int) (x374 Int)) Bool (and (=> (and (> x374 0) (> x385 0)) (< 0 (x1215 x385 x374))) (=> (and (> 0 x385) (> x374 0)) (> 0 (x1215 x385 x374))) (=> (and (> 0 x374) (> x385 0)) (> 0 (x1215 x385 x374))) (=> (and (< x385 0) (< x374 0)) (> (x1215 x385 x374) 0))))
(define-fun x683 ((x385 Int) (x374 Int)) Bool (and (x1084 x385 x374) (x878 x385 x374) (x88 x385 x374) (x628 x385 x374) (x681 x385 x374) (x1068 x385 x374) (x142 x385 x374)))
(define-fun x1192 ((x385 Int)) Bool (= (+ (x239 x385 115792089210356248756420345214020892766250353992003419616917011526809519390720) (x864 x385 26959946667150639794667015087019630673637144422540572481103610249216)) (x271 x385)))
(define-fun x372 ((x385 Int)) Bool (and (x1192 x385) (x668 x385 115792089210356248756420345214020892766250353992003419616917011526809519390720)))
(define-fun x932 ((x1117 Int)) Int (ite (< x1117 x267) (x966 x1117) 0))
(define-fun x1001 ((x1117 Int)) Int (ite (> x214 x1117) (x655 x1117) 0))
(define-fun x427 ((x1117 Int)) Int 0)
(define-fun x95 ((x1117 Int)) Int (ite (< x1117 x75) (x507 x1117) 0))
(define-fun x366 ((x1117 Int)) Int (ite (and (<= 0 x1117) (> x75 x1117)) (x289 x1117) (x95 x1117)))
(define-fun x1036 ((x1117 Int)) Int (ite (= x1117 x931) x458 (x894 x1117)))
(define-fun x500 ((x1117 Int)) Int (ite (= x651 x1117) x646 (x1036 x1117)))
(define-fun x494 ((x1117 Int)) Int (ite (= 128 x1117) x350 (x427 x1117)))
(define-fun x847 ((x1117 Int)) Int (ite (and (>= x1117 160) (> (+ 160 x350) x1117)) (x366 (- (+ x1117 x456) 160)) (x494 x1117)))
(define-fun x895 ((x1117 Int)) Int (ite (= x769 x1117) 0 (x847 x1117)))
(define-fun x843 ((x1117 Int)) Int (ite (= 5 x1117) x751 (x233 x1117)))
(define-fun x829 ((x1117 Int)) Int (ite (and (<= x1160 x1117) (> (+ x905 x1160) x1117)) (x366 (- (+ x1117 x343) x1160)) (x895 x1117)))
(define-fun x345 ((x1117 Int)) Int (ite (= x549 x1117) 84814075808141314178395468817534025465894426928601295766380145544921651250904 (x829 x1117)))
(define-fun x762 ((x1117 Int)) Int (ite (= x1117 x158) x412 (x345 x1117)))
(define-fun x1153 ((x1117 Int)) Int (ite (= x1117 x423) x832 (x762 x1117)))
(define-fun x854 ((x1117 Int)) Int (ite (= x776 x1117) x1172 (x1153 x1117)))
(define-fun x454 ((x1117 Int)) Int (ite (= x1117 x647) x935 (x854 x1117)))
(define-fun x37 ((x1117 Int)) Int (ite (= x157 x1117) x1122 (x454 x1117)))
(define-fun x747 ((x1117 Int)) Int (ite (= x121 x1117) x351 (x37 x1117)))
(define-fun x421 ((x1117 Int)) Int (ite (= x1117 x1188) x863 (x747 x1117)))
(define-fun x188 ((x1117 Int)) Int (ite (= x1117 x736) x510 (x421 x1117)))
(define-fun x369 ((x1117 Int)) Int (ite (= x1117 x1204) x922 (x188 x1117)))
(define-fun x259 ((x1117 Int)) Int (ite (= x1117 x523) x196 (x369 x1117)))
(define-fun x807 ((x1117 Int)) Int (ite (= x1117 x1160) x860 (x259 x1117)))
(define-fun x257 ((x1117 Int)) Int (ite (= x823 x1117) 32523383700587834770323112271211932718128200013265661849047136999858837557784 (x807 x1117)))
(define-fun x109 ((x1117 Int)) Int (ite (= x77 x1117) x546 (x257 x1117)))
(define-fun x359 ((x1117 Int)) Int (ite (= x1117 x1042) x651 (x109 x1117)))
(define-fun x241 ((x1117 Int)) Int (ite (= x1 x1117) x68 (x359 x1117)))
(define-fun x943 ((x1117 Int)) Int (ite (= x700 x1117) 11307821214581659709333104004754678501295896940003961331978279688272766566400 (x241 x1117)))
(define-fun x415 ((x1117 Int)) Int (ite (= x765 x1117) 452312848583266388373324160190187140051835877600158453279131187530910662656 (x943 x1117)))
(define-fun x187 ((x1117 Int)) Int (ite (= x405 x1117) x722 (x415 x1117)))
(define-fun x1009 ((x1117 Int)) Int (ite (= x1193 x1117) x1037 (x187 x1117)))
(define-fun x1200 ((x1117 Int)) Int (ite (= x1117 x156) x1054 (x1009 x1117)))
(define-fun x547 ((x1117 Int)) Int (ite (= x908 x1117) 0 (x1200 x1117)))
(define-fun x1169 ((x1117 Int)) Int (ite (= x1117 x503) 10019309979067222254582373821846632475949454479833780424560900009889672200192 (x547 x1117)))
(define-fun x1101 ((x1117 Int)) Int (ite (= x1117 x227) x478 (x1169 x1117)))
(define-fun x300 ((x1117 Int)) Int (ite (= x1117 x539) x617 (x1101 x1117)))
(define-fun x821 ((x1117 Int)) Int (ite (= x904 x1117) x950 (x300 x1117)))
(define-fun x1073 ((x1117 Int)) Int (ite (= x770 x1117) x98 (x821 x1117)))
(define-fun x1190 ((x1117 Int)) Int (ite (= x1117 x1124) x286 (x1073 x1117)))
(define-fun x10 ((x1117 Int)) Int (ite (= x1117 x491) x81 (x1190 x1117)))
(define-fun x925 ((x1117 Int)) Int (ite (= x503 x1117) 0 (x547 x1117)))
(define-fun x6 ((x1117 Int)) Int (ite (= x572 x1117) x478 (x925 x1117)))
(define-fun x91 ((x1117 Int)) Int (ite (= x1117 x809) x870 (x6 x1117)))
(define-fun x24 ((x1117 Int)) Int (ite (= x1110 x1117) x1016 (x91 x1117)))
(define-fun x438 ((x1117 Int)) Int (ite (= x1117 x333) x193 (x24 x1117)))
(define-fun x656 ((x1117 Int)) Int (x1001 x1117))
(define-fun x833 ((x1117 Int)) Int (ite (= 0 x1117) x1026 (x652 x1117)))
(define-fun x14 ((x1117 Int)) Int (ite (= x1074 x1117) x1026 (x438 x1117)))
(define-fun x382 ((x1117 Int)) Int (ite (= x1056 x1117) 11430537079145650693387304458692941425836787954612963690241153482819318579200 (x547 x1117)))
(define-fun x1119 ((x1117 Int)) Int (ite (= x1117 x882) x478 (x382 x1117)))
(define-fun x1045 ((x1117 Int)) Int (ite (= x1117 x503) x909 (x1119 x1117)))
(define-fun x1022 ((x1117 Int)) Int (ite (= x1117 x407) 0 (x1045 x1117)))
(define-fun x896 ((x1117 Int)) Int (ite (= x741 x1117) x273 (x1022 x1117)))
(define-fun x977 ((x1117 Int)) Int (ite (= x467 x1117) x154 (x896 x1117)))
(define-fun x439 ((x1117 Int)) Int (ite (= x1117 x1141) x1016 (x977 x1117)))
(define-fun x553 ((x1117 Int)) Int (ite (= x403 x1117) x193 (x439 x1117)))
(define-fun x169 ((x1117 Int)) Int (x932 x1117))
(define-fun x548 ((x1117 Int)) Int (ite (= 0 x1117) x611 (x459 x1117)))
(define-fun x890 ((x1117 Int)) Int (ite (= x1117 x1167) x611 (x553 x1117)))
(define-fun x721 ((x1117 Int)) Int (ite (= x1117 x497) x983 (x10 x1117)))
(define-fun x404 ((x1117 Int)) Int (ite x247 (x10 x1117) (ite x383 (x1190 x1117) (ite x434 (x1073 x1117) (ite x1109 (x821 x1117) (x721 x1117))))))
(define-fun x168 ((x1117 Int)) Int (ite (= x254 x1117) x89 (x404 x1117)))
(define-fun x1069 ((x1117 Int)) Int (ite x712 (x168 x1117) (x404 x1117)))
(define-fun x242 ((x1117 Int)) Int (ite (and (> (+ 32 x503) x1117) (<= x503 x1117)) (x903 (- x1117 x503)) (x1069 x1117)))
(define-fun x4 ((x1117 Int)) Int (ite x551 (x242 x1117) (x1069 x1117)))
(define-fun x1087 ((x1117 Int)) Int (ite x103 (x4 x1117) (ite x570 (ite x42 (x14 x1117) (x890 x1117)) (x547 x1117))))
(define-fun x347 ((x1117 Int)) Int (ite (= x1117 x993) 53345939417071456220559631604471678769232717410092326094220293271952667181056 (x1087 x1117)))
(define-fun x393 ((x1117 Int)) Int (ite (= x1117 x216) x412 (x347 x1117)))
(define-fun x626 ((x1117 Int)) Int (ite (= x213 x1117) x832 (x393 x1117)))
(define-fun x104 ((x1117 Int)) Int (ite (= x476 x1117) x935 (x626 x1117)))
(define-fun x1129 ((x1117 Int)) Int (ite (= x1117 x1139) x1122 (x104 x1117)))
(define-fun x440 ((x1117 Int)) Int (ite (= x1117 x667) x351 (x1129 x1117)))
(define-fun x323 ((x1117 Int)) Int (ite (= x1117 x487) x863 (x440 x1117)))
(define-fun x371 ((x1117 Int)) Int (ite (= x1117 x585) x510 (x323 x1117)))
(define-fun x884 ((x1117 Int)) Int (ite (= x328 x1117) x922 (x371 x1117)))
(define-fun x1138 ((x1117 Int)) Int (ite (= x430 x1117) x1131 (x884 x1117)))
(define-fun x576 ((x1117 Int)) Int (ite (= x766 x1117) x250 (x1138 x1117)))
(define-fun x375 ((x1117 Int)) Int (ite (= x1117 x495) x905 (x576 x1117)))
(define-fun x159 ((x1117 Int)) Int (ite (and (<= x160 x1117) (< x1117 (+ x905 x160))) (x366 (- (+ x1117 x343) x160)) (x375 x1117)))
(define-fun x861 ((x1117 Int)) Int (ite (= x1117 x107) 0 (x159 x1117)))
(define-fun x126 ((x1117 Int)) Int (ite (= x380 x1117) x818 (x861 x1117)))
(define-fun x920 ((x1117 Int)) Int (ite (= x1117 x986) x105 (x126 x1117)))
(define-fun x803 ((x1117 Int)) Int (ite (= x1048 x1117) x875 (x920 x1117)))
(define-fun x1135 ((x1117 Int)) Int (ite (= x648 x1117) x1024 (x803 x1117)))
(define-fun x520 ((x1117 Int)) Int (ite (= x1117 x1053) x732 (x1135 x1117)))
(define-fun x426 ((x1117 Int)) Int (ite (= x1117 x1090) x633 (x520 x1117)))
(define-fun x630 ((x1117 Int)) Int (ite x654 (x520 x1117) (ite x1000 (x1135 x1117) (ite x598 (x803 x1117) (ite x410 (x920 x1117) (x426 x1117))))))
(define-fun x364 ((x1117 Int)) Int (ite (= x840 x1117) x701 (x630 x1117)))
(define-fun x1209 ((x1117 Int)) Int (ite x363 (x364 x1117) (x630 x1117)))
(define-fun x971 ((x1117 Int)) Int (ite (and (< x1117 x993) (<= x993 x1117)) (x61 (- x1117 x993)) (x1209 x1117)))
(define-fun x881 ((x1117 Int)) Int (ite x562 (x500 x1117) (x386 x1117)))
(define-fun x181 ((x1117 Int)) Int (ite x562 (x1087 x1117) (x971 x1117)))
(define-fun x892 ((x1117 Int)) Int (ite (= x993 x1117) x905 (x181 x1117)))
(define-fun x680 ((x1117 Int)) Int (ite (and (>= x1117 x754) (< x1117 (+ x905 x754))) (x366 (- (+ x1117 x343) x754)) (x892 x1117)))
(define-fun x839 ((x1117 Int)) Int (ite (= x1117 x1063) 0 (x680 x1117)))
(define-fun x753 ((x1117 Int)) Int (ite (= x651 x1117) x835 (x881 x1117)))
(define-fun x586 ((x1117 Int)) Int (ite (= x1117 x412) x673 (x753 x1117)))
(define-fun x1166 ((x1117 Int)) Int (ite (and (> 0 x1117) (<= 0 x1117)) (x786 x1117) (x839 x1117)))
(define-fun x970 ((x1117 Int)) Int 0)
(define-fun x1212 ((x1117 Int)) Int (ite x97 (x395 x1117) (x586 x1117)))
(define-fun x879 ((x1117 Int)) Int (ite (= x412 x1117) x755 (x1212 x1117)))
(define-fun x967 ((x1117 Int)) Int (ite (= x651 x1117) x529 (x879 x1117)))
(define-fun x195 ((x1117 Int)) Int (ite x665 (ite x442 (x1212 x1117) (ite x461 (x881 x1117) (x967 x1117))) (x881 x1117)))
(define-fun x944 ((x1117 Int)) Int (ite x258 (ite x30 (x1007 x1117) (x1116 x1117)) (x195 x1117)))
(define-fun x5 ((x1117 Int)) Int (ite x665 (ite x442 (ite x97 (x1166 x1117) (x839 x1117)) (ite x461 (x839 x1117) (ite x97 (x1166 x1117) (x839 x1117)))) (x839 x1117)))
(define-fun x189 ((x1117 Int)) Int (ite (= x57 x1117) x178 (x5 x1117)))
(define-fun x1137 ((x1117 Int)) Int (ite (= x1117 x868) x71 (x189 x1117)))
(define-fun x974 ((x1117 Int)) Int (ite (= x1117 x910) x795 (x1137 x1117)))
(define-fun x798 ((x1117 Int)) Int (ite (= x1152 x1117) x7 (x974 x1117)))
(define-fun x998 ((x1117 Int)) Int (ite (and (<= 0 x1117) (> 32 x1117)) (x398 x1117) (x798 x1117)))
(define-fun x1115 ((x1117 Int)) Int (ite (and (>= x1117 x910) (< x1117 x910)) (x1154 (- x1117 x910)) (x5 x1117)))
(define-fun x1096 ((x1117 Int)) Int (ite (= x910 x1117) x341 (x1115 x1117)))
(define-fun x425 ((x1117 Int)) Int (ite (and (> (+ x341 x936) x1117) (>= x1117 x936)) (x1154 (- x1117 x936)) (x1096 x1117)))
(define-fun x748 ((x1117 Int)) Int (ite x258 (ite x30 (x998 x1117) (ite x692 (x1115 x1117) (x425 x1117))) (x5 x1117)))
(define-fun x485 ((x1117 Int)) Int (ite (= x1117 x317) x594 (x748 x1117)))
(define-fun x919 ((x1117 Int)) Int (ite (= x317 x1117) x594 (x748 x1117)))
(define-fun x381 ((x1117 Int)) Int (ite x475 (x485 x1117) (x919 x1117)))
(define-fun x643 ((x1117 Int)) Int (ite (= x317 x1117) 66559029714281558484110900056217435723262332508534932952963113331629997686784 (x381 x1117)))
(define-fun x607 ((x1117 Int)) Int (ite (= x1117 x1020) x478 (x643 x1117)))
(define-fun x711 ((x1117 Int)) Int (ite (= x686 x1117) x1189 (x607 x1117)))
(define-fun x129 ((x1117 Int)) Int (ite (= x1117 x651) x888 (x195 x1117)))
(define-fun x324 ((x1117 Int)) Int (ite (= x178 x1117) x337 (x129 x1117)))
(define-fun x320 ((x1148 Int)) Bool (or (x354 x846 x1148) (= (x268 x1148) 0) (not (and (<= x1148 1461501637330902918203684832716283019655932542975) (>= x1148 0)))))
(define-fun x533 ((x801 Int)) Bool (=> (and (>= 1461501637330902918203684832716283019655932542975 x801) (<= 0 x801)) (x573 (x268 x801))))
(define-fun x488 ((x1088 Int) (x444 Int)) Bool (or (not (and (<= 0 x1088) (>= 1461501637330902918203684832716283019655932542975 x1088))) (or (not (x354 x1088 x444)) (= 0 x444) (not (and (>= x444 0) (>= 1461501637330902918203684832716283019655932542975 x444))) (not (= 0 (x268 x444))) (= x444 x1088))))
(define-fun x518 ((x678 Int)) Bool (or (x354 x678 x143) (not (and (<= x678 1461501637330902918203684832716283019655932542975) (>= x678 0)))))
(define-fun x963 ((x111 Int) (x17 Int) (x1105 Int)) Bool (or (not (and (>= 1461501637330902918203684832716283019655932542975 x111) (<= 0 x111))) (or (not (and (<= 0 x17) (<= x17 1461501637330902918203684832716283019655932542975))) (or (not (and (>= 1461501637330902918203684832716283019655932542975 x1105) (>= x1105 0))) (and (and (or (not (and (x354 x17 x1105) (x354 x111 x17))) (x354 x111 x1105)) (and (x354 x111 x111) (or (not (and (x354 x17 x111) (x354 x111 x17))) (= x111 x17)))) (or (or (x354 x1105 x17) (x354 x17 x1105)) (not (and (x354 x111 x17) (x354 x111 x1105)))))))))
(define-fun x1031 ((x502 Int) (x779 Int)) Bool (or (and (= x143 (x268 x502)) (= x502 x143)) (and (or (= x779 x502) (= x779 (ite (= x846 (x268 x502)) x143 (x268 x502))) (not (and (x354 x502 x779) (x354 x779 (ite (= x846 (x268 x502)) x143 (x268 x502))))) (not (and (>= x779 0) (<= x779 1461501637330902918203684832716283019655932542975)))) (and (not (= x502 (ite (= (x268 x502) x846) x143 (x268 x502)))) (x354 x502 (ite (= x846 (x268 x502)) x143 (x268 x502))))) (not (and (<= 0 x502) (>= 1461501637330902918203684832716283019655932542975 x502)))))
(define-fun x1206 () Bool (and (x320 x635) (x320 (ite (= (x268 x131) x846) x143 (x268 x131))) (x320 x846) (x320 x131) (x320 x49)))
(define-fun x1067 () Bool (and (x320 x49) (x320 x846) (x320 (ite (= (x268 x131) x846) x143 (x268 x131))) (x320 x131) (x320 x635)))
(define-fun x389 () Bool (and x1206 x1067))
(define-fun x397 () Bool (and (x533 x635) (x533 x846) (x533 (ite (= (x268 x131) x846) x143 (x268 x131))) (x533 x49) (x533 x131)))
(define-fun x1010 () Bool x397)
(define-fun x1080 () Bool (and (x488 x846 x131) (x488 x131 (ite (= (x268 x131) x846) x143 (x268 x131))) (x488 x846 x49) (x488 x635 (ite (= x846 (x268 x131)) x143 (x268 x131))) (x488 x131 x635) (x488 x131 x846)))
(define-fun x437 () Bool x1080)
(define-fun x812 () Bool (and (x518 x131) (x518 x635) (x518 x846)))
(define-fun x83 () Bool x812)
(define-fun x16 () Bool (and (x963 x131 x635 x131) (x963 x846 x846 x131) (x963 x131 x131 x846) (x963 x131 x49 x846) (x963 x846 (ite (= (x268 x131) x846) x143 (x268 x131)) x635) (x963 x846 (ite (= x846 (x268 x131)) x143 (x268 x131)) x131) (x963 x635 x846 x131) (x963 x635 x131 x846) (x963 x846 x635 x131) (x963 x635 x49 x846) (x963 x635 (ite (= (x268 x131) x846) x143 (x268 x131)) x131) (x963 x131 (ite (= x846 (x268 x131)) x143 (x268 x131)) x131) (x963 x846 x131 x846) (x963 x846 x49 x846) (x963 x131 (ite (= x846 (x268 x131)) x143 (x268 x131)) x635) (x963 x635 (ite (= (x268 x131) x846) x143 (x268 x131)) x635) (x963 x635 x635 x131) (x963 x131 x846 x131)))
(define-fun x431 () Bool (and (x963 x131 x635 x635) (x963 x131 x635 (ite (= x846 (x268 x131)) x143 (x268 x131))) (x963 x635 x49 (ite (= x846 (x268 x131)) x143 (x268 x131))) (x963 x846 x635 x49) (x963 x131 x49 x846) (x963 x131 (ite (= x846 (x268 x131)) x143 (x268 x131)) (ite (= x846 (x268 x131)) x143 (x268 x131))) (x963 x635 x846 (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 x635 (ite (= x846 (x268 x131)) x143 (x268 x131)) (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 x846 x635 x131) (x963 x846 x49 x49) (x963 x131 x131 x846) (x963 x635 x131 (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 x131 x846 x635) (x963 x846 x131 x131) (x963 x131 x846 x846) (x963 x131 x635 x846) (x963 x131 x131 x635) (x963 x846 x846 x131) (x963 x131 x846 (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 x131 x49 (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 x846 x846 x49) (x963 x131 x131 (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 x846 x49 x131) (x963 x131 x49 x635) (x963 x846 (ite (= x846 (x268 x131)) x143 (x268 x131)) x131) (x963 x131 (ite (= x846 (x268 x131)) x143 (x268 x131)) x635) (x963 x635 x635 (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 x131 (ite (= x846 (x268 x131)) x143 (x268 x131)) x846) (x963 x846 (ite (= x846 (x268 x131)) x143 (x268 x131)) x49) (x963 x846 x131 x49)))
(define-fun x517 () Bool (and (x963 x635 x846 (ite (= x846 (x268 x131)) x143 (x268 x131))) (x963 x131 x131 (ite (= x846 (x268 x131)) x143 (x268 x131))) (x963 x131 x635 x635) (x963 x635 x635 (ite (= x846 (x268 x131)) x143 (x268 x131))) (x963 x131 x846 x635) (x963 x846 x846 x131) (x963 x131 x635 (ite (= x846 (x268 x131)) x143 (x268 x131))) (x963 x131 x131 x635) (x963 x131 x846 x846) (x963 x846 x635 x131) (x963 x131 x635 x846) (x963 x635 x131 (ite (= x846 (x268 x131)) x143 (x268 x131))) (x963 x846 x846 x49) (x963 x846 x635 x49) (x963 x846 x131 x49) (x963 x131 x131 x846) (x963 x131 x846 (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 x846 x131 x131)))
(define-fun x1112 () Bool (and (x963 x635 x131 x846) (x963 x131 x131 x846) (x963 x635 x635 (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 x846 x846 x131) (x963 x635 x846 x131) (x963 x846 x131 x846) (x963 x635 x846 x49) (x963 x846 x846 x49) (x963 x131 x846 x131) (x963 x846 x131 (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 x131 x131 x635) (x963 x131 x131 (ite (= x846 (x268 x131)) x143 (x268 x131))) (x963 x131 x846 x49) (x963 x846 x131 x635) (x963 x131 x635 (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 x635 x131 x635) (x963 x846 x635 (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 x635 x131 (ite (= x846 (x268 x131)) x143 (x268 x131)))))
(define-fun x1184 () Bool (and (x963 x846 (ite (= x846 (x268 x131)) x143 (x268 x131)) x131) (x963 x131 x131 x846) (x963 x49 x635 x131) (x963 (ite (= x846 (x268 x131)) x143 (x268 x131)) x131 x846) (x963 x49 x846 x131) (x963 x131 x49 x846) (x963 x846 x131 x846) (x963 x131 (ite (= x846 (x268 x131)) x143 (x268 x131)) x635) (x963 x846 x846 x131) (x963 (ite (= x846 (x268 x131)) x143 (x268 x131)) x635 x131) (x963 x635 x846 x131) (x963 (ite (= (x268 x131) x846) x143 (x268 x131)) (ite (= x846 (x268 x131)) x143 (x268 x131)) x131) (x963 x49 x49 x846) (x963 x49 x131 x846) (x963 x635 (ite (= x846 (x268 x131)) x143 (x268 x131)) x131) (x963 x846 x635 x131) (x963 x635 x635 x131) (x963 x846 (ite (= x846 (x268 x131)) x143 (x268 x131)) x635) (x963 (ite (= (x268 x131) x846) x143 (x268 x131)) (ite (= (x268 x131) x846) x143 (x268 x131)) x635) (x963 x131 x635 x131) (x963 x635 x49 x846) (x963 x846 x49 x846) (x963 (ite (= x846 (x268 x131)) x143 (x268 x131)) x49 x846) (x963 x635 x131 x846) (x963 x49 (ite (= (x268 x131) x846) x143 (x268 x131)) x635) (x963 (ite (= (x268 x131) x846) x143 (x268 x131)) x846 x131) (x963 x49 (ite (= (x268 x131) x846) x143 (x268 x131)) x131) (x963 x635 (ite (= (x268 x131) x846) x143 (x268 x131)) x635) (x963 x131 x846 x131) (x963 x131 (ite (= (x268 x131) x846) x143 (x268 x131)) x131)))
(define-fun x800 () Bool (and (x963 (ite (= x846 (x268 x131)) x143 (x268 x131)) x635 x131) (x963 x49 x846 x846) (x963 x131 x846 x131) (x963 x635 x131 x846) (x963 x49 x846 x635) (x963 (ite (= x846 (x268 x131)) x143 (x268 x131)) x635 x635) (x963 (ite (= x846 (x268 x131)) x143 (x268 x131)) x131 x635) (x963 x846 x131 x635) (x963 (ite (= x846 (x268 x131)) x143 (x268 x131)) x131 x846) (x963 x846 x131 x846) (x963 x131 x846 x635) (x963 x846 x131 x131) (x963 x635 x131 x131) (x963 x131 x846 x846) (x963 (ite (= (x268 x131) x846) x143 (x268 x131)) x635 x846) (x963 (ite (= x846 (x268 x131)) x143 (x268 x131)) x131 x131) (x963 x49 x846 x131) (x963 x635 x131 x635)))
(define-fun x1203 () Bool (and (x963 x131 x846 x635) (x963 x846 x846 x49) (x963 x131 x635 (ite (= x846 (x268 x131)) x143 (x268 x131))) (x963 x635 x131 (ite (= x846 (x268 x131)) x143 (x268 x131))) (x963 x635 x635 (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 x131 x846 (ite (= x846 (x268 x131)) x143 (x268 x131))) (x963 x846 x635 x131) (x963 x131 x635 x635) (x963 x846 x131 x131) (x963 x846 x846 x131) (x963 x131 x131 (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 x635 x846 (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 x131 x846 x846) (x963 x846 x635 x49) (x963 x846 x131 x49) (x963 x131 x131 x635) (x963 x131 x635 x846) (x963 x131 x131 x846)))
(define-fun x207 () Bool (and (x963 (ite (= (x268 x131) x846) x143 (x268 x131)) x131 x635) (x963 x635 x131 (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 x635 x131 x49) (x963 x131 x846 (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 x635 x131 x635) (x963 x49 x846 x846) (x963 (ite (= (x268 x131) x846) x143 (x268 x131)) x131 x846) (x963 (ite (= (x268 x131) x846) x143 (x268 x131)) x131 x49) (x963 x846 x131 x846) (x963 x49 x846 x131) (x963 x49 x846 (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 (ite (= x846 (x268 x131)) x143 (x268 x131)) x635 x846) (x963 x131 x846 x131) (x963 (ite (= (x268 x131) x846) x143 (x268 x131)) x131 x131) (x963 (ite (= (x268 x131) x846) x143 (x268 x131)) x635 x131) (x963 x131 x846 x846) (x963 x846 x131 x131) (x963 x49 x846 x635) (x963 x131 x846 x635) (x963 x846 x131 x635) (x963 x635 x131 x846) (x963 x846 x131 (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 (ite (= x846 (x268 x131)) x143 (x268 x131)) x131 (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 x49 x846 x49) (x963 (ite (= x846 (x268 x131)) x143 (x268 x131)) x635 x49) (x963 (ite (= (x268 x131) x846) x143 (x268 x131)) x635 x635) (x963 x131 x846 x49) (x963 x635 x131 x131) (x963 (ite (= (x268 x131) x846) x143 (x268 x131)) x635 (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 x846 x131 x49)))
(define-fun x578 () Bool (and (x963 (ite (= (x268 x131) x846) x143 (x268 x131)) x846 x131) (x963 x846 x131 x846) (x963 x49 x635 (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 x131 x635 (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 x635 x635 (ite (= x846 (x268 x131)) x143 (x268 x131))) (x963 x846 x846 x131) (x963 x49 x846 x131) (x963 x49 x131 x635) (x963 x49 x131 (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 x846 x131 x635) (x963 x635 x846 x49) (x963 x131 x131 (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 x131 x846 x131) (x963 x635 x131 (ite (= x846 (x268 x131)) x143 (x268 x131))) (x963 x846 x131 (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 (ite (= x846 (x268 x131)) x143 (x268 x131)) x635 (ite (= x846 (x268 x131)) x143 (x268 x131))) (x963 x635 x131 x635) (x963 x635 x131 x846) (x963 (ite (= x846 (x268 x131)) x143 (x268 x131)) x131 x635) (x963 x131 x131 x635) (x963 x846 x846 x49) (x963 x49 x846 x49) (x963 x846 x635 (ite (= x846 (x268 x131)) x143 (x268 x131))) (x963 x131 x131 x846) (x963 (ite (= (x268 x131) x846) x143 (x268 x131)) x131 x846) (x963 x49 x131 x846) (x963 (ite (= x846 (x268 x131)) x143 (x268 x131)) x131 (ite (= x846 (x268 x131)) x143 (x268 x131))) (x963 x131 x846 x49) (x963 (ite (= x846 (x268 x131)) x143 (x268 x131)) x846 x49) (x963 x635 x846 x131)))
(define-fun x1102 () Bool (and (x963 x131 x846 x49) (x963 x846 x131 (ite (= x846 (x268 x131)) x143 (x268 x131))) (x963 x635 x131 x846) (x963 x131 x846 x846) (x963 (ite (= x846 (x268 x131)) x143 (x268 x131)) x635 (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 x49 x846 x49) (x963 (ite (= x846 (x268 x131)) x143 (x268 x131)) x131 x49) (x963 x635 x131 x635) (x963 x635 x131 x131) (x963 x131 x846 (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 (ite (= x846 (x268 x131)) x143 (x268 x131)) x635 x131) (x963 x49 x846 (ite (= x846 (x268 x131)) x143 (x268 x131))) (x963 x846 x131 x846) (x963 x846 x131 x131) (x963 (ite (= x846 (x268 x131)) x143 (x268 x131)) x635 x635) (x963 x49 x846 x846) (x963 x131 x846 x131) (x963 x846 x131 x635) (x963 x131 x846 x635) (x963 x635 x131 x49) (x963 (ite (= (x268 x131) x846) x143 (x268 x131)) x635 x846) (x963 (ite (= x846 (x268 x131)) x143 (x268 x131)) x131 x131) (x963 (ite (= (x268 x131) x846) x143 (x268 x131)) x131 x635) (x963 (ite (= x846 (x268 x131)) x143 (x268 x131)) x131 (ite (= x846 (x268 x131)) x143 (x268 x131))) (x963 x635 x131 (ite (= x846 (x268 x131)) x143 (x268 x131))) (x963 x49 x846 x131) (x963 x49 x846 x635) (x963 x846 x131 x49) (x963 (ite (= x846 (x268 x131)) x143 (x268 x131)) x635 x49) (x963 (ite (= (x268 x131) x846) x143 (x268 x131)) x131 x846)))
(define-fun x342 () Bool (and (x963 x635 x635 x131) (x963 x131 (ite (= (x268 x131) x846) x143 (x268 x131)) x635) (x963 x131 x131 x846) (x963 x846 x635 x131) (x963 x635 (ite (= x846 (x268 x131)) x143 (x268 x131)) x131) (x963 x846 x131 x846) (x963 x635 x131 x846) (x963 x131 x635 x131) (x963 x131 x846 x131) (x963 x846 (ite (= x846 (x268 x131)) x143 (x268 x131)) x131) (x963 x635 x846 x131) (x963 x635 (ite (= x846 (x268 x131)) x143 (x268 x131)) x635) (x963 x846 (ite (= (x268 x131) x846) x143 (x268 x131)) x635) (x963 x131 (ite (= (x268 x131) x846) x143 (x268 x131)) x131) (x963 x131 x49 x846) (x963 x635 x49 x846) (x963 x846 x49 x846) (x963 x846 x846 x131)))
(define-fun x22 () Bool (and (x963 x131 (ite (= (x268 x131) x846) x143 (x268 x131)) x846) (x963 x846 x131 x131) (x963 x131 x846 x131) (x963 x131 x846 x846) (x963 x846 x131 x635) (x963 x635 (ite (= x846 (x268 x131)) x143 (x268 x131)) x635) (x963 x131 x846 x635) (x963 x131 (ite (= (x268 x131) x846) x143 (x268 x131)) x635) (x963 x635 (ite (= x846 (x268 x131)) x143 (x268 x131)) x846) (x963 x846 x49 x635) (x963 x131 x635 x131) (x963 x131 x635 x635) (x963 x846 x49 x846) (x963 x131 (ite (= x846 (x268 x131)) x143 (x268 x131)) x131) (x963 x131 x635 x846) (x963 x846 x131 x846) (x963 x846 x49 x131) (x963 x635 (ite (= (x268 x131) x846) x143 (x268 x131)) x131)))
(define-fun x32 () Bool (and (x963 x846 x131 x49) (x963 x635 x846 (ite (= x846 (x268 x131)) x143 (x268 x131))) (x963 x131 (ite (= x846 (x268 x131)) x143 (x268 x131)) x635) (x963 x131 x846 x846) (x963 x635 (ite (= (x268 x131) x846) x143 (x268 x131)) (ite (= x846 (x268 x131)) x143 (x268 x131))) (x963 x846 x131 x131) (x963 x131 (ite (= (x268 x131) x846) x143 (x268 x131)) (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 x131 x49 x846) (x963 x131 x49 x635) (x963 x131 (ite (= (x268 x131) x846) x143 (x268 x131)) x846) (x963 x846 x635 x131) (x963 x846 x49 x131) (x963 x131 x635 x635) (x963 x131 x635 (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 x131 x846 x635) (x963 x131 x131 x846) (x963 x635 x49 (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 x131 x846 (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 x846 x49 x49) (x963 x846 x635 x49) (x963 x635 x635 (ite (= x846 (x268 x131)) x143 (x268 x131))) (x963 x635 x131 (ite (= x846 (x268 x131)) x143 (x268 x131))) (x963 x846 x846 x49) (x963 x846 x846 x131) (x963 x846 (ite (= x846 (x268 x131)) x143 (x268 x131)) x49) (x963 x131 x131 x635) (x963 x131 x131 (ite (= x846 (x268 x131)) x143 (x268 x131))) (x963 x131 x49 (ite (= x846 (x268 x131)) x143 (x268 x131))) (x963 x846 (ite (= (x268 x131) x846) x143 (x268 x131)) x131) (x963 x131 x635 x846)))
(define-fun x1082 () Bool (and (x963 x846 x49 x49) (x963 x131 (ite (= x846 (x268 x131)) x143 (x268 x131)) x635) (x963 x131 x846 x846) (x963 x846 x49 x131) (x963 x846 x131 x131) (x963 x635 (ite (= x846 (x268 x131)) x143 (x268 x131)) x635) (x963 x635 (ite (= (x268 x131) x846) x143 (x268 x131)) x49) (x963 x846 x131 x49) (x963 x846 x49 x635) (x963 x131 (ite (= x846 (x268 x131)) x143 (x268 x131)) x846) (x963 x131 x846 x635) (x963 x846 x131 x846) (x963 x131 (ite (= x846 (x268 x131)) x143 (x268 x131)) x49) (x963 x131 x635 (ite (= x846 (x268 x131)) x143 (x268 x131))) (x963 x846 x131 x635) (x963 x131 x846 x131) (x963 x131 (ite (= x846 (x268 x131)) x143 (x268 x131)) (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 x635 (ite (= (x268 x131) x846) x143 (x268 x131)) (ite (= x846 (x268 x131)) x143 (x268 x131))) (x963 x635 (ite (= x846 (x268 x131)) x143 (x268 x131)) x846) (x963 x846 x131 (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 x131 x846 x49) (x963 x846 x49 (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 x131 (ite (= x846 (x268 x131)) x143 (x268 x131)) x131) (x963 x131 x635 x131) (x963 x131 x846 (ite (= x846 (x268 x131)) x143 (x268 x131))) (x963 x131 x635 x49) (x963 x635 (ite (= x846 (x268 x131)) x143 (x268 x131)) x131) (x963 x131 x635 x846) (x963 x846 x49 x846) (x963 x131 x635 x635)))
(define-fun x783 () Bool (and (x963 x635 x846 x131) (x963 x846 x846 x131) (x963 x635 x846 x49) (x963 x846 x846 x49) (x963 x131 x846 x49) (x963 x846 x635 (ite (= x846 (x268 x131)) x143 (x268 x131))) (x963 x131 x131 x635) (x963 x635 x131 x846) (x963 x846 x131 x846) (x963 x635 x131 (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 x131 x635 (ite (= x846 (x268 x131)) x143 (x268 x131))) (x963 x846 x131 x635) (x963 x131 x131 (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 x131 x846 x131) (x963 x635 x131 x635) (x963 x635 x635 (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 x131 x131 x846) (x963 x846 x131 (ite (= x846 (x268 x131)) x143 (x268 x131)))))
(define-fun x52 () Bool (and (x963 x846 x49 x131) (x963 x846 x131 x131) (x963 x131 (ite (= x846 (x268 x131)) x143 (x268 x131)) x635) (x963 x131 x635 x49) (x963 x131 (ite (= (x268 x131) x846) x143 (x268 x131)) x131) (x963 x131 x846 x846) (x963 x131 x846 x131) (x963 x846 x49 x49) (x963 x131 x846 (ite (= x846 (x268 x131)) x143 (x268 x131))) (x963 x131 x635 x131) (x963 x635 (ite (= (x268 x131) x846) x143 (x268 x131)) x635) (x963 x846 x131 (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 x846 x131 x49) (x963 x846 x49 x846) (x963 x635 (ite (= x846 (x268 x131)) x143 (x268 x131)) x846) (x963 x131 (ite (= x846 (x268 x131)) x143 (x268 x131)) (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 x635 (ite (= x846 (x268 x131)) x143 (x268 x131)) (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 x846 x49 (ite (= x846 (x268 x131)) x143 (x268 x131))) (x963 x846 x49 x635) (x963 x846 x131 x846) (x963 x846 x131 x635) (x963 x131 (ite (= x846 (x268 x131)) x143 (x268 x131)) x49) (x963 x131 x635 (ite (= x846 (x268 x131)) x143 (x268 x131))) (x963 x635 (ite (= (x268 x131) x846) x143 (x268 x131)) x49) (x963 x635 (ite (= (x268 x131) x846) x143 (x268 x131)) x131) (x963 x131 x846 x49) (x963 x131 (ite (= x846 (x268 x131)) x143 (x268 x131)) x846) (x963 x131 x846 x635) (x963 x131 x635 x635) (x963 x131 x635 x846)))
(define-fun x848 () Bool (and (x963 x635 x131 x846) (x963 x131 x846 x131) (x963 x846 (ite (= x846 (x268 x131)) x143 (x268 x131)) x635) (x963 x131 x635 x131) (x963 x635 (ite (= (x268 x131) x846) x143 (x268 x131)) x131) (x963 x635 x635 x131) (x963 x635 x846 x131) (x963 x846 x131 x846) (x963 x846 (ite (= x846 (x268 x131)) x143 (x268 x131)) x131) (x963 x635 x49 x846) (x963 x131 (ite (= x846 (x268 x131)) x143 (x268 x131)) x635) (x963 x846 x635 x131) (x963 x846 x846 x131) (x963 x131 x49 x846) (x963 x131 x131 x846) (x963 x846 x49 x846) (x963 x131 (ite (= x846 (x268 x131)) x143 (x268 x131)) x131) (x963 x635 (ite (= (x268 x131) x846) x143 (x268 x131)) x635)))
(define-fun x309 () Bool (and (x963 (ite (= (x268 x131) x846) x143 (x268 x131)) (ite (= x846 (x268 x131)) x143 (x268 x131)) x131) (x963 x846 x846 x131) (x963 x49 (ite (= x846 (x268 x131)) x143 (x268 x131)) x131) (x963 x49 x49 x846) (x963 x846 (ite (= x846 (x268 x131)) x143 (x268 x131)) x635) (x963 x846 x49 x846) (x963 x131 x131 x846) (x963 x635 x635 x131) (x963 x635 x49 x846) (x963 (ite (= (x268 x131) x846) x143 (x268 x131)) (ite (= x846 (x268 x131)) x143 (x268 x131)) x635) (x963 x635 x131 x846) (x963 x635 (ite (= x846 (x268 x131)) x143 (x268 x131)) x131) (x963 x846 x131 x846) (x963 x49 x846 x131) (x963 (ite (= (x268 x131) x846) x143 (x268 x131)) x846 x131) (x963 x131 x49 x846) (x963 x131 (ite (= (x268 x131) x846) x143 (x268 x131)) x131) (x963 (ite (= x846 (x268 x131)) x143 (x268 x131)) x131 x846) (x963 x131 x635 x131) (x963 x131 x846 x131) (x963 x131 (ite (= (x268 x131) x846) x143 (x268 x131)) x635) (x963 x846 (ite (= (x268 x131) x846) x143 (x268 x131)) x131) (x963 (ite (= x846 (x268 x131)) x143 (x268 x131)) x635 x131) (x963 x635 x846 x131) (x963 x635 (ite (= x846 (x268 x131)) x143 (x268 x131)) x635) (x963 x846 x635 x131) (x963 x49 (ite (= x846 (x268 x131)) x143 (x268 x131)) x635) (x963 (ite (= x846 (x268 x131)) x143 (x268 x131)) x49 x846) (x963 x49 x635 x131) (x963 x49 x131 x846)))
(define-fun x760 () Bool (and (x963 x635 x846 x49) (x963 x131 x131 x846) (x963 x131 x846 x131) (x963 x131 x635 (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 x635 x846 x131) (x963 x635 x131 (ite (= x846 (x268 x131)) x143 (x268 x131))) (x963 x846 x131 (ite (= x846 (x268 x131)) x143 (x268 x131))) (x963 x131 x131 (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 x635 x131 x846) (x963 x846 x846 x131) (x963 x131 x131 x635) (x963 x846 x131 x846) (x963 x846 x635 (ite (= x846 (x268 x131)) x143 (x268 x131))) (x963 x846 x846 x49) (x963 x131 x846 x49) (x963 x635 x635 (ite (= x846 (x268 x131)) x143 (x268 x131))) (x963 x846 x131 x635) (x963 x635 x131 x635)))
(define-fun x869 () Bool (and (x963 x846 x131 x846) (x963 (ite (= (x268 x131) x846) x143 (x268 x131)) x131 x846) (x963 x635 x131 x846) (x963 x635 x131 x635) (x963 x846 x846 x131) (x963 (ite (= x846 (x268 x131)) x143 (x268 x131)) x131 x635) (x963 x846 x635 (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 x131 x131 x846) (x963 x131 x635 (ite (= x846 (x268 x131)) x143 (x268 x131))) (x963 x846 x846 x49) (x963 x49 x635 (ite (= x846 (x268 x131)) x143 (x268 x131))) (x963 x131 x846 x131) (x963 x635 x131 (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 x131 x131 (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 x635 x635 (ite (= x846 (x268 x131)) x143 (x268 x131))) (x963 x846 x131 x635) (x963 x49 x131 (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 x635 x846 x49) (x963 x846 x131 (ite (= x846 (x268 x131)) x143 (x268 x131))) (x963 (ite (= x846 (x268 x131)) x143 (x268 x131)) x635 (ite (= x846 (x268 x131)) x143 (x268 x131))) (x963 x49 x131 x635) (x963 x635 x846 x131) (x963 (ite (= x846 (x268 x131)) x143 (x268 x131)) x846 x49) (x963 x131 x846 x49) (x963 (ite (= (x268 x131) x846) x143 (x268 x131)) x846 x131) (x963 x49 x131 x846) (x963 (ite (= x846 (x268 x131)) x143 (x268 x131)) x131 (ite (= (x268 x131) x846) x143 (x268 x131))) (x963 x49 x846 x131) (x963 x131 x131 x635) (x963 x49 x846 x49)))
(define-fun x1156 () Bool (and x800 x32 x1203 x52 x517 x431 x22 x760 x848 x1112 x1184 x342 x207 x783 x1102 x578 x869 x1082 x16 x309))
(define-fun x705 () Bool (and (x1031 x846 x131) (x1031 x635 (ite (= x846 (x268 x131)) x143 (x268 x131))) (x1031 x131 x846) (x1031 x131 (ite (= x846 (x268 x131)) x143 (x268 x131))) (x1031 x131 x635) (x1031 x846 x49)))
(define-fun x773 () Bool (and (x1031 x846 x635) (x1031 x635 x635) (x1031 (ite (= x846 (x268 x131)) x143 (x268 x131)) x635) (x1031 x635 x131) (x1031 x846 x846) (x1031 x846 x131) (x1031 x131 x131) (x1031 (ite (= (x268 x131) x846) x143 (x268 x131)) x846) (x1031 x49 x131) (x1031 x635 x846) (x1031 (ite (= x846 (x268 x131)) x143 (x268 x131)) x131) (x1031 x131 x635) (x1031 x49 x635) (x1031 x49 x846) (x1031 x131 x846)))
(define-fun x1092 () Bool (and (x1031 x131 x846) (x1031 x846 x635) (x1031 x635 x131) (x1031 x635 x846) (x1031 x846 x846) (x1031 x131 x131) (x1031 x635 x635) (x1031 x846 x131) (x1031 x131 x635)))
(define-fun x166 () Bool (and x773 x705 x1092))
(define-fun x723 ((x385 Int) (x374 Int) (x64 Int) (x759 Int)) Bool (=> (and (>= x385 0) (<= 0 x374) (<= x374 x759) (>= x64 x385)) (<= (x1215 x385 x374) (x1215 x64 x759))))
(define-fun x1052 ((x385 Int) (x374 Int) (x64 Int) (x759 Int)) Bool (=> (= x64 x385) (= (- (x1215 x385 x374) (x1215 x64 x759)) (x1215 x385 (- x374 x759)))))
(assert (x344 x1128 1461501637330902918203684832716283019655932542976))
(assert (= x987 (=> (and (and (= (x474 (+ x290 x1048)) x275) (= (= x47 0) x992) (= (x239 31 x290) x47)) (or (and (not x992) (and (= x701 (x239 x253 x1075)) (= (x306 (- x275 x47)) x840) (= x1075 (x630 x840)) (= x441 x1034) (= x441 (x474 (+ 32 x840))) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1210) x253) (= (x306 (- (mod (x637 1 (* 8 (- 32 x47))) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1)) x1210))) (and x992 (= x1034 x275)))) x928)))
(assert (x117 x174))
(assert (x117 x1213))
(assert (= x101 (=> (and (= x422 x916) (= x183 x335)) x923)))
(assert (< 10000 (x1040 x817 x871 x693 x912 x1181 x1179 x535 x1094)))
(assert (=> (<= x44 10000) (= (x119 x44) 0)))
(assert (= (and x182 x968) x130))
(assert (x117 x1090))
(assert (not (x962 (x26 x223 x952 x498 x204 x921 x764 x650))))
(assert (= (=> (and (= (not (< 128 x290)) x697) (= x633 (x520 256)) (= x1090 (x474 (+ x1048 96)))) (and x987 x697)) x768))
(assert (=> (<= x204 10000) (= 0 (x119 x204))))
(assert (= 8 (x706 (x793 64 x357 8))))
(assert (x117 x1053))
(assert (x117 x529))
(assert (x117 x561))
(assert (= (and x728 x622) x551))
(assert (= (x340 (x1040 x817 x871 x693 x912 x1181 x1179 x535 x1094)) x871))
(assert (= (x706 (x1040 x223 x1186 x521 x522 x312 x1211 x1012 x589)) x521))
(assert (x117 x619))
(assert (x117 x577))
(assert (= x477 (x1171 (x999 x223 x284 x914 x541 x477))))
(assert (= (x119 (x1143 x223 x44 x806 x575)) (x1143 x223 x44 x806 x575)))
(assert (x117 x333))
(assert (= (x819 (x418 x934 x294 x146 x672 x433 x274)) x274))
(assert (x117 x108))
(assert (=> (>= 10000 x279) (= 0 (x119 x279))))
(assert (x428 x724))
(assert (x691 (ite (< (* (- 32 x186) 8) 256) (x727 2 (* 8 (- 32 x186))) 0)))
(assert (< 10000 (x1040 x223 x1186 x521 x522 x312 x1211 x1012 x589)))
(assert (x117 x809))
(assert (< (x1040 x782 x171 x677 x951 x1008 x1106 x937 x327) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x117 x754))
(assert (= (x119 (x999 x223 x284 x914 x541 x477)) (x999 x223 x284 x914 x541 x477)))
(assert (x117 x1035))
(assert (x117 x1189))
(assert (x117 x1002))
(assert (= x1140 (x340 (x26 x934 x1140 x1132 x48 x612 x11 x820))))
(assert (=> (<= x842 10000) (= (x119 x842) 0)))
(assert (x117 x145))
(assert (= x600 (x340 (x999 x836 x600 x206 x417 x279))))
(assert (= (x119 (x418 x817 x524 x577 x1195 x151 x595)) (x418 x817 x524 x577 x1195 x151 x595)))
(assert (= (and (not x1133) x1004) x42))
(assert (= x569 (x838 (x26 x836 x2 x550 x376 x563 x1083 x569))))
(assert (x117 x193))
(assert (x117 x121))
(assert (= (x26 x817 x627 x236 x632 x714 x685 x737) (x119 (x26 x817 x627 x236 x632 x714 x685 x737))))
(assert (= (x999 x782 x959 x893 x874 x545) (x119 (x999 x782 x959 x893 x874 x545))))
(assert (= x737 (x838 (x26 x817 x627 x236 x632 x714 x685 x737))))
(assert (x428 x1205))
(assert (=> (>= 10000 x744) (= 0 (x119 x744))))
(assert (= (x819 (x1040 x782 x171 x677 x951 x1008 x1106 x937 x327)) x1106))
(assert (x117 x898))
(assert (x117 x716))
(assert (= (x1143 x934 x38 x897 x230) (x119 (x1143 x934 x38 x897 x230))))
(assert (x560 65))
(assert (x117 x498))
(assert (x117 x28))
(assert (x117 x752))
(assert (= 0 (x119 115792089237316195423570985008687907853269984665640564039457584007913129639934)))
(assert (x117 x238))
(assert (x117 x641))
(assert (=> (>= 10000 x876) (= 0 (x119 x876))))
(assert (x117 x18))
(assert (x117 x1055))
(assert (x117 x695))
(assert (x117 x788))
(assert (=> (>= 10000 x965) (= 0 (x119 x965))))
(assert (x683 x641 x863))
(assert (< 10000 (x699 x836 x995)))
(assert (x117 x625))
(assert (= (x180 (x999 x817 x411 x619 x831 x170)) x831))
(assert (x117 x513))
(assert (=> (>= 10000 x48) (= 0 (x119 x48))))
(assert (= (x1143 x817 x127 x1103 x608) (x119 (x1143 x817 x127 x1103 x608))))
(assert (x117 x304))
(assert (x117 x1023))
(assert (> (x26 x782 x603 x1155 x120 x435 x756 x771) 10000))
(assert (x117 x736))
(assert (= (=> (and (= x726 x657) (= x1013 x621)) x66) x1178))
(assert (x80 x1158))
(assert (not (x962 (x1040 x836 x876 x436 x1028 x1002 x116 x314 x744))))
(assert (= 0 (x119 115792089237316195423570985008687907853269984665640564039457584007913129639844)))
(assert (=> (<= x1071 10000) (= 0 (x119 x1071))))
(assert (x117 x1141))
(assert (= (x644 (x793 64 x1078 2)) 64))
(assert (x117 x916))
(assert (= (x119 (x418 x782 x689 x408 x288 x53 x734)) (x418 x782 x689 x408 x288 x53 x734)))
(assert (= (x180 (x1040 x223 x1186 x521 x522 x312 x1211 x1012 x589)) x522))
(assert (x117 x59))
(assert (=> (>= 10000 x356) (= (x119 x356) 0)))
(assert (x117 x92))
(assert (= (x797 (x1040 x934 x1147 x112 x625 x694 x729 x696 x877)) x877))
(assert (=> (>= 10000 x436) (= (x119 x436) 0)))
(assert (x117 x749))
(assert (x117 x714))
(assert (x117 x282))
(assert (x117 x144))
(assert (=> (<= x524 10000) (= 0 (x119 x524))))
(assert (x117 x765))
(assert (x1174 65 x720))
(assert (= x689 (x340 (x418 x782 x689 x408 x288 x53 x734))))
(assert (x117 x822))
(assert (x962 1786122754))
(assert (=> (>= 10000 x737) (= (x119 x737) 0)))
(assert (x117 x899))
(assert (= x545 (x1171 (x999 x782 x959 x893 x874 x545))))
(assert (x117 x315))
(assert (= (and x1049 x540) x484))
(assert (x117 x343))
(assert (x117 x769))
(assert (x117 x823))
(assert (x117 x661))
(assert (x117 x170))
(assert (= x1161 (=> (and (and (= (= x708 0) x1125) (= x708 (x239 1461501637330902918203684832716283019655932542975 x1079))) (or (and (and (= (ite (not (= x1006 0)) 1 0) x1189) (= x370 (x811 x39)) (= x39 (x239 1461501637330902918203684832716283019655932542975 x1079)) x219 (= (= (x3 x39) x926) x730) (= (x944 x651) x976) (= x926 (x944 x39)) (>= x307 1) (= (>= (x3 x651) x976) x219) (>= x370 1) x730 (= x1020 (x474 (+ 4 x317))) (<= x724 4294967295) (= (x474 (+ x1020 32)) x686)) (not x1125)) x1125)) x791)))
(assert (< 10000 (x418 x836 x18 x639 x631 x147 x1198)))
(assert (x560 x35))
(assert (x117 x15))
(assert (x117 x818))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x793 64 x357 8)))
(assert (x117 x284))
(assert (= (x119 (x418 x223 x362 x704 x687 x192 x842)) (x418 x223 x362 x704 x687 x192 x842)))
(assert (x117 x443))
(assert (x117 x563))
(assert (x117 x165))
(assert (x117 x832))
(assert (= (x119 (x699 x836 x995)) (x699 x836 x995)))
(assert (= x969 (x706 (x999 x934 x955 x969 x240 x552))))
(assert (= (x706 (x1143 x223 x44 x806 x575)) x806))
(assert (=> (>= 10000 x1097) (= (x119 x1097) 0)))
(assert (x117 x1042))
(assert (=> (<= x577 10000) (= 0 (x119 x577))))
(assert (x117 x408))
(assert (= x294 (x340 (x418 x934 x294 x146 x672 x433 x274))))
(assert (x117 x841))
(assert (not (x962 (x1040 x817 x871 x693 x912 x1181 x1179 x535 x1094))))
(assert (not (x962 (x418 x817 x524 x577 x1195 x151 x595))))
(assert (= (x1171 (x418 x836 x18 x639 x631 x147 x1198)) x147))
(assert (x344 x1170 26959946667150639794667015087019630673637144422540572481103610249216))
(assert (< 10000 (x418 x817 x524 x577 x1195 x151 x595)))
(assert (x117 x1170))
(assert (x117 x589))
(assert (x117 x673))
(assert (x117 x65))
(assert (= (and x191 x992) x917))
(assert (= (=> (and (= x1150 10019309979067222254582373821846632475949454479833780424560900009889672200192) (<= 1 x76) (= (x239 115792089210356248756420345214020892766250353992003419616917011526809519390720 x1170) x1150) (= x503 x993) (= x1128 x1016) (= x1170 (x4 x503))) x592) x1047))
(assert (x117 x595))
(assert (=> (>= 10000 x192) (= (x119 x192) 0)))
(assert (= (x180 (x1040 x817 x871 x693 x912 x1181 x1179 x535 x1094)) x912))
(assert (not (x962 (x699 x836 x995))))
(assert (= (x819 (x1040 x934 x1147 x112 x625 x694 x729 x696 x877)) x729))
(assert (x117 x976))
(assert (= (x26 x934 x1140 x1132 x48 x612 x11 x820) (x119 (x26 x934 x1140 x1132 x48 x612 x11 x820))))
(assert (x117 x229))
(assert (=> (>= 10000 x912) (= 0 (x119 x912))))
(assert (= (x340 (x699 x782 x918)) x918))
(assert (x117 x496))
(assert (x117 x1123))
(assert (= (x999 x817 x411 x619 x831 x170) (x119 (x999 x817 x411 x619 x831 x170))))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x418 x817 x524 x577 x1195 x151 x595)))
(assert (x117 x621))
(assert (x117 x337))
(assert (x117 x411))
(assert (=> (>= 10000 x1198) (= (x119 x1198) 0)))
(assert (= x1028 (x180 (x1040 x836 x876 x436 x1028 x1002 x116 x314 x744))))
(assert (x117 x481))
(assert (= x463 (and (not x814) x220)))
(assert (= x141 (or x917 x363)))
(assert (x117 x203))
(assert (x117 x73))
(assert (= x995 (x340 (x699 x836 x995))))
(assert (x691 32))
(assert (x117 x178))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x793 x782 x59 x27)))
(assert (x117 x590))
(assert (=> (>= 10000 x569) (= 0 (x119 x569))))
(assert (x117 x413))
(assert (=> (>= 10000 x627) (= 0 (x119 x627))))
(assert (x117 x1155))
(assert (x117 x1033))
(assert (x117 x206))
(assert (x117 x957))
(assert (= x612 (x1171 (x26 x934 x1140 x1132 x48 x612 x11 x820))))
(assert (=> (<= x893 10000) (= (x119 x893) 0)))
(assert (x117 x686))
(assert (x117 x183))
(assert (=> (>= 10000 x1103) (= (x119 x1103) 0)))
(assert (x117 x1198))
(assert (x560 x226))
(assert (=> (<= x1094 10000) (= (x119 x1094) 0)))
(assert (= (and (not x558) x616) x1014))
(assert (x117 x596))
(assert (=> (>= 10000 x170) (= (x119 x170) 0)))
(assert (x117 x491))
(assert (= (x26 x782 x603 x1155 x120 x435 x756 x771) (x119 (x26 x782 x603 x1155 x120 x435 x756 x771))))
(assert (x117 x677))
(assert (x117 x1056))
(assert (not (x962 (x26 x817 x627 x236 x632 x714 x685 x737))))
(assert (x117 x316))
(assert (x117 x581))
(assert (not (x962 (x418 x934 x294 x146 x672 x433 x274))))
(assert (x117 x908))
(assert (=> (>= 10000 x212) (= 0 (x119 x212))))
(assert (=> (<= x127 10000) (= 0 (x119 x127))))
(assert (= x25 (and x150 (not x1177))))
(assert (x344 x887 32))
(assert (x135 x887))
(assert (< (x999 x934 x955 x969 x240 x552) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x80 x559))
(assert (= (and x1060 x378) x562))
(assert (=> (>= 10000 x535) (= (x119 x535) 0)))
(assert (x962 115792089237316195423570985008687907853269984665640564039457584007913129639844))
(assert (= (and (not x789) x489) x609))
(assert (x117 x604))
(assert (x117 x44))
(assert (=> (>= 10000 x836) (= (x119 x836) 0)))
(assert (x117 x910))
(assert (x745 452312848583266388373324160190187140051835877600158453279131187530910662656))
(assert (x117 x718))
(assert (x428 x785))
(assert (=> (>= 10000 x1181) (= 0 (x119 x1181))))
(assert (not (x962 (x1143 x782 x590 x929 x660))))
(assert (x117 x407))
(assert (= (x271 (ite (< (* (- 32 x47) 8) 256) (x727 2 (* 8 (- 32 x47))) 0)) (x637 1 (* 8 (- 32 x47)))))
(assert (= (or x243 x1059) x30))
(assert (= (x644 (x699 x836 x995)) x836))
(assert (=> (<= x806 10000) (= (x119 x806) 0)))
(assert (= (x1171 (x26 x836 x2 x550 x376 x563 x1083 x569)) x563))
(assert (x117 x209))
(assert (< (x26 x782 x603 x1155 x120 x435 x756 x771) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (x119 10019309979067222254582373821846632475949454479833780424560900009889672200192) 0))
(assert (not (x962 (x418 x836 x18 x639 x631 x147 x1198))))
(assert (= x836 (x644 (x1143 x836 x965 x813 x713))))
(assert (= (x119 1461501637330902918203684832716283019655932542975) 0))
(assert (x117 x852))
(assert (x117 x572))
(assert (x344 x1055 1461501637330902918203684832716283019655932542976))
(assert (x117 x331))
(assert (x117 x541))
(assert (x117 x319))
(assert (= (x340 (x699 x934 x420)) x420))
(assert (=> (<= x1078 10000) (= 0 (x119 x1078))))
(assert (= x660 (x180 (x1143 x782 x590 x929 x660))))
(assert (x117 x781))
(assert (= (and x228 x1104) x224))
(assert (= 0 (x119 115792089237316195423570985008687907853269984665640564039457584007913129639903)))
(assert (=> (<= x651 10000) (= 0 (x119 x651))))
(assert (x80 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x962 1461501637330902918203684832716283019655932542975))
(assert (x117 x31))
(assert (= (x706 (x793 x817 x165 x356)) x356))
(assert (x117 x922))
(assert (x117 x978))
(assert (x117 x175))
(assert (= (x180 (x26 x934 x1140 x1132 x48 x612 x11 x820)) x48))
(assert (=> (<= x297 10000) (= (x119 x297) 0)))
(assert (=> (<= x952 10000) (= (x119 x952) 0)))
(assert (=> (<= x877 10000) (= 0 (x119 x877))))
(assert (x117 x918))
(assert (= (x644 (x699 x934 x420)) x934))
(assert (=> (>= 10000 x217) (= (x119 x217) 0)))
(assert (x117 x1066))
(assert (= (=> (and (and (<= 1 x1098) (<= 32 x1205) (= (x306 (- x858 x503)) x900) (= (x811 x1085) x1098) (= x622 (> x772 0))) (or (and (not x622) (= x772 x76)) (and x622 (and (<= x1205 4294967295) (= 1 x76) (<= 32 x1205))))) x1047) x1165))
(assert (=> (<= x357 10000) (= 0 (x119 x357))))
(assert (= (x340 (x793 x817 x165 x356)) x165))
(assert (x117 x1180))
(assert (x117 x594))
(assert (x117 x1016))
(assert (x117 x1118))
(assert (= (x180 (x26 x817 x627 x236 x632 x714 x685 x737)) x632))
(assert (< 10000 (x418 x782 x689 x408 x288 x53 x734)))
(assert (= x411 (x340 (x999 x817 x411 x619 x831 x170))))
(assert (< (x1040 x223 x1186 x521 x522 x312 x1211 x1012 x589) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (=> (>= 10000 x1083) (= (x119 x1083) 0)))
(assert (x117 x568))
(assert (< (x999 x223 x284 x914 x541 x477) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (=> (and (= x1013 x978) (= x726 x71)) x66) x597))
(assert (x117 x979))
(assert (x1174 32 x226))
(assert (x560 x641))
(assert (not (x962 (x26 x782 x603 x1155 x120 x435 x756 x771))))
(assert (x117 x200))
(assert (x117 x267))
(assert (x1174 1 (x727 2 (* (- 32 x186) 8))))
(assert (x962 1781416757497172237285707461672121659281076687163700985222424369352509686767))
(assert (x117 x417))
(assert (not (x962 (x999 x836 x600 x206 x417 x279))))
(assert (= x223 (x644 (x418 x223 x362 x704 x687 x192 x842))))
(assert (x117 x456))
(assert (=> (<= x714 10000) (= 0 (x119 x714))))
(assert (= (x180 (x999 x934 x955 x969 x240 x552)) x240))
(assert (< (x999 x836 x600 x206 x417 x279) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x117 x523))
(assert (< 10000 (x399 0)))
(assert (not (x962 (x26 x934 x1140 x1132 x48 x612 x11 x820))))
(assert (x117 x112))
(assert (x117 x1061))
(assert (= 0 x143))
(assert (x12 x1017))
(assert (= x883 (and x616 x558)))
(assert (x117 x911))
(assert (x117 x352))
(assert (x117 x253))
(assert (x117 x740))
(assert (=> (>= 10000 x874) (= 0 (x119 x874))))
(assert (= (x26 x223 x952 x498 x204 x921 x764 x650) (x119 (x26 x223 x952 x498 x204 x921 x764 x650))))
(assert (x962 115792089237316195423570985008687907853269984665640564039457584007913129639906))
(assert (x117 x192))
(assert (= (x180 (x1143 x817 x127 x1103 x608)) x608))
(assert (x117 x1097))
(assert (=> (<= x677 10000) (= (x119 x677) 0)))
(assert (x117 x1078))
(assert (x499 (+ 31 x350) 32))
(assert (x117 x495))
(assert (x80 x1079))
(assert (> (x793 x836 x373 x217) 10000))
(assert (x117 x1139))
(assert (x117 x74))
(assert (= (x644 (x1040 x223 x1186 x521 x522 x312 x1211 x1012 x589)) x223))
(assert (x117 x198))
(assert (x117 x280))
(assert (= (x644 (x999 x836 x600 x206 x417 x279)) x836))
(assert (x117 x543))
(assert (x80 x1075))
(assert (=> (>= 10000 x897) (= (x119 x897) 0)))
(assert (x117 x1147))
(assert (x962 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (=> (>= 10000 x284) (= 0 (x119 x284))))
(assert (=> (<= x1186 10000) (= (x119 x1186) 0)))
(assert (x117 x989))
(assert (x117 x802))
(assert (= x97 (and x814 x220)))
(assert (x117 x47))
(assert (= (x119 (x699 x817 x1071)) (x699 x817 x1071)))
(assert (< (x26 x223 x952 x498 x204 x921 x764 x650) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x117 x260))
(assert (> (x1143 x817 x127 x1103 x608) 10000))
(assert (x117 x70))
(assert (x560 (- 32 x186)))
(assert (= (x26 x836 x2 x550 x376 x563 x1083 x569) (x119 (x26 x836 x2 x550 x376 x563 x1083 x569))))
(assert (x117 x302))
(assert (x117 x603))
(assert (= 0 (x119 66559029714281558484110900056217435723262332508534932952963113331629997686784)))
(assert (x117 x380))
(assert (x691 x132))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x1040 x836 x876 x436 x1028 x1002 x116 x314 x744)))
(assert (< (x1143 x817 x127 x1103 x608) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x80 x1170))
(assert (= x712 (and x177 (not x96))))
(assert (x117 x772))
(assert (x117 x326))
(assert (< 10000 (x26 x223 x952 x498 x204 x921 x764 x650)))
(assert (x745 (+ 31 x905)))
(assert (x499 (+ x905 31) 32))
(assert (not (x962 (x1040 x934 x1147 x112 x625 x694 x729 x696 x877))))
(assert (x117 x392))
(assert (x117 x872))
(assert (x117 x734))
(assert (= (x706 (x26 x223 x952 x498 x204 x921 x764 x650)) x498))
(assert (= (x119 (x793 64 x357 8)) (x793 64 x357 8)))
(assert (not (x962 (x699 x782 x918))))
(assert (= (or x463 x97) x613))
(assert (x117 x794))
(assert (x117 x557))
(assert (=> (>= 10000 x521) (= (x119 x521) 0)))
(assert (x117 x303))
(assert (x117 x868))
(assert (= x676 (and x709 x613)))
(assert (x117 x332))
(assert (x117 x1176))
(assert (x117 x826))
(assert (x117 x997))
(assert (= x53 (x1171 (x418 x782 x689 x408 x288 x53 x734))))
(assert (= x516 (and (not x402) x883)))
(assert (= (and x1187 (not x263)) x1000))
(assert (= (or x115 x551) x103))
(assert (x560 x720))
(assert (x117 x163))
(assert (x117 x314))
(assert (x117 x355))
(assert (not (x962 (x699 x934 x420))))
(assert (not (x962 (x999 x223 x284 x914 x541 x477))))
(assert (x962 452312848583266388373324160190187140051835877600158453279131187530910662656))
(assert (not (x962 (x793 64 x478 x664))))
(assert (x117 x887))
(assert (= (=> (and (or (and x69 (= (ite x69 1 0) x176)) (and (and (= (x239 1461501637330902918203684832716283019655932542975 x559) x707) (= x559 (x843 x483)) (= (x793 64 x1078 2) x483) (= (ite (= 0 x707) 1 0) x176) (= x1078 (x239 1461501637330902918203684832716283019655932542975 x1128))) (not x69))) (and (= x837 (x239 1461501637330902918203684832716283019655932542975 x1128)) (= (not (> x837 0)) x69))) x907) x592))
(assert (x668 x253 x1075))
(assert (=> (>= 10000 x411) (= 0 (x119 x411))))
(assert (=> (>= 10000 x116) (= 0 (x119 x116))))
(assert (x117 x904))
(assert (x117 x770))
(assert (x117 x301))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x793 x836 x373 x217)))
(assert (x1174 8 (- 32 x186)))
(assert (= (x1171 (x1040 x223 x1186 x521 x522 x312 x1211 x1012 x589)) x312))
(assert (x117 x900))
(assert (< 10000 (x1143 x782 x590 x929 x660)))
(assert (x117 x585))
(assert (= x284 (x340 (x999 x223 x284 x914 x541 x477))))
(assert (not (x962 (x1143 x836 x965 x813 x713))))
(assert (= x964 (or x665 x130)))
(assert (x691 x956))
(assert (x117 x1046))
(assert (= (x644 (x1040 x782 x171 x677 x951 x1008 x1106 x937 x327)) x782))
(assert (= (x706 (x999 x836 x600 x206 x417 x279)) x206))
(assert (x117 x107))
(assert (= (x1171 (x418 x934 x294 x146 x672 x433 x274)) x433))
(assert (= (x644 (x793 x934 x31 x984)) x934))
(assert (= (x644 (x26 x223 x952 x498 x204 x921 x764 x650)) x223))
(assert (=> (>= 10000 x813) (= (x119 x813) 0)))
(assert (= (and x538 (not x1125)) x457))
(assert (x117 x766))
(assert (= (x119 115792089210356248756420345214020892766250353992003419616917011526809519390720) 0))
(assert (= x782 (x644 (x999 x782 x959 x893 x874 x545))))
(assert (< (x418 x782 x689 x408 x288 x53 x734) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x117 x202))
(assert (x117 x952))
(assert (x117 x1188))
(assert (x117 x1140))
(assert (x683 x873 x519))
(assert (x117 x39))
(assert (= (x340 (x1040 x782 x171 x677 x951 x1008 x1106 x937 x327)) x171))
(assert (= (x706 (x1143 x817 x127 x1103 x608)) x1103))
(assert (= (=> (and (and (= (x798 x910) x401) (= x830 (x974 x1152)) (= (x474 (+ 32 x57)) x868) (not (= x910 115792089237316195423570985008687907853269984665640564039457584007913129639836)) (<= 1 x144) (<= x252 4294967295) (<= x910 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= (x239 26959946667150639794667015087019630673637144422540572481103610249215 x830) x298) (= (<= x352 (x1007 x651)) x222) (= x229 (x398 0)) (= x982 (= x252 0)) (< x910 x978) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639836 x910)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639836 x910)) (<= x910 115792089237316195423570985008687907853269984665640564039457584007913129639934) x1091 (= (x195 x651) x352) (<= x910 115792089237316195423570985008687907853269984665640564039457584007913129639934) x222 (= x57 (x474 (+ 36 x910))) (= x278 (x306 (- x978 x910))) (= (x306 (- x662 10000)) x379) (= (x195 x510) x391) (= (x474 (+ x910 32)) x1152) (= (x306 (- x278 32)) x795) (= x1091 (= x391 (x1007 x510))) (= (x474 (+ x868 32)) x978) (= (+ 76450787359836037641860180984291677749980919077056822294353438043884394381312 x298) x7)) (or (and x982 (= x1185 x144)) (and (not x982) (and (= x252 32) (= 1 x1185) (<= 1 x229))))) x597) x731))
(assert (=> (<= x650 10000) (= (x119 x650) 0)))
(assert (x117 x132))
(assert (x117 x1012))
(assert (x117 x297))
(assert (= (x180 (x418 x934 x294 x146 x672 x433 x274)) x672))
(assert (= 0 (x119 1786122754)))
(assert (x117 x9))
(assert (= x929 (x706 (x1143 x782 x590 x929 x660))))
(assert (not (x962 (x793 x934 x31 x984))))
(assert (= (x819 (x418 x223 x362 x704 x687 x192 x842)) x842))
(assert (x117 x795))
(assert (x117 x245))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x699 x223 x906)))
(assert (x962 4294967295))
(assert (not (x962 (x999 x817 x411 x619 x831 x170))))
(assert (x117 x13))
(assert (x560 64))
(assert (x117 x133))
(assert (=> (>= 10000 x288) (= (x119 x288) 0)))
(assert (= x112 (x706 (x1040 x934 x1147 x112 x625 x694 x729 x696 x877))))
(assert (=> (>= 10000 x694) (= (x119 x694) 0)))
(assert (=> (>= 10000 x1147) (= (x119 x1147) 0)))
(assert (x117 x176))
(assert (x117 x914))
(assert (=> (<= x545 10000) (= (x119 x545) 0)))
(assert (> (x26 x934 x1140 x1132 x48 x612 x11 x820) 10000))
(assert (x117 x1074))
(assert (x117 x858))
(assert (= (x644 (x793 x223 x1163 x1097)) x223))
(assert (= x115 (and (not x622) x728)))
(assert (x745 (+ 31 x350)))
(assert (= x665 (or x461 x442 x676)))
(assert (= 0 (x119 4294967296)))
(assert (x117 x1048))
(assert (x117 x1146))
(assert (= (x644 (x1143 x817 x127 x1103 x608)) x817))
(assert (x117 x160))
(assert (x117 x519))
(assert (x117 x863))
(assert (x668 x480 x1173))
(assert (=> (>= 10000 x376) (= 0 (x119 x376))))
(assert (x691 1461501637330902918203684832716283019655932542976))
(assert (= (x838 (x1040 x836 x876 x436 x1028 x1002 x116 x314 x744)) x314))
(assert (x117 x704))
(assert (=> (>= 10000 x729) (= (x119 x729) 0)))
(assert (=> (<= x1140 10000) (= 0 (x119 x1140))))
(assert (x117 x370))
(assert (x962 115792089210356248756420345214020892766250353992003419616917011526809519390720))
(assert (= (x119 (x793 x836 x373 x217)) (x793 x836 x373 x217)))
(assert (= (x644 (x1143 x223 x44 x806 x575)) x223))
(assert (= x928 (=> (and (<= 1 x78) (= (x500 x651) x13) (= (>= (x386 x651) x13) x1030) (<= 1 x515) (= x938 (= (x386 x235) x852)) x938 (<= x1196 4294967295) (= x78 (x811 x235)) (= x852 (x500 x235)) (= x106 (x306 (- x1034 x993))) x1030) x50)))
(assert (x117 x929))
(assert (x117 x820))
(assert (x117 x741))
(assert (x117 x89))
(assert (= (x180 (x26 x782 x603 x1155 x120 x435 x756 x771)) x120))
(assert (x344 x956 32))
(assert (= (and x587 (not x451)) x1011))
(assert (x117 x321))
(assert (x117 x1210))
(assert (= x247 (and (not x504) x484)))
(assert (= (x119 452312848583266388373324160190187140051835877600158453279131187530910662656) 0))
(assert (= (x706 (x793 x934 x31 x984)) x984))
(assert (x428 x267))
(assert (= x959 (x340 (x999 x782 x959 x893 x874 x545))))
(assert (x117 x7))
(assert (x117 x1054))
(assert (x117 x1075))
(assert (=> (<= x18 10000) (= 0 (x119 x18))))
(assert (= (x119 (x793 64 x1078 2)) (x793 64 x1078 2)))
(assert (x117 x90))
(assert (x117 x84))
(assert (x117 x663))
(assert (x117 x223))
(assert (x117 x78))
(assert (= x116 (x819 (x1040 x836 x876 x436 x1028 x1002 x116 x314 x744))))
(assert (=> (>= 10000 x817) (= (x119 x817) 0)))
(assert (x117 x1175))
(assert (x117 x1072))
(assert (=> (>= 10000 x1195) (= 0 (x119 x1195))))
(assert (x117 x75))
(assert (x117 x501))
(assert (=> (<= x590 10000) (= (x119 x590) 0)))
(assert (x117 x167))
(assert (x117 x338))
(assert (x43 x830))
(assert (x117 x729))
(assert (x117 x214))
(assert (x117 x651))
(assert (x117 x288))
(assert (=> (>= 10000 x146) (= 0 (x119 x146))))
(assert (= x1083 (x819 (x26 x836 x2 x550 x376 x563 x1083 x569))))
(assert (= (x119 11430537079145650693387304458692941425836787954612963690241153482819318579200) 0))
(assert (= (x180 (x418 x782 x689 x408 x288 x53 x734)) x288))
(assert (= x150 (and x964 x602)))
(assert (x117 x464))
(assert (=> (>= 10000 x820) (= 0 (x119 x820))))
(assert (x80 x1016))
(assert (x117 x717))
(assert (x117 x231))
(assert (x117 x1152))
(assert (x117 x1158))
(assert (=> (<= x477 10000) (= 0 (x119 x477))))
(assert (x117 x38))
(assert (=> (>= 10000 x1106) (= (x119 x1106) 0)))
(assert (= x228 true))
(assert (x560 8))
(assert (x117 x1181))
(assert (x117 x405))
(assert (x117 x388))
(assert (= (x119 (x793 64 x478 x664)) (x793 64 x478 x664)))
(assert (< 10000 (x793 64 x478 x664)))
(assert (x117 x357))
(assert (x80 x1128))
(assert (x117 x771))
(assert (= x236 (x706 (x26 x817 x627 x236 x632 x714 x685 x737))))
(assert (x117 x403))
(assert (=> (<= x1008 10000) (= 0 (x119 x1008))))
(assert (not (x962 (x418 x223 x362 x704 x687 x192 x842))))
(assert (x102 x1128))
(assert (= (x706 (x1040 x836 x876 x436 x1028 x1002 x116 x314 x744)) x436))
(assert (x117 x569))
(assert (x117 x441))
(assert (= (x180 (x1143 x223 x44 x806 x575)) x575))
(assert (x1174 64 x1122))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x999 x782 x959 x893 x874 x545)))
(assert (x560 1))
(assert (x117 x552))
(assert (x117 x118))
(assert (x117 x579))
(assert (x117 x77))
(assert (x117 x460))
(assert (< (x26 x836 x2 x550 x376 x563 x1083 x569) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (=> (>= 10000 x1163) (= (x119 x1163) 0)))
(assert (x117 x836))
(assert (= x408 (x706 (x418 x782 x689 x408 x288 x53 x734))))
(assert (= x968 (or x757 x574)))
(assert (= (x340 (x1143 x817 x127 x1103 x608)) x127))
(assert (x117 x897))
(assert (= (or x197 x367) x251))
(assert (= x836 (x644 (x793 x836 x373 x217))))
(assert (x102 x1055))
(assert (= x640 (or x194 x570)))
(assert (=> (<= x631 10000) (= 0 (x119 x631))))
(assert (x117 x555))
(assert (x117 x1173))
(assert (x117 x1083))
(assert (= (x340 (x999 x934 x955 x969 x240 x552)) x955))
(assert (x117 x726))
(assert (not (x962 (x399 0))))
(assert (x117 x235))
(assert (=> (>= 10000 x73) (= (x119 x73) 0)))
(assert (=> (<= x831 10000) (= 0 (x119 x831))))
(assert (= (and x789 x489) x475))
(assert (x117 x666))
(assert (x117 x149))
(assert (x962 33528237782592280163068556224972516439282563014722366175641814928123294921928))
(assert (= (=> (and (and (= x316 (x195 x178)) (<= x341 4294967295) (<= x511 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x324 x651) x557) (<= 0 x511) (= (= (x1116 x178) x1061) x466) x544 (= (+ x657 x161) x511) (= (x129 x178) x161) x466 (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x657 x161)) (>= x1051 1) (= (x195 x651) x1114) (>= x1114 x657) (= x788 (x195 x651)) (= (= 0 x341) x113) (= x544 (<= x557 (x1116 x651))) (= x888 (- x788 x657)) (< (+ x657 x316) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (x324 x178) x1061) (= x337 x511) (= 0 x663)) (or (and (= x910 x621) x113) (and (and (> x1046 x910) (= x621 x1046) (= x388 (x239 115792089237316195423570985008687907853269984665640564039457584007913129639904 x513)) (>= x1046 1) (= x1046 (x474 (+ x388 x910))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x910) (<= x910 115792089237316195423570985008687907853269984665640564039457584007913129639934) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x910) (= (+ 63 x341) x513) (= x936 (x474 (+ x910 32)))) (not x113)))) x1178) x482))
(assert (=> (<= x125 10000) (= 0 (x119 x125))))
(assert (x117 x379))
(assert (> (x793 64 x357 8) 10000))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x699 x817 x1071)))
(assert (x117 x430))
(assert (x117 x608))
(assert (not (x962 (x1040 x782 x171 x677 x951 x1008 x1106 x937 x327))))
(assert (= (x618 x620 452312848583266388373324160190187140051835877600158453279131187530910662656) (x945 x620 248)))
(assert (x117 x351))
(assert (= (x797 (x1040 x836 x876 x436 x1028 x1002 x116 x314 x744)) x744))
(assert (x117 x933))
(assert (= (x706 (x1040 x817 x871 x693 x912 x1181 x1179 x535 x1094)) x693))
(assert (x117 x479))
(assert (x80 x253))
(assert (x117 x139))
(assert (= x589 (x797 (x1040 x223 x1186 x521 x522 x312 x1211 x1012 x589))))
(assert (x117 x1003))
(assert (= x505 (and x1177 x150)))
(assert (not (x962 (x1040 x223 x1186 x521 x522 x312 x1211 x1012 x589))))
(assert (x344 x1017 256))
(assert (= (x119 (x1040 x817 x871 x693 x912 x1181 x1179 x535 x1094)) (x1040 x817 x871 x693 x912 x1181 x1179 x535 x1094)))
(assert (x117 x545))
(assert (x499 x620 452312848583266388373324160190187140051835877600158453279131187530910662656))
(assert (x117 x1020))
(assert (x117 x732))
(assert (=> (<= x498 10000) (= 0 (x119 x498))))
(assert (x117 x915))
(assert (< 10000 (x418 x934 x294 x146 x672 x433 x274)))
(assert (x117 x816))
(assert (x117 x123))
(assert (x117 x830))
(assert (x1174 32 x35))
(assert (x117 x842))
(assert (x117 x1110))
(assert (=> (<= x1132 10000) (= (x119 x1132) 0)))
(assert (= (x706 (x418 x934 x294 x146 x672 x433 x274)) x146))
(assert (x117 x532))
(assert (= x619 (x706 (x999 x817 x411 x619 x831 x170))))
(assert (x117 x614))
(assert (=> (>= 10000 x704) (= 0 (x119 x704))))
(assert (x117 x737))
(assert (x962 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (=> (>= 10000 x541) (= 0 (x119 x541))))
(assert (= x197 (and x215 x761)))
(assert (x117 x901))
(assert (= x21 (and x96 x177)))
(assert (x691 x1017))
(assert (not (x962 (x999 x934 x955 x969 x240 x552))))
(assert (x117 x62))
(assert (= (x706 (x26 x836 x2 x550 x376 x563 x1083 x569)) x550))
(assert (x117 x422))
(assert (= x638 (and (not x429) x1014)))
(assert (x117 x1051))
(assert (x117 x912))
(assert (x80 x1173))
(assert (x117 x1077))
(assert (< 10000 (x793 x817 x165 x356)))
(assert (= (and x224 (not x285)) x1109))
(assert (x117 x217))
(assert (x691 26959946667150639794667015087019630673637144422540572481103610249216))
(assert (= x362 (x340 (x418 x223 x362 x704 x687 x192 x842))))
(assert (x117 x391))
(assert (x117 x286))
(assert (=> (>= 10000 x995) (= (x119 x995) 0)))
(assert (= x556 (and (not x113) x251)))
(assert (x80 x1055))
(assert (= x893 (x706 (x999 x782 x959 x893 x874 x545))))
(assert (=> (<= x223 10000) (= (x119 x223) 0)))
(assert (x691 (ite (< (* (- 32 x47) 8) 256) (x727 2 (* (- 32 x47) 8)) 0)))
(assert (x117 x158))
(assert (x117 x744))
(assert (=> (<= x608 10000) (= 0 (x119 x608))))
(assert (= (or x609 x475) x538))
(assert (= (x340 (x793 x836 x373 x217)) x373))
(assert (x691 x887))
(assert (=> (>= 10000 x660) (= (x119 x660) 0)))
(assert (x80 x887))
(assert (x117 x27))
(assert (x117 x275))
(assert (< 10000 (x793 x934 x31 x984)))
(assert (x117 x423))
(assert (x1174 8 (- 32 x47)))
(assert (=> (>= 10000 x595) (= (x119 x595) 0)))
(assert (x117 x537))
(assert (= (x180 (x418 x817 x524 x577 x1195 x151 x595)) x1195))
(assert (= x934 (x644 (x999 x934 x955 x969 x240 x552))))
(assert (=> (<= x312 10000) (= 0 (x119 x312))))
(assert (x117 x514))
(assert (=> (<= x918 10000) (= 0 (x119 x918))))
(assert (x117 x631))
(assert (= (=> (and (= x183 x1016) (= x422 x503)) x923) x450))
(assert (= x410 (and x580 (not x571))))
(assert (x573 x143))
(assert (x117 x751))
(assert (x428 x252))
(assert (= x952 (x340 (x26 x223 x952 x498 x204 x921 x764 x650))))
(assert (x117 x290))
(assert (x117 x634))
(assert (x117 x536))
(assert (> (x699 x934 x420) 10000))
(assert (x344 x887 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= x409 (or x141 x562)))
(assert (=> (<= x575 10000) (= 0 (x119 x575))))
(assert (not (x962 (x793 x817 x165 x356))))
(assert (x117 x424))
(assert (x962 115792089237316195423570985008687907853269984665640564039457584007913129639838))
(assert (not (x962 (x793 64 x1078 2))))
(assert (x117 x1163))
(assert (=> (>= 10000 x756) (= 0 (x119 x756))))
(assert (x117 x893))
(assert (= x473 (and x449 x41)))
(assert (x117 x539))
(assert (x117 x1122))
(assert (x117 x1193))
(assert (< (x793 64 x1078 2) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (x838 (x1040 x817 x871 x693 x912 x1181 x1179 x535 x1094)) x535))
(assert (> (x1143 x836 x965 x813 x713) 10000))
(assert (x117 x1150))
(assert (x117 x362))
(assert (x117 x234))
(assert (= 0 (x119 4294967295)))
(assert (x428 x1196))
(assert (x117 x208))
(assert (= (x119 (x418 x836 x18 x639 x631 x147 x1198)) (x418 x836 x18 x639 x631 x147 x1198)))
(assert (x117 x934))
(assert (= (x838 (x26 x782 x603 x1155 x120 x435 x756 x771)) x771))
(assert (=> (>= 10000 x771) (= (x119 x771) 0)))
(assert (=> (>= 10000 x851) (= 0 (x119 x851))))
(assert (=> (<= x979 10000) (= 0 (x119 x979))))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x418 x836 x18 x639 x631 x147 x1198)))
(assert (x117 x469))
(assert (x117 x521))
(assert (x80 x132))
(assert (= x1211 (x819 (x1040 x223 x1186 x521 x522 x312 x1211 x1012 x589))))
(assert (x344 x132 1461501637330902918203684832716283019655932542976))
(assert (= x1198 (x819 (x418 x836 x18 x639 x631 x147 x1198))))
(assert (x80 1461501637330902918203684832716283019655932542975))
(assert (= x590 (x340 (x1143 x782 x590 x929 x660))))
(assert (x117 x1185))
(assert (x117 x1))
(assert (= x8 (and x429 x1014)))
(assert (x117 x497))
(assert (x691 x1158))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x1143 x836 x965 x813 x713)))
(assert (= (and x571 x580) x58))
(assert (x80 x480))
(assert (x102 x132))
(assert (not (x962 (x418 x782 x689 x408 x288 x53 x734))))
(assert (> (x418 x223 x362 x704 x687 x192 x842) 10000))
(assert (x117 x688))
(assert (= (x180 (x999 x782 x959 x893 x874 x545)) x874))
(assert (x117 x670))
(assert (x117 x281))
(assert (x691 x1055))
(assert (x117 x777))
(assert (= (x119 11307821214581659709333104004754678501295896940003961331978279688272766566400) 0))
(assert (x117 x11))
(assert (x117 x140))
(assert (= (x119 (x699 x782 x918)) (x699 x782 x918)))
(assert (< 10000 (x793 x223 x1163 x1097)))
(assert (x117 x650))
(assert (x117 x204))
(assert (< (x793 x223 x1163 x1097) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x80 255))
(assert (< 10000 (x699 x223 x906)))
(assert (x80 x1017))
(assert (= (and x58 (not x237)) x598))
(assert (=> (<= x713 10000) (= 0 (x119 x713))))
(assert (= 0 (x119 26959946667150639794667015087019630673637144422540572481103610249215)))
(assert (= x348 (=> (= x1118 x1006) x153)))
(assert (x117 x339))
(assert (x573 x846))
(assert (= x512 (and x462 (not x69))))
(assert (x117 x667))
(assert (x117 x212))
(assert (= (and x451 x587) x787))
(assert (= x376 (x180 (x26 x836 x2 x550 x376 x563 x1083 x569))))
(assert (=> (>= 10000 x274) (= (x119 x274) 0)))
(assert (= x1012 (x838 (x1040 x223 x1186 x521 x522 x312 x1211 x1012 x589))))
(assert (=> (<= x589 10000) (= 0 (x119 x589))))
(assert (= (x1143 x782 x590 x929 x660) (x119 (x1143 x782 x590 x929 x660))))
(assert (x80 x513))
(assert (< 10000 (x793 x782 x59 x27)))
(assert (x117 x1026))
(assert (= x1002 (x1171 (x1040 x836 x876 x436 x1028 x1002 x116 x314 x744))))
(assert (x117 x860))
(assert (x691 x1170))
(assert (= x1008 (x1171 (x1040 x782 x171 x677 x951 x1008 x1106 x937 x327))))
(assert (=> (>= 10000 x914) (= (x119 x914) 0)))
(assert (= x296 (=> (and (and (= x873 (x474 (+ x302 x351))) (not (>= (+ x302 x351) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x215 (= 0 x873))) (or (and (not x215) (and (>= x873 1) (< (x1215 x873 x519) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x991 (x271 (x1215 x873 x519))) (= x991 x657))) (and x215 (= x657 0)))) x482)))
(assert (=> (<= x420 10000) (= 0 (x119 x420))))
(assert (x117 x240))
(assert (= (x838 (x26 x223 x952 x498 x204 x921 x764 x650)) x650))
(assert (= x756 (x819 (x26 x782 x603 x1155 x120 x435 x756 x771))))
(assert (x428 x579))
(assert (= (x119 33528237782592280163068556224972516439282563014722366175641814928123294921928) 0))
(assert (= x177 (or x247 x434 x1109 x152 x383)))
(assert (= (x340 (x26 x836 x2 x550 x376 x563 x1083 x569)) x2))
(assert (x962 115792089237316195423570985008687907853269984665640564039457584007913129639836))
(assert (x117 x792))
(assert (=> (<= x600 10000) (= (x119 x600) 0)))
(assert (=> (>= 10000 x235) (= 0 (x119 x235))))
(assert (= x1179 (x819 (x1040 x817 x871 x693 x912 x1181 x1179 x535 x1094))))
(assert (x962 57896044618658097711785492504343953926634992332820282019728792003956564819967))
(assert (x117 x67))
(assert (x560 (- 32 x47)))
(assert (= (x706 (x793 x223 x1163 x1097)) x1097))
(assert (= (and x251 x113) x692))
(assert (= (x797 (x1040 x782 x171 x677 x951 x1008 x1106 x937 x327)) x327))
(assert (= (and x540 (not x1049)) x383))
(assert (= (x119 115792089237316195423570985008687907853269984665640564039457584007913129639935) 0))
(assert (> (x999 x223 x284 x914 x541 x477) 10000))
(assert (= (x644 (x26 x836 x2 x550 x376 x563 x1083 x569)) x836))
(assert (= (x644 (x1040 x836 x876 x436 x1028 x1002 x116 x314 x744)) x836))
(assert (= (x706 (x418 x223 x362 x704 x687 x192 x842)) x704))
(assert (=> (>= 10000 x696) (= (x119 x696) 0)))
(assert (x117 x34))
(assert (x745 x620))
(assert (x117 x738))
(assert (< 10000 (x26 x836 x2 x550 x376 x563 x1083 x569)))
(assert (x117 x327))
(assert (= (x999 x836 x600 x206 x417 x279) (x119 (x999 x836 x600 x206 x417 x279))))
(assert (=> (>= 10000 x112) (= 0 (x119 x112))))
(assert (x117 x147))
(assert (=> (<= x11 10000) (= (x119 x11) 0)))
(assert (x117 x106))
(assert (x117 x179))
(assert (> (x793 64 x1078 2) 10000))
(assert (x117 x353))
(assert (x117 x682))
(assert (x117 x784))
(assert (x117 x230))
(assert (x117 x436))
(assert (x962 11307821214581659709333104004754678501295896940003961331978279688272766566400))
(assert x1010)
(assert (x117 x76))
(assert (= (x1040 x934 x1147 x112 x625 x694 x729 x696 x877) (x119 (x1040 x934 x1147 x112 x625 x694 x729 x696 x877))))
(assert (x117 x950))
(assert (= 0 (x119 115792089237316195423570985008687907853269984665640564039457584007913129639836)))
(assert (x117 x509))
(assert (=> (<= x782 10000) (= 0 (x119 x782))))
(assert (x1174 1 (x727 2 (* (- 32 x47) 8))))
(assert (= (x644 (x26 x782 x603 x1155 x120 x435 x756 x771)) x782))
(assert (x117 x660))
(assert (x117 x412))
(assert (= (or x512 x949) x1060))
(assert (< (x699 x782 x918) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= x934 (x644 (x26 x934 x1140 x1132 x48 x612 x11 x820))))
(assert (x117 x515))
(assert (= (=> (and (or (and (and (= x74 (x879 x651)) (= x792 (x1212 x412)) (>= x810 0) (= x529 x810) (= x65 x1118) (< (+ x74 x1019) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= x810 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x755 (- x792 x1019)) (= x1019 (ite (= 0 x65) x832 0)) (= (+ x1019 x74) x810)) x709) (and (= x65 x1118) (not x709))) (= (= x65 0) x709)) x348) x554))
(assert (x117 x1126))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x1040 x934 x1147 x112 x625 x694 x729 x696 x877)))
(assert (=> (<= x510 10000) (= (x119 x510) 0)))
(assert (= (x119 53345939417071456220559631604471678769232717410092326094220293271952667181056) 0))
(assert (= x965 (x340 (x1143 x836 x965 x813 x713))))
(assert (= (x119 (x699 x934 x420)) (x699 x934 x420)))
(assert (x117 x743))
(assert (= x949 (and x462 x69)))
(assert (x117 x433))
(assert (= x204 (x180 (x26 x223 x952 x498 x204 x921 x764 x650))))
(assert (=> (>= 10000 x955) (= 0 (x119 x955))))
(assert (> (x1040 x782 x171 x677 x951 x1008 x1106 x937 x327) 10000))
(assert (= (x644 (x1040 x817 x871 x693 x912 x1181 x1179 x535 x1094)) x817))
(assert (= (x1171 (x26 x817 x627 x236 x632 x714 x685 x737)) x714))
(assert (= x66 (=> (and (= x594 x726) (= x317 x1013)) x134)))
(assert (x117 x617))
(assert (= x357 (x340 (x793 64 x357 8))))
(assert (x117 x837))
(assert (x560 (x727 2 (* 8 (- 32 x186)))))
(assert (= (and x58 x237) x1187))
(assert (= x191 (or x1000 x410 x598 x654 x473)))
(assert (x117 x420))
(assert (= (x644 (x418 x817 x524 x577 x1195 x151 x595)) x817))
(assert (= (x706 (x418 x836 x18 x639 x631 x147 x1198)) x639))
(assert (x117 x87))
(assert (x117 x1204))
(assert (x117 x154))
(assert (x117 x1195))
(assert (=> (>= 10000 x612) (= 0 (x119 x612))))
(assert (x117 x1107))
(assert (=> (>= 10000 x959) (= 0 (x119 x959))))
(assert (x117 x639))
(assert (= x478 (x340 (x793 64 x478 x664))))
(assert (x691 x1016))
(assert (x117 x148))
(assert (x117 x550))
(assert (x117 x508))
(assert (= (x119 (x793 x817 x165 x356)) (x793 x817 x165 x356)))
(assert (x117 x689))
(assert (x117 x600))
(assert (= (x340 (x1040 x836 x876 x436 x1028 x1002 x116 x314 x744)) x876))
(assert (x117 x71))
(assert (=> (>= 10000 x362) (= (x119 x362) 0)))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x699 x934 x420)))
(assert (= (x644 (x699 x782 x918)) x782))
(assert (x372 x1170))
(assert (< (x26 x934 x1140 x1132 x48 x612 x11 x820) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x117 x1159))
(assert (= (or x258 x266) x489))
(assert (x344 x559 1461501637330902918203684832716283019655932542976))
(assert (= x642 (and x1133 x1004)))
(assert (x117 x487))
(assert (x560 32))
(assert (=> (>= 10000 x619) (= (x119 x619) 0)))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x999 x817 x411 x619 x831 x170)))
(assert (x102 x1016))
(assert (x117 x503))
(assert (= x461 (and x100 (not x1015))))
(assert (not (x962 (x26 x836 x2 x550 x376 x563 x1083 x569))))
(assert (x117 x435))
(assert (x117 x873))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x1143 x223 x44 x806 x575)))
(assert (=> (<= x417 10000) (= (x119 x417) 0)))
(assert true)
(assert (x117 x1027))
(assert (x117 x1168))
(assert (x117 x1076))
(assert (= x687 (x180 (x418 x223 x362 x704 x687 x192 x842))))
(assert (x117 x1131))
(assert (x117 x874))
(assert (x117 x419))
(assert (x117 x116))
(assert (not (x962 (x1143 x223 x44 x806 x575))))
(assert (= (or x642 x42) x570))
(assert (= x38 (x340 (x1143 x934 x38 x897 x230))))
(assert (= x1207 (or x692 x556)))
(assert (x117 x120))
(assert (x117 x1071))
(assert (x117 x647))
(assert (= (x119 (x793 x782 x59 x27)) (x793 x782 x59 x27)))
(assert (x428 x313))
(assert (= x417 (x180 (x999 x836 x600 x206 x417 x279))))
(assert (x80 31))
(assert (x117 x1079))
(assert (=> (<= x240 10000) (= 0 (x119 x240))))
(assert (x117 x205))
(assert (x117 x1008))
(assert (= (x119 (x699 x223 x906)) (x699 x223 x906)))
(assert (=> (<= x314 10000) (= (x119 x314) 0)))
(assert (= x713 (x180 (x1143 x836 x965 x813 x713))))
(assert (> (x999 x817 x411 x619 x831 x170) 10000))
(assert (x117 x127))
(assert (= x719 (=> (= (= 0 x510) x558) (and (=> (and x558 (and (or (and (not x402) (= x555 x519)) (and (= x519 x863) x402)) (= x402 (> x555 x863)))) x296) (=> (and (and (and (= (x474 (+ x302 x351)) x641) (= (= x641 0) x429) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x302 x351)))) (or (and (= x71 0) x429) (and (and (>= x641 1) (= x1027 (x271 (x1215 x641 x863))) (= x71 x1027) (< (x1215 x641 x863) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (not x429)))) (not x558)) x731)))))
(assert (x117 x53))
(assert (x117 x584))
(assert (x117 x853))
(assert (x117 x905))
(assert (x560 x863))
(assert (x117 x785))
(assert (x117 x700))
(assert (x117 x1121))
(assert (x117 x23))
(assert (x117 x620))
(assert (x962 76450787359836037641860180984291677749980919077056822294353438043884394381312))
(assert (=> (>= 10000 x693) (= 0 (x119 x693))))
(assert (> (x26 x817 x627 x236 x632 x714 x685 x737) 10000))
(assert (x117 x959))
(assert (= x813 (x706 (x1143 x836 x965 x813 x713))))
(assert (x117 x401))
(assert (x117 x493))
(assert (x117 x156))
(assert (= 0 (x119 32523383700587834770323112271211932718128200013265661849047136999858837557784)))
(assert (x117 x35))
(assert (x962 66559029714281558484110900056217435723262332508534932952963113331629997686784))
(assert (x117 x1013))
(assert (= x414 (=> (and (or (and (= x614 x858) x96) (and (not x96) (and (= x254 (x306 (- x614 x186))) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1107) x480) (= x89 (x239 x480 x1173)) (= x1107 (x306 (- (mod (x637 1 (* (- 32 x186) 8)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1))) (= (x404 x254) x1173) (= (x474 (+ x254 32)) x1072) (= x858 x1072)))) (and (= x186 (x239 31 x956)) (= x96 (= x186 0)) (= x614 (x474 (+ x770 x956))))) x1165)))
(assert (x117 x157))
(assert (not (x962 (x793 x782 x59 x27))))
(assert (= x577 (x706 (x418 x817 x524 x577 x1195 x151 x595))))
(assert (= x100 (and (not x182) x968)))
(assert (= x1155 (x706 (x26 x782 x603 x1155 x120 x435 x756 x771))))
(assert (x117 x969))
(assert (x117 x856))
(assert (x117 x720))
(assert (= (and x964 (not x602)) x266))
(assert (= (x340 (x26 x782 x603 x1155 x120 x435 x756 x771)) x603))
(assert (x117 x1205))
(assert (x117 x559))
(assert (= (x644 (x699 x817 x1071)) x817))
(assert (x80 115792089210356248756420345214020892766250353992003419616917011526809519390720))
(assert (x117 x283))
(assert (< (x793 x934 x31 x984) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (x706 (x26 x934 x1140 x1132 x48 x612 x11 x820)) x1132))
(assert (= (x797 (x1040 x817 x871 x693 x912 x1181 x1179 x535 x1094)) x1094))
(assert (x117 x844))
(assert (x117 x480))
(assert (x117 x851))
(assert (= (x644 (x1143 x934 x38 x897 x230)) x934))
(assert (x117 x524))
(assert (x117 x702))
(assert (and (= 158456325028528675187087900672 (x727 2 97)) (= 374144419156711147060143317175368453031918731001856 (x727 2 168)) (= 166153499473114484112975882535043072 (x727 2 117)) (= 89202980794122492566142873090593446023921664 (x727 2 146)) (= (x727 2 2) 4) (= (x727 2 38) 274877906944) (= (x727 2 140) 1393796574908163946345982392040522594123776) (= 174224571863520493293247799005065324265472 (x727 2 137)) (= 8796093022208 (x727 2 43)) (= 11150372599265311570767859136324180752990208 (x727 2 143)) (= 696898287454081973172991196020261297061888 (x727 2 139)) (= 2658455991569831745807614120560689152 (x727 2 121)) (= 4503599627370496 (x727 2 52)) (= 302231454903657293676544 (x727 2 78)) (= (x727 2 116) 83076749736557242056487941267521536) (= 39614081257132168796771975168 (x727 2 95)) (= (x727 2 170) 1496577676626844588240573268701473812127674924007424) (= 5986310706507378352962293074805895248510699696029696 (x727 2 172)) (= (x727 2 242) 7067388259113537318333190002971674063309935587502475832486424805170479104) (= (x727 2 1) 2) (= (x727 2 133) 10889035741470030830827987437816582766592) (= 49039857307708443467467104868809893875799651909875269632 (x727 2 185)) (= (x727 2 36) 68719476736) (= 1073741824 (x727 2 30)) (= (x727 2 87) 154742504910672534362390528) (= 536870912 (x727 2 29)) (= 220855883097298041197912187592864814478435487109452369765200775161577472 (x727 2 237)) (= (x727 2 5) 32) (= 2048 (x727 2 11)) (= 1532495540865888858358347027150309183618739122183602176 (x727 2 180)) (= 162259276829213363391578010288128 (x727 2 107)) (= (x727 2 215) 52656145834278593348959013841835216159447547700274555627155488768) (= (x727 2 164) 23384026197294446691258957323460528314494920687616) (= (x727 2 58) 288230376151711744) (= (x727 2 93) 9903520314283042199192993792) (= (x727 2 20) 1048576) (= 73786976294838206464 (x727 2 66)) (= (x727 2 208) 411376139330301510538742295639337626245683966408394965837152256) (= (x727 2 167) 187072209578355573530071658587684226515959365500928) (= 618970019642690137449562112 (x727 2 89)) (= 1606938044258990275541962092341162602522202993782792835301376 (x727 2 200)) (= 5192296858534827628530496329220096 (x727 2 112)) (= (x727 2 91) 2475880078570760549798248448) (= 822752278660603021077484591278675252491367932816789931674304512 (x727 2 209)) (= 134217728 (x727 2 27)) (= 324518553658426726783156020576256 (x727 2 108)) (= 748288838313422294120286634350736906063837462003712 (x727 2 169)) (= (x727 2 231) 3450873173395281893717377931138512726225554486085193277581262111899648) (= (x727 2 102) 5070602400912917605986812821504) (= 730750818665451459101842416358141509827966271488 (x727 2 159)) (= (x727 2 56) 72057594037927936) (= (x727 2 69) 590295810358705651712) (= (x727 2 244) 28269553036454149273332760011886696253239742350009903329945699220681916416) (= (x727 2 115) 41538374868278621028243970633760768) (= 9444732965739290427392 (x727 2 73)) (= (x727 2 9) 512) (= (x727 2 251) 3618502788666131106986593281521497120414687020801267626233049500247285301248) (= (x727 2 111) 2596148429267413814265248164610048) (= 16777216 (x727 2 24)) (= 64 (x727 2 6)) (= (x727 2 71) 2361183241434822606848) (= 140737488355328 (x727 2 47)) (= 904625697166532776746648320380374280103671755200316906558262375061821325312 (x727 2 249)) (= 1024 (x727 2 10)) (= (x727 2 125) 42535295865117307932921825928971026432) (= 8 (x727 2 3)) (= 91343852333181432387730302044767688728495783936 (x727 2 156)) (= (x727 2 165) 46768052394588893382517914646921056628989841375232) (= (x727 2 67) 147573952589676412928) (= (x727 2 22) 4194304) (= 431359146674410236714672241392314090778194310760649159697657763987456 (x727 2 228)) (= 649037107316853453566312041152512 (x727 2 109)) (= (x727 2 120) 1329227995784915872903807060280344576) (= 1099511627776 (x727 2 40)) (= (x727 2 175) 47890485652059026823698344598447161988085597568237568) (= 11417981541647679048466287755595961091061972992 (x727 2 153)) (= (x727 2 196) 100433627766186892221372630771322662657637687111424552206336) (= 93536104789177786765035829293842113257979682750464 (x727 2 166)) (= (x727 2 253) 14474011154664524427946373126085988481658748083205070504932198000989141204992) (= (x727 2 0) 1) (= 45671926166590716193865151022383844364247891968 (x727 2 155)) (= (x727 2 41) 2199023255552) (= (x727 2 152) 5708990770823839524233143877797980545530986496) (= (x727 2 254) 28948022309329048855892746252171976963317496166410141009864396001978282409984) (= (x727 2 255) 57896044618658097711785492504343953926634992332820282019728792003956564819968) (= (x727 2 177) 191561942608236107294793378393788647952342390272950272) (= 766247770432944429179173513575154591809369561091801088 (x727 2 179)) (= (x727 2 203) 12855504354071922204335696738729300820177623950262342682411008) (= (x727 2 94) 19807040628566084398385987584) (= (x727 2 83) 9671406556917033397649408) (= (x727 2 68) 295147905179352825856) (= (x727 2 49) 562949953421312) (= 16 (x727 2 4)) (= (x727 2 136) 87112285931760246646623899502532662132736) (= 22835963083295358096932575511191922182123945984 (x727 2 154)) (= 20282409603651670423947251286016 (x727 2 104)) (= 226156424291633194186662080095093570025917938800079226639565593765455331328 (x727 2 247)) (= (x727 2 178) 383123885216472214589586756787577295904684780545900544) (= 3064991081731777716716694054300618367237478244367204352 (x727 2 181)) (= 340282366920938463463374607431768211456 (x727 2 128)) (= 26959946667150639794667015087019630673637144422540572481103610249216 (x727 2 224)) (= 17592186044416 (x727 2 44)) (= 13164036458569648337239753460458804039861886925068638906788872192 (x727 2 213)) (= 1267650600228229401496703205376 (x727 2 100)) (= (x727 2 57) 144115188075855872) (= (x727 2 135) 43556142965880123323311949751266331066368) (= 21267647932558653966460912964485513216 (x727 2 124)) (= (x727 2 15) 32768) (= 883423532389192164791648750371459257913741948437809479060803100646309888 (x727 2 239)) (= 256 (x727 2 8)) (= 9223372036854775808 (x727 2 63)) (= (x727 2 198) 401734511064747568885490523085290650630550748445698208825344) (= (x727 2 51) 2251799813685248) (= 170141183460469231731687303715884105728 (x727 2 127)) (= (x727 2 62) 4611686018427387904) (= (x727 2 192) 6277101735386680763835789423207666416102355444464034512896) (= (x727 2 199) 803469022129495137770981046170581301261101496891396417650688) (= (x727 2 195) 50216813883093446110686315385661331328818843555712276103168) (= (x727 2 13) 8192) (= 4722366482869645213696 (x727 2 72)) (= (x727 2 142) 5575186299632655785383929568162090376495104) (= 10633823966279326983230456482242756608 (x727 2 123)) (= 18446744073709551616 (x727 2 64)) (= 14134776518227074636666380005943348126619871175004951664972849610340958208 (x727 2 243)) (= 2854495385411919762116571938898990272765493248 (x727 2 151)) (= (x727 2 240) 1766847064778384329583297500742918515827483896875618958121606201292619776) (= 110427941548649020598956093796432407239217743554726184882600387580788736 (x727 2 236)) (= (x727 2 173) 11972621413014756705924586149611790497021399392059392) (= (x727 2 204) 25711008708143844408671393477458601640355247900524685364822016) (= (x727 2 134) 21778071482940061661655974875633165533184) (= 55213970774324510299478046898216203619608871777363092441300193790394368 (x727 2 235)) (= 392318858461667547739736838950479151006397215279002157056 (x727 2 188)) (= (x727 2 26) 67108864) (= (x727 2 221) 3369993333393829974333376885877453834204643052817571560137951281152) (= (x727 2 226) 107839786668602559178668060348078522694548577690162289924414440996864) (= (x727 2 80) 1208925819614629174706176) (= 102844034832575377634685573909834406561420991602098741459288064 (x727 2 206)) (= 281474976710656 (x727 2 48)) (= (x727 2 16) 65536) (= 1725436586697640946858688965569256363112777243042596638790631055949824 (x727 2 230)) (= (x727 2 113) 10384593717069655257060992658440192) (= 1569275433846670190958947355801916604025588861116008628224 (x727 2 190)) (= (x727 2 50) 1125899906842624) (= 85070591730234615865843651857942052864 (x727 2 126)) (= (x727 2 28) 268435456) (= 713623846352979940529142984724747568191373312 (x727 2 149)) (= (x727 2 245) 56539106072908298546665520023773392506479484700019806659891398441363832832) (= (x727 2 183) 12259964326927110866866776217202473468949912977468817408) (= (x727 2 138) 348449143727040986586495598010130648530944) (= 5316911983139663491615228241121378304 (x727 2 122)) (= 13479973333575319897333507543509815336818572211270286240551805124608 (x727 2 223)) (= 862718293348820473429344482784628181556388621521298319395315527974912 (x727 2 229)) (= (x727 2 232) 6901746346790563787434755862277025452451108972170386555162524223799296) (= (x727 2 187) 196159429230833773869868419475239575503198607639501078528) (= 17179869184 (x727 2 34)) (= (x727 2 21) 2097152) (= 38685626227668133590597632 (x727 2 85)) (= 8388608 (x727 2 23)) (= 316912650057057350374175801344 (x727 2 98)) (= 18889465931478580854784 (x727 2 74)) (= 81129638414606681695789005144064 (x727 2 106)) (= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x727 2 256)) (= (x727 2 90) 1237940039285380274899124224) (= (x727 2 33) 8589934592) (= 1152921504606846976 (x727 2 60)) (= (x727 2 212) 6582018229284824168619876730229402019930943462534319453394436096) (= (x727 2 144) 22300745198530623141535718272648361505980416) (= 4835703278458516698824704 (x727 2 82)) (= (x727 2 75) 37778931862957161709568) (= 5444517870735015415413993718908291383296 (x727 2 132)) (= (x727 2 118) 332306998946228968225951765070086144) (= (x727 2 35) 34359738368) (= (x727 2 252) 7237005577332262213973186563042994240829374041602535252466099000494570602496) (= 2417851639229258349412352 (x727 2 81)) (= (x727 2 160) 1461501637330902918203684832716283019655932542976) (= (x727 2 141) 2787593149816327892691964784081045188247552) (= (x727 2 103) 10141204801825835211973625643008) (= 576460752303423488 (x727 2 59)) (= (x727 2 131) 2722258935367507707706996859454145691648) (= 549755813888 (x727 2 39)) (= 23945242826029513411849172299223580994042798784118784 (x727 2 174)) (= (x727 2 7) 128) (= 1361129467683753853853498429727072845824 (x727 2 130)) (= (x727 2 114) 20769187434139310514121985316880384) (= (x727 2 238) 441711766194596082395824375185729628956870974218904739530401550323154944) (= (x727 2 18) 262144) (= 200867255532373784442745261542645325315275374222849104412672 (x727 2 197)) (= 842498333348457493583344221469363458551160763204392890034487820288 (x727 2 219)) (= 2305843009213693952 (x727 2 61)) (= (x727 2 25) 33554432) (= (x727 2 54) 18014398509481984) (= 182687704666362864775460604089535377456991567872 (x727 2 157)) (= (x727 2 92) 4951760157141521099596496896) (= (x727 2 193) 12554203470773361527671578846415332832204710888928069025792) (= (x727 2 17) 131072) (= 27606985387162255149739023449108101809804435888681546220650096895197184 (x727 2 234)) (= 3213876088517980551083924184682325205044405987565585670602752 (x727 2 201)) (= 151115727451828646838272 (x727 2 77)) (= 75557863725914323419136 (x727 2 76)) (= 11692013098647223345629478661730264157247460343808 (x727 2 163)) (= (x727 2 186) 98079714615416886934934209737619787751599303819750539264) (= 44601490397061246283071436545296723011960832 (x727 2 145)) (= 3138550867693340381917894711603833208051177722232017256448 (x727 2 191)) (= (x727 2 216) 105312291668557186697918027683670432318895095400549111254310977536) (= (x727 2 211) 3291009114642412084309938365114701009965471731267159726697218048) (= (x727 2 184) 24519928653854221733733552434404946937899825954937634816) (= 26328072917139296674479506920917608079723773850137277813577744384 (x727 2 214)) (= (x727 2 129) 680564733841876926926749214863536422912) (= 1684996666696914987166688442938726917102321526408785780068975640576 (x727 2 220)) (= 2923003274661805836407369665432566039311865085952 (x727 2 161)) (= 452312848583266388373324160190187140051835877600158453279131187530910662656 (x727 2 248)) (= 9007199254740992 (x727 2 53)) (= 215679573337205118357336120696157045389097155380324579848828881993728 (x727 2 227)) (= (x727 2 217) 210624583337114373395836055367340864637790190801098222508621955072) (= 40564819207303340847894502572032 (x727 2 105)) (= 4096 (x727 2 12)) (= (x727 2 158) 365375409332725729550921208179070754913983135744) (= 137438953472 (x727 2 37)) (= (x727 2 225) 53919893334301279589334030174039261347274288845081144962207220498432) (= (x727 2 42) 4398046511104) (= 19342813113834066795298816 (x727 2 84)) (= (x727 2 99) 633825300114114700748351602688) (= 25108406941546723055343157692830665664409421777856138051584 (x727 2 194)) (= (x727 2 233) 13803492693581127574869511724554050904902217944340773110325048447598592) (= (x727 2 46) 70368744177664) (= 51422017416287688817342786954917203280710495801049370729644032 (x727 2 205)) (= 3533694129556768659166595001485837031654967793751237916243212402585239552 (x727 2 241)) (= (x727 2 222) 6739986666787659948666753771754907668409286105635143120275902562304) (= (x727 2 119) 664613997892457936451903530140172288) (= 524288 (x727 2 19)) (= 16384 (x727 2 14)) (= 356811923176489970264571492362373784095686656 (x727 2 148)) (= 36028797018963968 (x727 2 55)) (= 4294967296 (x727 2 32)) (= (x727 2 150) 1427247692705959881058285969449495136382746624) (= 1809251394333065553493296640760748560207343510400633813116524750123642650624 (x727 2 250)) (= (x727 2 70) 1180591620717411303424) (= (x727 2 88) 309485009821345068724781056) (= 77371252455336267181195264 (x727 2 86)) (= 5846006549323611672814739330865132078623730171904 (x727 2 162)) (= (x727 2 182) 6129982163463555433433388108601236734474956488734408704) (= (x727 2 207) 205688069665150755269371147819668813122841983204197482918576128) (= (x727 2 101) 2535301200456458802993406410752) (= 1298074214633706907132624082305024 (x727 2 110)) (= (x727 2 246) 113078212145816597093331040047546785012958969400039613319782796882727665664) (= (x727 2 79) 604462909807314587353088) (= (x727 2 210) 1645504557321206042154969182557350504982735865633579863348609024) (= (x727 2 65) 36893488147419103232) (= 784637716923335095479473677900958302012794430558004314112 (x727 2 189)) (= 178405961588244985132285746181186892047843328 (x727 2 147)) (= (x727 2 176) 95780971304118053647396689196894323976171195136475136) (= (x727 2 31) 2147483648) (= (x727 2 202) 6427752177035961102167848369364650410088811975131171341205504) (= (x727 2 218) 421249166674228746791672110734681729275580381602196445017243910144) (= 2993155353253689176481146537402947624255349848014848 (x727 2 171)) (= (x727 2 45) 35184372088832) (= 79228162514264337593543950336 (x727 2 96))))
(assert (x117 x236))
(assert (= (and (not x1104) x228) x1202))
(assert (= (x271 (ite (< (* 8 (- 32 x186)) 256) (x727 2 (* (- 32 x186) 8)) 0)) (x637 1 (* 8 (- 32 x186)))))
(assert (x117 x593))
(assert (=> (>= 10000 x984) (= 0 (x119 x984))))
(assert (x117 x1130))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x418 x934 x294 x146 x672 x433 x274)))
(assert (=> (<= x151 10000) (= 0 (x119 x151))))
(assert (x117 x522))
(assert (= x631 (x180 (x418 x836 x18 x639 x631 x147 x1198))))
(assert (= (x644 (x418 x782 x689 x408 x288 x53 x734)) x782))
(assert (= (x119 (x793 x934 x31 x984)) (x793 x934 x31 x984)))
(assert (x117 x216))
(assert (x117 x346))
(assert (x117 x813))
(assert (x117 x776))
(assert (=> (>= 10000 x27) (= 0 (x119 x27))))
(assert (x117 x470))
(assert (=> (>= 10000 x906) (= 0 (x119 x906))))
(assert (x560 x1122))
(assert (= (=> (= x182 (= x935 1)) (and (=> (and (and (= (x881 x651) x464) (= x82 (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x989 x832))) (= x989 (x881 x412)) (= (>= x464 x832) x492) (= (and x492 x82) x1015) (= (x839 x993) x1162)) (not x182)) (and (=> (and x1015 (and (and (= x790 x673) (< (+ x615 x832) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (+ x832 x615) x790) (= x814 (> x65 0)) (>= x790 0) (= x460 (x881 x651)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x790) (= x615 (x753 x412)) (= (- x460 x832) x835)) (or (not x814) (and x814 (and (>= 4294967295 x785) (= (x586 x651) x392) x51 (= (x586 x412) x108) (= (= x108 (x395 x412)) x51) (= x360 (<= x392 (x395 x651))) x360))))) x554) (=> (and (not x1015) (= x1118 0)) x348))) (=> (and (= x1006 1) x182) x153))) x453))
(assert (x117 x1186))
(assert (=> (>= 10000 x934) (= 0 (x119 x934))))
(assert (x117 x739))
(assert (= x258 (or x30 x1207)))
(assert (= x820 (x838 (x26 x934 x1140 x1132 x48 x612 x11 x820))))
(assert (x344 x1079 1461501637330902918203684832716283019655932542976))
(assert (x117 x105))
(assert (= x757 (and x409 x1050)))
(assert (= (x119 76450787359836037641860180984291677749980919077056822294353438043884394381312) 0))
(assert (= (and (not x41) x449) x654))
(assert (= x152 (and x484 x504)))
(assert (= (x644 (x1143 x782 x590 x929 x660)) x782))
(assert (x117 x995))
(assert (x117 x965))
(assert (x117 x335))
(assert (x117 x694))
(assert (=> (<= x435 10000) (= 0 (x119 x435))))
(assert (x117 x1063))
(assert (= (x644 (x999 x223 x284 x914 x541 x477)) x223))
(assert (x117 x831))
(assert (x117 x993))
(assert (=> (<= x408 10000) (= (x119 x408) 0)))
(assert (x117 x1132))
(assert (x117 x546))
(assert (= x696 (x838 (x1040 x934 x1147 x112 x625 x694 x729 x696 x877))))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x418 x223 x362 x704 x687 x192 x842)))
(assert (x117 x926))
(assert (x117 x1214))
(assert (x691 x830))
(assert (= (x706 (x793 64 x1078 2)) 2))
(assert (x745 32))
(assert (x117 x1162))
(assert (= x552 (x1171 (x999 x934 x955 x969 x240 x552))))
(assert (x117 x125))
(assert (x80 x290))
(assert (x117 x432))
(assert (x117 x866))
(assert (x117 x325))
(assert (x117 x1034))
(assert (x117 x672))
(assert (x344 x1170 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (x119 1781416757497172237285707461672121659281076687163700985222424369352509686768) 0))
(assert (= x170 (x1171 (x999 x817 x411 x619 x831 x170))))
(assert (= x885 (or x638 x8)))
(assert (= (=> (and (= (= x1006 0) x789) (or (not x789) x789)) x1161) x134))
(assert (x135 x513))
(assert (= x540 (and x93 x155)))
(assert (=> (>= 10000 x689) (= 0 (x119 x689))))
(assert (x117 x996))
(assert (=> (<= x685 10000) (= 0 (x119 x685))))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x1040 x817 x871 x693 x912 x1181 x1179 x535 x1094)))
(assert (x117 x975))
(assert (=> (<= x672 10000) (= 0 (x119 x672))))
(assert (x117 x870))
(assert (x117 x161))
(assert (= x595 (x819 (x418 x817 x524 x577 x1195 x151 x595))))
(assert (=> (>= 10000 x687) (= 0 (x119 x687))))
(assert (x344 (ite (> 256 (* 8 (- 32 x47))) (x727 2 (* (- 32 x47) 8)) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x117 x662))
(assert (x117 x350))
(assert (x117 x1098))
(assert (> (x999 x836 x600 x206 x417 x279) 10000))
(assert (x117 x1093))
(assert (= x435 (x1171 (x26 x782 x603 x1155 x120 x435 x756 x771))))
(assert (x117 x162))
(assert (= 64 (x644 (x793 64 x357 8))))
(assert (x117 x906))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x793 x817 x165 x356)))
(assert (= (x644 (x418 x934 x294 x146 x672 x433 x274)) x934))
(assert (x117 x98))
(assert (= (x1040 x836 x876 x436 x1028 x1002 x116 x314 x744) (x119 (x1040 x836 x876 x436 x1028 x1002 x116 x314 x744))))
(assert (x117 x330))
(assert (x117 x467))
(assert (x117 x196))
(assert (= x728 (or x21 x712)))
(assert (x117 x679))
(assert (= x846 1))
(assert (x962 26959946667150639794667015087019630673637144422540572481103610249215))
(assert (= x580 (and (not x378) x1060)))
(assert (x117 x646))
(assert (= x923 (=> (and (= x183 x1128) (= x422 x993)) x592)))
(assert (= (x119 (x793 x223 x1163 x1097)) (x793 x223 x1163 x1097)))
(assert (x691 x559))
(assert (x117 x329))
(assert (=> (>= 10000 x929) (= 0 (x119 x929))))
(assert (= (x180 (x999 x223 x284 x914 x541 x477)) x541))
(assert (x117 x1006))
(assert (x344 x290 32))
(assert (x117 x291))
(assert (=> (<= x734 10000) (= 0 (x119 x734))))
(assert (x117 x307))
(assert (=> (>= 10000 x39) (= (x119 x39) 0)))
(assert (= (x119 (x1040 x223 x1186 x521 x522 x312 x1211 x1012 x589)) (x1040 x223 x1186 x521 x522 x312 x1211 x1012 x589)))
(assert (x117 x937))
(assert (x80 x956))
(assert (x560 x519))
(assert (= x907 (=> (and (= (ite (> x176 0) x176 (ite (= (x239 1461501637330902918203684832716283019655932542975 x1128) 1) 1 0)) x933) (= x933 0) (= x164 (not (> x720 1)))) (and x164 (=> (and (= x889 (x239 1461501637330902918203684832716283019655932542975 x1079)) (= x1079 (x843 33528237782592280163068556224972516439282563014722366175641814928123294921928)) (= x378 (= x889 0))) (and (=> (and (not x378) (and (= x887 (+ x905 31)) (= (x126 128) x105) (= (x474 (+ x160 x905)) x107) (= x216 (x474 (+ 4 x993))) (= (x920 128) x290) (= x986 (x474 (+ x160 x70))) (= (x474 (+ 32 x487)) x585) (= x70 (x239 115792089237316195423570985008687907853269984665640564039457584007913129639904 x887)) (= x667 (x474 (+ x1139 32))) (= (x306 (- x986 x216)) x818) (= x571 (< 0 x290)) (= x213 (x474 (+ x216 32))) (= x380 (x474 (+ 32 x328))) (= (x474 (+ 32 x430)) x495) (= (x474 (+ 32 x495)) x160) (= (x474 (+ x986 32)) x1048) (= (x474 (+ 32 x213)) x766) (= (x474 (+ 32 x766)) x476) (= (x474 (+ x476 32)) x1139) (= (x474 (+ x585 32)) x328) (= x250 (x306 (- x495 x216))) (= (x474 (+ x667 32)) x487) (= (x474 (+ 32 x380)) x430) (= (x239 1461501637330902918203684832716283019655932542975 x1079) x235))) (and (=> (and (and (= (> x290 32) x237) (= (x920 160) x875)) x571) (and (=> (not x237) x987) (=> (and x237 (and (= (x803 192) x1024) (= (< 64 x290) x263) (= x648 (x474 (+ x1048 32))))) (and (=> (not x263) x987) (=> (and (and (= x41 (< 96 x290)) (= x732 (x1135 224)) (= x1053 (x474 (+ 64 x1048)))) x263) (and (=> (not x41) x987) (=> x41 x768))))))) (=> (not x571) x987))) (=> x378 x50)))))))
(assert (= (x340 (x699 x817 x1071)) x1071))
(assert (=> (>= 10000 x120) (= (x119 x120) 0)))
(assert (x80 x830))
(assert (not (x962 (x1143 x934 x38 x897 x230))))
(assert (= (x340 (x418 x836 x18 x639 x631 x147 x1198)) x18))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x399 0)))
(assert (= (and x1202 x384) x587))
(assert (x691 256))
(assert (x117 x201))
(assert (= (x838 (x1040 x782 x171 x677 x951 x1008 x1106 x937 x327)) x937))
(assert (x117 x991))
(assert (= (x706 (x1040 x782 x171 x677 x951 x1008 x1106 x937 x327)) x677))
(assert (x117 x390))
(assert (not (x962 (x699 x223 x906))))
(assert (x117 x377))
(assert (x745 63))
(assert (x117 x1211))
(assert (x117 x575))
(assert (< (x1143 x782 x590 x929 x660) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x117 x472))
(assert (x560 (x727 2 (* 8 (- 32 x47)))))
(assert (x117 x713))
(assert (=> (>= 10000 x931) (= (x119 x931) 0)))
(assert (= (x644 (x399 0)) 0))
(assert (x117 x648))
(assert (x117 x151))
(assert (x117 x249))
(assert (x117 x671))
(assert (not (x962 (x699 x817 x1071))))
(assert (x117 x416))
(assert (x117 x328))
(assert (= (x340 (x793 x223 x1163 x1097)) x1163))
(assert (= x11 (x819 (x26 x934 x1140 x1132 x48 x612 x11 x820))))
(assert (=> (<= x1155 10000) (= (x119 x1155) 0)))
(assert (x117 x840))
(assert (= (or x1011 x787) x194))
(assert (x117 x254))
(assert (x117 x376))
(assert (x117 x272))
(assert (x117 x780))
(assert (=> (>= 10000 x563) (= 0 (x119 x563))))
(assert (=> (>= 10000 x147) (= 0 (x119 x147))))
(assert (x117 x110))
(assert (x117 x882))
(assert (= x906 (x340 (x699 x223 x906))))
(assert (> (x699 x782 x918) 10000))
(assert (x117 x146))
(assert (x117 x756))
(assert (x117 x805))
(assert (= (x340 (x1143 x223 x44 x806 x575)) x44))
(assert (= x914 (x706 (x999 x223 x284 x914 x541 x477))))
(assert (x117 x274))
(assert (x117 x1124))
(assert (=> (>= 10000 x373) (= (x119 x373) 0)))
(assert (= x442 (and x613 (not x709))))
(assert (x117 x549))
(assert (x117 x687))
(assert (x117 x55))
(assert (x117 x122))
(assert (< 10000 (x1040 x836 x876 x436 x1028 x1002 x116 x314 x744)))
(assert (x962 53345939417071456220559631604471678769232717410092326094220293271952667181056))
(assert (x117 x99))
(assert (=> (>= 10000 x433) (= (x119 x433) 0)))
(assert (> (x999 x782 x959 x893 x874 x545) 10000))
(assert (not x927))
(assert (< (x1143 x934 x38 x897 x230) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x117 x983))
(assert (x117 x1094))
(assert (x962 115792089237316195423570985008687907853269984665640564039457584007913129639934))
(assert (x560 x873))
(assert (= (and x191 (not x992)) x363))
(assert (x117 x1029))
(assert (=> (>= 10000 x937) (= (x119 x937) 0)))
(assert (< 10000 (x1040 x934 x1147 x112 x625 x694 x729 x696 x877)))
(assert (= x817 (x644 (x999 x817 x411 x619 x831 x170))))
(assert (x117 x227))
(assert (x962 11430537079145650693387304458692941425836787954612963690241153482819318579200))
(assert (x117 x476))
(assert (x117 x921))
(assert (x117 x612))
(assert (x117 x81))
(assert (x117 x707))
(assert (< 10000 (x999 x934 x955 x969 x240 x552)))
(assert (x117 x877))
(assert (= (x644 (x1040 x934 x1147 x112 x625 x694 x729 x696 x877)) x934))
(assert (x117 x33))
(assert (x117 x1070))
(assert (x117 x627))
(assert (x117 x935))
(assert (x117 x1160))
(assert (x117 x262))
(assert (= x734 (x819 (x418 x782 x689 x408 x288 x53 x734))))
(assert (x486 x956))
(assert (x117 x657))
(assert (x117 x1100))
(assert (= (and x1015 x100) x220))
(assert (x117 x633))
(assert (= x155 (and x224 x285)))
(assert (> (x699 x817 x1071) 10000))
(assert (not (x962 (x999 x782 x959 x893 x874 x545))))
(assert (= (x706 (x793 64 x478 x664)) x664))
(assert (> (x1143 x934 x38 x897 x230) 10000))
(assert (x691 x290))
(assert (= (x418 x934 x294 x146 x672 x433 x274) (x119 (x418 x934 x294 x146 x672 x433 x274))))
(assert (x117 x54))
(assert (= (=> (and (= (x474 (+ x770 96)) x497) (= x1126 (x474 (+ x1005 96))) (= x528 (not (< 128 x956))) (= (x10 x1126) x983)) (and x528 x414)) x703))
(assert (= (x644 (x793 64 x478 x664)) 64))
(assert (x117 x278))
(assert (x117 x57))
(assert (x102 x559))
(assert (x117 x213))
(assert (=> (<= x294 10000) (= 0 (x119 x294))))
(assert (= (x1171 (x999 x836 x600 x206 x417 x279)) x279))
(assert (= (x119 (x399 0)) (x399 0)))
(assert (and (= 9 (x1215 3 3)) (= 81 (x1215 27 3)) (= (x1215 9 9) 81) (= 27 (x1215 9 3))))
(assert (x117 x817))
(assert (= (and x885 (not x982)) x243))
(assert (x117 x1103))
(assert (x117 x984))
(assert (=> (<= x639 10000) (= (x119 x639) 0)))
(assert (x117 x936))
(assert (x117 x875))
(assert (x344 x1158 1461501637330902918203684832716283019655932542976))
(assert (= (x180 (x1143 x934 x38 x897 x230)) x230))
(assert (= x434 (and (not x93) x155)))
(assert (=> (<= x632 10000) (= (x119 x632) 0)))
(assert (=> (<= x1002 10000) (= (x119 x1002) 0)))
(assert (x691 x1079))
(assert (x117 x226))
(assert (=> (>= 10000 x31) (= 0 (x119 x31))))
(assert (x117 x294))
(assert (x344 x830 26959946667150639794667015087019630673637144422540572481103610249216))
(assert (not (x962 (x793 64 x357 8))))
(assert (x428 x214))
(assert (x117 x1179))
(assert (x117 x361))
(assert (= 0 (x119 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (x117 x806))
(assert (= (x340 (x793 x934 x31 x984)) x31))
(assert (= x574 (and x409 (not x1050))))
(assert (x117 x876))
(assert (x117 x261))
(assert (x117 x1017))
(assert (= (=> (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x993) (= (x618 x1035 63) x329) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x993) (= x856 (x474 (+ x679 500))) (= x1035 (x271 (* 64 x1122))) (= x35 (x618 (+ x905 31) 32)) (= x679 (ite (< x329 x472) x472 x329)) (= x1050 (= x863 0)) (= (* x35 32) x898) (< x993 x910) (<= 1 x910) (= (x474 (+ x993 (mod (+ x898 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x910) (= x1063 (x474 (+ x754 x905))) (= (x474 (+ x1122 2500)) x472) (<= x993 115792089237316195423570985008687907853269984665640564039457584007913129639934) (not (> x856 x508)) (= (x474 (+ 32 x993)) x754)) (or (and (not x1050) (= x718 x1122)) (and x1050 (and (= x1176 (x306 (- x162 2500))) (= x1176 x718))))) x453) x50))
(assert (x117 x931))
(assert (x117 x279))
(assert (= (x119 84814075808141314178395468817534025465894426928601295766380145544921651250904) 0))
(assert (= x1059 (and x885 x982)))
(assert (=> (>= 10000 x1211) (= 0 (x119 x1211))))
(assert (x117 x2))
(assert (= (x644 (x793 x782 x59 x27)) x782))
(assert (x117 x312))
(assert (x117 x708))
(assert (= x627 (x340 (x26 x817 x627 x236 x632 x714 x685 x737))))
(assert (=> (>= 10000 x550) (= 0 (x119 x550))))
(assert (= x1186 (x340 (x1040 x223 x1186 x521 x522 x312 x1211 x1012 x589))))
(assert (x117 x623))
(assert (x117 x45))
(assert (= (x180 (x1040 x782 x171 x677 x951 x1008 x1106 x937 x327)) x951))
(assert (not (x962 (x793 x836 x373 x217))))
(assert (= x817 (x644 (x26 x817 x627 x236 x632 x714 x685 x737))))
(assert (= x616 (or x25 x505)))
(assert (x117 x951))
(assert (x962 84814075808141314178395468817534025465894426928601295766380145544921651250904))
(assert (x117 x1114))
(assert (x117 x1024))
(assert (=> (>= 10000 x522) (= 0 (x119 x522))))
(assert (x117 x909))
(assert (x117 x782))
(assert (= x927 (=> (and (and (and (= x851 x465) (= x802 (x894 x851))) (and (and (= x465 x1131) (and (= x567 x145) (and (= x510 (x239 1461501637330902918203684832716283019655932542975 x132)) (>= 127 x332) (= x996 1786122754) (not (< x75 x208)) (< (+ x234 x145) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (not (> x343 x75)) (= x646 x1127) (not (> x390 x75)) (= (+ x343 x905) x390) (= (>= 224 x934) x86) (= (+ 32 x784) x343) (= x634 x249) (= x234 (x1036 x651)) (= x931 x465) (= false x221) (= (+ 32 x496) x456) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1127) (= x196 (x233 5)) (= (x366 x784) x905) (= x303 x349) (not (< x75 x456)) (= false x669) (<= x332 127) (= x935 (x239 255 x1017)) (= x1214 (x811 x651)) (= (+ x350 160) x769) (= (+ x456 x350) x208) (= x226 (x618 (+ x350 31) 32)) (= (+ x424 4) x496) (= (+ x145 x234) x1127) (>= 4294967296 x905) (<= x350 4294967296) (= (* 32 x226) x123) (>= x1127 0) (= x350 (x366 x496)) (= 128 x844) (= x299 x140) (= (x306 (- (mod (+ x1160 x905) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1160)) x934) (= (+ x123 160) x1160) (= (x894 x931) x1213) (= x326 x653) (= x784 (+ x509 4)) (= (x474 (+ 1 x196)) x751) (= (x239 1461501637330902918203684832716283019655932542975 x1055) x922) (<= 1 x1214) (= (- x1213 x145) x458) (= x412 (x239 1461501637330902918203684832716283019655932542975 x1158))))) (and (= x653 x832) (= x593 x67) (= x132 (x289 228)) (<= x509 4294967296) (<= x604 x802) (= x424 (x289 292)) (>= 4294967296 x424) (= x67 (x289 0)) (= x1158 (x289 4)) (= (x289 164) x351) (= x604 x567) (= x1055 (x289 260)) (= x1095 x132) (= x509 x702) (= x299 x351) (= x863 (x289 196)) (= x163 x1158) (= false x605) (= x688 x1055) (= x832 (x289 36)) (= x863 x249) (= x303 x1122) (= x1017 x280) (= x1017 (x289 100)) (= x509 (x289 68)) (= x1122 (x289 132)) (= x424 x716)))) (and (= false x136) (<= x988 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= false x20) x913 (= false x610) (>= x1164 0) (>= x988 0) (<= 0 x455) (<= x973 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= true x972) (<= x1120 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 388 x75) (<= 0 x445) (= x846 x49) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1044) (= x1108 (x268 x49)) (= x1018 x651) (<= x924 4294967295) (>= 1461501637330902918203684832716283019655932542975 x1108) (= x437 x913) (<= 0 x1044) (>= x232 0) (<= 1 x1108) (>= x924 0) (= x733 10) (= x746 x1156) (= x1065 true) (<= 0 x973) (= x83 x675) (<= 0 x994) (<= x445 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= 1461501637330902918203684832716283019655932542975 x825) (= x85 true) (<= 0 x567) (>= 1461501637330902918203684832716283019655932542975 x651) x468 (>= 1461501637330902918203684832716283019655932542975 x465) (= x468 (< 0 (x811 x651))) x675 (>= x825 0) x72 (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x75) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x567) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x232) (<= x1164 1461501637330902918203684832716283019655932542975) (<= 0 x1120) (= x166 x72) (<= x455 1461501637330902918203684832716283019655932542975) (>= x651 1) (= x389 x865) (= x471 0) x865 (<= 0 x465) (= x310 1786122754) x746 (= x815 false) (<= x994 115792089237316195423570985008687907853269984665640564039457584007913129639935))) (and x86 (=> (and (= x110 (+ x1160 192)) (= (x829 x355) x1132) (= (x829 x826) x612) (= (+ 32 x1160) x355) (= x319 (+ 32 x1160)) (<= x935 1) (= x301 (+ x1160 96)) (= x1070 (+ 160 x1160)) (= x969 (x829 x841)) (= (x829 x1160) x31) (= x112 (x829 x339)) (= x717 (+ x1160 96)) (= x158 (+ x549 32)) (= x695 (+ 128 x1160)) (= x1140 (x829 x1160)) (= (+ 32 x1204) x523) (= x244 (x399 0)) (= x736 (+ x1188 32)) (= x339 (+ x1160 32)) (= x11 (x829 x695)) (= (x306 (- x899 32)) x860) (= x672 (x829 x330)) (= (x807 x1160) x817) (= (+ 32 x736) x1204) (= x92 (+ x1160 64)) (= x647 (+ 32 x776)) (= (+ 64 x1160) x148) (= (x1143 x934 x38 x897 x230) x394) (= x899 (x306 (- x1 x1160))) (= x230 (x829 x514)) (= (+ x1160 32) x167) (= x826 (+ x1160 96)) (= x1 (+ x523 32)) (= x549 (+ 32 x1160)) (= (+ x1160 64) x84) (= x857 (x999 x934 x955 x969 x240 x552)) (< x1160 x1) (= (+ x1160 64) x330) (= (x829 x717) x552) (= x877 (x829 x110)) (= x146 (x829 x319)) (= x48 (x829 x148)) (= (x829 x205) x984) (= (x829 x167) x897) (= (x829 x1160) x294) (= (x418 x934 x294 x146 x672 x433 x274) x218) (= (x699 x934 x420) x277) (= (+ x121 32) x1188) (= x358 (x1040 x934 x1147 x112 x625 x694 x729 x696 x877)) (= (x829 x1160) x38) (= x776 (+ 32 x423)) (= (x829 x1070) x696) (= (x829 x1160) x1147) (= (+ 96 x1160) x331) (= (>= 224 x817) x742) (= x514 (+ x1160 64)) (= x420 (x829 x1160)) (= x423 (+ 32 x158)) (= (x829 x805) x820) (= (x26 x934 x1140 x1132 x48 x612 x11 x820) x172) (= (+ x1160 32) x205) (= (x829 x92) x240) (= x1172 (ite (= 0 x934) x244 (ite (>= 32 x934) x277 (ite (<= x934 64) x649 (ite (>= 96 x934) x394 (ite (>= 128 x934) x857 (ite (<= x934 160) x218 (ite (<= x934 192) x172 (ite (>= 224 x934) x358 x212))))))))) (= x805 (+ 160 x1160)) (= x694 (x829 x331)) (= x157 (+ 32 x647)) (= (+ 32 x1160) x997) (= (x793 x934 x31 x984) x649) (= x433 (x829 x301)) (= (x829 x198) x729) (= x841 (+ x1160 32)) (= (x829 x87) x274) (= (x829 x84) x625) (= (+ x1160 128) x198) (= x87 (+ 128 x1160)) (= (+ x157 32) x121) (= (x829 x1160) x955)) (and x742 (=> (and (= (x399 0) x845) (= x443 (+ x997 32)) (= (x807 x1033) x693) (= x1144 (+ 32 x997)) (= (+ x997 64) x353) (= x670 (x306 (- x156 x1))) (= (+ x997 96) x325) (= (<= x782 224) x1064) (= x823 (+ 32 x1)) (> x156 x1) (= (ite (= x817 0) x845 (ite (<= x817 32) x63 (ite (<= x817 64) x715 (ite (>= 96 x817) x808 (ite (<= x817 128) x246 (ite (>= 160 x817) x1058 (ite (>= 192 x817) x636 (ite (>= 224 x817) x1134 x979)))))))) x1037) (= x912 (x807 x353)) (= x524 (x807 x997)) (= x1033 (+ 32 x997)) (= x715 (x793 x817 x165 x356)) (= x636 (x26 x817 x627 x236 x632 x714 x685 x737)) (= x127 (x807 x997)) (= (x807 x1159) x1181) (= (+ 96 x997) x1159) (= (x999 x817 x411 x619 x831 x170) x246) (= (+ x997 128) x231) (= (+ x1042 32) x156) (= (+ x997 32) x1076) (= x1094 (x807 x1003)) (= (x807 x201) x1195) (= (+ 96 x997) x23) (= x203 (+ 160 x997)) (= (x807 x231) x595) (= (x807 x443) x619) (= x527 (+ x997 32)) (= x63 (x699 x817 x1071)) (= (+ x77 32) x1042) (= x1130 (+ 64 x997)) (= (x418 x817 x524 x577 x1195 x151 x595) x1058) (= (+ 192 x997) x1003) (= (x807 x997) x871) (= (x807 x325) x151) (= x1071 (x807 x997)) (= x808 (x1143 x817 x127 x1103 x608)) (= (x807 x185) x632) (= x782 (x241 x1)) (= (x807 x684) x714) (= (x807 x1077) x577) (= x1134 (x1040 x817 x871 x693 x912 x1181 x1179 x535 x1094)) (= x170 (x807 x23)) (= (x807 x114) x1179) (= (x807 x997) x165) (= x346 (+ 64 x997)) (= (x807 x346) x608) (= x185 (+ x997 64)) (= (+ 160 x997) x584) (= (x807 x997) x627) (= (x306 (- x670 32)) x68) (= x1077 (+ x997 32)) (= x62 (+ x1 32)) (= x356 (x807 x1144)) (= (+ x997 96) x684) (= x737 (x807 x584)) (= x262 (+ 128 x997)) (= (x807 x527) x1103) (= x535 (x807 x203)) (= x77 (+ 32 x823)) (= x685 (x807 x262)) (= x114 (+ 128 x997)) (= (x807 x997) x411) (= x831 (x807 x1130)) (= (+ 64 x997) x201) (= x236 (x807 x1076))) (and x1064 (=> (and (= (x241 x623) x929) (= (+ 32 x62) x581) (= (+ x62 96) x128) (= x677 (x241 x583)) (= (x241 x901) x288) (= x765 (+ x700 1)) (= x60 (x699 x782 x918)) (= (x241 x1208) x545) (= x171 (x241 x62)) (= (+ x62 128) x261) (= x27 (x241 x34)) (= (x241 x1100) x1155) (= (x241 x128) x435) (= x1106 (x241 x315)) (= (+ 32 x405) x1193) (= (+ 64 x62) x596) (= (+ x62 32) x34) (= (+ 1 x765) x405) (= (x399 0) x834) (= (x241 x62) x918) (= x583 (+ x62 32)) (= x1175 (+ x62 64)) (= (+ 32 x156) x361) (= (x241 x581) x893) (= x327 (x241 x682)) (= (+ x62 160) x568) (= (x241 x62) x689) (= (x999 x782 x959 x893 x874 x545) x961) (= (x793 x782 x59 x27) x1145) (= x908 (+ 32 x1193)) (= (ite (= 0 x782) x834 (ite (<= x782 32) x60 (ite (<= x782 64) x1145 (ite (<= x782 96) x264 (ite (>= 128 x782) x961 (ite (>= 160 x782) x255 (ite (<= x782 192) x827 (ite (>= 224 x782) x1041 x297)))))))) x722) (= x1041 (x1040 x782 x171 x677 x951 x1008 x1106 x937 x327)) (= x827 (x26 x782 x603 x1155 x120 x435 x756 x771)) (= (+ x62 32) x623) (= x951 (x241 x596)) (= (x306 (- x908 x156)) x133) (= (x241 x666) x1008) (= (x241 x261) x734) (= (+ x62 64) x901) (= (+ 32 x62) x1100) (= x590 (x241 x62)) (= x942 (+ 128 x62)) (= x1054 (x306 (- x133 32))) (= (+ x62 64) x1032) (= x1208 (+ 96 x62)) (= x53 (x241 x725)) (= (x418 x782 x689 x408 x288 x53 x734) x255) (= (x241 x942) x756) (= (+ x156 32) x700) (= (+ x62 192) x682) (= (x241 x62) x59) (= (x241 x55) x408) (= x603 (x241 x62)) (= x264 (x1143 x782 x590 x929 x660)) (= x866 (+ x62 64)) (= x660 (x241 x1175)) (= (+ 32 x62) x55) (= x315 (+ 128 x62)) (= (+ x62 160) x739) (= (+ x62 96) x725) (= (x241 x866) x874) (= (x241 x1032) x120) (= (x241 x568) x771) (= (x241 x62) x959) (= (x241 x739) x937) (= (<= x223 224) x763) (> x908 x156) (= x223 (x1200 x156)) (= x666 (+ x62 96))) (and x763 (=> (and (= x199 (x793 x223 x1163 x1097)) (= x46 (+ x361 32)) (= (* x720 65) x200) (= x720 (x843 4)) (= (x1200 x902) x477) (>= 1781416757497172237285707461672121659281076687163700985222424369352509686768 x720) (= (x1200 x1023) x806) (= x914 (x1200 x338)) (= x287 (x1143 x223 x44 x806 x575)) (= (x399 0) x1136) (= x870 (x945 x620 248)) (= (+ x361 96) x915) (= (+ x361 128) x175) (= x541 (x1200 x118)) (= 65 x1168) (= x338 (+ x361 32)) (= (+ 64 x361) x139) (= (x1200 x915) x312) (= (x1200 x260) x650) (= (x1200 x822) x764) (= (x1200 x361) x1186) (= (+ x361 96) x902) (= (+ x361 64) x28) (= (x1200 x361) x1163) (= (x1200 x1121) x192) (= (x1200 x175) x842) (= x952 (x1200 x361)) (= x260 (+ 160 x361)) (= x589 (x1200 x525)) (= x202 (+ x361 64)) (= x44 (x1200 x361)) (= (x547 128) x304) (not (< x304 x200)) (>= x304 65) (< x908 x503) (= x822 (+ x361 128)) (= x525 (+ x361 192)) (<= 1 x720) (= (x1200 x750) x1012) (= x1016 (x547 160)) (= x687 (x1200 x139)) (= (ite (= x223 0) x1136 (ite (<= x223 32) x534 (ite (<= x223 64) x199 (ite (>= 96 x223) x287 (ite (<= x223 128) x566 (ite (<= x223 160) x674 (ite (<= x223 192) x799 (ite (>= 224 x223) x1111 x73)))))))) x478) (= (x699 x223 x906) x534) (= (x418 x223 x362 x704 x687 x192 x842) x674) (= (x1200 x738) x1097) (= x204 (x1200 x28)) (= x750 (+ x361 160)) (= (x547 192) x193) (= (x1200 x361) x284) (= (x1040 x223 x1186 x521 x522 x312 x1211 x1012 x589) x1111) (= x118 (+ 64 x361)) (= x781 (+ x361 128)) (= x498 (x1200 x9)) (= (+ 32 x361) x738) (= x906 (x1200 x361)) (= (+ 32 x908) x503) (= x566 (x999 x223 x284 x914 x541 x477)) (= x620 (x547 224)) (= x575 (x1200 x980)) (= (x1200 x46) x704) (= (+ x361 32) x629) (= x1023 (+ x361 32)) (= x799 (x26 x223 x952 x498 x204 x921 x764 x650)) (= x1104 (= x870 0)) (= (x1200 x629) x521) (= x9 (+ 32 x361)) (= x921 (x1200 x671)) (= x975 0) (= (+ x361 64) x980) (= (+ 96 x361) x1121) (= (x1200 x781) x1211) (= (x1200 x361) x362) (= x671 (+ 96 x361)) (= x522 (x1200 x202))) (and (=> (and (not x1104) (= (= x870 1) x384)) (and (=> (and x384 (and (or (and (not x451) (= x490 0)) (and x451 (and (= (x793 64 x357 8) x664) (= (x843 x886) x1093) (= (x239 1461501637330902918203684832716283019655932542975 x1016) x357) (>= x1093 1) (= x886 (x793 64 x478 x664))))) (and (= (ite x451 1 0) x490) (= (not (= x1131 x872)) x451) (= x872 (x239 1461501637330902918203684832716283019655932542975 x1016))))) x450) (=> (and (not x384) (= (> x870 30) x1133)) (and (=> (and (and (> x572 x503) (= 128 x313) (= (x474 (+ x1110 32)) x333) (= x432 (x306 (- x572 32))) (not (= x503 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (= x335 x743) (= x572 (x474 (+ x503 32))) (= (x14 x432) x743) (= x1074 (x306 (- x572 32))) (<= x503 115792089237316195423570985008687907853269984665640564039457584007913129639934) (not (= x503 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (= (x438 (x474 (+ 96 x572))) x816) (>= 1461501637330902918203684832716283019655932542975 x1026) (<= x503 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= x749 (x438 x572)) (= x536 (x438 (x474 (+ 64 x572)))) (= x245 (x438 (x474 (+ 32 x572)))) (= (x474 (+ x809 32)) x1110) (= x1026 (x946 x749 x245 x536 x816)) (= x916 x572) (<= x503 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= x809 (x474 (+ 32 x572))) (not (= x503 115792089237316195423570985008687907853269984665640564039457584007913129639904))) (not x1133)) x101) (=> x1133 x948))))) (=> (and x1104 (and (= x179 (x547 128)) (not (> x1180 x377)) (= (x239 1461501637330902918203684832716283019655932542975 x1016) x1085) (= 65 x282) (= (x474 (+ 32 x539)) x904) (= x36 (+ 32 x193)) (= x501 (* x720 65)) (= x227 (x474 (+ 4 x503))) (<= 97 x179) (= x770 (x474 (+ 32 x904))) (<= 1 x720) (>= 1781416757497172237285707461672121659281076687163700985222424369352509686767 x720) (= (x300 x532) x950) (<= x1146 115792089237316195423570985008687907853269984665640564039457584007913129639838) (= (x306 (- x904 x227)) x617) (= 32 x469) (= (x547 128) x377) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x36 x1146))) (>= x193 65) (= (x474 (+ x36 x1146)) x1180) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639903 x193) (not (< x193 x501)) (= (x821 x532) x956) (= x539 (x474 (+ 32 x227))) (= (< 0 x956) x285) (not (< x179 x36)) (= x493 32) (= (x547 x532) x1146) (= x532 (x474 (+ 160 x193))) (= x1005 (x474 (+ 32 x532))))) (and (=> (and x285 (and (= (x821 x1005) x98) (= (> x956 32) x93))) (and (=> (not x93) x414) (=> (and (and (= (x474 (+ x770 32)) x1124) (= (x1073 x174) x286) (= x1049 (< 64 x956)) (= x174 (x474 (+ x1005 32)))) x93) (and (=> (and (and (= (x474 (+ 64 x1005)) x1081) (= x491 (x474 (+ 64 x770))) (= (> x956 96) x504) (= x81 (x1190 x1081))) x1049) (and (=> (not x504) x414) (=> x504 x703))) (=> (not x1049) x414))))) (=> (not x285) x414)))))))))))))))
(assert (= x27 (x706 (x793 x782 x59 x27))))
(assert (=> (>= 10000 x236) (= (x119 x236) 0)))
(assert (= 0 (x119 115792089237316195423570985008687907853269984665640564039457584007913129639838)))
(assert (x117 x1019))
(assert (x102 x1158))
(assert (x117 x564))
(assert (x344 x513 32))
(assert (=> (<= x921 10000) (= 0 (x119 x921))))
(assert (=> (<= x59 10000) (= 0 (x119 x59))))
(assert (x117 x535))
(assert (x117 x317))
(assert (= (x119 57896044618658097711785492504343953926634992332820282019728792003956564819967) 0))
(assert (x691 x513))
(assert (x117 x724))
(assert (x117 x114))
(assert (x962 10019309979067222254582373821846632475949454479833780424560900009889672200192))
(assert (=> (>= 10000 x2) (= 0 (x119 x2))))
(assert (x117 x171))
(assert (x117 x1208))
(assert (x117 x1005))
(assert (= (x119 115792089237316195423570985008687907853269984665640564039457584007913129639906) 0))
(assert (=> (>= 10000 x38) (= (x119 x38) 0)))
(assert (x486 x290))
(assert (x344 x1016 1461501637330902918203684832716283019655932542976))
(assert (= (x340 (x793 64 x1078 2)) x1078))
(assert (= x761 (or x599 x516)))
(assert (= (or x103 x640) x462))
(assert (=> (>= 10000 x552) (= 0 (x119 x552))))
(assert (x117 x349))
(assert (x117 x185))
(assert (x117 x889))
(assert (x117 x701))
(assert (= x153 (=> (and (= (ite (= 0 (ite (= 0 x1006) (ite (= x1122 0) 1 0) (ite (= x1006 0) 1 0))) (ite (= 0 x1006) (ite (= x1122 0) 1 0) (ite (= 0 x1006) 1 0)) (ite (= 0 x863) 1 0)) x416) (not (> x470 x752)) (= x602 (< 0 x863)) (= 0 x416) (= (x306 (- x752 x470)) x302)) (and (=> (and (and (= x1177 (= x922 0)) (or (and (not x1177) (= x922 x178)) (and x1177 (= x825 x178)))) x602) x719) (=> (and (and (= x910 x317) (= x594 0)) (not x602)) x134)))))
(assert (x117 x750))
(assert (=> (<= x1012 10000) (= 0 (x119 x1012))))
(assert (= x764 (x819 (x26 x223 x952 x498 x204 x921 x764 x650))))
(assert (=> (>= 10000 x1085) (= (x119 x1085) 0)))
(assert (x117 x1081))
(assert (x117 x764))
(assert (= 0 (x119 1781416757497172237285707461672121659281076687163700985222424369352509686767)))
(assert (=> (>= 10000 x206) (= (x119 x206) 0)))
(assert (= x836 (x644 (x418 x836 x18 x639 x631 x147 x1198))))
(assert (x117 x980))
(assert (x117 x902))
(assert (x117 x871))
(assert (x344 x513 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x691 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x117 x955))
(assert (= (x1171 (x418 x223 x362 x704 x687 x192 x842)) x192))
(assert (=> (<= x412 10000) (= (x119 x412) 0)))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x699 x836 x995)))
(assert (= (x999 x934 x955 x969 x240 x552) (x119 (x999 x934 x955 x969 x240 x552))))
(assert (not (x962 (x793 x223 x1163 x1097))))
(assert (= (x644 (x699 x223 x906)) x223))
(assert (x117 x525))
(assert (=> (<= x969 10000) (= (x119 x969) 0)))
(assert (x80 26959946667150639794667015087019630673637144422540572481103610249215))
(assert (x117 x527))
(assert (= (x1171 (x418 x817 x524 x577 x1195 x151 x595)) x151))
(assert (x117 x68))
(assert (x117 x298))
(assert (x117 x685))
(assert (x117 x1106))
(assert (=> (<= x1028 10000) (= 0 (x119 x1028))))
(assert (= x817 (x644 (x793 x817 x165 x356))))
(assert (x117 x490))
(assert (x117 x1167))
(assert (= (x706 (x793 x836 x373 x217)) x217))
(assert (x117 x250))
(assert (x117 x956))
(assert (x117 x1095))
(assert (x962 32523383700587834770323112271211932718128200013265661849047136999858837557784))
(assert (= x1004 (and (not x384) x1202)))
(assert (x117 x1028))
(assert (= (x119 (x1040 x782 x171 x677 x951 x1008 x1106 x937 x327)) (x1040 x782 x171 x677 x951 x1008 x1106 x937 x327)))
(assert (= (x340 (x793 x782 x59 x27)) x59))
(assert (=> (>= 10000 x53) (= (x119 x53) 0)))
(assert (=> (>= 10000 x230) (= 0 (x119 x230))))
(assert (= (=> (and (= x283 (x306 (- x407 x503))) (<= x503 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= (>= 224 x836) x190) (= (x306 (- x283 32)) x909) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639844 x503)) (= (x474 (+ 32 x503)) x1056) (not (= x503 115792089237316195423570985008687907853269984665640564039457584007913129639844)) (= (x474 (+ x503 32)) x291) (= x882 (x474 (+ x1056 28))) (= (x474 (+ 32 x882)) x407) (< x503 x407) (= (x1045 x503) x836) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639844 x503)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x503) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x503)) (and (=> (and (= (x999 x836 x600 x206 x417 x279) x960) (= x467 (x474 (+ 32 x741))) (= (x1045 x99) x1028) (= (x418 x836 x18 x639 x631 x147 x1198) x322) (= (x1045 x780) x744) (= (x1045 x272) x550) (= 128 x579) (= x116 (x1045 x419)) (= (x699 x836 x995) x318) (= x206 (x1045 x853)) (= (x1045 x15) x376) (= (x474 (+ x1141 32)) x403) (or (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639903 x407) (<= 1 x407)) (and (<= 115792089237316195423570985008687907853269984665640564039457584007913129639906 x407) (<= x407 115792089237316195423570985008687907853269984665640564039457584007913129639934))) (= x15 (x474 (+ 64 x291))) (= (x474 (+ 160 x291)) x122) (= (x306 (- x870 4)) x154) (= (x946 x33 x479 x90 x794) x611) (= (x1045 x911) x631) (= (x1045 x291) x2) (= x853 (x474 (+ x291 32))) (= (x1045 x957) x147) (= (x890 x281) x1123) (= x33 (x553 x741)) (= x273 (ite (= x836 0) x958 (ite (<= x836 32) x318 (ite (<= x836 64) x1043 (ite (<= x836 96) x954 (ite (>= 128 x836) x960 (ite (<= x836 160) x322 (ite (<= x836 192) x985 (ite (>= 224 x836) x824 x125))))))))) (<= x611 1461501637330902918203684832716283019655932542975) (= (x1045 x740) x1002) (= (x474 (+ x467 32)) x1141) (= x1123 x335) (= x985 (x26 x836 x2 x550 x376 x563 x1083 x569)) (= (x474 (+ x291 128)) x661) (= (x1045 x291) x18) (= (x474 (+ x291 160)) x54) (= x965 (x1045 x291)) (= x958 (x399 0)) (= x995 (x1045 x291)) (= x1043 (x793 x836 x373 x217)) (= x780 (x474 (+ x291 192))) (= x272 (x474 (+ 32 x291))) (= (x474 (+ x407 32)) x741) (= x794 (x553 (x474 (+ x741 96)))) (= x99 (x474 (+ x291 64))) (= (x1045 x537) x813) (= (x306 (- x741 32)) x281) (= x741 x916) (= (x474 (+ 32 x291)) x481) (= (x1045 x291) x876) (= (x1045 x1066) x563) (= x713 (x1045 x1029)) (= (x1045 x777) x217) (= (x553 (x474 (+ x741 64))) x90) (= (x1045 x291) x373) (= x639 (x1045 x481)) (= x1083 (x1045 x45)) (= x600 (x1045 x291)) (= x45 (x474 (+ x291 128))) (= x957 (x474 (+ x291 96))) (= (x1040 x836 x876 x436 x1028 x1002 x116 x314 x744) x824) (= (x474 (+ 32 x291)) x537) (= (x474 (+ x291 64)) x238) (= x777 (x474 (+ 32 x291))) (= (x474 (+ 64 x291)) x1029) (= x1066 (x474 (+ x291 96))) (= (x1045 x238) x417) (< x407 x741) (= x911 (x474 (+ x291 64))) (= (x1143 x836 x965 x813 x713) x954) (= x1167 (x306 (- x741 32))) (= (x1045 x209) x436) (= (x474 (+ x291 32)) x209) (= x561 (x474 (+ x291 96))) (= x314 (x1045 x122)) (= x1198 (x1045 x661)) (= x569 (x1045 x54)) (= x419 (x474 (+ 128 x291))) (= x279 (x1045 x561)) (= x479 (x553 (x474 (+ x741 32)))) (= x740 (x474 (+ 96 x291)))) x101) x190)) x948))
(assert (x962 1781416757497172237285707461672121659281076687163700985222424369352509686768))
(assert (= x449 (and x263 x1187)))
(assert (= x524 (x340 (x418 x817 x524 x577 x1195 x151 x595))))
(assert (x117 x373))
(assert (x117 x48))
(assert (x117 x696))
(assert (x117 x653))
(assert (=> (<= x327 10000) (= (x119 x327) 0)))
(assert (= x269 (or (and x538 x1125) x457)))
(assert (= (x119 (x1143 x836 x965 x813 x713)) (x1143 x836 x965 x813 x713)))
(assert (x117 x313))
(assert (x117 x299))
(assert (x117 x341))
(assert (> (x1143 x223 x44 x806 x575) 10000))
(assert (x745 x1035))
(assert (=> (<= x171 10000) (= 0 (x119 x171))))
(assert (x117 x629))
(assert (x117 x615))
(assert (=> (>= 10000 x951) (= 0 (x119 x951))))
(assert (x102 x1079))
(assert (x117 x986))
(assert (x117 x632))
(assert (x691 x1128))
(assert (= x625 (x180 (x1040 x934 x1147 x112 x625 x694 x729 x696 x877))))
(assert (x344 (ite (< (* (- 32 x186) 8) 256) (x727 2 (* (- 32 x186) 8)) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x117 x693))
(assert (= (x1171 (x1040 x934 x1147 x112 x625 x694 x729 x696 x877)) x694))
(assert (x117 x46))
(assert (x117 x1032))
(assert (x117 x477))
(assert (=> (<= x178 10000) (= 0 (x119 x178))))
(assert (x117 x684))
(assert (x117 x36))
(assert (x962 115792089237316195423570985008687907853269984665640564039457584007913129639903))
(assert (= (x1171 (x1040 x817 x871 x693 x912 x1181 x1179 x535 x1094)) x1181))
(assert (= (x819 (x26 x817 x627 x236 x632 x714 x685 x737)) x685))
(assert (= (and (not x215) x761) x367))
(assert (x117 x1196))
(assert (=> (>= 10000 x764) (= 0 (x119 x764))))
(assert (x117 x510))
(assert (x117 x725))
(assert (=> (>= 10000 x1179) (= (x119 x1179) 0)))
(assert (x117 x1128))
(assert (x117 x583))
(assert (x117 x611))
(assert (=> (<= x871 10000) (= (x119 x871) 0)))
(assert (x117 x186))
(assert (x962 4294967296))
(assert (=> (<= x165 10000) (= 0 (x119 x165))))
(assert (=> (>= 10000 x625) (= 0 (x119 x625))))
(assert (not (x962 (x1143 x817 x127 x1103 x608))))
(assert (= (x706 (x1143 x934 x38 x897 x230)) x897))
(assert (x117 x356))
(assert (=> (>= 10000 x603) (= 0 (x119 x603))))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x26 x817 x627 x236 x632 x714 x685 x737)))
(assert (x690 x1035 63))
(assert (x428 x341))
(assert (x117 x128))
(assert (x117 x1085))
(assert (x117 x942))
(assert (= (=> (and (= x828 (or (not (and (<= x131 1461501637330902918203684832716283019655932542975) (<= 0 x131))) (and (= x143 (x268 x131)) (= x131 x143)) (and (and (not (= x131 (ite (= (x268 x131) x846) x143 (x268 x131)))) (x354 x131 (ite (= (x268 x131) x846) x143 (x268 x131)))) (or (not (and (>= x635 0) (>= 1461501637330902918203684832716283019655932542975 x635))) (not (and (x354 x635 (ite (= (x268 x131) x846) x143 (x268 x131))) (x354 x131 x635))) (= x635 x131) (= (ite (= x846 (x268 x131)) x143 (x268 x131)) x635))))) (= false x19) (= false x526) (= x588 false) (= x850 false)) x828) x791))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x793 64 x478 x664)))
(assert (x117 x1144))
(assert (= x599 (and x402 x883)))
(assert (= x921 (x1171 (x26 x223 x952 x498 x204 x921 x764 x650))))
(assert (x117 x252))
(assert (= (x340 (x1040 x934 x1147 x112 x625 x694 x729 x696 x877)) x1147))
(check-sat)
(exit)
