(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Certora
Generated on: 2024-04-10
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x18 () Int)
(declare-fun x211 () Int)
(declare-fun x74 () Bool)
(declare-fun x26 (Int) Int)
(declare-fun x46 () Int)
(declare-fun x28 () Bool)
(declare-fun x304 () Bool)
(declare-fun x176 () Int)
(declare-fun x337 () Bool)
(declare-fun x119 () Bool)
(declare-fun x324 () Bool)
(declare-fun x103 () Int)
(declare-fun x16 () Int)
(declare-fun x161 () Int)
(declare-fun x185 () Bool)
(declare-fun x268 () Int)
(declare-fun x266 () Int)
(declare-fun x107 (Int) Int)
(declare-fun x235 () Bool)
(declare-fun x250 (Int Int Int Int Int) Int)
(declare-fun x242 () Int)
(declare-fun x243 () Int)
(declare-fun x335 (Int) Int)
(declare-fun x275 () Int)
(declare-fun x42 () Int)
(declare-fun x52 () Bool)
(declare-fun x181 () Int)
(declare-fun x292 () Int)
(declare-fun x111 () Int)
(declare-fun x303 () Int)
(declare-fun x353 () Bool)
(declare-fun x79 () Int)
(declare-fun x249 () Int)
(declare-fun x321 (Int Int) Int)
(declare-fun x311 (Int) Int)
(declare-fun x77 () Int)
(declare-fun x115 () Int)
(declare-fun x1 () Int)
(declare-fun x350 () Int)
(declare-fun x238 () Bool)
(declare-fun x215 (Int Int) Int)
(declare-fun x270 () Int)
(declare-fun x162 () Int)
(declare-fun x195 () Bool)
(declare-fun x177 () Bool)
(declare-fun x116 () Int)
(declare-fun x307 () Int)
(declare-fun x285 () Int)
(declare-fun x62 () Int)
(declare-fun x174 () Int)
(declare-fun x108 () Int)
(declare-fun x352 () Bool)
(declare-fun x147 () Int)
(declare-fun x206 (Int) Int)
(declare-fun x158 () Bool)
(declare-fun x297 () Int)
(declare-fun x100 () Bool)
(declare-fun x205 () Int)
(declare-fun x245 () Int)
(declare-fun x131 () Int)
(declare-fun x296 () Bool)
(declare-fun x228 () Int)
(declare-fun x283 () Bool)
(declare-fun x66 () Bool)
(declare-fun x41 () Bool)
(declare-fun x198 () Bool)
(declare-fun x133 () Int)
(declare-fun x264 () Bool)
(declare-fun x126 () Bool)
(declare-fun x17 () Bool)
(declare-fun x232 () Bool)
(declare-fun x284 () Int)
(declare-fun x127 () Int)
(declare-fun x175 () Int)
(declare-fun x343 () Int)
(declare-fun x151 () Int)
(declare-fun x216 () Int)
(declare-fun x51 () Int)
(declare-fun x49 () Bool)
(declare-fun x61 (Int) Int)
(declare-fun x99 () Int)
(declare-fun x339 () Int)
(declare-fun x27 () Int)
(declare-fun x274 () Bool)
(declare-fun x75 () Int)
(declare-fun x346 () Int)
(declare-fun x67 () Int)
(declare-fun x348 () Bool)
(declare-fun x85 () Int)
(declare-fun x105 () Int)
(declare-fun x76 (Int Int) Int)
(declare-fun x168 () Bool)
(declare-fun x220 () Int)
(declare-fun x3 () Int)
(declare-fun x312 () Int)
(declare-fun x36 () Bool)
(declare-fun x84 () Int)
(declare-fun x24 () Int)
(declare-fun x156 () Int)
(declare-fun x20 () Int)
(declare-fun x187 () Int)
(declare-fun x97 () Bool)
(declare-fun x209 () Int)
(declare-fun x309 () Int)
(declare-fun x64 () Int)
(declare-fun x4 () Int)
(declare-fun x327 () Int)
(declare-fun x208 () Bool)
(declare-fun x336 () Int)
(declare-fun x169 (Int Int) Int)
(declare-fun x47 (Int Int) Int)
(declare-fun x188 () Int)
(declare-fun x224 (Int Int) Int)
(declare-fun x273 () Int)
(declare-fun x136 () Bool)
(declare-fun x29 () Int)
(declare-fun x217 (Int) Int)
(declare-fun x59 () Int)
(declare-fun x72 (Int Int) Int)
(declare-fun x91 () Bool)
(declare-fun x173 () Int)
(declare-fun x71 () Bool)
(declare-fun x183 () Int)
(declare-fun x338 () Int)
(declare-fun x342 () Int)
(declare-fun x48 () Bool)
(declare-fun x262 () Int)
(declare-fun x347 () Int)
(declare-fun x163 (Int) Int)
(declare-fun x287 () Int)
(declare-fun x167 () Int)
(declare-fun x277 (Int) Int)
(declare-fun x197 () Int)
(declare-fun x229 () Int)
(declare-fun x328 () Int)
(declare-fun x210 () Int)
(declare-fun x87 () Int)
(declare-fun x301 () Int)
(declare-fun x106 () Int)
(declare-fun x282 () Int)
(declare-fun x101 () Bool)
(declare-fun x55 () Int)
(declare-fun x267 () Int)
(declare-fun x35 () Int)
(declare-fun x218 (Int) Int)
(declare-fun x73 () Int)
(declare-fun x139 () Int)
(declare-fun x305 () Bool)
(declare-fun x252 () Int)
(declare-fun x170 () Int)
(declare-fun x154 () Int)
(declare-fun x102 () Int)
(declare-fun x157 () Int)
(declare-fun x15 () Int)
(declare-fun x166 () Bool)
(declare-fun x227 () Int)
(declare-fun x98 () Bool)
(declare-fun x258 (Int) Int)
(declare-fun x291 () Bool)
(declare-fun x340 () Int)
(declare-fun x279 () Int)
(declare-fun x190 () Int)
(declare-fun x45 () Int)
(declare-fun x54 (Int Int) Int)
(declare-fun x182 () Int)
(declare-fun x117 () Bool)
(declare-fun x120 () Int)
(declare-fun x207 () Int)
(declare-fun x326 () Int)
(declare-fun x37 () Bool)
(declare-fun x184 () Int)
(declare-fun x319 () Int)
(declare-fun x248 () Int)
(declare-fun x213 () Int)
(declare-fun x70 () Int)
(declare-fun x57 () Int)
(declare-fun x193 () Int)
(declare-fun x5 () Int)
(declare-fun x290 () Int)
(declare-fun x118 () Int)
(declare-fun x189 (Int) Bool)
(declare-fun x254 () Int)
(declare-fun x25 () Int)
(declare-fun x114 () Int)
(declare-fun x259 () Bool)
(declare-fun x81 () Int)
(declare-fun x203 () Bool)
(declare-fun x179 (Int) Int)
(declare-fun x83 () Int)
(declare-fun x92 () Int)
(declare-fun x332 () Int)
(declare-fun x86 () Bool)
(declare-fun x44 () Int)
(declare-fun x80 () Int)
(declare-fun x302 () Int)
(declare-fun x93 () Bool)
(declare-fun x278 () Int)
(declare-fun x153 () Int)
(declare-fun x314 () Int)
(declare-fun x178 () Int)
(declare-fun x261 () Int)
(declare-fun x43 () Int)
(declare-fun x134 (Int) Int)
(declare-fun x95 () Int)
(declare-fun x241 () Int)
(declare-fun x160 () Int)
(declare-fun x276 () Int)
(declare-fun x82 () Int)
(declare-fun x199 () Int)
(declare-fun x200 () Int)
(declare-fun x341 () Bool)
(declare-fun x129 () Int)
(declare-fun x32 () Bool)
(declare-fun x144 () Int)
(declare-fun x256 () Int)
(declare-fun x138 () Int)
(declare-fun x141 () Int)
(declare-fun x240 () Int)
(declare-fun x310 () Int)
(declare-fun x50 () Int)
(declare-fun x11 () Bool)
(declare-fun x349 () Int)
(declare-fun x272 () Int)
(declare-fun x251 () Int)
(declare-fun x22 () Int)
(declare-fun x317 (Int Int Int) Int)
(declare-fun x109 () Bool)
(declare-fun x280 () Int)
(declare-fun x128 () Bool)
(declare-fun x225 () Bool)
(declare-fun x33 () Int)
(declare-fun x8 () Int)
(declare-fun x194 () Int)
(declare-fun x78 () Int)
(declare-fun x38 () Int)
(declare-fun x219 () Int)
(declare-fun x316 () Int)
(declare-fun x289 () Bool)
(declare-fun x323 () Int)
(declare-fun x257 () Int)
(declare-fun x231 () Int)
(declare-fun x239 (Int) Int)
(declare-fun x65 () Int)
(declare-fun x122 () Int)
(declare-fun x113 () Int)
(declare-fun x253 () Int)
(declare-fun x322 () Int)
(declare-fun x135 () Int)
(declare-fun x89 () Int)
(declare-fun x344 (Int) Int)
(declare-fun x186 () Int)
(declare-fun x263 () Bool)
(declare-fun x295 () Int)
(declare-fun x58 () Int)
(declare-fun x12 () Int)
(declare-fun x212 (Int) Int)
(declare-fun x96 () Int)
(declare-fun x56 () Int)
(declare-fun x23 (Int Int) Int)
(declare-fun x31 () Int)
(declare-fun x2 () Int)
(declare-fun x125 () Bool)
(declare-fun x40 () Bool)
(declare-fun x255 () Int)
(declare-fun x226 () Bool)
(declare-fun x271 () Bool)
(declare-fun x247 () Bool)
(declare-fun x137 () Int)
(declare-fun x234 () Int)
(declare-fun x244 () Int)
(declare-fun x30 () Int)
(declare-fun x333 () Int)
(define-fun x132 ((x148 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x148) (>= x148 0)) x148 (- x148 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x334 ((x148 Int)) Int (ite (and (< x148 0) (>= x148 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x148 115792089237316195423570985008687907853269984665640564039457584007913129639936) x148))
(define-fun x180 ((x148 Int)) Int (ite (and (>= x148 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x148)) x148 (ite (and (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 x148) (> 231584178474632390847141970017375815706539969331281128078915168015826259279872 x148)) (- x148 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (>= x148 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (< x148 0)) (+ x148 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x72 x148 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x202 ((x121 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x121) (<= 0 x121)))
(define-fun x146 ((x121 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x121) (>= x121 0)))
(define-fun x204 ((x121 Int) (x110 Int)) Bool (=> (and (> x110 0) (< 0 x121)) (and (>= x121 (x321 x121 x110)) (<= 0 (x321 x121 x110)))))
(define-fun x155 ((x121 Int) (x110 Int)) Bool (=> (and (and (<= 1 x110) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x110)) (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x121) (>= x121 0))) (and (>= (x321 x121 x110) 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x321 x121 x110)))))
(define-fun x53 ((x121 Int) (x110 Int)) Bool (=> (and (> x121 x110) (> x110 1)) (> x121 (x321 x121 x110))))
(define-fun x140 ((x121 Int) (x110 Int)) Bool (=> (and (< 0 x110) (> x121 0)) (= (< x121 x110) (= (x321 x121 x110) 0))))
(define-fun x299 ((x121 Int) (x110 Int)) Bool (=> (and (> x121 0) (< 0 x110)) (and (> (* x110 (x321 x121 x110)) (- x121 x110)) (<= (* (x321 x121 x110) x110) x121))))
(define-fun x294 ((x121 Int) (x110 Int)) Bool (= (- x121 (x224 (- x110 1) x121)) (* x110 (x321 x121 x110))))
(define-fun x265 ((x121 Int) (x110 Int)) Bool (and (x294 x121 x110) (x299 x121 x110) (x53 x121 x110) (x155 x121 x110) (x204 x121 x110) (x140 x121 x110)))
(define-fun x159 ((x121 Int)) Bool (= (x321 0 x121) 0))
(define-fun x150 ((x121 Int)) Bool (= (x321 x121 1) x121))
(define-fun x330 ((x121 Int)) Bool (=> (not (= x121 0)) (= 1 (x321 x121 x121))))
(define-fun x171 ((x121 Int)) Bool (and (x150 x121) (x159 x121) (x330 x121)))
(define-fun x329 ((x121 Int)) Bool (and (= (x224 x121 115792089237316195423570985008687907853269984665640564039457584007913129639935) x121) (= x121 (x224 115792089237316195423570985008687907853269984665640564039457584007913129639935 x121))))
(define-fun x351 ((x121 Int)) Bool (and (= 0 (x224 x121 0)) (= 0 (x224 0 x121))))
(define-fun x237 ((x121 Int)) Bool (= x121 (x224 x121 x121)))
(define-fun x222 ((x121 Int)) Bool (and (x329 x121) (x351 x121) (x237 x121)))
(define-fun x191 ((x121 Int) (x110 Int)) Bool (= (x224 x110 x121) (x224 x121 x110)))
(define-fun x230 ((x121 Int) (x110 Int)) Bool (and (>= (x224 x121 x110) 0) (=> (>= x110 0) (<= (x224 x121 x110) x110)) (=> (<= 0 x121) (<= (x224 x121 x110) x121))))
(define-fun x152 ((x121 Int) (x110 Int)) Bool (and (x230 x121 x110) (x191 x121 x110)))
(define-fun x130 ((x121 Int)) Bool (= (x224 x121 255) (x72 x121 256)))
(define-fun x145 ((x121 Int)) Bool (and (x130 x121) (x152 x121 255)))
(define-fun x201 ((x121 Int) (x110 Int)) Bool (and (>= (x72 x121 x110) 0) (< (x72 x121 x110) x110)))
(define-fun x69 ((x121 Int) (x110 Int)) Bool (=> (and (< 0 x110) (>= x121 0)) (= (= (x72 x121 x110) x121) (> x110 x121))))
(define-fun x143 ((x121 Int) (x110 Int)) Bool (=> (and (and (> (+ x110 x110) x121) (<= x110 x121)) (> x110 0)) (= (x72 x121 x110) (- x121 x110))))
(define-fun x165 ((x121 Int) (x110 Int)) Bool (=> (< 0 x110) (= (+ (* (x321 x121 x110) x110) (x72 x121 x110)) x121)))
(define-fun x19 ((x121 Int) (x110 Int)) Bool (and (x201 x121 x110) (x69 x121 x110) (x165 x121 x110) (x143 x121 x110)))
(define-fun x315 ((x121 Int)) Bool (= 0 (x72 0 x121)))
(define-fun x90 ((x121 Int)) Bool (= 0 (x72 x121 1)))
(define-fun x9 ((x121 Int)) Bool (= (x72 x121 x121) 0))
(define-fun x21 ((x121 Int)) Bool (and (x315 x121) (x9 x121) (x90 x121)))
(define-fun x298 ((x121 Int) (x110 Int)) Bool (= (x169 x121 x110) (* x110 x121)))
(define-fun x6 ((x121 Int) (x110 Int)) Bool (and (= (- (* x121 x110) (* x110 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x169 (- x121 115792089237316195423570985008687907853269984665640564039457584007913129639936) x110)) (= (x169 (- x121 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x110 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* x121 (- x110 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x110 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (* x121 (- x110 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x169 x121 (- x110 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x306 ((x121 Int) (x110 Int)) Bool (=> (and (> x121 0) (< 0 x110)) (= (= (x321 (x180 (x169 x121 x110)) x121) x110) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x169 x121 x110)))))
(define-fun x293 ((x121 Int) (x110 Int)) Bool (=> (and (not (= 0 x121)) (not (= 0 x110))) (and (= (x321 (x169 x121 x110) x110) x121) (= (x321 (x169 x121 x110) x121) x110))))
(define-fun x236 ((x121 Int) (x110 Int)) Bool (=> (and (> x121 0) (< 0 x110)) (= (> x110 (x321 115792089237316195423570985008687907853269984665640564039457584007913129639935 x121)) (< 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x169 x121 x110)))))
(define-fun x196 ((x121 Int) (x110 Int)) Bool (and (= (x180 (x169 x121 x110)) (x180 (x169 (- x121 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x110 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x180 (x169 x121 x110)) (x180 (x169 (- x121 115792089237316195423570985008687907853269984665640564039457584007913129639936) x110))) (= (x180 (x169 x121 x110)) (x180 (x169 x121 (- x110 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))
(define-fun x288 ((x121 Int) (x110 Int)) Bool (and (=> (and (and (> x121 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x121)) (and (> x110 0) (<= x110 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (>= (x169 (- x121 115792089237316195423570985008687907853269984665640564039457584007913129639936) x110) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968)) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x121) (x321 57896044618658097711785492504343953926634992332820282019728792003956564819968 x110)))) (=> (and (and (< 0 x121) (<= x121 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (> x110 0) (<= x110 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (<= x121 (x321 57896044618658097711785492504343953926634992332820282019728792003956564819967 x110)) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x169 x121 x110)))) (=> (and (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x110) (<= x110 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (and (< 0 x121) (<= x121 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x110) (x321 57896044618658097711785492504343953926634992332820282019728792003956564819968 x121)) (>= (x169 x121 (- x110 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968)))) (=> (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x110) (> x110 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (<= x121 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> x121 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (<= (x169 (- x121 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x110 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x121) (x321 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x110)))))))
(define-fun x269 ((x121 Int) (x110 Int)) Bool (and (x196 x121 x110) (x298 x121 x110) (x288 x121 x110) (x306 x121 x110) (x6 x121 x110) (x236 x121 x110) (x293 x121 x110)))
(define-fun x246 ((x121 Int)) Bool (and (= 0 (x169 0 x121)) (= (x169 x121 0) 0)))
(define-fun x142 ((x121 Int)) Bool (and (= x121 (x169 1 x121)) (= (x169 x121 1) x121)))
(define-fun x14 ((x121 Int)) Bool (and (x246 x121) (x142 x121)))
(define-fun x318 ((x121 Int)) Bool (and (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x23 115792089237316195423570985008687907853269984665640564039457584007913129639935 x121)) (= (x23 x121 115792089237316195423570985008687907853269984665640564039457584007913129639935) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(define-fun x112 ((x121 Int)) Bool (and (= (x23 x121 0) x121) (= (x23 0 x121) x121)))
(define-fun x331 ((x121 Int)) Bool (= x121 (x23 x121 x121)))
(define-fun x39 ((x121 Int)) Bool (and (x112 x121) (x331 x121) (x318 x121)))
(define-fun x320 ((x121 Int) (x110 Int)) Bool (= (x23 x110 x121) (x23 x121 x110)))
(define-fun x281 ((x121 Int) (x110 Int)) Bool (and (=> (>= x110 0) (<= x110 (x23 x121 x110))) (=> (>= x121 0) (<= x121 (x23 x121 x110))) (<= (x23 x121 x110) (+ x121 x110))))
(define-fun x345 ((x121 Int) (x110 Int)) Bool (and (x281 x121 x110) (x320 x121 x110)))
(define-fun x63 ((x149 Int)) Int 0)
(define-fun x123 ((x149 Int)) Int 0)
(define-fun x7 ((x149 Int)) Int 0)
(define-fun x88 ((x149 Int)) Int 0)
(define-fun x313 ((x149 Int)) Int 0)
(define-fun x104 ((x149 Int)) Int 0)
(define-fun x260 ((x149 Int)) Int 0)
(define-fun x354 ((x149 Int)) Int (ite (> x349 x149) (x311 x149) 0))
(define-fun x10 ((x149 Int)) Int (ite (and (< x149 x349) (<= 0 x149)) (x277 x149) (x354 x149)))
(define-fun x164 ((x149 Int)) Int (ite (= x149 x251) x96 (x239 x149)))
(define-fun x60 ((x149 Int)) Int (ite (= x149 244) x270 (x88 x149)))
(define-fun x68 ((x149 Int)) Int (ite (and (> (+ x3 276) x149) (<= 276 x149)) (x10 (- (+ x193 x149) 276)) (x123 x149)))
(define-fun x286 ((x149 Int)) Int (ite (= x46 x149) 0 (x68 x149)))
(define-fun x308 ((x149 Int)) Int (ite (= x22 x149) x295 (x335 x149)))
(define-fun x172 ((x149 Int)) Int (ite (= x51 x149) 31029940780905195875731109435447583271917780249877154904291146747782681853952 (x63 x149)))
(define-fun x233 ((x149 Int)) Int (ite (= x149 x275) x194 (x172 x149)))
(define-fun x300 ((x149 Int)) Int (ite (= x149 x242) x24 (x233 x149)))
(define-fun x325 ((x149 Int)) Int (ite (= x149 128) 43476753959904102268827795840112028841276002867101064424599200076275816333312 (x104 x149)))
(define-fun x124 ((x149 Int)) Int (ite (= x149 132) x252 (x325 x149)))
(define-fun x13 ((x149 Int)) Int (ite (= x149 164) 0 (x124 x149)))
(define-fun x192 ((x149 Int)) Int (ite (= x149 196) x194 (x13 x149)))
(define-fun x214 ((x149 Int)) Int (ite (= 228 x149) x24 (x192 x149)))
(define-fun x221 ((x149 Int)) Int (ite (= x149 0) x84 (x179 x149)))
(define-fun x94 ((x149 Int)) Int (ite (and (< x149 160) (>= x149 128)) (x221 (- x149 128)) (x313 x149)))
(define-fun x223 ((x149 Int)) Int (ite (= x149 x182) x27 (x212 x149)))
(define-fun x34 ((x149 Int)) Int 0)
(assert (= x127 (x163 (x317 64 x127 x160))))
(assert (x202 x99))
(assert (x202 x194))
(assert (x202 x187))
(assert (x202 x80))
(assert (x222 x80))
(assert (= (x163 (x317 64 x15 1)) x15))
(assert (= 64 (x134 (x317 64 x16 1))))
(assert (x189 1451294997))
(assert (< 10000 (x250 84 8244 x197 (x215 x57 96) x24)))
(assert (x202 x84))
(assert (x202 x245))
(assert (x189 31029940780905195875731109435447583271917780249877154904291146747782681853952))
(assert (x265 x197 256))
(assert (= (x258 (x250 84 8244 x197 (x215 x57 96) x24)) (x250 84 8244 x197 (x215 x57 96) x24)))
(assert (x145 x80))
(assert (x202 x270))
(assert (x202 x266))
(assert (= (x258 (x317 64 x156 x309)) (x317 64 x156 x309)))
(assert (=> (<= x127 10000) (= (x258 x127) 0)))
(assert (= 0 (x258 79228162514264337593543950336)))
(assert (= (x258 115792089237316195423570985008687907853269984665640564039457584007913129639935) 0))
(assert (> (x317 64 x190 x151) 10000))
(assert (x21 x80))
(assert (x202 x56))
(assert (not (x189 (x317 64 x194 156))))
(assert (= (x206 (x317 64 x173 x227)) x227))
(assert (x21 (ite (> 256 x115) (x76 2 x115) 0)))
(assert (= (x163 (x317 64 x116 x65)) x116))
(assert (= 0 (x258 31029940780905195875731109435447583271917780249877154904291146747782681853952)))
(assert (= (x258 1451294997) 0))
(assert (x202 x284))
(assert (x189 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (= (x258 (+ x95 3)) (x258 x95)))
(assert (= (x134 (x317 64 x156 x309)) 64))
(assert (not (x189 (x317 64 x45 x276))))
(assert (x202 x173))
(assert (x146 x188))
(assert (< 10000 (x317 64 x45 x276)))
(assert (x14 (x76 2 x83)))
(assert (x202 x16))
(assert (=> (>= 10000 x116) (= (x258 x116) 0)))
(assert (x222 x197))
(assert (x222 x18))
(assert (= x156 (x163 (x317 64 x156 x309))))
(assert (x269 1 (x76 2 x122)))
(assert (x21 (ite (> 256 x350) (x76 2 x350) 0)))
(assert (= (=> (and (and (not (= x77 x244)) (<= 1 x280) (>= 1461501637330902918203684832716283019655932542975 x183) (<= 0 x31) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x31) (<= 1 x77) (<= x77 1461501637330902918203684832716283019655932542975) (not (= x77 x280)) (= (< 0 (x218 x244)) x348) (<= x328 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x229 1451294997) (= x170 x205) (<= 1 x252) (<= 0 x25) (>= x183 0) (<= 0 x282) (<= 0 x30) (>= 1461501637330902918203684832716283019655932542975 x170) (<= 0 x207) (= x184 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x346) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x154) (<= x161 4294967295) (<= x85 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= false x28) (<= 0 x161) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x207) (>= 1461501637330902918203684832716283019655932542975 x209) (not (= x252 x244)) (>= x154 0) (= x257 x207) (= x126 false) (= x219 x252) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x4) (<= x25 115792089237316195423570985008687907853269984665640564039457584007913129639935) x168 (<= 0 x85) (>= 1461501637330902918203684832716283019655932542975 x244) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x282) (<= 0 x240) (<= 0 x209) x348 (<= 0 x346) x52 (= (> (x218 x280) 0) x52) (not (= x244 x280)) (<= x240 1461501637330902918203684832716283019655932542975) (= x185 (> (x218 x252) 0)) (>= x244 1) (>= x170 0) (>= 1461501637330902918203684832716283019655932542975 x280) x185 (= x168 (> (x218 x77) 0)) (>= 1461501637330902918203684832716283019655932542975 x30) (= 100 x105) (>= x4 0) (= 5 x67) (>= x328 0) (= x247 false) (= x328 x103) (not (= x77 x252)) (= x289 false) (not (= x280 x252)) (>= 1461501637330902918203684832716283019655932542975 x252)) (and (= x205 x16) (and (and (and (and (= x31 x87) (and (and (> x349 x175) (= (* 32 x270) x174) (= x147 (+ x174 x193)) (= (x215 x197 8) x35) (= x316 (x61 x82)) (= x120 (ite x119 1 0)) (= (x10 x210) x270) (= x12 1451294997) (= (x317 64 x35 x160) x79) (not (> x147 x349)) (= x109 false) (= x1 x339) (<= 1 x92) (<= x8 127) (= (+ x210 31) x175) (= x343 (x54 1 x83)) (= (x217 x287) x92) (= x287 (x317 64 x116 x65)) (= x83 (x224 255 x197)) (= 2 x118) (= x240 x251) (= (x224 x133 x343) x70) (>= 127 x8) (= (x335 x79) x133) (= (+ x287 1) x82) (= (x164 x252) x106) (= x332 (x218 x252)) (= x70 0) (= x58 x106) (= x210 (+ x213 4)) (= x96 (x239 x251)) (>= x332 1) (= (x317 64 x15 1) x65) (= x193 (+ 32 x210)) (= (+ 3 x287) x160) (= x279 x139) (= x225 false) (>= 18446744073709551615 x270) (not (= 2 x113)) (= x167 x114) (= x119 (not (< x87 x316))) (= x138 0)) (or (and (and (= (x107 x249) x108) (not (< x108 x87)) (= x249 (+ x82 1))) x119) (and (= 1 x120) (not x119))))) (= x194 x240)) (and (= x162 464684736) (= (x317 64 x16 1) x50) (= x303 x248) (= x213 (x277 132)) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x349) (= (x277 100) x197) (<= x15 1461501637330902918203684832716283019655932542975) (= x49 false) (= false x101) (= x173 (x215 x303 8)) (= x116 (x277 36)) (= x279 x197) (= (x224 255 x303) x115) (= x103 x303) (= false x40) (= x273 x116) (= x278 x228) (= x198 false) (<= x326 127) (= x284 (ite (not (= x261 0)) 1 0)) (<= 196 x349) (= (x317 64 x173 x227) x181) (= x167 x24) (= x254 x213) (= x15 x339) (= (ite (not (= 0 x141)) 1 0) x261) (= (x224 x62 x336) x141) (= x336 (x54 1 x115)) (<= 1 x342) (= (x277 68) x24) (= x100 false) (= x73 (x317 64 x42 x50)) (= x227 (+ 3 x73)) (= false x203) (= false x136) (>= 127 x326) (= (x277 4) x15) (= (x335 x181) x62) (<= x213 18446744073709551615) (= (x277 0) x278) (= x305 (not (= 0 x284))) (= (x218 x252) x342))) (= x42 x257)))) x17) x232))
(assert (= x35 (x163 (x317 64 x35 x160))))
(assert (x202 x252))
(assert (= (and x296 (not x119)) x353))
(assert (= x45 (x163 (x317 64 x45 x276))))
(assert (x202 x120))
(assert (= 156 (x206 (x317 64 x194 156))))
(assert (x202 x138))
(assert (x14 x194))
(assert (= 64 (x134 (x317 64 x42 x50))))
(assert (= (x321 x57 79228162514264337593543950336) (x215 x57 96)))
(assert (x202 x200))
(assert (> (x317 64 x173 x227) 10000))
(assert (x21 256))
(assert (x202 x275))
(assert (< (x317 64 x194 156) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x202 x135))
(assert (x171 x303))
(assert (= (x215 x80 8) (x321 x80 256)))
(assert (x202 x190))
(assert (and (= 40564819207303340847894502572032 (x76 2 105)) (= 730750818665451459101842416358141509827966271488 (x76 2 159)) (= (x76 2 72) 4722366482869645213696) (= 2 (x76 2 1)) (= (x76 2 182) 6129982163463555433433388108601236734474956488734408704) (= (x76 2 95) 39614081257132168796771975168) (= (x76 2 26) 67108864) (= (x76 2 148) 356811923176489970264571492362373784095686656) (= 42535295865117307932921825928971026432 (x76 2 125)) (= (x76 2 63) 9223372036854775808) (= 2854495385411919762116571938898990272765493248 (x76 2 151)) (= (x76 2 218) 421249166674228746791672110734681729275580381602196445017243910144) (= 102844034832575377634685573909834406561420991602098741459288064 (x76 2 206)) (= 822752278660603021077484591278675252491367932816789931674304512 (x76 2 209)) (= 5070602400912917605986812821504 (x76 2 102)) (= 18014398509481984 (x76 2 54)) (= (x76 2 198) 401734511064747568885490523085290650630550748445698208825344) (= 9444732965739290427392 (x76 2 73)) (= 1569275433846670190958947355801916604025588861116008628224 (x76 2 190)) (= (x76 2 168) 374144419156711147060143317175368453031918731001856) (= (x76 2 160) 1461501637330902918203684832716283019655932542976) (= (x76 2 34) 17179869184) (= 154742504910672534362390528 (x76 2 87)) (= (x76 2 252) 7237005577332262213973186563042994240829374041602535252466099000494570602496) (= 91343852333181432387730302044767688728495783936 (x76 2 156)) (= (x76 2 88) 309485009821345068724781056) (= 178405961588244985132285746181186892047843328 (x76 2 147)) (= (x76 2 150) 1427247692705959881058285969449495136382746624) (= (x76 2 237) 220855883097298041197912187592864814478435487109452369765200775161577472) (= (x76 2 213) 13164036458569648337239753460458804039861886925068638906788872192) (= 1361129467683753853853498429727072845824 (x76 2 130)) (= 53919893334301279589334030174039261347274288845081144962207220498432 (x76 2 225)) (= (x76 2 222) 6739986666787659948666753771754907668409286105635143120275902562304) (= (x76 2 39) 549755813888) (= (x76 2 191) 3138550867693340381917894711603833208051177722232017256448) (= (x76 2 135) 43556142965880123323311949751266331066368) (= 25711008708143844408671393477458601640355247900524685364822016 (x76 2 204)) (= (x76 2 99) 633825300114114700748351602688) (= 4398046511104 (x76 2 42)) (= (x76 2 149) 713623846352979940529142984724747568191373312) (= (x76 2 184) 24519928653854221733733552434404946937899825954937634816) (= 100433627766186892221372630771322662657637687111424552206336 (x76 2 196)) (= 2305843009213693952 (x76 2 61)) (= 137438953472 (x76 2 37)) (= 107839786668602559178668060348078522694548577690162289924414440996864 (x76 2 226)) (= (x76 2 189) 784637716923335095479473677900958302012794430558004314112) (= 4294967296 (x76 2 32)) (= 1267650600228229401496703205376 (x76 2 100)) (= (x76 2 17) 131072) (= 10384593717069655257060992658440192 (x76 2 113)) (= 144115188075855872 (x76 2 57)) (= 98079714615416886934934209737619787751599303819750539264 (x76 2 186)) (= (x76 2 60) 1152921504606846976) (= (x76 2 127) 170141183460469231731687303715884105728) (= 3450873173395281893717377931138512726225554486085193277581262111899648 (x76 2 231)) (= 85070591730234615865843651857942052864 (x76 2 126)) (= 6427752177035961102167848369364650410088811975131171341205504 (x76 2 202)) (= (x76 2 251) 3618502788666131106986593281521497120414687020801267626233049500247285301248) (= (x76 2 38) 274877906944) (= 1532495540865888858358347027150309183618739122183602176 (x76 2 180)) (= 365375409332725729550921208179070754913983135744 (x76 2 158)) (= 766247770432944429179173513575154591809369561091801088 (x76 2 179)) (= (x76 2 70) 1180591620717411303424) (= 22300745198530623141535718272648361505980416 (x76 2 144)) (= 226156424291633194186662080095093570025917938800079226639565593765455331328 (x76 2 247)) (= (x76 2 25) 33554432) (= 83076749736557242056487941267521536 (x76 2 116)) (= (x76 2 235) 55213970774324510299478046898216203619608871777363092441300193790394368) (= 35184372088832 (x76 2 45)) (= (x76 2 123) 10633823966279326983230456482242756608) (= (x76 2 192) 6277101735386680763835789423207666416102355444464034512896) (= 1208925819614629174706176 (x76 2 80)) (= 11692013098647223345629478661730264157247460343808 (x76 2 163)) (= (x76 2 138) 348449143727040986586495598010130648530944) (= (x76 2 112) 5192296858534827628530496329220096) (= 5708990770823839524233143877797980545530986496 (x76 2 152)) (= (x76 2 137) 174224571863520493293247799005065324265472) (= (x76 2 153) 11417981541647679048466287755595961091061972992) (= (x76 2 35) 34359738368) (= (x76 2 248) 452312848583266388373324160190187140051835877600158453279131187530910662656) (= (x76 2 30) 1073741824) (= 2722258935367507707706996859454145691648 (x76 2 131)) (= (x76 2 52) 4503599627370496) (= 158456325028528675187087900672 (x76 2 97)) (= (x76 2 142) 5575186299632655785383929568162090376495104) (= 431359146674410236714672241392314090778194310760649159697657763987456 (x76 2 228)) (= 12554203470773361527671578846415332832204710888928069025792 (x76 2 193)) (= (x76 2 111) 2596148429267413814265248164610048) (= (x76 2 117) 166153499473114484112975882535043072) (= (x76 2 89) 618970019642690137449562112) (= 10889035741470030830827987437816582766592 (x76 2 133)) (= (x76 2 81) 2417851639229258349412352) (= (x76 2 119) 664613997892457936451903530140172288) (= 524288 (x76 2 19)) (= 8388608 (x76 2 23)) (= (x76 2 65) 36893488147419103232) (= 316912650057057350374175801344 (x76 2 98)) (= 2993155353253689176481146537402947624255349848014848 (x76 2 171)) (= (x76 2 29) 536870912) (= (x76 2 33) 8589934592) (= 332306998946228968225951765070086144 (x76 2 118)) (= 562949953421312 (x76 2 49)) (= (x76 2 220) 1684996666696914987166688442938726917102321526408785780068975640576) (= 590295810358705651712 (x76 2 69)) (= (x76 2 176) 95780971304118053647396689196894323976171195136475136) (= (x76 2 21) 2097152) (= (x76 2 51) 2251799813685248) (= (x76 2 230) 1725436586697640946858688965569256363112777243042596638790631055949824) (= 5846006549323611672814739330865132078623730171904 (x76 2 162)) (= (x76 2 16) 65536) (= (x76 2 55) 36028797018963968) (= 512 (x76 2 9)) (= 10141204801825835211973625643008 (x76 2 103)) (= 128 (x76 2 7)) (= (x76 2 104) 20282409603651670423947251286016) (= 200867255532373784442745261542645325315275374222849104412672 (x76 2 197)) (= 8 (x76 2 3)) (= 2361183241434822606848 (x76 2 71)) (= (x76 2 132) 5444517870735015415413993718908291383296) (= (x76 2 28) 268435456) (= (x76 2 214) 26328072917139296674479506920917608079723773850137277813577744384) (= 9903520314283042199192993792 (x76 2 93)) (= 134217728 (x76 2 27)) (= 25108406941546723055343157692830665664409421777856138051584 (x76 2 194)) (= 215679573337205118357336120696157045389097155380324579848828881993728 (x76 2 227)) (= 11972621413014756705924586149611790497021399392059392 (x76 2 173)) (= (x76 2 157) 182687704666362864775460604089535377456991567872) (= (x76 2 2) 4) (= (x76 2 108) 324518553658426726783156020576256) (= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x76 2 256)) (= 5316911983139663491615228241121378304 (x76 2 122)) (= 302231454903657293676544 (x76 2 78)) (= (x76 2 110) 1298074214633706907132624082305024) (= 147573952589676412928 (x76 2 67)) (= (x76 2 245) 56539106072908298546665520023773392506479484700019806659891398441363832832) (= (x76 2 208) 411376139330301510538742295639337626245683966408394965837152256) (= 87112285931760246646623899502532662132736 (x76 2 136)) (= 32 (x76 2 5)) (= (x76 2 46) 70368744177664) (= 38685626227668133590597632 (x76 2 85)) (= (x76 2 53) 9007199254740992) (= (x76 2 234) 27606985387162255149739023449108101809804435888681546220650096895197184) (= 77371252455336267181195264 (x76 2 86)) (= 4194304 (x76 2 22)) (= (x76 2 129) 680564733841876926926749214863536422912) (= 20769187434139310514121985316880384 (x76 2 114)) (= (x76 2 238) 441711766194596082395824375185729628956870974218904739530401550323154944) (= 3064991081731777716716694054300618367237478244367204352 (x76 2 181)) (= (x76 2 56) 72057594037927936) (= (x76 2 161) 2923003274661805836407369665432566039311865085952) (= 748288838313422294120286634350736906063837462003712 (x76 2 169)) (= (x76 2 128) 340282366920938463463374607431768211456) (= (x76 2 134) 21778071482940061661655974875633165533184) (= (x76 2 223) 13479973333575319897333507543509815336818572211270286240551805124608) (= (x76 2 255) 57896044618658097711785492504343953926634992332820282019728792003956564819968) (= (x76 2 250) 1809251394333065553493296640760748560207343510400633813116524750123642650624) (= (x76 2 203) 12855504354071922204335696738729300820177623950262342682411008) (= (x76 2 74) 18889465931478580854784) (= (x76 2 217) 210624583337114373395836055367340864637790190801098222508621955072) (= 6582018229284824168619876730229402019930943462534319453394436096 (x76 2 212)) (= (x76 2 8) 256) (= (x76 2 11) 2048) (= (x76 2 106) 81129638414606681695789005144064) (= 3533694129556768659166595001485837031654967793751237916243212402585239552 (x76 2 241)) (= 1393796574908163946345982392040522594123776 (x76 2 140)) (= (x76 2 6) 64) (= 52656145834278593348959013841835216159447547700274555627155488768 (x76 2 215)) (= 576460752303423488 (x76 2 59)) (= (x76 2 185) 49039857307708443467467104868809893875799651909875269632) (= (x76 2 24) 16777216) (= 1048576 (x76 2 20)) (= 23945242826029513411849172299223580994042798784118784 (x76 2 174)) (= (x76 2 216) 105312291668557186697918027683670432318895095400549111254310977536) (= (x76 2 165) 46768052394588893382517914646921056628989841375232) (= 1237940039285380274899124224 (x76 2 90)) (= (x76 2 94) 19807040628566084398385987584) (= 1496577676626844588240573268701473812127674924007424 (x76 2 170)) (= 1329227995784915872903807060280344576 (x76 2 120)) (= (x76 2 195) 50216813883093446110686315385661331328818843555712276103168) (= 23384026197294446691258957323460528314494920687616 (x76 2 164)) (= (x76 2 66) 73786976294838206464) (= 696898287454081973172991196020261297061888 (x76 2 139)) (= 2658455991569831745807614120560689152 (x76 2 121)) (= 68719476736 (x76 2 36)) (= 4951760157141521099596496896 (x76 2 92)) (= (x76 2 101) 2535301200456458802993406410752) (= (x76 2 107) 162259276829213363391578010288128) (= 12259964326927110866866776217202473468949912977468817408 (x76 2 183)) (= (x76 2 253) 14474011154664524427946373126085988481658748083205070504932198000989141204992) (= 19342813113834066795298816 (x76 2 84)) (= (x76 2 244) 28269553036454149273332760011886696253239742350009903329945699220681916416) (= 1099511627776 (x76 2 40)) (= (x76 2 13) 8192) (= 37778931862957161709568 (x76 2 75)) (= 604462909807314587353088 (x76 2 79)) (= 2787593149816327892691964784081045188247552 (x76 2 141)) (= 862718293348820473429344482784628181556388621521298319395315527974912 (x76 2 229)) (= 51422017416287688817342786954917203280710495801049370729644032 (x76 2 205)) (= (x76 2 146) 89202980794122492566142873090593446023921664) (= 79228162514264337593543950336 (x76 2 96)) (= (x76 2 154) 22835963083295358096932575511191922182123945984) (= 8796093022208 (x76 2 43)) (= 93536104789177786765035829293842113257979682750464 (x76 2 166)) (= (x76 2 47) 140737488355328) (= (x76 2 219) 842498333348457493583344221469363458551160763204392890034487820288) (= (x76 2 172) 5986310706507378352962293074805895248510699696029696) (= (x76 2 48) 281474976710656) (= (x76 2 41) 2199023255552) (= 44601490397061246283071436545296723011960832 (x76 2 145)) (= (x76 2 18) 262144) (= (x76 2 200) 1606938044258990275541962092341162602522202993782792835301376) (= (x76 2 249) 904625697166532776746648320380374280103671755200316906558262375061821325312) (= (x76 2 50) 1125899906842624) (= 191561942608236107294793378393788647952342390272950272 (x76 2 177)) (= (x76 2 0) 1) (= (x76 2 243) 14134776518227074636666380005943348126619871175004951664972849610340958208) (= 4096 (x76 2 12)) (= (x76 2 233) 13803492693581127574869511724554050904902217944340773110325048447598592) (= (x76 2 82) 4835703278458516698824704) (= 18446744073709551616 (x76 2 64)) (= 2147483648 (x76 2 31)) (= 11150372599265311570767859136324180752990208 (x76 2 143)) (= 2475880078570760549798248448 (x76 2 91)) (= 3369993333393829974333376885877453834204643052817571560137951281152 (x76 2 221)) (= (x76 2 242) 7067388259113537318333190002971674063309935587502475832486424805170479104) (= 41538374868278621028243970633760768 (x76 2 115)) (= (x76 2 188) 392318858461667547739736838950479151006397215279002157056) (= (x76 2 187) 196159429230833773869868419475239575503198607639501078528) (= 205688069665150755269371147819668813122841983204197482918576128 (x76 2 207)) (= (x76 2 4) 16) (= (x76 2 124) 21267647932558653966460912964485513216) (= (x76 2 211) 3291009114642412084309938365114701009965471731267159726697218048) (= 26959946667150639794667015087019630673637144422540572481103610249216 (x76 2 224)) (= (x76 2 199) 803469022129495137770981046170581301261101496891396417650688) (= 75557863725914323419136 (x76 2 76)) (= (x76 2 155) 45671926166590716193865151022383844364247891968) (= (x76 2 109) 649037107316853453566312041152512) (= 295147905179352825856 (x76 2 68)) (= (x76 2 62) 4611686018427387904) (= (x76 2 175) 47890485652059026823698344598447161988085597568237568) (= (x76 2 77) 151115727451828646838272) (= (x76 2 246) 113078212145816597093331040047546785012958969400039613319782796882727665664) (= (x76 2 236) 110427941548649020598956093796432407239217743554726184882600387580788736) (= (x76 2 178) 383123885216472214589586756787577295904684780545900544) (= (x76 2 210) 1645504557321206042154969182557350504982735865633579863348609024) (= (x76 2 167) 187072209578355573530071658587684226515959365500928) (= (x76 2 44) 17592186044416) (= 6901746346790563787434755862277025452451108972170386555162524223799296 (x76 2 232)) (= 32768 (x76 2 15)) (= 288230376151711744 (x76 2 58)) (= (x76 2 240) 1766847064778384329583297500742918515827483896875618958121606201292619776) (= (x76 2 14) 16384) (= (x76 2 83) 9671406556917033397649408) (= 1024 (x76 2 10)) (= (x76 2 254) 28948022309329048855892746252171976963317496166410141009864396001978282409984) (= 3213876088517980551083924184682325205044405987565585670602752 (x76 2 201)) (= (x76 2 239) 883423532389192164791648750371459257913741948437809479060803100646309888)))
(assert (x202 x319))
(assert (x21 (ite (< x122 256) (x76 2 x122) 0)))
(assert (x202 x70))
(assert (< (x250 84 8244 x197 (x215 x57 96) x24) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x202 x278))
(assert (= (x258 x73) (x258 (+ x73 3))))
(assert (x202 x303))
(assert (x21 x197))
(assert (= (x317 64 x234 1) (x258 (x317 64 x234 1))))
(assert (x14 32))
(assert (x202 x35))
(assert (= (x258 (+ 1 x287)) (x258 x287)))
(assert (x21 (ite (> 256 x83) (x76 2 x83) 0)))
(assert (= (x258 (x317 64 x309 x156)) (x317 64 x309 x156)))
(assert (x21 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (not (x189 (x250 84 8244 x197 (x215 x57 96) x24))))
(assert (x202 x129))
(assert (= (x134 (x317 64 x45 x276)) 64))
(assert (x222 x336))
(assert (not (x189 (x317 64 x156 x309))))
(assert (x202 x114))
(assert (x202 x89))
(assert (=> (<= x234 10000) (= (x258 x234) 0)))
(assert (x202 x105))
(assert (not (x189 (x317 64 x127 x160))))
(assert (x19 x80 256))
(assert (x171 x80))
(assert (= (x258 (+ 3 x287)) (x258 x287)))
(assert (= (x54 1 x115) (x180 (ite (< x115 256) (x76 2 x115) 0))))
(assert (x202 x144))
(assert (x202 x178))
(assert (x19 (ite (> 256 x122) (x76 2 x122) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (not x232))
(assert (x202 x193))
(assert (x202 x279))
(assert (= 84 (x134 (x250 84 8244 x197 (x215 x57 96) x24))))
(assert (x202 x253))
(assert (= (x134 (x317 64 x194 156)) 64))
(assert (=> (>= 10000 x251) (= 0 (x258 x251))))
(assert (= (x206 (x317 64 x35 x160)) x160))
(assert (= x158 (or x263 x91)))
(assert (x269 1 (x76 2 x83)))
(assert (x202 x342))
(assert (x202 x322))
(assert (x202 x261))
(assert (x202 x349))
(assert (x202 x174))
(assert (= (x317 64 x194 156) (x258 (x317 64 x194 156))))
(assert (= 64 (x134 (x317 64 x116 x65))))
(assert (=> (>= 10000 x24) (= 0 (x258 x24))))
(assert (= (x258 (x317 64 x116 x65)) (x317 64 x116 x65)))
(assert (x202 x113))
(assert (> (x317 64 x194 156) 10000))
(assert (x269 1 (x76 2 x115)))
(assert (< 10000 (x317 64 x42 x50)))
(assert (= (x258 (x317 64 x190 x151)) (x317 64 x190 x151)))
(assert (= (x258 4294967295) 0))
(assert (x222 x343))
(assert (x152 x62 x336))
(assert (= (x206 (x317 64 x309 x156)) x156))
(assert (= (x317 64 x15 1) (x258 (x317 64 x15 1))))
(assert (not (x189 (x317 64 x42 x50))))
(assert (and (= (x169 27 3) 81) (= (x169 9 3) 27) (= (x169 9 9) 81) (= 9 (x169 3 3))))
(assert (=> (<= x197 10000) (= 0 (x258 x197))))
(assert (x202 x92))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x317 64 x127 x160)))
(assert (x14 (x76 2 x350)))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x317 64 x234 1)))
(assert (< (x317 64 x156 x309) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x202 x131))
(assert (x202 x43))
(assert (x189 1461501637330902918203684832716283019655932542975))
(assert (x202 x157))
(assert (x202 x45))
(assert (x14 (x76 2 x115)))
(assert (x202 x81))
(assert (= (x258 (x317 64 x35 x160)) (x317 64 x35 x160)))
(assert (x202 x5))
(assert (= x274 (and x125 (not x66))))
(assert (= 0 (x258 57896044618658097711785492504343953926634992332820282019728792003956564819967)))
(assert (= (and x259 x71) x263))
(assert (= x309 (x163 (x317 64 x309 x156))))
(assert (= 0 (x258 43476753959904102268827795840112028841276002867101064424599200076275816333312)))
(assert (x202 x292))
(assert (x202 x312))
(assert (x202 x251))
(assert (= (x215 x57 96) (x344 (x250 84 8244 x197 (x215 x57 96) x24))))
(assert (x202 x210))
(assert (x202 x295))
(assert (x14 (x76 2 x122)))
(assert (x202 x137))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x317 64 x45 x276)))
(assert (x222 x256))
(assert (x202 x62))
(assert (x19 (ite (< x83 256) (x76 2 x83) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x345 x2 x64))
(assert (x202 x175))
(assert (= (and x71 (not x259)) x91))
(assert (x202 x350))
(assert (not (x189 (x317 64 x116 x65))))
(assert (= (x258 (x317 64 x173 x227)) (x317 64 x173 x227)))
(assert (x171 x57))
(assert (=> (<= x173 10000) (= (x258 x173) 0)))
(assert (x152 x133 x343))
(assert (=> (>= 10000 x190) (= (x258 x190) 0)))
(assert (= x160 (x206 (x317 64 x127 x160))))
(assert (= 64 (x134 (x317 64 x127 x160))))
(assert (x202 x228))
(assert (x202 x262))
(assert (x202 x326))
(assert (x202 x3))
(assert (x202 x96))
(assert (x202 x102))
(assert (x202 x248))
(assert (= x173 (x163 (x317 64 x173 x227))))
(assert (x202 x139))
(assert (x202 x273))
(assert (not (x189 (x317 64 x16 1))))
(assert (x171 x197))
(assert (= x50 (x206 (x317 64 x42 x50))))
(assert (= (x206 (x317 64 x45 x276)) x276))
(assert (x202 x242))
(assert (= (=> (and (and (= false x117) (= false x11) (= x41 false) (= 100 x157) (= false x128) (= 1 x29) (= x220 x170) (= x314 x207) (= 1 x319) (= x38 x328)) (and (= x234 x220) (and (and (= x18 (x54 1 x350)) (= x352 (or (not (= 0 x78)) (not x305))) (= x111 (x317 64 x190 x151)) (= false x86) (= x243 (x224 x256 x18)) (= (x317 64 x234 1) x276) (>= 127 x59) (= (ite (not (= 0 x135)) 1 0) x78) (<= x59 127) (= (x218 x252) x322) (>= x322 1) (= (x215 x80 8) x190) (= x337 false) (= (x317 64 x45 x276) x95) (= x99 x80) (= false x48) (= (ite (not (= x243 0)) 1 0) x135) (= x151 (+ x95 3)) (= x231 464684736) (= false x37) (= false x235) (= x38 x80) (= x93 false) (= x350 (x224 255 x80)) (= (x308 x111) x256)) (= x314 x45)))) x352) x226))
(assert (= (x206 (x317 64 x15 1)) 1))
(assert (x202 x27))
(assert (x202 x141))
(assert (x189 79228162514264337593543950336))
(assert (= (x180 (ite (> 256 x83) (x76 2 x83) 0)) (x54 1 x83)))
(assert (= (x258 1461501637330902918203684832716283019655932542975) 0))
(assert (=> (<= x35 10000) (= 0 (x258 x35))))
(assert (x202 x290))
(assert (x202 x256))
(assert (x202 x343))
(assert (x202 x1))
(assert (x202 x176))
(assert (x189 464684736))
(assert (= (x206 (x317 64 x16 1)) 1))
(assert (= x24 (x26 (x250 84 8244 x197 (x215 x57 96) x24))))
(assert (x202 x46))
(assert (=> (<= (x215 x57 96) 10000) (= (x258 (x215 x57 96)) 0)))
(assert (x202 x316))
(assert (x146 x157))
(assert (not (x189 (x317 64 x35 x160))))
(assert (x152 x256 x18))
(assert (=> (<= x45 10000) (= 0 (x258 x45))))
(assert (x39 x64))
(assert (> (x317 64 x35 x160) 10000))
(assert (= x17 (=> (and (= 244 x302) (= x156 (x250 84 8244 x197 (x215 x57 96) x24)) (= x46 (+ x3 276)) (= (x60 244) x266) (= (> x266 0) x66) (= (x217 x287) x347) (= x57 (* x194 79228162514264337593543950336)) (= (+ x144 276) x51) (= x3 (* x270 32)) (= x144 (* 32 x270))) (and (=> (and (and (or (and (and (= x255 x338) (= x255 (x317 64 x309 x156))) (not x259)) (and x259 (and (= x338 x216) (= (x317 64 x156 x309) x216)))) (and (>= x285 1) (= (x60 244) x285) (= (> x309 x156) x259) (= x309 (x286 276)))) x66) x32) (=> (and (not x66) (= x156 x268)) x166)))))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x317 64 x15 1)))
(assert (= x32 (=> (and (= x290 (x60 244)) (= (not (< 1 x290)) x304)) (and x304 (=> (= x268 x338) x166)))))
(assert (x202 x302))
(assert (x202 x188))
(assert (= (x134 (x317 64 x15 1)) 64))
(assert (x202 x29))
(assert (x202 x285))
(assert (= x65 (x206 (x317 64 x116 x65))))
(assert (x202 x51))
(assert (x202 x115))
(assert (x189 1150964472))
(assert (x202 x106))
(assert (x202 x42))
(assert (x202 x108))
(assert (x202 x2))
(assert (x202 x267))
(assert (x222 255))
(assert (x171 256))
(assert (x265 x80 256))
(assert (=> (>= 10000 x77) (= (x258 x77) 0)))
(assert (= 64 (x134 (x317 64 x309 x156))))
(assert (not (x189 (x317 64 x234 1))))
(assert (=> (<= x194 10000) (= (x258 x194) 0)))
(assert (x202 x347))
(assert (= (x317 64 x45 x276) (x258 (x317 64 x45 x276))))
(assert (x19 x197 256))
(assert (= x42 (x163 (x317 64 x42 x50))))
(assert (= 1 (x206 (x317 64 x234 1))))
(assert (x202 x64))
(assert (= (x258 (+ 1 x82)) (x258 x82)))
(assert (> (x317 64 x116 x65) 10000))
(assert (x222 x133))
(assert (x202 x243))
(assert (x202 x272))
(assert (= true x296))
(assert (= (x134 (x317 64 x173 x227)) 64))
(assert (x202 x244))
(assert (= 8244 (x163 (x250 84 8244 x197 (x215 x57 96) x24))))
(assert (< (x317 64 x116 x65) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x317 64 x190 x151)))
(assert (x269 32 x270))
(assert (x202 x8))
(assert (x202 x57))
(assert (x269 79228162514264337593543950336 x194))
(assert (x202 x33))
(assert (x19 (ite (> 256 x115) (x76 2 x115) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (x134 (x317 64 x35 x160)) 64))
(assert (x202 x211))
(assert (x202 x333))
(assert (x202 x234))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x317 64 x309 x156)))
(assert (x265 x303 256))
(assert (= (x163 (x317 64 x234 1)) x234))
(assert (= 0 (x258 1150964472)))
(assert (=> (<= x280 10000) (= 0 (x258 x280))))
(assert (= x190 (x163 (x317 64 x190 x151))))
(assert (x202 x24))
(assert (= 64 (x134 (x317 64 x234 1))))
(assert (= (x317 64 x16 1) (x258 (x317 64 x16 1))))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x317 64 x35 x160)))
(assert (= x195 (or x274 x158)))
(assert (x146 x105))
(assert (x202 x59))
(assert (x202 x44))
(assert (x202 x87))
(assert (not (x189 (x317 64 x309 x156))))
(assert (x202 x118))
(assert (= x197 (x206 (x250 84 8244 x197 (x215 x57 96) x24))))
(assert (= (x54 1 x350) (x180 (ite (> 256 x350) (x76 2 x350) 0))))
(assert (x189 43476753959904102268827795840112028841276002867101064424599200076275816333312))
(assert (x202 x58))
(assert (x202 x254))
(assert (= (x317 64 x127 x160) (x258 (x317 64 x127 x160))))
(assert (x202 x18))
(assert (= 0 (x258 464684736)))
(assert (= x283 (and x195 (not x177))))
(assert (x202 x336))
(assert (x202 x332))
(assert (x202 x167))
(assert (=> (>= 10000 x15) (= 0 (x258 x15))))
(assert (x202 x116))
(assert (x189 4294967295))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x317 64 x16 1)))
(assert (= (x258 18446744073709551615) 0))
(assert (x202 x309))
(assert (< (x317 64 x42 x50) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x202 x241))
(assert (= x194 (x163 (x317 64 x194 156))))
(assert (=> (>= 10000 x16) (= (x258 x16) 0)))
(assert (x202 x199))
(assert (x202 x147))
(assert (x189 18446744073709551615))
(assert (not (x189 (x317 64 x190 x151))))
(assert (x189 57896044618658097711785492504343953926634992332820282019728792003956564819967))
(assert (=> (>= 10000 x42) (= 0 (x258 x42))))
(assert (x202 x323))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x317 64 x173 x227)))
(assert (=> (<= x252 10000) (= 0 (x258 x252))))
(assert (x14 79228162514264337593543950336))
(assert (= (x215 x303 8) (x321 x303 256)))
(assert (x171 79228162514264337593543950336))
(assert (x202 x213))
(assert (x202 x12))
(assert (x202 x83))
(assert (x202 x307))
(assert (= x71 (and x66 x125)))
(assert (> (x317 64 x16 1) 10000))
(assert (x19 (ite (< x350 256) (x76 2 x350) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x202 x186))
(assert (= (x163 (x317 64 x16 1)) x16))
(assert (= (and x296 x119) x271))
(assert (> (x317 64 x156 x309) 10000))
(assert (x202 x55))
(assert (< 10000 (x317 64 x309 x156)))
(assert (= 64 (x134 (x317 64 x190 x151))))
(assert (= (x258 (x317 64 x42 x50)) (x317 64 x42 x50)))
(assert (x14 x270))
(assert (x202 x162))
(assert (= (x215 x197 8) (x321 x197 256)))
(assert (= (x206 (x317 64 x190 x151)) x151))
(assert (x19 x303 256))
(assert (not (x189 (x317 64 x173 x227))))
(assert (x202 x122))
(assert (x202 x310))
(assert (x202 x133))
(assert (x202 x231))
(assert (x202 x78))
(assert (= x98 (or (and x177 x195) x283)))
(assert (= (x54 1 x122) (x180 (ite (< x122 256) (x76 2 x122) 0))))
(assert (= x125 (or x271 x353)))
(assert (x202 x339))
(assert (= (x206 (x317 64 x156 x309)) x309))
(assert (x202 x20))
(assert (x145 x197))
(assert (not (x189 (x317 64 x15 1))))
(assert (x222 x62))
(assert (x265 x57 79228162514264337593543950336))
(assert (x202 x280))
(assert (= x166 (=> (and (or x177 (and (not x177) (and (not (< x245 x33)) (= x245 (x132 (+ x33 1))) (= x323 (x132 (+ 1 x33)))))) (and (not (> x211 x200)) (= (x334 (- x312 x51)) x20) (<= 1 x262) (= (x218 x15) x307) (not (= x333 2)) (= 1 x153) (= 0 x131) (<= x297 127) (= (x132 (+ x51 4)) x275) (= x55 x102) (= (x132 (+ x24 x5)) x27) (= (x317 64 x194 156) x327) (= false x264) (= x295 (x23 x2 x64)) (= x129 31029940780905195875731109435447583271917780249877154904291146747782681853952) (<= x15 1461501637330902918203684832716283019655932542975) (= (x223 x327) x178) (= (x132 (+ 64 x275)) x312) (>= x15 1) (= x5 (x212 x182)) (= x64 (x54 1 x122)) (= x122 (x224 255 x197)) (<= 1 x307) (<= x81 1461501637330902918203684832716283019655932542975) (= 0 x176) (= x194 x89) (= (x317 64 x127 x160) x22) (<= x194 1461501637330902918203684832716283019655932542975) (= x253 (x132 (+ x211 x24))) (= x2 (x335 x22)) (= x340 2) (= x15 x280) (= (x215 x197 8) x127) (= x262 (x218 x280)) (= x44 x89) (= x268 x347) (= 128 x310) (= (x132 (+ x24 x211)) x200) (= x20 68) (= (x94 128) x153) (= x238 false) (= x292 1) (<= 1 x194) (<= x297 127) (= 1150964472 x137) (= x182 (x317 64 x194 156)) (>= x24 1) (= 1 x199) (= 68 x188) (= (x132 (+ 32 x275)) x242) (= x177 (= 0 (ite (= x178 x24) 1 0))) (= x114 x102))) x226)))
(assert (x14 1))
(assert (x39 x2))
(assert (x202 x153))
(assert (x145 x303))
(assert (x202 x301))
(assert (x202 x340))
(assert (< 10000 (x317 64 x127 x160)))
(assert (x202 x15))
(assert (x202 x77))
(assert (x222 x303))
(assert (< 10000 (x317 64 x15 1)))
(assert (x202 x75))
(assert (x269 1 (x76 2 x350)))
(assert (=> (<= x309 10000) (= (x258 x309) 0)))
(assert (x202 x297))
(assert (> (x317 64 x234 1) 10000))
(assert (x202 x197))
(assert (x202 x127))
(assert (x21 x303))
(assert (=> (>= 10000 x244) (= 0 (x258 x244))))
(check-sat)
(exit)
