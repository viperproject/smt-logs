(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Certora
Generated on: 2024-04-10
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x567 () Int)
(declare-fun x584 () Int)
(declare-fun x325 () Int)
(declare-fun x626 () Int)
(declare-fun x514 () Int)
(declare-fun x167 () Bool)
(declare-fun x73 () Bool)
(declare-fun x48 () Int)
(declare-fun x655 () Int)
(declare-fun x592 () Int)
(declare-fun x116 () Int)
(declare-fun x157 (Int) Int)
(declare-fun x26 () Bool)
(declare-fun x624 () Int)
(declare-fun x130 () Bool)
(declare-fun x66 () Int)
(declare-fun x515 () Bool)
(declare-fun x596 () Bool)
(declare-fun x239 () Int)
(declare-fun x121 () Int)
(declare-fun x371 () Bool)
(declare-fun x591 () Int)
(declare-fun x133 () Int)
(declare-fun x286 () Int)
(declare-fun x198 () Int)
(declare-fun x609 (Int) Int)
(declare-fun x14 () Int)
(declare-fun x213 () Int)
(declare-fun x526 () Int)
(declare-fun x156 () Int)
(declare-fun x342 () Int)
(declare-fun x367 () Int)
(declare-fun x161 () Int)
(declare-fun x89 () Bool)
(declare-fun x3 () Int)
(declare-fun x59 () Bool)
(declare-fun x575 () Int)
(declare-fun x389 () Int)
(declare-fun x431 () Int)
(declare-fun x648 () Bool)
(declare-fun x630 (Int Int) Int)
(declare-fun x193 () Int)
(declare-fun x404 () Int)
(declare-fun x407 () Int)
(declare-fun x80 () Int)
(declare-fun x550 () Bool)
(declare-fun x155 () Bool)
(declare-fun x287 () Bool)
(declare-fun x565 () Int)
(declare-fun x313 () Int)
(declare-fun x172 () Int)
(declare-fun x471 () Int)
(declare-fun x296 () Bool)
(declare-fun x324 () Int)
(declare-fun x601 () Int)
(declare-fun x473 () Int)
(declare-fun x23 () Bool)
(declare-fun x638 () Bool)
(declare-fun x505 () Int)
(declare-fun x454 () Bool)
(declare-fun x308 () Bool)
(declare-fun x266 () Int)
(declare-fun x233 () Int)
(declare-fun x38 () Bool)
(declare-fun x47 () Int)
(declare-fun x594 () Bool)
(declare-fun x96 (Int) Int)
(declare-fun x302 () Int)
(declare-fun x114 () Int)
(declare-fun x260 () Int)
(declare-fun x379 () Bool)
(declare-fun x429 () Bool)
(declare-fun x42 (Int Int) Int)
(declare-fun x369 () Int)
(declare-fun x21 () Int)
(declare-fun x608 () Bool)
(declare-fun x204 () Int)
(declare-fun x489 () Int)
(declare-fun x140 () Bool)
(declare-fun x574 () Bool)
(declare-fun x450 () Int)
(declare-fun x315 () Int)
(declare-fun x57 () Int)
(declare-fun x18 () Bool)
(declare-fun x298 () Bool)
(declare-fun x494 () Int)
(declare-fun x501 () Bool)
(declare-fun x433 () Int)
(declare-fun x646 () Int)
(declare-fun x652 () Int)
(declare-fun x564 (Int Int Int Int Int Int) Int)
(declare-fun x301 () Int)
(declare-fun x190 () Int)
(declare-fun x602 () Int)
(declare-fun x244 () Bool)
(declare-fun x236 () Int)
(declare-fun x442 () Int)
(declare-fun x122 () Int)
(declare-fun x589 () Bool)
(declare-fun x109 (Int Int) Int)
(declare-fun x252 () Bool)
(declare-fun x235 () Int)
(declare-fun x319 () Int)
(declare-fun x90 () Int)
(declare-fun x137 () Int)
(declare-fun x430 () Int)
(declare-fun x311 () Int)
(declare-fun x482 () Bool)
(declare-fun x219 () Bool)
(declare-fun x175 () Int)
(declare-fun x632 () Int)
(declare-fun x245 () Int)
(declare-fun x339 () Bool)
(declare-fun x284 () Int)
(declare-fun x361 () Bool)
(declare-fun x227 () Int)
(declare-fun x572 (Int) Int)
(declare-fun x448 () Bool)
(declare-fun x209 (Int Int) Int)
(declare-fun x81 () Int)
(declare-fun x44 () Int)
(declare-fun x207 () Bool)
(declare-fun x524 () Int)
(declare-fun x410 () Bool)
(declare-fun x223 () Int)
(declare-fun x552 (Int) Int)
(declare-fun x560 () Int)
(declare-fun x348 () Bool)
(declare-fun x136 () Bool)
(declare-fun x393 () Int)
(declare-fun x495 () Bool)
(declare-fun x621 () Int)
(declare-fun x54 () Bool)
(declare-fun x440 () Int)
(declare-fun x350 () Bool)
(declare-fun x95 () Bool)
(declare-fun x36 () Int)
(declare-fun x128 () Bool)
(declare-fun x542 () Int)
(declare-fun x588 () Bool)
(declare-fun x166 () Int)
(declare-fun x230 () Int)
(declare-fun x413 () Bool)
(declare-fun x462 () Bool)
(declare-fun x274 () Bool)
(declare-fun x384 () Int)
(declare-fun x484 () Bool)
(declare-fun x427 (Int Int Int Int) Int)
(declare-fun x154 () Bool)
(declare-fun x465 () Bool)
(declare-fun x49 () Int)
(declare-fun x372 () Int)
(declare-fun x409 () Int)
(declare-fun x519 (Int) Int)
(declare-fun x340 () Int)
(declare-fun x504 () Bool)
(declare-fun x355 () Int)
(declare-fun x610 () Int)
(declare-fun x86 () Bool)
(declare-fun x165 () Int)
(declare-fun x466 () Bool)
(declare-fun x509 () Int)
(declare-fun x531 () Int)
(declare-fun x150 () Bool)
(declare-fun x587 () Int)
(declare-fun x539 () Int)
(declare-fun x382 () Bool)
(declare-fun x159 () Int)
(declare-fun x490 () Bool)
(declare-fun x593 () Bool)
(declare-fun x218 () Bool)
(declare-fun x366 () Int)
(declare-fun x184 () Int)
(declare-fun x191 () Int)
(declare-fun x317 () Int)
(declare-fun x123 () Int)
(declare-fun x446 (Int Int Int) Int)
(declare-fun x425 () Bool)
(declare-fun x354 (Int Int) Int)
(declare-fun x468 () Int)
(declare-fun x238 () Int)
(declare-fun x290 (Int) Int)
(declare-fun x181 () Bool)
(declare-fun x400 () Int)
(declare-fun x418 () Int)
(declare-fun x559 () Bool)
(declare-fun x511 () Int)
(declare-fun x497 () Int)
(declare-fun x332 () Bool)
(declare-fun x318 (Int) Int)
(declare-fun x563 () Int)
(declare-fun x304 () Int)
(declare-fun x127 () Int)
(declare-fun x397 () Int)
(declare-fun x583 () Int)
(declare-fun x548 () Bool)
(declare-fun x273 () Bool)
(declare-fun x421 () Int)
(declare-fun x174 () Bool)
(declare-fun x63 () Bool)
(declare-fun x510 () Int)
(declare-fun x52 () Int)
(declare-fun x100 () Bool)
(declare-fun x399 () Int)
(declare-fun x521 () Int)
(declare-fun x206 () Int)
(declare-fun x518 () Int)
(declare-fun x447 (Int) Int)
(declare-fun x143 () Int)
(declare-fun x329 () Int)
(declare-fun x58 () Int)
(declare-fun x333 () Int)
(declare-fun x341 () Int)
(declare-fun x31 () Bool)
(declare-fun x581 () Bool)
(declare-fun x451 () Int)
(declare-fun x525 () Int)
(declare-fun x374 () Int)
(declare-fun x70 () Int)
(declare-fun x322 () Bool)
(declare-fun x98 (Int) Int)
(declare-fun x28 () Int)
(declare-fun x403 () Int)
(declare-fun x508 () Bool)
(declare-fun x536 () Int)
(declare-fun x254 () Bool)
(declare-fun x441 () Bool)
(declare-fun x76 () Int)
(declare-fun x145 () Int)
(declare-fun x255 () Int)
(declare-fun x625 () Int)
(declare-fun x549 () Bool)
(declare-fun x604 () Int)
(declare-fun x176 () Bool)
(declare-fun x620 () Bool)
(declare-fun x225 () Int)
(declare-fun x388 () Bool)
(declare-fun x642 () Bool)
(declare-fun x11 () Int)
(declare-fun x439 () Int)
(declare-fun x605 () Int)
(declare-fun x326 () Int)
(declare-fun x463 () Int)
(declare-fun x460 () Int)
(declare-fun x310 () Bool)
(declare-fun x132 () Int)
(declare-fun x108 () Int)
(declare-fun x488 () Bool)
(declare-fun x221 () Bool)
(declare-fun x129 () Int)
(declare-fun x622 () Int)
(declare-fun x434 () Int)
(declare-fun x479 () Int)
(declare-fun x179 () Int)
(declare-fun x477 () Bool)
(declare-fun x491 () Int)
(declare-fun x452 () Int)
(declare-fun x640 () Bool)
(declare-fun x10 () Bool)
(declare-fun x455 () Int)
(declare-fun x246 () Int)
(declare-fun x351 () Bool)
(declare-fun x437 () Int)
(declare-fun x134 () Int)
(declare-fun x264 () Int)
(declare-fun x464 () Int)
(declare-fun x93 () Int)
(declare-fun x337 () Int)
(declare-fun x558 (Int Int Int Int Int Int Int Int) Int)
(declare-fun x88 () Int)
(declare-fun x643 () Int)
(declare-fun x576 () Int)
(declare-fun x5 () Bool)
(declare-fun x120 () Int)
(declare-fun x614 () Bool)
(declare-fun x461 () Bool)
(declare-fun x97 () Int)
(declare-fun x538 () Int)
(declare-fun x200 () Int)
(declare-fun x283 () Int)
(declare-fun x19 () Int)
(declare-fun x617 () Bool)
(declare-fun x373 () Int)
(declare-fun x144 () Bool)
(declare-fun x101 () Int)
(declare-fun x20 () Bool)
(declare-fun x472 () Int)
(declare-fun x276 () Bool)
(declare-fun x363 () Bool)
(declare-fun x444 () Int)
(declare-fun x199 () Bool)
(declare-fun x41 () Int)
(declare-fun x478 () Bool)
(declare-fun x105 () Bool)
(declare-fun x87 () Int)
(declare-fun x474 (Int) Int)
(declare-fun x636 () Bool)
(declare-fun x432 () Bool)
(declare-fun x570 () Int)
(declare-fun x220 () Int)
(declare-fun x77 () Int)
(declare-fun x335 (Int) Int)
(declare-fun x6 () Bool)
(declare-fun x580 (Int Int Int Int Int) Int)
(declare-fun x258 () Bool)
(declare-fun x316 () Int)
(declare-fun x503 () Int)
(declare-fun x561 () Int)
(declare-fun x257 () Bool)
(declare-fun x378 () Int)
(declare-fun x492 () Bool)
(declare-fun x616 () Bool)
(declare-fun x556 () Bool)
(declare-fun x22 () Int)
(declare-fun x17 () Int)
(declare-fun x376 () Int)
(declare-fun x4 () Int)
(declare-fun x412 () Int)
(declare-fun x288 () Bool)
(declare-fun x603 () Int)
(declare-fun x115 () Int)
(declare-fun x467 () Int)
(declare-fun x496 () Int)
(declare-fun x187 () Bool)
(declare-fun x443 () Int)
(declare-fun x178 () Int)
(declare-fun x292 () Int)
(declare-fun x555 () Int)
(declare-fun x69 () Int)
(declare-fun x104 () Int)
(declare-fun x189 () Int)
(declare-fun x345 () Int)
(declare-fun x641 () Bool)
(declare-fun x528 () Int)
(declare-fun x240 () Bool)
(declare-fun x487 () Int)
(declare-fun x267 () Int)
(declare-fun x33 () Int)
(declare-fun x180 () Bool)
(declare-fun x177 () Bool)
(declare-fun x507 () Int)
(declare-fun x224 () Bool)
(declare-fun x321 () Int)
(declare-fun x314 () Bool)
(declare-fun x475 () Bool)
(declare-fun x343 () Bool)
(declare-fun x229 () Bool)
(declare-fun x623 () Bool)
(declare-fun x202 () Bool)
(declare-fun x586 () Int)
(declare-fun x263 () Bool)
(declare-fun x554 () Bool)
(declare-fun x336 () Bool)
(declare-fun x456 (Int Int Int Int Int Int Int) Int)
(declare-fun x60 (Int Int) Int)
(declare-fun x352 () Int)
(declare-fun x247 () Int)
(declare-fun x644 () Int)
(declare-fun x71 () Int)
(declare-fun x493 () Int)
(declare-fun x635 () Bool)
(declare-fun x512 () Int)
(declare-fun x188 () Bool)
(declare-fun x485 () Bool)
(declare-fun x192 () Int)
(declare-fun x205 () Bool)
(declare-fun x631 () Int)
(declare-fun x152 (Int) Int)
(declare-fun x37 () Bool)
(declare-fun x293 () Int)
(declare-fun x169 () Int)
(declare-fun x569 () Int)
(declare-fun x282 () Bool)
(declare-fun x359 () Int)
(declare-fun x449 (Int) Bool)
(declare-fun x83 (Int) Int)
(declare-fun x435 () Int)
(declare-fun x279 () Int)
(declare-fun x368 () Int)
(declare-fun x84 () Int)
(declare-fun x259 () Int)
(declare-fun x262 () Bool)
(declare-fun x210 () Bool)
(declare-fun x8 () Bool)
(declare-fun x469 () Int)
(declare-fun x46 () Int)
(declare-fun x534 () Int)
(declare-fun x243 () Bool)
(declare-fun x457 () Int)
(declare-fun x118 () Int)
(declare-fun x557 () Bool)
(declare-fun x637 () Int)
(declare-fun x1 () Int)
(declare-fun x364 () Bool)
(declare-fun x370 () Int)
(declare-fun x2 () Bool)
(declare-fun x392 () Int)
(declare-fun x74 () Int)
(declare-fun x295 () Bool)
(declare-fun x645 () Int)
(declare-fun x595 () Bool)
(declare-fun x541 () Int)
(declare-fun x422 () Bool)
(declare-fun x331 () Int)
(declare-fun x43 () Bool)
(declare-fun x148 () Bool)
(declare-fun x92 () Int)
(declare-fun x250 () Int)
(declare-fun x241 () Int)
(declare-fun x458 () Bool)
(declare-fun x599 () Bool)
(declare-fun x272 () Int)
(declare-fun x398 () Int)
(declare-fun x119 () Bool)
(declare-fun x185 () Bool)
(declare-fun x277 () Int)
(declare-fun x436 () Bool)
(declare-fun x654 () Int)
(declare-fun x265 () Int)
(declare-fun x523 () Bool)
(declare-fun x330 () Bool)
(declare-fun x203 (Int) Int)
(declare-fun x628 () Bool)
(declare-fun x24 () Int)
(declare-fun x85 () Int)
(declare-fun x39 () Int)
(declare-fun x291 () Int)
(declare-fun x619 () Bool)
(declare-fun x183 () Int)
(declare-fun x607 () Int)
(declare-fun x386 () Bool)
(declare-fun x380 () Int)
(declare-fun x75 () Int)
(declare-fun x72 () Int)
(declare-fun x103 () Int)
(declare-fun x126 () Bool)
(declare-fun x520 () Bool)
(declare-fun x334 () Int)
(declare-fun x362 () Int)
(declare-fun x300 () Int)
(declare-fun x173 () Int)
(declare-fun x476 () Int)
(declare-fun x196 () Int)
(declare-fun x612 () Int)
(declare-fun x562 () Int)
(declare-fun x51 () Bool)
(declare-fun x647 (Int Int) Int)
(declare-fun x299 () Int)
(declare-fun x215 () Bool)
(declare-fun x453 () Int)
(declare-fun x522 () Int)
(declare-fun x571 () Bool)
(declare-fun x45 () Int)
(declare-fun x64 () Bool)
(declare-fun x55 () Int)
(declare-fun x338 () Int)
(declare-fun x385 () Int)
(declare-fun x164 () Int)
(declare-fun x182 () Bool)
(declare-fun x423 () Bool)
(declare-fun x375 () Int)
(declare-fun x65 () Bool)
(declare-fun x598 () Bool)
(declare-fun x194 () Bool)
(declare-fun x573 () Int)
(declare-fun x124 () Int)
(declare-fun x149 () Int)
(declare-fun x417 () Int)
(declare-fun x186 () Bool)
(declare-fun x419 () Int)
(declare-fun x365 () Int)
(declare-fun x634 () Bool)
(declare-fun x78 () Int)
(declare-fun x158 () Bool)
(declare-fun x533 () Int)
(declare-fun x532 () Int)
(declare-fun x147 () Int)
(declare-fun x613 (Int) Int)
(declare-fun x320 () Int)
(declare-fun x535 () Bool)
(declare-fun x516 () Bool)
(declare-fun x438 () Bool)
(declare-fun x537 () Int)
(declare-fun x30 () Int)
(declare-fun x53 () Int)
(declare-fun x396 () Int)
(declare-fun x506 () Bool)
(declare-fun x197 () Int)
(declare-fun x483 () Bool)
(declare-fun x481 () Int)
(declare-fun x394 () Int)
(declare-fun x242 () Int)
(declare-fun x360 () Int)
(declare-fun x651 () Int)
(declare-fun x377 () Bool)
(declare-fun x597 () Int)
(declare-fun x629 () Int)
(declare-fun x566 () Int)
(declare-fun x160 () Bool)
(declare-fun x579 () Bool)
(declare-fun x344 () Int)
(declare-fun x34 () Int)
(declare-fun x125 () Bool)
(declare-fun x146 () Bool)
(declare-fun x546 () Int)
(declare-fun x420 () Bool)
(declare-fun x249 () Int)
(declare-fun x222 () Bool)
(declare-fun x356 () Int)
(declare-fun x406 () Bool)
(declare-fun x15 () Bool)
(declare-fun x553 () Int)
(declare-fun x540 () Int)
(declare-fun x285 () Bool)
(declare-fun x294 () Bool)
(declare-fun x111 () Int)
(declare-fun x600 () Bool)
(declare-fun x297 () Bool)
(declare-fun x357 () Int)
(declare-fun x248 () Int)
(declare-fun x231 () Int)
(declare-fun x578 () Bool)
(declare-fun x499 () Int)
(declare-fun x131 () Bool)
(declare-fun x502 () Bool)
(declare-fun x142 () Bool)
(declare-fun x138 () Int)
(declare-fun x618 () Int)
(declare-fun x139 () Int)
(declare-fun x383 () Bool)
(declare-fun x545 (Int) Int)
(declare-fun x391 () Int)
(declare-fun x234 () Int)
(declare-fun x29 () Int)
(declare-fun x353 () Int)
(declare-fun x68 () Int)
(declare-fun x530 () Bool)
(declare-fun x216 () Int)
(declare-fun x551 () Bool)
(declare-fun x214 () Int)
(declare-fun x162 () Int)
(declare-fun x94 () Int)
(declare-fun x268 () Int)
(declare-fun x13 () Bool)
(declare-fun x346 () Int)
(declare-fun x498 () Bool)
(declare-fun x347 () Int)
(declare-fun x381 () Int)
(declare-fun x168 () Int)
(declare-fun x12 () Int)
(declare-fun x135 () Bool)
(declare-fun x217 () Bool)
(declare-fun x390 () Int)
(declare-fun x653 () Int)
(declare-fun x201 () Bool)
(declare-fun x358 () Bool)
(declare-fun x585 () Bool)
(declare-fun x627 () Int)
(declare-fun x305 () Bool)
(declare-fun x82 () Int)
(declare-fun x232 () Int)
(declare-fun x309 () Bool)
(declare-fun x459 () Int)
(declare-fun x56 () Bool)
(declare-fun x35 (Int) Int)
(declare-fun x402 () Int)
(declare-fun x107 () Int)
(define-fun x513 ((x208 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x208) (>= x208 0)) x208 (- x208 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x544 ((x208 Int)) Int (ite (and (< x208 0) (>= x208 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x208 115792089237316195423570985008687907853269984665640564039457584007913129639936) x208))
(define-fun x312 ((x208 Int)) Int (ite (and (>= x208 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x208)) x208 (ite (and (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 x208) (> 231584178474632390847141970017375815706539969331281128078915168015826259279872 x208)) (- x208 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (>= x208 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (< x208 0)) (+ x208 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x109 x208 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x582 ((x62 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x62) (<= 0 x62)))
(define-fun x212 ((x62 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x62) (>= x62 0)))
(define-fun x615 ((x62 Int) (x251 Int)) Bool (=> (and (> x251 0) (< 0 x62)) (and (>= x62 (x647 x62 x251)) (<= 0 (x647 x62 x251)))))
(define-fun x211 ((x62 Int) (x251 Int)) Bool (=> (and (and (<= 1 x251) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x251)) (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x62) (>= x62 0))) (and (>= (x647 x62 x251) 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x647 x62 x251)))))
(define-fun x163 ((x62 Int) (x251 Int)) Bool (=> (and (> x62 x251) (> x251 1)) (> x62 (x647 x62 x251))))
(define-fun x323 ((x62 Int) (x251 Int)) Bool (=> (and (< 0 x251) (> x62 0)) (= (< x62 x251) (= (x647 x62 x251) 0))))
(define-fun x27 ((x62 Int) (x251 Int)) Bool (=> (and (> x62 0) (< 0 x251)) (and (> (* x251 (x647 x62 x251)) (- x62 x251)) (<= (* (x647 x62 x251) x251) x62))))
(define-fun x226 ((x62 Int) (x251 Int)) Bool (= (- x62 (x354 (- x251 1) x62)) (* x251 (x647 x62 x251))))
(define-fun x445 ((x62 Int) (x251 Int)) Bool (and (x226 x62 x251) (x27 x62 x251) (x163 x62 x251) (x211 x62 x251) (x615 x62 x251) (x323 x62 x251)))
(define-fun x269 ((x62 Int)) Bool (= (x647 0 x62) 0))
(define-fun x415 ((x62 Int)) Bool (= (x647 x62 1) x62))
(define-fun x170 ((x62 Int)) Bool (=> (not (= x62 0)) (= 1 (x647 x62 x62))))
(define-fun x633 ((x62 Int)) Bool (and (x415 x62) (x269 x62) (x170 x62)))
(define-fun x7 ((x62 Int)) Bool (and (= (x354 x62 115792089237316195423570985008687907853269984665640564039457584007913129639935) x62) (= x62 (x354 115792089237316195423570985008687907853269984665640564039457584007913129639935 x62))))
(define-fun x275 ((x62 Int)) Bool (and (= 0 (x354 x62 0)) (= 0 (x354 0 x62))))
(define-fun x25 ((x62 Int)) Bool (= x62 (x354 x62 x62)))
(define-fun x153 ((x62 Int)) Bool (and (x7 x62) (x275 x62) (x25 x62)))
(define-fun x237 ((x62 Int) (x251 Int)) Bool (= (x354 x251 x62) (x354 x62 x251)))
(define-fun x328 ((x62 Int) (x251 Int)) Bool (and (>= (x354 x62 x251) 0) (=> (>= x251 0) (<= (x354 x62 x251) x251)) (=> (<= 0 x62) (<= (x354 x62 x251) x62))))
(define-fun x303 ((x62 Int) (x251 Int)) Bool (and (x328 x62 x251) (x237 x62 x251)))
(define-fun x270 ((x62 Int)) Bool (= (x312 x62) (+ (x354 x62 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x109 x62 32))))
(define-fun x486 ((x62 Int)) Bool (and (x303 x62 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x270 x62)))
(define-fun x253 ((x62 Int) (x251 Int)) Bool (and (>= (x109 x62 x251) 0) (< (x109 x62 x251) x251)))
(define-fun x151 ((x62 Int) (x251 Int)) Bool (=> (and (< 0 x251) (>= x62 0)) (= (= x62 (x109 x62 x251)) (> x251 x62))))
(define-fun x79 ((x62 Int) (x251 Int)) Bool (=> (and (< 0 x251) (and (< x62 (+ x251 x251)) (<= x251 x62))) (= (x109 x62 x251) (- x62 x251))))
(define-fun x500 ((x62 Int) (x251 Int)) Bool (=> (< 0 x251) (= x62 (+ (x109 x62 x251) (* (x647 x62 x251) x251)))))
(define-fun x426 ((x62 Int) (x251 Int)) Bool (and (x151 x62 x251) (x79 x62 x251) (x253 x62 x251) (x500 x62 x251)))
(define-fun x349 ((x62 Int)) Bool (= 0 (x109 0 x62)))
(define-fun x416 ((x62 Int)) Bool (= (x109 x62 1) 0))
(define-fun x67 ((x62 Int)) Bool (= 0 (x109 x62 x62)))
(define-fun x306 ((x62 Int)) Bool (and (x416 x62) (x67 x62) (x349 x62)))
(define-fun x106 ((x62 Int)) Bool (= (x354 x62 4294967295) (x109 x62 4294967296)))
(define-fun x110 ((x62 Int)) Bool (and (x106 x62) (x303 x62 4294967295)))
(define-fun x639 ((x62 Int) (x251 Int)) Bool (= (* x251 x62) (x60 x62 x251)))
(define-fun x117 ((x62 Int) (x251 Int)) Bool (and (= (x60 (- x62 115792089237316195423570985008687907853269984665640564039457584007913129639936) x251) (- (* x251 x62) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x251))) (= (x60 (- x62 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x251 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* x62 (- x251 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x251 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x60 x62 (- x251 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* x62 (- x251 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x529 ((x62 Int) (x251 Int)) Bool (=> (and (< 0 x251) (< 0 x62)) (= (= x251 (x647 (x312 (x60 x62 x251)) x62)) (< (x60 x62 x251) 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(define-fun x280 ((x62 Int) (x251 Int)) Bool (=> (and (not (= 0 x62)) (not (= x251 0))) (and (= (x647 (x60 x62 x251) x62) x251) (= (x647 (x60 x62 x251) x251) x62))))
(define-fun x527 ((x62 Int) (x251 Int)) Bool (=> (and (> x251 0) (> x62 0)) (= (< 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x60 x62 x251)) (< (x647 115792089237316195423570985008687907853269984665640564039457584007913129639935 x62) x251))))
(define-fun x141 ((x62 Int) (x251 Int)) Bool (and (= (x312 (x60 x62 x251)) (x312 (x60 (- x62 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x251 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x312 (x60 x62 x251)) (x312 (x60 x62 (- x251 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x312 (x60 x62 x251)) (x312 (x60 (- x62 115792089237316195423570985008687907853269984665640564039457584007913129639936) x251)))))
(define-fun x517 ((x62 Int) (x251 Int)) Bool (and (=> (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x62) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x62)) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x251) (< 0 x251))) (= (>= (x647 57896044618658097711785492504343953926634992332820282019728792003956564819968 x251) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x62)) (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x60 (- x62 115792089237316195423570985008687907853269984665640564039457584007913129639936) x251)))) (=> (and (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x251) (> x251 0)) (and (<= x62 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 0 x62))) (= (<= x62 (x647 57896044618658097711785492504343953926634992332820282019728792003956564819967 x251)) (<= (x60 x62 x251) 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (=> (and (and (<= x251 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> x251 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (<= x62 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 0 x62))) (= (>= (x60 x62 (- x251 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968)) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x251) (x647 57896044618658097711785492504343953926634992332820282019728792003956564819968 x62)))) (=> (and (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x251) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x251)) (and (<= x62 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x62))) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x60 (- x62 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x251 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (>= (x647 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x251)) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x62))))))
(define-fun x195 ((x62 Int) (x251 Int)) Bool (and (x527 x62 x251) (x639 x62 x251) (x117 x62 x251) (x280 x62 x251) (x517 x62 x251) (x529 x62 x251) (x141 x62 x251)))
(define-fun x307 ((x62 Int)) Bool (and (= 0 (x60 x62 0)) (= (x60 0 x62) 0)))
(define-fun x50 ((x62 Int)) Bool (and (= x62 (x60 1 x62)) (= (x60 x62 1) x62)))
(define-fun x547 ((x62 Int)) Bool (and (x307 x62) (x50 x62)))
(define-fun x40 ((x62 Int)) Bool (= (+ (x109 x62 26959946667150639794667015087019630673637144422540572481103610249216) (x354 x62 115792089210356248756420345214020892766250353992003419616917011526809519390720)) (x312 x62)))
(define-fun x261 ((x62 Int)) Bool (and (x303 x62 115792089210356248756420345214020892766250353992003419616917011526809519390720) (x40 x62)))
(define-fun x91 ((x171 Int)) Int 0)
(define-fun x113 ((x171 Int)) Int 0)
(define-fun x61 ((x171 Int)) Int 0)
(define-fun x32 ((x171 Int)) Int (ite (= x444 x171) x164 (x613 x171)))
(define-fun x411 ((x171 Int)) Int (ite (= x246 x171) x238 (x32 x171)))
(define-fun x480 ((x171 Int)) Int (ite (= x171 x342) x653 (x113 x171)))
(define-fun x16 ((x171 Int)) Int (ite (= x171 x539) x246 (x480 x171)))
(define-fun x470 ((x171 Int)) Int (ite (= x171 x570) 96 (x16 x171)))
(define-fun x543 ((x171 Int)) Int (ite (= x171 x591) x626 (x470 x171)))
(define-fun x424 ((x171 Int)) Int (ite (< x171 x626) (x552 x171) 0))
(define-fun x650 ((x171 Int)) Int (ite (and (>= x171 0) (> x626 x171)) (x35 x171) (x424 x171)))
(define-fun x289 ((x171 Int)) Int (ite (and (> (+ x260 x626) x171) (>= x171 x260)) (x650 (- x171 x260)) (x543 x171)))
(define-fun x278 ((x171 Int)) Int (ite (= x171 x537) 0 (x289 x171)))
(define-fun x327 ((x171 Int)) Int (ite (= x459 x171) x193 (x91 x171)))
(define-fun x408 ((x171 Int)) Int (ite (= x171 x116) 0 (x447 x171)))
(define-fun x9 ((x171 Int)) Int (ite (= x250 x171) x333 (x335 x171)))
(define-fun x281 ((x171 Int)) Int 0)
(define-fun x577 ((x171 Int)) Int (ite (= x631 x171) x512 (x411 x171)))
(define-fun x256 ((x171 Int)) Int (ite (= x246 x171) x264 (x577 x171)))
(define-fun x405 ((x171 Int)) Int (ite (= x171 x493) x239 (x256 x171)))
(define-fun x228 ((x171 Int)) Int (ite (= x171 x246) x233 (x405 x171)))
(define-fun x102 ((x171 Int)) Int (ite (= x171 x534) x190 (x228 x171)))
(define-fun x395 ((x171 Int)) Int (ite (= x171 x246) x509 (x102 x171)))
(define-fun x590 ((x171 Int)) Int (ite (= x171 x28) x404 (x395 x171)))
(define-fun x414 ((x171 Int)) Int (ite (= x171 x246) x138 (x590 x171)))
(define-fun x99 ((x171 Int)) Int 0)
(define-fun x568 ((x171 Int)) Int 0)
(define-fun x401 ((x171 Int)) Int (ite (= x518 x171) x605 (x414 x171)))
(define-fun x649 ((x171 Int)) Int (ite (= x171 x246) x326 (x401 x171)))
(define-fun x611 ((x171 Int)) Int (ite (= x52 x171) x347 (x649 x171)))
(define-fun x112 ((x171 Int)) Int 0)
(define-fun x428 ((x171 Int)) Int 0)
(define-fun x271 ((x171 Int)) Int 0)
(define-fun x387 ((x171 Int)) Int 0)
(define-fun x606 ((x171 Int)) Int 0)
(assert (x153 x317))
(assert (= x114 (x152 (x456 x179 x69 x168 x39 x584 x114 x53))))
(assert (x582 x84))
(assert (x582 x601))
(assert (x582 x28))
(assert (x582 x366))
(assert (< 10000 (x446 64 x72 0)))
(assert (x582 x260))
(assert (= (x446 64 x87 0) (x519 (x446 64 x87 0))))
(assert (x582 x239))
(assert (x582 x196))
(assert (not x535))
(assert (= 0 (x519 2747585674)))
(assert (x582 x325))
(assert (x426 x279 32))
(assert (x582 x85))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x446 64 x88 1)))
(assert (= 0 (x519 5192296858534827628530496329220095)))
(assert (=> (<= x584 10000) (= 0 (x519 x584))))
(assert (x582 x430))
(assert (x153 x346))
(assert (x582 x451))
(assert (x582 x88))
(assert (not (x449 (x545 0))))
(assert (= (x157 (x545 0)) 0))
(assert (x582 x122))
(assert (x212 x453))
(assert (x445 x643 18446744073709551616))
(assert (x633 4294967296))
(assert (= (x519 (x446 64 x457 0)) (x446 64 x457 0)))
(assert (= (x519 3926223203) 0))
(assert (= (and x177 (not x614)) x15))
(assert (x445 x643 4294967296))
(assert (x582 x75))
(assert (x582 x510))
(assert (x449 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (< (x580 x179 x57 x284 x107 x592) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x582 x514))
(assert (= (x157 (x564 x179 x402 x352 x213 x646 x92)) x179))
(assert (= (and (not x628) x185) x64))
(assert (x582 x627))
(assert (= 0 (x519 95062290575208969844384888995124054484020786540586235856278617823997344088064)))
(assert (x582 x47))
(assert (x486 x279))
(assert (= (x318 (x446 64 x147 0)) 0))
(assert (x582 x168))
(assert (= (or x410 x383) x56))
(assert (x153 x4))
(assert (= (and (not x348) x224) x285))
(assert (x582 x266))
(assert (x582 x369))
(assert (= (x519 (x564 x179 x402 x352 x213 x646 x92)) (x564 x179 x402 x352 x213 x646 x92)))
(assert (not (x449 (x446 64 x94 0))))
(assert (x449 4294967296))
(assert (= x177 (or x160 x254)))
(assert (= (and x285 x310) x199))
(assert (x582 x189))
(assert (x582 x566))
(assert (= (x209 x464 32) (x647 x464 4294967296)))
(assert (=> (>= 10000 x57) (= 0 (x519 x57))))
(assert (x582 x457))
(assert (= 0 (x519 3424349313)))
(assert (= (x446 64 x246 x355) (x519 (x446 64 x246 x355))))
(assert (x582 x467))
(assert (x582 x443))
(assert (x582 x341))
(assert (= 64 (x157 (x446 64 x232 0))))
(assert (x582 x216))
(assert (= (x647 x58 18446744073709551616) (x209 x58 64)))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x545 0)))
(assert (not (x449 (x580 x179 x57 x284 x107 x592))))
(assert (=> (<= x179 10000) (= 0 (x519 x179))))
(assert (x582 x326))
(assert (= (or x425 x199) x502))
(assert (x547 x286))
(assert (= (x519 281474976710654) 0))
(assert (> (x446 64 x232 0) 10000))
(assert (= x388 (=> (and (= x459 128) (not x63) (= x325 0) (= x63 (> x553 0)) (= 0 x439)) x100)))
(assert (=> (<= x28 10000) (= 0 (x519 x28))))
(assert (= (=> (and (and (and (= x418 x555) (and (and (= x341 x22) (= x326 x101) (= (x446 64 x341 0) x507) (= (x209 x166 32) x111) (= (x414 x518) x605) (= false x294) (= x1 3926223203) (= x518 x496) (= x343 (> x632 x418)) (= (x401 x246) x101) (<= x166 5192296858534827628530496329220095) (= x632 (x209 x166 64)) (= x166 (x9 x44)) (= (+ 1 x507) x44) (>= 127 x82) (= false x550) (<= 1 x70) (= x70 (x474 x246)) (>= 127 x82)) (or (and (and (= x166 x372) (= 0 x17) (= 0 x317)) (not x343)) (and (and (= x317 x166) (= x372 x111) (= x632 x17)) x343)))) (and (= x629 x341) (= false x215))) (and (= x12 x272) (= false x635) (= false x420) (= (x354 4294967295 x346) x272) (= x59 false) (= false x37) (= x293 36) (= x629 x29))) x379) x484))
(assert (x582 x469))
(assert (= (x209 x58 32) (x647 x58 4294967296)))
(assert (x582 x264))
(assert (=> (>= 10000 x114) (= (x519 x114) 0)))
(assert (< 10000 (x558 x179 x324 x259 x331 x300 x421 x362 x367)))
(assert (x449 2747585674))
(assert (x582 x476))
(assert (= (or x15 x523) x581))
(assert (= (x157 (x446 x179 x389 x234)) x179))
(assert (= x367 (x96 (x558 x179 x324 x259 x331 x300 x421 x362 x367))))
(assert (x582 x129))
(assert (= (x647 x166 4294967296) (x209 x166 32)))
(assert (x582 x631))
(assert (x426 x4 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x582 x374))
(assert (= (x318 (x564 x179 x402 x352 x213 x646 x92)) x352))
(assert (x449 115792089210356248756420345214020892766250353992003419616917011526809519390720))
(assert (=> (<= x534 10000) (= 0 (x519 x534))))
(assert (= (x209 x97 32) (x647 x97 4294967296)))
(assert (x582 x316))
(assert (= x362 (x572 (x558 x179 x324 x259 x331 x300 x421 x362 x367))))
(assert (x582 x412))
(assert (= (x519 18446744073709551616) 0))
(assert (= 0 (x519 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x582 x315))
(assert (x582 x193))
(assert (x153 x302))
(assert (x582 x453))
(assert (x582 x156))
(assert (= (x209 x166 64) (x647 x166 18446744073709551616)))
(assert (=> (>= 10000 x631) (= (x519 x631) 0)))
(assert (= x39 (x290 (x456 x179 x69 x168 x39 x584 x114 x53))))
(assert (x582 x360))
(assert (x582 x584))
(assert (=> (>= 10000 x646) (= 0 (x519 x646))))
(assert (x582 x621))
(assert (x582 x570))
(assert (x445 x24 4294967296))
(assert (= (x519 11306221627026004327572806821415535452568768700951083154731830848869460082688) 0))
(assert (x212 x161))
(assert (x582 x612))
(assert (x449 3996733505160547605444383532301681585143293008365648164554827802422395535360))
(assert (x582 x71))
(assert (x582 x268))
(assert (x582 x292))
(assert (=> (>= 10000 x457) (= (x519 x457) 0)))
(assert (x582 x505))
(assert (x582 x78))
(assert (x582 x419))
(assert (x582 x563))
(assert (x153 x279))
(assert (x212 x291))
(assert (= x94 (x203 (x446 64 x94 0))))
(assert (x449 3424349313))
(assert (= x136 (and x18 x244)))
(assert (x449 281474976105855))
(assert (= (x558 x179 x324 x259 x331 x300 x421 x362 x367) (x519 (x558 x179 x324 x259 x331 x300 x421 x362 x367))))
(assert (x449 17082661633206073776221667511317387438037149072250446947292019095911977189376))
(assert (x582 x291))
(assert (x582 x444))
(assert (= x185 (or x305 x298)))
(assert (x582 x442))
(assert (x582 x241))
(assert (x445 x166 18446744073709551616))
(assert (x582 x542))
(assert (= x448 (=> (and (and (= (< x319 x360) x296) (= x360 (x209 x643 64)) (= (+ 1 x197) x637) (= (x335 x637) x643) (<= x643 5192296858534827628530496329220095) (= x197 (x446 64 x147 0)) (= (x209 x643 32) x645) (>= 4294967295 x522)) (or (and (and (= x360 x220) (= x645 x225) (= x643 x223)) x296) (and (and (= 0 x223) (= x225 x643) (= 0 x220)) (not x296)))) x262)))
(assert (x582 x179))
(assert (=> (<= x444 10000) (= 0 (x519 x444))))
(assert (= (x519 83145513425519365092083889619115361079238627081901104498682911535369518317568) 0))
(assert (= (x519 (+ 1 x507)) (x519 x507)))
(assert (= (and x6 x364) x254))
(assert (= (x519 x368) (x519 (+ 1 x368))))
(assert (x582 x372))
(assert (< (x427 x179 x369 x230 x521) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x582 x34))
(assert (= x410 (or x465 x571 x167 x502)))
(assert (= (x519 22069476371602848218683930884395101341062216312509716166891057971082559488000) 0))
(assert (=> (<= x234 10000) (= (x519 x234) 0)))
(assert (x582 x299))
(assert (< (x446 64 x162 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (< 10000 (x564 x179 x402 x352 x213 x646 x92)))
(assert (= (x42 x179 x267) (x519 (x42 x179 x267))))
(assert (x582 x232))
(assert (x582 x525))
(assert (=> (>= 10000 x72) (= 0 (x519 x72))))
(assert (x582 x521))
(assert (x582 x17))
(assert (=> (<= x284 10000) (= (x519 x284) 0)))
(assert (= (x519 57896044618658097711785492504343953926634992332820282019728792003956564819967) 0))
(assert (x582 x11))
(assert (x582 x300))
(assert (= (x519 (x456 x179 x69 x168 x39 x584 x114 x53)) (x456 x179 x69 x168 x39 x584 x114 x53)))
(assert (= (x318 (x446 64 x94 0)) 0))
(assert (=> (>= 10000 x147) (= (x519 x147) 0)))
(assert (> (x427 x179 x369 x230 x521) 10000))
(assert (x582 x175))
(assert (x633 x24))
(assert (x306 x4))
(assert (x582 x120))
(assert (= (or x205 x413) x364))
(assert (x582 x610))
(assert (x582 x471))
(assert (x582 x111))
(assert (= (or x201 x140) x144))
(assert (x306 26959946667150639794667015087019630673637144422540572481103610249216))
(assert (x582 x70))
(assert (= x87 (x203 (x446 64 x87 0))))
(assert (x582 x246))
(assert (x582 x597))
(assert (x582 x337))
(assert (x582 x255))
(assert (x582 x653))
(assert (x582 x355))
(assert (x582 x618))
(assert (x582 x587))
(assert (x582 x352))
(assert (x153 x610))
(assert (= (x290 (x558 x179 x324 x259 x331 x300 x421 x362 x367)) x331))
(assert (x449 18446744073709551616))
(assert (x582 x124))
(assert (= x259 (x318 (x558 x179 x324 x259 x331 x300 x421 x362 x367))))
(assert (x582 x249))
(assert (x306 x317))
(assert (< 10000 (x446 64 x341 0)))
(assert (x153 4294967295))
(assert (x582 x259))
(assert (< (x564 x179 x402 x352 x213 x646 x92) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (=> (<= x493 10000) (= 0 (x519 x493))))
(assert (= x262 (=> (and (and (= (< x175 x503) x6) (= x503 (x354 4294967295 x225))) (or (and (= 0 x561) (not x6)) (and x6 (and (<= x71 4294967295) (= x561 x71) (= (x354 4294967295 x225) x621) (= x71 (x544 (- x621 x175))))))) x436)))
(assert (x261 x77))
(assert (x212 x622))
(assert (=> (<= x259 10000) (= 0 (x519 x259))))
(assert (x110 x302))
(assert (x449 95062290575208969844384888995124054484020786540586235856278617823997344088064))
(assert (x582 x227))
(assert (=> (<= x518 10000) (= (x519 x518) 0)))
(assert (x582 x45))
(assert (x582 x134))
(assert (< 10000 (x446 x179 x389 x234)))
(assert (= (and x581 (not x343)) x276))
(assert (=> (>= 10000 x52) (= 0 (x519 x52))))
(assert (x582 x72))
(assert (x426 x302 4294967296))
(assert (x582 x464))
(assert (= (and x144 x600) x298))
(assert (= (and x623 x441) x167))
(assert (x582 x19))
(assert (= 0 (x519 4294967295)))
(assert (= (x519 x231) (x519 (+ x231 1))))
(assert (x582 x440))
(assert (x582 x591))
(assert (x582 x77))
(assert (= (x519 (x446 64 x147 0)) (x446 64 x147 0)))
(assert (x582 x643))
(assert (= (x318 (x446 64 x72 0)) 0))
(assert (x426 x346 4294967296))
(assert (x582 x373))
(assert (x582 x4))
(assert (x582 x317))
(assert (x582 x213))
(assert (x582 x655))
(assert (= (x203 (x446 64 x341 0)) x341))
(assert (= x324 (x203 (x558 x179 x324 x259 x331 x300 x421 x362 x367))))
(assert (x582 x393))
(assert (= x107 (x290 (x580 x179 x57 x284 x107 x592))))
(assert (= x246 (x203 (x446 64 x246 x355))))
(assert (x582 x329))
(assert (= (x519 (x446 64 x88 1)) (x446 64 x88 1)))
(assert (x582 x607))
(assert (x212 x293))
(assert (= (x157 (x42 x179 x267)) x179))
(assert (= 0 (x318 (x446 64 x162 0))))
(assert (x633 x166))
(assert (= (x519 (+ x468 1)) (x519 x468)))
(assert (x582 x178))
(assert (x449 18446744073709551615))
(assert (x582 x534))
(assert (x261 x610))
(assert (x445 x97 18446744073709551616))
(assert (x449 5192296858534827628530496329220095))
(assert (x582 x265))
(assert (x582 x127))
(assert (= (x519 (x545 0)) (x545 0)))
(assert (x445 x321 4294967296))
(assert (x582 x392))
(assert (x582 x390))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x446 64 x232 0)))
(assert (x582 x644))
(assert (= x89 (or x26 x276)))
(assert (x582 x632))
(assert (= (and (not x244) x18) x383))
(assert (= (x157 (x446 64 x457 0)) 64))
(assert (x153 x225))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x446 64 x457 0)))
(assert (x449 10169665143310828031156355255647684476882607382446834014098282665488175595520))
(assert (x306 x525))
(assert (= (x318 (x446 64 x232 0)) 0))
(assert (= (x427 x179 x369 x230 x521) (x519 (x427 x179 x369 x230 x521))))
(assert (x582 x304))
(assert (=> (<= x355 10000) (= 0 (x519 x355))))
(assert (x582 x30))
(assert (x582 x14))
(assert (x582 x622))
(assert (< (x446 x179 x389 x234) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x582 x223))
(assert (x582 x573))
(assert (=> (<= x421 10000) (= (x519 x421) 0)))
(assert (x582 x497))
(assert (x633 18446744073709551616))
(assert (x449 281474976710655))
(assert (= (x519 (+ 1 x197)) (x519 x197)))
(assert (x582 x311))
(assert (not (x449 (x446 64 x232 0))))
(assert (=> (>= 10000 x324) (= (x519 x324) 0)))
(assert (= x267 (x203 (x42 x179 x267))))
(assert (x582 x431))
(assert (=> (>= 10000 x341) (= 0 (x519 x341))))
(assert (x445 x292 4294967296))
(assert (= (x318 (x446 64 x90 2)) 2))
(assert (x306 x610))
(assert (x582 x370))
(assert (x582 x321))
(assert (x582 x107))
(assert (x582 x532))
(assert (x582 x68))
(assert (= (x290 (x427 x179 x369 x230 x521)) x521))
(assert (x582 x159))
(assert (x110 x225))
(assert (x582 x400))
(assert (x582 x575))
(assert (=> (>= 10000 x521) (= 0 (x519 x521))))
(assert (= x69 (x203 (x456 x179 x69 x168 x39 x584 x114 x53))))
(assert (= (x519 281474976710655) 0))
(assert (x582 x165))
(assert (x582 x546))
(assert (x582 x192))
(assert (x582 x347))
(assert (x582 x164))
(assert (= (x519 3526056329) 0))
(assert (= (x580 x179 x57 x284 x107 x592) (x519 (x580 x179 x57 x284 x107 x592))))
(assert (x582 x53))
(assert (x426 x77 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x582 x319))
(assert (x582 x394))
(assert (x582 x626))
(assert (x306 32))
(assert (= (x519 (x446 64 x72 0)) (x446 64 x72 0)))
(assert (x445 x24 18446744073709551616))
(assert (x449 115792089237316195423570985008687907853269984665640564039457584007913129639934))
(assert (= (x203 (x446 64 x162 0)) x162))
(assert (< (x558 x179 x324 x259 x331 x300 x421 x362 x367) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x212 x487))
(assert (x426 x4 26959946667150639794667015087019630673637144422540572481103610249216))
(assert (x445 x464 18446744073709551616))
(assert (x582 x162))
(assert (< (x42 x179 x267) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (=> (>= 10000 x592) (= 0 (x519 x592))))
(assert (= (x519 37354965825860446615517823748392373755277930281458037646782703421717783511040) 0))
(assert (= x379 (=> (and (and (and (= false x595) (= x242 x94)) (and (and (or (and (and (= x24 x80) (= 0 x129) (= x268 0)) (not x608)) (and (and (= x24 x129) (= x329 x80) (= x268 x644)) x608)) (and (= x231 (x446 64 x94 0)) (= (+ 1 x231) x565) (= x455 x467) (= x94 x624) (= (x209 x24 32) x329) (= x52 x496) (= (x209 x24 64) x644) (= x467 (x611 x246)) (= false x222) (>= 127 x376) (= x347 (x649 x52)) (= false x358) (<= x24 5192296858534827628530496329220095) (= x24 (x9 x565)) (= x608 (> x644 x378)) (>= 127 x376) (<= 1 x315) (= 2747585674 x473) (= x315 (x474 x246)))) (= x378 x555))) (and (= false x598) (= false x150) (= x146 false) (= x29 x242) (= false x466) (= x532 x36) (= x532 (x354 4294967295 x317)) (= x622 36))) x282)))
(assert (x582 x385))
(assert (= (and x51 (not x551)) x201))
(assert (x445 x58 18446744073709551616))
(assert (x582 x279))
(assert (x426 x317 4294967296))
(assert (= (x157 (x446 64 x88 1)) 64))
(assert (x195 4294967296 x286))
(assert (x582 x206))
(assert (x582 x602))
(assert (x633 x643))
(assert (=> (>= 10000 x389) (= (x519 x389) 0)))
(assert (x582 x138))
(assert (x582 x39))
(assert (= (x519 604800) 0))
(assert (=> (>= 10000 x192) (= 0 (x519 x192))))
(assert (= x72 (x203 (x446 64 x72 0))))
(assert (> (x446 64 x94 0) 10000))
(assert (x582 x145))
(assert (x582 x404))
(assert (= (and (not x6) x364) x160))
(assert (= (x519 115792089237316195423570985008687907853269984665640564039457584007913129639934) 0))
(assert (= x571 (and (not x623) x441)))
(assert (x582 x487))
(assert (x582 x526))
(assert (x582 x522))
(assert (= x504 (or x187 x588)))
(assert (x426 x77 26959946667150639794667015087019630673637144422540572481103610249216))
(assert (x582 x356))
(assert (x582 x302))
(assert (x582 x69))
(assert (= x282 (=> (and (= (x474 x246) x575) (= (+ x555 x522) x409) (<= x216 127) (= x287 (or x382 (not x596))) (= x273 (or x498 x176)) (= false x520) (= x2 (= x268 x255)) (= x619 (= 0 x36)) (= x458 (= 0 x268)) (>= 127 x370) (= (not x515) x135) (= x557 false) (>= 127 x216) (= (= x603 x12) x648) (= (x474 x246) x597) (= x485 x322) (= x336 false) (= x530 false) (= x105 false) (= x481 3526056329) (= x638 (= x12 x603)) (= 4 x291) (= 0 x384) (= false x202) (= false x86) (= (and x125 x287) x371) (= x479 274184521717934524641157099916833587209) (= (not x438) x5) (<= 1 x575) (= (and x619 x458) x641) (= false x482) (<= x573 127) (= x49 0) (>= 127 x370) (= (= x36 x149) x330) (= false x483) (= x194 true) (= false x142) (= x182 false) (= false x23) (= 3526056329 x74) (= x601 3424349313) (= x322 (>= x12 x603)) (= (or x135 x579) x176) (= x515 (= x603 x12)) (= false x556) (= x586 0) (= (or (not x257) x638) x210) (= 3424349313 x463) (= x528 2) (<= 1 x514) (= x161 4) (= x579 (not x330)) (= x351 false) (= (and x210 x485) x125) (= false x574) (= x268 x123) (= x642 false) (= x257 (< 0 x522)) (= false x217) (= false x8) (= (and x371 x616) x377) (= x634 false) (= x20 false) (= x148 (or x377 (not x273))) (= (= x603 x12) x438) (= x350 (> x522 0)) (>= x597 1) (<= x573 127) (= x560 3424349313) (= x488 false) (= x258 false) (= 3526056329 x277) (= x506 false) (= (x474 x246) x514) (= x616 (or x641 (not x5))) (= x137 0) (= (and x648 x350) x596) (= (>= x268 x409) x382) (= x501 false) (= false x43) (= (not x2) x498) (= 4 x400) (= false x462)) x148)))
(assert (x582 x333))
(assert (x582 x286))
(assert (x582 x293))
(assert (x445 x321 18446744073709551616))
(assert (x633 x321))
(assert (= x457 (x203 (x446 64 x457 0))))
(assert (= (=> (and (= x553 1) (= x471 x542) (= 0 x489)) x388) x429))
(assert (x582 x592))
(assert (= x90 (x203 (x446 64 x90 2))))
(assert (= 0 (x519 10169665143310828031156355255647684476882607382446834014098282665488175595520)))
(assert (x582 x103))
(assert (x449 274184521717934524641157099916833587209))
(assert (= (x157 (x580 x179 x57 x284 x107 x592)) x179))
(assert (x582 x553))
(assert (x110 x525))
(assert (x582 x396))
(assert (= (x519 (x446 64 x341 0)) (x446 64 x341 0)))
(assert (=> (>= 10000 x232) (= 0 (x519 x232))))
(assert (x582 x236))
(assert (= (x157 (x558 x179 x324 x259 x331 x300 x421 x362 x367)) x179))
(assert (= x585 (or x620 (and x56 x361))))
(assert (x582 x434))
(assert (= (x519 1461501637330902918203684832716283019655932542975) 0))
(assert (x582 x421))
(assert (=> (<= x92 10000) (= 0 (x519 x92))))
(assert (=> (>= 10000 x162) (= (x519 x162) 0)))
(assert (x633 x58))
(assert (x153 115792089210356248756420345214020892766250353992003419616917011526809519390720))
(assert (x261 x4))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x446 64 x90 2)))
(assert (x449 22069476371602848218683930884395101341062216312509716166891057971082559488000))
(assert (x582 x652))
(assert (x582 x143))
(assert (x582 x533))
(assert (x426 x225 4294967296))
(assert (=> (<= x88 10000) (= 0 (x519 x88))))
(assert (x633 x292))
(assert (x212 x393))
(assert (x449 1461501637330902918203684832716283019655932542975))
(assert (= (x157 (x446 64 x147 0)) 64))
(assert (< 10000 (x446 64 x90 2)))
(assert (x306 x279))
(assert (x582 x540))
(assert (x306 4294967296))
(assert (= (x83 (x564 x179 x402 x352 x213 x646 x92)) x646))
(assert (= (x157 (x427 x179 x369 x230 x521)) x179))
(assert (x582 x459))
(assert (x582 x560))
(assert (x582 x567))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x446 64 x246 x355)))
(assert (= (x318 (x446 64 x88 1)) 1))
(assert (x582 x463))
(assert (= (x647 x97 18446744073709551616) (x209 x97 64)))
(assert (x547 4294967296))
(assert (x195 18446744073709551616 x442))
(assert (=> (>= 10000 x53) (= (x519 x53) 0)))
(assert (= (and x581 x343) x26))
(assert (x582 x1))
(assert (x306 x627))
(assert (=> (>= 10000 x331) (= (x519 x331) 0)))
(assert (x212 x375))
(assert (not (x449 (x446 x179 x389 x234))))
(assert (x449 604800))
(assert (x582 x561))
(assert (=> (<= x352 10000) (= 0 (x519 x352))))
(assert (= (x203 (x564 x179 x402 x352 x213 x646 x92)) x402))
(assert (= (and x229 x136) x224))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x446 64 x72 0)))
(assert (x153 x77))
(assert (= (x519 (x446 64 x162 0)) (x446 64 x162 0)))
(assert (= 0 (x519 274184521717934524641157099916833587209)))
(assert (= x140 (and x551 x51)))
(assert (x582 x391))
(assert (x261 x627))
(assert (x426 x627 26959946667150639794667015087019630673637144422540572481103610249216))
(assert (= (or x154 x64) x18))
(assert (x449 57896044618658097711785492504343953926634992332820282019728792003956564819967))
(assert (x582 x418))
(assert (= 0 (x519 75221014002764841290385849979156857177159805926174330335065791131083759157248)))
(assert (x582 x357))
(assert (x582 x104))
(assert (x582 x512))
(assert (=> (>= 10000 x402) (= (x519 x402) 0)))
(assert (x582 x238))
(assert (> (x580 x179 x57 x284 x107 x592) 10000))
(assert (x633 x464))
(assert (= (x519 x625) (x519 (+ x625 1))))
(assert (= (x203 (x446 64 x232 0)) x232))
(assert (x582 x402))
(assert (= x180 (=> (and (= (>= 224 x179) x218) (>= x325 1) (= (x327 x459) x179) (<= x459 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= x260 (x513 (+ x591 32))) (= (x354 115792089237316195423570985008687907853269984665640564039457584007913129639904 x279) x45) (= (x544 (- x265 32)) x193) (= (x544 (- x587 x459)) x265) (= (x513 (+ x342 32)) x539) (= (x513 (+ 32 x459)) x390) (= x537 (x513 (+ x260 x626))) (= x570 (x513 (+ x539 32))) (= x591 (x513 (+ 96 x342))) (<= x459 115792089237316195423570985008687907853269984665640564039457584007913129639934) (< x459 x587) (= x587 (x513 (+ x260 x45))) (= 0 x11) (= x279 (+ x626 31)) (<= 1 x587) (= x342 (x513 (+ x459 32))) (>= 4294967295 x325) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x459)) (and x218 (=> (and (>= x236 1) (= x92 (x278 x165)) (= x511 (x446 64 x90 2)) (= (x278 x541) x592) (= (x278 x19) x259) (= (x545 0) x334) (= x284 (x278 x84)) (= (x513 (+ 128 x390)) x165) (= x121 (x513 (+ x390 96))) (= (x513 (+ 64 x390)) x524) (= x39 (x278 x618)) (= (x278 x524) x331) (= x133 (x513 (+ 32 x390))) (= x646 (x278 x121)) (= (x278 x443) x521) (= (x278 x390) x369) (= x267 (x278 x390)) (= x367 (x278 x55)) (= x84 (x513 (+ 32 x390))) (<= x319 281474976710654) (= x344 (x446 x179 x389 x234)) (= (x564 x179 x402 x352 x213 x646 x92) x338) (= x389 (x278 x390)) (<= x236 281474976105855) (= (x513 (+ x390 192)) x55) (= (x278 x78) x300) (= x443 (x513 (+ x390 64))) (= x116 (x446 64 x90 2)) (= x374 (x98 x76)) (= (x513 (+ 160 x390)) x431) (= (x278 x403) x168) (= (x558 x179 x324 x259 x331 x300 x421 x362 x367) x200) (= (x446 64 x90 2) x76) (< x319 x356) (= (x278 x133) x352) (= x107 (x278 x567)) (= x469 (x513 (+ 32 x390))) (= (x278 x227) x421) (= x159 (x513 (+ 128 x390))) (= (x278 x562) x362) (= (x278 x390) x69) (= x567 (x513 (+ x390 64))) (= (x513 (+ 96 x390)) x34) (= (x278 x431) x53) (not (> x236 x319)) (= x381 (x456 x179 x69 x168 x39 x584 x114 x53)) (= x132 (x427 x179 x369 x230 x521)) (= x460 (x580 x179 x57 x284 x107 x592)) (<= 1 x319) (= (x513 (+ x390 32)) x396) (= (x513 (+ x390 96)) x541) (= x618 (x513 (+ x390 64))) (= (x278 x390) x402) (= x569 (x42 x179 x267)) (= x114 (x278 x159)) (= (x278 x390) x57) (= x236 (x447 x511)) (= x324 (x278 x390)) (= (+ 604800 x236) x356) (= (x513 (+ 32 x390)) x19) (= x230 (x278 x396)) (= x584 (x278 x34)) (= (x513 (+ 96 x390)) x78) (= (x513 (+ x390 128)) x227) (= (ite (= 0 x179) x334 (ite (>= 32 x179) x569 (ite (<= x179 64) x344 (ite (<= x179 96) x132 (ite (>= 128 x179) x460 (ite (<= x179 160) x338 (ite (<= x179 192) x381 (ite (<= x179 224) x200 x192)))))))) x90) (>= 4294967295 x374) (= (x278 x304) x213) (= (x513 (+ 160 x390)) x562) (= 604800 x313) (= x403 (x513 (+ 32 x390))) (= (x278 x469) x234) (= x191 0) (= (x513 (+ x390 64)) x304)) x448)))))
(assert (= x53 (x572 (x456 x179 x69 x168 x39 x584 x114 x53))))
(assert (= 0 (x318 (x446 64 x341 0))))
(assert (< (x446 64 x147 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x582 x184))
(assert (= x355 (x318 (x446 64 x246 x355))))
(assert (not (x449 (x446 64 x246 x355))))
(assert (x582 x399))
(assert (= (x446 x179 x389 x234) (x519 (x446 x179 x389 x234))))
(assert (x449 4294967295))
(assert (= (x203 (x446 x179 x389 x234)) x389))
(assert (x582 x583))
(assert (x449 3926223203))
(assert (x426 x610 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x582 x234))
(assert (x582 x41))
(assert (x582 x346))
(assert (= 0 (x519 3996733505160547605444383532301681585143293008365648164554827802422395535360)))
(assert (x582 x562))
(assert (x582 x272))
(assert (= (x203 (x446 64 x88 1)) x88))
(assert (x582 x191))
(assert (x582 x301))
(assert (= 0 (x519 17082661633206073776221667511317387438037149072250446947292019095911977189376)))
(assert (=> (>= 10000 x230) (= (x519 x230) 0)))
(assert (=> (>= 10000 x87) (= (x519 x87) 0)))
(assert (= x594 (=> (and (and (= x653 x496) (and (= x319 x555) (and (= false x207) (= x147 (x650 4)) (= (x650 36) x175) (= x593 false) (= x190 (x228 x534)) (<= x127 127) (= x301 0) (= x655 (x102 x246)) (= (x354 115792089210356248756420345214020892766250353992003419616917011526809519390720 x610) x531) (>= 127 x127) (= x391 3526056329) (= x655 x509) (= (x544 (- x653 x246)) x184) (<= x175 4294967295) (= x435 (x474 x246)) (= 95062290575208969844384888995124054484020786540586235856278617823997344088064 x533) (= 95062290575208969844384888995124054484020786540586235856278617823997344088064 x531) (= (< 0 x184) x244) (= 0 x394) (>= x435 1) (= (x650 0) x610) (<= x147 1461501637330902918203684832716283019655932542975) (= x534 x496)))) (and (= x131 false) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x626) (= x196 x626) (= false x240) (= false x13) (= false x589) (>= x626 68) (= x255 x33) (= false x274))) (and (=> (and x244 (and (= (ite (> x189 0) x189 (ite (= (x354 115792089210356248756420345214020892766250353992003419616917011526809519390720 x77) 95062290575208969844384888995124054484020786540586235856278617823997344088064) 1 0)) x41) (= x229 (= x41 0)) (= (x354 115792089210356248756420345214020892766250353992003419616917011526809519390720 x4) x77) (= (x650 0) x4) (= (ite (> x143 0) x143 (ite (= 75221014002764841290385849979156857177159805926174330335065791131083759157248 (x354 115792089210356248756420345214020892766250353992003419616917011526809519390720 x77)) 1 0)) x189) (= (ite (< 0 x3) x3 (ite (= (x354 115792089210356248756420345214020892766250353992003419616917011526809519390720 x77) 37354965825860446615517823748392373755277930281458037646782703421717783511040) 1 0)) x143) (= (ite (= x77 60251815758091960814504532506789884758906720856416801639681197757806040580096) (ite (= 60251815758091960814504532506789884758906720856416801639681197757806040580096 x77) 1 0) (ite (= 22069476371602848218683930884395101341062216312509716166891057971082559488000 (x354 115792089210356248756420345214020892766250353992003419616917011526809519390720 x77)) 1 0)) x3))) (and (=> (and (and (= (ite (= 11306221627026004327572806821415535452568768700951083154731830848869460082688 x77) (ite (= 11306221627026004327572806821415535452568768700951083154731830848869460082688 x77) 1 0) (ite (= 10169665143310828031156355255647684476882607382446834014098282665488175595520 (x354 115792089210356248756420345214020892766250353992003419616917011526809519390720 x77)) 1 0)) x563) (= (ite (< 0 x563) x563 (ite (= (x354 115792089210356248756420345214020892766250353992003419616917011526809519390720 x77) 3996733505160547605444383532301681585143293008365648164554827802422395535360) 1 0)) x526) (= (= x526 0) x348)) x229) (and (=> (and (and (and (= (+ x183 1) x380) (= (x446 64 x162 0) x183) (= x440 (x209 x464 32)) (= x464 (x335 x380)) (= x365 (x209 x464 64)) (= x310 (< x319 x365)) (>= 1461501637330902918203684832716283019655932542975 x162) (= (x650 4) x162) (<= x464 5192296858534827628530496329220095)) (or (and (and (= x204 x365) (= x464 x299) (= x471 x440)) x310) (and (not x310) (and (= x299 0) (= x471 x464) (= 0 x204))))) (not x348)) x429) (=> (and (and (and (= (ite (= x77 17082661633206073776221667511317387438037149072250446947292019095911977189376) (ite (= x77 17082661633206073776221667511317387438037149072250446947292019095911977189376) 1 0) (ite (= 83145513425519365092083889619115361079238627081901104498682911535369518317568 (x354 115792089210356248756420345214020892766250353992003419616917011526809519390720 x77)) 1 0)) x607) (= (= x607 0) x623)) (or (and (and (= (x609 x417) x104) (= (x446 64 x88 1) x536) (= x417 (+ 1 x536)) (<= x104 18446744073709551615) (= (x650 4) x88) (= x553 1) (>= 18446744073709551615 x88) (= x542 0) (= x104 x489)) (not x623)) (and x623 (and (= x553 0) (= 0 x489) (= x542 0))))) x348) x388))) (=> (and (and (= x489 0) (= x553 1) (= 0 x542)) (not x229)) x388))) (=> (and (not x244) (and (= 0 x325) (= x627 (x650 0)) (= (ite (= x337 x66) 1 0) x540) (= (x354 115792089210356248756420345214020892766250353992003419616917011526809519390720 x627) x355) (= x459 224) (= (x446 64 x246 x355) x66) (= x439 x540))) x100)))))
(assert (= (x519 281474976105855) 0))
(assert (x306 x302))
(assert (x449 75221014002764841290385849979156857177159805926174330335065791131083759157248))
(assert (x582 x94))
(assert (x582 x80))
(assert (> (x446 64 x147 0) 10000))
(assert (= (x318 (x446 x179 x389 x234)) x234))
(assert (x582 x147))
(assert (x110 x346))
(assert (x582 x245))
(assert (= (x519 (x446 64 x232 0)) (x446 64 x232 0)))
(assert (=> (<= x246 10000) (= 0 (x519 x246))))
(assert (> (x545 0) 10000))
(assert (not (x449 (x42 x179 x267))))
(assert (= (and x144 (not x600)) x305))
(assert (= x174 (=> (and (and (and (= false x559) (= x87 x320)) (and (and (or (and x600 (and (= x68 x241) (= x546 x316) (= x302 x321))) (and (and (= x68 0) (= 0 x302) (= x316 x321)) (not x600))) (and (>= 127 x156) (= x264 x566) (= x283 x87) (<= x321 5192296858534827628530496329220095) (= x321 (x335 x491)) (= x241 (x209 x321 64)) (= (> x241 x433) x600) (= false x617) (= x512 (x411 x631)) (>= 127 x156) (<= 1 x81) (= x491 (+ 1 x437)) (= 3926223203 x266) (= x566 (x577 x246)) (= x631 x496) (= false x126) (= (x446 64 x87 0) x437) (= x81 (x474 x246)) (= (x209 x321 32) x546))) (= x433 x555))) (and (= 36 x375) (= false x516) (= false x155) (= (x354 4294967295 x525) x366) (= x332 false) (= false x119) (= x603 x366) (= x29 x320))) x95)))
(assert (x445 x464 4294967296))
(assert (> (x456 x179 x69 x168 x39 x584 x114 x53) 10000))
(assert (x110 x317))
(assert (x582 x493))
(assert (= (=> (and (and (and (= x263 false) (= x72 x198)) (and (and (or (and x614 (and (= x292 x108) (= x14 x85) (= x48 x346))) (and (not x614) (and (= 0 x85) (= 0 x108) (= x346 x292)))) (and (= x122 (x590 x246)) (= x186 false) (= x468 (x446 64 x72 0)) (= (x395 x28) x404) (= x432 false) (<= x434 127) (>= 5192296858534827628530496329220095 x292) (= x14 (x209 x292 64)) (= x612 1277010402) (= x206 x72) (= x48 (x209 x292 32)) (>= x430 1) (= x292 (x9 x169)) (= x169 (+ 1 x468)) (= x138 x122) (= x28 x496) (= (< x472 x14) x614) (>= 127 x434) (= x430 (x474 x246)))) (= x472 x555))) (and (= (+ x319 x214) x442) (= false x548) (= (* x286 4294967296) x145) (= x29 x198) (= x214 (ite (> x522 x561) x522 x561)) (= x120 (* 18446744073709551616 x442)) (= x250 (+ x368 1)) (= x252 false) (= x368 (x446 64 x147 0)) (= (+ x145 x175 x120) x333) (= 36 x453) (= (x354 4294967295 x225) x286) (>= 281474976710655 x442))) x484) x436))
(assert (x582 x375))
(assert (x582 x472))
(assert (x582 x220))
(assert (x306 x346))
(assert (=> (<= x107 10000) (= 0 (x519 x107))))
(assert (= 64 (x157 (x446 64 x341 0))))
(assert (x582 x284))
(assert (x582 x118))
(assert (x582 x389))
(assert (< 10000 (x446 64 x457 0)))
(assert (x582 x214))
(assert (= (x157 (x446 64 x72 0)) 64))
(assert (x582 x324))
(assert (x582 x331))
(assert (x582 x48))
(assert (= (x209 x292 32) (x647 x292 4294967296)))
(assert (x449 83145513425519365092083889619115361079238627081901104498682911535369518317568))
(assert (= (x519 (+ 1 x437)) (x519 x437)))
(assert (= (x209 x292 64) (x647 x292 18446744073709551616)))
(assert (=> (>= 10000 x300) (= 0 (x519 x300))))
(assert (x449 60251815758091960814504532506789884758906720856416801639681197757806040580096))
(assert (= (x157 (x446 64 x162 0)) 64))
(assert (= x369 (x203 (x427 x179 x369 x230 x521))))
(assert (=> (>= 10000 x267) (= 0 (x519 x267))))
(assert (> (x446 64 x87 0) 10000))
(assert (= x205 (and (not x296) x585)))
(assert (x582 x82))
(assert (= (x519 115792089210356248756420345214020892766250353992003419616917011526809519390720) 0))
(assert (x445 x58 4294967296))
(assert (x582 x376))
(assert (x582 x204))
(assert (= x441 (and x224 x348)))
(assert (= (x318 (x456 x179 x69 x168 x39 x584 x114 x53)) x168))
(assert (= (x519 115792089237316195423570985008687907853269984665640564039457584007913129639904) 0))
(assert (x582 x367))
(assert (x582 x190))
(assert (= x284 (x318 (x580 x179 x57 x284 x107 x592))))
(assert (x426 x525 4294967296))
(assert (= x535 (=> (and (and (and (= x249 x555) (and (or (and (and (= 0 x75) (= 0 x385) (= x97 x525)) (not x551)) (and x551 (and (= x525 x235) (= x311 x75) (= x97 x385)))) (and (= x554 false) (= x654 (+ 1 x21)) (= x21 (x446 64 x457 0)) (= (x613 x444) x164) (= x340 (x32 x246)) (= 1277010402 x399) (= (x335 x654) x97) (>= 5192296858534827628530496329220095 x97) (= x583 (x474 x246)) (= (< x249 x311) x551) (>= x583 1) (= x444 x496) (= x311 (x209 x97 64)) (= x457 x412) (= x235 (x209 x97 32)) (= x340 x238) (<= x451 127) (>= 127 x451) (= x422 false)))) (and (= x492 false) (= x345 x457))) (and (>= 1461501637330902918203684832716283019655932542975 x450) (= x636 false) (<= x496 1461501637330902918203684832716283019655932542975) (<= 0 x172) (= x29 x345) (<= 0 x496) (= x494 x246) (= (> (x474 x246) 0) x158) (<= 0 x499) (= false x295) (<= 1 x246) (>= 1461501637330902918203684832716283019655932542975 x246) (<= x29 1461501637330902918203684832716283019655932542975) (= false x478) x158 (>= 281474976710655 x555) (<= 0 x651) (>= x604 0) (>= x555 0) (<= x499 1461501637330902918203684832716283019655932542975) (= x54 false) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x651) (>= x450 0) (>= 4294967295 x172) (>= x29 0) (>= x353 0) (>= x139 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x452) (>= 1461501637330902918203684832716283019655932542975 x353) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x173) (<= 0 x173) (= x576 3526056329) (<= 0 x248) (<= x248 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x139) (= 0 x538) (= 2 x115) (<= x604 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 36 x487) (>= x452 0))) x174)))
(assert (x582 x108))
(assert (= (x157 (x456 x179 x69 x168 x39 x584 x114 x53)) x179))
(assert (x582 x524))
(assert (not (x449 (x427 x179 x369 x230 x521))))
(assert (x633 x97))
(assert (< (x446 64 x94 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= x592 (x83 (x580 x179 x57 x284 x107 x592))))
(assert (= x584 (x83 (x456 x179 x69 x168 x39 x584 x114 x53))))
(assert (= true x51))
(assert (= 0 (x519 60251815758091960814504532506789884758906720856416801639681197757806040580096)))
(assert (x582 x161))
(assert (< (x446 64 x341 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x582 x166))
(assert (x582 x225))
(assert (= (x209 x643 32) (x647 x643 4294967296)))
(assert (= (x318 (x427 x179 x369 x230 x521)) x230))
(assert (= (x647 x643 18446744073709551616) (x209 x643 64)))
(assert (= 64 (x157 (x446 64 x94 0))))
(assert (= (x209 x321 64) (x647 x321 18446744073709551616)))
(assert (= (=> (= x361 (< 0 x439)) (and (=> (not x361) x180) (=> x361 x448))) x100))
(assert (= (x209 x24 64) (x647 x24 18446744073709551616)))
(assert (x212 x400))
(assert (> (x446 64 x88 1) 10000))
(assert (x582 x365))
(assert (x153 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (= x588 (and x608 x89)))
(assert (x582 x605))
(assert (x582 x24))
(assert (x449 3526056329))
(assert (= (x519 (+ 1 x21)) (x519 x21)))
(assert (= (=> (and (and (and (= false x475) (= x232 x397)) (and (= x30 x555) (and (and (= x247 (x405 x246)) (= (x446 64 x232 0) x625) (= x103 2747585674) (= (x209 x58 32) x419) (<= 1 x118) (= x118 (x474 x246)) (= false x549) (= x496 x493) (= (x209 x58 64) x245) (= x247 x233) (= (+ x625 1) x398) (= x652 x232) (<= x124 127) (>= 5192296858534827628530496329220095 x58) (= x239 (x256 x493)) (>= 127 x124) (= x58 (x335 x398)) (= x243 false) (= x628 (> x245 x30))) (or (and x628 (and (= x255 x245) (= x58 x505) (= x47 x419))) (and (not x628) (and (= x47 x58) (= x505 0) (= 0 x255))))))) (and (= false x130) (= false x181) (= false x73) (= (x354 4294967295 x302) x510) (= x29 x397) (= false x386) (= x510 x149) (= 36 x393))) x594) x95))
(assert (= 0 (x519 18446744073709551615)))
(assert (x582 x87))
(assert (x547 x442))
(assert (not (x449 (x446 64 x162 0))))
(assert (x153 x525))
(assert (not (x449 (x456 x179 x69 x168 x39 x584 x114 x53))))
(assert (x449 37354965825860446615517823748392373755277930281458037646782703421717783511040))
(assert (= x523 (and x177 x614)))
(assert (= 64 (x157 (x446 64 x87 0))))
(assert (x582 x58))
(assert (x582 x509))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x446 64 x87 0)))
(assert (= (x152 (x558 x179 x324 x259 x331 x300 x421 x362 x367)) x421))
(assert (= (x318 (x446 64 x87 0)) 0))
(assert (x582 x646))
(assert (x582 x541))
(assert (and (= (x60 9 9) 81) (= 81 (x60 27 3)) (= (x60 9 3) 27) (= (x60 3 3) 9)))
(assert (x582 x55))
(assert (x445 x292 18446744073709551616))
(assert (x582 x362))
(assert (x445 x166 4294967296))
(assert (=> (<= x39 10000) (= 0 (x519 x39))))
(assert (x582 x407))
(assert (=> (>= 10000 x94) (= (x519 x94) 0)))
(assert (not (x449 (x446 64 x72 0))))
(assert (x582 x313))
(assert (x582 x267))
(assert (x582 x439))
(assert (x582 x359))
(assert (x426 x627 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (x157 (x446 64 x246 x355)) 64))
(assert (x582 x340))
(assert (= (x519 (+ 1 x536)) (x519 x536)))
(assert (= (x519 x183) (x519 (+ 1 x183))))
(assert (x582 x92))
(assert (not (x449 (x446 64 x341 0))))
(assert (= x92 (x152 (x564 x179 x402 x352 x213 x646 x92))))
(assert (x449 281474976710654))
(assert (x582 x233))
(assert (x582 x518))
(assert (x582 x97))
(assert (x582 x230))
(assert (= (and x89 (not x608)) x187))
(assert (x582 x57))
(assert (x426 x279 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x582 x247))
(assert (not (x449 (x446 64 x90 2))))
(assert (= x425 (and (not x310) x285)))
(assert (x306 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (< 10000 (x446 64 x162 0)))
(assert (not (x449 (x446 64 x88 1))))
(assert (=> (>= 10000 x168) (= 0 (x519 x168))))
(assert (x449 1277010402))
(assert (not (x449 (x446 64 x87 0))))
(assert (x582 x645))
(assert (x582 x283))
(assert (= (x203 (x446 64 x147 0)) x147))
(assert (x306 x77))
(assert (x582 x22))
(assert (x306 x225))
(assert (x582 x403))
(assert (x582 x489))
(assert (=> (>= 10000 x213) (= (x519 x213) 0)))
(assert (= (x519 (x446 64 x94 0)) (x446 64 x94 0)))
(assert (=> (<= x362 10000) (= 0 (x519 x362))))
(assert (=> (>= 10000 x367) (= (x519 x367) 0)))
(assert (x582 x433))
(assert (= (and x585 x296) x413))
(assert (not (x449 (x446 64 x147 0))))
(assert (x582 x455))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x456 x179 x69 x168 x39 x584 x114 x53)))
(assert (x582 x435))
(assert (= x57 (x203 (x580 x179 x57 x284 x107 x592))))
(assert (= (x157 (x446 64 x90 2)) 64))
(assert (x582 x473))
(assert (x582 x531))
(assert (= (x446 64 x90 2) (x519 (x446 64 x90 2))))
(assert (x582 x539))
(assert (= (and (not x361) x56) x620))
(assert (= (x647 x24 4294967296) (x209 x24 32)))
(assert (not (x449 (x446 64 x457 0))))
(assert (x582 x46))
(assert (=> (<= x69 10000) (= (x519 x69) 0)))
(assert (= (x290 (x564 x179 x402 x352 x213 x646 x92)) x213))
(assert (x445 x97 4294967296))
(assert (x582 x342))
(assert (x582 x81))
(assert (< 10000 (x42 x179 x267)))
(assert (= 0 (x519 4294967296)))
(assert (x449 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (not (x449 (x558 x179 x324 x259 x331 x300 x421 x362 x367))))
(assert (x582 x3))
(assert (x426 x610 26959946667150639794667015087019630673637144422540572481103610249216))
(assert (x582 x133))
(assert (x582 x114))
(assert (> (x446 64 x246 x355) 10000))
(assert (x153 x627))
(assert (x582 x52))
(assert (x582 x503))
(assert (x449 11306221627026004327572806821415535452568768700951083154731830848869460082688))
(assert (x582 x624))
(assert (x582 x101))
(assert (=> (<= x369 10000) (= 0 (x519 x369))))
(assert (x582 x378))
(assert (= x465 (and (not x229) x136)))
(assert (x582 x537))
(assert (not (x449 (x564 x179 x402 x352 x213 x646 x92))))
(assert (= (x209 x464 64) (x647 x464 18446744073709551616)))
(assert (= x300 (x83 (x558 x179 x324 x259 x331 x300 x421 x362 x367))))
(assert (= 0 (x519 1277010402)))
(assert (x582 x235))
(assert (= (x209 x321 32) (x647 x321 4294967296)))
(assert (x582 x93))
(assert (= x154 (and x628 x185)))
(assert (= 0 (x318 (x446 64 x457 0))))
(assert (x547 18446744073709551616))
(assert (x582 x121))
(check-sat)
(exit)
