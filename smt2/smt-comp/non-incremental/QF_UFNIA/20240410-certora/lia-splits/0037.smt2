(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Certora
Generated on: 2024-04-10
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x210 () Int)
(declare-fun x304 () Int)
(declare-fun x491 () Bool)
(declare-fun x676 () Int)
(declare-fun x56 () Int)
(declare-fun x132 () Int)
(declare-fun x84 (Int) Int)
(declare-fun x35 () Int)
(declare-fun x364 () Int)
(declare-fun x533 (Int Int) Int)
(declare-fun x15 () Int)
(declare-fun x688 () Bool)
(declare-fun x449 () Bool)
(declare-fun x516 (Int) Int)
(declare-fun x376 () Int)
(declare-fun x625 () Int)
(declare-fun x390 () Int)
(declare-fun x561 () Int)
(declare-fun x612 () Int)
(declare-fun x541 () Int)
(declare-fun x342 () Int)
(declare-fun x544 () Int)
(declare-fun x71 () Bool)
(declare-fun x599 () Int)
(declare-fun x380 () Int)
(declare-fun x358 () Int)
(declare-fun x97 () Bool)
(declare-fun x607 () Bool)
(declare-fun x130 () Int)
(declare-fun x288 () Bool)
(declare-fun x87 () Int)
(declare-fun x431 () Int)
(declare-fun x356 () Int)
(declare-fun x95 () Int)
(declare-fun x230 () Int)
(declare-fun x578 () Int)
(declare-fun x165 () Bool)
(declare-fun x36 () Int)
(declare-fun x627 () Int)
(declare-fun x556 () Int)
(declare-fun x280 () Bool)
(declare-fun x39 () Int)
(declare-fun x66 () Int)
(declare-fun x408 () Int)
(declare-fun x142 () Int)
(declare-fun x175 () Int)
(declare-fun x305 () Int)
(declare-fun x155 () Bool)
(declare-fun x334 () Int)
(declare-fun x51 () Bool)
(declare-fun x414 () Bool)
(declare-fun x180 () Bool)
(declare-fun x291 () Int)
(declare-fun x484 () Bool)
(declare-fun x120 () Bool)
(declare-fun x368 () Bool)
(declare-fun x121 () Int)
(declare-fun x674 () Int)
(declare-fun x60 () Int)
(declare-fun x595 () Int)
(declare-fun x579 () Int)
(declare-fun x639 () Int)
(declare-fun x396 () Int)
(declare-fun x464 () Bool)
(declare-fun x596 () Int)
(declare-fun x602 () Int)
(declare-fun x391 () Bool)
(declare-fun x377 () Int)
(declare-fun x268 () Int)
(declare-fun x566 () Int)
(declare-fun x96 () Int)
(declare-fun x8 () Int)
(declare-fun x44 () Int)
(declare-fun x22 () Bool)
(declare-fun x455 () Int)
(declare-fun x652 () Int)
(declare-fun x223 () Int)
(declare-fun x446 () Int)
(declare-fun x661 () Int)
(declare-fun x405 () Int)
(declare-fun x246 () Int)
(declare-fun x290 () Int)
(declare-fun x329 () Int)
(declare-fun x173 () Bool)
(declare-fun x370 () Int)
(declare-fun x423 () Int)
(declare-fun x381 () Int)
(declare-fun x509 () Int)
(declare-fun x618 (Int Int) Int)
(declare-fun x629 () Int)
(declare-fun x583 () Int)
(declare-fun x7 () Int)
(declare-fun x148 () Int)
(declare-fun x420 () Int)
(declare-fun x136 () Int)
(declare-fun x90 () Bool)
(declare-fun x247 () Bool)
(declare-fun x448 () Int)
(declare-fun x537 () Int)
(declare-fun x321 () Int)
(declare-fun x11 () Int)
(declare-fun x78 () Int)
(declare-fun x667 () Bool)
(declare-fun x687 () Bool)
(declare-fun x64 () Int)
(declare-fun x318 () Int)
(declare-fun x157 () Bool)
(declare-fun x609 () Int)
(declare-fun x400 () Bool)
(declare-fun x626 () Int)
(declare-fun x481 () Bool)
(declare-fun x292 () Bool)
(declare-fun x72 () Bool)
(declare-fun x635 () Int)
(declare-fun x619 () Bool)
(declare-fun x529 () Bool)
(declare-fun x411 () Int)
(declare-fun x628 () Bool)
(declare-fun x601 () Int)
(declare-fun x17 () Int)
(declare-fun x354 () Int)
(declare-fun x107 () Int)
(declare-fun x684 () Int)
(declare-fun x286 () Bool)
(declare-fun x259 () Int)
(declare-fun x156 () Int)
(declare-fun x226 () Int)
(declare-fun x438 () Int)
(declare-fun x352 () Int)
(declare-fun x514 () Bool)
(declare-fun x242 () Int)
(declare-fun x458 () Bool)
(declare-fun x258 () Int)
(declare-fun x257 () Int)
(declare-fun x621 () Bool)
(declare-fun x490 () Bool)
(declare-fun x333 () Int)
(declare-fun x437 () Bool)
(declare-fun x227 () Int)
(declare-fun x615 () Int)
(declare-fun x613 () Int)
(declare-fun x591 () Int)
(declare-fun x369 () Bool)
(declare-fun x4 () Int)
(declare-fun x309 () Bool)
(declare-fun x424 () Bool)
(declare-fun x111 () Int)
(declare-fun x195 () Int)
(declare-fun x93 () Int)
(declare-fun x638 () Int)
(declare-fun x569 () Int)
(declare-fun x425 () Int)
(declare-fun x589 () Bool)
(declare-fun x603 () Int)
(declare-fun x433 () Int)
(declare-fun x634 (Int Int) Int)
(declare-fun x525 () Int)
(declare-fun x200 () Bool)
(declare-fun x593 () Bool)
(declare-fun x228 () Bool)
(declare-fun x91 () Int)
(declare-fun x296 () Int)
(declare-fun x496 () Int)
(declare-fun x193 () Int)
(declare-fun x403 () Int)
(declare-fun x654 () Int)
(declare-fun x129 () Int)
(declare-fun x347 () Bool)
(declare-fun x363 () Int)
(declare-fun x239 () Bool)
(declare-fun x225 () Int)
(declare-fun x346 () Bool)
(declare-fun x447 () Bool)
(declare-fun x656 () Int)
(declare-fun x440 (Int) Int)
(declare-fun x453 () Int)
(declare-fun x494 () Int)
(declare-fun x212 () Bool)
(declare-fun x266 (Int) Int)
(declare-fun x673 () Int)
(declare-fun x675 () Bool)
(declare-fun x105 () Bool)
(declare-fun x383 (Int) Int)
(declare-fun x336 (Int) Int)
(declare-fun x664 (Int) Int)
(declare-fun x421 () Bool)
(declare-fun x497 () Int)
(declare-fun x125 () Int)
(declare-fun x502 () Int)
(declare-fun x540 () Int)
(declare-fun x133 () Bool)
(declare-fun x375 () Int)
(declare-fun x669 () Bool)
(declare-fun x581 () Int)
(declare-fun x53 () Int)
(declare-fun x392 () Int)
(declare-fun x196 () Bool)
(declare-fun x310 () Int)
(declare-fun x466 () Int)
(declare-fun x450 () Int)
(declare-fun x235 () Int)
(declare-fun x281 () Int)
(declare-fun x683 () Int)
(declare-fun x558 (Int) Int)
(declare-fun x475 () Bool)
(declare-fun x384 () Int)
(declare-fun x517 () Bool)
(declare-fun x110 () Bool)
(declare-fun x31 () Bool)
(declare-fun x127 () Int)
(declare-fun x81 () Bool)
(declare-fun x486 () Bool)
(declare-fun x306 () Int)
(declare-fun x208 () Int)
(declare-fun x398 () Int)
(declare-fun x568 () Int)
(declare-fun x402 () Int)
(declare-fun x114 () Int)
(declare-fun x218 () Int)
(declare-fun x202 () Int)
(declare-fun x46 () Int)
(declare-fun x254 () Int)
(declare-fun x571 () Int)
(declare-fun x614 () Int)
(declare-fun x360 () Int)
(declare-fun x439 () Bool)
(declare-fun x442 () Bool)
(declare-fun x554 () Int)
(declare-fun x355 () Bool)
(declare-fun x215 () Int)
(declare-fun x77 (Int Int) Int)
(declare-fun x637 () Int)
(declare-fun x58 () Bool)
(declare-fun x146 (Int) Int)
(declare-fun x345 () Bool)
(declare-fun x300 () Int)
(declare-fun x422 () Int)
(declare-fun x137 () Int)
(declare-fun x386 () Int)
(declare-fun x505 () Bool)
(declare-fun x139 () Int)
(declare-fun x301 () Int)
(declare-fun x473 () Bool)
(declare-fun x604 () Bool)
(declare-fun x234 () Bool)
(declare-fun x161 () Bool)
(declare-fun x27 () Int)
(declare-fun x185 () Bool)
(declare-fun x560 () Bool)
(declare-fun x32 () Int)
(declare-fun x332 () Int)
(declare-fun x597 () Bool)
(declare-fun x649 () Int)
(declare-fun x611 () Bool)
(declare-fun x344 () Int)
(declare-fun x378 () Bool)
(declare-fun x519 () Int)
(declare-fun x124 () Int)
(declare-fun x49 () Int)
(declare-fun x585 () Bool)
(declare-fun x1 (Int) Int)
(declare-fun x685 () Bool)
(declare-fun x633 () Int)
(declare-fun x88 () Int)
(declare-fun x264 () Int)
(declare-fun x432 () Int)
(declare-fun x451 () Int)
(declare-fun x294 () Int)
(declare-fun x154 () Int)
(declare-fun x624 () Int)
(declare-fun x83 () Int)
(declare-fun x174 () Int)
(declare-fun x188 () Int)
(declare-fun x470 () Bool)
(declare-fun x14 () Int)
(declare-fun x238 () Bool)
(declare-fun x343 () Int)
(declare-fun x284 () Int)
(declare-fun x487 () Bool)
(declare-fun x252 () Bool)
(declare-fun x399 () Bool)
(declare-fun x240 () Int)
(declare-fun x666 () Int)
(declare-fun x580 () Int)
(declare-fun x251 () Int)
(declare-fun x410 () Int)
(declare-fun x326 () Bool)
(declare-fun x535 () Int)
(declare-fun x395 () Int)
(declare-fun x362 () Bool)
(declare-fun x126 () Bool)
(declare-fun x298 () Bool)
(declare-fun x104 () Bool)
(declare-fun x617 () Bool)
(declare-fun x357 () Int)
(declare-fun x510 () Int)
(declare-fun x153 () Bool)
(declare-fun x493 () Bool)
(declare-fun x650 () Bool)
(declare-fun x573 () Bool)
(declare-fun x331 () Bool)
(declare-fun x382 () Int)
(declare-fun x680 () Int)
(declare-fun x401 () Int)
(declare-fun x94 () Int)
(declare-fun x209 () Bool)
(declare-fun x500 () Int)
(declare-fun x646 () Int)
(declare-fun x469 () Int)
(declare-fun x30 () Bool)
(declare-fun x373 () Int)
(declare-fun x99 () Int)
(declare-fun x194 () Int)
(declare-fun x24 () Bool)
(declare-fun x220 () Bool)
(declare-fun x454 () Int)
(declare-fun x632 () Bool)
(declare-fun x74 () Int)
(declare-fun x644 (Int Int) Int)
(declare-fun x507 () Int)
(declare-fun x134 () Int)
(declare-fun x2 () Int)
(declare-fun x16 () Bool)
(declare-fun x38 (Int) Int)
(declare-fun x575 () Int)
(declare-fun x25 () Int)
(declare-fun x551 () Int)
(declare-fun x186 () Bool)
(declare-fun x686 () Int)
(declare-fun x477 () Int)
(declare-fun x429 () Int)
(declare-fun x187 () Bool)
(declare-fun x54 () Bool)
(declare-fun x98 () Bool)
(declare-fun x177 () Int)
(declare-fun x279 () Bool)
(declare-fun x112 () Bool)
(declare-fun x26 () Int)
(declare-fun x520 () Int)
(declare-fun x217 () Int)
(declare-fun x549 () Bool)
(declare-fun x474 () Int)
(declare-fun x10 (Int) Int)
(declare-fun x169 () Int)
(declare-fun x316 () Int)
(declare-fun x145 () Int)
(declare-fun x538 () Bool)
(declare-fun x122 () Bool)
(declare-fun x138 () Bool)
(declare-fun x388 () Bool)
(declare-fun x162 (Int) Int)
(declare-fun x622 () Int)
(declare-fun x69 () Bool)
(declare-fun x572 () Int)
(declare-fun x70 () Int)
(declare-fun x434 () Int)
(declare-fun x45 () Int)
(declare-fun x282 () Int)
(declare-fun x47 () Bool)
(declare-fun x479 () Int)
(declare-fun x214 () Int)
(declare-fun x539 () Int)
(declare-fun x550 () Int)
(declare-fun x536 () Int)
(declare-fun x482 () Int)
(declare-fun x548 () Bool)
(declare-fun x335 () Int)
(declare-fun x350 () Int)
(declare-fun x131 () Bool)
(declare-fun x462 () Int)
(declare-fun x570 () Int)
(declare-fun x163 () Bool)
(declare-fun x452 () Int)
(declare-fun x528 () Int)
(declare-fun x409 () Int)
(declare-fun x547 () Bool)
(declare-fun x33 () Int)
(declare-fun x337 () Int)
(declare-fun x63 () Bool)
(declare-fun x101 () Int)
(declare-fun x135 () Int)
(declare-fun x522 () Int)
(declare-fun x269 () Bool)
(declare-fun x518 () Int)
(declare-fun x150 () Int)
(declare-fun x3 () Bool)
(declare-fun x55 () Int)
(declare-fun x598 () Int)
(declare-fun x192 () Int)
(declare-fun x436 () Int)
(declare-fun x37 () Int)
(declare-fun x61 () Int)
(declare-fun x273 (Int) Int)
(declare-fun x584 () Int)
(declare-fun x642 () Int)
(declare-fun x662 () Int)
(declare-fun x89 () Int)
(declare-fun x158 () Int)
(declare-fun x6 (Int Int) Int)
(declare-fun x523 () Int)
(declare-fun x267 () Int)
(declare-fun x361 () Int)
(declare-fun x563 () Int)
(declare-fun x50 () Bool)
(declare-fun x62 () Bool)
(declare-fun x366 () Bool)
(declare-fun x489 () Int)
(declare-fun x52 () Bool)
(declare-fun x179 () Int)
(declare-fun x679 () Bool)
(declare-fun x503 () Int)
(declare-fun x299 () Int)
(declare-fun x237 () Int)
(declare-fun x73 (Int) Int)
(declare-fun x236 () Int)
(declare-fun x412 () Int)
(declare-fun x67 () Int)
(declare-fun x564 () Int)
(declare-fun x374 () Bool)
(declare-fun x562 () Int)
(declare-fun x349 () Int)
(declare-fun x530 () Int)
(declare-fun x143 () Int)
(declare-fun x205 () Int)
(declare-fun x293 () Int)
(declare-fun x250 () Bool)
(declare-fun x166 () Int)
(declare-fun x543 () Int)
(declare-fun x29 () Int)
(declare-fun x275 () Bool)
(declare-fun x260 () Int)
(declare-fun x315 () Int)
(declare-fun x245 () Int)
(declare-fun x12 (Int) Bool)
(declare-fun x312 () Int)
(declare-fun x677 () Int)
(declare-fun x416 () Bool)
(declare-fun x631 () Int)
(declare-fun x385 () Int)
(declare-fun x657 () Int)
(declare-fun x643 () Int)
(declare-fun x75 () Int)
(declare-fun x164 () Int)
(declare-fun x526 () Int)
(declare-fun x176 () Int)
(declare-fun x605 () Int)
(declare-fun x191 (Int Int Int) Int)
(declare-fun x319 () Int)
(declare-fun x513 () Bool)
(declare-fun x328 () Bool)
(declare-fun x426 () Bool)
(declare-fun x559 () Int)
(declare-fun x471 () Bool)
(declare-fun x397 () Int)
(declare-fun x206 () Int)
(declare-fun x608 () Bool)
(declare-fun x241 () Int)
(declare-fun x314 () Int)
(declare-fun x546 () Bool)
(declare-fun x444 () Int)
(declare-fun x461 () Bool)
(declare-fun x277 () Int)
(declare-fun x463 () Bool)
(declare-fun x419 () Int)
(declare-fun x512 () Bool)
(declare-fun x248 () Bool)
(declare-fun x108 (Int) Int)
(declare-fun x119 () Bool)
(declare-fun x592 () Bool)
(declare-fun x480 () Int)
(declare-fun x103 () Int)
(declare-fun x367 () Int)
(declare-fun x418 () Bool)
(declare-fun x203 () Int)
(declare-fun x640 () Bool)
(declare-fun x338 () Int)
(declare-fun x670 () Int)
(declare-fun x555 () Int)
(declare-fun x488 () Int)
(declare-fun x178 () Bool)
(declare-fun x508 () Int)
(declare-fun x232 (Int) Int)
(declare-fun x322 () Int)
(declare-fun x582 () Int)
(declare-fun x317 () Int)
(declare-fun x123 () Bool)
(declare-fun x183 () Bool)
(declare-fun x567 () Bool)
(declare-fun x499 () Int)
(declare-fun x167 () Bool)
(declare-fun x68 () Int)
(declare-fun x542 () Int)
(declare-fun x151 () Int)
(declare-fun x456 () Int)
(declare-fun x23 () Int)
(declare-fun x168 () Bool)
(declare-fun x515 () Int)
(declare-fun x9 () Bool)
(declare-fun x233 () Int)
(declare-fun x524 () Bool)
(declare-fun x553 () Int)
(declare-fun x681 () Int)
(declare-fun x672 () Int)
(declare-fun x492 () Bool)
(declare-fun x243 () Int)
(declare-fun x221 () Bool)
(declare-fun x665 () Bool)
(declare-fun x302 () Int)
(declare-fun x274 () Bool)
(declare-fun x341 () Bool)
(declare-fun x468 () Int)
(declare-fun x207 () Bool)
(declare-fun x308 () Int)
(declare-fun x216 () Bool)
(declare-fun x588 () Int)
(declare-fun x483 () Int)
(declare-fun x278 () Int)
(declare-fun x457 () Bool)
(declare-fun x587 () Int)
(declare-fun x427 () Int)
(declare-fun x140 () Int)
(declare-fun x43 () Int)
(declare-fun x159 () Bool)
(declare-fun x57 () Int)
(declare-fun x65 () Int)
(declare-fun x590 () Int)
(declare-fun x80 () Bool)
(declare-fun x59 () Int)
(declare-fun x182 () Int)
(declare-fun x323 () Bool)
(declare-fun x641 () Bool)
(declare-fun x100 () Int)
(declare-fun x144 () Int)
(declare-fun x18 () Int)
(declare-fun x263 () Int)
(declare-fun x472 () Bool)
(declare-fun x198 () Bool)
(declare-fun x651 () Bool)
(declare-fun x394 (Int) Int)
(declare-fun x663 () Bool)
(declare-fun x106 () Int)
(declare-fun x600 () Int)
(declare-fun x340 () Int)
(declare-fun x565 () Bool)
(declare-fun x351 () Bool)
(declare-fun x485 () Int)
(declare-fun x495 () Int)
(declare-fun x630 () Int)
(declare-fun x289 () Int)
(declare-fun x313 () Int)
(declare-fun x620 (Int) Int)
(declare-fun x467 () Bool)
(declare-fun x415 () Int)
(declare-fun x28 () Int)
(declare-fun x478 () Int)
(declare-fun x303 () Int)
(declare-fun x671 () Int)
(declare-fun x623 () Int)
(declare-fun x113 (Int Int Int Int) Int)
(declare-fun x19 () Bool)
(declare-fun x682 () Bool)
(define-fun x41 ((x476 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x476) (>= x476 0)) x476 (- x476 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x276 ((x476 Int)) Int (ite (and (< x476 0) (>= x476 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x476 115792089237316195423570985008687907853269984665640564039457584007913129639936) x476))
(define-fun x636 ((x476 Int)) Int (ite (and (>= x476 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x476)) x476 (ite (and (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 x476) (> 231584178474632390847141970017375815706539969331281128078915168015826259279872 x476)) (- x476 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (>= x476 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (< x476 0)) (+ x476 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x644 x476 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x295 ((x270 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x270) (<= 0 x270)))
(define-fun x330 ((x270 Int)) Bool (and (= (x618 115792089237316195423570985008687907853269984665640564039457584007913129639935 x270) x270) (= (x618 x270 115792089237316195423570985008687907853269984665640564039457584007913129639935) x270)))
(define-fun x417 ((x270 Int)) Bool (and (= 0 (x618 0 x270)) (= (x618 x270 0) 0)))
(define-fun x532 ((x270 Int)) Bool (= x270 (x618 x270 x270)))
(define-fun x283 ((x270 Int)) Bool (and (x532 x270) (x417 x270) (x330 x270)))
(define-fun x320 ((x270 Int) (x653 Int)) Bool (= (x618 x653 x270) (x618 x270 x653)))
(define-fun x42 ((x270 Int) (x653 Int)) Bool (and (=> (<= 0 x653) (<= (x618 x270 x653) x653)) (<= 0 (x618 x270 x653)) (=> (>= x270 0) (>= x270 (x618 x270 x653)))))
(define-fun x204 ((x270 Int) (x653 Int)) Bool (and (x42 x270 x653) (x320 x270 x653)))
(define-fun x170 ((x270 Int)) Bool (= (x618 x270 26959946667150639794667015087019630673637144422540572481103610249215) (x644 x270 26959946667150639794667015087019630673637144422540572481103610249216)))
(define-fun x348 ((x270 Int)) Bool (and (x170 x270) (x204 x270 26959946667150639794667015087019630673637144422540572481103610249215)))
(define-fun x152 ((x270 Int) (x653 Int)) Bool (and (< (x644 x270 x653) x653) (>= (x644 x270 x653) 0)))
(define-fun x407 ((x270 Int) (x653 Int)) Bool (=> (and (< 0 x653) (<= 0 x270)) (= (= x270 (x644 x270 x653)) (> x653 x270))))
(define-fun x116 ((x270 Int) (x653 Int)) Bool (=> (and (and (<= x653 x270) (< x270 (+ x653 x653))) (> x653 0)) (= (x644 x270 x653) (- x270 x653))))
(define-fun x655 ((x270 Int) (x653 Int)) Bool (=> (> x653 0) (= x270 (+ (x644 x270 x653) (* x653 (x634 x270 x653))))))
(define-fun x594 ((x270 Int) (x653 Int)) Bool (and (x116 x270 x653) (x407 x270 x653) (x655 x270 x653) (x152 x270 x653)))
(define-fun x261 ((x270 Int)) Bool (= 0 (x644 0 x270)))
(define-fun x82 ((x270 Int)) Bool (= 0 (x644 x270 1)))
(define-fun x48 ((x270 Int)) Bool (= (x644 x270 x270) 0))
(define-fun x76 ((x270 Int)) Bool (and (x48 x270) (x261 x270) (x82 x270)))
(define-fun x606 ((x270 Int)) Bool (and (<= 0 x270) (< x270 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x262 ((x270 Int) (x653 Int)) Bool (= (x6 x653 x270) (x6 x270 x653)))
(define-fun x21 ((x270 Int) (x653 Int)) Bool (and (=> (and (< x270 0) (> x653 0)) (< (x6 x270 x653) 0)) (=> (and (> x270 0) (< 0 x653)) (< 0 (x6 x270 x653))) (=> (and (> 0 x270) (> 0 x653)) (> (x6 x270 x653) 0)) (=> (and (> x270 0) (> 0 x653)) (< (x6 x270 x653) 0))))
(define-fun x5 ((x270 Int) (x653 Int)) Bool (=> (and (> x653 0) (< 0 x270)) (= (= x653 (x634 (x636 (x6 x270 x653)) x270)) (< (x6 x270 x653) 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(define-fun x577 ((x270 Int) (x653 Int)) Bool (=> (and (not (= x270 0)) (not (= 0 x653))) (and (= x653 (x634 (x6 x270 x653) x270)) (= (x634 (x6 x270 x653) x653) x270))))
(define-fun x147 ((x270 Int) (x653 Int)) Bool (=> (and (< 0 x270) (> x653 0)) (= (> x653 (x634 115792089237316195423570985008687907853269984665640564039457584007913129639935 x270)) (> (x6 x270 x653) 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x430 ((x270 Int) (x653 Int)) Bool (and (= (x636 (x6 x270 x653)) (x636 (x6 (- x270 115792089237316195423570985008687907853269984665640564039457584007913129639936) x653))) (= (x636 (x6 x270 x653)) (x636 (x6 (- x270 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x653 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x636 (x6 x270 x653)) (x636 (x6 x270 (- x653 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))
(define-fun x393 ((x270 Int) (x653 Int)) Bool (and (=> (and (and (<= x653 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x653 0)) (and (< 0 x270) (<= x270 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (<= (x6 x270 x653) 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x270 (x634 57896044618658097711785492504343953926634992332820282019728792003956564819967 x653)))) (=> (and (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x653) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x653)) (and (< 0 x270) (<= x270 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (>= (x6 x270 (- x653 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968)) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x653) (x634 57896044618658097711785492504343953926634992332820282019728792003956564819968 x270)))) (=> (and (and (> x653 0) (<= x653 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (<= x270 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> x270 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (>= (x634 57896044618658097711785492504343953926634992332820282019728792003956564819968 x653) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x270)) (>= (x6 (- x270 115792089237316195423570985008687907853269984665640564039457584007913129639936) x653) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968)))) (=> (and (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x270) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x270)) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x653) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x653))) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x6 (- x270 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x653 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (>= (x634 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x653)) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x270))))))
(define-fun x20 ((x270 Int) (x653 Int)) Bool (and (x21 x270 x653) (x577 x270 x653) (x262 x270 x653) (x147 x270 x653) (x430 x270 x653) (x393 x270 x653) (x5 x270 x653)))
(define-fun x201 ((x270 Int)) Bool (and (= (x6 x270 0) 0) (= (x6 0 x270) 0)))
(define-fun x353 ((x270 Int)) Bool (and (= (x6 1 x270) x270) (= x270 (x6 x270 1))))
(define-fun x445 ((x270 Int)) Bool (and (x353 x270) (x201 x270)))
(define-fun x197 ((x270 Int) (x653 Int)) Bool (=> (and (> x653 0) (< 0 x270)) (and (<= 0 (x634 x270 x653)) (>= x270 (x634 x270 x653)))))
(define-fun x109 ((x270 Int) (x653 Int)) Bool (=> (and (and (<= 0 x270) (< x270 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (and (>= x653 1) (< x653 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x634 x270 x653)) (>= (x634 x270 x653) 0))))
(define-fun x229 ((x270 Int) (x653 Int)) Bool (=> (and (< x653 x270) (> x653 1)) (< (x634 x270 x653) x270)))
(define-fun x13 ((x270 Int) (x653 Int)) Bool (=> (and (< 0 x653) (> x270 0)) (= (> x653 x270) (= 0 (x634 x270 x653)))))
(define-fun x219 ((x270 Int) (x653 Int)) Bool (=> (and (< 0 x653) (< 0 x270)) (and (>= x270 (x6 (x634 x270 x653) x653)) (> (x6 (x634 x270 x653) x653) (- x270 x653)))))
(define-fun x648 ((x270 Int) (x653 Int)) Bool (and (x13 x270 x653) (x197 x270 x653) (x109 x270 x653) (x229 x270 x653) (x219 x270 x653)))
(define-fun x211 ((x270 Int)) Bool (= 0 (x634 0 x270)))
(define-fun x521 ((x270 Int)) Bool (= x270 (x634 x270 1)))
(define-fun x307 ((x270 Int)) Bool (=> (not (= 0 x270)) (= 1 (x634 x270 x270))))
(define-fun x658 ((x270 Int)) Bool (and (x521 x270) (x211 x270) (x307 x270)))
(define-fun x616 ((x270 Int) (x653 Int)) Bool (= (x6 x270 x653) (* x270 x653)))
(define-fun x115 ((x270 Int) (x653 Int)) Bool (and (= (- (* x270 x653) (* x653 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x6 (- x270 115792089237316195423570985008687907853269984665640564039457584007913129639936) x653)) (= (* x270 (- x653 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x6 x270 (- x653 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (- (* (- x653 115792089237316195423570985008687907853269984665640564039457584007913129639936) x270) (* (- x653 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x6 (- x270 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x653 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x678 ((x270 Int) (x653 Int)) Bool (and (x147 x270 x653) (x577 x270 x653) (x115 x270 x653) (x393 x270 x653) (x5 x270 x653) (x616 x270 x653) (x430 x270 x653)))
(define-fun x389 ((x270 Int) (x653 Int)) Bool (=> (and (< 0 x653) (> x270 0)) (and (> (* (x634 x270 x653) x653) (- x270 x653)) (>= x270 (* x653 (x634 x270 x653))))))
(define-fun x387 ((x270 Int) (x653 Int)) Bool (= (- x270 (x618 (- x653 1) x270)) (* (x634 x270 x653) x653)))
(define-fun x213 ((x270 Int) (x653 Int)) Bool (and (x13 x270 x653) (x389 x270 x653) (x387 x270 x653) (x109 x270 x653) (x197 x270 x653) (x229 x270 x653)))
(define-fun x181 ((x270 Int)) Bool (= (x644 x270 340282366920938463463374607431768211456) (x618 x270 340282366920938463463374607431768211455)))
(define-fun x92 ((x270 Int)) Bool (and (x181 x270) (x204 x270 340282366920938463463374607431768211455)))
(define-fun x441 ((x498 Int)) Int 0)
(define-fun x574 ((x498 Int)) Int 0)
(define-fun x459 ((x498 Int)) Int 0)
(define-fun x610 ((x498 Int)) Int 0)
(define-fun x659 ((x498 Int)) Int 0)
(define-fun x85 ((x498 Int)) Int 0)
(define-fun x647 ((x498 Int)) Int 0)
(define-fun x557 ((x498 Int)) Int 0)
(define-fun x287 ((x498 Int)) Int 0)
(define-fun x255 ((x498 Int)) Int 0)
(define-fun x249 ((x498 Int)) Int 0)
(define-fun x34 ((x498 Int)) Int 0)
(define-fun x86 ((x498 Int)) Int 0)
(define-fun x149 ((x498 Int)) Int (ite (> x419 x498) (x266 x498) 0))
(define-fun x199 ((x498 Int)) Int (ite (and (>= x498 0) (> x419 x498)) (x516 x498) (x149 x498)))
(define-fun x117 ((x498 Int)) Int (ite (= x140 x498) x66 (x383 x498)))
(define-fun x171 ((x498 Int)) Int (ite (= x598 x498) x602 (x117 x498)))
(define-fun x118 ((x498 Int)) Int (ite (= x498 164) x452 (x647 x498)))
(define-fun x222 ((x498 Int)) Int (ite (= x498 196) x598 (x118 x498)))
(define-fun x465 ((x498 Int)) Int (ite (= 228 x498) x226 (x222 x498)))
(define-fun x371 ((x498 Int)) Int (ite (= 128 x498) 100 (x574 x498)))
(define-fun x460 ((x498 Int)) Int (ite (= 160 x498) x376 (x465 x498)))
(define-fun x271 ((x498 Int)) Int (ite (and (> (+ x686 324) x498) (<= 324 x498)) (x460 (- x498 164)) (x86 x498)))
(define-fun x443 ((x498 Int)) Int (ite (= x598 x498) x386 (x171 x498)))
(define-fun x435 ((x498 Int)) Int (ite (= x498 x613) x333 (x443 x498)))
(define-fun x576 ((x498 Int)) Int (ite (= x498 x340) x358 (x84 x498)))
(define-fun x40 ((x498 Int)) Int (ite (= x316 x498) x510 (x73 x498)))
(define-fun x668 ((x498 Int)) Int (ite (= x498 x587) x672 (x440 x498)))
(define-fun x325 ((x498 Int)) Int (ite (= x587 x498) x455 (x108 x498)))
(define-fun x256 ((x498 Int)) Int (x668 x498))
(define-fun x253 ((x498 Int)) Int (ite (= x498 x496) x56 (x256 x498)))
(define-fun x311 ((x498 Int)) Int (x325 x498))
(define-fun x586 ((x498 Int)) Int (ite (= x498 x496) x78 (x311 x498)))
(define-fun x285 ((x498 Int)) Int (x273 x498))
(define-fun x79 ((x498 Int)) Int (x394 x498))
(define-fun x339 ((x498 Int)) Int (ite (= x450 x498) x226 (x271 x498)))
(define-fun x552 ((x498 Int)) Int (ite (= x498 x75) x609 (x339 x498)))
(define-fun x645 ((x498 Int)) Int (ite (= x357 x498) x503 (x552 x498)))
(define-fun x379 ((x498 Int)) Int (ite (= x93 x498) x609 (x645 x498)))
(define-fun x327 ((x498 Int)) Int (ite (= x498 x579) x194 (x379 x498)))
(define-fun x404 ((x498 Int)) Int (ite (= x290 x498) x182 (x327 x498)))
(define-fun x189 ((x498 Int)) Int (ite (= x498 x530) x452 (x459 x498)))
(define-fun x372 ((x498 Int)) Int (ite (= x498 x245) x194 (x189 x498)))
(define-fun x297 ((x498 Int)) Int (ite (= x498 x93) x322 (x249 x498)))
(define-fun x527 ((x498 Int)) Int (ite (= x498 x518) x488 (x372 x498)))
(define-fun x428 ((x498 Int)) Int (ite (and (> (+ x319 x8) x498) (<= x319 x498)) (x527 (- (+ x518 x498) x319)) (x404 x498)))
(define-fun x172 ((x498 Int)) Int (ite (= x598 x498) x625 (x435 x498)))
(define-fun x501 ((x498 Int)) Int (ite (= x397 x498) x277 (x162 x498)))
(define-fun x406 ((x498 Int)) Int (ite (= x508 x498) x354 (x501 x498)))
(define-fun x534 ((x498 Int)) Int (ite x63 (x406 x498) (x162 x498)))
(define-fun x365 ((x498 Int)) Int (ite (= x498 x569) x7 (x534 x498)))
(define-fun x141 ((x498 Int)) Int (ite (= x101 x498) x375 (x365 x498)))
(define-fun x660 ((x498 Int)) Int (ite (= 0 x498) 1 (x620 x498)))
(define-fun x265 ((x498 Int)) Int (ite (= x498 x631) x535 (x232 x498)))
(define-fun x160 ((x498 Int)) Int (ite (= x498 x257) x566 (x265 x498)))
(define-fun x511 ((x498 Int)) Int (ite x63 (x232 x498) (x160 x498)))
(define-fun x506 ((x498 Int)) Int (ite (= x498 x260) x154 (x511 x498)))
(define-fun x531 ((x498 Int)) Int (ite (= x469 x498) x28 (x506 x498)))
(define-fun x224 ((x498 Int)) Int (ite (= x498 0) 1 (x620 x498)))
(define-fun x504 ((x498 Int)) Int (ite (= x498 324) x45 (x34 x498)))
(define-fun x231 ((x498 Int)) Int (ite (= 0 x498) 1 (x38 x498)))
(define-fun x413 ((x498 Int)) Int (ite (= x498 0) 1 (x38 x498)))
(define-fun x190 ((x498 Int)) Int (ite x63 (x231 x498) (x413 x498)))
(define-fun x184 ((x498 Int)) Int (ite (and (< x498 388) (<= 356 x498)) (x190 (- x498 356)) (x557 x498)))
(define-fun x244 ((x498 Int)) Int (ite (= x319 x498) x553 (x504 x498)))
(define-fun x545 ((x498 Int)) Int (ite x104 (x660 x498) (x224 x498)))
(define-fun x102 ((x498 Int)) Int (ite (and (> (+ x540 32) x498) (>= x498 x540)) (x545 (- x498 x540)) (x441 x498)))
(define-fun x128 ((x270 Int) (x653 Int) (x324 Int) (x359 Int)) Bool (=> (and (<= 0 x653) (>= x359 x653) (>= x324 x270) (>= x270 0)) (>= (x6 x324 x359) (x6 x270 x653))))
(define-fun x272 ((x270 Int) (x653 Int) (x324 Int) (x359 Int)) Bool (=> (= x324 x270) (= (- (x6 x270 x653) (x6 x324 x359)) (x6 x270 (- x653 x359)))))
(assert (x272 x609 x525 x317 x226))
(assert (x658 x169))
(assert (= x16 (=> (and (or (and (and (= x194 x137) (= (x634 x595 x352) x137) (>= 340282366920938463463374607431768211455 x385) (not (< x525 x385)) (>= 340282366920938463463374607431768211455 x137) (<= x595 57896044618658097711785492504343953926634992332820282019728792003956564819967) (= (x6 x525 x609) x595) (>= x595 0) (= x352 (+ x609 x254)) (<= 1 x352) (= x423 x352) (= x674 x385) (= x385 (x276 (- x525 x137))) (>= 680564733841876926926749214863536422910 x352)) (not x31)) (and x31 (and (= (x6 x254 x609) x436) (= x423 x259) (<= x370 340282366920938463463374607431768211455) (<= x259 340282366920938463463374607431768211455) (= x194 x370) (>= x436 0) (= x502 (+ x609 x525)) (>= x502 1) (= (x276 (- x254 x370)) x259) (>= 680564733841876926926749214863536422910 x502) (<= x436 57896044618658097711785492504343953926634992332820282019728792003956564819967) (= (x634 x436 x502) x370) (= x674 x502) (not (< x254 x259))))) (and (= x31 (= x251 0)) (<= x254 340282366920938463463374607431768211455) (= x580 1) (= (x311 x496) x254) (>= 340282366920938463463374607431768211455 x525) (= x496 (x191 64 x306 6)) (= (ite (not (> 100 x525)) (ite (not (< x254 100)) 1 0) (ite (not (> 100 x525)) 1 0)) x580) (= (x256 x496) x525))) x351)))
(assert (x295 x87))
(assert (x295 x401))
(assert (x295 x499))
(assert (x20 x438 (- x226 x317)))
(assert (x295 x381))
(assert (x445 (- x317 x254)))
(assert (x295 x448))
(assert (x295 x8))
(assert (x12 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (= (and x252 x471) x418))
(assert (= (and (not x72) x687) x641))
(assert (= (x664 (x191 64 x598 x639)) (x191 64 x598 x639)))
(assert (x20 x609 (- x254 x626)))
(assert (x272 x609 x254 x226 x438))
(assert (x295 x175))
(assert (not (x12 (x191 64 x598 0))))
(assert (x20 x525 (- x609 x246)))
(assert (= (x1 (x113 40 20 (x533 x107 96) (x533 x494 96))) 20))
(assert (x128 x246 x609 x254 x609))
(assert (x128 x626 x226 x525 x609))
(assert (x12 26959946667150639794667015087019630673637144422540572481103610249215))
(assert (= (x664 (x191 64 x598 0)) (x191 64 x598 0)))
(assert (x128 x609 x525 x438 x226))
(assert (= (and x687 x72) x675))
(assert (x295 x626))
(assert (x295 x478))
(assert (x295 x540))
(assert (x445 (- x226 x254)))
(assert (x128 x317 x226 x525 x609))
(assert (x295 x450))
(assert (x658 x436))
(assert (= (x558 (x113 40 20 (x533 x390 96) (x533 x591 96))) (x533 x591 96)))
(assert (x76 x363))
(assert (x295 x281))
(assert (= (x634 x409 79228162514264337593543950336) (x533 x409 96)))
(assert (not (x12 (x113 40 20 (x533 x629 96) (x533 x622 96)))))
(assert (x295 x65))
(assert (x295 x17))
(assert (x20 x246 (- x609 x254)))
(assert (x295 x96))
(assert (x213 x483 79228162514264337593543950336))
(assert (x295 x236))
(assert (x20 x226 (- x317 x525)))
(assert (x445 (- x438 x609)))
(assert (x128 x609 x246 x226 x317))
(assert (x295 x208))
(assert (x213 x629 79228162514264337593543950336))
(assert (x295 x588))
(assert (= x225 (x1 (x191 64 x225 6))))
(assert (x128 x226 x438 x525 x609))
(assert (x445 x613))
(assert (x295 x32))
(assert (x20 x525 (- x609 x438)))
(assert (x295 x304))
(assert (x76 x136))
(assert (x445 (- x525 x226)))
(assert (x658 x591))
(assert (x295 x205))
(assert (x20 x525 (- x609 x626)))
(assert (x295 x33))
(assert (x272 x626 x226 x609 x525))
(assert (x295 x291))
(assert (x295 x25))
(assert (=> (<= x210 10000) (= (x664 x210) 0)))
(assert (x445 (- x525 x626)))
(assert (x295 x522))
(assert (x272 x438 x226 x254 x609))
(assert (x295 x303))
(assert (x295 x313))
(assert (=> (>= 10000 (x533 x302 96)) (= (x664 (x533 x302 96)) 0)))
(assert (x295 x227))
(assert (x295 x624))
(assert (x295 x673))
(assert (= 0 (x664 115792089237316195423570985008687907853269984665640564039457584007913129639934)))
(assert (not (x12 (x191 64 x559 6))))
(assert (x20 x246 (- x609 x626)))
(assert (x20 x226 (- x438 x609)))
(assert (x272 x254 x609 x226 x626))
(assert (x295 x674))
(assert (= (x533 x629 96) (x634 x629 79228162514264337593543950336)))
(assert (x272 x226 x317 x609 x254))
(assert (= (x664 16156842317565293874272834530371880720966471053262404558597773956279093428224) 0))
(assert (x295 x561))
(assert (< (x191 64 x598 x639) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x272 x609 x525 x226 x317))
(assert (x20 x609 (- x525 x438)))
(assert (= (or x126 x669 x679) x173))
(assert (x295 x36))
(assert (= x331 (or x573 x54)))
(assert (x678 79228162514264337593543950336 x571))
(assert (x272 x609 x525 x609 x246))
(assert (x295 x56))
(assert (= (x533 x433 96) (x634 x433 79228162514264337593543950336)))
(assert (x445 (- x226 x246)))
(assert (x445 (- x254 x609)))
(assert (x20 x226 (- x317 x254)))
(assert (x445 (- x226 x626)))
(assert (x295 x308))
(assert (= (x336 (x191 64 x670 6)) 6))
(assert (x295 x356))
(assert (= (x336 (x191 64 x598 0)) 0))
(assert (x295 x251))
(assert (= x22 (and (not x62) x592)))
(assert (x272 x254 x609 x626 x226))
(assert (x295 x89))
(assert (= 40 (x10 (x113 40 20 (x533 x630 96) (x533 x302 96)))))
(assert (x76 26959946667150639794667015087019630673637144422540572481103610249216))
(assert (x658 x233))
(assert (x295 x300))
(assert (x128 x609 x254 x438 x226))
(assert (x295 x553))
(assert (x295 x566))
(assert (= x548 (and x457 x58)))
(assert (x295 x282))
(assert (x20 x254 (- x609 x246)))
(assert (x295 x140))
(assert (x20 x438 (- x226 x254)))
(assert (x20 x226 (- x317 x438)))
(assert (x295 x409))
(assert (x12 680564733841876926926749214863536422910))
(assert (x678 79228162514264337593543950336 x65))
(assert (x213 x390 79228162514264337593543950336))
(assert (x295 x49))
(assert (x594 x674 340282366920938463463374607431768211456))
(assert (x348 x683))
(assert (=> (>= 10000 (x533 x4 96)) (= 0 (x664 (x533 x4 96)))))
(assert (=> (<= x106 10000) (= 0 (x664 x106))))
(assert (x272 x609 x525 x438 x226))
(assert (x295 x510))
(assert (x295 x605))
(assert (x272 x626 x226 x525 x609))
(assert (= x185 (or x178 x239)))
(assert (= x69 (=> (and (or (and (and (= 460 x662) (= (* 79228162514264337593543950336 x571) x107) (= 1 x129) (= x156 (x113 40 20 (x533 x107 96) (x533 x494 96))) (= x494 (* 79228162514264337593543950336 x613)) (= x670 x156)) x399) (and (not x399) (and (= x483 (* x571 79228162514264337593543950336)) (= (x113 40 20 (x533 x4 96) (x533 x483 96)) x495) (= 460 x662) (= x495 x670) (= 0 x129) (= x4 (* 79228162514264337593543950336 x613))))) (and (= x575 0) (= x399 (> x613 x571)))) x421)))
(assert (x295 x310))
(assert (x20 x254 (- x609 x626)))
(assert (x295 x420))
(assert (x295 x537))
(assert (x295 x403))
(assert (x12 115792089237316195423570985008687907853269984665640564039457584007913129639934))
(assert (= (x1 (x191 64 x452 1)) x452))
(assert (x128 x226 x317 x438 x226))
(assert (x295 x433))
(assert (x20 x609 (- x525 x246)))
(assert (= (x634 x390 79228162514264337593543950336) (x533 x390 96)))
(assert (x445 (- x317 x626)))
(assert (x295 x646))
(assert (x658 x630))
(assert (x295 x657))
(assert (x295 x226))
(assert (= 0 (x664 57896044618658097711785492504343953926634992332820282019728792003956564819967)))
(assert (x295 x188))
(assert (x272 x254 x609 x438 x226))
(assert (x272 x525 x609 x438 x226))
(assert (x295 x67))
(assert (x20 x226 (- x317 x226)))
(assert (x295 x93))
(assert (x295 x600))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x191 64 x452 1)))
(assert (x445 (- x438 x525)))
(assert (x295 x380))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x191 64 x670 6)))
(assert (x295 x612))
(assert (=> (>= 10000 x452) (= (x664 x452) 0)))
(assert (x295 x580))
(assert (x295 x583))
(assert (x20 x626 (- x226 x246)))
(assert (x272 x626 x226 x226 x317))
(assert (x658 x595))
(assert (x272 x609 x246 x254 x609))
(assert (x295 x45))
(assert (x658 x352))
(assert (x272 x609 x254 x226 x626))
(assert (=> (>= 10000 x485) (= (x664 x485) 0)))
(assert (= (x533 x494 96) (x634 x494 79228162514264337593543950336)))
(assert (x295 x367))
(assert (= (x1 (x113 40 20 (x533 x409 96) (x533 x478 96))) 20))
(assert (x295 x245))
(assert (x272 x226 x317 x246 x609))
(assert (x12 115792089237316195423570985008687907853269984665640564039457584007913129639872))
(assert (x295 x544))
(assert (= x209 (or x675 x641)))
(assert (x295 x158))
(assert (x272 x317 x226 x609 x254))
(assert (= x471 (and x470 x492)))
(assert (x128 x525 x609 x626 x226))
(assert (x295 x107))
(assert (not (x12 (x191 64 x452 0))))
(assert (x295 x75))
(assert (x295 x293))
(assert (x272 x226 x438 x226 x317))
(assert (x295 x672))
(assert (x283 x423))
(assert (= (x533 x622 96) (x558 (x113 40 20 (x533 x629 96) (x533 x622 96)))))
(assert (= (x336 (x191 64 x598 x466)) x466))
(assert (= (x1 (x191 64 x306 6)) x306))
(assert (= (=> (and (and (= 1 x588) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639872 x319)) (> x258 x319) (<= x319 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= (x244 x319) x551) (= (x41 (+ x319 64)) x258) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639872 x319)) (= x280 (= 0 x551)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x319) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x319) (= (x41 (+ 32 x319)) x540) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639872 x319))) (or (and (and (<= 1 x166) (= (x146 x637) x166) (= x572 1)) x280) (not x280))) x153) x328))
(assert (= (x533 x412 96) (x634 x412 79228162514264337593543950336)))
(assert (x295 x434))
(assert (x295 x88))
(assert (x295 x246))
(assert (x295 x148))
(assert (x20 x525 (- x609 x226)))
(assert (x295 x599))
(assert (x295 x106))
(assert (x445 (- x609 x246)))
(assert (x295 x637))
(assert (= (or x331 x63) x58))
(assert (= (=> (and (= x275 false) (= (x191 64 x452 0) x264) (= x564 (x232 x264)) (= x313 1) (not (< x564 x226)) (= (x191 64 x598 0) x257) (not (< x566 x89)) (= false x341) (= x566 (x41 (+ x226 x89))) (= x535 (x276 (- x564 x226))) (= (x191 64 x452 0) x631) (= x89 (x265 x257)) (not (< x564 x535)) (= x45 32)) x513) x238))
(assert (x283 x683))
(assert (x445 (- x254 x626)))
(assert (x20 x246 (- x609 x317)))
(assert (x295 x598))
(assert (x272 x525 x609 x226 x438))
(assert (= (x10 (x191 64 x670 6)) 64))
(assert (= (and (not x493) x464) x126))
(assert (x272 x626 x226 x609 x246))
(assert (x295 x456))
(assert (x445 (- x226 x609)))
(assert (= (x634 x302 79228162514264337593543950336) (x533 x302 96)))
(assert (x295 x235))
(assert (x272 x226 x317 x438 x226))
(assert (x445 (- x226 x525)))
(assert (x272 x317 x226 x525 x609))
(assert (x295 x95))
(assert (x295 x515))
(assert (= (x191 64 x598 x603) (x664 (x191 64 x598 x603))))
(assert (x295 x258))
(assert (x295 x370))
(assert (= (x1 (x191 64 x452 0)) x452))
(assert (= (x533 x412 96) (x558 (x113 40 20 (x533 x433 96) (x533 x412 96)))))
(assert (= x598 (x1 (x191 64 x598 x603))))
(assert (= x607 (or x369 x157)))
(assert (x128 x626 x226 x226 x317))
(assert (x272 x317 x226 x226 x626))
(assert (x20 x626 (- x226 x609)))
(assert (x658 x302))
(assert (= 64 (x10 (x191 64 x225 6))))
(assert (= x351 (=> (and (not (> x67 x194)) (= x269 (> x35 0)) (= x35 (x276 (- x571 x65))) (= 1 x33) (= x33 (ite (not (< x674 100)) (ite (not (< x423 100)) 1 0) (ite (not (< x674 100)) 1 0))) (= x56 (x618 340282366920938463463374607431768211455 x674)) (= (x618 340282366920938463463374607431768211455 x423) x78)) (and (=> (and (and (= (< x571 x65) x168) (or (and (and (= x150 (* 79228162514264337593543950336 x65)) (<= x188 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= x559 x332) (not (= x188 115792089237316195423570985008687907853269984665640564039457584007913129639864)) (= (x41 (+ x318 20)) x334) (<= x188 115792089237316195423570985008687907853269984665640564039457584007913129639934) (> x334 x188) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639864 x188)) (= x332 (x113 40 20 (x533 x624 96) (x533 x150 96))) (= x289 1) (= (* 79228162514264337593543950336 x571) x624) (= x83 (x41 (+ x188 32))) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639864 x188)) (<= x188 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= x334 x46) (= (x41 (+ 20 x83)) x318)) x168) (and (and (not (= x188 115792089237316195423570985008687907853269984665640564039457584007913129639864)) (= (x41 (+ x188 32)) x554) (= x289 0) (= (* x65 79228162514264337593543950336) x409) (= x559 x278) (= (x41 (+ 20 x554)) x643) (> x124 x188) (not (= x188 115792089237316195423570985008687907853269984665640564039457584007913129639864)) (= x278 (x113 40 20 (x533 x409 96) (x533 x478 96))) (= (x41 (+ 20 x643)) x124) (= x46 x124) (not (= x188 115792089237316195423570985008687907853269984665640564039457584007913129639864)) (<= x188 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= x478 (* 79228162514264337593543950336 x571)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x188) (<= x188 115792089237316195423570985008687907853269984665640564039457584007913129639934)) (not x168)))) x269) x481) (=> (and (not x269) (and (= x601 x609) (= x188 x539))) x505)))))
(assert (x658 x483))
(assert (not (x12 (x113 40 20 (x533 x409 96) (x533 x478 96)))))
(assert (x283 26959946667150639794667015087019630673637144422540572481103610249215))
(assert (x76 x674))
(assert (=> (<= (x533 x494 96) 10000) (= 0 (x664 (x533 x494 96)))))
(assert (x272 x246 x609 x317 x226))
(assert (not (x12 (x113 40 20 (x533 x390 96) (x533 x591 96)))))
(assert (x272 x226 x438 x609 x246))
(assert (x295 x66))
(assert (= (and x52 (not x269)) x669))
(assert (x295 x37))
(assert (x445 x571))
(assert (x658 x205))
(assert (x295 x377))
(assert (x20 x609 (- x246 x226)))
(assert (x295 x676))
(assert (x295 x46))
(assert (x295 x572))
(assert (x20 x317 (- x226 x525)))
(assert (x295 x7))
(assert (x295 x263))
(assert (x272 x609 x254 x226 x317))
(assert (x295 x564))
(assert (x128 x609 x246 x438 x226))
(assert (x213 x478 79228162514264337593543950336))
(assert (x272 x609 x246 x317 x226))
(assert (x295 x103))
(assert (x445 (- x609 x226)))
(assert (x295 x656))
(assert (x272 x226 x317 x254 x609))
(assert (= (x533 x629 96) (x336 (x113 40 20 (x533 x629 96) (x533 x622 96)))))
(assert (=> (>= 10000 (x533 x107 96)) (= 0 (x664 (x533 x107 96)))))
(assert (x295 x78))
(assert (= (x336 (x113 40 20 (x533 x409 96) (x533 x478 96))) (x533 x409 96)))
(assert (x12 57896044618658097711785492504343953926634992332820282019728792003956564819967))
(assert (x658 x18))
(assert (x295 x124))
(assert (x295 x135))
(assert (x295 x432))
(assert (= (x10 (x113 40 20 (x533 x107 96) (x533 x494 96))) 40))
(assert (x12 4294967295))
(assert (x128 x226 x438 x609 x246))
(assert (=> (>= 10000 (x533 x483 96)) (= 0 (x664 (x533 x483 96)))))
(assert (x128 x246 x609 x226 x317))
(assert (= (or x604 x3) x470))
(assert (x594 x136 340282366920938463463374607431768211456))
(assert (x128 x438 x226 x609 x246))
(assert (= (and x378 x607) x19))
(assert (x295 x662))
(assert (x445 (- x254 x246)))
(assert (x295 x408))
(assert (= (and x196 (not x31)) x608))
(assert (x272 x626 x226 x246 x609))
(assert (x76 340282366920938463463374607431768211456))
(assert (x12 2835717307))
(assert (= (x558 (x113 40 20 (x533 x4 96) (x533 x483 96))) (x533 x483 96)))
(assert (x295 x254))
(assert (= 40 (x10 (x113 40 20 (x533 x390 96) (x533 x591 96)))))
(assert (=> (>= 10000 x598) (= (x664 x598) 0)))
(assert (x295 x584))
(assert (x128 x226 x438 x226 x317))
(assert (x128 x317 x226 x626 x226))
(assert (= (x1 (x191 64 x598 x639)) x598))
(assert (< (x191 64 x598 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x445 (- x254 x438)))
(assert (x658 x478))
(assert (x445 x609))
(assert (x272 x226 x317 x609 x246))
(assert (< 10000 (x191 64 x598 0)))
(assert (x295 x349))
(assert (x295 x518))
(assert (x295 x59))
(assert (= x421 (=> (and (and (= (x108 x587) x438) (>= 340282366920938463463374607431768211455 x626) (<= x438 340282366920938463463374607431768211455) (= x587 (x191 64 x670 6)) (= x462 1) (= x626 (x440 x587)) (= (= 0 x129) x198) (= (ite (not (> 100 x626)) (ite (not (> 100 x438)) 1 0) (ite (not (< x626 100)) 1 0)) x462)) (or (and (and (not (>= (+ x438 x226) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x233 (x41 (+ x438 x226))) (not (> x612 x626)) (= (x276 (- x626 x111)) x612) (= x363 x612) (<= 0 x14) (<= x14 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= x233 1) (= (x6 x626 x226) x14) (= x111 x609) (= (x634 x14 x233) x111) (= x233 x136) (< (x6 x626 x226) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= 340282366920938463463374607431768211455 x612) (<= x111 340282366920938463463374607431768211455)) (not x198)) (and (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x169) (= x236 x136) (= (x634 x169 x205) x91) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x626 x226))) (<= 0 x169) (not (< x438 x236)) (>= x205 1) (= (x41 (+ x626 x226)) x205) (>= 340282366920938463463374607431768211455 x236) (= x609 x91) (= (x276 (- x438 x91)) x236) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x6 x438 x226)) (= x205 x363) (<= x91 340282366920938463463374607431768211455) (= x169 (x6 x438 x226))) x198))) x220)))
(assert (x272 x246 x609 x609 x254))
(assert (= (and (not x492) x470) x123))
(assert (x272 x317 x226 x254 x609))
(assert (x20 x609 (- x246 x317)))
(assert (x272 x609 x254 x317 x226))
(assert (x295 x94))
(assert (x445 (- x317 x438)))
(assert (x272 x609 x246 x226 x438))
(assert (x295 x410))
(assert (x128 x525 x609 x438 x226))
(assert (x678 79228162514264337593543950336 x637))
(assert (x445 (- x246 x254)))
(assert (x20 x226 (- x438 x254)))
(assert (x295 x28))
(assert (= (and x24 (not x416)) x650))
(assert (x295 x315))
(assert (x295 x427))
(assert (x295 x630))
(assert (x295 x507))
(assert (x295 x233))
(assert (= (x1 (x113 40 20 (x533 x4 96) (x533 x483 96))) 20))
(assert (x295 x142))
(assert (x295 x127))
(assert (x20 x317 (- x226 x626)))
(assert (= x464 (or x447 x458)))
(assert (x272 x317 x226 x609 x246))
(assert (= (x336 (x113 40 20 (x533 x107 96) (x533 x494 96))) (x533 x107 96)))
(assert (x272 x609 x246 x226 x317))
(assert (= (or x608 x597) x52))
(assert (< 10000 (x113 40 20 (x533 x433 96) (x533 x412 96))))
(assert (= (x664 (x191 64 x306 6)) (x191 64 x306 6)))
(assert (= (x533 x150 96) (x634 x150 79228162514264337593543950336)))
(assert (= (x10 (x191 64 x452 0)) 64))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x191 64 x306 6)))
(assert (= (x664 (x113 40 20 (x533 x409 96) (x533 x478 96))) (x113 40 20 (x533 x409 96) (x533 x478 96))))
(assert (x445 (- x246 x438)))
(assert (x295 x468))
(assert (x295 x525))
(assert (x658 x4))
(assert (x12 115792089237316195423570985008687907853269984665640564039457584007913129639864))
(assert (=> (<= (x533 x478 96) 10000) (= (x664 (x533 x478 96)) 0)))
(assert (= (or x298 x22) x196))
(assert (= 0 (x664 115792089237316195423570985008687907853269984665640564039457584007913129639872)))
(assert (x20 x609 (- x254 x226)))
(assert (= (x634 x4 79228162514264337593543950336) (x533 x4 96)))
(assert (x445 (- x525 x246)))
(assert (x295 x164))
(assert (> (x113 40 20 (x533 x4 96) (x533 x483 96)) 10000))
(assert (x295 x61))
(assert (x295 x419))
(assert (x20 x626 (- x226 x317)))
(assert (x658 x409))
(assert (x445 79228162514264337593543950336))
(assert (= (not (and (= x491 false) (= false x274) (= x51 true) (= x27 1) (= false x105) (= x90 false) (= x186 false))) x159))
(assert (x295 x305))
(assert (= 0 (x664 76450787359836037641860180984291677749980919077056822294353438043884394381312)))
(assert (x213 x433 79228162514264337593543950336))
(assert (x295 x129))
(assert (x295 x143))
(assert (= (and (not x252) x471) x400))
(assert (x128 x609 x254 x226 x317))
(assert (x445 (- x626 x226)))
(assert (x658 x596))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x191 64 x598 x43)))
(assert (x20 x226 (- x317 x626)))
(assert (x295 x500))
(assert (x20 x609 (- x525 x626)))
(assert (x20 x254 (- x609 x226)))
(assert (x20 x246 (- x609 x525)))
(assert (x295 x571))
(assert (x295 x240))
(assert (x295 x382))
(assert (> (x191 64 x559 6) 10000))
(assert (x128 x226 x626 x254 x609))
(assert (x213 x624 79228162514264337593543950336))
(assert (x272 x226 x626 x254 x609))
(assert (x213 x150 79228162514264337593543950336))
(assert (= (x1 (x191 64 x559 6)) x559))
(assert (x272 x609 x246 x525 x609))
(assert (x76 x423))
(assert (x295 x373))
(assert (x272 x525 x609 x626 x226))
(assert (x272 x254 x609 x609 x246))
(assert (x295 x649))
(assert (x295 x425))
(assert (x658 x494))
(assert (not (x12 (x113 40 20 (x533 x433 96) (x533 x412 96)))))
(assert (> (x191 64 x452 1) 10000))
(assert (x295 x334))
(assert (= 64 (x10 (x191 64 x598 x466))))
(assert (x128 x626 x226 x254 x609))
(assert (x295 x27))
(assert (x445 x254))
(assert (= (x113 40 20 (x533 x107 96) (x533 x494 96)) (x664 (x113 40 20 (x533 x107 96) (x533 x494 96)))))
(assert (= x598 (x1 (x191 64 x598 x466))))
(assert (x658 x107))
(assert (x295 x242))
(assert (x295 x395))
(assert (= x505 (=> (and (and (not (= x23 115792089237316195423570985008687907853269984665640564039457584007913129639872)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639872 x23)) (= x578 (x618 26959946667150639794667015087019630673637144422540572481103610249215 x61)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x23) (<= x23 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= (x41 (+ 64 x530)) x23) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x93) (= x539 x93) (= x8 (x297 x93)) (= (x276 (- x382 32)) x322) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639836 x93)) (= 0 x182) (= (x276 (- x23 x93)) x382) (= (x41 (+ x93 32)) x518) (= x625 (x435 x598)) (= x651 (= x210 x637)) (= x499 0) (= x488 (+ 76450787359836037641860180984291677749980919077056822294353438043884394381312 x578)) (= (x41 (+ x93 32)) x579) (= (x372 x518) x61) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639836 x93)) (not (= x23 115792089237316195423570985008687907853269984665640564039457584007913129639872)) (= (x41 (+ x530 32)) x245) (= (x41 (+ x23 64)) x319) (= (x41 (+ 36 x93)) x530) (= x8 68) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x93) (= x290 (x41 (+ 32 x579))) (<= x93 115792089237316195423570985008687907853269984665640564039457584007913129639934) (< x93 x23) (not (= x93 115792089237316195423570985008687907853269984665640564039457584007913129639836)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x23) x529 (= x235 (x172 x637)) (= (= x601 0) x529) (= x235 x444) (> x319 x23)) (or (and (and (= 32 x553) (<= x422 127) (= x80 false) (= x637 x106) (= (x146 x106) x434) (= x119 false) (= (x506 x469) x121) (= 2835717307 x638) (>= 1461501637330902918203684832716283019655932542975 x637) (= x28 (x41 (+ x194 x121))) (not (< x28 x121)) (<= 1 x434) (= (x191 64 x598 0) x260) (= x44 x479) (not (< x377 x154)) (= (x191 64 x452 0) x469) (= x364 x507) (= 68 x556) (= x364 x452) (<= 1 x637) (not (> x194 x377)) (= x479 x194) (= 1 x176) (= false x517) (= x212 false) (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 x384) (= (x191 64 x598 0) x230) (>= 127 x422) (= (x511 x230) x377) (= (x276 (- x377 x194)) x154)) (not x651)) (and x651 (and (= x241 1) (not (> x7 x684)) (<= x398 127) (= x565 false) (= x207 false) (>= 127 x398) (= x452 x523) (= x292 false) (= x553 32) (>= x64 1) (not (< x684 x194)) (= (x41 (+ x194 x519)) x375) (= x101 (x191 64 x452 0)) (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 x343) (= x519 (x365 x101)) (not (< x375 x519)) (= x360 2835717307) (= x64 (x146 x210)) (= x569 (x191 64 x598 0)) (= (x276 (- x684 x194)) x7) (= x523 x536) (= x194 x402) (= x392 (x191 64 x598 0)) (= (x534 x392) x684) (= x284 x402) (= x96 68) (= false x487))))) x328)))
(assert (=> (<= (x533 x409 96) 10000) (= 0 (x664 (x533 x409 96)))))
(assert (x20 x226 (- x626 x254)))
(assert (= (=> (and (or (and (and (= (x146 x613) x217) (>= x217 1) (= x500 1)) x457) (not x457)) (and (= x457 (= x680 0)) (= (x504 324) x680) (= x143 324) (= 1 x480))) x682) x513))
(assert (x272 x525 x609 x317 x226))
(assert (x445 (- x246 x317)))
(assert (x128 x246 x609 x525 x609))
(assert (x295 x241))
(assert (x295 x376))
(assert (x272 x438 x226 x609 x246))
(assert (x295 x151))
(assert (x445 x317))
(assert (= (x1 (x191 64 x598 x43)) x598))
(assert (x272 x246 x609 x226 x438))
(assert (x295 x100))
(assert (x20 x226 (- x626 x226)))
(assert (x272 x226 x626 x226 x317))
(assert (x272 x609 x254 x626 x226))
(assert (=> (>= 10000 (x533 x630 96)) (= 0 (x664 (x533 x630 96)))))
(assert (x648 x169 x205))
(assert (x295 x268))
(assert (x295 x633))
(assert (< 10000 (x113 40 20 (x533 x107 96) (x533 x494 96))))
(assert (x295 x259))
(assert (x295 x494))
(assert (x295 x99))
(assert (x295 x398))
(assert (x272 x226 x438 x525 x609))
(assert (not x30))
(assert (x295 x364))
(assert (not (x12 (x191 64 x598 x466))))
(assert (x272 x626 x226 x254 x609))
(assert (x295 x661))
(assert (= 64 (x10 (x191 64 x598 0))))
(assert (x295 x575))
(assert (x658 x412))
(assert (x295 x454))
(assert (= (x558 (x113 40 20 (x533 x107 96) (x533 x494 96))) (x533 x494 96)))
(assert (= (x191 64 x559 6) (x664 (x191 64 x559 6))))
(assert (x20 x609 x246))
(assert (x295 x591))
(assert (x295 x317))
(assert (= x43 (x336 (x191 64 x598 x43))))
(assert (x20 x438 (- x226 x246)))
(assert (< 10000 (x113 40 20 (x533 x409 96) (x533 x478 96))))
(assert (x213 x591 79228162514264337593543950336))
(assert (x295 x296))
(assert (x12 76450787359836037641860180984291677749980919077056822294353438043884394381312))
(assert (x295 x452))
(assert (x20 x609 (- x246 x609)))
(assert (= (x664 (x191 64 x598 x466)) (x191 64 x598 x466)))
(assert (> (x191 64 x598 x43) 10000))
(assert (x295 x483))
(assert (x445 (- x626 x525)))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x113 40 20 (x533 x629 96) (x533 x622 96))))
(assert (x272 x609 x246 x226 x626))
(assert (x20 x226 x317))
(assert (x272 x226 x438 x609 x254))
(assert (= (and x183 (not x198)) x604))
(assert (x295 x299))
(assert (x20 x609 (- x254 x438)))
(assert (x295 x83))
(assert (=> (>= 10000 x308) (= (x664 x308) 0)))
(assert (x295 x635))
(assert (x20 x525 (- x609 x317)))
(assert (= (x634 x630 79228162514264337593543950336) (x533 x630 96)))
(assert (= (or x418 x400) x619))
(assert (x445 x246))
(assert (x295 x68))
(assert (=> (<= (x533 x624 96) 10000) (= (x664 (x533 x624 96)) 0)))
(assert (x213 x409 79228162514264337593543950336))
(assert (x20 x226 (- x317 x609)))
(assert (= (x533 x622 96) (x634 x622 79228162514264337593543950336)))
(assert (x295 x480))
(assert (x272 x226 x317 x609 x525))
(assert (= (or x19 x123 x426) x592))
(assert (= (x1 (x113 40 20 (x533 x629 96) (x533 x622 96))) 20))
(assert (x295 x526))
(assert (x295 x342))
(assert (x272 x317 x226 x226 x438))
(assert (x295 x488))
(assert (x295 x35))
(assert (x295 x145))
(assert (x295 x601))
(assert (x272 x246 x609 x438 x226))
(assert (x348 x61))
(assert (x295 x177))
(assert (x445 x637))
(assert (x272 x226 x626 x317 x226))
(assert (x283 x674))
(assert (x295 x497))
(assert (x295 x64))
(assert (x295 x411))
(assert (x295 x179))
(assert (x272 x609 x254 x609 x246))
(assert (= (x533 x150 96) (x558 (x113 40 20 (x533 x624 96) (x533 x150 96)))))
(assert (x295 x91))
(assert (< 10000 (x113 40 20 (x533 x629 96) (x533 x622 96))))
(assert (x295 x386))
(assert (x445 (- x317 x246)))
(assert (=> (>= 10000 x613) (= (x664 x613) 0)))
(assert (= (x336 (x113 40 20 (x533 x624 96) (x533 x150 96))) (x533 x624 96)))
(assert (x295 x125))
(assert (x283 340282366920938463463374607431768211455))
(assert (> (x113 40 20 (x533 x390 96) (x533 x591 96)) 10000))
(assert (x12 3343790536))
(assert (< (x113 40 20 (x533 x433 96) (x533 x412 96)) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x658 x390))
(assert (x295 x502))
(assert (> (x191 64 x598 x639) 10000))
(assert (x295 x535))
(assert (x295 x477))
(assert (=> (>= 10000 x338) (= (x664 x338) 0)))
(assert (not (x12 (x191 64 x598 x43))))
(assert (< 10000 (x191 64 x306 6)))
(assert (x295 x551))
(assert (x128 x226 x317 x609 x246))
(assert (x128 x438 x226 x226 x317))
(assert (x295 x217))
(assert (x272 x254 x609 x226 x438))
(assert (x272 x226 x317 x525 x609))
(assert (=> (>= 10000 (x533 x629 96)) (= (x664 (x533 x629 96)) 0)))
(assert (x295 x361))
(assert (x295 x144))
(assert (= (x558 (x113 40 20 (x533 x630 96) (x533 x302 96))) (x533 x302 96)))
(assert (= x180 (and x24 x416)))
(assert (= x3 (and x198 x183)))
(assert (= (x10 (x113 40 20 (x533 x624 96) (x533 x150 96))) 40))
(assert (x445 (- x246 x226)))
(assert (x20 x609 (- x246 x254)))
(assert (x272 x438 x226 x226 x317))
(assert (x295 x214))
(assert (x295 x666))
(assert (x272 x317 x226 x609 x525))
(assert (= (x191 64 x452 0) (x664 (x191 64 x452 0))))
(assert (x272 x525 x609 x609 x246))
(assert (x20 x226 (- x626 x609)))
(assert (x272 x609 x525 x226 x626))
(assert (x295 x519))
(assert (x272 x609 x246 x609 x525))
(assert (x272 x226 x626 x246 x609))
(assert (x445 (- x525 x438)))
(assert (x20 x609 (- x525 x226)))
(assert (= (and x168 x640) x178))
(assert (x272 x609 x246 x438 x226))
(assert (not (x12 (x113 40 20 (x533 x624 96) (x533 x150 96)))))
(assert (x295 x462))
(assert (x295 x375))
(assert (x295 x629))
(assert (x295 x680))
(assert (x272 x438 x226 x246 x609))
(assert (x76 x683))
(assert (x272 x246 x609 x226 x317))
(assert (x445 (- x438 x317)))
(assert (x272 x226 x438 x254 x609))
(assert (x272 x226 x626 x609 x254))
(assert (x658 x502))
(assert (x12 16156842317565293874272834530371880720966471053262404558597773956279093428224))
(assert (< (x113 40 20 (x533 x409 96) (x533 x478 96)) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= x426 (and x607 (not x378))))
(assert (x445 (- x438 x226)))
(assert (= (x664 4294967295) 0))
(assert (=> (>= 10000 x415) (= (x664 x415) 0)))
(assert (= x679 (and x493 x464)))
(assert (x606 x299))
(assert (x295 x627))
(assert (and (= (x6 9 3) 27) (= 9 (x6 3 3)) (= 81 (x6 9 9)) (= (x6 27 3) 81)))
(assert (x295 x322))
(assert (x295 x556))
(assert (x213 x622 79228162514264337593543950336))
(assert (x295 x352))
(assert (= x54 (and (not x200) x688)))
(assert (x272 x525 x609 x226 x626))
(assert (x272 x226 x317 x226 x626))
(assert (x445 (- x317 x525)))
(assert (x295 x444))
(assert (x594 x423 340282366920938463463374607431768211456))
(assert (x20 x609 (- x254 x246)))
(assert (x295 x623))
(assert (x295 x530))
(assert (x128 x254 x609 x609 x246))
(assert (= (x558 (x113 40 20 (x533 x409 96) (x533 x478 96))) (x533 x478 96)))
(assert (x128 x525 x609 x609 x246))
(assert (x20 x438 (- x226 x609)))
(assert (x295 x130))
(assert (x128 x226 x317 x525 x609))
(assert (x594 x61 26959946667150639794667015087019630673637144422540572481103610249216))
(assert (x658 x144))
(assert (=> (<= (x533 x412 96) 10000) (= (x664 (x533 x412 96)) 0)))
(assert (x12 115792089237316195423570985008687907853269984665640564039457584007913129639836))
(assert (x128 x226 x317 x254 x609))
(assert (x295 x485))
(assert (= (x533 x390 96) (x336 (x113 40 20 (x533 x390 96) (x533 x591 96)))))
(assert (x20 x609 (- x254 x609)))
(assert (= x472 (and x399 x209)))
(assert (x445 (- x609 x525)))
(assert (x295 x570))
(assert (x295 x57))
(assert (not (x12 (x113 40 20 (x533 x4 96) (x533 x483 96)))))
(assert (x213 x302 79228162514264337593543950336))
(assert (x445 (- x609 x254)))
(assert (x295 x74))
(assert (x295 x479))
(assert (=> (<= (x533 x433 96) 10000) (= (x664 (x533 x433 96)) 0)))
(assert (= (and x567 x486) x514))
(assert (x128 x226 x317 x626 x226))
(assert (x295 x301))
(assert (= x298 (and x592 x62)))
(assert (= (x10 (x191 64 x452 1)) 64))
(assert (x658 x150))
(assert (x272 x626 x226 x609 x254))
(assert (not (x12 (x191 64 x670 6))))
(assert (x20 x609 (- x254 x317)))
(assert (x295 x582))
(assert (x20 x626 (- x226 x254)))
(assert (x128 x254 x609 x626 x226))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x113 40 20 (x533 x4 96) (x533 x483 96))))
(assert (= x153 (=> (and (and (= (ite x416 1 0) x49) (= x416 (= x179 0)) (= x179 (x244 x319))) (or (and (and (= 1 x300) (= x427 (x41 (+ 32 x319))) (<= x537 57896044618658097711785492504343953926634992332820282019728792003956564819967) (= (x244 x319) x537) (= x300 (x102 x427)) (>= x537 32)) (not x416)) (and x416 (= 1 x49)))) x159)))
(assert (x128 x317 x226 x254 x609))
(assert (x295 x503))
(assert (x128 x438 x226 x525 x609))
(assert (= x447 (and x185 (not x279))))
(assert (x445 (- x226 x438)))
(assert (x445 (- x525 x317)))
(assert (x658 x629))
(assert (x128 x226 x626 x609 x246))
(assert (x295 x243))
(assert (= (x664 115792089237316195423570985008687907853269984665640564039457584007913129639836) 0))
(assert (x295 x412))
(assert (x295 x267))
(assert (x272 x438 x226 x609 x254))
(assert (< (x113 40 20 (x533 x624 96) (x533 x150 96)) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x20 x609 (- x246 x438)))
(assert (> (x191 64 x225 6) 10000))
(assert (= x603 (x336 (x191 64 x598 x603))))
(assert (= x682 (=> (and (or (and (= 1 x337) x72) (and (not x72) (and (>= x497 32) (= x2 (x184 356)) (= (x504 324) x497) (= x2 1) (<= x497 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) (and (= x125 (x504 324)) (= 324 x681) (= (ite x72 1 0) x337) (= 324 x401) (= 324 x174) (= (= 0 x125) x72))) x69)))
(assert (= (and x269 x52) x640))
(assert (x128 x254 x609 x438 x226))
(assert (x20 x609 (- x525 x317)))
(assert (= (or x180 x650) x167))
(assert (> (x191 64 x598 x603) 10000))
(assert (= 20 (x1 (x113 40 20 (x533 x630 96) (x533 x302 96)))))
(assert (x295 x360))
(assert (x295 x302))
(assert (x295 x625))
(assert (= true x486))
(assert (x445 (- x609 x317)))
(assert (x445 x65))
(assert (= (x1 (x113 40 20 (x533 x624 96) (x533 x150 96))) 20))
(assert (x295 x121))
(assert (= (x336 (x113 40 20 (x533 x630 96) (x533 x302 96))) (x533 x630 96)))
(assert (= (x664 1461501637330902918203684832716283019655932542975) 0))
(assert (x20 x609 (- x246 x525)))
(assert (x272 x246 x609 x226 x626))
(assert (x20 x254 x609))
(assert (x92 x136))
(assert (> (x113 40 20 (x533 x630 96) (x533 x302 96)) 10000))
(assert (= (and x209 (not x399)) x461))
(assert (= x490 (or x104 x71)))
(assert (> (x191 64 x598 x466) 10000))
(assert (x272 x525 x609 x226 x317))
(assert (= 0 (x336 (x191 64 x452 0))))
(assert (= (and (not x234) x514) x346))
(assert (x272 x609 x254 x438 x226))
(assert (x445 x226))
(assert (x20 x246 (- x609 x226)))
(assert (x128 x317 x226 x438 x226))
(assert (x12 1461501637330902918203684832716283019655932542975))
(assert (= 6 (x336 (x191 64 x306 6))))
(assert (x128 x438 x226 x254 x609))
(assert (x295 x578))
(assert (x445 (- x626 x317)))
(assert (x20 x317 (- x226 x438)))
(assert (x295 x384))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x113 40 20 (x533 x390 96) (x533 x591 96))))
(assert (x213 x630 79228162514264337593543950336))
(assert (x295 x294))
(assert (x295 x536))
(assert (x128 x609 x254 x626 x226))
(assert (x128 x609 x525 x626 x226))
(assert (x128 x609 x246 x525 x609))
(assert (x128 x317 x226 x609 x246))
(assert (x20 x226 (- x626 x246)))
(assert (=> (>= 10000 (x533 x622 96)) (= (x664 (x533 x622 96)) 0)))
(assert (x295 x44))
(assert (x658 x624))
(assert (x20 x226 (- x438 x226)))
(assert (= 0 (x664 340282366920938463463374607431768211455)))
(assert (x445 x626))
(assert (= 64 (x10 (x191 64 x598 x639))))
(assert (x20 x226 (- x626 x525)))
(assert (x445 (- x254 x226)))
(assert (x648 x18 x144))
(assert (=> (>= 10000 x140) (= (x664 x140) 0)))
(assert (= 64 (x10 (x191 64 x306 6))))
(assert (= (x664 680564733841876926926749214863536422910) 0))
(assert (= x670 (x1 (x191 64 x670 6))))
(assert (x213 x412 79228162514264337593543950336))
(assert (x295 x290))
(assert (x272 x609 x246 x626 x226))
(assert (x128 x254 x609 x226 x317))
(assert (x295 x415))
(assert (x295 x422))
(assert (x295 x114))
(assert (x20 x438 x226))
(assert (x295 x337))
(assert (x272 x226 x317 x226 x438))
(assert (x295 x154))
(assert (x295 x136))
(assert (x295 x543))
(assert (x295 x438))
(assert (x295 x289))
(assert (x128 x226 x626 x525 x609))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x113 40 20 (x533 x630 96) (x533 x302 96))))
(assert (x445 x438))
(assert (x12 79228162514264337593543950336))
(assert (x295 x166))
(assert (x272 x254 x609 x317 x226))
(assert (= x163 (=> (and (= x493 (= (ite (> 100 x246) (ite (> 100 x246) 1 0) (ite (> 100 x599) 1 0)) 0)) (or (and (and (= x601 0) (= x477 x539)) (not x493)) (and x493 (and (<= x599 340282366920938463463374607431768211455) (= (x6 x609 x246) x596) (<= 1 x599) (= x601 (ite (> x304 100) x304 0)) (<= 0 x596) (<= x596 57896044618658097711785492504343953926634992332820282019728792003956564819967) (= x477 x539) (= (x634 x596 x599) x304))))) x505)))
(assert (x20 x226 (- x626 x317)))
(assert (x295 x237))
(assert (x658 x14))
(assert (=> (>= 10000 x373) (= 0 (x664 x373))))
(assert (= (x533 x4 96) (x336 (x113 40 20 (x533 x4 96) (x533 x483 96)))))
(assert (x445 (- x525 x609)))
(assert (x295 x55))
(assert (x594 x683 26959946667150639794667015087019630673637144422540572481103610249216))
(assert (= 40 (x10 (x113 40 20 (x533 x4 96) (x533 x483 96)))))
(assert (x128 x246 x609 x438 x226))
(assert (x295 x681))
(assert (x295 x312))
(assert (x295 x150))
(assert (x295 x53))
(assert (x445 (- x626 x254)))
(assert (< (x191 64 x598 x466) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x295 x455))
(assert (= x104 (and x173 x651)))
(assert (not (x12 (x113 40 20 (x533 x630 96) (x533 x302 96)))))
(assert (not (x12 (x191 64 x598 x603))))
(assert (x295 x176))
(assert (= (x533 x107 96) (x634 x107 79228162514264337593543950336)))
(assert (= x585 (=> (and (= x508 (x191 64 x598 0)) (= x354 (x41 (+ x226 x583))) (= 1 x208) (= (x191 64 x452 0) x397) (= x509 (x191 64 x452 0)) (= (x162 x509) x446) (= (x276 (- x446 x226)) x277) (not (< x354 x583)) (= false x165) (= x45 32) (not (> x226 x446)) (not (< x446 x277)) (= x583 (x501 x508)) (= x388 false)) x513)))
(assert (x295 x390))
(assert (= x597 (and x31 x196)))
(assert (x272 x317 x226 x246 x609))
(assert (= (and x514 x234) x345))
(assert (= x183 (or x472 x461)))
(assert (x295 x638))
(assert (x648 x436 x502))
(assert (< (x191 64 x559 6) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x648 x596 x599))
(assert (x128 x226 x438 x254 x609))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x113 40 20 (x533 x107 96) (x533 x494 96))))
(assert (x445 (- x317 x609)))
(assert (x295 x202))
(assert (x445 (- x317 x226)))
(assert (x658 79228162514264337593543950336))
(assert (< (x191 64 x225 6) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x20 x626 (- x226 x525)))
(assert (x20 x317 (- x226 x246)))
(assert (x594 x363 340282366920938463463374607431768211456))
(assert (= (x664 115792089237316195423570985008687907853269984665640564039457584007913129639864) 0))
(assert (< 10000 (x113 40 20 (x533 x624 96) (x533 x150 96))))
(assert (x445 (- x626 x246)))
(assert (= x157 (and x619 (not x665))))
(assert (x128 x609 x246 x626 x226))
(assert (x295 x358))
(assert (= (x10 (x191 64 x598 x603)) 64))
(assert (x295 x683))
(assert (x272 x609 x525 x246 x609))
(assert (= (x113 40 20 (x533 x624 96) (x533 x150 96)) (x664 (x113 40 20 (x533 x624 96) (x533 x150 96)))))
(assert (x128 x525 x609 x226 x317))
(assert (x295 x429))
(assert (= x24 (or x47 (and (not x280) x490))))
(assert (x272 x246 x609 x626 x226))
(assert (x295 x405))
(assert (x20 x438 (- x226 x525)))
(assert (x295 x563))
(assert (< (x191 64 x598 x603) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x295 x39))
(assert (x295 x319))
(assert (x20 x317 (- x226 x254)))
(assert (= 0 (x664 2835717307)))
(assert (x295 x218))
(assert (x283 x363))
(assert (x295 x354))
(assert (x295 x26))
(assert (x295 x684))
(assert (x20 x226 (- x317 x246)))
(assert (> (x191 64 x452 0) 10000))
(assert (x295 x338))
(assert (x272 x226 x626 x609 x525))
(assert (=> (>= 10000 (x533 x150 96)) (= (x664 (x533 x150 96)) 0)))
(assert (x92 x674))
(assert (x20 x226 (- x438 x525)))
(assert (= x30 (=> (and (<= x312 1461501637330902918203684832716283019655932542975) (= (< 0 (x146 x308)) x546) (not (= x415 x210)) (not (= x485 x373)) (<= 0 x203) (= (x516 68) x637) (<= 0 x344) (<= x485 1461501637330902918203684832716283019655932542975) (not (= x485 x106)) (= x637 x148) (= false x248) (= 6 x329) (>= 1461501637330902918203684832716283019655932542975 x635) x161 (<= x563 1461501637330902918203684832716283019655932542975) (= false x112) (= x376 (+ x237 16156842317565293874272834530371880720966471053262404558597773956279093428224)) (<= 1 x338) (not (= x106 x373)) x546 (>= x555 0) (not (= x338 x106)) (not (= x210 x106)) (= x628 false) (<= x361 127) (= x386 (x171 x598)) (<= x26 1461501637330902918203684832716283019655932542975) (not (= x415 x373)) (= x132 x598) (>= 1461501637330902918203684832716283019655932542975 x661) (>= x598 1) (= x602 x522) (>= x210 1) (>= 1461501637330902918203684832716283019655932542975 x367) x593 (<= x482 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x613) (>= 1461501637330902918203684832716283019655932542975 x53) (<= x454 1461501637330902918203684832716283019655932542975) (= x410 3343790536) (not (= x210 x485)) (= x142 x17) (<= 1 x308) (<= x202 1461501637330902918203684832716283019655932542975) (= (< 0 (x146 x338)) x524) (<= x568 1461501637330902918203684832716283019655932542975) (<= 1 x485) (= (x516 132) x67) (>= x489 0) (= (x516 36) x571) (= x615 x140) (= (x516 4) x613) (not (= x485 x338)) x524 (<= x453 1461501637330902918203684832716283019655932542975) (not (= x308 x485)) (>= 1461501637330902918203684832716283019655932542975 x195) (>= 1461501637330902918203684832716283019655932542975 x605) (= x226 x293) (= x623 x148) (<= x415 1461501637330902918203684832716283019655932542975) (<= x381 1461501637330902918203684832716283019655932542975) (not (= x308 x210)) (>= x615 1) (>= 1461501637330902918203684832716283019655932542975 x151) (>= x561 1) (>= 1461501637330902918203684832716283019655932542975 x214) (<= x373 1461501637330902918203684832716283019655932542975) (<= x203 4294967295) (not (= x373 x210)) (= x88 100) (>= 1461501637330902918203684832716283019655932542975 x308) (>= x419 196) (= 2 x127) (= x310 x571) (not (= 2 x15)) (= x282 128) (>= 1461501637330902918203684832716283019655932542975 x456) (= x227 x613) (= x567 (= x210 x613)) (= x515 260) (not (= x415 x598)) (>= 1461501637330902918203684832716283019655932542975 x206) (= (x618 26959946667150639794667015087019630673637144422540572481103610249215 x683) x237) (= x590 (x41 (+ x686 324))) (= (x117 x598) x522) (<= 1 x373) (<= 0 x60) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x642) (<= x431 1461501637330902918203684832716283019655932542975) (= x449 (> (x146 x485) 0)) (not (= x210 x598)) (>= 1461501637330902918203684832716283019655932542975 x598) x621 (= x335 0) (= x452 x615) (>= x139 0) (not (= x308 x338)) (= x310 x570) (= (x465 160) x683) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x60) (>= 1461501637330902918203684832716283019655932542975 x615) (<= x581 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (= x598 x485)) (>= 1461501637330902918203684832716283019655932542975 x671) (>= 1461501637330902918203684832716283019655932542975 x94) (= (x443 x613) x281) (not (= x598 x373)) (= x621 (< 0 (x146 x373))) (>= 1461501637330902918203684832716283019655932542975 x106) (= x642 x677) x122 (= (x371 128) x686) (= (< 0 (x146 x210)) x161) (= false x484) (= (x146 x598) x561) (<= x294 1461501637330902918203684832716283019655932542975) (= x122 (< 0 (x146 x415))) (= x227 x448) (<= x210 1461501637330902918203684832716283019655932542975) (= (x276 (- x590 324)) x88) (= (x516 100) x226) (<= x361 127) (not (= x415 x106)) (= x673 (x516 0)) (<= x646 1461501637330902918203684832716283019655932542975) (= 3343790536 x562) (>= x415 1) (<= x637 1461501637330902918203684832716283019655932542975) (= x667 (< 0 (x146 x106))) (<= 0 x568) (not (< x164 x677)) (>= 340282366920938463463374607431768211455 x67) (<= x242 1461501637330902918203684832716283019655932542975) (>= x581 0) (= false x81) (<= x420 1461501637330902918203684832716283019655932542975) (<= x139 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 324 x582) (not (= x338 x210)) (= x164 x193) (<= x555 1461501637330902918203684832716283019655932542975) (not (= x308 x415)) (<= x134 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= x305 1461501637330902918203684832716283019655932542975) (not (= x106 x598)) (not (= x415 x338)) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x419) (= x593 (< 0 (x146 x598))) (<= x87 1461501637330902918203684832716283019655932542975) (not (= x106 x308)) (= x467 false) (>= x482 0) (= false x250) (not (= x373 x338)) (= x333 x281) x667 (= (x383 x140) x66) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x344) (= x17 x67) (>= 1461501637330902918203684832716283019655932542975 x542) (<= x65 1461501637330902918203684832716283019655932542975) (not (= x598 x308)) x449 (>= 1461501637330902918203684832716283019655932542975 x544) (<= x614 1461501637330902918203684832716283019655932542975) (<= x571 1461501637330902918203684832716283019655932542975) (= x528 x293) (>= 1461501637330902918203684832716283019655932542975 x243) (>= x106 1) (>= x642 0) (= x673 x268) (not (= x415 x485)) (>= x134 0) (not (= x338 x598)) (<= x135 1461501637330902918203684832716283019655932542975) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x489) (<= x338 1461501637330902918203684832716283019655932542975) (= x411 0) (= x164 (x516 164)) (not (= x308 x373))) (and (=> (and x567 (and (and (= (x146 x210) x267) (= x657 x32) (= 16156842317565293874272834530371880720966471053262404558597773956279093428224 x342) (= x452 x11) (<= 1 x267) (= x315 100) (= x676 x74) (= x234 (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x408)) (= x600 x11) (= false x155) (= (x191 64 x598 x639) x396) (= x74 x598) (= x611 false) (>= 127 x55) (= (x84 x396) x408) (= x639 (x191 64 x452 1)) (= 599290589 x403) (<= x55 127) (= x657 x528)) (or x234 (and (not x234) (and (= (x191 64 x452 1) x466) (= (x191 64 x598 x466) x340) (not (< x408 x226)) (= x358 (x276 (- x408 x226))) (not (< x408 x358))))))) x585) (=> (and (and (or (and (not x200) (and (not (< x432 x226)) (= (x191 64 x598 x603) x316) (not (> x510 x432)) (= (x191 64 x452 1) x603) (= x510 (x276 (- x432 x226))))) x200) (and (= x528 x666) (<= x613 1461501637330902918203684832716283019655932542975) (= x95 x520) (= x106 x613) (= x666 x526) (= (x73 x223) x432) (>= x474 1) (= x299 100) (= x95 x598) (<= x103 127) (<= x103 127) (= x303 x452) (= (x146 x106) x474) (= x380 x303) (= x57 16156842317565293874272834530371880720966471053262404558597773956279093428224) (= false x286) (= x223 (x191 64 x598 x43)) (= false x463) (>= x613 1) (= x43 (x191 64 x452 1)) (= (= x432 115792089237316195423570985008687907853269984665640564039457584007913129639935) x200) (= x425 599290589))) (not x567)) x238)))))
(assert (x295 x609))
(assert (= (x10 (x191 64 x598 x43)) 64))
(assert (x20 x609 (- x246 x626)))
(assert (= (x533 x624 96) (x634 x624 79228162514264337593543950336)))
(assert (x20 x246 (- x609 x438)))
(assert (x128 x609 x254 x609 x246))
(assert (x445 (- x438 x254)))
(assert (x295 x652))
(assert (x295 x318))
(assert (= 40 (x10 (x113 40 20 (x533 x629 96) (x533 x622 96)))))
(assert (x295 x643))
(assert (= x688 (and x486 (not x567))))
(assert (x658 x599))
(assert (= (x533 x483 96) (x634 x483 79228162514264337593543950336)))
(assert (x283 x136))
(assert (x295 x542))
(assert (x295 x613))
(assert (= (x664 (x191 64 x670 6)) (x191 64 x670 6)))
(assert (=> (>= 10000 (x533 x390 96)) (= (x664 (x533 x390 96)) 0)))
(assert (x295 x622))
(assert (= x573 (and x200 x688)))
(assert (= (x336 (x113 40 20 (x533 x433 96) (x533 x412 96))) (x533 x433 96)))
(assert (x295 x174))
(assert (x20 x226 (- x438 x246)))
(assert (= (and x173 (not x651)) x71))
(assert (x295 x446))
(assert (x295 x523))
(assert (x606 x553))
(assert (x272 x246 x609 x609 x525))
(assert (x295 x528))
(assert (x295 x357))
(assert (= (and x619 x665) x369))
(assert (x295 x343))
(assert (= (x664 (x113 40 20 (x533 x630 96) (x533 x302 96))) (x113 40 20 (x533 x630 96) (x533 x302 96))))
(assert (= 6 (x336 (x191 64 x225 6))))
(assert (= x424 (=> (and (= x378 (= (ite (> 100 x317) (ite (< x317 100) 1 0) (ite (> 100 x144) 1 0)) 0)) (or (and (and (< (x6 x226 x317) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x18 (x6 x226 x317)) (>= 340282366920938463463374607431768211455 x144) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x18) (= (x634 x18 x144) x356) (<= 1 x144) (= x70 x240) (= (ite (> x356 100) x356 0) x451) (<= 0 x18)) x378) (and (not x378) (and (= x451 0) (= x240 x70))))) x439)))
(assert (= (x634 x478 79228162514264337593543950336) (x533 x478 96)))
(assert (x648 x14 x233))
(assert (=> (<= (x533 x591 96) 10000) (= (x664 (x533 x591 96)) 0)))
(assert (x295 x423))
(assert (x128 x226 x626 x226 x317))
(assert (x658 x433))
(assert (= 0 (x664 599290589)))
(assert (x295 x431))
(assert (x295 x277))
(assert (x295 x23))
(assert (x445 x525))
(assert (x272 x609 x254 x246 x609))
(assert (= (and x279 x185) x458))
(assert (x295 x29))
(assert (x128 x609 x246 x254 x609))
(assert (x295 x193))
(assert (x295 x402))
(assert (= (x664 26959946667150639794667015087019630673637144422540572481103610249215) 0))
(assert (= (x664 (x191 64 x598 x43)) (x191 64 x598 x43)))
(assert (x445 (- x254 x317)))
(assert (x295 x614))
(assert (x445 (- x438 x246)))
(assert (x272 x226 x626 x609 x246))
(assert (x213 x107 79228162514264337593543950336))
(assert (x20 x254 (- x609 x438)))
(assert (x76 x61))
(assert (= (and x280 x490) x47))
(assert (= (x664 115792089237316195423570985008687907853269984665640564039457584007913129639935) 0))
(assert (x295 x210))
(assert (x295 x2))
(assert (= 20 (x1 (x113 40 20 (x533 x390 96) (x533 x591 96)))))
(assert (x12 340282366920938463463374607431768211455))
(assert (x295 x111))
(assert (x295 x590))
(assert (x295 x194))
(assert (= (x10 (x113 40 20 (x533 x433 96) (x533 x412 96))) 40))
(assert (x295 x579))
(assert (x606 x96))
(assert (x295 x70))
(assert (x295 x686))
(assert (x12 599290589))
(assert (= (x191 64 x225 6) (x664 (x191 64 x225 6))))
(assert (x272 x226 x438 x317 x226))
(assert (x295 x15))
(assert (x295 x520))
(assert (= (and (not x168) x640) x239))
(assert (= x549 (=> (and (and (not (= x39 115792089237316195423570985008687907853269984665640564039457584007913129639872)) (<= x39 115792089237316195423570985008687907853269984665640564039457584007913129639934) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639872 x39)) (= x550 (x191 64 x225 6)) (<= x654 340282366920938463463374607431768211455) (>= 340282366920938463463374607431768211455 x130) (not (= x39 115792089237316195423570985008687907853269984665640564039457584007913129639872)) (= (x668 x550) x130) (= x665 (= 0 x263)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x39) (= (x325 x550) x654) (= (x41 (+ x39 64)) x70) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x39) (> x70 x39)) (or (and (and (= x654 x317) (= x130 x144)) (not x665)) (and x665 (and (= x130 x317) (= x654 x144))))) x424)))
(assert (x295 x4))
(assert (= 64 (x10 (x191 64 x559 6))))
(assert (x20 x254 (- x609 x317)))
(assert (x295 x363))
(assert (x272 x226 x317 x626 x226))
(assert (x295 x195))
(assert (x648 x595 x352))
(assert (x678 79228162514264337593543950336 x613))
(assert (not (x12 (x113 40 20 (x533 x107 96) (x533 x494 96)))))
(assert (not (x12 (x191 64 x225 6))))
(assert (= (x1 (x113 40 20 (x533 x433 96) (x533 x412 96))) 20))
(assert (x295 x284))
(assert (= (x113 40 20 (x533 x390 96) (x533 x591 96)) (x664 (x113 40 20 (x533 x390 96) (x533 x591 96)))))
(assert (= (or (and x58 (not x457)) x548) x687))
(assert (x20 x609 (- x525 x609)))
(assert (x295 x554))
(assert (x20 x226 (- x438 x317)))
(assert (x606 x45))
(assert (x272 x438 x226 x609 x525))
(assert (x295 x602))
(assert (x445 (- x609 x626)))
(assert (x20 x626 x226))
(assert (x445 (- x226 x317)))
(assert (= (x664 (x113 40 20 (x533 x4 96) (x533 x483 96))) (x113 40 20 (x533 x4 96) (x533 x483 96))))
(assert (x295 x137))
(assert (= (x634 x591 79228162514264337593543950336) (x533 x591 96)))
(assert (x445 (- x609 x438)))
(assert (x283 x61))
(assert (> (x191 64 x670 6) 10000))
(assert (= (x336 (x191 64 x598 x639)) x639))
(assert (x272 x609 x246 x609 x254))
(assert (x295 x654))
(assert (= (or x346 x345) x63))
(assert (= 0 (x664 79228162514264337593543950336)))
(assert (= 0 (x664 3343790536)))
(assert (x92 x363))
(assert (x128 x609 x525 x609 x246))
(assert (x295 x671))
(assert (x295 x182))
(assert (= (x664 (x113 40 20 (x533 x433 96) (x533 x412 96))) (x113 40 20 (x533 x433 96) (x533 x412 96))))
(assert (x295 x206))
(assert (x92 x423))
(assert (x445 (- x246 x609)))
(assert (x295 x474))
(assert (x272 x609 x525 x226 x438))
(assert (x658 x622))
(assert (x295 x385))
(assert (x272 x609 x525 x626 x226))
(assert (x272 x254 x609 x226 x317))
(assert (x445 (- x626 x609)))
(assert (x445 (- x246 x626)))
(assert (= (x336 (x191 64 x559 6)) 6))
(assert (x295 x453))
(assert (= 40 (x10 (x113 40 20 (x533 x409 96) (x533 x478 96)))))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x191 64 x452 0)))
(assert (x272 x226 x626 x525 x609))
(assert (x445 (- x246 x525)))
(assert (=> (>= 10000 x637) (= 0 (x664 x637))))
(assert (x272 x226 x438 x609 x525))
(assert (= (=> (and (or (and x279 (and (= x246 x215) (= x468 x599))) (and (not x279) (and (= x215 x599) (= x246 x468)))) (and (not (= x46 115792089237316195423570985008687907853269984665640564039457584007913129639872)) (<= x46 115792089237316195423570985008687907853269984665640564039457584007913129639934) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639872 x46)) (= x541 (x191 64 x559 6)) (> x477 x46) (not (= x46 115792089237316195423570985008687907853269984665640564039457584007913129639872)) (= x215 (x253 x541)) (<= x46 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= (= x289 0) x279) (= (x586 x541) x468) (<= x46 115792089237316195423570985008687907853269984665640564039457584007913129639934) (<= x215 340282366920938463463374607431768211455) (= (x41 (+ 64 x46)) x477) (>= 340282366920938463463374607431768211455 x468))) x163) x481))
(assert (= (x336 (x191 64 x452 1)) 1))
(assert (x606 x556))
(assert (x272 x226 x438 x246 x609))
(assert (= (=> (and (and (= (x41 (+ 32 x450)) x75) (= x503 0) (= (< x637 x571) x62) (= x240 x450) (= x368 (= 0 x451)) x368 (= (x41 (+ x75 32)) x357)) (or (and (not x62) (and (= x321 x306) (< x450 x99) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639864 x450)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x450) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x450) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639864 x450)) (= x99 x188) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639864 x450)) (= (x41 (+ x218 20)) x99) (= x251 0) (= (* 79228162514264337593543950336 x637) x302) (= (x41 (+ 32 x450)) x652) (= x218 (x41 (+ x652 20))) (= x630 (* x571 79228162514264337593543950336)) (= (x113 40 20 (x533 x630 96) (x533 x302 96)) x321) (<= x450 115792089237316195423570985008687907853269984665640564039457584007913129639934))) (and x62 (and (not (= x450 115792089237316195423570985008687907853269984665640564039457584007913129639864)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639864 x450)) (= (* 79228162514264337593543950336 x637) x629) (= x296 x188) (= 1 x251) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639864 x450)) (= x306 x350) (= x622 (* x571 79228162514264337593543950336)) (= (x41 (+ 20 x543)) x296) (<= x450 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= (x41 (+ x177 20)) x543) (= (x113 40 20 (x533 x629 96) (x533 x622 96)) x350) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x450) (<= x450 115792089237316195423570985008687907853269984665640564039457584007913129639934) (< x450 x296) (= (x41 (+ x450 32)) x177))))) x16) x439))
(assert (not (x12 (x191 64 x598 x639))))
(assert (x295 x333))
(assert (x295 x11))
(assert (= (x191 64 x452 1) (x664 (x191 64 x452 1))))
(assert (x295 x677))
(assert (= x598 (x1 (x191 64 x598 0))))
(assert (x128 x246 x609 x626 x226))
(assert (x272 x438 x226 x525 x609))
(assert (not (x12 (x191 64 x306 6))))
(assert (x20 x317 (- x226 x609)))
(assert (x295 x539))
(assert (not (x12 (x191 64 x452 1))))
(assert (x20 x525 x609))
(assert (x213 x4 79228162514264337593543950336))
(assert (x295 x451))
(assert (x295 x215))
(assert (= (x664 (x113 40 20 (x533 x629 96) (x533 x622 96))) (x113 40 20 (x533 x629 96) (x533 x622 96))))
(assert (x213 x494 79228162514264337593543950336))
(assert (= (=> (and (= x584 (x276 (- x613 x65))) (= (x618 340282366920938463463374607431768211455 x136) x455) (= x492 (> x584 0)) (= 1 x68) (= x672 (x618 340282366920938463463374607431768211455 x363)) (= (ite (not (< x363 100)) (ite (not (> 100 x136)) 1 0) (ite (not (< x363 100)) 1 0)) x68)) (and (=> (and (and (or (and (not x252) (and (not (= x662 115792089237316195423570985008687907853269984665640564039457584007913129639864)) (<= x662 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= x433 (* 79228162514264337593543950336 x65)) (not (= x662 115792089237316195423570985008687907853269984665640564039457584007913129639864)) (= x349 (x41 (+ 32 x662))) (= x225 x314) (= x25 x39) (= x314 (x113 40 20 (x533 x433 96) (x533 x412 96))) (<= x662 115792089237316195423570985008687907853269984665640564039457584007913129639934) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639864 x662)) (= x412 (* x613 79228162514264337593543950336)) (< x662 x25) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x662) (= 0 x263) (= x656 (x41 (+ 20 x349))) (= (x41 (+ 20 x656)) x25))) (and (and (= x591 (* 79228162514264337593543950336 x65)) (= x390 (* x613 79228162514264337593543950336)) (< x662 x301) (<= x662 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= x263 1) (= (x41 (+ x662 32)) x429) (= x301 x39) (= x192 (x113 40 20 (x533 x390 96) (x533 x591 96))) (= x225 x192) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x662) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x662) (= x36 (x41 (+ x429 20))) (= (x41 (+ 20 x36)) x301) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639864 x662)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639864 x662)) (not (= x662 115792089237316195423570985008687907853269984665640564039457584007913129639864))) x252)) (= (> x65 x613) x252)) x492) x549) (=> (and (and (= x451 x226) (= x662 x240)) (not x492)) x439))) x220))
(assert (x606 x315))
(assert (x128 x626 x226 x609 x246))
(assert (x128 x609 x525 x226 x317))
(check-sat)
(exit)
