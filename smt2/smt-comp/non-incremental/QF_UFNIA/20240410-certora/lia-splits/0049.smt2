(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Certora
Generated on: 2024-04-10
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x81 () Int)
(declare-fun x1098 () Int)
(declare-fun x312 () Int)
(declare-fun x1061 () Bool)
(declare-fun x953 () Bool)
(declare-fun x402 () Int)
(declare-fun x1275 () Int)
(declare-fun x660 () Int)
(declare-fun x622 () Int)
(declare-fun x1088 () Bool)
(declare-fun x812 () Int)
(declare-fun x67 () Bool)
(declare-fun x6 () Bool)
(declare-fun x78 () Int)
(declare-fun x1108 () Int)
(declare-fun x927 () Bool)
(declare-fun x576 () Int)
(declare-fun x351 () Int)
(declare-fun x570 () Int)
(declare-fun x510 () Int)
(declare-fun x720 (Int) Int)
(declare-fun x121 () Int)
(declare-fun x1282 () Bool)
(declare-fun x143 () Bool)
(declare-fun x75 () Int)
(declare-fun x1001 () Int)
(declare-fun x623 () Bool)
(declare-fun x579 () Bool)
(declare-fun x565 () Int)
(declare-fun x300 () Int)
(declare-fun x307 () Int)
(declare-fun x931 () Int)
(declare-fun x1139 () Bool)
(declare-fun x1283 () Bool)
(declare-fun x1234 () Int)
(declare-fun x983 () Int)
(declare-fun x503 () Int)
(declare-fun x1287 () Int)
(declare-fun x628 () Int)
(declare-fun x1242 () Int)
(declare-fun x743 () Bool)
(declare-fun x462 () Int)
(declare-fun x419 () Int)
(declare-fun x756 () Bool)
(declare-fun x876 () Int)
(declare-fun x259 () Bool)
(declare-fun x1301 () Int)
(declare-fun x659 () Int)
(declare-fun x1324 () Bool)
(declare-fun x1117 () Int)
(declare-fun x288 () Bool)
(declare-fun x191 (Int) Int)
(declare-fun x711 () Bool)
(declare-fun x247 () Bool)
(declare-fun x1187 () Int)
(declare-fun x1267 () Int)
(declare-fun x1352 () Int)
(declare-fun x740 () Bool)
(declare-fun x950 () Int)
(declare-fun x99 () Int)
(declare-fun x1273 () Int)
(declare-fun x1164 () Int)
(declare-fun x792 () Bool)
(declare-fun x569 () Bool)
(declare-fun x186 () Int)
(declare-fun x1293 () Int)
(declare-fun x704 (Int Int) Int)
(declare-fun x1239 () Int)
(declare-fun x134 () Bool)
(declare-fun x695 () Int)
(declare-fun x1340 (Int) Int)
(declare-fun x515 () Bool)
(declare-fun x1345 (Int) Int)
(declare-fun x1295 () Bool)
(declare-fun x867 () Bool)
(declare-fun x968 () Int)
(declare-fun x672 () Bool)
(declare-fun x216 () Int)
(declare-fun x220 () Bool)
(declare-fun x337 () Int)
(declare-fun x698 () Bool)
(declare-fun x383 () Bool)
(declare-fun x104 () Int)
(declare-fun x493 () Bool)
(declare-fun x715 () Bool)
(declare-fun x1153 (Int) Int)
(declare-fun x993 () Int)
(declare-fun x938 () Bool)
(declare-fun x1052 () Int)
(declare-fun x280 () Int)
(declare-fun x359 () Int)
(declare-fun x395 () Int)
(declare-fun x1136 () Int)
(declare-fun x1026 () Bool)
(declare-fun x1315 () Int)
(declare-fun x1154 () Bool)
(declare-fun x166 () Bool)
(declare-fun x37 () Int)
(declare-fun x234 () Int)
(declare-fun x1296 () Bool)
(declare-fun x713 () Bool)
(declare-fun x641 () Int)
(declare-fun x56 () Bool)
(declare-fun x683 () Bool)
(declare-fun x19 () Int)
(declare-fun x535 () Bool)
(declare-fun x804 () Int)
(declare-fun x12 () Bool)
(declare-fun x189 () Int)
(declare-fun x141 () Bool)
(declare-fun x412 () Int)
(declare-fun x595 () Int)
(declare-fun x177 () Int)
(declare-fun x380 () Int)
(declare-fun x23 (Int) Int)
(declare-fun x303 () Int)
(declare-fun x63 () Int)
(declare-fun x1182 (Int) Int)
(declare-fun x532 () Int)
(declare-fun x299 () Int)
(declare-fun x410 () Int)
(declare-fun x796 () Int)
(declare-fun x746 () Int)
(declare-fun x188 () Int)
(declare-fun x91 () Bool)
(declare-fun x1081 () Bool)
(declare-fun x1046 () Int)
(declare-fun x984 () Bool)
(declare-fun x773 () Bool)
(declare-fun x507 () Int)
(declare-fun x83 () Int)
(declare-fun x103 () Bool)
(declare-fun x1085 () Int)
(declare-fun x1140 () Bool)
(declare-fun x1326 () Int)
(declare-fun x521 () Int)
(declare-fun x1043 () Bool)
(declare-fun x1194 () Bool)
(declare-fun x416 () Bool)
(declare-fun x1297 () Bool)
(declare-fun x848 () Int)
(declare-fun x1163 () Int)
(declare-fun x690 () Bool)
(declare-fun x1329 () Int)
(declare-fun x193 () Bool)
(declare-fun x245 () Int)
(declare-fun x1312 () Bool)
(declare-fun x350 () Bool)
(declare-fun x601 () Int)
(declare-fun x1059 () Int)
(declare-fun x657 () Int)
(declare-fun x890 () Int)
(declare-fun x957 () Bool)
(declare-fun x1202 () Int)
(declare-fun x317 () Int)
(declare-fun x785 () Bool)
(declare-fun x1335 () Bool)
(declare-fun x1077 () Int)
(declare-fun x603 () Int)
(declare-fun x918 () Bool)
(declare-fun x190 () Bool)
(declare-fun x724 () Bool)
(declare-fun x1031 () Int)
(declare-fun x958 () Bool)
(declare-fun x369 () Bool)
(declare-fun x159 () Bool)
(declare-fun x1317 () Bool)
(declare-fun x267 () Int)
(declare-fun x1262 () Int)
(declare-fun x471 (Int Int) Int)
(declare-fun x79 () Int)
(declare-fun x906 (Int Int Int Int Int Int Int Int) Int)
(declare-fun x549 () Int)
(declare-fun x856 () Bool)
(declare-fun x689 () Int)
(declare-fun x1243 () Bool)
(declare-fun x826 () Int)
(declare-fun x1280 () Int)
(declare-fun x1021 () Int)
(declare-fun x1216 () Bool)
(declare-fun x987 () Int)
(declare-fun x1151 () Int)
(declare-fun x1166 () Int)
(declare-fun x767 () Int)
(declare-fun x274 () Int)
(declare-fun x1006 () Int)
(declare-fun x915 () Bool)
(declare-fun x897 () Bool)
(declare-fun x702 () Int)
(declare-fun x154 () Bool)
(declare-fun x114 () Bool)
(declare-fun x1332 () Bool)
(declare-fun x1277 () Bool)
(declare-fun x378 () Bool)
(declare-fun x881 () Int)
(declare-fun x504 () Int)
(declare-fun x763 () Int)
(declare-fun x1304 () Int)
(declare-fun x1062 () Bool)
(declare-fun x397 () Int)
(declare-fun x263 () Int)
(declare-fun x1157 () Bool)
(declare-fun x158 () Int)
(declare-fun x179 () Int)
(declare-fun x260 () Int)
(declare-fun x101 () Int)
(declare-fun x854 () Int)
(declare-fun x1336 (Int Int Int) Int)
(declare-fun x283 () Bool)
(declare-fun x384 () Bool)
(declare-fun x421 () Int)
(declare-fun x610 () Int)
(declare-fun x1044 () Bool)
(declare-fun x1199 () Bool)
(declare-fun x1274 (Int) Int)
(declare-fun x730 () Bool)
(declare-fun x257 () Int)
(declare-fun x880 () Bool)
(declare-fun x892 () Bool)
(declare-fun x1147 () Int)
(declare-fun x840 () Int)
(declare-fun x252 () Int)
(declare-fun x935 () Bool)
(declare-fun x387 () Int)
(declare-fun x494 () Bool)
(declare-fun x1334 () Bool)
(declare-fun x707 () Int)
(declare-fun x524 (Int) Int)
(declare-fun x241 () Bool)
(declare-fun x629 () Bool)
(declare-fun x77 () Int)
(declare-fun x1286 () Int)
(declare-fun x1078 () Int)
(declare-fun x1189 () Int)
(declare-fun x1266 () Bool)
(declare-fun x879 () Int)
(declare-fun x26 (Int) Int)
(declare-fun x36 () Bool)
(declare-fun x926 () Int)
(declare-fun x1119 () Int)
(declare-fun x843 (Int) Int)
(declare-fun x1069 () Int)
(declare-fun x151 () Bool)
(declare-fun x908 () Int)
(declare-fun x1019 () Bool)
(declare-fun x608 () Int)
(declare-fun x9 () Bool)
(declare-fun x1208 () Bool)
(declare-fun x847 (Int) Int)
(declare-fun x62 () Int)
(declare-fun x254 () Int)
(declare-fun x1278 () Int)
(declare-fun x728 () Int)
(declare-fun x527 () Int)
(declare-fun x483 () Bool)
(declare-fun x1212 () Int)
(declare-fun x381 () Int)
(declare-fun x491 () Bool)
(declare-fun x1190 (Int Int) Int)
(declare-fun x667 () Bool)
(declare-fun x218 () Bool)
(declare-fun x969 () Int)
(declare-fun x849 () Int)
(declare-fun x500 () Int)
(declare-fun x1357 () Int)
(declare-fun x1094 () Int)
(declare-fun x119 () Bool)
(declare-fun x709 () Int)
(declare-fun x673 () Bool)
(declare-fun x204 () Int)
(declare-fun x923 (Int) Int)
(declare-fun x506 () Bool)
(declare-fun x560 () Int)
(declare-fun x1008 () Int)
(declare-fun x646 () Int)
(declare-fun x732 () Int)
(declare-fun x1029 () Int)
(declare-fun x1073 () Int)
(declare-fun x1121 () Int)
(declare-fun x446 () Int)
(declare-fun x1051 () Int)
(declare-fun x1236 () Int)
(declare-fun x1292 () Bool)
(declare-fun x552 () Int)
(declare-fun x430 () Int)
(declare-fun x1355 () Int)
(declare-fun x922 () Bool)
(declare-fun x357 () Int)
(declare-fun x793 () Bool)
(declare-fun x508 () Int)
(declare-fun x393 () Int)
(declare-fun x1217 () Bool)
(declare-fun x1325 () Int)
(declare-fun x739 () Int)
(declare-fun x749 () Int)
(declare-fun x1271 () Bool)
(declare-fun x200 () Bool)
(declare-fun x684 () Int)
(declare-fun x13 () Int)
(declare-fun x168 () Int)
(declare-fun x464 () Int)
(declare-fun x582 () Int)
(declare-fun x750 () Int)
(declare-fun x636 () Bool)
(declare-fun x593 () Int)
(declare-fun x898 () Int)
(declare-fun x106 () Bool)
(declare-fun x624 () Int)
(declare-fun x89 () Bool)
(declare-fun x1351 () Bool)
(declare-fun x910 () Int)
(declare-fun x135 () Int)
(declare-fun x20 () Bool)
(declare-fun x1083 () Bool)
(declare-fun x343 () Int)
(declare-fun x1072 () Bool)
(declare-fun x617 () Int)
(declare-fun x256 () Bool)
(declare-fun x536 () Int)
(declare-fun x675 () Int)
(declare-fun x1137 () Bool)
(declare-fun x82 () Bool)
(declare-fun x1152 () Bool)
(declare-fun x488 () Int)
(declare-fun x680 () Int)
(declare-fun x469 () Int)
(declare-fun x764 () Bool)
(declare-fun x842 () Int)
(declare-fun x443 () Bool)
(declare-fun x1171 () Bool)
(declare-fun x588 () Bool)
(declare-fun x602 (Int) Int)
(declare-fun x919 () Bool)
(declare-fun x157 () Bool)
(declare-fun x1100 () Int)
(declare-fun x170 () Int)
(declare-fun x518 () Bool)
(declare-fun x88 () Bool)
(declare-fun x814 () Int)
(declare-fun x152 () Int)
(declare-fun x52 () Bool)
(declare-fun x235 () Int)
(declare-fun x161 () Int)
(declare-fun x1168 () Bool)
(declare-fun x379 () Bool)
(declare-fun x335 () Bool)
(declare-fun x1138 () Bool)
(declare-fun x556 () Int)
(declare-fun x874 () Int)
(declare-fun x632 () Int)
(declare-fun x520 () Int)
(declare-fun x295 () Bool)
(declare-fun x1162 () Int)
(declare-fun x731 () Int)
(declare-fun x1012 () Bool)
(declare-fun x126 () Int)
(declare-fun x33 () Int)
(declare-fun x546 () Int)
(declare-fun x285 () Int)
(declare-fun x1220 () Int)
(declare-fun x851 () Bool)
(declare-fun x614 () Int)
(declare-fun x458 () Bool)
(declare-fun x353 () Bool)
(declare-fun x364 () Int)
(declare-fun x855 () Bool)
(declare-fun x1099 () Int)
(declare-fun x1011 () Int)
(declare-fun x697 () Int)
(declare-fun x538 () Int)
(declare-fun x54 () Int)
(declare-fun x1142 () Bool)
(declare-fun x1005 () Bool)
(declare-fun x1144 () Bool)
(declare-fun x111 () Int)
(declare-fun x1228 () Bool)
(declare-fun x737 () Bool)
(declare-fun x638 () Int)
(declare-fun x1167 (Int) Int)
(declare-fun x662 () Int)
(declare-fun x1076 () Int)
(declare-fun x480 () Bool)
(declare-fun x862 () Int)
(declare-fun x692 () Bool)
(declare-fun x914 () Bool)
(declare-fun x1007 () Bool)
(declare-fun x774 () Bool)
(declare-fun x269 () Int)
(declare-fun x1257 () Bool)
(declare-fun x1327 () Int)
(declare-fun x745 () Bool)
(declare-fun x962 (Int Int Int Int Int Int Int) Int)
(declare-fun x564 () Int)
(declare-fun x1009 () Int)
(declare-fun x561 () Int)
(declare-fun x734 () Bool)
(declare-fun x615 () Bool)
(declare-fun x1318 () Bool)
(declare-fun x1311 () Bool)
(declare-fun x478 (Int) Int)
(declare-fun x499 () Int)
(declare-fun x1222 () Bool)
(declare-fun x69 () Bool)
(declare-fun x1362 () Int)
(declare-fun x354 () Int)
(declare-fun x729 () Int)
(declare-fun x870 () Bool)
(declare-fun x171 () Int)
(declare-fun x1349 () Int)
(declare-fun x206 () Int)
(declare-fun x243 () Bool)
(declare-fun x438 () Int)
(declare-fun x212 () Int)
(declare-fun x137 () Bool)
(declare-fun x331 () Int)
(declare-fun x921 () Bool)
(declare-fun x872 () Bool)
(declare-fun x43 () Int)
(declare-fun x1074 () Int)
(declare-fun x1023 () Bool)
(declare-fun x59 (Int) Int)
(declare-fun x1210 () Bool)
(declare-fun x215 () Bool)
(declare-fun x586 () Int)
(declare-fun x132 () Int)
(declare-fun x821 () Int)
(declare-fun x376 () Bool)
(declare-fun x668 () Bool)
(declare-fun x1175 () Int)
(declare-fun x1299 () Bool)
(declare-fun x270 () Int)
(declare-fun x530 () Int)
(declare-fun x441 () Bool)
(declare-fun x858 () Bool)
(declare-fun x613 () Bool)
(declare-fun x296 () Int)
(declare-fun x203 (Int) Int)
(declare-fun x789 () Int)
(declare-fun x758 () Int)
(declare-fun x606 () Int)
(declare-fun x810 (Int) Int)
(declare-fun x1184 () Int)
(declare-fun x375 () Bool)
(declare-fun x578 () Int)
(declare-fun x466 () Bool)
(declare-fun x45 () Bool)
(declare-fun x777 () Int)
(declare-fun x1244 () Bool)
(declare-fun x102 () Int)
(declare-fun x1260 (Int) Int)
(declare-fun x722 () Int)
(declare-fun x884 () Bool)
(declare-fun x1010 () Bool)
(declare-fun x795 () Bool)
(declare-fun x1331 () Bool)
(declare-fun x991 () Bool)
(declare-fun x1058 () Bool)
(declare-fun x772 () Int)
(declare-fun x214 () Int)
(declare-fun x974 () Int)
(declare-fun x386 () Int)
(declare-fun x1238 () Bool)
(declare-fun x1347 () Bool)
(declare-fun x456 () Int)
(declare-fun x290 () Bool)
(declare-fun x963 () Int)
(declare-fun x986 () Bool)
(declare-fun x439 (Int) Int)
(declare-fun x1002 () Int)
(declare-fun x642 () Bool)
(declare-fun x733 () Bool)
(declare-fun x706 (Int) Int)
(declare-fun x712 () Int)
(declare-fun x1092 (Int Int Int Int Int Int) Int)
(declare-fun x1342 () Int)
(declare-fun x390 () Bool)
(declare-fun x1221 () Bool)
(declare-fun x514 () Int)
(declare-fun x585 () Int)
(declare-fun x66 () Bool)
(declare-fun x408 () Bool)
(declare-fun x1321 () Int)
(declare-fun x823 () Bool)
(declare-fun x44 () Int)
(declare-fun x827 () Bool)
(declare-fun x496 () Int)
(declare-fun x665 () Int)
(declare-fun x30 () Int)
(declare-fun x1067 () Int)
(declare-fun x686 () Bool)
(declare-fun x661 () Int)
(declare-fun x1261 () Bool)
(declare-fun x291 () Bool)
(declare-fun x978 () Bool)
(declare-fun x699 () Bool)
(declare-fun x490 () Bool)
(declare-fun x885 () Int)
(declare-fun x752 () Bool)
(declare-fun x29 () Int)
(declare-fun x498 () Int)
(declare-fun x1033 () Int)
(declare-fun x194 () Bool)
(declare-fun x249 () Int)
(declare-fun x779 () Int)
(declare-fun x474 () Bool)
(declare-fun x219 () Int)
(declare-fun x1256 () Int)
(declare-fun x399 () Int)
(declare-fun x65 () Bool)
(declare-fun x1050 () Int)
(declare-fun x548 () Int)
(declare-fun x407 () Int)
(declare-fun x468 () Bool)
(declare-fun x688 () Int)
(declare-fun x955 () Bool)
(declare-fun x557 () Int)
(declare-fun x366 () Int)
(declare-fun x415 () Int)
(declare-fun x476 () Bool)
(declare-fun x129 () Int)
(declare-fun x1316 () Int)
(declare-fun x424 () Bool)
(declare-fun x669 () Int)
(declare-fun x543 () Bool)
(declare-fun x1218 () Int)
(declare-fun x946 () Int)
(declare-fun x972 () Int)
(declare-fun x929 () Int)
(declare-fun x1235 () Int)
(declare-fun x835 () Bool)
(declare-fun x882 () Int)
(declare-fun x678 () Int)
(declare-fun x185 () Int)
(declare-fun x864 () Int)
(declare-fun x222 () Int)
(declare-fun x1105 () Int)
(declare-fun x1158 () Int)
(declare-fun x1082 () Int)
(declare-fun x630 () Bool)
(declare-fun x811 () Bool)
(declare-fun x388 () Int)
(declare-fun x1300 () Bool)
(declare-fun x783 () Bool)
(declare-fun x434 () Int)
(declare-fun x1091 () Bool)
(declare-fun x744 () Int)
(declare-fun x551 () Bool)
(declare-fun x841 () Bool)
(declare-fun x726 () Int)
(declare-fun x781 () Int)
(declare-fun x645 () Int)
(declare-fun x92 () Int)
(declare-fun x568 () Int)
(declare-fun x163 () Int)
(declare-fun x637 () Bool)
(declare-fun x192 () Int)
(declare-fun x477 () Bool)
(declare-fun x1135 () Int)
(declare-fun x116 () Int)
(declare-fun x1219 () Bool)
(declare-fun x230 () Int)
(declare-fun x409 () Bool)
(declare-fun x25 () Bool)
(declare-fun x470 () Int)
(declare-fun x782 () Int)
(declare-fun x1159 () Int)
(declare-fun x940 () Int)
(declare-fun x949 () Int)
(declare-fun x1330 () Int)
(declare-fun x460 () Bool)
(declare-fun x944 () Int)
(declare-fun x853 () Int)
(declare-fun x239 (Int Int Int Int) Int)
(declare-fun x721 () Bool)
(declare-fun x1302 () Int)
(declare-fun x542 () Bool)
(declare-fun x1263 () Bool)
(declare-fun x788 () Bool)
(declare-fun x423 () Int)
(declare-fun x716 () Int)
(declare-fun x1170 () Int)
(declare-fun x57 () Bool)
(declare-fun x138 () Int)
(declare-fun x311 () Int)
(declare-fun x1035 () Int)
(declare-fun x1122 () Int)
(declare-fun x150 () Int)
(declare-fun x1054 () Int)
(declare-fun x1120 () Bool)
(declare-fun x534 () Int)
(declare-fun x174 (Int Int) Int)
(declare-fun x1148 () Bool)
(declare-fun x875 (Int) Int)
(declare-fun x226 () Int)
(declare-fun x1350 () Int)
(declare-fun x273 () Int)
(declare-fun x691 () Bool)
(declare-fun x1027 () Int)
(declare-fun x355 () Bool)
(declare-fun x995 () Int)
(declare-fun x127 () Int)
(declare-fun x1291 () Bool)
(declare-fun x594 () Bool)
(declare-fun x838 () Int)
(declare-fun x865 () Int)
(declare-fun x365 () Bool)
(declare-fun x165 () Int)
(declare-fun x164 () Int)
(declare-fun x790 () Bool)
(declare-fun x1084 () Bool)
(declare-fun x370 () Bool)
(declare-fun x352 () Bool)
(declare-fun x426 () Bool)
(declare-fun x574 () Int)
(declare-fun x894 () Int)
(declare-fun x644 () Bool)
(declare-fun x1197 () Bool)
(declare-fun x389 () Int)
(declare-fun x982 () Int)
(declare-fun x1367 (Int) Int)
(declare-fun x509 () Int)
(declare-fun x1095 () Int)
(declare-fun x809 () Bool)
(declare-fun x999 () Int)
(declare-fun x1246 () Int)
(declare-fun x1079 () Bool)
(declare-fun x1169 () Int)
(declare-fun x836 () Int)
(declare-fun x671 () Int)
(declare-fun x497 () Bool)
(declare-fun x1004 () Int)
(declare-fun x322 () Int)
(declare-fun x887 () Bool)
(declare-fun x484 () Int)
(declare-fun x1258 () Bool)
(declare-fun x51 () Bool)
(declare-fun x1192 () Bool)
(declare-fun x1250 () Int)
(declare-fun x633 () Bool)
(declare-fun x1233 () Int)
(declare-fun x1109 () Int)
(declare-fun x666 (Int) Int)
(declare-fun x1247 () Bool)
(declare-fun x820 () Int)
(declare-fun x178 () Int)
(declare-fun x392 () Bool)
(declare-fun x93 () Int)
(declare-fun x1133 () Int)
(declare-fun x1132 () Int)
(declare-fun x979 () Int)
(declare-fun x550 () Bool)
(declare-fun x959 () Bool)
(declare-fun x948 () Int)
(declare-fun x1042 () Int)
(declare-fun x1146 () Int)
(declare-fun x685 () Int)
(declare-fun x981 () Int)
(declare-fun x1231 () Int)
(declare-fun x244 () Bool)
(declare-fun x95 () Int)
(declare-fun x176 () Int)
(declare-fun x1205 (Int) Bool)
(declare-fun x85 () Int)
(declare-fun x1284 () Bool)
(declare-fun x517 () Int)
(declare-fun x272 () Int)
(declare-fun x831 () Int)
(declare-fun x64 () Int)
(declare-fun x148 () Int)
(declare-fun x572 () Bool)
(declare-fun x334 () Int)
(declare-fun x1126 () Int)
(declare-fun x1288 () Int)
(declare-fun x501 () Bool)
(declare-fun x738 () Int)
(declare-fun x1003 () Int)
(declare-fun x591 () Int)
(declare-fun x451 () Bool)
(declare-fun x1356 () Int)
(declare-fun x625 () Bool)
(declare-fun x8 () Bool)
(declare-fun x360 () Int)
(declare-fun x693 () Int)
(declare-fun x223 () Int)
(declare-fun x1254 () Int)
(declare-fun x326 () Int)
(declare-fun x436 () Bool)
(declare-fun x475 () Int)
(declare-fun x1223 () Int)
(declare-fun x784 () Int)
(declare-fun x315 () Bool)
(declare-fun x210 () Int)
(declare-fun x71 () Int)
(declare-fun x457 () Bool)
(declare-fun x342 () Bool)
(declare-fun x473 () Int)
(declare-fun x1037 () Int)
(declare-fun x332 () Bool)
(declare-fun x1348 () Bool)
(declare-fun x411 () Int)
(declare-fun x905 () Int)
(declare-fun x1056 () Bool)
(declare-fun x187 () Bool)
(declare-fun x313 () Bool)
(declare-fun x718 () Int)
(declare-fun x640 () Int)
(declare-fun x1264 () Int)
(declare-fun x1252 () Bool)
(declare-fun x1225 () Int)
(declare-fun x759 () Bool)
(declare-fun x432 () Int)
(declare-fun x634 () Bool)
(declare-fun x1191 () Int)
(declare-fun x1087 () Bool)
(declare-fun x1195 () Int)
(declare-fun x954 () Int)
(declare-fun x237 () Int)
(declare-fun x377 () Int)
(declare-fun x621 () Bool)
(declare-fun x1025 () Int)
(declare-fun x1024 () Bool)
(declare-fun x452 () Int)
(declare-fun x945 (Int Int Int Int Int) Int)
(declare-fun x1020 () Int)
(declare-fun x505 () Int)
(declare-fun x1206 () Int)
(declare-fun x486 () Int)
(declare-fun x371 () Bool)
(declare-fun x663 () Int)
(declare-fun x771 () Int)
(declare-fun x1017 () Bool)
(declare-fun x893 () Int)
(declare-fun x276 () Bool)
(declare-fun x913 () Int)
(declare-fun x600 () Int)
(declare-fun x229 () Bool)
(declare-fun x197 () Int)
(declare-fun x997 () Int)
(declare-fun x265 () Int)
(declare-fun x845 () Int)
(declare-fun x240 () Bool)
(declare-fun x516 () Int)
(declare-fun x363 () Bool)
(declare-fun x584 () Bool)
(declare-fun x900 () Int)
(declare-fun x1305 () Int)
(declare-fun x860 () Int)
(declare-fun x985 () Int)
(declare-fun x754 () Int)
(declare-fun x289 () Int)
(declare-fun x97 () Int)
(declare-fun x587 () Int)
(declare-fun x1232 () Int)
(declare-fun x541 () Bool)
(declare-fun x664 () Int)
(declare-fun x676 () Int)
(declare-fun x368 () Int)
(declare-fun x211 () Bool)
(declare-fun x339 () Bool)
(declare-fun x344 () Int)
(declare-fun x762 () Bool)
(declare-fun x401 () Int)
(declare-fun x72 () Bool)
(declare-fun x1014 () Int)
(declare-fun x268 (Int) Int)
(declare-fun x1209 () Int)
(declare-fun x1306 () Int)
(declare-fun x966 () Int)
(declare-fun x87 () Bool)
(declare-fun x349 () Int)
(declare-fun x791 () Int)
(declare-fun x1253 () Bool)
(declare-fun x181 () Int)
(declare-fun x46 () Int)
(declare-fun x183 () Int)
(declare-fun x519 () Bool)
(declare-fun x292 () Int)
(declare-fun x909 () Int)
(declare-fun x1111 () Int)
(declare-fun x450 () Bool)
(declare-fun x571 () Int)
(declare-fun x920 () Bool)
(declare-fun x866 () Bool)
(declare-fun x160 () Int)
(declare-fun x1313 () Bool)
(declare-fun x428 () Bool)
(declare-fun x253 () Bool)
(declare-fun x1068 () Bool)
(declare-fun x440 () Int)
(declare-fun x323 (Int Int) Int)
(declare-fun x115 () Bool)
(declare-fun x607 () Int)
(declare-fun x980 (Int) Int)
(declare-fun x679 () Bool)
(declare-fun x1314 () Bool)
(declare-fun x1281 () Int)
(declare-fun x943 () Bool)
(declare-fun x967 () Bool)
(declare-fun x142 () Int)
(declare-fun x453 () Int)
(declare-fun x21 () Bool)
(declare-fun x1179 () Bool)
(declare-fun x113 () Int)
(declare-fun x1060 () Bool)
(declare-fun x1034 () Int)
(declare-fun x1145 () Bool)
(declare-fun x238 () Int)
(declare-fun x901 () Int)
(declare-fun x1358 () Bool)
(declare-fun x447 () Int)
(declare-fun x651 () Int)
(declare-fun x597 () Bool)
(declare-fun x555 () Bool)
(declare-fun x1298 () Bool)
(declare-fun x318 () Int)
(declare-fun x1319 () Int)
(declare-fun x28 () Int)
(declare-fun x1127 () Bool)
(declare-fun x47 () Bool)
(declare-fun x911 () Bool)
(declare-fun x372 () Int)
(declare-fun x139 () Int)
(declare-fun x31 () Int)
(declare-fun x1036 () Bool)
(declare-fun x653 () Bool)
(declare-fun x852 () Bool)
(declare-fun x523 () Int)
(declare-fun x1193 () Int)
(declare-fun x294 () Int)
(declare-fun x394 () Int)
(declare-fun x861 () Bool)
(declare-fun x305 () Bool)
(declare-fun x306 () Bool)
(declare-fun x345 () Bool)
(declare-fun x5 () Int)
(declare-fun x40 () Int)
(declare-fun x73 () Int)
(declare-fun x681 (Int Int) Int)
(declare-fun x489 () Int)
(declare-fun x1365 () Int)
(declare-fun x1176 () Bool)
(declare-fun x1177 () Bool)
(declare-fun x583 () Int)
(declare-fun x970 () Bool)
(declare-fun x425 () Bool)
(declare-fun x467 () Int)
(declare-fun x405 (Int) Int)
(declare-fun x917 () Int)
(declare-fun x700 () Bool)
(declare-fun x1339 () Bool)
(declare-fun x336 () Int)
(declare-fun x236 () Bool)
(declare-fun x1224 () Int)
(declare-fun x596 () Bool)
(declare-fun x590 () Bool)
(declare-fun x859 () Bool)
(declare-fun x761 () Int)
(declare-fun x1028 () Int)
(declare-fun x310 () Int)
(declare-fun x1248 () Bool)
(declare-fun x1359 () Bool)
(declare-fun x49 () Int)
(declare-fun x873 () Int)
(declare-fun x928 () Int)
(declare-fun x418 () Int)
(declare-fun x175 (Int) Int)
(declare-fun x76 () Int)
(declare-fun x1227 () Int)
(declare-fun x32 () Bool)
(declare-fun x878 () Int)
(declare-fun x1186 () Int)
(declare-fun x751 () Int)
(declare-fun x1049 () Int)
(declare-fun x825 () Int)
(declare-fun x677 () Int)
(declare-fun x735 () Bool)
(declare-fun x1307 () Int)
(declare-fun x14 () Int)
(declare-fun x787 () Int)
(declare-fun x558 () Int)
(declare-fun x246 () Int)
(declare-fun x1214 () Int)
(declare-fun x916 () Int)
(declare-fun x61 () Int)
(declare-fun x863 () Int)
(declare-fun x96 () Int)
(declare-fun x1333 () Bool)
(declare-fun x1200 () Int)
(declare-fun x649 () Int)
(declare-fun x807 (Int) Int)
(declare-fun x832 () Bool)
(declare-fun x857 () Bool)
(declare-fun x172 () Int)
(declare-fun x221 () Bool)
(declare-fun x153 () Int)
(declare-fun x1255 () Int)
(declare-fun x228 () Int)
(declare-fun x3 () Int)
(declare-fun x907 () Int)
(declare-fun x1161 () Int)
(declare-fun x765 () Bool)
(declare-fun x627 () Int)
(declare-fun x589 () Int)
(declare-fun x1237 () Bool)
(declare-fun x575 () Bool)
(declare-fun x805 () Int)
(declare-fun x618 () Bool)
(declare-fun x528 (Int) Int)
(declare-fun x992 () Bool)
(declare-fun x1116 () Int)
(declare-fun x1048 () Bool)
(declare-fun x708 () Int)
(declare-fun x333 () Int)
(declare-fun x348 () Int)
(declare-fun x951 () Int)
(declare-fun x487 () Int)
(declare-fun x1102 () Int)
(declare-fun x1114 () Int)
(declare-fun x936 () Int)
(declare-fun x776 () Bool)
(declare-fun x271 () Bool)
(declare-fun x1259 () Bool)
(declare-fun x233 () Bool)
(declare-fun x605 () Int)
(declare-fun x117 () Int)
(declare-fun x942 () Int)
(declare-fun x123 () Int)
(declare-fun x347 () Bool)
(declare-fun x429 () Int)
(declare-fun x255 () Int)
(declare-fun x828 () Int)
(declare-fun x320 () Int)
(declare-fun x581 () Bool)
(declare-fun x1129 () Int)
(declare-fun x819 () Int)
(declare-fun x930 () Int)
(declare-fun x766 () Bool)
(declare-fun x258 () Int)
(declare-fun x760 () Bool)
(declare-fun x658 () Int)
(declare-fun x871 () Int)
(declare-fun x144 () Bool)
(declare-fun x404 () Int)
(declare-fun x282 () Bool)
(declare-fun x1115 () Int)
(declare-fun x834 () Bool)
(declare-fun x526 () Int)
(declare-fun x278 () Int)
(declare-fun x816 () Int)
(declare-fun x38 () Int)
(declare-fun x976 () Int)
(declare-fun x420 () Bool)
(declare-fun x1070 () Int)
(declare-fun x1040 () Bool)
(declare-fun x279 () Int)
(declare-fun x998 () Int)
(declare-fun x1124 () Int)
(declare-fun x798 () Int)
(declare-fun x839 () Int)
(declare-fun x522 () Bool)
(declare-fun x626 () Int)
(declare-fun x652 () Int)
(declare-fun x925 () Int)
(declare-fun x682 () Bool)
(declare-fun x837 () Int)
(declare-fun x325 () Int)
(declare-fun x329 () Int)
(declare-fun x60 () Bool)
(declare-fun x125 () Bool)
(declare-fun x1172 () Int)
(declare-fun x86 () Bool)
(declare-fun x309 () Int)
(declare-fun x703 () Int)
(declare-fun x84 () Int)
(declare-fun x1320 () Int)
(declare-fun x400 () Int)
(declare-fun x149 () Int)
(declare-fun x801 () Int)
(declare-fun x889 () Int)
(declare-fun x736 () Int)
(declare-fun x169 () Int)
(declare-fun x947 () Int)
(declare-fun x479 () Int)
(declare-fun x580 () Int)
(declare-fun x1 () Bool)
(declare-fun x1241 () Int)
(declare-fun x717 () Bool)
(declare-fun x1353 () Int)
(declare-fun x1211 (Int Int) Int)
(declare-fun x155 () Int)
(declare-fun x899 () Int)
(declare-fun x648 () Int)
(declare-fun x22 () Int)
(declare-fun x109 () Int)
(declare-fun x94 () Bool)
(declare-fun x472 () Bool)
(declare-fun x599 () Int)
(declare-fun x829 () Int)
(declare-fun x459 () Bool)
(declare-fun x319 () Int)
(declare-fun x694 () Int)
(declare-fun x952 () Bool)
(declare-fun x903 () Int)
(declare-fun x1160 () Int)
(declare-fun x131 () Bool)
(declare-fun x35 () Int)
(declare-fun x714 () Int)
(declare-fun x495 () Int)
(declare-fun x1338 () Int)
(declare-fun x1118 () Int)
(declare-fun x525 (Int Int) Int)
(declare-fun x1066 () Bool)
(declare-fun x427 () Int)
(declare-fun x1346 () Bool)
(declare-fun x1279 () Bool)
(declare-fun x1086 () Bool)
(declare-fun x1183 () Bool)
(declare-fun x1112 () Int)
(declare-fun x53 () Bool)
(declare-fun x433 () Int)
(declare-fun x1368 () Bool)
(declare-fun x1337 () Int)
(declare-fun x956 (Int) Int)
(declare-fun x98 () Bool)
(declare-fun x2 () Int)
(declare-fun x1096 () Int)
(declare-fun x869 () Bool)
(declare-fun x1150 () Int)
(declare-fun x815 () Int)
(declare-fun x1107 () Bool)
(declare-fun x41 () Int)
(declare-fun x563 () Int)
(declare-fun x58 (Int) Int)
(declare-fun x803 () Int)
(declare-fun x1064 () Bool)
(declare-fun x1063 () Int)
(declare-fun x567 () Bool)
(declare-fun x1181 () Bool)
(declare-fun x616 () Int)
(declare-fun x770 () Int)
(declare-fun x1149 () Bool)
(declare-fun x822 () Bool)
(declare-fun x1173 () Bool)
(declare-fun x1013 () Int)
(declare-fun x1366 () Int)
(declare-fun x34 () Int)
(declare-fun x1364 () Int)
(declare-fun x124 () Bool)
(declare-fun x122 () Int)
(declare-fun x670 () Int)
(declare-fun x971 () Bool)
(declare-fun x932 () Bool)
(declare-fun x108 () Bool)
(declare-fun x232 () Bool)
(declare-fun x1229 () Bool)
(declare-fun x304 () Int)
(declare-fun x202 () Bool)
(declare-fun x1113 () Bool)
(declare-fun x431 () Int)
(declare-fun x74 () Int)
(declare-fun x797 () Bool)
(declare-fun x977 () Bool)
(declare-fun x110 () Bool)
(declare-fun x128 () Int)
(declare-fun x195 () Bool)
(declare-fun x1038 () Int)
(declare-fun x224 () Bool)
(declare-fun x293 () Int)
(declare-fun x1363 () Bool)
(declare-fun x1290 () Int)
(declare-fun x1141 () Int)
(declare-fun x1361 () Bool)
(declare-fun x1125 () Int)
(declare-fun x1165 () Bool)
(declare-fun x1101 () Bool)
(declare-fun x184 () Int)
(declare-fun x39 () Int)
(declare-fun x242 () Int)
(declare-fun x266 () Int)
(declare-fun x1057 () Bool)
(declare-fun x1128 () Int)
(declare-fun x753 () Int)
(declare-fun x213 () Bool)
(declare-fun x1269 () Int)
(declare-fun x566 () Int)
(declare-fun x1294 () Int)
(declare-fun x705 () Int)
(declare-fun x1276 () Bool)
(declare-fun x346 () Int)
(declare-fun x573 () Int)
(declare-fun x800 () Int)
(declare-fun x1203 () Bool)
(declare-fun x813 () Bool)
(declare-fun x107 () Bool)
(declare-fun x492 () Int)
(declare-fun x173 () Bool)
(declare-fun x768 () Int)
(declare-fun x513 () Bool)
(declare-fun x261 () Int)
(declare-fun x710 () Int)
(declare-fun x1143 () Bool)
(declare-fun x933 (Int Int) Int)
(declare-fun x231 () Int)
(declare-fun x209 () Bool)
(declare-fun x747 () Bool)
(declare-fun x1155 () Bool)
(declare-fun x883 () Int)
(declare-fun x891 () Int)
(declare-fun x611 () Int)
(declare-fun x937 () Bool)
(declare-fun x1018 () Int)
(declare-fun x1245 () Int)
(declare-fun x748 () Int)
(declare-fun x701 () Int)
(declare-fun x367 () Bool)
(declare-fun x100 () Int)
(declare-fun x373 () Int)
(declare-fun x217 (Int) Int)
(declare-fun x1328 () Int)
(declare-fun x846 () Int)
(declare-fun x1131 () Int)
(declare-fun x328 () Bool)
(declare-fun x1354 () Int)
(declare-fun x755 (Int) Int)
(declare-fun x544 () Int)
(declare-fun x225 () Int)
(declare-fun x769 () Int)
(declare-fun x741 () Bool)
(declare-fun x1134 () Bool)
(declare-fun x1106 () Int)
(declare-fun x612 () Int)
(declare-fun x912 () Int)
(declare-fun x539 () Bool)
(declare-fun x442 () Int)
(declare-fun x145 () Int)
(declare-fun x904 () Int)
(declare-fun x868 () Int)
(declare-fun x742 () Int)
(declare-fun x533 () Int)
(declare-fun x485 () Bool)
(declare-fun x156 () Int)
(declare-fun x16 () Int)
(declare-fun x598 () Int)
(declare-fun x896 () Int)
(declare-fun x1289 () Int)
(declare-fun x180 () Int)
(declare-fun x68 () Bool)
(declare-fun x1180 () Int)
(declare-fun x833 () Bool)
(declare-fun x356 () Int)
(declare-fun x934 () Bool)
(declare-fun x635 () Int)
(declare-fun x1343 () Bool)
(declare-fun x362 () Int)
(declare-fun x1075 () Int)
(declare-fun x961 () Int)
(declare-fun x196 () Int)
(declare-fun x1309 () Bool)
(declare-fun x201 () Bool)
(define-fun x55 ((x562 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x562) (>= x562 0)) x562 (- x562 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x1251 ((x562 Int)) Int (ite (and (< x562 0) (>= x562 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x562 115792089237316195423570985008687907853269984665640564039457584007913129639936) x562))
(define-fun x655 ((x562 Int)) Int (ite (and (>= x562 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x562)) x562 (ite (and (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 x562) (> 231584178474632390847141970017375815706539969331281128078915168015826259279872 x562)) (- x562 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (>= x562 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (< x562 0)) (+ x562 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x323 x562 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x902 ((x806 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x806) (<= 0 x806)))
(define-fun x437 ((x806 Int) (x327 Int)) Bool (=> (and (< 0 x327) (> x806 0)) (and (>= (x525 x806 x327) 0) (<= (x525 x806 x327) x806))))
(define-fun x118 ((x806 Int) (x327 Int)) Bool (=> (and (and (< x806 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x806 0)) (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x327) (>= x327 1))) (and (< (x525 x806 x327) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 (x525 x806 x327)))))
(define-fun x1322 ((x806 Int) (x327 Int)) Bool (=> (and (< x327 x806) (< 1 x327)) (< (x525 x806 x327) x806)))
(define-fun x844 ((x806 Int) (x327 Int)) Bool (=> (and (< 0 x806) (< 0 x327)) (= (= 0 (x525 x806 x327)) (< x806 x327))))
(define-fun x105 ((x806 Int) (x327 Int)) Bool (=> (and (< 0 x327) (< 0 x806)) (and (> (* (x525 x806 x327) x327) (- x806 x327)) (<= (* x327 (x525 x806 x327)) x806))))
(define-fun x308 ((x806 Int) (x327 Int)) Bool (= (* (x525 x806 x327) x327) (- x806 (x704 (- x327 1) x806))))
(define-fun x162 ((x806 Int) (x327 Int)) Bool (and (x118 x806 x327) (x1322 x806 x327) (x105 x806 x327) (x844 x806 x327) (x437 x806 x327) (x308 x806 x327)))
(define-fun x1249 ((x806 Int)) Bool (= 0 (x525 0 x806)))
(define-fun x361 ((x806 Int)) Bool (= x806 (x525 x806 1)))
(define-fun x687 ((x806 Int)) Bool (=> (not (= x806 0)) (= (x525 x806 x806) 1)))
(define-fun x780 ((x806 Int)) Bool (and (x687 x806) (x1249 x806) (x361 x806)))
(define-fun x18 ((x806 Int)) Bool (and (= x806 (x704 x806 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (x704 115792089237316195423570985008687907853269984665640564039457584007913129639935 x806) x806)))
(define-fun x1016 ((x806 Int)) Bool (and (= 0 (x704 0 x806)) (= 0 (x704 x806 0))))
(define-fun x449 ((x806 Int)) Bool (= x806 (x704 x806 x806)))
(define-fun x1272 ((x806 Int)) Bool (and (x1016 x806) (x18 x806) (x449 x806)))
(define-fun x7 ((x806 Int) (x327 Int)) Bool (= (x704 x806 x327) (x704 x327 x806)))
(define-fun x314 ((x806 Int) (x327 Int)) Bool (and (=> (<= 0 x806) (<= (x704 x806 x327) x806)) (=> (<= 0 x327) (<= (x704 x806 x327) x327)) (>= (x704 x806 x327) 0)))
(define-fun x592 ((x806 Int) (x327 Int)) Bool (and (x7 x806 x327) (x314 x806 x327)))
(define-fun x275 ((x806 Int)) Bool (= (x323 x806 2) (x704 x806 1)))
(define-fun x1204 ((x806 Int)) Bool (and (x275 x806) (x592 x806 1)))
(define-fun x1198 ((x806 Int) (x327 Int)) Bool (and (< (x323 x806 x327) x327) (>= (x323 x806 x327) 0)))
(define-fun x1110 ((x806 Int) (x327 Int)) Bool (=> (and (<= 0 x806) (> x327 0)) (= (< x806 x327) (= x806 (x323 x806 x327)))))
(define-fun x403 ((x806 Int) (x327 Int)) Bool (=> (and (< 0 x327) (and (>= x806 x327) (< x806 (+ x327 x327)))) (= (- x806 x327) (x323 x806 x327))))
(define-fun x1039 ((x806 Int) (x327 Int)) Bool (=> (< 0 x327) (= x806 (+ (x323 x806 x327) (* x327 (x525 x806 x327))))))
(define-fun x960 ((x806 Int) (x327 Int)) Bool (and (x1110 x806 x327) (x1039 x806 x327) (x403 x806 x327) (x1198 x806 x327)))
(define-fun x391 ((x806 Int)) Bool (= 0 (x323 0 x806)))
(define-fun x964 ((x806 Int)) Bool (= (x323 x806 1) 0))
(define-fun x1188 ((x806 Int)) Bool (= (x323 x806 x806) 0))
(define-fun x723 ((x806 Int)) Bool (and (x1188 x806) (x391 x806) (x964 x806)))
(define-fun x301 ((x806 Int)) Bool (= (x704 x806 127) (x323 x806 128)))
(define-fun x818 ((x806 Int)) Bool (and (x301 x806) (x592 x806 127)))
(define-fun x1022 ((x806 Int) (x327 Int)) Bool (= (x1211 x806 x327) (* x806 x327)))
(define-fun x167 ((x806 Int) (x327 Int)) Bool (and (= (- (* x327 x806) (* x327 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (x1211 (- x806 115792089237316195423570985008687907853269984665640564039457584007913129639936) x327)) (= (- (* x806 (- x327 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x327 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x1211 (- x806 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x327 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x1211 x806 (- x327 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x327 115792089237316195423570985008687907853269984665640564039457584007913129639936) x806))))
(define-fun x1045 ((x806 Int) (x327 Int)) Bool (=> (and (< 0 x806) (< 0 x327)) (= (< (x1211 x806 x327) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (x525 (x655 (x1211 x806 x327)) x806) x327))))
(define-fun x1201 ((x806 Int) (x327 Int)) Bool (=> (and (not (= 0 x806)) (not (= 0 x327))) (and (= (x525 (x1211 x806 x327) x806) x327) (= x806 (x525 (x1211 x806 x327) x327)))))
(define-fun x133 ((x806 Int) (x327 Int)) Bool (=> (and (> x806 0) (< 0 x327)) (= (> (x1211 x806 x327) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> x327 (x525 115792089237316195423570985008687907853269984665640564039457584007913129639935 x806)))))
(define-fun x1174 ((x806 Int) (x327 Int)) Bool (and (= (x655 (x1211 x806 x327)) (x655 (x1211 (- x806 115792089237316195423570985008687907853269984665640564039457584007913129639936) x327))) (= (x655 (x1211 x806 x327)) (x655 (x1211 (- x806 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x327 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x655 (x1211 x806 (- x327 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x655 (x1211 x806 x327)))))
(define-fun x324 ((x806 Int) (x327 Int)) Bool (and (=> (and (and (> x327 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x327)) (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x806) (> x806 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x1211 (- x806 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x327 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x806) (x525 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x327))))) (=> (and (and (< 0 x327) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x327)) (and (> x806 0) (<= x806 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (<= x806 (x525 57896044618658097711785492504343953926634992332820282019728792003956564819967 x327)) (<= (x1211 x806 x327) 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (=> (and (and (> x327 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x327)) (and (< 0 x806) (<= x806 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (>= (x525 57896044618658097711785492504343953926634992332820282019728792003956564819968 x806) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x327)) (>= (x1211 x806 (- x327 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968)))) (=> (and (and (> x806 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x806 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (and (< 0 x327) (<= x327 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (>= (x525 57896044618658097711785492504343953926634992332820282019728792003956564819968 x327) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x806)) (>= (x1211 (- x806 115792089237316195423570985008687907853269984665640564039457584007913129639936) x327) (- 57896044618658097711785492504343953926634992332820282019728792003956564819968))))))
(define-fun x396 ((x806 Int) (x327 Int)) Bool (and (x167 x806 x327) (x324 x806 x327) (x1201 x806 x327) (x133 x806 x327) (x1174 x806 x327) (x1045 x806 x327) (x1022 x806 x327)))
(define-fun x674 ((x806 Int)) Bool (and (= (x1211 0 x806) 0) (= 0 (x1211 x806 0))))
(define-fun x719 ((x806 Int)) Bool (and (= x806 (x1211 x806 1)) (= (x1211 1 x806) x806)))
(define-fun x463 ((x806 Int)) Bool (and (x674 x806) (x719 x806)))
(define-fun x1080 ((x806 Int)) Bool (and (< x806 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x806 0)))
(define-fun x1047 ((x806 Int)) Bool (= (x655 x806) (+ (x704 x806 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x323 x806 32))))
(define-fun x374 ((x806 Int)) Bool (and (x592 x806 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x1047 x806)))
(define-fun x654 ((x806 Int)) Bool (= (x655 x806) (+ (x323 x806 256) (x704 x806 115792089237316195423570985008687907853269984665640564039457584007913129639680))))
(define-fun x70 ((x806 Int)) Bool (and (x654 x806) (x592 x806 115792089237316195423570985008687907853269984665640564039457584007913129639680)))
(define-fun x4 ((x806 Int) (x327 Int)) Bool (= (x1211 x327 x806) (x1211 x806 x327)))
(define-fun x1053 ((x806 Int) (x327 Int)) Bool (and (=> (and (< x806 0) (> 0 x327)) (> (x1211 x806 x327) 0)) (=> (and (< x806 0) (< 0 x327)) (< (x1211 x806 x327) 0)) (=> (and (< 0 x806) (< x327 0)) (< (x1211 x806 x327) 0)) (=> (and (< 0 x327) (< 0 x806)) (< 0 (x1211 x806 x327)))))
(define-fun x757 ((x806 Int) (x327 Int)) Bool (and (x1174 x806 x327) (x1053 x806 x327) (x1045 x806 x327) (x324 x806 x327) (x133 x806 x327) (x4 x806 x327) (x1201 x806 x327)))
(define-fun x939 ((x806 Int) (x327 Int)) Bool (and (x1322 x806 x327) (x437 x806 x327) (x118 x806 x327) (x105 x806 x327) (x844 x806 x327)))
(define-fun x382 ((x806 Int) (x327 Int)) Bool (=> (and (< 0 x806) (< 0 x327)) (and (> (x1211 (x525 x806 x327) x327) (- x806 x327)) (>= x806 (x1211 (x525 x806 x327) x327)))))
(define-fun x1215 ((x806 Int) (x327 Int)) Bool (and (x118 x806 x327) (x1322 x806 x327) (x437 x806 x327) (x844 x806 x327) (x382 x806 x327)))
(define-fun x182 ((x806 Int)) Bool (and (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x174 x806 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (x174 115792089237316195423570985008687907853269984665640564039457584007913129639935 x806) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(define-fun x808 ((x806 Int)) Bool (and (= x806 (x174 x806 0)) (= x806 (x174 0 x806))))
(define-fun x554 ((x806 Int)) Bool (= (x174 x806 x806) x806))
(define-fun x358 ((x806 Int)) Bool (and (x182 x806) (x808 x806) (x554 x806)))
(define-fun x886 ((x806 Int) (x327 Int)) Bool (= (x174 x806 x327) (x174 x327 x806)))
(define-fun x120 ((x806 Int) (x327 Int)) Bool (and (=> (<= 0 x806) (>= (x174 x806 x327) x806)) (=> (>= x327 0) (>= (x174 x806 x327) x327)) (<= (x174 x806 x327) (+ x806 x327))))
(define-fun x540 ((x806 Int) (x327 Int)) Bool (and (x886 x806 x327) (x120 x806 x327)))
(define-fun x481 ((x806 Int)) Bool (= (x323 x806 32) (x704 x806 31)))
(define-fun x786 ((x806 Int)) Bool (and (x592 x806 31) (x481 x806)))
(define-fun x413 ((x806 Int)) Bool (= (x704 x806 340282366920938463463374607431768211455) (x323 x806 340282366920938463463374607431768211456)))
(define-fun x338 ((x806 Int)) Bool (and (x592 x806 340282366920938463463374607431768211455) (x413 x806)))
(define-fun x824 ((x806 Int)) Bool (= (x706 x806) (ite (< (x704 x806 340282366920938463463374607431768211455) 170141183460469231731687303715884105728) (x704 x806 340282366920938463463374607431768211455) (+ (x704 x806 340282366920938463463374607431768211455) 115792089237316195423570985008687907852929702298719625575994209400481361428480))))
(define-fun x973 ((x965 Int)) Int 0)
(define-fun x775 ((x965 Int)) Int (ite (< x965 x158) (x191 x965) 0))
(define-fun x888 ((x965 Int)) Int (ite (and (<= 0 x965) (< x965 x158)) (x58 x965) (x775 x965)))
(define-fun x512 ((x965 Int)) Int (ite (= x965 x319) x838 (x1260 x965)))
(define-fun x643 ((x965 Int)) Int (ite (= x965 x917) x1246 (x512 x965)))
(define-fun x1270 ((x965 Int)) Int (ite (= x965 128) x326 (x973 x965)))
(define-fun x537 ((x965 Int)) Int (ite (= 160 x965) x71 (x1270 x965)))
(define-fun x1360 ((x965 Int)) Int (ite (= x965 160) x1063 (x1270 x965)))
(define-fun x146 ((x965 Int)) Int (ite (= 192 x965) x1366 (x537 x965)))
(define-fun x321 ((x965 Int)) Int (ite x352 (x1270 x965) (ite x581 (ite x872 (x537 x965) (x146 x965)) (x1360 x965))))
(define-fun x208 ((x965 Int)) Int (ite (= x486 x965) x660 (x321 x965)))
(define-fun x511 ((x965 Int)) Int (ite (= x680 x965) x599 (x208 x965)))
(define-fun x1156 ((x965 Int)) Int (ite (= x680 x965) x520 (x208 x965)))
(define-fun x817 ((x965 Int)) Int (ite (= x1267 x965) x1150 (x439 x965)))
(define-fun x1240 ((x965 Int)) Int (ite x1300 (x439 x965) (x817 x965)))
(define-fun x1055 ((x965 Int)) Int (ite (= x1193 x965) x1365 (x511 x965)))
(define-fun x482 ((x965 Int)) Int (ite x51 (x208 x965) (ite x141 (ite x1282 (x511 x965) (x1055 x965)) (x1156 x965))))
(define-fun x1265 ((x965 Int)) Int (ite (= x423 x965) x1355 (x482 x965)))
(define-fun x996 ((x965 Int)) Int (ite (= x965 x79) x3 (x1265 x965)))
(define-fun x609 ((x965 Int)) Int (ite (= x965 x1161) x1305 (x996 x965)))
(define-fun x794 ((x965 Int)) Int (ite (= x965 x79) x805 (x1265 x965)))
(define-fun x398 ((x965 Int)) Int (ite x919 (x1265 x965) (ite x383 (ite x1361 (x996 x965) (x609 x965)) (x794 x965))))
(define-fun x502 ((x965 Int)) Int (ite (= x879 x965) x606 (x398 x965)))
(define-fun x545 ((x965 Int)) Int (ite (= x1169 x965) x407 (x502 x965)))
(define-fun x1303 ((x965 Int)) Int (ite (= x230 x965) x801 (x545 x965)))
(define-fun x577 ((x965 Int)) Int (ite (= x648 x965) x1264 (x1303 x965)))
(define-fun x1032 ((x965 Int)) Int (ite x229 (x1303 x965) (ite x795 (x545 x965) (ite x1333 (x502 x965) (ite x572 (x398 x965) (x577 x965))))))
(define-fun x877 ((x965 Int)) Int (ite (= x965 x49) 0 (x1032 x965)))
(define-fun x830 ((x965 Int)) Int (ite (= x1304 x965) 24 (x877 x965)))
(define-fun x298 ((x965 Int)) Int (ite (= x965 x879) 15621254588198505905128070491301349125963569839395559151037828136576825163776 (x830 x965)))
(define-fun x24 ((x965 Int)) Int (ite (= x965 x900) 128 (x298 x965)))
(define-fun x1097 ((x965 Int)) Int (ite (= x616 x965) x479 (x24 x965)))
(define-fun x286 ((x965 Int)) Int (ite (= x983 x965) x273 (x1097 x965)))
(define-fun x1090 ((x965 Int)) Int (ite (= x1067 x965) x246 (x286 x965)))
(define-fun x316 ((x965 Int)) Int (ite (= x1321 x965) x331 (x1090 x965)))
(define-fun x302 ((x965 Int)) Int (ite (= x965 x1077) x505 (x316 x965)))
(define-fun x330 ((x965 Int)) Int (ite x1217 (x316 x965) (ite x1334 (x1090 x965) (ite x1152 (x286 x965) (ite x345 (x1097 x965) (x302 x965))))))
(define-fun x1185 ((x965 Int)) Int (ite (= x965 x61) 0 (x330 x965)))
(define-fun x262 ((x965 Int)) Int (ite (= x1029 x965) x573 (x1185 x965)))
(define-fun x1341 ((x965 Int)) Int (ite (= x393 x965) x150 (x262 x965)))
(define-fun x1103 ((x965 Int)) Int (ite (= x965 x1353) x885 (x1341 x965)))
(define-fun x696 ((x965 Int)) Int (ite (= x1353 x965) x578 (x1341 x965)))
(define-fun x435 ((x965 Int)) Int (ite x236 (ite x94 (x1341 x965) (x1103 x965)) (x696 x965)))
(define-fun x27 ((x965 Int)) Int (ite (= x965 x1202) x546 (x435 x965)))
(define-fun x199 ((x965 Int)) Int (ite (= x965 x14) x1234 (x27 x965)))
(define-fun x454 ((x965 Int)) Int (ite (= x781 x965) x966 (x199 x965)))
(define-fun x50 ((x965 Int)) Int (ite (= x965 x289) x969 (x454 x965)))
(define-fun x1089 ((x965 Int)) Int (ite (= x580 x965) x742 (x50 x965)))
(define-fun x1323 ((x965 Int)) Int (ite (= x452 x965) x831 (x1089 x965)))
(define-fun x207 ((x965 Int)) Int (ite x1171 (x1089 x965) (ite x1363 (x50 x965) (ite x785 (x454 x965) (ite x730 (x199 x965) (x1323 x965))))))
(define-fun x1285 ((x965 Int)) Int (ite (= x965 x707) 0 (x207 x965)))
(define-fun x1130 ((x965 Int)) Int (ite (= x249 x965) x1009 (x1285 x965)))
(define-fun x10 ((x965 Int)) Int (ite (and (< x965 x879) (<= x879 x965)) (x1167 (- x965 x879)) (x1130 x965)))
(define-fun x42 ((x965 Int)) Int (ite (= x965 x879) 29289127993025145568725129057828671567744754166070328588094505464281371246592 (x10 x965)))
(define-fun x417 ((x965 Int)) Int (ite (= x965 x1170) x736 (x42 x965)))
(define-fun x531 ((x965 Int)) Int (ite (= x965 x359) x854 (x417 x965)))
(define-fun x647 ((x965 Int)) Int (ite (= x879 x965) 10894474682274239493831243662817379401261526446360622092269559273883068006400 (x531 x965)))
(define-fun x1071 ((x965 Int)) Int (ite (= x965 x879) x1116 (x647 x965)))
(define-fun x1015 ((x965 Int)) Int (ite (= 0 x965) x1116 (x217 x965)))
(define-fun x11 ((x965 Int)) Int (ite (and (< x965 (+ 32 x879)) (<= x879 x965)) (x1015 (- x965 x879)) (x1071 x965)))
(define-fun x639 ((x965 Int)) Int (ite (= x965 x947) x467 (x11 x965)))
(define-fun x1041 ((x965 Int)) Int (ite x1300 (x10 x965) (x639 x965)))
(define-fun x414 ((x965 Int)) Int (ite (= x965 x907) x429 (x1041 x965)))
(define-fun x802 ((x965 Int)) Int (ite (= x965 x916) x751 (x414 x965)))
(define-fun x619 ((x965 Int)) Int (ite (= x763 x965) x589 (x802 x965)))
(define-fun x251 ((x965 Int)) Int 0)
(define-fun x799 ((x965 Int)) Int 0)
(define-fun x975 ((x965 Int)) Int (ite (= x965 x661) 0 (x478 x965)))
(define-fun x248 ((x965 Int)) Int (ite (= x965 x758) 0 (x203 x965)))
(define-fun x725 ((x965 Int)) Int (ite x1007 (ite x957 (x203 x965) (x248 x965)) (x203 x965)))
(define-fun x990 ((x965 Int)) Int (ite (= x976 x965) 0 (x875 x965)))
(define-fun x924 ((x965 Int)) Int (ite (= x965 x1289) 0 (x807 x965)))
(define-fun x620 ((x965 Int)) Int (ite x542 (ite x856 (x807 x965) (x924 x965)) (x807 x965)))
(define-fun x406 ((x965 Int)) Int (ite (= x965 x612) 0 (x666 x965)))
(define-fun x448 ((x965 Int)) Int (ite (= x703 x965) 0 (x528 x965)))
(define-fun x250 ((x965 Int)) Int (ite x957 (x203 x965) (x248 x965)))
(define-fun x656 ((x965 Int)) Int (ite x856 (x807 x965) (x924 x965)))
(define-fun x1030 ((x965 Int)) Int (ite (= x78 x965) x223 (x619 x965)))
(define-fun x895 ((x965 Int)) Int (ite x376 (x619 x965) (ite x1155 (x802 x965) (ite x1142 (x414 x965) (ite x256 (x1041 x965) (x1030 x965))))))
(define-fun x385 ((x965 Int)) Int (ite (= x965 x1075) 0 (x895 x965)))
(define-fun x1178 ((x965 Int)) Int (ite (= x135 x965) 24 (x385 x965)))
(define-fun x264 ((x965 Int)) Int (ite (= x965 x155) 64 (x1178 x965)))
(define-fun x529 ((x965 Int)) Int (ite (= x171 x965) x803 (x264 x965)))
(define-fun x80 ((x965 Int)) Int (ite (= x1008 x965) x1111 (x529 x965)))
(define-fun x988 ((x965 Int)) Int (ite (= x965 x279) x381 (x80 x965)))
(define-fun x850 ((x965 Int)) Int (ite (= x965 x35) x928 (x988 x965)))
(define-fun x198 ((x965 Int)) Int (ite (= x965 x179) x1151 (x850 x965)))
(define-fun x1000 ((x965 Int)) Int (ite x420 (x850 x965) (ite x353 (x988 x965) (ite x283 (x80 x965) (ite x1017 (x529 x965) (x198 x965))))))
(define-fun x281 ((x965 Int)) Int (ite (= x974 x965) 0 (x1000 x965)))
(define-fun x284 ((x965 Int)) Int (ite (= x965 x517) x819 (x281 x965)))
(define-fun x297 ((x965 Int)) Int (ite (= x965 x987) x931 (x284 x965)))
(define-fun x15 ((x965 Int)) Int (ite (= x1281 x965) x1109 (x297 x965)))
(define-fun x287 ((x965 Int)) Int (ite (= x965 x145) x665 (x15 x965)))
(define-fun x205 ((x965 Int)) Int (ite (= x563 x965) x677 (x287 x965)))
(define-fun x1093 ((x965 Int)) Int (ite (= x1021 x965) x95 (x205 x965)))
(define-fun x650 ((x965 Int)) Int (ite x335 (x205 x965) (ite x1317 (x287 x965) (ite x451 (x15 x965) (ite x1139 (x297 x965) (x1093 x965))))))
(define-fun x547 ((x965 Int)) Int (ite (= x965 x508) 0 (x650 x965)))
(define-fun x48 ((x965 Int)) Int (ite (= x155 x965) 32 (x547 x965)))
(define-fun x994 ((x965 Int)) Int (ite (= x181 x965) x865 (x48 x965)))
(define-fun x559 ((x965 Int)) Int (ite (= x965 x117) x558 (x994 x965)))
(define-fun x465 ((x965 Int)) Int (ite (= x873 x965) x170 (x559 x965)))
(define-fun x1207 ((x965 Int)) Int (ite (= x583 x965) x627 (x465 x965)))
(define-fun x340 ((x965 Int)) Int (ite (= x965 x356) x93 (x1207 x965)))
(define-fun x455 ((x965 Int)) Int (ite (= x917 x965) x1034 (x643 x965)))
(define-fun x277 ((x965 Int)) Int (ite (= x234 x965) x688 (x455 x965)))
(define-fun x422 ((x965 Int)) Int (ite (= x965 x1225) 1 (x1340 x965)))
(define-fun x1226 ((x965 Int)) Int (ite x195 (x1207 x965) (ite x543 (x465 x965) (ite x1258 (x559 x965) (ite x1058 (x994 x965) (x340 x965))))))
(define-fun x140 ((x965 Int)) Int (ite (= x1141 x965) 0 (x1226 x965)))
(define-fun x1104 ((x965 Int)) Int (ite (= x965 x804) 0 (x1182 x965)))
(define-fun x989 ((x965 Int)) Int (ite (= x965 x489) 0 (x1367 x965)))
(define-fun x341 ((x965 Int)) Int (ite x1368 (x1182 x965) (x1104 x965)))
(define-fun x147 ((x965 Int)) Int (ite x642 (x1367 x965) (x989 x965)))
(define-fun x1310 ((x965 Int)) Int (ite x378 (x1182 x965) (ite x1368 (x1182 x965) (x1104 x965))))
(define-fun x1344 ((x965 Int)) Int (ite x339 (x1367 x965) (ite x642 (x1367 x965) (x989 x965))))
(define-fun x1230 ((x965 Int)) Int (ite (= x929 x965) x317 (x1274 x965)))
(define-fun x136 ((x965 Int)) Int (ite (= x1119 x965) x404 (x1153 x965)))
(define-fun x631 ((x965 Int)) Int (ite (= x1124 x965) x184 (x1310 x965)))
(define-fun x112 ((x965 Int)) Int (ite (= x910 x965) x982 (x1344 x965)))
(define-fun x604 ((x965 Int)) Int (ite x952 (x1310 x965) (x631 x965)))
(define-fun x1196 ((x965 Int)) Int (ite (= x965 x1342) x611 (x604 x965)))
(define-fun x1308 ((x965 Int)) Int (ite x1276 (x1344 x965) (x112 x965)))
(define-fun x1213 ((x965 Int)) Int (ite (= x697 x965) x1162 (x1308 x965)))
(define-fun x444 ((x965 Int)) Int (ite x855 (x604 x965) (x1196 x965)))
(define-fun x1123 ((x965 Int)) Int (ite (= x965 x929) x421 (x1274 x965)))
(define-fun x130 ((x965 Int)) Int (ite x1279 (x1308 x965) (x1213 x965)))
(define-fun x553 ((x965 Int)) Int (ite (= x965 x1119) x1033 (x1153 x965)))
(define-fun x17 ((x965 Int)) Int (ite x200 (x1123 x965) (x1230 x965)))
(define-fun x941 ((x965 Int)) Int (ite x200 (ite x855 (x604 x965) (x1196 x965)) (x1310 x965)))
(define-fun x461 ((x965 Int)) Int (ite x483 (x553 x965) (x136 x965)))
(define-fun x90 ((x965 Int)) Int (ite x483 (ite x1279 (x1308 x965) (x1213 x965)) (x1344 x965)))
(define-fun x445 ((x965 Int)) Int (ite (= x965 x500) x1009 (x602 x965)))
(define-fun x1065 ((x965 Int)) Int (ite (= x965 x526) x736 (x923 x965)))
(define-fun x727 ((x806 Int) (x327 Int) (x1268 Int) (x778 Int)) Bool (=> (and (<= 0 x806) (<= x327 x778) (>= x327 0) (<= x806 x1268)) (<= (x1211 x806 x327) (x1211 x1268 x778))))
(define-fun x227 ((x806 Int) (x327 Int) (x1268 Int) (x778 Int)) Bool (=> (= x1268 x806) (= (x1211 x806 (- x327 x778)) (- (x1211 x806 x327) (x1211 x1268 x778)))))
(assert (x723 x614))
(assert (x902 x325))
(assert (x902 x578))
(assert (not x1173))
(assert (x162 x40 256))
(assert (> (x906 x710 x527 x552 x670 x828 x442 x487 x412) 10000))
(assert (x902 x486))
(assert (= (and x1101 x673) x870))
(assert (x902 x837))
(assert (= (x847 (x681 32 x661)) x661))
(assert (x902 x310))
(assert (x902 x438))
(assert (x1205 1605942358))
(assert (x374 x430))
(assert (x1272 x626))
(assert (x1205 4294967295))
(assert (= x1296 x897))
(assert (x396 256 x1003))
(assert (x338 x521))
(assert (x902 x279))
(assert (x902 x255))
(assert (x902 x606))
(assert (= (x810 (x681 x1004 x76)) x1004))
(assert (= x88 (and x474 x211)))
(assert (x902 x469))
(assert (x902 x64))
(assert (x396 8 x607))
(assert (x902 x161))
(assert (= (x962 x845 x318 x701 x149 x54 x121 x1031) (x1345 (x962 x845 x318 x701 x149 x54 x121 x1031))))
(assert (= (and x760 (not x1331)) x642))
(assert (x902 x890))
(assert (=> (<= x475 10000) (= (x1345 x475) 0)))
(assert (= (and (not x1348) x65) x618))
(assert (x902 x908))
(assert (x902 x732))
(assert (x902 x61))
(assert (= (x1336 64 114221746417031484496905892821793293822878436923706878644384133060206014517163 1) (x1345 (x1336 64 114221746417031484496905892821793293822878436923706878644384133060206014517163 1))))
(assert (> (x1336 64 x736 3) 10000))
(assert (x902 x249))
(assert (x902 x936))
(assert (=> (>= 10000 x123) (= 0 (x1345 x123))))
(assert (= x1087 (and x541 x243)))
(assert (not (x1205 (x681 x845 x169))))
(assert (= x62 (x59 (x1336 x845 x744 x62))))
(assert (x902 x1126))
(assert (= x881 (x847 (x1336 x1004 x881 x1001))))
(assert (x902 x814))
(assert (not (x1205 (x1336 64 x514 17))))
(assert (x902 x622))
(assert (= 0 (x1345 115792089237316195423570985008687907853269984665640564039457584007913129639934)))
(assert (> (x1336 64 x917 x749) 10000))
(assert (= x1358 (and x1210 x350)))
(assert (x1272 x521))
(assert (x902 x873))
(assert (= (x1345 4132204338) 0))
(assert (x960 x626 32))
(assert (= (x1345 x910) (x1345 (+ 1 x910))))
(assert (> (x962 x1004 x475 x1269 x492 x1189 x349 x1316) 10000))
(assert (x902 x354))
(assert (= (x1345 (x1336 x979 x38 x532)) (x1336 x979 x38 x532)))
(assert (= x710 (x810 (x239 x710 x453 x496 x791))))
(assert (= (=> (and x1036 (and (= x1365 (x203 x269)) (= (x55 (+ x1193 32)) x878) (= (not (> x1262 x878)) x1036))) x247) x811))
(assert (=> (<= x312 10000) (= (x1345 x312) 0)))
(assert (= (x1336 64 x736 3) (x1345 (x1336 64 x736 3))))
(assert (x960 x816 2))
(assert (=> (<= x176 10000) (= (x1345 x176) 0)))
(assert (x1272 1))
(assert (x902 x179))
(assert (= x1004 (x810 (x962 x1004 x475 x1269 x492 x1189 x349 x1316))))
(assert (x780 (+ 31 x626)))
(assert (x902 x1193))
(assert (x902 x164))
(assert (x960 x73 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x902 x242))
(assert (x723 x292))
(assert (x902 x387))
(assert (= (x755 (x962 x979 x1025 x1212 x591 x266 x1326 x1273)) x1326))
(assert (= (x980 (x239 x979 x312 x488 x1233)) x1233))
(assert (=> (<= x750 10000) (= 0 (x1345 x750))))
(assert (x902 x801))
(assert (x902 x1355))
(assert (x902 x885))
(assert (x902 x1049))
(assert (= (x59 (x239 x1004 x576 x770 x1235)) x770))
(assert (x902 x954))
(assert (x902 x388))
(assert (x902 x38))
(assert (= x256 (and (not x218) x1168)))
(assert (x960 x354 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x902 x296))
(assert (x902 x222))
(assert (x780 (+ 31 x1355)))
(assert (x902 x677))
(assert (=> (<= x177 10000) (= (x1345 x177) 0)))
(assert (= (x1345 (x945 x979 x303 x949 x373 x177)) (x945 x979 x303 x949 x373 x177)))
(assert (=> (<= x1269 10000) (= (x1345 x1269) 0)))
(assert (x902 x770))
(assert (x902 x617))
(assert (= (x1345 (x239 x979 x312 x488 x1233)) (x239 x979 x312 x488 x1233)))
(assert (= x593 (x59 (x962 x710 x1002 x593 x1128 x565 x560 x663))))
(assert (x902 x127))
(assert (=> (>= 10000 x44) (= (x1345 x44) 0)))
(assert (= x1306 (x59 (x1092 x845 x925 x1306 x1082 x622 x1035))))
(assert (= (x1345 x1124) (x1345 (+ x1124 1))))
(assert (x902 x1038))
(assert (x902 x787))
(assert (x902 x272))
(assert (x902 x680))
(assert (= (x847 (x1336 64 x662 19)) x662))
(assert (x902 x514))
(assert (= (=> (and (and (= 32 x1328) x379) (and (= (x720 x104) x885) (= x379 (not (< 32 x150))))) x686) x91))
(assert (x902 x123))
(assert (= x1048 (and x759 x764)))
(assert (=> (>= 10000 x1220) (= 0 (x1345 x1220))))
(assert (x723 128))
(assert (x902 x603))
(assert (x902 x109))
(assert (= x306 (and (not x375) x618)))
(assert (=> (>= 10000 x245) (= (x1345 x245) 0)))
(assert (x902 x85))
(assert (=> (>= 10000 x432) (= 0 (x1345 x432))))
(assert (= 0 (x1345 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x757 x260 x160))
(assert (x902 x149))
(assert (= (=> (and (and (= x1121 64) x1081 (= x697 x1108)) (and (= (x55 (+ 32 x423)) x1114) (= (not (< 32 x820)) x1081) (= x1108 (+ x910 1)) (= x982 (x1178 x1114)))) x370) x692))
(assert (x396 32 x1206))
(assert (x902 x261))
(assert (< 10000 (x681 32 x1119)))
(assert (x902 x982))
(assert (x960 x430 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x902 x13))
(assert (x1205 115792089237316195423570985008687907853099843482180094807725896704197245534208))
(assert (x902 x1273))
(assert (x463 x503))
(assert (x1080 x641))
(assert (x1272 x1302))
(assert (= (x847 (x1092 x1004 x142 x30 x222 x605 x446)) x142))
(assert (x902 x447))
(assert (=> (<= x1118 10000) (= (x1345 x1118) 0)))
(assert (= x442 (x755 (x906 x710 x527 x552 x670 x828 x442 x487 x412))))
(assert (= x828 (x405 (x906 x710 x527 x552 x670 x828 x442 x487 x412))))
(assert (x902 x738))
(assert (x902 x293))
(assert (x818 x726))
(assert (=> (<= x684 10000) (= (x1345 x684) 0)))
(assert (= (and x668 x682) x1297))
(assert (= 64 (x810 (x1336 64 x736 3))))
(assert (x902 x599))
(assert (= true x613))
(assert (x902 x475))
(assert (x902 x336))
(assert (x780 2))
(assert (x902 x675))
(assert (not (x1205 (x906 x845 x600 x1118 x999 x585 x948 x738 x386))))
(assert (=> (>= 10000 x917) (= 0 (x1345 x917))))
(assert (x902 x1242))
(assert (x902 x999))
(assert (= (and x1358 (not x425)) x957))
(assert (x902 x1357))
(assert (= (and (not x541) x243) x522))
(assert (= x1166 (x755 (x1092 x710 x1069 x1256 x829 x29 x1166))))
(assert (= x915 (=> (and (and (= x1250 64) x1019 (= x1125 x1342)) (and (= x1125 (+ x1124 1)) (= x1019 (not (> x972 32))) (= (x1178 x1117) x184) (= x1117 (x55 (+ x486 32))))) x943)))
(assert (=> (>= 10000 x1031) (= (x1345 x1031) 0)))
(assert (x902 x626))
(assert (= (x1345 (+ x489 1)) (x1345 x489)))
(assert (x162 x816 2))
(assert (= (or x47 x1259) x506))
(assert (x902 x1302))
(assert (x463 x607))
(assert (=> (>= 10000 x768) (= (x1345 x768) 0)))
(assert (= x1061 (or x1276 x1247)))
(assert (x1205 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (= (x405 (x962 x1004 x475 x1269 x492 x1189 x349 x1316)) x1189))
(assert (x960 x772 128))
(assert (= x253 x633))
(assert (x902 x197))
(assert (x902 x632))
(assert (x374 x73))
(assert (x396 32 (ite (not (= 0 x150)) 1 0)))
(assert (x902 x139))
(assert (x902 x839))
(assert (= (x1345 29289127993025145568725129057828671567744754166070328588094505464281371246592) 0))
(assert (= (and (not x1237) x355) x1142))
(assert (= x920 (and x424 x724)))
(assert (x780 256))
(assert (x902 x694))
(assert (x723 x626))
(assert (x1205 57896044618658097711785492504343953926634992332820282019728792003956564819967))
(assert (x780 x128))
(assert (x902 x968))
(assert (= (and (not x927) x535) x1333))
(assert (= (x1345 x574) (x1345 (+ x574 x1236))))
(assert (= x715 (and x927 x535)))
(assert (=> (<= x948 10000) (= (x1345 x948) 0)))
(assert (x902 x1002))
(assert (= x979 (x810 (x1336 x979 x38 x532))))
(assert (= (and x747 x870) x1145))
(assert (x902 x102))
(assert (x960 x196 2))
(assert (=> (<= x488 10000) (= (x1345 x488) 0)))
(assert (= x711 (and x588 (not x892))))
(assert (= x335 (and (not x724) x424)))
(assert (= x159 (=> (= x1216 (= (ite (= 0 x640) x640 (ite (< 0 x126) 1 0)) 0)) (and (=> (and (and (= (x525 (+ x326 31) 32) x139) (= (x525 x354 2) x470) (= x428 (= x326 0)) (= (x704 1 x354) x188) (= (ite (< 0 x188) x470 (x704 127 x470)) x326) (= x557 (x1251 (- x188 (mod (ite (< x326 32) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= 128 x510) (= x1014 (* 32 x139)) (= (+ 160 x1014) x270) (or (= 1 x557) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x557))) (not x1216)) (and (=> (and (not x428) (= (< 31 x326) x541)) (and (=> (and (and (= x1063 (* 256 x1003)) (= (x525 x354 256) x1003)) (not x541)) x633) (=> (and (and (= (+ 1 x1027) x731) (= (> x944 192) x1261) (= (x681 32 4) x1027) (= x944 (+ x326 160)) (= (x720 x1027) x71)) x541) (and (=> (not x1261) x253) (=> x1261 x89))))) (=> x428 x633))) (=> (and x1216 (and (= x514 x1356) (= x13 x1020))) x25)))))
(assert (= (and x1120 x271) x367))
(assert (x902 x235))
(assert (= (and x887 (not x436)) x1017))
(assert (not (x1205 (x1336 64 x768 x862))))
(assert (x902 x899))
(assert (x902 x121))
(assert (x902 x453))
(assert (=> (>= 10000 x949) (= (x1345 x949) 0)))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x681 32 4)))
(assert (x902 x266))
(assert (= (x1345 (x1092 x845 x925 x1306 x1082 x622 x1035)) (x1092 x845 x925 x1306 x1082 x622 x1035)))
(assert (< (x1336 64 x662 19) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (x1345 (x681 32 4)) (x681 32 4)))
(assert (x902 x987))
(assert (x902 x1353))
(assert (x463 256))
(assert (= x114 (and (not x594) x832)))
(assert (= x1280 (x980 (x1092 x979 x127 x231 x1280 x1186 x825))))
(assert (x902 x949))
(assert (= x979 (x810 (x945 x979 x303 x949 x373 x177))))
(assert (= (x405 (x1092 x1004 x142 x30 x222 x605 x446)) x605))
(assert (x902 x676))
(assert (x902 x784))
(assert (= (and x457 x1145) x424))
(assert (x902 x571))
(assert (=> (>= 10000 x744) (= (x1345 x744) 0)))
(assert (x902 x381))
(assert (x960 x702 128))
(assert (= x369 (=> (and (= (x1251 (- x267 (mod (ite (< x163 32) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x397) (= x976 (+ x661 1)) (= x267 (x704 1 x97)) (= x384 (> x163 31)) (= (x875 x976) x97) (or (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x397) (= x397 1)) (= (ite (> x267 0) x1180 (x704 127 x1180)) x163) (= (x525 x97 2) x1180)) (and (=> (and (and (= x1183 (< x1289 x148)) (= (x681 32 x976) x1289) (= x566 (x525 (+ 31 x163) 32)) (= x148 (+ x1289 x566))) x384) (and (=> (not x1183) x1134) (=> x1183 x66))) (=> (not x384) x1064)))))
(assert (x902 x245))
(assert (x902 x1234))
(assert (x902 x96))
(assert (= x952 (and x295 (not x922))))
(assert (x902 x366))
(assert (= (x59 (x239 x710 x453 x496 x791)) x496))
(assert (x1272 x695))
(assert (x902 x904))
(assert (x723 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x592 x1302 x908))
(assert (= x1064 (=> (and (= x172 (x55 (+ 1 x514))) (= x1056 (> x936 0)) (= x612 (+ x976 1)) (= (x55 (+ 1 x514)) x1038) (= x693 128) (= (x55 (+ x486 32)) x263) (= x936 (x398 x486)) (= (+ x612 1) x703)) (and (=> (not x1056) x938) (=> (and x1056 (and (= x606 (x398 x263)) (= (> x936 32) x927))) (and (=> (and (and (= (> x936 64) x1057) (= x961 (x55 (+ x263 32))) (= (x55 (+ x879 32)) x1169) (= x407 (x502 x961))) x927) (and (=> (and (and (= (x545 x84) x801) (= x766 (< 96 x936)) (= x230 (x55 (+ 64 x879))) (= x84 (x55 (+ 64 x263)))) x1057) (and (=> x766 x1229) (=> (not x766) x938))) (=> (not x1057) x938))) (=> (not x927) x938)))))))
(assert (x902 x985))
(assert (x1205 1000000))
(assert (not (x1205 (x681 32 x661))))
(assert (= (x1345 (+ x574 x708)) (x1345 x574)))
(assert (x902 x761))
(assert (x902 x116))
(assert (x162 x97 2))
(assert (x1204 x354))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x681 32 x1223)))
(assert (= (x1345 x1289) (x1345 (+ x566 x1289))))
(assert (x902 x907))
(assert (= (x23 (x906 x979 x1319 x1349 x123 x1364 x659 x1037 x761)) x761))
(assert (x902 x1306))
(assert (=> (>= 10000 x1235) (= (x1345 x1235) 0)))
(assert (=> (>= 10000 x864) (= (x1345 x864) 0)))
(assert (x723 x883))
(assert (=> (<= x492 10000) (= (x1345 x492) 0)))
(assert (x902 x346))
(assert (x1205 18446744073709551615))
(assert (x902 x331))
(assert (= (x1345 (+ x976 1)) (x1345 x976)))
(assert (not (x1205 (x1336 64 71998914331801701415977457805802827292338598818749192222732755537001613711014 6))))
(assert (x902 x708))
(assert (=> (>= 10000 x527) (= (x1345 x527) 0)))
(assert (=> (>= 10000 x622) (= 0 (x1345 x622))))
(assert (x902 x874))
(assert (= x76 (x847 (x681 x1004 x76))))
(assert (x1272 x1172))
(assert (= (and (not x53) x1343) x543))
(assert (x902 x831))
(assert (x902 x729))
(assert (x902 x1352))
(assert (= x295 (and x594 x832)))
(assert (= (and x103 (not x1079)) x785))
(assert (= x833 (=> (and (= (+ x769 1) x421) (= x769 (* x73 2))) x1347)))
(assert (= (x1345 404098525) 0))
(assert (x374 x100))
(assert (=> (<= x1200 10000) (= 0 (x1345 x1200))))
(assert (= (x980 (x945 x979 x303 x949 x373 x177)) x373))
(assert (= x760 (and x21 x822)))
(assert (x1272 340282366920938463463374607431768211455))
(assert (= (x1190 115792089237316195423570985008687907853269984665640564039457584007913129639935 x561) (ite (< x561 256) (x525 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x933 2 x561)) 0)))
(assert (< (x1336 64 x736 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (x59 (x906 x845 x600 x1118 x999 x585 x948 x738 x386)) x1118))
(assert (x902 x1330))
(assert (not (x1205 (x681 32 x1223))))
(assert (x902 x605))
(assert (x902 x820))
(assert (=> (>= 10000 x532) (= 0 (x1345 x532))))
(assert (= (x681 x979 x320) (x1345 (x681 x979 x320))))
(assert (= x737 x790))
(assert (= x603 (x980 (x906 x1004 x1106 x954 x603 x912 x274 x800 x245))))
(assert (x902 x825))
(assert (= (and x1183 x390) x1252))
(assert (= 64 (x810 (x1336 64 x662 19))))
(assert (x902 x184))
(assert (= x74 (x405 (x945 x845 x432 x85 x1098 x74))))
(assert (= (x1092 x1004 x142 x30 x222 x605 x446) (x1345 (x1092 x1004 x142 x30 x222 x605 x446))))
(assert (=> (>= 10000 x318) (= 0 (x1345 x318))))
(assert (= (x810 (x906 x710 x527 x552 x670 x828 x442 x487 x412)) x710))
(assert (x902 x289))
(assert (x902 x54))
(assert (= x845 (x810 (x239 x845 x582 x798 x438))))
(assert (= x94 (and (not x474) x211)))
(assert (x1205 115792089237316195423570985008687907853099843482180094807725896704197245534209))
(assert (x1205 115792089237316195423570985008687907853269984665640564039457584007913129639680))
(assert (x902 x611))
(assert (x902 x534))
(assert (x902 x739))
(assert (x1204 x816))
(assert (x960 x1180 128))
(assert (x902 x440))
(assert (= x791 (x980 (x239 x710 x453 x496 x791))))
(assert (x902 x1009))
(assert (= (x1345 (+ x612 1)) (x1345 x612)))
(assert (= x1138 (or x1363 x1171 x785 x466 x730)))
(assert (x902 x557))
(assert (x902 x1172))
(assert (x902 x299))
(assert (= x1004 (x810 (x239 x1004 x576 x770 x1235))))
(assert (= x979 (x810 (x962 x979 x1025 x1212 x591 x266 x1326 x1273))))
(assert (=> (<= x1098 10000) (= (x1345 x1098) 0)))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x945 x710 x871 x242 x410 x946)))
(assert (= x855 (and x579 (not x1044))))
(assert (x396 256 x427))
(assert (x902 x840))
(assert (= 32 (x810 (x681 32 x1119))))
(assert (x902 x585))
(assert (< 10000 (x945 x979 x303 x949 x373 x177)))
(assert (< 10000 (x681 x845 x169)))
(assert (= (x405 (x1092 x710 x1069 x1256 x829 x29 x1166)) x29))
(assert (x902 x462))
(assert (x902 x30))
(assert (=> (>= 10000 x825) (= (x1345 x825) 0)))
(assert (= (=> (and (= x436 (< 0 x803)) (= x500 (+ 1 x1119)) (= (x55 (+ x155 64)) x171) (= (+ 1 x500) x526) (= x440 (x55 (+ x486 32))) (= (x55 (+ x171 32)) x1008) (= (x706 x521) x293) (= x521 (x55 (+ x662 1))) (= x803 (x264 x486)) (= (x706 x521) x1147)) (and (=> (and x436 (and (= (< 32 x803) x45) (= x1111 (x529 x440)))) (and (=> (not x45) x408) (=> (and x45 (and (= (x80 x997) x381) (= x992 (< 64 x803)) (= (x55 (+ 32 x440)) x997) (= (x55 (+ 32 x1008)) x279))) (and (=> (and (and (= x35 (x55 (+ 64 x1008))) (= (x988 x1129) x928) (= x1129 (x55 (+ x440 64))) (= (< 96 x803) x515)) x992) (and (=> x515 x476) (=> (not x515) x408))) (=> (not x992) x408))))) (=> (not x436) x408))) x783))
(assert (x902 x607))
(assert (x902 x1077))
(assert (x902 x828))
(assert (x463 x1003))
(assert (x902 x1356))
(assert (x902 x431))
(assert (x902 x658))
(assert (x902 x393))
(assert (x902 x1116))
(assert (x902 x1200))
(assert (x902 x329))
(assert (x902 x853))
(assert (x902 x838))
(assert (x780 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (=> (>= 10000 x582) (= (x1345 x582) 0)))
(assert (> (x1092 x1004 x142 x30 x222 x605 x446) 10000))
(assert (x1205 22334872))
(assert (= x585 (x405 (x906 x845 x600 x1118 x999 x585 x948 x738 x386))))
(assert (x1205 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (= (x847 (x1092 x845 x925 x1306 x1082 x622 x1035)) x925))
(assert (=> (>= 10000 x1364) (= 0 (x1345 x1364))))
(assert (x902 x226))
(assert (x902 x99))
(assert (x902 x22))
(assert (x902 x74))
(assert (x902 x317))
(assert (= x493 (and x621 x921)))
(assert (x902 x1075))
(assert (= (and x1297 (not x880)) x1258))
(assert (= (x847 (x962 x710 x1002 x593 x1128 x565 x560 x663)) x1002))
(assert (= x169 (x847 (x681 x845 x169))))
(assert (not (x1205 (x239 x710 x453 x496 x791))))
(assert (= x569 x247))
(assert (=> (>= 10000 x800) (= (x1345 x800) 0)))
(assert (=> (<= x925 10000) (= 0 (x1345 x925))))
(assert (= x582 (x847 (x239 x845 x582 x798 x438))))
(assert (x1272 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x902 x1112))
(assert (x902 x591))
(assert (= x446 (x755 (x1092 x1004 x142 x30 x222 x605 x446))))
(assert (= (x810 (x1336 64 71998914331801701415977457805802827292338598818749192222732755537001613711014 6)) 64))
(assert (= (x681 x845 x169) (x1345 (x681 x845 x169))))
(assert (= (x810 (x1336 64 x514 17)) 64))
(assert (= (x681 32 x1119) (x1345 (x681 32 x1119))))
(assert (x902 x49))
(assert (=> (<= x222 10000) (= 0 (x1345 x222))))
(assert (not (x1205 (x681 x979 x320))))
(assert (= 0 (x1345 170141183460469231731687303715884105726)))
(assert (x902 x181))
(assert (=> (>= 10000 x442) (= (x1345 x442) 0)))
(assert (x902 x652))
(assert (= (x980 (x945 x845 x432 x85 x1098 x74)) x1098))
(assert (= (=> (and (and (= x431 (x55 (+ 96 x440))) (= x1151 (x850 x431)) (= (x55 (+ 96 x1008)) x179) (= x1351 (not (> x803 128)))) x1351) x408) x476))
(assert (x960 x100 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= x416 (and x679 x1061)))
(assert (=> (<= x585 10000) (= (x1345 x585) 0)))
(assert (x902 x188))
(assert (not (x1205 (x1336 x979 x38 x532))))
(assert (x902 x373))
(assert (= x1247 (and x991 x700)))
(assert (x902 x1212))
(assert (x902 x883))
(assert (= (=> (and (= (< x972 x73) x1044) (or (and (and (= x1028 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x1190 115792089237316195423570985008687907853269984665640564039457584007913129639935 x789))) (= (x55 (+ x1250 x486)) x325) (= (x1178 x325) x826) (= x607 (x704 31 x73)) (= x611 (x704 x826 x1028)) (= x789 (* 8 x607))) x1044) (not x1044))) x833) x943))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x906 x1004 x1106 x954 x603 x912 x274 x800 x245)))
(assert (not (x1205 (x239 x1004 x576 x770 x1235))))
(assert (x902 x1164))
(assert (x902 x1109))
(assert (< (x1092 x1004 x142 x30 x222 x605 x446) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= x220 (or x1007 x1222)))
(assert (=> (>= 10000 x600) (= 0 (x1345 x600))))
(assert (x902 x1319))
(assert (x463 x427))
(assert (=> (>= 10000 x1002) (= (x1345 x1002) 0)))
(assert true)
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x1336 x710 x767 x1200)))
(assert (x902 x659))
(assert (= (or x353 x1017 x283 x420 x240) x673))
(assert (=> (>= 10000 x710) (= (x1345 x710) 0)))
(assert (=> (>= 10000 x770) (= (x1345 x770) 0)))
(assert (< (x1336 x1004 x881 x1001) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (x980 (x962 x845 x318 x701 x149 x54 x121 x1031)) x149))
(assert (= (x1345 15621254588198505905128070491301349125963569839395559151037828136576825163776) 0))
(assert (x902 x826))
(assert (> (x1336 64 x768 x862) 10000))
(assert (= 32 (x810 (x681 32 x929))))
(assert (=> (<= x560 10000) (= (x1345 x560) 0)))
(assert (x902 x570))
(assert (x902 x1160))
(assert (= (x1345 x758) (x1345 (+ x758 1))))
(assert (not (x1205 (x681 x1004 x76))))
(assert (= (x810 (x681 x979 x320)) x979))
(assert (x902 x712))
(assert (x902 x1136))
(assert (= (=> (and (<= x626 18446744073709551615) (= (x704 1 x196) x899) (= x1119 (+ x929 1)) (= x726 (x525 x196 2)) (= x21 (> x718 31)) (= x536 (x1251 (- x899 (mod (ite (> 32 x718) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= x626 (x1178 x423)) (= (ite (> x899 0) x726 (x704 127 x726)) x718) (= x196 (x1153 x1119)) (or (= x536 1) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x536))) (and (=> (not x21) x1296) (=> (and x21 (and (= (+ x484 x19) x257) (= (ite (> 32 x626) x19 x257) x489) (= x377 (+ x19 x387)) (= (x525 (+ 31 x718) 32) x387) (= (> x377 x489) x1331) (= x19 (x681 32 x1119)) (= (x525 (+ x626 31) 32) x484))) (and (=> x1331 x1005) (=> (not x1331) x897))))) x1347))
(assert (= x1296 (=> (= x892 (= 1 (ite (> x626 31) 1 0))) (and (=> (and x892 (and (= (> x820 0) x700) (= x820 (x704 115792089237316195423570985008687907853269984665640564039457584007913129639904 x626)) (= (x681 32 x1119) x910))) (and (=> x700 x692) (=> (and (not x700) (and (= x910 x697) (= 32 x1121))) x370))) (=> (and (and (or (and (not x20) (and (= x739 (x55 (+ 32 x423))) (= (x1178 x739) x1131) (= x1131 x1302))) (and x20 (= 0 x1302))) (= x20 (= 0 x626))) (not x892)) x305)))))
(assert (x902 x1046))
(assert (x902 x580))
(assert (< (x239 x710 x453 x496 x791) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (x945 x1004 x836 x1013 x44 x864) (x1345 (x945 x1004 x836 x1013 x44 x864))))
(assert (x1272 x97))
(assert (=> (<= x662 10000) (= 0 (x1345 x662))))
(assert (= x408 (=> (and (= x430 (x55 (+ 31 x803))) (= (x704 115792089237316195423570985008687907853269984665640564039457584007913129639904 x430) x1301) (= x1281 (x55 (+ 32 x987))) (= (x1251 (- x987 x155)) x819) (= x931 (x284 128)) (= x974 (x55 (+ x803 x1008))) (= (< 0 x931) x1101) (= x987 (x55 (+ x1301 x1008))) (= x517 (x55 (+ 32 x155)))) (and (=> (and x1101 (and (= x747 (< 32 x931)) (= (x297 160) x1109))) (and (=> (and x747 (and (= (x15 192) x665) (= x457 (< 64 x931)) (= (x55 (+ 32 x1281)) x145))) (and (=> (and x457 (and (= (x287 224) x677) (= x724 (> x931 96)) (= (x55 (+ x1281 64)) x563))) (and (=> (not x724) x241) (=> x724 x443))) (=> (not x457) x241))) (=> (not x747) x241))) (=> (not x1101) x241)))))
(assert (x902 x1135))
(assert (= 64 (x810 (x1336 64 114221746417031484496905892821793293822878436923706878644384133060206014517163 1))))
(assert (x902 x178))
(assert (= (x239 x710 x453 x496 x791) (x1345 (x239 x710 x453 x496 x791))))
(assert (x780 x883))
(assert (= (x1092 x710 x1069 x1256 x829 x29 x1166) (x1345 (x1092 x710 x1069 x1256 x829 x29 x1166))))
(assert (=> (<= x1035 10000) (= 0 (x1345 x1035))))
(assert (x902 x1063))
(assert (= x106 (and x1176 x613)))
(assert (= x1025 (x847 (x962 x979 x1025 x1212 x591 x266 x1326 x1273))))
(assert (=> (<= x453 10000) (= (x1345 x453) 0)))
(assert (= (or x1142 x256 x762 x1155 x376) x921))
(assert (x902 x950))
(assert (x902 x947))
(assert (=> (>= 10000 x368) (= (x1345 x368) 0)))
(assert (=> (>= 10000 x663) (= (x1345 x663) 0)))
(assert (x902 x568))
(assert (x902 x819))
(assert (= (and x822 (not x21)) x339))
(assert (x358 x33))
(assert (x902 x1102))
(assert (x902 x586))
(assert (x902 x993))
(assert (x1272 x826))
(assert (x902 x931))
(assert (x902 x487))
(assert (< (x681 32 x976) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (x847 (x945 x1004 x836 x1013 x44 x864)) x836))
(assert (x902 x122))
(assert (x902 x1175))
(assert (= (=> (and x623 (and (= (not (< 128 x624)) x623) (= x544 (x55 (+ x1158 96))) (= x78 (x55 (+ 96 x907))) (= (x619 x544) x223))) x1023) x291))
(assert (= x513 (or x106 x1332)))
(assert (< (x945 x845 x432 x85 x1098 x74) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x902 x635))
(assert (not (x1205 (x1092 x979 x127 x231 x1280 x1186 x825))))
(assert (< (x1336 x979 x38 x532) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x902 x1051))
(assert (< 10000 (x1336 64 x662 19)))
(assert (x902 x344))
(assert (= 19 (x59 (x1336 64 x662 19))))
(assert (x902 x75))
(assert (x902 x1150))
(assert (=> (>= 10000 x881) (= 0 (x1345 x881))))
(assert (=> (<= x593 10000) (= (x1345 x593) 0)))
(assert (not (x1205 (x681 32 x929))))
(assert (x902 x1147))
(assert (= x312 (x847 (x239 x979 x312 x488 x1233))))
(assert (x960 x695 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x902 x1262))
(assert (= (x1345 x661) (x1345 (+ x661 1))))
(assert (x902 x1364))
(assert (= x527 (x847 (x906 x710 x527 x552 x670 x828 x442 x487 x412))))
(assert (x902 x1301))
(assert (= x1004 (x810 (x945 x1004 x836 x1013 x44 x864))))
(assert (x902 x508))
(assert (x902 x536))
(assert (x902 x292))
(assert (= x453 (x847 (x239 x710 x453 x496 x791))))
(assert (x162 x354 256))
(assert (< 10000 (x239 x845 x582 x798 x438)))
(assert (x902 x3))
(assert (= (x847 (x1336 x979 x38 x532)) x38))
(assert (=> (<= x1013 10000) (= (x1345 x1013) 0)))
(assert (x1272 31))
(assert (=> (>= 10000 x1122) (= 0 (x1345 x1122))))
(assert (= x66 (=> (and (and (= x564 (+ 1 x1289)) (= (not (> x148 x564)) x244)) x244) x1134)))
(assert (= (x980 (x906 x845 x600 x1118 x999 x585 x948 x738 x386)) x999))
(assert (x902 x1020))
(assert (= (x755 (x906 x1004 x1106 x954 x603 x912 x274 x800 x245)) x274))
(assert (=> (>= 10000 x149) (= (x1345 x149) 0)))
(assert (= (or x378 x1197) x832))
(assert (x723 x726))
(assert (x902 x117))
(assert (=> (>= 10000 x373) (= 0 (x1345 x373))))
(assert (x162 (+ 31 x96) 32))
(assert (x902 x969))
(assert (= x1179 (=> (= (= (ite (> x73 31) 1 0) 1) x594) (and (=> (and (not x594) (and (or (and x584 (= 0 x507)) (and (and (= (x55 (+ x486 32)) x360) (= x161 (x1178 x360)) (= x507 x161)) (not x584))) (= x584 (= 0 x73)))) x1298) (=> (and (and (= (x681 32 x929) x1124) (= (< 0 x972) x922) (= (x704 115792089237316195423570985008687907853269984665640564039457584007913129639904 x73) x972)) x594) (and (=> x922 x915) (=> (and (and (= x1250 32) (= x1342 x1124)) (not x922)) x943)))))))
(assert (=> (>= 10000 x319) (= 0 (x1345 x319))))
(assert (= (and (not x747) x870) x451))
(assert (=> (>= 10000 x791) (= (x1345 x791) 0)))
(assert (x818 x1180))
(assert (= x392 (=> (and (and (= x968 (x643 x917)) (= (+ x746 x1112) x1232) (= x192 (x643 x917)) (= (x1251 (- x13 x1112)) x334) (= (x1251 (- x848 x879)) x37) (not (< x13 x334)) (= x848 (x55 (+ x781 x31))) (= (x55 (+ x1234 x781)) x707) (= x1034 (- x192 x1112)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1232) (>= x968 x1112) (= (x455 x234) x746) (< (+ x1112 x746) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= x1224 4294967295) (>= x821 1) (>= x1232 0) (= (= x854 0) x1228) (= (x175 x234) x821) (= (x55 (+ x1234 31)) x100) (= x1232 x688) (= x31 (x704 115792089237316195423570985008687907853269984665640564039457584007913129639904 x100)) (< (+ x570 x1112) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x1329 (x1251 (- x13 x1112))) (= x249 (x55 (+ x1202 32))) (= x570 (x643 x234))) (or (and (and (= x729 x1338) (= x879 x907)) x1228) (and (and (= x658 x736) (= x733 false) (= x359 (x55 (+ x1170 32))) (= (x1211 x260 x160) x351) (= x1170 (x55 (+ 4 x879))) (>= 1461501637330902918203684832716283019655932542975 x736) (= (x175 x530) x1133) (= x255 404098525) (>= 127 x676) (= x947 (x55 (+ 32 x879))) (>= x854 1) (<= 1 x779) (= (x1336 64 x736 3) x1267) (= x260 (x11 x879)) (= x125 false) (< x879 x947) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x351) (= x1184 68) (= (x55 (+ x854 x685)) x1150) (= (x1251 (- x310 x879)) x1184) (= x467 (x525 x128 1000000)) (= x779 (x175 x176)) (>= 127 x299) (= (x956 x16) x1059) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x879)) (= x749 (x1336 64 71998914331801701415977457805802827292338598818749192222732755537001613711014 6)) (= 10894474682274239493831243662817379401261526446360622092269559273883068006400 x1293) (<= x879 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= 1086394137 x1325) (= x729 x1116) (< (x1211 x260 x160) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= 255 x1059) (= false x967) (= x351 x128) (<= 1 x1133) (<= x879 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= (x439 x1267) x685) (= (x55 (+ x1338 x854)) x1116) (not (= x879 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (= 68 x951) (not (= x879 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (= x5 (x55 (+ x1338 x854))) (= x310 (x55 (+ x1170 64))) (= x212 (x525 x128 1000000)) (= x1290 71998914331801701415977457805802827292338598818749192222732755537001613711014) (= x756 false) (= x903 29289127993025145568725129057828671567744754166070328588094505464281371246592) (= x81 (x175 x530)) (>= x1059 1) (>= x351 0) (<= x879 115792089237316195423570985008687907853269984665640564039457584007913129639934) (<= 1 x736) (= false x1060) (<= 1 x81) (= 4 x882) (<= x676 127) (= false x596) (>= 127 x299) (= (x1336 64 x917 x749) x16) (= x1275 x705) (not (> x1338 x5)) (= x947 x907) (= x705 x854)) (not x1228)))) x68)))
(assert (not (x1205 (x962 x1004 x475 x1269 x492 x1189 x349 x1316))))
(assert (x902 x707))
(assert (= x103 (and x743 x166)))
(assert (=> (<= x946 10000) (= (x1345 x946) 0)))
(assert (= x68 (=> (and (= (> x624 0) x218) (= x1158 (x55 (+ 32 x486))) (= (x1041 x486) x624) (= x357 (x1251 (- x126 1)))) (and (=> (and x218 (and (= (> x624 32) x1237) (= x429 (x1041 x1158)))) (and (=> (not x1237) x1023) (=> (and (and (= x751 (x414 x675)) (= x675 (x55 (+ x1158 32))) (= (x55 (+ x907 32)) x916) (= x491 (> x624 64))) x1237) (and (=> (and x491 (and (= x815 (x55 (+ 64 x1158))) (= (x55 (+ 64 x907)) x763) (= x589 (x802 x815)) (= x108 (> x624 96)))) (and (=> (not x108) x1023) (=> x108 x291))) (=> (not x491) x1023))))) (=> (not x218) x1023)))))
(assert (x902 x246))
(assert (x780 (+ 31 x96)))
(assert (< (x239 x1004 x576 x770 x1235) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= x919 (and x1313 x717)))
(assert (=> (<= x576 10000) (= 0 (x1345 x576))))
(assert (x902 x183))
(assert (= x1314 (=> (and x1339 (and (= x1339 (not (< x1085 x337))) (= (+ 1 x758) x1085))) x851)))
(assert (= x576 (x847 (x239 x1004 x576 x770 x1235))))
(assert (< (x681 x845 x169) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (x59 (x906 x979 x1319 x1349 x123 x1364 x659 x1037 x761)) x1349))
(assert (x902 x357))
(assert (= x1229 (=> (and (and (= x874 (x55 (+ x263 96))) (= x648 (x55 (+ x879 96))) (= (not (> x936 128)) x501) (= (x1303 x874) x1264)) x501) x938)))
(assert (= x767 (x847 (x1336 x710 x767 x1200))))
(assert (x960 x100 32))
(assert (x902 x946))
(assert (= x1259 (and (not x20) x711)))
(assert (= x1256 (x59 (x1092 x710 x1069 x1256 x829 x29 x1166))))
(assert (= x1113 (and x1331 x760)))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x906 x979 x1319 x1349 x123 x1364 x659 x1037 x761)))
(assert (x902 x356))
(assert (= (x1345 (x1336 64 x514 17)) (x1336 64 x514 17)))
(assert (= x141 (or x409 x1282)))
(assert (= x1212 (x59 (x962 x979 x1025 x1212 x591 x266 x1326 x1273))))
(assert (x1272 x816))
(assert (> (x962 x845 x318 x701 x149 x54 x121 x1031) 10000))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x681 x1004 x76)))
(assert (x902 x593))
(assert (x902 x410))
(assert (= (x268 (x962 x979 x1025 x1212 x591 x266 x1326 x1273)) x1273))
(assert (not (x1205 (x962 x845 x318 x701 x149 x54 x121 x1031))))
(assert (x902 x372))
(assert (x902 x889))
(assert (x902 x549))
(assert (= x845 (x810 (x1336 x845 x744 x62))))
(assert (x902 x1106))
(assert (= x1082 (x980 (x1092 x845 x925 x1306 x1082 x622 x1035))))
(assert (= x1235 (x980 (x239 x1004 x576 x770 x1235))))
(assert (x902 x234))
(assert (=> (<= x303 10000) (= 0 (x1345 x303))))
(assert (x902 x267))
(assert (= (x1345 x1223) (x1345 (+ 1 x1223))))
(assert (x902 x35))
(assert (= 0 (x1345 1000000)))
(assert (= x800 (x268 (x906 x1004 x1106 x954 x603 x912 x274 x800 x245))))
(assert (=> (<= x38 10000) (= 0 (x1345 x38))))
(assert (x902 x779))
(assert (x902 x294))
(assert (x902 x516))
(assert (=> (<= x836 10000) (= 0 (x1345 x836))))
(assert (x902 x548))
(assert (= x1186 (x405 (x1092 x979 x127 x231 x1280 x1186 x825))))
(assert (= x352 (and x428 x1143)))
(assert (= x1282 (and x173 (not x1091))))
(assert (= (x810 (x1092 x1004 x142 x30 x222 x605 x446)) x1004))
(assert (x902 x1278))
(assert (= x1332 (and x613 (not x1176))))
(assert (x1215 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x933 2 x789)))
(assert (= x266 (x405 (x962 x979 x1025 x1212 x591 x266 x1326 x1273))))
(assert (x902 x1161))
(assert (= x52 (and x797 x766)))
(assert (x902 x854))
(assert (=> (<= x514 10000) (= 0 (x1345 x514))))
(assert (= (x755 (x962 x845 x318 x701 x149 x54 x121 x1031)) x121))
(assert (= x979 (x810 (x239 x979 x312 x488 x1233))))
(assert (= 0 (x1345 115792089237316195423570985008687907853099843482180094807725896704197245534209)))
(assert (= x313 (and x1261 x1087)))
(assert (x902 x663))
(assert (x902 x145))
(assert (=> (<= x871 10000) (= (x1345 x871) 0)))
(assert (x723 x430))
(assert (=> (<= x736 10000) (= (x1345 x736) 0)))
(assert (x902 x1095))
(assert (=> (<= x412 10000) (= 0 (x1345 x412))))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x1336 64 x514 17)))
(assert (< 10000 (x906 x1004 x1106 x954 x603 x912 x274 x800 x245)))
(assert (= (x1345 (+ x1027 1)) (x1345 x1027)))
(assert (x902 x701))
(assert (=> (>= 10000 x438) (= (x1345 x438) 0)))
(assert (= (x847 (x906 x845 x600 x1118 x999 x585 x948 x738 x386)) x600))
(assert (x902 x695))
(assert (not (x1205 (x1336 64 x917 x749))))
(assert (x902 x1050))
(assert (= (or x416 x1279) x483))
(assert (x902 x912))
(assert (< (x906 x845 x600 x1118 x999 x585 x948 x738 x386) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x902 x285))
(assert (x902 x772))
(assert (=> (<= x1256 10000) (= 0 (x1345 x1256))))
(assert (x723 x1180))
(assert (= (x755 (x1092 x845 x925 x1306 x1082 x622 x1035)) x1035))
(assert (= (x1345 (+ x804 1)) (x1345 x804)))
(assert (= x976 (x847 (x681 32 x976))))
(assert (> (x681 32 x1223) 10000))
(assert (x1205 170141183460469231731687303715884105726))
(assert (=> (>= 10000 x701) (= 0 (x1345 x701))))
(assert (< (x962 x710 x1002 x593 x1128 x565 x560 x663) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= x737 (=> (and (= x661 (x1336 64 x514 17)) (= (x478 x661) x883) (= (x666 x498) x1009) (= (x528 x533) x736) (= (x704 1 x883) x985) (= x926 (x525 x883 2)) (or (= x237 1) (= x237 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (x1251 (- x985 (mod (ite (> 32 x1362) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x237) (= x1210 (< 31 x1362)) (= x1362 (ite (< 0 x985) x926 (x704 127 x926))) (= (+ x896 1) x498) (= x533 (+ 1 x498)) (>= 1461501637330902918203684832716283019655932542975 x736)) (and (=> (and (and (= (x525 (+ 31 x1362) 32) x904) (= x425 (< x758 x337)) (= (x681 32 x661) x758) (= (+ x758 x904) x337)) x1210) (and (=> (not x425) x851) (=> x425 x1314))) (=> (not x1210) x369)))))
(assert (x902 x1146))
(assert (= 0 (x1345 57896044618658097711785492504343953926634992332820282019728792003956564819967)))
(assert (x902 x589))
(assert (> (x1336 x845 x744 x62) 10000))
(assert (x902 x212))
(assert (x902 x981))
(assert (x902 x951))
(assert (x902 x1241))
(assert (=> (<= x266 10000) (= 0 (x1345 x266))))
(assert (x723 x97))
(assert (= x349 (x755 (x962 x1004 x475 x1269 x492 x1189 x349 x1316))))
(assert (x162 x196 2))
(assert (= x376 (and (not x108) x290)))
(assert (x902 x1037))
(assert (x1205 114221746417031484496905892821793293822878436923706878644384133060206014517163))
(assert (x902 x688))
(assert (not (x1205 (x945 x710 x871 x242 x410 x946))))
(assert (x902 x128))
(assert (x902 x81))
(assert (x723 x1278))
(assert (= x378 (and (not x621) x921)))
(assert (x902 x894))
(assert (x902 x496))
(assert (= x438 (x980 (x239 x845 x582 x798 x438))))
(assert (x463 x73))
(assert (= (ite (< x789 256) (x525 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x933 2 x789)) 0) (x1190 115792089237316195423570985008687907853269984665640564039457584007913129639935 x789)))
(assert (x1272 127))
(assert (= (and x1138 x1228) x1300))
(assert (x902 x974))
(assert (= x798 (x59 (x239 x845 x582 x798 x438))))
(assert (= (and (not x491) x480) x1155))
(assert (=> (>= 10000 x30) (= 0 (x1345 x30))))
(assert (=> (<= x753 10000) (= 0 (x1345 x753))))
(assert (x902 x129))
(assert (= (x681 32 x896) (x1345 (x681 32 x896))))
(assert (= x579 (or x56 x952)))
(assert (=> (<= x169 10000) (= (x1345 x169) 0)))
(assert (= x710 (x810 (x1336 x710 x767 x1200))))
(assert (x902 x401))
(assert (x902 x736))
(assert (=> (<= x738 10000) (= (x1345 x738) 0)))
(assert (=> (<= x591 10000) (= (x1345 x591) 0)))
(assert (x902 x868))
(assert (x902 x560))
(assert (=> (>= 10000 x1233) (= 0 (x1345 x1233))))
(assert (x902 x816))
(assert (< 10000 (x843 0)))
(assert (x902 x318))
(assert (x902 x742))
(assert (x902 x979))
(assert (x902 x231))
(assert (= (x810 (x681 32 x1223)) 32))
(assert (x902 x359))
(assert (=> (<= x410 10000) (= (x1345 x410) 0)))
(assert (x396 8 x626))
(assert (= (=> (and (and (and (= x149 (x830 x628)) (= x585 (x830 x178)) (= (x55 (+ 128 x879)) x571) (= (x830 x879) x925) (= (x55 (+ x879 32)) x39) (= x1098 (x830 x894)) (= (x55 (+ x879 192)) x344) (= (x55 (+ 32 x879)) x1042) (= x169 (x830 x879)) (= (x830 x879) x744) (= (x843 0) x419) (= x415 (x55 (+ 160 x879))) (= x709 (ite (= 0 x845) x419 (ite (<= x845 32) x1163 (ite (<= x845 64) x1337 (ite (>= 96 x845) x1195 (ite (<= x845 128) x138 (ite (>= 160 x845) x2 (ite (<= x845 192) x782 (ite (>= 224 x845) x1288 x1095))))))))) (= x608 (x55 (+ x879 32))) (= x185 (x55 (+ 64 x879))) (= x782 (x962 x845 x318 x701 x149 x54 x121 x1031)) (= (x55 (+ 96 x879)) x447) (= x894 (x55 (+ 64 x879))) (= x1082 (x830 x464)) (= (>= 224 x710) x119) (= x504 (x55 (+ 32 x879))) (= (x55 (+ 160 x879)) x1209) (= (x55 (+ x879 96)) x509) (= (x681 x845 x169) x1163) (= x628 (x55 (+ x879 64))) (= (x55 (+ 32 x879)) x1350) (= (x55 (+ 128 x879)) x183) (= x318 (x830 x879)) (= x738 (x830 x415)) (= (x830 x879) x582) (= (x830 x447) x74) x699 (= (x830 x993) x54) (= x1306 (x830 x1042)) (= x948 (x830 x183)) (= (x830 x608) x62) (= (x830 x879) x600) (= (x1092 x845 x925 x1306 x1082 x622 x1035) x2) (= x701 (x830 x504)) (= x1035 (x830 x728)) (= (x830 x509) x622) (= x993 (x55 (+ x879 96))) (= x116 (x55 (+ 64 x879))) (= (x55 (+ x879 128)) x728) (= x138 (x945 x845 x432 x85 x1098 x74)) (= x432 (x830 x879)) (= (x830 x1209) x1031) (= (x830 x116) x999) (= (x830 x39) x85) (= x1118 (x830 x1350)) (= (x830 x837) x798) (= (x906 x845 x600 x1118 x999 x585 x948 x738 x386) x1288) (= (x830 x185) x438) (= x386 (x830 x344)) (= x121 (x830 x571)) (= x1337 (x1336 x845 x744 x62)) (= (x55 (+ x879 64)) x464) (= x1195 (x239 x845 x582 x798 x438)) (= (x55 (+ 96 x879)) x178) (= x837 (x55 (+ 32 x879)))) (and x119 (= (x945 x710 x871 x242 x410 x946) x380) (= (x55 (+ 96 x879)) x309) (= x29 (x830 x1191)) (= x388 (x55 (+ 64 x879))) (= x548 (x55 (+ x879 32))) (= (x55 (+ x879 32)) x1242) (= x412 (x830 x469)) (= x109 (x55 (+ x486 32))) (= (x830 x122) x791) (= x942 (x906 x710 x527 x552 x670 x828 x442 x487 x412)) (= x442 (x830 x840)) (= (x830 x879) x767) (= x496 (x830 x311)) (= x900 (x55 (+ 4 x879))) (= x812 (x681 x710 x368)) (= (x830 x1242) x242) (= x568 (x55 (+ x879 64))) (= x829 (x830 x388)) (= (x830 x300) x560) (= x1295 (< 0 x479)) (= x670 (x830 x568)) (= x348 (x239 x710 x453 x496 x791)) (= x368 (x830 x879)) (= x487 (x830 x814)) (= x632 (x55 (+ 160 x879))) (= x311 (x55 (+ x879 32))) (= (x55 (+ 64 x879)) x122) (= (x830 x879) x453) (= (x55 (+ x879 96)) x1191) (= (x830 x632) x663) (= x549 (x1340 x228)) (= x1069 (x830 x879)) (= (x830 x1073) x410) (= x1245 (x1092 x710 x1069 x1256 x829 x29 x1166)) (= x678 (x55 (+ 64 x879))) (= x814 (x55 (+ 160 x879))) (= x593 (x830 x548)) (= x712 (x55 (+ x879 128))) (= (x24 x486) x479) (= x92 (x55 (+ x879 32))) (= (x830 x712) x1166) (= x1256 (x830 x1135)) (= (x830 x226) x828) (= x300 (x55 (+ x879 128))) (= x1105 (x962 x710 x1002 x593 x1128 x565 x560 x663)) (= x946 (x830 x889)) (= x871 (x830 x879)) (= (x55 (+ 64 x879)) x1073) (= x228 (ite (= x710 0) x219 (ite (>= 32 x710) x812 (ite (>= 64 x710) x1320 (ite (>= 96 x710) x348 (ite (<= x710 128) x380 (ite (<= x710 160) x1245 (ite (>= 192 x710) x1105 (ite (>= 224 x710) x942 x1220))))))))) (= (x830 x879) x1002) (= x1320 (x1336 x710 x767 x1200)) (= x549 0) (= x469 (x55 (+ 192 x879))) (= x565 (x830 x309)) (= x983 (x55 (+ x616 32))) (= (x830 x164) x1200) (= (x55 (+ 32 x879)) x1135) (= x840 (x55 (+ 128 x879))) (= (x830 x678) x1128) (= x164 (x55 (+ 32 x879))) (= (x843 0) x219) (= x616 (x55 (+ 128 x900))) (= (x55 (+ x879 96)) x226) (= x552 (x830 x92)) (= x527 (x830 x879)) (= x889 (x55 (+ 96 x879))))) (and (= (x55 (+ 32 x1304)) x649) (= (x1251 (- x649 x879)) x710) (= x49 (x55 (+ x936 x879))) (= x845 (x1251 (- x710 32))) (= x1304 (x55 (+ x936 x879))) (= (<= x845 224) x699))) (and (=> (and (and (= (x1097 x109) x273) (= (> x479 32) x759)) x1295) (and (=> (and (and (= (x55 (+ 32 x983)) x1067) (= (x55 (+ 32 x109)) x1307) (= x72 (> x479 64)) (= (x286 x1307) x246)) x759) (and (=> (not x72) x1181) (=> (and x72 (and (= (> x479 96) x713) (= (x55 (+ 64 x983)) x1321) (= (x55 (+ x109 64)) x716) (= x331 (x1090 x716)))) (and (=> (not x713) x1181) (=> x713 x144))))) (=> (not x759) x1181))) (=> (not x1295) x1181))) x938))
(assert (= x918 (and x959 x1148)))
(assert (x1204 x883))
(assert (x902 x1326))
(assert (< 10000 (x945 x845 x432 x85 x1098 x74)))
(assert (x162 x883 2))
(assert (x1272 x1028))
(assert (=> (<= x1166 10000) (= (x1345 x1166) 0)))
(assert (x1272 x292))
(assert (= (and x218 x1168) x355))
(assert (x1272 x1278))
(assert (x902 x1321))
(assert (x902 x1006))
(assert (x902 x928))
(assert (x592 x507 x336))
(assert (not (x1205 (x1336 64 x662 19))))
(assert (= (=> (and (and (= (x55 (+ x907 x624)) x1075) (= (x55 (+ x624 x907)) x135) (= x979 (x1251 (- x1004 32))) (= (>= 224 x979) x1346) (= (x1251 (- x434 x907)) x1004) (= x434 (x55 (+ x135 32)))) (and (and (= (x1178 x1294) x761) (= (x55 (+ x907 96)) x272) (= (x1178 x907) x303) (= x825 (x1178 x664)) (= (x55 (+ x907 64)) x206) (= (>= 224 x1004) x1192) (= x1273 (x1178 x1115)) (= x1280 (x1178 x1126)) (= (x55 (+ 160 x907)) x1115) (= (x55 (+ x907 96)) x963) (= (x55 (+ 64 x907)) x372) (= (x945 x979 x303 x949 x373 x177) x587) x1346 (= x1126 (x55 (+ x907 64))) (= (x906 x979 x1319 x1349 x123 x1364 x659 x1037 x761) x1100) (= x591 (x1178 x748)) (= (x1178 x1074) x659) (= x307 (x681 x979 x320)) (= x1011 (ite (= 0 x979) x34 (ite (>= 32 x979) x307 (ite (>= 64 x979) x913 (ite (>= 96 x979) x216 (ite (>= 128 x979) x587 (ite (<= x979 160) x1286 (ite (>= 192 x979) x399 (ite (>= 224 x979) x1100 x1255))))))))) (= x949 (x1178 x1214)) (= (x1178 x907) x1319) (= x1294 (x55 (+ x907 192))) (= x38 (x1178 x907)) (= (x1178 x1330) x1349) (= (x239 x979 x312 x488 x1233) x216) (= x771 (x55 (+ 128 x907))) (= x1076 (x55 (+ 160 x907))) (= x266 (x1178 x272)) (= (x1178 x258) x488) (= x127 (x1178 x907)) (= x787 (x55 (+ 32 x907))) (= (x55 (+ 128 x907)) x1074) (= (x1178 x372) x123) (= x532 (x1178 x787)) (= x913 (x1336 x979 x38 x532)) (= x1037 (x1178 x1076)) (= x304 (x55 (+ 96 x907))) (= x312 (x1178 x907)) (= (x55 (+ x907 64)) x156) (= x1214 (x55 (+ x907 32))) (= (x55 (+ x907 32)) x258) (= (x1178 x156) x373) (= (x843 0) x34) (= (x962 x979 x1025 x1212 x591 x266 x1326 x1273) x399) (= (x1178 x907) x1025) (= x664 (x55 (+ 128 x907))) (= x214 (x55 (+ 32 x907))) (= x320 (x1178 x907)) (= x231 (x1178 x732)) (= (x1092 x979 x127 x231 x1280 x1186 x825) x1286) (= (x55 (+ x907 64)) x748) (= (x55 (+ 32 x907)) x1330) (= (x1178 x238) x1186) (= x1326 (x1178 x771)) (= (x1178 x214) x1212) (= x177 (x1178 x304)) (= x732 (x55 (+ x907 32))) (= x1364 (x1178 x963)) (= (x1178 x206) x1233) (= (x55 (+ x907 96)) x238)) (and (= (x704 1 x292) x186) (= x800 (x1178 x523)) (= (ite (> x186 0) x75 (x704 127 x75)) x96) (= x909 (x239 x1004 x576 x770 x1235)) (= x222 (x1178 x83)) (= (x1178 x950) x770) (< x907 x155) (= x75 (x525 x292 2)) (= (x55 (+ x907 96)) x1315) (= x940 (x945 x1004 x836 x1013 x44 x864)) (= (x681 x1004 x76) x364) (= (x55 (+ 128 x907)) x155) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639808 x907)) (= (x1178 x796) x954) (= (x55 (+ x907 160)) x64) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x907) (or (= x1094 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x1094 1)) (= (x1178 x333) x1235) (= (x1178 x366) x864) (= x235 (x55 (+ 128 x907))) (= (x55 (+ 64 x907)) x1164) (= (x1178 x907) x881) (= x142 (x1178 x907)) (= (x55 (+ 192 x907)) x265) (= (x55 (+ x907 32)) x796) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x907) (= x152 (x843 0)) (= x245 (x1178 x265)) (= (x1178 x296) x349) (= (x1092 x1004 x142 x30 x222 x605 x446) x402) (= x1187 (x55 (+ x907 96))) (= x929 (x1336 64 x662 19)) (= x76 (x1178 x907)) (= x63 (x55 (+ x907 32))) (<= x907 115792089237316195423570985008687907853269984665640564039457584007913129639934) (not (= x907 115792089237316195423570985008687907853269984665640564039457584007913129639808)) (= (x55 (+ 128 x907)) x1102) (= x41 18) (= (x1178 x180) x603) (= x576 (x1178 x907)) (= x1316 (x1178 x64)) (= x180 (x55 (+ x907 64))) (= x492 (x1178 x1164)) (= x1106 (x1178 x907)) (= (x1178 x1175) x1269) (= (x1178 x1070) x912) (= x1225 (ite (= 0 x1004) x152 (ite (<= x1004 32) x364 (ite (<= x1004 64) x1054 (ite (<= x1004 96) x909 (ite (>= 128 x1004) x940 (ite (>= 160 x1004) x402 (ite (<= x1004 192) x689 (ite (>= 224 x1004) x394 x750))))))))) (= (x962 x1004 x475 x1269 x492 x1189 x349 x1316) x689) (= (x55 (+ x907 96)) x366) (= x83 (x55 (+ 64 x907))) (= x333 (x55 (+ x907 64))) (= (x55 (+ x907 32)) x129) x1192 (= (x1178 x235) x274) (not (= x907 115792089237316195423570985008687907853269984665640564039457584007913129639808)) (>= 18446744073709551615 x73) (or (<= x662 170141183460469231731687303715884105727) (>= x662 115792089237316195423570985008687907853099843482180094807725896704197245534208)) (= (x1178 x849) x44) (= (x1336 x1004 x881 x1001) x1054) (= (x1178 x907) x836) (= x30 (x1178 x63)) (= (x55 (+ 160 x907)) x523) (= x605 (x1178 x1187)) (= (< 31 x96) x621) (= (x55 (+ 128 x907)) x296) (= (x55 (+ x907 32)) x950) (= (x1178 x595) x1001) (= x394 (x906 x1004 x1106 x954 x603 x912 x274 x800 x245)) (= x446 (x1178 x1102)) (= (x55 (+ 96 x907)) x1070) (= x73 (x1178 x486)) (= x292 (x1274 x929)) (= x849 (x55 (+ x907 64))) (= x475 (x1178 x907)) (= (x1251 (- x186 (mod (ite (> 32 x96) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x1094) (= x1175 (x55 (+ 32 x907))) (= (x1178 x1315) x1189) (= (x55 (+ 32 x907)) x595) (= x1013 (x1178 x129))))) (and (=> (not x621) x1179) (=> (and (and (= x395 (+ x708 x574)) (= (x525 (+ 31 x73) 32) x708) (= x804 (ite (< x73 32) x574 x395)) (= (x525 (+ x96 31) 32) x1236) (= (+ x574 x1236) x1018) (= (x681 32 x929) x574) (= x187 (< x804 x1018))) x621) (and (=> (not x187) x1024) (=> x187 x477))))) x1023))
(assert (x902 x878))
(assert (x463 x473))
(assert (x902 x1141))
(assert (< (x681 x979 x320) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (and x1313 (not x717)) x271))
(assert (= (x268 (x906 x845 x600 x1118 x999 x585 x948 x738 x386)) x738))
(assert (x902 x1354))
(assert (x902 x1239))
(assert (= x1139 (and (not x1101) x673)))
(assert (x396 2 x626))
(assert (=> (<= x1212 10000) (= (x1345 x1212) 0)))
(assert (= (x268 (x906 x979 x1319 x1349 x123 x1364 x659 x1037 x761)) x1037))
(assert (=> (<= x1189 10000) (= (x1345 x1189) 0)))
(assert (x1272 x22))
(assert (x902 x479))
(assert (= (and x1237 x355) x480))
(assert (x960 x521 340282366920938463463374607431768211456))
(assert (= x1368 (and (not x187) x493)))
(assert (x902 x1186))
(assert (not (x1205 (x945 x1004 x836 x1013 x44 x864))))
(assert (x780 (+ 31 x326)))
(assert (x902 x1328))
(assert (x1215 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x933 2 x225)))
(assert (= x107 (and x45 x1157)))
(assert (x902 x172))
(assert (x396 256 x473))
(assert (not (x1205 (x906 x1004 x1106 x954 x603 x912 x274 x800 x245))))
(assert (x902 x79))
(assert (x902 x189))
(assert (x786 x73))
(assert (= x946 (x405 (x945 x710 x871 x242 x410 x946))))
(assert (=> (<= x1319 10000) (= (x1345 x1319) 0)))
(assert (= x856 (and (not x1183) x390)))
(assert (x902 x1281))
(assert (=> (>= 10000 x828) (= 0 (x1345 x828))))
(assert (x1204 x97))
(assert (=> (>= 10000 x231) (= (x1345 x231) 0)))
(assert (=> (<= x605 10000) (= 0 (x1345 x605))))
(assert (x162 (+ x326 31) 32))
(assert (= x1319 (x847 (x906 x979 x1319 x1349 x123 x1364 x659 x1037 x761))))
(assert (x1205 115792089237316195423570985008687907853269984665640564039457584007913129639808))
(assert (> (x1336 64 x514 17) 10000))
(assert (x960 x430 32))
(assert (x1272 x883))
(assert (x902 x322))
(assert (= (x681 32 x1223) (x1345 (x681 32 x1223))))
(assert (= x290 (and x480 x491)))
(assert (=> (>= 10000 x1004) (= (x1345 x1004) 0)))
(assert (= (x59 (x906 x710 x527 x552 x670 x828 x442 x487 x412)) x552))
(assert (= x625 (and x1343 x53)))
(assert (= (x1336 64 71998914331801701415977457805802827292338598818749192222732755537001613711014 6) (x1345 (x1336 64 71998914331801701415977457805802827292338598818749192222732755537001613711014 6))))
(assert (= (x59 (x1092 x1004 x142 x30 x222 x605 x446)) x30))
(assert (x902 x891))
(assert (x902 x1117))
(assert (x902 x186))
(assert (=> (>= 10000 x349) (= (x1345 x349) 0)))
(assert (x902 x263))
(assert (x463 x260))
(assert (= x242 (x59 (x945 x710 x871 x242 x410 x946))))
(assert (x902 x432))
(assert (= x542 (or x1252 x856)))
(assert (= (x847 (x1336 x845 x744 x62)) x744))
(assert (= 0 (x1345 115792089237316195423570985008687907853269984665640564039457584007913129639680)))
(assert (x902 x705))
(assert (= (x59 (x1336 x979 x38 x532)) x532))
(assert (x902 x400))
(assert (= (and x625 (not x1084)) x195))
(assert (x902 x503))
(assert (= 32 (x810 (x681 32 x896))))
(assert (x902 x204))
(assert (x902 x1166))
(assert (=> (>= 10000 x121) (= 0 (x1345 x121))))
(assert (= (x847 (x681 32 x1119)) x1119))
(assert (x463 x160))
(assert (= (=> (and (= x404 (ite (<= x657 1) x1239 (x174 x657 x33))) (= x343 (* x626 8)) (= x33 (* 2 x626)) (= (x55 (+ x33 x657)) x1239) (= x657 (x704 x1302 x908)) (<= 1 x210) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x210) x908) (= (x1190 115792089237316195423570985008687907853269984665640564039457584007913129639935 x343) x210)) x783) x305))
(assert (< 10000 (x239 x979 x312 x488 x1233)))
(assert (= (and x114 x584) x866))
(assert (x902 x333))
(assert (x902 x407))
(assert (x902 x1001))
(assert (x902 x1111))
(assert (x902 x33))
(assert (= x426 (and (not x460) x1299)))
(assert (= x65 (or x581 x522 x352)))
(assert (= x953 (=> (and (= x1329 x1020) (= (= (ite (= x714 0) x714 (ite (> x357 0) 1 0)) 0) x98) x98 (= x1038 x1356)) x25)))
(assert (x723 32))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x1336 64 x917 x749)))
(assert (x902 x1115))
(assert (< 10000 (x681 32 x896)))
(assert (x902 x558))
(assert (= (and x1157 (not x45)) x283))
(assert (= 0 (x1345 22334872)))
(assert (x902 x930))
(assert (x902 x777))
(assert (= (and (not x1216) x513) x1143))
(assert (=> (>= 10000 x1037) (= (x1345 x1037) 0)))
(assert (x902 x849))
(assert (=> (<= x76 10000) (= 0 (x1345 x76))))
(assert (x902 x829))
(assert (= x768 (x847 (x1336 64 x768 x862))))
(assert (x902 x767))
(assert (not (x1205 (x945 x979 x303 x949 x373 x177))))
(assert (x902 x1224))
(assert (x902 x470))
(assert (x780 (+ x660 31)))
(assert (x902 x521))
(assert (x162 x292 2))
(assert (< 10000 (x1336 x979 x38 x532)))
(assert (x902 x163))
(assert (= (x847 (x1336 64 x917 x749)) x917))
(assert (= x157 (and x220 (not x384))))
(assert (x780 x292))
(assert (x902 x320))
(assert (not (x1205 (x1336 x845 x744 x62))))
(assert (=> (>= 10000 x29) (= 0 (x1345 x29))))
(assert (= (or x1026 x1334 x1217 x345 x1152) x776))
(assert (x902 x1191))
(assert (x1080 x882))
(assert (x902 x1082))
(assert (= (x810 (x1336 64 x917 x749)) 64))
(assert (x902 x552))
(assert (= x1149 (and (not x1228) x1138)))
(assert (= (x847 (x945 x710 x871 x242 x410 x946)) x871))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x681 x710 x368)))
(assert (x902 x614))
(assert (= (x847 (x945 x979 x303 x949 x373 x177)) x303))
(assert (x902 x1316))
(assert (x902 x1014))
(assert (x902 x624))
(assert (x902 x803))
(assert (> (x1092 x710 x1069 x1256 x829 x29 x1166) 10000))
(assert (x902 x517))
(assert (x902 x31))
(assert (x902 x1094))
(assert (= (or x67 x919 x383) x350))
(assert (x902 x389))
(assert (x902 x628))
(assert (=> (>= 10000 x1001) (= 0 (x1345 x1001))))
(assert (x396 32 x462))
(assert (x396 2 x73))
(assert (= (x810 (x681 x845 x169)) x845))
(assert (= (x847 (x1336 64 71998914331801701415977457805802827292338598818749192222732755537001613711014 6)) 71998914331801701415977457805802827292338598818749192222732755537001613711014))
(assert (x902 x1003))
(assert (= (x810 (x962 x845 x318 x701 x149 x54 x121 x1031)) x845))
(assert (x902 x573))
(assert (x902 x412))
(assert (x902 x92))
(assert (x723 x196))
(assert (= x633 (=> (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x270) (= x401 (x704 1 x816)) (or (>= 170141183460469231731687303715884105726 x514) (<= 115792089237316195423570985008687907853099843482180094807725896704197245534208 x514)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x270) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639808 x270)) (= x1206 (x525 (+ 31 x660) 32)) (< x486 x423) (or (<= x556 170141183460469231731687303715884105727) (<= 115792089237316195423570985008687907853099843482180094807725896704197245534209 x556)) (= x400 0) (>= x423 1) (= x1348 (= x660 0)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639808 x270)) (= (x525 x816 2) x772) (= x816 (x478 x1223)) (= x153 (x1251 (- x401 (mod (ite (< x660 32) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= x486 (x55 (+ 128 x270))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x486) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x486) (> x486 x270) (= 16 x868) (= x680 (x55 (+ x486 32))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x270) (or (and (> x556 x514) (= (<= x514 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x556 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (and (<= x556 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x514))) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639808 x270)) (<= x486 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= (x1336 64 x514 17) x1223) (= (* x1206 32) x389) (= x423 (x55 (+ (mod (+ x389 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x486))) (= x660 (ite (> x401 0) x772 (x704 127 x772))) (or (= x153 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x153 1))) (and (=> (and (= x375 (< 31 x660)) (not x1348)) (and (=> (and x375 (and (= x269 (+ x671 1)) (= x1091 (> x1262 x1193)) (= (x55 (+ 32 x680)) x1193) (= x671 (x681 32 x1223)) (= (x55 (+ x660 x680)) x1262) (= (x203 x671) x599))) (and (=> x1091 x811) (=> (not x1091) x247))) (=> (and (not x375) (and (= x520 (* 256 x427)) (= x1050 (x478 x1223)) (= (x525 x1050 256) x427))) x569))) (=> x1348 x569)))))
(assert (x902 x41))
(assert (x1080 x285))
(assert (=> (>= 10000 x1052) (= 0 (x1345 x1052))))
(assert (= (=> (and x490 (and (= (x55 (+ 96 x1281)) x1021) (= (not (< 128 x931)) x490) (= x95 (x205 256)))) x241) x443))
(assert (= (x843 0) (x1345 (x843 0))))
(assert (x902 x404))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x962 x979 x1025 x1212 x591 x266 x1326 x1273)))
(assert (x780 (+ x1362 31)))
(assert (= (or x920 x335 x1317 x451 x1139) x682))
(assert (x902 x1033))
(assert (=> (>= 10000 x446) (= (x1345 x446) 0)))
(assert (x902 x1170))
(assert (x1272 x100))
(assert (x1272 x196))
(assert (x902 x595))
(assert (x902 x1315))
(assert (= (or x200 x115) x822))
(assert (= x390 (and x220 x384)))
(assert (x902 x750))
(assert (x902 x1366))
(assert (= (x1345 (+ x671 1)) (x1345 x671)))
(assert (x824 x521))
(assert (x1204 x196))
(assert (x818 x772))
(assert (< 10000 (x681 x979 x320)))
(assert (= (or x955 x855) x200))
(assert (x1204 x292))
(assert (x939 x128 1000000))
(assert (x902 x576))
(assert (= (x1345 170141183460469231731687303715884105727) 0))
(assert (not (x1205 (x1336 64 114221746417031484496905892821793293822878436923706878644384133060206014517163 1))))
(assert (= x1298 (=> (and (= (x704 x507 x336) x132) (= x317 (ite (>= 1 x132) x1132 (x174 x132 x322))) (>= x102 1) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x102) x336) (= (* 2 x73) x322) (= x1132 (x55 (+ x322 x132))) (= (* x73 8) x225) (= x102 (x1190 115792089237316195423570985008687907853269984665640564039457584007913129639935 x225))) x1347)))
(assert (x902 x1254))
(assert (x723 x772))
(assert (x780 (+ 31 x73)))
(assert (x902 x78))
(assert (=> (<= x981 10000) (= (x1345 x981) 0)))
(assert (= (x1345 (x681 32 x976)) (x681 32 x976)))
(assert (= x89 (=> (and (and (= (not (> x944 224)) x371) (= x1366 (x720 x731))) x371) x253)))
(assert (x902 x796))
(assert (x723 256))
(assert (= (and x350 (not x1210)) x1222))
(assert (x780 32))
(assert (=> (<= x1273 10000) (= (x1345 x1273) 0)))
(assert (x902 x944))
(assert (x902 x1220))
(assert (x902 x135))
(assert (= (x239 x1004 x576 x770 x1235) (x1345 (x239 x1004 x576 x770 x1235))))
(assert (x902 x504))
(assert (x162 x1050 256))
(assert (x1205 71998914331801701415977457805802827292338598818749192222732755537001613711014))
(assert (= x1004 (x810 (x1336 x1004 x881 x1001))))
(assert (x902 x1158))
(assert (x902 x196))
(assert (x780 (x933 2 x789)))
(assert (x902 x582))
(assert (x902 x881))
(assert (x902 x538))
(assert (x902 x1189))
(assert (= (x945 x845 x432 x85 x1098 x74) (x1345 (x945 x845 x432 x85 x1098 x74))))
(assert (x902 x309))
(assert (x902 x716))
(assert (= (x847 (x681 32 x929)) x929))
(assert (x902 x304))
(assert (x902 x665))
(assert (= (x59 (x962 x845 x318 x701 x149 x54 x121 x1031)) x701))
(assert (x463 x139))
(assert (= (x1345 114221746417031484496905892821793293822878436923706878644384133060206014517163) 0))
(assert (x902 x744))
(assert (= x420 (and (not x515) x472)))
(assert (x902 x1290))
(assert (= x825 (x755 (x1092 x979 x127 x231 x1280 x1186 x825))))
(assert (x902 x763))
(assert (x780 x97))
(assert (x902 x100))
(assert (< 10000 (x239 x1004 x576 x770 x1235)))
(assert (< (x945 x1004 x836 x1013 x44 x864) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (< (x962 x845 x318 x701 x149 x54 x121 x1031) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x902 x153))
(assert (x902 x334))
(assert (x902 x1202))
(assert (x902 x225))
(assert (= (x1345 (x1336 64 x662 19)) (x1336 64 x662 19)))
(assert (x162 (+ x718 31) 32))
(assert (x902 x566))
(assert (x902 x63))
(assert (= 0 (x1345 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (x902 x638))
(assert (x540 x657 x33))
(assert (x902 x62))
(assert (x902 x1184))
(assert (= x1128 (x980 (x962 x710 x1002 x593 x1128 x565 x560 x663))))
(assert (x902 x769))
(assert (not (x1205 (x681 32 x976))))
(assert (=> (<= x1095 10000) (= (x1345 x1095) 0)))
(assert (x902 x905))
(assert (= (or x866 x1309) x115))
(assert (= x151 (=> (and (= x1033 (+ x1218 1)) (= (* x626 2) x1218)) x783)))
(assert (x902 x1098))
(assert (x358 x322))
(assert (not (x1205 (x1336 x1004 x881 x1001))))
(assert (=> (>= 10000 x1082) (= (x1345 x1082) 0)))
(assert (x1272 x507))
(assert (=> (>= 10000 x496) (= (x1345 x496) 0)))
(assert (x902 x966))
(assert (x162 (+ x73 31) 32))
(assert (=> (>= 10000 x761) (= 0 (x1345 x761))))
(assert (= (x405 (x1092 x845 x925 x1306 x1082 x622 x1035)) x622))
(assert (< 10000 (x681 32 x929)))
(assert (x902 x845))
(assert (x902 x1129))
(assert (= x1363 (and (not x959) x1148)))
(assert (x902 x274))
(assert (= (x405 (x962 x710 x1002 x593 x1128 x565 x560 x663)) x565))
(assert (= (=> (and (= x1234 (x27 x423)) (= x1202 (x55 (+ x1029 32))) (= x784 (x55 (+ 32 x423))) (= (< 0 x1234) x743) (= x781 (x55 (+ x14 32))) (= x546 (x1251 (- x14 x900)))) (and (=> (and (and (= (> x1234 32) x1079) (= (x199 x784) x966)) x743) (and (=> (and (and (= x1046 (x55 (+ x784 32))) (= x959 (> x1234 64)) (= (x55 (+ 32 x781)) x289) (= x969 (x454 x1046))) x1079) (and (=> (not x959) x392) (=> (and x959 (and (= x742 (x50 x294)) (= (x55 (+ x784 64)) x294) (= (x55 (+ x781 64)) x580) (= x637 (> x1234 96)))) (and (=> x637 x288) (=> (not x637) x392))))) (=> (not x1079) x392))) (=> (not x743) x392))) x9))
(assert (= (x1345 (x1336 64 x768 x862)) (x1336 64 x768 x862)))
(assert (=> (>= 10000 x1025) (= 0 (x1345 x1025))))
(assert (x902 x1246))
(assert (= x1004 (x810 (x906 x1004 x1106 x954 x603 x912 x274 x800 x245))))
(assert (x902 x600))
(assert (= (or x858 x827) x12))
(assert (= x730 (and x166 (not x743))))
(assert (x902 x180))
(assert (= (and (not x457) x1145) x1317))
(assert (= x1279 (and x1061 (not x679))))
(assert (x902 x156))
(assert (x902 x326))
(assert (x592 x1172 x22))
(assert (x1204 x1278))
(assert (x1272 x702))
(assert (x902 x702))
(assert (x902 x1325))
(assert (x902 x842))
(assert (x902 x14))
(assert (x780 (x933 2 x561)))
(assert (= (x847 (x945 x845 x432 x85 x1098 x74)) x432))
(assert (x902 x427))
(assert (= 0 (x1345 10894474682274239493831243662817379401261526446360622092269559273883068006400)))
(assert (x902 x192))
(assert (= (x847 (x681 x710 x368)) x368))
(assert (x902 x185))
(assert (x902 x76))
(assert (x723 x470))
(assert (x902 x1269))
(assert (= x1152 (and (not x759) x764)))
(assert (x723 x926))
(assert (not (x1205 (x681 32 x896))))
(assert (= x222 (x980 (x1092 x1004 x142 x30 x222 x605 x446))))
(assert (x902 x1304))
(assert (= x383 (or x1361 x1359)))
(assert (x70 x354))
(assert (x902 x39))
(assert (= (x810 (x1092 x979 x127 x231 x1280 x1186 x825)) x979))
(assert (=> (>= 10000 x659) (= (x1345 x659) 0)))
(assert (x162 (+ x1355 31) 32))
(assert (= (x59 (x1336 x1004 x881 x1001)) x1001))
(assert (x902 x714))
(assert (= x588 (or x551 x339)))
(assert (> (x239 x710 x453 x496 x791) 10000))
(assert (= (x1345 (x681 32 x929)) (x681 32 x929)))
(assert (= x896 (x847 (x681 32 x896))))
(assert (x902 x467))
(assert (x1272 115792089237316195423570985008687907853269984665640564039457584007913129639680))
(assert (= (=> (and (and (= (+ 1 x489) x1327) (= x721 (not (< x1327 x377)))) x721) x897) x1005))
(assert (= (=> (and (or (and (= (ite x460 1 0) x714) (not x460)) (and x460 (= (ite (not (< x1329 x1112)) 1 0) x714))) (and (= (x55 (+ x865 x117)) x1141) (= 16 x99) (= x460 (not (= 0 x1078))) (= (x1251 (- x556 x1038)) x1078))) x953) x935))
(assert (= x1179 x1024))
(assert (= (x405 (x906 x979 x1319 x1349 x123 x1364 x659 x1037 x761)) x1364))
(assert (x902 x101))
(assert (x780 x1050))
(assert (= x663 (x268 (x962 x710 x1002 x593 x1128 x565 x560 x663))))
(assert (=> (>= 10000 x62) (= 0 (x1345 x62))))
(assert (x902 x464))
(assert (= x1276 (and (not x700) x991)))
(assert (= x710 (x810 (x945 x710 x871 x242 x410 x946))))
(assert (x902 x789))
(assert (not (x1205 (x945 x845 x432 x85 x1098 x74))))
(assert (x902 x260))
(assert (x902 x1132))
(assert (= x487 (x268 (x906 x710 x527 x552 x670 x828 x442 x487 x412))))
(assert (x780 (x933 2 x343)))
(assert (= x560 (x755 (x962 x710 x1002 x593 x1128 x565 x560 x663))))
(assert (x902 x963))
(assert (=> (>= 10000 x829) (= (x1345 x829) 0)))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x945 x979 x303 x949 x373 x177)))
(assert (=> (<= x1316 10000) (= 0 (x1345 x1316))))
(assert (x723 2))
(assert (x902 x710))
(assert (x902 x488))
(assert (= x488 (x59 (x239 x979 x312 x488 x1233))))
(assert (= (x1345 (+ x387 x19)) (x1345 x19)))
(assert (= x370 (=> (and (= x679 (> x626 x820)) (or (not x679) (and (and (= x561 (* x503 8)) (= (x1178 x534) x1172) (= (x55 (+ x423 x1121)) x534) (= x1162 (x704 x1172 x22)) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x1190 115792089237316195423570985008687907853269984665640564039457584007913129639935 x561)) x22) (= x503 (x704 31 x626))) x679))) x151)))
(assert (x1272 x1180))
(assert (x902 x1070))
(assert (= 0 (x1345 115792089237316195423570985008687907853099843482180094807725896704197245534208)))
(assert (not (x1205 (x1092 x845 x925 x1306 x1082 x622 x1035))))
(assert (x902 x210))
(assert (= (and (not x766) x797) x229))
(assert (x902 x1338))
(assert (= (=> (and (and (= (x807 x646) x1305) (= x891 (x55 (+ x1161 32))) (= (not (< x891 x995)) x213)) x213) x790) x977))
(assert (= (x810 (x843 0)) 0))
(assert (= (x847 (x681 32 4)) 4))
(assert (x902 x882))
(assert (x902 x1236))
(assert (= x410 (x980 (x945 x710 x871 x242 x410 x946))))
(assert (x902 x1076))
(assert (x902 x505))
(assert (= x569 (=> (and (= (x55 (+ x423 (mod (+ 32 x1254) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x879) (= x717 (= 0 x1355)) (= (+ 1 x1223) x896) (= (x1251 (- x113 (mod (ite (< x1355 32) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x1159) (<= 1 x879) (= (x525 (+ 31 x1355) 32) x462) (= x1254 (* x462 32)) (= x1278 (x875 x896)) (= (x525 x1278 2) x702) (<= x423 115792089237316195423570985008687907853269984665640564039457584007913129639934) (or (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1159) (= 1 x1159)) (= (x704 1 x1278) x113) (= x1355 (ite (> x113 0) x702 (x704 127 x702))) (= (x55 (+ 32 x423)) x79) (<= x423 115792089237316195423570985008687907853269984665640564039457584007913129639934) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x423) (> x879 x423)) (and (=> (and (= x1120 (< 31 x1355)) (not x717)) (and (=> (and (not x1120) (and (= x805 (* 256 x473)) (= x40 (x875 x896)) (= (x525 x40 256) x473))) x737) (=> (and (and (= (x681 32 x896) x499) (= (x807 x499) x3) (= (> x995 x1161) x1243) (= (x55 (+ x1355 x79)) x995) (= x1161 (x55 (+ x79 32))) (= (+ x499 1) x646)) x1120) (and (=> (not x1243) x790) (=> x1243 x977))))) (=> x717 x737)))))
(assert (= x1316 (x268 (x962 x1004 x475 x1269 x492 x1189 x349 x1316))))
(assert (x902 x995))
(assert (= x44 (x980 (x945 x1004 x836 x1013 x44 x864))))
(assert (= (and x1048 x72) x1062))
(assert (x902 x368))
(assert (x902 x1362))
(assert (= (x847 (x962 x1004 x475 x1269 x492 x1189 x349 x1316)) x475))
(assert (x902 x415))
(assert (< 10000 (x1092 x845 x925 x1306 x1082 x622 x1035)))
(assert (x902 x28))
(assert (= (x1190 115792089237316195423570985008687907853269984665640564039457584007913129639935 x343) (ite (> 256 x343) (x525 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x933 2 x343)) 0)))
(assert (= (x1345 4294967295) 0))
(assert (not (x1205 (x681 32 4))))
(assert (x902 x1256))
(assert (x1272 x430))
(assert (x902 x452))
(assert (= (x1345 (x962 x710 x1002 x593 x1128 x565 x560 x663)) (x962 x710 x1002 x593 x1128 x565 x560 x663)))
(assert (x818 x75))
(assert (x902 x532))
(assert (x1272 x75))
(assert (x902 x649))
(assert (x902 x1121))
(assert (x902 x746))
(assert (x960 x354 256))
(assert (= x51 (and x65 x1348)))
(assert (= (and x472 x515) x240))
(assert (= x551 (or x1113 x642)))
(assert (x902 x563))
(assert (= (x847 (x681 32 x1223)) x1223))
(assert (x780 x196))
(assert (x396 8 x503))
(assert (x396 32 x139))
(assert (=> (>= 10000 x1255) (= (x1345 x1255) 0)))
(assert (= (x1345 (+ x484 x19)) (x1345 x19)))
(assert (= x144 (=> (and x629 (and (= x505 (x316 x839)) (= x629 (not (> x479 128))) (= (x55 (+ x109 96)) x839) (= (x55 (+ x983 96)) x1077))) x1181)))
(assert (> (x1336 64 71998914331801701415977457805802827292338598818749192222732755537001613711014 6) 10000))
(assert (= x1171 (and (not x637) x918)))
(assert (= (x1345 1605942358) 0))
(assert (= (x1345 1461501637330902918203684832716283019655932542975) 0))
(assert (= x243 (and (not x428) x1143)))
(assert (x463 32))
(assert (=> (>= 10000 x234) (= 0 (x1345 x234))))
(assert (=> (>= 10000 x487) (= (x1345 x487) 0)))
(assert (x902 x1264))
(assert (= (x847 (x1336 64 x514 17)) x514))
(assert (x902 x718))
(assert (= (x1345 (+ x929 1)) (x1345 x929)))
(assert (= (x810 (x1092 x845 x925 x1306 x1082 x622 x1035)) x845))
(assert (x818 x614))
(assert (x396 8 x73))
(assert (x902 x601))
(assert (= x710 (x810 (x681 x710 x368))))
(assert (= (=> (and x328 (and (= x1051 (x55 (+ 96 x784))) (= (not (> x1234 128)) x328) (= (x1089 x1051) x831) (= (x55 (+ 96 x781)) x452))) x392) x288))
(assert (x960 x695 32))
(assert (x358 x657))
(assert (x960 x470 128))
(assert (x902 x1169))
(assert (= x861 (and x1358 x425)))
(assert (= x795 (and (not x1057) x715)))
(assert (x902 x270))
(assert (< 10000 (x681 x710 x368)))
(assert (x1272 x73))
(assert (= (x405 (x945 x979 x303 x949 x373 x177)) x177))
(assert (x902 x1118))
(assert (< (x843 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (x23 (x906 x845 x600 x1118 x999 x585 x948 x738 x386)) x386))
(assert (x902 x170))
(assert (x902 x997))
(assert (x902 x1293))
(assert (= (x59 (x1336 64 x514 17)) 17))
(assert (x902 x523))
(assert (=> (>= 10000 x670) (= 0 (x1345 x670))))
(assert (= (x405 (x906 x1004 x1106 x954 x603 x912 x274 x800 x245)) x912))
(assert (< (x1092 x979 x127 x231 x1280 x1186 x825) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x902 x768))
(assert (not (x1205 (x239 x845 x582 x798 x438))))
(assert (= (and (not x668) x682) x1058))
(assert (= (x906 x710 x527 x552 x670 x828 x442 x487 x412) (x1345 (x906 x710 x527 x552 x670 x828 x442 x487 x412))))
(assert (x1205 29289127993025145568725129057828671567744754166070328588094505464281371246592))
(assert (x902 x791))
(assert (x902 x678))
(assert (x1205 10894474682274239493831243662817379401261526446360622092269559273883068006400))
(assert (x463 x1206))
(assert (= (x1345 (x681 x710 x368)) (x681 x710 x368)))
(assert (x902 x311))
(assert (= (and x776 x634) x131))
(assert (x902 x903))
(assert (x902 x1074))
(assert (x1272 x614))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x1336 x845 x744 x62)))
(assert (= x710 (x810 (x962 x710 x1002 x593 x1128 x565 x560 x663))))
(assert (x902 x530))
(assert (> (x962 x979 x1025 x1212 x591 x266 x1326 x1273) 10000))
(assert (x902 x1004))
(assert (x902 x237))
(assert (= (x405 (x962 x845 x318 x701 x149 x54 x121 x1031)) x54))
(assert (= x25 (=> (and (= x32 false) (= x458 false) (= 4132204338 x842) (>= x638 1) (= x841 false) (= x857 false) (= x1160 22334872) (= x641 4) (= 4 x285) (= (x175 x917) x1241) (<= x893 127) (= 1 x905) (= false x667) (= x441 false) (<= 1 x1241) (= (= x722 0) x8) (= x1266 false) (= x46 16) (= x690 false) (= (x175 x917) x638) (= false x363) (= x276 false) (= x867 false) (= (not x8) x1040) (= false x332) (>= 127 x893) (= (x1251 (- x556 x1356)) x722) (>= 127 x1049) (= false x233) (>= 127 x1049) (= false x636)) x1040)))
(assert (= (x59 (x1092 x979 x127 x231 x1280 x1186 x825)) x231))
(assert (not (x1205 (x1336 64 x736 3))))
(assert (= (x1336 x710 x767 x1200) (x1345 (x1336 x710 x767 x1200))))
(assert (= (or x1258 x543 x1154 x1058 x195) x1299))
(assert (= (=> (and (= x865 (x48 x486)) (= (x55 (+ 32 x155)) x181) (= x189 (x55 (+ x486 32))) (= (x55 (+ x1281 x931)) x508) (= (x55 (+ x181 32)) x117) (= (> x865 0) x668)) (and (=> (not x668) x935) (=> (and (and (= (> x865 32) x880) (= x558 (x994 x189))) x668) (and (=> (not x880) x935) (=> (and (and (= (x55 (+ 32 x189)) x261) (= x873 (x55 (+ x117 32))) (= x53 (> x865 64)) (= (x559 x261) x170)) x880) (and (=> (not x53) x935) (=> (and (and (= x627 (x465 x601)) (= (> x865 96) x1084) (= x583 (x55 (+ 64 x117))) (= x601 (x55 (+ x189 64)))) x53) (and (=> x1084 x86) (=> (not x1084) x935))))))))) x241))
(assert (= (x847 (x962 x845 x318 x701 x149 x54 x121 x1031)) x318))
(assert (x902 x983))
(assert (x818 x702))
(assert (= x872 (and x1087 (not x1261))))
(assert (=> (>= 10000 x1326) (= 0 (x1345 x1326))))
(assert (> (x681 x1004 x76) 10000))
(assert (x902 x93))
(assert (= (x847 (x681 x979 x320)) x320))
(assert (=> (<= x767 10000) (= 0 (x1345 x767))))
(assert (x902 x265))
(assert (> (x1092 x979 x127 x231 x1280 x1186 x825) 10000))
(assert (= (x1345 (x906 x845 x600 x1118 x999 x585 x948 x738 x386)) (x906 x845 x600 x1118 x999 x585 x948 x738 x386)))
(assert (= x1134 x1064))
(assert (= (x847 (x906 x1004 x1106 x954 x603 x912 x274 x800 x245)) x1106))
(assert (x723 340282366920938463463374607431768211456))
(assert (x162 (+ x163 31) 32))
(assert (x902 x916))
(assert (x902 x319))
(assert (x1080 x951))
(assert (x902 x1073))
(assert (x902 x726))
(assert (x902 x280))
(assert (= (and (not x1243) x367) x1361))
(assert (=> (<= x320 10000) (= (x1345 x320) 0)))
(assert (not (x1205 (x681 x710 x368))))
(assert (x723 x816))
(assert (x902 x1133))
(assert (= x864 (x405 (x945 x1004 x836 x1013 x44 x864))))
(assert (x540 x132 x322))
(assert (x902 x925))
(assert (x1205 15621254588198505905128070491301349125963569839395559151037828136576825163776))
(assert (= x827 (or x426 x110)))
(assert (x902 x1069))
(assert (x902 x176))
(assert (= x110 (and x460 x1299)))
(assert (= (and x187 x493) x984))
(assert (x960 x97 2))
(assert (=> (>= 10000 x565) (= (x1345 x565) 0)))
(assert (x902 x1122))
(assert (> (x945 x1004 x836 x1013 x44 x864) 10000))
(assert (x902 x473))
(assert (= x1197 (or x984 x1368)))
(assert (x902 x728))
(assert (x902 x238))
(assert (= (x1345 x758) (x1345 (+ x904 x758))))
(assert (= x845 (x810 (x945 x845 x432 x85 x1098 x74))))
(assert (=> (<= x979 10000) (= 0 (x1345 x979))))
(assert (x902 x670))
(assert (x723 x100))
(assert (x902 x565))
(assert (x902 x641))
(assert (x723 x695))
(assert (x902 x446))
(assert (x162 (+ 31 x626) 32))
(assert (< (x239 x979 x312 x488 x1233) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= x991 (and x892 x588)))
(assert (= (x1345 (x962 x1004 x475 x1269 x492 x1189 x349 x1316)) (x962 x1004 x475 x1269 x492 x1189 x349 x1316)))
(assert (x162 (+ 31 x660) 32))
(assert (not (x1205 (x962 x710 x1002 x593 x1128 x565 x560 x663))))
(assert (x902 x312))
(assert (x902 x29))
(assert (= (x810 (x681 32 4)) 32))
(assert (x358 x132))
(assert (x902 x1307))
(assert (x818 x470))
(assert (x960 x75 128))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x1336 64 71998914331801701415977457805802827292338598818749192222732755537001613711014 6)))
(assert (= (x681 x1004 x76) (x1345 (x681 x1004 x76))))
(assert (= x166 (or x236 x131)))
(assert (> (x906 x845 x600 x1118 x999 x585 x948 x738 x386) 10000))
(assert (and (= 52656145834278593348959013841835216159447547700274555627155488768 (x933 2 215)) (= (x933 2 180) 1532495540865888858358347027150309183618739122183602176) (= 134217728 (x933 2 27)) (= (x933 2 152) 5708990770823839524233143877797980545530986496) (= (x933 2 121) 2658455991569831745807614120560689152) (= (x933 2 97) 158456325028528675187087900672) (= (x933 2 47) 140737488355328) (= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x933 2 256)) (= 9671406556917033397649408 (x933 2 83)) (= (x933 2 36) 68719476736) (= 822752278660603021077484591278675252491367932816789931674304512 (x933 2 209)) (= 4503599627370496 (x933 2 52)) (= (x933 2 9) 512) (= (x933 2 90) 1237940039285380274899124224) (= (x933 2 188) 392318858461667547739736838950479151006397215279002157056) (= 154742504910672534362390528 (x933 2 87)) (= (x933 2 49) 562949953421312) (= 2361183241434822606848 (x933 2 71)) (= (x933 2 182) 6129982163463555433433388108601236734474956488734408704) (= 43556142965880123323311949751266331066368 (x933 2 135)) (= 1099511627776 (x933 2 40)) (= (x933 2 79) 604462909807314587353088) (= 73786976294838206464 (x933 2 66)) (= 28948022309329048855892746252171976963317496166410141009864396001978282409984 (x933 2 254)) (= 13479973333575319897333507543509815336818572211270286240551805124608 (x933 2 223)) (= (x933 2 234) 27606985387162255149739023449108101809804435888681546220650096895197184) (= 6427752177035961102167848369364650410088811975131171341205504 (x933 2 202)) (= 9223372036854775808 (x933 2 63)) (= (x933 2 106) 81129638414606681695789005144064) (= (x933 2 204) 25711008708143844408671393477458601640355247900524685364822016) (= (x933 2 96) 79228162514264337593543950336) (= (x933 2 169) 748288838313422294120286634350736906063837462003712) (= (x933 2 25) 33554432) (= 2475880078570760549798248448 (x933 2 91)) (= (x933 2 220) 1684996666696914987166688442938726917102321526408785780068975640576) (= 295147905179352825856 (x933 2 68)) (= (x933 2 200) 1606938044258990275541962092341162602522202993782792835301376) (= (x933 2 19) 524288) (= 1208925819614629174706176 (x933 2 80)) (= (x933 2 24) 16777216) (= 649037107316853453566312041152512 (x933 2 109)) (= (x933 2 128) 340282366920938463463374607431768211456) (= 2722258935367507707706996859454145691648 (x933 2 131)) (= (x933 2 67) 147573952589676412928) (= (x933 2 60) 1152921504606846976) (= (x933 2 238) 441711766194596082395824375185729628956870974218904739530401550323154944) (= 842498333348457493583344221469363458551160763204392890034487820288 (x933 2 219)) (= (x933 2 163) 11692013098647223345629478661730264157247460343808) (= (x933 2 153) 11417981541647679048466287755595961091061972992) (= (x933 2 217) 210624583337114373395836055367340864637790190801098222508621955072) (= (x933 2 65) 36893488147419103232) (= (x933 2 159) 730750818665451459101842416358141509827966271488) (= 83076749736557242056487941267521536 (x933 2 116)) (= 883423532389192164791648750371459257913741948437809479060803100646309888 (x933 2 239)) (= (x933 2 17) 131072) (= (x933 2 231) 3450873173395281893717377931138512726225554486085193277581262111899648) (= (x933 2 245) 56539106072908298546665520023773392506479484700019806659891398441363832832) (= 3369993333393829974333376885877453834204643052817571560137951281152 (x933 2 221)) (= 162259276829213363391578010288128 (x933 2 107)) (= (x933 2 84) 19342813113834066795298816) (= 1766847064778384329583297500742918515827483896875618958121606201292619776 (x933 2 240)) (= 14134776518227074636666380005943348126619871175004951664972849610340958208 (x933 2 243)) (= (x933 2 133) 10889035741470030830827987437816582766592) (= 2305843009213693952 (x933 2 61)) (= (x933 2 205) 51422017416287688817342786954917203280710495801049370729644032) (= (x933 2 213) 13164036458569648337239753460458804039861886925068638906788872192) (= (x933 2 142) 5575186299632655785383929568162090376495104) (= (x933 2 41) 2199023255552) (= 174224571863520493293247799005065324265472 (x933 2 137)) (= (x933 2 179) 766247770432944429179173513575154591809369561091801088) (= 590295810358705651712 (x933 2 69)) (= (x933 2 166) 93536104789177786765035829293842113257979682750464) (= 268435456 (x933 2 28)) (= (x933 2 148) 356811923176489970264571492362373784095686656) (= 365375409332725729550921208179070754913983135744 (x933 2 158)) (= 2596148429267413814265248164610048 (x933 2 111)) (= 178405961588244985132285746181186892047843328 (x933 2 147)) (= 19807040628566084398385987584 (x933 2 94)) (= 1809251394333065553493296640760748560207343510400633813116524750123642650624 (x933 2 250)) (= (x933 2 57) 144115188075855872) (= (x933 2 0) 1) (= (x933 2 160) 1461501637330902918203684832716283019655932542976) (= (x933 2 123) 10633823966279326983230456482242756608) (= (x933 2 224) 26959946667150639794667015087019630673637144422540572481103610249216) (= (x933 2 206) 102844034832575377634685573909834406561420991602098741459288064) (= (x933 2 85) 38685626227668133590597632) (= 4951760157141521099596496896 (x933 2 92)) (= (x933 2 168) 374144419156711147060143317175368453031918731001856) (= 21267647932558653966460912964485513216 (x933 2 124)) (= 633825300114114700748351602688 (x933 2 99)) (= (x933 2 218) 421249166674228746791672110734681729275580381602196445017243910144) (= (x933 2 75) 37778931862957161709568) (= 6901746346790563787434755862277025452451108972170386555162524223799296 (x933 2 232)) (= (x933 2 195) 50216813883093446110686315385661331328818843555712276103168) (= (x933 2 149) 713623846352979940529142984724747568191373312) (= 2048 (x933 2 11)) (= (x933 2 201) 3213876088517980551083924184682325205044405987565585670602752) (= 85070591730234615865843651857942052864 (x933 2 126)) (= (x933 2 227) 215679573337205118357336120696157045389097155380324579848828881993728) (= (x933 2 222) 6739986666787659948666753771754907668409286105635143120275902562304) (= (x933 2 190) 1569275433846670190958947355801916604025588861116008628224) (= (x933 2 208) 411376139330301510538742295639337626245683966408394965837152256) (= 53919893334301279589334030174039261347274288845081144962207220498432 (x933 2 225)) (= (x933 2 18) 262144) (= 20769187434139310514121985316880384 (x933 2 114)) (= 536870912 (x933 2 29)) (= (x933 2 34) 17179869184) (= (x933 2 216) 105312291668557186697918027683670432318895095400549111254310977536) (= (x933 2 143) 11150372599265311570767859136324180752990208) (= 24519928653854221733733552434404946937899825954937634816 (x933 2 184)) (= (x933 2 156) 91343852333181432387730302044767688728495783936) (= (x933 2 14) 16384) (= (x933 2 230) 1725436586697640946858688965569256363112777243042596638790631055949824) (= 431359146674410236714672241392314090778194310760649159697657763987456 (x933 2 228)) (= (x933 2 51) 2251799813685248) (= 34359738368 (x933 2 35)) (= 32768 (x933 2 15)) (= 11972621413014756705924586149611790497021399392059392 (x933 2 173)) (= (x933 2 98) 316912650057057350374175801344) (= 7067388259113537318333190002971674063309935587502475832486424805170479104 (x933 2 242)) (= 70368744177664 (x933 2 46)) (= (x933 2 32) 4294967296) (= (x933 2 62) 4611686018427387904) (= (x933 2 196) 100433627766186892221372630771322662657637687111424552206336) (= (x933 2 189) 784637716923335095479473677900958302012794430558004314112) (= (x933 2 12) 4096) (= 17592186044416 (x933 2 44)) (= (x933 2 157) 182687704666362864775460604089535377456991567872) (= (x933 2 104) 20282409603651670423947251286016) (= (x933 2 233) 13803492693581127574869511724554050904902217944340773110325048447598592) (= (x933 2 5) 32) (= (x933 2 89) 618970019642690137449562112) (= 862718293348820473429344482784628181556388621521298319395315527974912 (x933 2 229)) (= 1361129467683753853853498429727072845824 (x933 2 130)) (= 14474011154664524427946373126085988481658748083205070504932198000989141204992 (x933 2 253)) (= 10384593717069655257060992658440192 (x933 2 113)) (= (x933 2 30) 1073741824) (= (x933 2 129) 680564733841876926926749214863536422912) (= 42535295865117307932921825928971026432 (x933 2 125)) (= 12259964326927110866866776217202473468949912977468817408 (x933 2 183)) (= (x933 2 134) 21778071482940061661655974875633165533184) (= (x933 2 171) 2993155353253689176481146537402947624255349848014848) (= (x933 2 150) 1427247692705959881058285969449495136382746624) (= (x933 2 38) 274877906944) (= (x933 2 88) 309485009821345068724781056) (= (x933 2 82) 4835703278458516698824704) (= (x933 2 74) 18889465931478580854784) (= (x933 2 164) 23384026197294446691258957323460528314494920687616) (= (x933 2 211) 3291009114642412084309938365114701009965471731267159726697218048) (= 3618502788666131106986593281521497120414687020801267626233049500247285301248 (x933 2 251)) (= 281474976710656 (x933 2 48)) (= (x933 2 70) 1180591620717411303424) (= (x933 2 122) 5316911983139663491615228241121378304) (= 166153499473114484112975882535043072 (x933 2 117)) (= (x933 2 187) 196159429230833773869868419475239575503198607639501078528) (= 332306998946228968225951765070086144 (x933 2 118)) (= (x933 2 226) 107839786668602559178668060348078522694548577690162289924414440996864) (= 401734511064747568885490523085290650630550748445698208825344 (x933 2 198)) (= 41538374868278621028243970633760768 (x933 2 115)) (= (x933 2 192) 6277101735386680763835789423207666416102355444464034512896) (= 77371252455336267181195264 (x933 2 86)) (= (x933 2 136) 87112285931760246646623899502532662132736) (= 12855504354071922204335696738729300820177623950262342682411008 (x933 2 203)) (= 2417851639229258349412352 (x933 2 81)) (= 39614081257132168796771975168 (x933 2 95)) (= 7237005577332262213973186563042994240829374041602535252466099000494570602496 (x933 2 252)) (= 1393796574908163946345982392040522594123776 (x933 2 140)) (= (x933 2 132) 5444517870735015415413993718908291383296) (= 1645504557321206042154969182557350504982735865633579863348609024 (x933 2 210)) (= (x933 2 167) 187072209578355573530071658587684226515959365500928) (= (x933 2 175) 47890485652059026823698344598447161988085597568237568) (= (x933 2 33) 8589934592) (= (x933 2 248) 452312848583266388373324160190187140051835877600158453279131187530910662656) (= (x933 2 77) 151115727451828646838272) (= 205688069665150755269371147819668813122841983204197482918576128 (x933 2 207)) (= (x933 2 191) 3138550867693340381917894711603833208051177722232017256448) (= 576460752303423488 (x933 2 59)) (= (x933 2 10) 1024) (= (x933 2 72) 4722366482869645213696) (= (x933 2 108) 324518553658426726783156020576256) (= 4398046511104 (x933 2 42)) (= (x933 2 43) 8796093022208) (= 9007199254740992 (x933 2 53)) (= 1267650600228229401496703205376 (x933 2 100)) (= 383123885216472214589586756787577295904684780545900544 (x933 2 178)) (= 12554203470773361527671578846415332832204710888928069025792 (x933 2 193)) (= 220855883097298041197912187592864814478435487109452369765200775161577472 (x933 2 237)) (= (x933 2 56) 72057594037927936) (= 4 (x933 2 2)) (= 113078212145816597093331040047546785012958969400039613319782796882727665664 (x933 2 246)) (= 1048576 (x933 2 20)) (= 664613997892457936451903530140172288 (x933 2 119)) (= 5192296858534827628530496329220096 (x933 2 112)) (= 95780971304118053647396689196894323976171195136475136 (x933 2 176)) (= (x933 2 181) 3064991081731777716716694054300618367237478244367204352) (= 2535301200456458802993406410752 (x933 2 101)) (= 348449143727040986586495598010130648530944 (x933 2 138)) (= (x933 2 139) 696898287454081973172991196020261297061888) (= 2923003274661805836407369665432566039311865085952 (x933 2 161)) (= (x933 2 162) 5846006549323611672814739330865132078623730171904) (= (x933 2 103) 10141204801825835211973625643008) (= 64 (x933 2 6)) (= 44601490397061246283071436545296723011960832 (x933 2 145)) (= (x933 2 174) 23945242826029513411849172299223580994042798784118784) (= 191561942608236107294793378393788647952342390272950272 (x933 2 177)) (= (x933 2 127) 170141183460469231731687303715884105728) (= 28269553036454149273332760011886696253239742350009903329945699220681916416 (x933 2 244)) (= 904625697166532776746648320380374280103671755200316906558262375061821325312 (x933 2 249)) (= 35184372088832 (x933 2 45)) (= (x933 2 146) 89202980794122492566142873090593446023921664) (= 8 (x933 2 3)) (= (x933 2 54) 18014398509481984) (= (x933 2 58) 288230376151711744) (= (x933 2 212) 6582018229284824168619876730229402019930943462534319453394436096) (= (x933 2 214) 26328072917139296674479506920917608079723773850137277813577744384) (= (x933 2 1) 2) (= (x933 2 151) 2854495385411919762116571938898990272765493248) (= (x933 2 39) 549755813888) (= (x933 2 120) 1329227995784915872903807060280344576) (= (x933 2 185) 49039857307708443467467104868809893875799651909875269632) (= (x933 2 37) 137438953472) (= (x933 2 22) 4194304) (= 2147483648 (x933 2 31)) (= 75557863725914323419136 (x933 2 76)) (= (x933 2 8) 256) (= (x933 2 197) 200867255532373784442745261542645325315275374222849104412672) (= 45671926166590716193865151022383844364247891968 (x933 2 155)) (= 302231454903657293676544 (x933 2 78)) (= (x933 2 13) 8192) (= 40564819207303340847894502572032 (x933 2 105)) (= (x933 2 26) 67108864) (= (x933 2 235) 55213970774324510299478046898216203619608871777363092441300193790394368) (= (x933 2 93) 9903520314283042199192993792) (= (x933 2 102) 5070602400912917605986812821504) (= 57896044618658097711785492504343953926634992332820282019728792003956564819968 (x933 2 255)) (= 16 (x933 2 4)) (= 3533694129556768659166595001485837031654967793751237916243212402585239552 (x933 2 241)) (= 98079714615416886934934209737619787751599303819750539264 (x933 2 186)) (= 1125899906842624 (x933 2 50)) (= (x933 2 55) 36028797018963968) (= 18446744073709551616 (x933 2 64)) (= (x933 2 170) 1496577676626844588240573268701473812127674924007424) (= (x933 2 16) 65536) (= 22300745198530623141535718272648361505980416 (x933 2 144)) (= 9444732965739290427392 (x933 2 73)) (= 25108406941546723055343157692830665664409421777856138051584 (x933 2 194)) (= (x933 2 236) 110427941548649020598956093796432407239217743554726184882600387580788736) (= 1298074214633706907132624082305024 (x933 2 110)) (= (x933 2 165) 46768052394588893382517914646921056628989841375232) (= (x933 2 154) 22835963083295358096932575511191922182123945984) (= (x933 2 21) 2097152) (= 5986310706507378352962293074805895248510699696029696 (x933 2 172)) (= (x933 2 247) 226156424291633194186662080095093570025917938800079226639565593765455331328) (= (x933 2 23) 8388608) (= 2787593149816327892691964784081045188247552 (x933 2 141)) (= (x933 2 7) 128) (= 803469022129495137770981046170581301261101496891396417650688 (x933 2 199))))
(assert (x902 x1365))
(assert (x463 (ite (not (= 0 x150)) 1 0)))
(assert (< (x681 32 x661) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= x736 (x847 (x1336 64 x736 3))))
(assert (x902 x926))
(assert (x723 x354))
(assert (= (and x1010 (not x1056)) x572))
(assert (x818 x926))
(assert (x1272 x772))
(assert (< (x681 32 x896) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (and (not x1295) x575) x345))
(assert (x902 x805))
(assert (= (and x887 x436) x1157))
(assert (= (x23 (x906 x1004 x1106 x954 x603 x912 x274 x800 x245)) x245))
(assert (x162 (+ x1362 31) 32))
(assert (= 1 (x59 (x1336 64 114221746417031484496905892821793293822878436923706878644384133060206014517163 1))))
(assert (< 10000 (x1336 x710 x767 x1200)))
(assert (x723 x521))
(assert (= (=> (and (and (and (and (= (x1251 (- x652 x854)) x1112) (<= x516 127) (= x998 1605942358) (not (> x1112 x652)) (= x319 x651) (= x1246 x1352) (>= 127 x516) (= (not (= 0 x1287)) x1176) (or (<= 115792089237316195423570985008687907853099843482180094807725896704197245534208 x556) (<= x556 170141183460469231731687303715884105727)) (= x876 (x1336 64 x768 x862)) (or (>= x514 115792089237316195423570985008687907853099843482180094807725896704197245534208) (>= 170141183460469231731687303715884105727 x514)) (= x1352 (x512 x917)) (= (x175 x917) x586) (= x863 1) (= (x1260 x319) x838) (= x1136 2) (= false x60) (>= 255 x346) (>= x346 1) (= (x524 x876) x346) (= x862 (x1336 64 114221746417031484496905892821793293822878436923706878644384133060206014517163 1)) (<= 1 x586) (= (x1251 (- x556 x514)) x1287) (not (= x853 2)) (= x342 false) (= 114221746417031484496905892821793293822878436923706878644384133060206014517163 x890) (= 16 x777)) (or (and x1176 (= (ite (not (> x1112 x13)) 1 0) x640)) (and (= x640 (ite x1176 1 0)) (not x1176)))) (= x651 x768)) (and (<= 0 x252) (>= x860 0) (= x193 false) (= x278 0) (<= 0 x77) (<= 1 x617) (not (= x684 x917)) (not (= x753 x981)) (<= 1 x530) (>= 255 x538) (not (= x617 x1122)) (>= x1122 1) (>= x598 0) (<= 1 x898) (= x981 x1227) (not (= x981 x1052)) (<= 0 x651) (not (= x684 x1052)) (<= 1 x165) (not (= x1122 x684)) (= x1291 (< 0 (x175 x1052))) (<= 1 x684) (>= x329 1) (<= x362 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (= x917 x1052)) (not (= x753 x617)) (= x530 x176) (= false x1318) (not (= x530 x930)) (<= x753 1461501637330902918203684832716283019655932542975) (= x418 1605942358) (= x898 x917) (not (= x617 x981)) (<= x43 1461501637330902918203684832716283019655932542975) (>= 255 x1096) (>= 1461501637330902918203684832716283019655932542975 x234) (not (= x165 x1122)) (not (= x981 x684)) (<= 1 x917) (not (= x917 x617)) (>= x362 0) (not (= x753 x684)) (<= 1 x981) (<= x165 1461501637330902918203684832716283019655932542975) (= x433 x917) (not (= x165 x981)) (not (= x930 x165)) (>= x930 1) (not (= x917 x753)) (>= 1461501637330902918203684832716283019655932542975 x28) x1219 (not (= x753 x1052)) x215 (= (< 0 (x175 x981)) x971) (not (= x530 x1122)) (= (< 0 (x175 x930)) x497) (>= x1099 0) (>= x456 1) (<= 1 x176) (not (= x684 x930)) (not (= x917 x1122)) (not (= x930 x617)) (<= x860 1461501637330902918203684832716283019655932542975) (not (= x165 x530)) (<= 0 x901) (<= 1 x1052) x958 (not (= x1052 x1122)) x1291 (>= x111 0) (>= x1227 1) (not (= x617 x530)) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x158) (>= 1461501637330902918203684832716283019655932542975 x1052) (<= 1 x204) (<= x252 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (= x1122 x753)) (<= x1227 1461501637330902918203684832716283019655932542975) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x111) (>= 1461501637330902918203684832716283019655932542975 x981) (>= 1461501637330902918203684832716283019655932542975 x176) (<= 0 x645) (= x754 (x58 0)) (not (= x1052 x930)) (not (= x1122 x930)) (<= x898 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x617) (not (= x930 x753)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1099) (= x539 (< 0 (x175 x530))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x598) (= false x485) (= x101 x754) x232 (>= 1461501637330902918203684832716283019655932542975 x204) (>= 255 x846) (= x698 (< 0 (x175 x753))) (= x684 x456) (not (= x617 x1052)) (<= x77 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x254 0) (<= x684 1461501637330902918203684832716283019655932542975) (<= 1 x753) (= x917 x329) (>= 1461501637330902918203684832716283019655932542975 x1122) (not (= x530 x753)) (>= x158 4) (not (= x1052 x530)) x550 x539 (<= 0 x43) (not (= x1052 x165)) (>= 1461501637330902918203684832716283019655932542975 x917) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x495) (not (= x930 x917)) (= false x190) (>= 1461501637330902918203684832716283019655932542975 x645) (>= x495 0) (not (= x165 x684)) (>= 1461501637330902918203684832716283019655932542975 x530) (>= 4294967295 x901) (not (= x981 x1122)) x971 (= (> (x175 x684) 0) x550) (= (> (x175 x617) 0) x232) (not (= x165 x753)) (not (= x917 x165)) (= x28 x617) (>= 1461501637330902918203684832716283019655932542975 x329) (not (= x684 x530)) (>= 1461501637330902918203684832716283019655932542975 x930) (<= x651 1461501637330902918203684832716283019655932542975) (not (= x981 x917)) (>= 1461501637330902918203684832716283019655932542975 x456) (= x124 false) (not (= x917 x530)) (not (= x530 x981)) (= x1219 (< 0 (x175 x165))) (= x215 (< 0 (x175 x917))) (= x204 x753) x497 (not (= x617 x684)) (<= 1 x28) (not (= x981 x930)) (= x958 (< 0 (x175 x1122))) (not (= x617 x165)) x698)) x159) x1173))
(assert (=> (>= 10000 x845) (= 0 (x1345 x845))))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x1336 64 114221746417031484496905892821793293822878436923706878644384133060206014517163 1)))
(assert (x780 1000000))
(assert (x902 x1078))
(assert (=> (>= 10000 x127) (= (x1345 x127) 0)))
(assert (x902 x169))
(assert (= (x1345 (x906 x1004 x1106 x954 x603 x912 x274 x800 x245)) (x906 x1004 x1106 x954 x603 x912 x274 x800 x245)))
(assert (= (x59 (x1336 64 x917 x749)) x749))
(assert (x902 x846))
(assert (x902 x660))
(assert (x902 x664))
(assert (= x173 (and x375 x618)))
(assert (x902 x546))
(assert (x902 x1035))
(assert (= 0 (x1345 1086394137)))
(assert (x902 x84))
(assert (x902 x556))
(assert (x902 x83))
(assert (x902 x1294))
(assert (x902 x1159))
(assert (= (and (not x72) x1048) x1334))
(assert (= x123 (x980 (x906 x979 x1319 x1349 x123 x1364 x659 x1037 x761))))
(assert (x902 x781))
(assert (=> (<= x85 10000) (= 0 (x1345 x85))))
(assert (x902 x95))
(assert (= (and x103 x1079) x1148))
(assert (= (and x776 (not x634)) x211))
(assert (x463 x462))
(assert (= (x1345 (x1336 64 x917 x749)) (x1336 64 x917 x749)))
(assert (= (and x1091 x173) x409))
(assert (x902 x223))
(assert (x902 x917))
(assert (x723 x75))
(assert (x902 x900))
(assert (= x686 (=> (and (= x1231 (x55 (+ x1328 x1353))) (= x14 x1231)) x9)))
(assert (x902 x1042))
(assert (x902 x863))
(assert (x902 x864))
(assert (=> (<= x617 10000) (= (x1345 x617) 0)))
(assert (=> (>= 10000 x1280) (= (x1345 x1280) 0)))
(assert (= x887 (or x506 x483)))
(assert (x902 x1350))
(assert (x902 x1029))
(assert (=> (<= x954 10000) (= 0 (x1345 x954))))
(assert (= (x1345 x896) (x1345 (+ 1 x896))))
(assert (= (x945 x710 x871 x242 x410 x946) (x1345 (x945 x710 x871 x242 x410 x946))))
(assert (x902 x386))
(assert (x902 x1329))
(assert (x902 x158))
(assert (x902 x753))
(assert (< (x1092 x710 x1069 x1256 x829 x29 x1166) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (x1345 x1119) (x1345 (+ x1119 1))))
(assert (x1272 x336))
(assert (x902 x961))
(assert (x780 x816))
(assert (= (or x229 x572 x1333 x52 x795) x575))
(assert (= (x1345 18446744073709551615) 0))
(assert (x902 x160))
(assert (= (x810 (x681 32 x976)) 32))
(assert (=> (<= x142 10000) (= (x1345 x142) 0)))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x681 32 x929)))
(assert (> (x906 x979 x1319 x1349 x123 x1364 x659 x1037 x761) 10000))
(assert (x902 x44))
(assert (= (x1190 115792089237316195423570985008687907853269984665640564039457584007913129639935 x225) (ite (> 256 x225) (x525 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x933 2 x225)) 0)))
(assert (x1205 1461501637330902918203684832716283019655932542975))
(assert (x902 x1235))
(assert (= (x755 (x906 x979 x1319 x1349 x123 x1364 x659 x1037 x761)) x659))
(assert (x902 x155))
(assert (= (x810 (x1336 64 x768 x862)) 64))
(assert (x902 x142))
(assert (x1272 x726))
(assert (= (x980 (x906 x710 x527 x552 x670 x828 x442 x487 x412)) x670))
(assert (< (x681 32 x1119) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x902 x1214))
(assert (x1205 4132204338))
(assert (not (x1205 (x1336 x710 x767 x1200))))
(assert (x902 x1013))
(assert (x902 x685))
(assert (x902 x214))
(assert (= (x59 (x945 x979 x303 x949 x373 x177)) x949))
(assert (x902 x657))
(assert (x902 x821))
(assert (x902 x456))
(assert (= (and x992 x107) x472))
(assert (= (x268 (x962 x845 x318 x701 x149 x54 x121 x1031)) x1031))
(assert (x902 x273))
(assert (x786 x626))
(assert (x902 x434))
(assert (< 10000 (x962 x710 x1002 x593 x1128 x565 x560 x663)))
(assert (> (x1336 64 114221746417031484496905892821793293822878436923706878644384133060206014517163 1) 10000))
(assert (< (x1336 64 x768 x862) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= x948 (x755 (x906 x845 x600 x1118 x999 x585 x948 x738 x386))))
(assert (x374 x626))
(assert (x902 x800))
(assert (x960 x1278 2))
(assert (= (x1345 115792089237316195423570985008687907853269984665640564039457584007913129639808) 0))
(assert (x902 x1096))
(assert (x1215 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x933 2 x343)))
(assert (=> (>= 10000 x274) (= 0 (x1345 x274))))
(assert (x902 x583))
(assert (x1272 x926))
(assert (x960 x926 128))
(assert (=> (<= x999 10000) (= (x1345 x999) 0)))
(assert (= (x1345 x498) (x1345 (+ 1 x498))))
(assert (x374 x695))
(assert (= x1181 (=> (and (= (x55 (+ 31 x479)) x695) (= (x1251 (- x393 x900)) x573) (= x1146 (x704 115792089237316195423570985008687907853269984665640564039457584007913129639904 x695)) (= x1353 (x55 (+ x393 32))) (or (= x1006 1) (= x1006 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= x1354 (x704 1 x354)) (= (= 0 x1354) x634) (= x1029 (x55 (+ 32 x900))) (= x411 (x704 1 x354)) (= (x55 (+ x983 x1146)) x393) (= (x525 x354 2) x614) (= (x1251 (- x411 (mod (ite (< x150 32) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x1006) (= (ite (> x411 0) x614 (x704 127 x614)) x150) (= x61 (x55 (+ x479 x983)))) (and (=> (and x634 (and (= x14 x610) (= x635 (* 32 (ite (not (= 0 x150)) 1 0))) (or (= 0 x635) (= 32 x635)) (= (x55 (+ x635 x1353)) x610) (= (x704 115792089237316195423570985008687907853269984665640564039457584007913129639680 x354) x578))) x9) (=> (and (not x634) (and (= x474 (> x150 0)) (= x104 (x681 32 4)))) (and (=> (and (= x1328 0) (not x474)) x686) (=> x474 x91)))))))
(assert (= (x1336 x845 x744 x62) (x1345 (x1336 x845 x744 x62))))
(assert (x1205 115792089237316195423570985008687907853269984665640564039457584007913129639934))
(assert (= (and (not x1120) x271) x67))
(assert (x902 x848))
(assert (x902 x751))
(assert (= (x980 (x1092 x710 x1069 x1256 x829 x29 x1166)) x829))
(assert (= x797 (and x1057 x715)))
(assert (= x1007 (or x957 x861)))
(assert (= (x1345 x1289) (x1345 (+ x1289 1))))
(assert (= (and x575 x1295) x764))
(assert (=> (<= x242 10000) (= (x1345 x242) 0)))
(assert (x780 x354))
(assert (= (and x1297 x880) x1343))
(assert (x1272 x908))
(assert (= (x23 (x906 x710 x527 x552 x670 x828 x442 x487 x412)) x412))
(assert (x902 x948))
(assert (= (x1345 (+ x499 1)) (x1345 x499)))
(assert (x902 x430))
(assert (=> (<= x54 10000) (= (x1345 x54) 0)))
(assert (x960 x726 128))
(assert (=> (<= x1186 10000) (= 0 (x1345 x1186))))
(assert (=> (>= 10000 x603) (= (x1345 x603) 0)))
(assert (x902 x411))
(assert (= x1168 (or x1300 x1149)))
(assert (x1205 404098525))
(assert (not (x1205 (x962 x979 x1025 x1212 x591 x266 x1326 x1273))))
(assert (x1272 x470))
(assert (x902 x616))
(assert (= x581 (or x313 x872)))
(assert (x902 x165))
(assert (x902 x1349))
(assert (x902 x1187))
(assert (x902 x1031))
(assert (x902 x343))
(assert (x902 x150))
(assert (x960 x73 32))
(assert (x902 x1305))
(assert (= x1309 (and (not x584) x114)))
(assert (x902 x40))
(assert (x902 x972))
(assert (x902 x442))
(assert (x960 x883 2))
(assert (< 10000 (x681 32 4)))
(assert (=> (<= x165 10000) (= 0 (x1345 x165))))
(assert (x902 x684))
(assert (x902 x429))
(assert (= x369 x851))
(assert (x902 x349))
(assert (x463 8))
(assert (= (x1345 (+ 1 x500)) (x1345 x500)))
(assert (x902 x879))
(assert (= x85 (x59 (x945 x845 x432 x85 x1098 x74))))
(assert (= (or x141 x51 x306) x1313))
(assert (= (=> (and (and (= (not (> x865 128)) x69) (= (x1207 x669) x93) (= x356 (x55 (+ x117 96))) (= x669 (x55 (+ x189 96)))) x69) x935) x86))
(assert (x780 x40))
(assert (x902 x113))
(assert (x902 x1131))
(assert (x902 x798))
(assert (x780 (x933 2 x225)))
(assert (= x862 (x59 (x1336 64 x768 x862))))
(assert (x780 (+ 31 x163)))
(assert (x960 x292 2))
(assert (< 10000 (x945 x710 x871 x242 x410 x946)))
(assert (x902 x893))
(assert (x960 x614 128))
(assert (x162 x354 2))
(assert (x902 x1128))
(assert (x902 x423))
(assert (x902 x527))
(assert (x960 x354 2))
(assert (x902 x1218))
(assert (= x1013 (x59 (x945 x1004 x836 x1013 x44 x864))))
(assert (x902 x544))
(assert (= (and x711 x20) x47))
(assert (= (x681 32 x661) (x1345 (x681 32 x661))))
(assert (= x1026 (and x1062 x713)))
(assert (= (x1345 (x906 x979 x1319 x1349 x123 x1364 x659 x1037 x761)) (x906 x979 x1319 x1349 x123 x1364 x659 x1037 x761)))
(assert (x902 x610))
(assert (x1272 x354))
(assert (x723 x702))
(assert (=> (<= x1128 10000) (= (x1345 x1128) 0)))
(assert (x780 (+ x718 31)))
(assert (= x1200 (x59 (x1336 x710 x767 x1200))))
(assert (=> (<= x912 10000) (= 0 (x1345 x912))))
(assert (= (and x1216 x513) x858))
(assert (= (x810 (x1092 x710 x1069 x1256 x829 x29 x1166)) x710))
(assert (x960 x626 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x902 x1250))
(assert (x902 x97))
(assert (x902 x608))
(assert (x902 x1255))
(assert (= x1154 (and x625 x1084)))
(assert (x902 x171))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x239 x845 x582 x798 x438)))
(assert (= (x239 x845 x582 x798 x438) (x1345 (x239 x845 x582 x798 x438))))
(assert (x902 x132))
(assert (=> (>= 10000 x552) (= 0 (x1345 x552))))
(assert (x902 x1151))
(assert (x162 x1278 2))
(assert (x1205 1086394137))
(assert (x902 x1028))
(assert (x902 x627))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x906 x710 x527 x552 x670 x828 x442 x487 x412)))
(assert (x902 x397))
(assert (=> (<= x1306 10000) (= (x1345 x1306) 0)))
(assert (= x979 (x810 (x906 x979 x1319 x1349 x123 x1364 x659 x1037 x761))))
(assert (x902 x561))
(assert (x902 x510))
(assert (x902 x37))
(assert (=> (>= 10000 x930) (= (x1345 x930) 0)))
(assert (x902 x1233))
(assert (not (x1205 (x906 x710 x527 x552 x670 x828 x442 x487 x412))))
(assert (x902 x126))
(assert (x902 x1231))
(assert (x902 x1227))
(assert (x723 x73))
(assert (=> (>= 10000 x1069) (= (x1345 x1069) 0)))
(assert (x592 x826 x1028))
(assert (=> (>= 10000 x386) (= 0 (x1345 x386))))
(assert (not (x1205 (x1092 x710 x1069 x1256 x829 x29 x1166))))
(assert (x902 x748))
(assert (x902 x71))
(assert (x902 x492))
(assert (x463 x626))
(assert (x780 x1278))
(assert (= (and x918 x637) x466))
(assert (x902 x1180))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x962 x1004 x475 x1269 x492 x1189 x349 x1316)))
(assert (x902 x998))
(assert (x902 x815))
(assert (< 10000 (x681 32 x661)))
(assert (x902 x520))
(assert (x902 x5))
(assert (x902 x1209))
(assert (x902 x898))
(assert (x902 x1021))
(assert (x902 x1008))
(assert (= x492 (x980 (x962 x1004 x475 x1269 x492 x1189 x349 x1316))))
(assert (x902 x648))
(assert (x902 x421))
(assert (> (x681 32 x976) 10000))
(assert (x902 x640))
(assert (x902 x1280))
(assert (x902 x509))
(assert (= 114221746417031484496905892821793293822878436923706878644384133060206014517163 (x847 (x1336 64 114221746417031484496905892821793293822878436923706878644384133060206014517163 1))))
(assert (= (x1345 (x1092 x979 x127 x231 x1280 x1186 x825)) (x1092 x979 x127 x231 x1280 x1186 x825)))
(assert (x902 x662))
(assert (> (x1336 x1004 x881 x1001) 10000))
(assert (= x477 (=> (and x1283 (and (= x1283 (not (< x168 x1018))) (= x168 (+ x804 1)))) x1024)))
(assert (= x1217 (and (not x713) x1062)))
(assert (= (and x922 x295) x56))
(assert (= x535 (and x1056 x1010)))
(assert (= (x847 (x1092 x979 x127 x231 x1280 x1186 x825)) x127))
(assert (= (x59 (x1336 64 71998914331801701415977457805802827292338598818749192222732755537001613711014 6)) 6))
(assert (=> (<= x530 10000) (= 0 (x1345 x530))))
(assert (x1080 x1224))
(assert (= (x980 (x962 x979 x1025 x1212 x591 x266 x1326 x1273)) x591))
(assert (not (x1205 (x239 x979 x312 x488 x1233))))
(assert (x902 x507))
(assert (= (x59 (x906 x1004 x1106 x954 x603 x912 x274 x800 x245)) x954))
(assert (x902 x1059))
(assert (x902 x73))
(assert (=> (<= x1349 10000) (= 0 (x1345 x1349))))
(assert (x902 x1206))
(assert (x902 x865))
(assert (= x236 (or x88 x94)))
(assert (x902 x46))
(assert (x902 x693))
(assert (= (x1336 x1004 x881 x1001) (x1345 (x1336 x1004 x881 x1001))))
(assert (= x353 (and (not x992) x107)))
(assert (= (and x367 x1243) x1359))
(assert (not (x1205 (x906 x979 x1319 x1349 x123 x1364 x659 x1037 x761))))
(assert (=> (<= x74 10000) (= (x1345 x74) 0)))
(assert (= 3 (x59 (x1336 64 x736 3))))
(assert (x902 x177))
(assert (= x1269 (x59 (x962 x1004 x475 x1269 x492 x1189 x349 x1316))))
(assert (= 32 (x810 (x681 32 x661))))
(assert (x902 x206))
(assert (x902 x871))
(assert (x463 2))
(assert (= x762 (and x290 x108)))
(assert (x902 x230))
(assert (=> (<= x1106 10000) (= 0 (x1345 x1106))))
(assert (x902 x836))
(assert (x902 x1114))
(assert (x902 x300))
(assert (= (x810 (x906 x845 x600 x1118 x999 x585 x948 x738 x386)) x845))
(assert (x902 x484))
(assert (x902 x1162))
(assert (x902 x1287))
(assert (and (= (x1211 27 3) 81) (= (x1211 3 3) 9) (= 27 (x1211 9 3)) (= (x1211 9 9) 81)))
(assert (x902 x1067))
(assert (x902 x360))
(assert (not (x1205 (x843 0))))
(assert (x1205 170141183460469231731687303715884105727))
(assert (x902 x771))
(assert (= (x962 x979 x1025 x1212 x591 x266 x1326 x1273) (x1345 (x962 x979 x1025 x1212 x591 x266 x1326 x1273))))
(assert (not (x1205 (x681 32 x1119))))
(assert (= (and x1044 x579) x955))
(assert (x902 x754))
(assert (=> (<= x798 10000) (= (x1345 x798) 0)))
(assert (x902 x258))
(assert (x902 x1052))
(assert (x902 x303))
(assert (= x1069 (x847 (x1092 x710 x1069 x1256 x829 x29 x1166))))
(assert (= (or x542 x157) x1010))
(assert (not (x1205 (x1092 x1004 x142 x30 x222 x605 x446))))
(assert (x902 x1025))
(assert (x902 x1275))
(assert (< (x1092 x845 x925 x1306 x1082 x622 x1035) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x902 x722))
(assert (= (x1345 71998914331801701415977457805802827292338598818749192222732755537001613711014) 0))
(assert (x1215 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x933 2 x561)))
(assert (x902 x669))
(check-sat)
(exit)
