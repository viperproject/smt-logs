(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Certora
Generated on: 2024-04-10
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x108 (Int) Int)
(declare-fun x439 () Bool)
(declare-fun x523 () Int)
(declare-fun x383 () Int)
(declare-fun x25 () Int)
(declare-fun x229 () Bool)
(declare-fun x377 () Int)
(declare-fun x220 (Int) Int)
(declare-fun x404 () Bool)
(declare-fun x311 () Int)
(declare-fun x463 (Int Int Int) Int)
(declare-fun x13 () Bool)
(declare-fun x135 (Int Int) Int)
(declare-fun x474 () Bool)
(declare-fun x389 () Bool)
(declare-fun x517 () Int)
(declare-fun x39 () Int)
(declare-fun x50 () Int)
(declare-fun x325 () Int)
(declare-fun x465 () Int)
(declare-fun x188 () Int)
(declare-fun x89 () Bool)
(declare-fun x542 () Int)
(declare-fun x479 () Int)
(declare-fun x480 () Int)
(declare-fun x340 () Int)
(declare-fun x492 () Bool)
(declare-fun x352 (Int) Int)
(declare-fun x132 () Int)
(declare-fun x322 () Bool)
(declare-fun x274 () Int)
(declare-fun x180 () Int)
(declare-fun x6 () Int)
(declare-fun x332 () Int)
(declare-fun x434 () Bool)
(declare-fun x184 () Bool)
(declare-fun x87 () Int)
(declare-fun x549 () Bool)
(declare-fun x14 () Int)
(declare-fun x368 (Int) Int)
(declare-fun x537 () Bool)
(declare-fun x217 () Int)
(declare-fun x257 () Bool)
(declare-fun x21 (Int) Int)
(declare-fun x427 () Bool)
(declare-fun x19 (Int Int) Int)
(declare-fun x375 () Int)
(declare-fun x139 () Int)
(declare-fun x485 () Int)
(declare-fun x494 (Int) Int)
(declare-fun x454 () Int)
(declare-fun x212 () Int)
(declare-fun x254 () Bool)
(declare-fun x35 () Bool)
(declare-fun x140 () Bool)
(declare-fun x382 () Int)
(declare-fun x293 () Int)
(declare-fun x4 () Bool)
(declare-fun x334 () Bool)
(declare-fun x351 () Bool)
(declare-fun x76 () Int)
(declare-fun x32 () Bool)
(declare-fun x7 () Int)
(declare-fun x302 () Int)
(declare-fun x429 () Int)
(declare-fun x226 () Int)
(declare-fun x95 () Int)
(declare-fun x41 () Int)
(declare-fun x182 () Bool)
(declare-fun x445 () Bool)
(declare-fun x157 () Bool)
(declare-fun x500 () Bool)
(declare-fun x358 () Int)
(declare-fun x77 () Bool)
(declare-fun x529 () Int)
(declare-fun x527 () Int)
(declare-fun x100 () Bool)
(declare-fun x81 () Int)
(declare-fun x262 () Bool)
(declare-fun x244 () Int)
(declare-fun x502 () Bool)
(declare-fun x210 () Int)
(declare-fun x163 () Bool)
(declare-fun x402 () Bool)
(declare-fun x286 () Int)
(declare-fun x9 () Bool)
(declare-fun x330 () Bool)
(declare-fun x148 () Bool)
(declare-fun x531 () Bool)
(declare-fun x546 () Bool)
(declare-fun x59 () Bool)
(declare-fun x91 () Int)
(declare-fun x461 () Int)
(declare-fun x290 (Int) Int)
(declare-fun x435 () Int)
(declare-fun x308 () Bool)
(declare-fun x350 () Bool)
(declare-fun x228 (Int) Int)
(declare-fun x75 () Int)
(declare-fun x292 () Int)
(declare-fun x225 (Int Int) Int)
(declare-fun x82 () Int)
(declare-fun x5 () Bool)
(declare-fun x536 (Int Int) Int)
(declare-fun x246 () Int)
(declare-fun x177 (Int) Int)
(declare-fun x74 () Int)
(declare-fun x437 () Int)
(declare-fun x304 () Int)
(declare-fun x267 () Bool)
(declare-fun x447 () Int)
(declare-fun x511 () Bool)
(declare-fun x385 () Int)
(declare-fun x166 () Int)
(declare-fun x419 () Int)
(declare-fun x45 () Bool)
(declare-fun x363 () Int)
(declare-fun x534 () Int)
(declare-fun x364 () Int)
(declare-fun x478 () Bool)
(declare-fun x400 () Bool)
(declare-fun x57 () Int)
(declare-fun x438 () Bool)
(declare-fun x176 () Bool)
(declare-fun x215 () Bool)
(declare-fun x11 () Bool)
(declare-fun x441 () Bool)
(declare-fun x44 () Int)
(declare-fun x543 () Int)
(declare-fun x314 () Int)
(declare-fun x410 () Int)
(declare-fun x354 () Int)
(declare-fun x331 () Bool)
(declare-fun x374 () Int)
(declare-fun x468 () Bool)
(declare-fun x471 () Int)
(declare-fun x233 () Bool)
(declare-fun x533 () Bool)
(declare-fun x119 () Int)
(declare-fun x355 () Int)
(declare-fun x319 () Int)
(declare-fun x261 () Bool)
(declare-fun x430 (Int Int) Int)
(declare-fun x137 () Int)
(declare-fun x544 () Int)
(declare-fun x296 () Bool)
(declare-fun x470 () Int)
(declare-fun x323 () Bool)
(declare-fun x115 (Int) Bool)
(declare-fun x224 () Int)
(declare-fun x309 () Int)
(declare-fun x56 () Int)
(declare-fun x128 (Int) Int)
(declare-fun x535 () Bool)
(declare-fun x242 () Int)
(declare-fun x317 () Bool)
(declare-fun x426 () Int)
(declare-fun x149 () Bool)
(declare-fun x147 () Int)
(declare-fun x398 () Int)
(declare-fun x328 () Int)
(declare-fun x250 () Int)
(declare-fun x336 () Int)
(declare-fun x199 () Bool)
(declare-fun x178 () Int)
(declare-fun x126 () Int)
(declare-fun x27 () Int)
(declare-fun x216 () Int)
(declare-fun x193 () Int)
(declare-fun x189 () Int)
(declare-fun x170 () Bool)
(declare-fun x493 () Bool)
(declare-fun x30 () Bool)
(declare-fun x318 () Bool)
(declare-fun x469 (Int) Int)
(declare-fun x131 () Bool)
(declare-fun x138 () Bool)
(declare-fun x231 () Int)
(declare-fun x85 () Int)
(declare-fun x280 () Bool)
(declare-fun x462 () Bool)
(declare-fun x285 () Int)
(declare-fun x152 () Bool)
(declare-fun x329 () Bool)
(declare-fun x370 () Int)
(declare-fun x218 () Int)
(declare-fun x83 () Int)
(declare-fun x518 () Int)
(declare-fun x168 () Int)
(declare-fun x222 () Int)
(declare-fun x185 () Int)
(declare-fun x450 () Int)
(declare-fun x24 () Int)
(declare-fun x97 () Int)
(declare-fun x287 () Bool)
(declare-fun x93 () Int)
(declare-fun x169 () Bool)
(declare-fun x17 () Int)
(declare-fun x344 () Bool)
(declare-fun x269 () Bool)
(declare-fun x333 () Int)
(declare-fun x255 () Bool)
(declare-fun x271 () Int)
(declare-fun x453 () Bool)
(declare-fun x452 () Int)
(declare-fun x444 () Int)
(declare-fun x433 () Int)
(declare-fun x487 () Bool)
(declare-fun x125 () Bool)
(declare-fun x337 () Int)
(declare-fun x120 () Bool)
(declare-fun x66 () Int)
(declare-fun x167 () Bool)
(declare-fun x343 () Bool)
(declare-fun x497 () Int)
(declare-fun x538 () Int)
(declare-fun x40 () Bool)
(declare-fun x291 () Int)
(declare-fun x175 () Bool)
(declare-fun x10 () Bool)
(declare-fun x202 () Int)
(declare-fun x133 () Int)
(declare-fun x519 () Int)
(declare-fun x239 () Int)
(declare-fun x111 (Int Int) Int)
(declare-fun x144 () Bool)
(declare-fun x432 () Int)
(declare-fun x37 () Bool)
(declare-fun x36 () Int)
(declare-fun x129 () Int)
(declare-fun x155 () Bool)
(declare-fun x397 () Int)
(declare-fun x213 () Int)
(declare-fun x207 () Bool)
(declare-fun x47 () Int)
(declare-fun x508 () Int)
(declare-fun x192 () Int)
(declare-fun x466 () Bool)
(declare-fun x46 () Bool)
(declare-fun x282 (Int) Int)
(declare-fun x194 () Bool)
(declare-fun x103 () Int)
(declare-fun x99 () Int)
(declare-fun x395 () Bool)
(declare-fun x512 () Int)
(declare-fun x381 () Int)
(declare-fun x1 () Int)
(declare-fun x442 () Bool)
(declare-fun x112 () Int)
(declare-fun x173 () Int)
(declare-fun x272 () Bool)
(declare-fun x174 () Int)
(declare-fun x550 () Bool)
(declare-fun x65 () Int)
(declare-fun x388 () Int)
(declare-fun x298 () Int)
(declare-fun x123 () Int)
(declare-fun x249 () Int)
(declare-fun x235 () Int)
(declare-fun x522 () Int)
(declare-fun x209 () Int)
(declare-fun x540 () Int)
(declare-fun x348 () Bool)
(declare-fun x349 () Int)
(declare-fun x70 () Bool)
(declare-fun x55 () Int)
(declare-fun x54 () Bool)
(declare-fun x489 () Bool)
(declare-fun x386 () Bool)
(declare-fun x403 () Bool)
(declare-fun x528 (Int) Int)
(declare-fun x422 () Bool)
(declare-fun x219 () Int)
(declare-fun x401 () Bool)
(declare-fun x208 () Bool)
(declare-fun x491 () Int)
(declare-fun x458 () Bool)
(declare-fun x277 () Bool)
(declare-fun x191 () Bool)
(declare-fun x33 () Bool)
(declare-fun x52 () Int)
(declare-fun x376 () Bool)
(declare-fun x241 () Bool)
(declare-fun x107 () Bool)
(declare-fun x263 () Int)
(declare-fun x475 () Int)
(declare-fun x514 () Int)
(declare-fun x372 () Int)
(declare-fun x353 () Bool)
(declare-fun x473 () Int)
(declare-fun x259 () Bool)
(declare-fun x460 () Int)
(declare-fun x92 () Bool)
(declare-fun x28 () Bool)
(declare-fun x268 () Int)
(declare-fun x122 () Int)
(declare-fun x417 () Int)
(declare-fun x420 () Int)
(declare-fun x51 () Int)
(declare-fun x3 () Int)
(declare-fun x198 () Bool)
(declare-fun x407 () Bool)
(declare-fun x221 () Int)
(declare-fun x306 (Int) Int)
(declare-fun x158 () Int)
(declare-fun x172 () Bool)
(declare-fun x418 () Int)
(declare-fun x539 () Bool)
(declare-fun x146 () Bool)
(declare-fun x496 () Int)
(declare-fun x483 () Int)
(declare-fun x530 () Int)
(declare-fun x110 () Bool)
(declare-fun x284 () Int)
(declare-fun x324 () Bool)
(declare-fun x141 () Int)
(declare-fun x256 () Int)
(declare-fun x456 () Int)
(declare-fun x405 () Int)
(declare-fun x408 () Int)
(declare-fun x449 () Bool)
(declare-fun x547 () Bool)
(declare-fun x164 () Int)
(declare-fun x181 () Bool)
(declare-fun x506 () Bool)
(declare-fun x150 () Int)
(declare-fun x467 (Int Int) Int)
(declare-fun x504 () Int)
(declare-fun x245 () Int)
(declare-fun x121 () Int)
(declare-fun x143 () Int)
(declare-fun x63 () Int)
(declare-fun x159 () Bool)
(declare-fun x98 () Int)
(declare-fun x303 () Int)
(declare-fun x428 (Int Int) Int)
(declare-fun x316 () Bool)
(declare-fun x294 () Bool)
(declare-fun x243 () Int)
(declare-fun x187 () Bool)
(declare-fun x31 () Int)
(declare-fun x22 () Int)
(declare-fun x327 () Bool)
(declare-fun x206 () Int)
(declare-fun x232 (Int) Int)
(declare-fun x124 () Int)
(declare-fun x526 () Int)
(declare-fun x190 () Bool)
(declare-fun x288 () Int)
(declare-fun x165 () Bool)
(declare-fun x278 () Bool)
(declare-fun x335 () Int)
(declare-fun x234 () Bool)
(declare-fun x390 (Int) Int)
(declare-fun x431 () Int)
(declare-fun x515 () Bool)
(declare-fun x279 () Int)
(declare-fun x161 () Int)
(declare-fun x117 () Bool)
(declare-fun x134 () Bool)
(declare-fun x136 () Int)
(declare-fun x326 () Int)
(declare-fun x464 (Int) Int)
(declare-fun x53 (Int Int) Int)
(declare-fun x102 () Int)
(declare-fun x171 () Bool)
(declare-fun x71 () Int)
(declare-fun x396 () Bool)
(declare-fun x127 () Int)
(declare-fun x338 () Bool)
(declare-fun x347 () Int)
(declare-fun x446 () Bool)
(declare-fun x414 (Int) Int)
(declare-fun x48 () Bool)
(declare-fun x211 () Int)
(declare-fun x312 () Int)
(declare-fun x283 () Int)
(declare-fun x160 () Bool)
(declare-fun x186 (Int) Int)
(declare-fun x412 () Int)
(declare-fun x203 () Bool)
(declare-fun x424 () Int)
(declare-fun x509 () Bool)
(declare-fun x436 () Bool)
(declare-fun x498 () Int)
(declare-fun x448 () Bool)
(declare-fun x406 () Int)
(declare-fun x205 () Bool)
(declare-fun x227 () Bool)
(declare-fun x240 () Bool)
(declare-fun x67 () Int)
(declare-fun x214 () Bool)
(declare-fun x391 () Bool)
(declare-fun x393 () Int)
(declare-fun x300 () Int)
(declare-fun x88 () Int)
(declare-fun x270 () Bool)
(declare-fun x510 () Int)
(declare-fun x145 () Bool)
(declare-fun x341 () Int)
(declare-fun x371 () Int)
(declare-fun x477 () Int)
(declare-fun x156 () Bool)
(declare-fun x411 () Int)
(declare-fun x299 () Int)
(declare-fun x260 () Int)
(declare-fun x339 () Int)
(declare-fun x443 () Int)
(declare-fun x204 () Int)
(declare-fun x365 () Int)
(declare-fun x366 () Bool)
(declare-fun x399 () Bool)
(declare-fun x15 () Int)
(declare-fun x541 () Int)
(declare-fun x73 () Int)
(declare-fun x130 () Bool)
(declare-fun x305 (Int) Int)
(declare-fun x380 () Bool)
(declare-fun x58 () Bool)
(declare-fun x38 () Bool)
(declare-fun x481 () Int)
(declare-fun x18 () Bool)
(declare-fun x521 () Int)
(declare-fun x72 () Int)
(declare-fun x367 () Int)
(declare-fun x80 () Bool)
(declare-fun x488 () Int)
(declare-fun x236 () Int)
(declare-fun x96 () Int)
(declare-fun x551 () Int)
(declare-fun x455 () Int)
(declare-fun x490 () Int)
(declare-fun x416 () Int)
(declare-fun x425 () Bool)
(declare-fun x440 () Bool)
(declare-fun x266 () Bool)
(define-fun x29 ((x342 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x342) (>= x342 0)) x342 (- x342 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x247 ((x342 Int)) Int (ite (and (< x342 0) (>= x342 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x342 115792089237316195423570985008687907853269984665640564039457584007913129639936) x342))
(define-fun x421 ((x342 Int)) Int (ite (and (>= x342 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x342)) x342 (ite (and (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 x342) (> 231584178474632390847141970017375815706539969331281128078915168015826259279872 x342)) (- x342 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (>= x342 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (< x342 0)) (+ x342 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x536 x342 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x415 ((x183 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x183) (<= 0 x183)))
(define-fun x105 ((x183 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x183) (>= x183 0)))
(define-fun x195 ((x183 Int) (x495 Int)) Bool (= (x225 x495 x183) (x225 x183 x495)))
(define-fun x378 ((x183 Int) (x495 Int)) Bool (and (=> (and (> x495 0) (< x183 0)) (> 0 (x225 x183 x495))) (=> (and (> 0 x495) (> x183 0)) (> 0 (x225 x183 x495))) (=> (and (< 0 x495) (< 0 x183)) (> (x225 x183 x495) 0)) (=> (and (< x495 0) (> 0 x183)) (< 0 (x225 x183 x495)))))
(define-fun x34 ((x183 Int) (x495 Int)) Bool (=> (and (> x495 0) (> x183 0)) (= (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x225 x183 x495)) (= x495 (x428 (x421 (x225 x183 x495)) x183)))))
(define-fun x12 ((x183 Int) (x495 Int)) Bool (=> (and (not (= x495 0)) (not (= 0 x183))) (and (= x495 (x428 (x225 x183 x495) x183)) (= x183 (x428 (x225 x183 x495) x495)))))
(define-fun x297 ((x183 Int) (x495 Int)) Bool (=> (and (< 0 x495) (> x183 0)) (= (< 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x225 x183 x495)) (< (x428 115792089237316195423570985008687907853269984665640564039457584007913129639935 x183) x495))))
(define-fun x2 ((x183 Int) (x495 Int)) Bool (and (= (x421 (x225 x183 x495)) (x421 (x225 (- x183 115792089237316195423570985008687907853269984665640564039457584007913129639936) x495))) (= (x421 (x225 x183 x495)) (x421 (x225 x183 (- x495 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x421 (x225 x183 x495)) (x421 (x225 (- x183 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x495 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))
(define-fun x501 ((x183 Int) (x495 Int)) Bool (and (=> (and (and (<= x183 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 0 x183)) (and (> x495 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x495))) (= (>= (x428 57896044618658097711785492504343953926634992332820282019728792003956564819968 x183) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x495)) (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x225 x183 (- x495 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (=> (and (and (> x495 0) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x495)) (and (> x183 0) (<= x183 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (<= (x225 x183 x495) 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= (x428 57896044618658097711785492504343953926634992332820282019728792003956564819967 x495) x183))) (=> (and (and (<= x495 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x495)) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x183) (<= x183 115792089237316195423570985008687907853269984665640564039457584007913129639935))) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x225 (- x183 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x495 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (>= (x428 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x495)) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x183)))) (=> (and (and (> x495 0) (<= x495 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (> x183 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x183 115792089237316195423570985008687907853269984665640564039457584007913129639935))) (= (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x225 (- x183 115792089237316195423570985008687907853269984665640564039457584007913129639936) x495)) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x183) (x428 57896044618658097711785492504343953926634992332820282019728792003956564819968 x495))))))
(define-fun x162 ((x183 Int) (x495 Int)) Bool (and (x378 x183 x495) (x195 x183 x495) (x297 x183 x495) (x501 x183 x495) (x34 x183 x495) (x12 x183 x495) (x2 x183 x495)))
(define-fun x548 ((x183 Int)) Bool (and (= (x225 x183 0) 0) (= (x225 0 x183) 0)))
(define-fun x86 ((x183 Int)) Bool (and (= (x225 1 x183) x183) (= (x225 x183 1) x183)))
(define-fun x26 ((x183 Int)) Bool (and (x86 x183) (x548 x183)))
(define-fun x196 ((x183 Int)) Bool (and (= x183 (x111 115792089237316195423570985008687907853269984665640564039457584007913129639935 x183)) (= x183 (x111 x183 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x90 ((x183 Int)) Bool (and (= 0 (x111 x183 0)) (= 0 (x111 0 x183))))
(define-fun x362 ((x183 Int)) Bool (= (x111 x183 x183) x183))
(define-fun x307 ((x183 Int)) Bool (and (x196 x183) (x90 x183) (x362 x183)))
(define-fun x68 ((x183 Int) (x495 Int)) Bool (= (x111 x183 x495) (x111 x495 x183)))
(define-fun x114 ((x183 Int) (x495 Int)) Bool (and (=> (<= 0 x495) (>= x495 (x111 x183 x495))) (>= (x111 x183 x495) 0) (=> (<= 0 x183) (>= x183 (x111 x183 x495)))))
(define-fun x516 ((x183 Int) (x495 Int)) Bool (and (x114 x183 x495) (x68 x183 x495)))
(define-fun x387 ((x183 Int)) Bool (= (x536 x183 32) (x111 x183 31)))
(define-fun x79 ((x183 Int)) Bool (and (x516 x183 31) (x387 x183)))
(define-fun x369 ((x183 Int) (x495 Int)) Bool (and (> x495 (x536 x183 x495)) (>= (x536 x183 x495) 0)))
(define-fun x451 ((x183 Int) (x495 Int)) Bool (=> (and (<= 0 x183) (< 0 x495)) (= (= x183 (x536 x183 x495)) (> x495 x183))))
(define-fun x320 ((x183 Int) (x495 Int)) Bool (=> (and (> x495 0) (and (<= x495 x183) (< x183 (+ x495 x495)))) (= (x536 x183 x495) (- x183 x495))))
(define-fun x379 ((x183 Int) (x495 Int)) Bool (=> (< 0 x495) (= x183 (+ (x536 x183 x495) (* (x428 x183 x495) x495)))))
(define-fun x238 ((x183 Int) (x495 Int)) Bool (and (x369 x183 x495) (x451 x183 x495) (x379 x183 x495) (x320 x183 x495)))
(define-fun x321 ((x183 Int)) Bool (= (x536 0 x183) 0))
(define-fun x275 ((x183 Int)) Bool (= 0 (x536 x183 1)))
(define-fun x8 ((x183 Int)) Bool (= 0 (x536 x183 x183)))
(define-fun x505 ((x183 Int)) Bool (and (x275 x183) (x321 x183) (x8 x183)))
(define-fun x513 ((x183 Int) (x495 Int)) Bool (= (* x495 x183) (x225 x183 x495)))
(define-fun x64 ((x183 Int) (x495 Int)) Bool (and (= (x225 (- x183 115792089237316195423570985008687907853269984665640564039457584007913129639936) x495) (- (* x495 x183) (* x495 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x225 (- x183 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x495 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* x183 (- x495 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x495 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (* (- x495 115792089237316195423570985008687907853269984665640564039457584007913129639936) x183) (x225 x183 (- x495 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x16 ((x183 Int) (x495 Int)) Bool (and (x12 x183 x495) (x64 x183 x495) (x297 x183 x495) (x2 x183 x495) (x34 x183 x495) (x501 x183 x495) (x513 x183 x495)))
(define-fun x62 ((x183 Int) (x495 Int)) Bool (=> (and (> x495 0) (> x183 0)) (and (>= (x428 x183 x495) 0) (<= (x428 x183 x495) x183))))
(define-fun x230 ((x183 Int) (x495 Int)) Bool (=> (and (and (< x183 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x183 0)) (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x495) (>= x495 1))) (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x428 x183 x495)) (>= (x428 x183 x495) 0))))
(define-fun x118 ((x183 Int) (x495 Int)) Bool (=> (and (> x183 x495) (> x495 1)) (< (x428 x183 x495) x183)))
(define-fun x248 ((x183 Int) (x495 Int)) Bool (=> (and (< 0 x495) (< 0 x183)) (= (< x183 x495) (= 0 (x428 x183 x495)))))
(define-fun x200 ((x183 Int) (x495 Int)) Bool (=> (and (< 0 x183) (< 0 x495)) (and (>= x183 (x225 (x428 x183 x495) x495)) (< (- x183 x495) (x225 (x428 x183 x495) x495)))))
(define-fun x113 ((x183 Int) (x495 Int)) Bool (and (x118 x183 x495) (x200 x183 x495) (x230 x183 x495) (x62 x183 x495) (x248 x183 x495)))
(define-fun x23 ((x183 Int)) Bool (= (x428 0 x183) 0))
(define-fun x295 ((x183 Int)) Bool (= x183 (x428 x183 1)))
(define-fun x84 ((x183 Int)) Bool (=> (not (= x183 0)) (= (x428 x183 x183) 1)))
(define-fun x153 ((x183 Int)) Bool (and (x84 x183) (x23 x183) (x295 x183)))
(define-fun x524 ((x183 Int)) Bool (and (= (x53 x183 115792089237316195423570985008687907853269984665640564039457584007913129639935) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x53 115792089237316195423570985008687907853269984665640564039457584007913129639935 x183) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(define-fun x345 ((x183 Int)) Bool (and (= x183 (x53 x183 0)) (= x183 (x53 0 x183))))
(define-fun x357 ((x183 Int)) Bool (= x183 (x53 x183 x183)))
(define-fun x94 ((x183 Int)) Bool (and (x524 x183) (x357 x183) (x345 x183)))
(define-fun x361 ((x183 Int) (x495 Int)) Bool (= (x53 x495 x183) (x53 x183 x495)))
(define-fun x276 ((x183 Int) (x495 Int)) Bool (and (=> (<= 0 x183) (<= x183 (x53 x183 x495))) (>= (+ x183 x495) (x53 x183 x495)) (=> (>= x495 0) (<= x495 (x53 x183 x495)))))
(define-fun x60 ((x183 Int) (x495 Int)) Bool (and (x361 x183 x495) (x276 x183 x495)))
(define-fun x457 ((x183 Int) (x495 Int)) Bool (=> (and (< 0 x495) (< 0 x183)) (and (< (- x183 x495) (* (x428 x183 x495) x495)) (<= (* x495 (x428 x183 x495)) x183))))
(define-fun x151 ((x183 Int) (x495 Int)) Bool (= (* (x428 x183 x495) x495) (- x183 (x111 (- x495 1) x183))))
(define-fun x373 ((x183 Int) (x495 Int)) Bool (and (x248 x183 x495) (x230 x183 x495) (x151 x183 x495) (x457 x183 x495) (x118 x183 x495) (x62 x183 x495)))
(define-fun x486 ((x183 Int)) Bool (= (x111 x183 1) (x536 x183 2)))
(define-fun x101 ((x183 Int)) Bool (and (x486 x183) (x516 x183 1)))
(define-fun x258 ((x183 Int)) Bool (= (x536 x183 128) (x111 x183 127)))
(define-fun x281 ((x183 Int)) Bool (and (x258 x183) (x516 x183 127)))
(define-fun x409 ((x43 Int)) Int 0)
(define-fun x109 ((x43 Int)) Int 0)
(define-fun x42 ((x43 Int)) Int 0)
(define-fun x289 ((x43 Int)) Int 0)
(define-fun x545 ((x43 Int)) Int 0)
(define-fun x423 ((x43 Int)) Int 0)
(define-fun x223 ((x43 Int)) Int 0)
(define-fun x78 ((x43 Int)) Int 0)
(define-fun x507 ((x43 Int)) Int 0)
(define-fun x253 ((x43 Int)) Int 0)
(define-fun x315 ((x43 Int)) Int 0)
(define-fun x264 ((x43 Int)) Int (ite (< x43 x510) (x494 x43) 0))
(define-fun x116 ((x43 Int)) Int (ite (and (> x510 x43) (<= 0 x43)) (x414 x43) (x264 x43)))
(define-fun x237 ((x43 Int)) Int (ite (= x6 x43) x121 (x390 x43)))
(define-fun x499 ((x43 Int)) Int (ite (= x43 x529) x137 (x237 x43)))
(define-fun x346 ((x43 Int)) Int (ite (= x43 128) 13 (x545 x43)))
(define-fun x252 ((x43 Int)) Int (ite (= x43 160) 39553310892875263560936207548857176834471854732421237974622739861269930573824 (x42 x43)))
(define-fun x142 ((x43 Int)) Int (ite (= 192 x43) 4 (x109 x43)))
(define-fun x301 ((x43 Int)) Int (ite (= 224 x43) 39473711962023174749424659199615060097653232135126263878786656434573155500032 (x409 x43)))
(define-fun x476 ((x43 Int)) Int (ite (= x43 256) 72464927124685711895252664195178772226123872012682517813167109100718830649344 (x507 x43)))
(define-fun x472 ((x43 Int)) Int (ite (and (> 288 x43) (>= x43 256)) (x352 (- x43 256)) (x476 x43)))
(define-fun x69 ((x43 Int)) Int 0)
(define-fun x154 ((x43 Int)) Int 0)
(define-fun x359 ((x43 Int)) Int (ite (= x43 x540) 0 (x469 x43)))
(define-fun x360 ((x43 Int)) Int (ite (= x426 x43) 0 (x228 x43)))
(define-fun x197 ((x43 Int)) Int (ite (= x158 x43) 0 (x528 x43)))
(define-fun x104 ((x43 Int)) Int (ite x539 (x469 x43) (x359 x43)))
(define-fun x61 ((x43 Int)) Int (ite x474 (x228 x43) (x360 x43)))
(define-fun x484 ((x43 Int)) Int (ite x269 (x528 x43) (x197 x43)))
(define-fun x384 ((x43 Int)) Int (ite x439 (x469 x43) (ite x539 (x469 x43) (x359 x43))))
(define-fun x482 ((x43 Int)) Int (ite (= x43 320) 22163329580580053030292883849319169862539958002407764210677428189014622470144 (x423 x43)))
(define-fun x356 ((x43 Int)) Int (ite (= x209 x43) x485 (x384 x43)))
(define-fun x20 ((x43 Int)) Int (ite x176 (x228 x43) (ite x474 (x228 x43) (x360 x43))))
(define-fun x49 ((x43 Int)) Int (ite (= x302 x43) x452 (x20 x43)))
(define-fun x106 ((x43 Int)) Int (ite x254 (x528 x43) (ite x269 (x528 x43) (x197 x43))))
(define-fun x313 ((x43 Int)) Int (ite (= x397 x43) x372 (x106 x43)))
(define-fun x525 ((x43 Int)) Int (ite (= 288 x43) 1 (x223 x43)))
(define-fun x251 ((x43 Int)) Int (ite (and (<= 256 x43) (> 288 x43)) (x352 (- x43 256)) (x78 x43)))
(define-fun x310 ((x43 Int)) Int (ite x267 (x472 x43) (x476 x43)))
(define-fun x201 ((x43 Int)) Int (ite (= 352 x43) 34602258808455191227493136189427688107261027562213901346293687426555358216192 (x310 x43)))
(define-fun x532 ((x43 Int)) Int (ite (= 356 x43) x529 (x201 x43)))
(define-fun x413 ((x43 Int)) Int (ite (= x43 388) 0 (x532 x43)))
(define-fun x459 ((x43 Int)) Int (ite (= x43 420) 0 (x413 x43)))
(define-fun x520 ((x43 Int)) Int (ite (= x43 452) 57005 (x459 x43)))
(define-fun x265 ((x43 Int)) Int (ite x277 (x232 x43) (x290 x43)))
(define-fun x179 ((x43 Int)) Int (ite (= x336 x43) x141 (x265 x43)))
(define-fun x503 ((x183 Int) (x495 Int) (x394 Int) (x392 Int)) Bool (=> (and (<= 0 x495) (>= x392 x495) (>= x394 x183) (<= 0 x183)) (>= (x225 x394 x392) (x225 x183 x495))))
(define-fun x273 ((x183 Int) (x495 Int) (x394 Int) (x392 Int)) Bool (=> (= x394 x183) (= (- (x225 x183 x495) (x225 x394 x392)) (x225 x183 (- x495 x392)))))
(assert (= x165 (or x240 x54)))
(assert (= (x220 (x463 64 x246 161)) (x463 64 x246 161)))
(assert (x26 (- x382 x480)))
(assert (x415 x185))
(assert (not (x115 (x430 32 154))))
(assert (x273 x168 x393 x168 x551))
(assert (= (and x13 (not x35)) x215))
(assert (x505 32))
(assert (x415 x355))
(assert (x505 x73))
(assert (x273 x382 x393 x551 x168))
(assert (x415 x490))
(assert (= 159 (x128 (x463 64 x340 159))))
(assert (= x246 (x305 (x463 64 x246 156))))
(assert (x26 (- x382 x551)))
(assert (x415 x375))
(assert (x60 x383 x274))
(assert (x415 x236))
(assert (= (x220 39553310892875263560936207548857176834471854732421237974622739861269930573824) 0))
(assert (not (x115 (x430 32 155))))
(assert (x162 x168 (- x551 x393)))
(assert (x115 34602258808455191227493136189427688107261027562213901346293687426555358216192))
(assert (= (x306 (x463 64 x246 159)) 64))
(assert (x162 x393 (- x168 x393)))
(assert (x415 x193))
(assert (x415 x71))
(assert (x26 (- x168 x382)))
(assert (x162 x382 (- x393 x480)))
(assert (x162 x168 x393))
(assert (x273 x168 x393 x393 x382))
(assert (= (x19 115792089237316195423570985008687907853269984665640564039457584007913129639935 x461) (ite (< x461 256) (x428 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x467 2 x461)) 0)))
(assert (x60 x406 x431))
(assert (x153 x514))
(assert (x415 x87))
(assert (x26 (- x168 x393)))
(assert (x415 x491))
(assert (x273 x382 x393 x382 x480))
(assert (x26 (- x551 x480)))
(assert (not (x115 (x463 64 x246 156))))
(assert (x273 x382 x480 x382 x393))
(assert (= x199 (or x255 x439)))
(assert (= x468 (=> (and (= x380 (not (< x102 x56))) (= x102 (+ x426 1))) (and x380 x70))))
(assert (x162 x382 (- x393 x551)))
(assert (= (ite (> 256 x347) (x428 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x467 2 x347)) 0) (x19 115792089237316195423570985008687907853269984665640564039457584007913129639935 x347)))
(assert (> (x463 64 x246 159) 10000))
(assert (x415 x274))
(assert (x503 x168 x393 x382 x480))
(assert (x281 x527))
(assert (= (x463 64 x340 156) (x220 (x463 64 x340 156))))
(assert (= x11 (or x399 x176)))
(assert (x273 x480 x382 x551 x168))
(assert (x415 x347))
(assert (= (x306 (x463 64 x246 158)) 64))
(assert (= x478 (=> (and (or (not x262) (and (= x381 0) x262)) (and (= x398 (x464 382502381645197248123620639812464696550576095234)) (>= 4294967295 x355) (= (= (x177 382502381645197248123620639812464696550576095234) x206) x403) (= x377 (x499 x529)) (<= 1 x57) (= x206 (x499 382502381645197248123620639812464696550576095234)) x403 x28 (= x28 (>= (x177 x529) x377)) (>= x398 1) (= 352 x538))) x187)))
(assert (= x436 (or x229 x194)))
(assert (x415 x52))
(assert (x307 x119))
(assert (x415 x292))
(assert (= (x305 (x463 64 x246 158)) x246))
(assert (x113 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x467 2 x293)))
(assert (x162 x382 (- x480 x393)))
(assert (= x340 (x305 (x463 64 x340 161))))
(assert (x415 x470))
(assert (x415 x371))
(assert (x415 x309))
(assert (= x120 (or x145 x466)))
(assert (x415 x471))
(assert (x503 x382 x480 x168 x551))
(assert (x307 1))
(assert (x60 x534 x245))
(assert (x238 x522 128))
(assert (= (ite (< x335 256) (x428 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x467 2 x335)) 0) (x19 115792089237316195423570985008687907853269984665640564039457584007913129639935 x335)))
(assert (=> (<= x221 10000) (= (x220 x221) 0)))
(assert (x415 x454))
(assert (x273 x393 x168 x382 x393))
(assert (= (x220 404098525) 0))
(assert (x16 2 x447))
(assert (= x18 (=> (= x324 (> x418 0)) (and (=> (and (not x324) (and (and (= (ite (> x465 0) 1 0) x52) (= (x464 x529) x465) (= (ite x89 1 0) x14) (= x89 (= 0 x52))) (or (and x89 (= 1 x147)) (and (not x89) (= x14 1))))) x156) (=> (and x324 (= x418 1)) x401)))))
(assert (x415 x41))
(assert (x503 x382 x393 x382 x480))
(assert (x105 x521))
(assert (x238 x98 32))
(assert (x115 4294967295))
(assert (x415 x488))
(assert (x505 x212))
(assert (x505 x192))
(assert (x273 x480 x382 x393 x168))
(assert (x94 x431))
(assert (x415 x542))
(assert (= (x430 32 155) (x220 (x430 32 155))))
(assert (x307 x523))
(assert (x273 x393 x168 x168 x551))
(assert (= x172 (=> (and (and (= x400 false) (= x441 false) (= x364 x96) (= false x329) (= x9 (>= x124 x75)) (= x140 false) (= false x533) x9 (= x364 (x414 0))) (and (and (= x137 x260) (= x121 (x390 x6)) (= x456 x6) (= x99 (x464 x529)) (<= x363 127) (= x260 (x237 x529)) (>= 255 x210) (>= x99 1) (>= 127 x363) (= x262 (= x210 0)) (= x207 false) (= x427 false) (= x450 2167012380)) (or (and (not x262) (= (ite x262 1 0) x418)) (and (and (<= x147 255) (= (ite (< x147 1) 1 0) x418)) x262)))) x18)))
(assert (= x205 (and x257 (not x175))))
(assert (x307 x447))
(assert (x94 x274))
(assert (x307 x98))
(assert (x273 x393 x382 x393 x168))
(assert (x153 (x467 2 x416)))
(assert (= x214 (and x100 x262)))
(assert (= 3 (x305 (x430 32 3))))
(assert (x26 (- x480 x168)))
(assert (x162 x551 (- x168 x393)))
(assert (x273 x551 x168 x382 x393))
(assert (x415 x96))
(assert (x415 x534))
(assert (x415 x219))
(assert (x503 x382 x393 x168 x551))
(assert (x415 x133))
(assert (x373 x514 2))
(assert (x273 x393 x168 x382 x480))
(assert (= (x128 (x463 64 x246 158)) 158))
(assert (x162 x168 (- x551 x480)))
(assert (x162 x382 (- x393 x168)))
(assert (< 10000 (x430 32 4)))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x463 64 x340 156)))
(assert (x273 x382 x480 x551 x168))
(assert (x113 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x467 2 x416)))
(assert (= (x19 115792089237316195423570985008687907853269984665640564039457584007913129639935 x433) (ite (< x433 256) (x428 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x467 2 x433)) 0)))
(assert (x162 x480 (- x382 x551)))
(assert (x415 x437))
(assert (x101 x309))
(assert (= (or x449 x215) x100))
(assert (x307 x309))
(assert (x16 8 x349))
(assert (x415 x408))
(assert (x415 x164))
(assert (x162 x168 x551))
(assert (= x340 (x305 (x463 64 x340 159))))
(assert (x415 x465))
(assert (x153 (x467 2 x335)))
(assert (x415 x256))
(assert (x415 x339))
(assert (x16 8 x341))
(assert (x505 x514))
(assert (x307 x544))
(assert (x415 x510))
(assert (x505 x447))
(assert (x415 x239))
(assert (= (x220 x540) (x220 (+ x540 x103))))
(assert (x415 x137))
(assert (x415 x67))
(assert (= x401 (=> (and (or (and (= x210 x288) (not x262)) (and (and (= 1 x123) (= x288 1)) x262)) (= 1 x410)) x203)))
(assert (x415 x522))
(assert (x516 x332 x544))
(assert (= (and x11 x546) x261))
(assert (< (x463 64 x340 158) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x79 x212))
(assert (= (x220 (x430 32 3)) (x430 32 3)))
(assert (< 10000 (x463 64 x246 161)))
(assert (= (x19 115792089237316195423570985008687907853269984665640564039457584007913129639935 x81) (ite (< x81 256) (x428 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x467 2 x81)) 0)))
(assert (x415 x245))
(assert (x503 x382 x393 x168 x393))
(assert (x415 x150))
(assert (x415 x97))
(assert (= 0 (x220 22163329580580053030292883849319169862539958002407764210677428189014622470144)))
(assert (= x434 (or x272 x261)))
(assert (x307 x477))
(assert (x26 (- x393 x480)))
(assert (x26 x382))
(assert (x26 (- x393 x168)))
(assert (=> (>= 10000 x340) (= (x220 x340) 0)))
(assert true)
(assert (x115 382502381645197248123620639812464696550576095234))
(assert (= (x220 115792089237316195423570985008687907853269984665640564039457584007913129639935) 0))
(assert (x153 (+ x51 31)))
(assert (x415 x15))
(assert (x415 x93))
(assert (x415 x319))
(assert (x415 x263))
(assert (x415 x224))
(assert (x26 x212))
(assert (x273 x393 x382 x551 x168))
(assert (x505 x98))
(assert (= x277 (or x267 x190)))
(assert (= x259 (or x110 x269)))
(assert (x162 x393 (- x382 x551)))
(assert (x415 x538))
(assert (= (or x396 x134) x331))
(assert (x415 x3))
(assert (x26 (- x382 x168)))
(assert (x415 x119))
(assert (x153 (+ 31 x405)))
(assert (x415 x173))
(assert (x415 x65))
(assert (x415 x283))
(assert (x238 x447 32))
(assert (= x77 (=> (and (or (and x546 (and (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x19 115792089237316195423570985008687907853269984665640564039457584007913129639935 x347)) x544) (= (* 8 x333) x347) (= x303 (* 2 x73)) (= x452 (x111 x332 x544)) (= (x252 160) x332) (= (x430 32 154) x302) (= (+ x303 1) x136) (= x333 (x111 31 x73)))) (and (and (= x370 (x19 115792089237316195423570985008687907853269984665640564039457584007913129639935 x416)) (= x299 (x111 x97 x479)) (>= x370 1) (= x249 (x29 (+ x299 x25))) (= (* x73 2) x25) (= x479 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x370)) (= (ite (<= x299 1) x249 (x53 x299 x25)) x239) (= (x252 160) x97) (= x416 (* x73 8))) (not x546))) (= (= 1 (ite (> x73 31) 1 0)) x546)) x453)))
(assert (= (or x338 x80) x487))
(assert (> (x463 64 x340 159) 10000))
(assert (x415 x75))
(assert (x273 x382 x393 x480 x382))
(assert (x273 x480 x382 x382 x393))
(assert (x94 x245))
(assert (x162 x382 (- x480 x551)))
(assert (< (x463 64 x246 156) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x94 x299))
(assert (x153 x192))
(assert (= x134 (and x262 x489)))
(assert (< (x463 64 x246 158) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= 64 (x306 (x463 64 x340 156))))
(assert (x273 x393 x382 x168 x393))
(assert (x415 x393))
(assert (x153 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (= (x220 (x463 64 x340 158)) (x463 64 x340 158)))
(assert (= (x305 (x430 32 4)) 4))
(assert (x273 x551 x168 x480 x382))
(assert (= x246 (x305 (x463 64 x246 159))))
(assert (and (= 81 (x225 9 9)) (= 9 (x225 3 3)) (= 27 (x225 9 3)) (= 81 (x225 27 3))))
(assert (x307 x490))
(assert (x415 x17))
(assert (x415 x383))
(assert (x79 x447))
(assert (= (and (not x386) x277) x145))
(assert (x162 x168 (- x551 x382)))
(assert (x503 x480 x382 x382 x393))
(assert (x238 x527 128))
(assert (= (or x266 x205) x489))
(assert (< (x430 32 154) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x105 x542))
(assert (x26 x480))
(assert (= x117 (=> (and (= x543 (+ x540 1)) (= (not (> x74 x543)) x535)) (and x389 x535))))
(assert (x16 8 x333))
(assert (x26 x393))
(assert (x273 x168 x393 x480 x382))
(assert (x415 x498))
(assert (x153 32))
(assert (= (=> (and (= x462 false) (= false x148) (= false x155) (= x549 (>= x471 x126)) (= x233 false)) x549) x46))
(assert (x415 x284))
(assert (x415 x76))
(assert (= (x220 57896044618658097711785492504343953926634992332820282019728792003956564819967) 0))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x463 64 x246 161)))
(assert (x415 x367))
(assert (x415 x335))
(assert (x238 x432 2))
(assert (x503 x551 x168 x382 x393))
(assert (x415 x246))
(assert (x415 x222))
(assert (= x240 (and x262 x317)))
(assert (x415 x88))
(assert (x26 x447))
(assert (x273 x168 x551 x480 x382))
(assert (x415 x406))
(assert (x415 x333))
(assert (x415 x354))
(assert (x26 x551))
(assert (x16 2 x212))
(assert (x273 x382 x480 x168 x393))
(assert (x153 2))
(assert (x415 x514))
(assert (x26 (- x551 x168)))
(assert (= (and x181 x89) x194))
(assert (x505 x36))
(assert (= (x305 (x430 32 154)) 154))
(assert (x238 x73 32))
(assert (x79 x73))
(assert (= 155 (x305 (x430 32 155))))
(assert (= x396 (and (not x262) x489)))
(assert (x101 x192))
(assert (= (x220 39473711962023174749424659199615060097653232135126263878786656434573155500032) 0))
(assert (x415 x377))
(assert (x415 x444))
(assert (x153 x309))
(assert (= x445 (and x376 x511)))
(assert (> (x463 64 x340 158) 10000))
(assert (> (x430 32 155) 10000))
(assert (x415 x85))
(assert (> (x463 64 x246 156) 10000))
(assert (not (x115 (x430 32 3))))
(assert (x307 x358))
(assert (= (x220 34602258808455191227493136189427688107261027562213901346293687426555358216192) 0))
(assert (x162 x551 (- x168 x480)))
(assert (x373 x192 2))
(assert (= (x306 (x430 32 154)) 32))
(assert (x307 x432))
(assert (x115 2167012380))
(assert (x26 (- x480 x551)))
(assert (x415 x311))
(assert (= true x257))
(assert (x516 x444 x541))
(assert (x415 x147))
(assert (x273 x382 x480 x168 x551))
(assert (x415 x429))
(assert (x115 72464927124685711895252664195178772226123872012682517813167109100718830649344))
(assert (= (x306 (x430 32 3)) 32))
(assert (x115 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (x113 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x467 2 x433)))
(assert (x273 x551 x168 x168 x393))
(assert (not (x115 (x463 64 x246 159))))
(assert (x153 (x467 2 x347)))
(assert (x273 x393 x168 x393 x382))
(assert (x415 x337))
(assert (= (and x327 x199) x80))
(assert (< 10000 (x463 64 x340 161)))
(assert (= (x220 (x463 64 x340 159)) (x463 64 x340 159)))
(assert (< (x463 64 x340 161) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x415 x1))
(assert (= x401 x156))
(assert (= (x220 (+ x158 x88)) (x220 x158)))
(assert (x505 x371))
(assert (x503 x393 x382 x382 x480))
(assert (x162 x480 (- x382 x168)))
(assert (x503 x393 x168 x382 x480))
(assert (x113 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x467 2 x22)))
(assert (x115 57005))
(assert (x415 x260))
(assert (x503 x480 x382 x168 x551))
(assert (x16 8 x98))
(assert (x415 x372))
(assert (= x267 (and x438 x165)))
(assert (x238 x371 128))
(assert (x162 x382 (- x480 x168)))
(assert (x307 31))
(assert (x415 x293))
(assert (x307 127))
(assert (x516 x408 x518))
(assert (x105 x429))
(assert (x503 x393 x382 x168 x551))
(assert (x415 x143))
(assert (x415 x431))
(assert (x94 x534))
(assert (= (x306 (x463 64 x340 161)) 64))
(assert (= x181 (and x331 (not x324))))
(assert (= (=> (and (= x375 (x247 (- x284 (mod (ite (> 32 x405) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x428 x192 2) x36) (= x168 0) (= 0 x419) (= x250 0) (= (< 31 x405) x316) (= (x251 256) x382) (or (= 1 x375) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x375)) (= (x346 128) x73) (= x284 (x111 1 x192)) (>= 18446744073709551615 x73) (= (ite (> x284 0) x36 (x111 127 x36)) x405)) (and (=> (and (and (= x298 (x428 (+ x405 31) 32)) (= x56 (+ x298 x426)) (= (> x56 x426) x404) (= (x430 32 154) x426)) x316) (and (=> (not x404) x70) (=> x404 x468))) (=> (not x316) x77))) x322))
(assert (x505 x527))
(assert (x516 x119 x523))
(assert (x273 x393 x168 x480 x382))
(assert (< (x430 32 155) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (=> (>= 10000 x529) (= 0 (x220 x529))))
(assert (x415 x521))
(assert (x273 x551 x168 x382 x480))
(assert (=> (>= 10000 x437) (= 0 (x220 x437))))
(assert (= x255 (or x539 x445)))
(assert (not (x115 (x463 64 x340 159))))
(assert (= 161 (x128 (x463 64 x246 161))))
(assert (x94 x406))
(assert (x415 x303))
(assert (x273 x168 x551 x382 x393))
(assert (x415 x530))
(assert (x26 x168))
(assert (x415 x452))
(assert (x94 x25))
(assert (x415 x443))
(assert (x273 x168 x393 x382 x480))
(assert (x115 39473711962023174749424659199615060097653232135126263878786656434573155500032))
(assert (x415 x450))
(assert (x273 x480 x382 x168 x393))
(assert (x26 x349))
(assert (= (and x366 (not x509)) x269))
(assert (x503 x168 x393 x382 x393))
(assert (= x344 (=> (and (= (not (< x213 x519)) x395) (= x213 (+ 1 x158))) (and x395 x184))))
(assert (x26 (- x393 x551)))
(assert (= (ite (< x293 256) (x428 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x467 2 x293)) 0) (x19 115792089237316195423570985008687907853269984665640564039457584007913129639935 x293)))
(assert (x162 x382 (- x393 x382)))
(assert (x415 x477))
(assert (= x254 (and x434 (not x146))))
(assert (= x190 (and x165 (not x438))))
(assert (x307 x527))
(assert (x238 x212 32))
(assert (x415 x349))
(assert (x415 x416))
(assert (x415 x332))
(assert (= x399 (or x402 x474)))
(assert (x415 x300))
(assert (x415 x14))
(assert (x415 x518))
(assert (x153 (+ 31 x435)))
(assert (x26 (- x551 x393)))
(assert (< 10000 (x430 32 154)))
(assert (x415 x249))
(assert (= (x220 (+ x158 1)) (x220 x158)))
(assert (not (x115 (x430 32 4))))
(assert (x415 x420))
(assert (x415 x124))
(assert (x373 (+ 31 x405) 32))
(assert (x115 39553310892875263560936207548857176834471854732421237974622739861269930573824))
(assert (x415 x405))
(assert (x153 (x467 2 x22)))
(assert (not (x115 (x463 64 x340 161))))
(assert (=> (>= 10000 x6) (= 0 (x220 x6))))
(assert (= x241 (=> (and (and (or (and (not x175) (and (= (x463 64 x246 159) x473) (= x326 x75) (= (x282 x473) x326))) (and (and (<= x508 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x411 (x463 64 x246 158)) (<= x460 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x21 x411) x328) (= x508 x66) (= (x368 x285) x551) (= x530 x460) (>= x460 0) (= (x225 x168 x551) x460) (= (+ x530 x328) x508) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x225 x168 x551)) (= (x463 64 x246 156) x285) (<= 0 x508) (= x75 x66) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x328 x530))) x175)) (and (= x246 x85) (<= x122 127) (>= 2 x164) (= x218 (x464 x529)) (<= x122 127) (= false x159) (= x312 (x463 64 x246 161)) (= x175 (= 0 x164)) (= 1889567281 x83) (>= x218 1) (= x164 (x108 x312)) (= x242 x246) (= false x107))) (and (<= 0 x268) (= x132 (x225 x168 x393)) (>= x7 0) (<= 0 x456) (>= x221 1) (= x337 404098525) (not (= x224 x221)) (= x139 (+ x17 x193)) (<= x304 1461501637330902918203684832716283019655932542975) (= (x464 x529) x24) (= false x5) (<= x166 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x50) (= x10 (> (x464 x529) 0)) (= x417 0) (<= x268 1461501637330902918203684832716283019655932542975) (>= x226 0) (<= x7 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 1 x437) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x243) x30 (= x58 (> (x464 x437) 0)) (not (= x221 x437)) (= 36 x429) (not (= x437 x529)) (not (= x221 x529)) (<= 0 x517) (<= 1 x224) (>= 1461501637330902918203684832716283019655932542975 x271) (>= x50 0) (<= x311 1461501637330902918203684832716283019655932542975) (< (+ x17 x193) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x483) (= false x318) (>= 1461501637330902918203684832716283019655932542975 x44) (>= 1461501637330902918203684832716283019655932542975 x504) (= x493 false) (<= 0 x304) (= x139 x124) (<= x211 127) (>= 1461501637330902918203684832716283019655932542975 x224) (= 0 x55) (<= x517 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x130 false) (= x30 (> (x464 x224) 0)) (>= x385 0) x59 (<= x529 1461501637330902918203684832716283019655932542975) (<= x221 1461501637330902918203684832716283019655932542975) (<= 0 x132) (>= 4294967295 x526) (<= 4 x510) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x510) (>= x314 0) (<= x456 1461501637330902918203684832716283019655932542975) x10 (<= x226 1461501637330902918203684832716283019655932542975) (not (= x224 x529)) (= false x515) (<= 0 x483) (>= 255 x127) (>= x243 0) (= x304 x242) (<= x139 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (= x437 x224)) (<= 1 x24) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x225 x168 x393)) (<= 0 x526) (= x529 x72) (>= x139 0) (>= x529 1) (<= x211 127) (<= 0 x166) (<= x385 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= false x191) (= false x131) (= x59 (< 0 (x464 x221))) (>= 1461501637330902918203684832716283019655932542975 x314) (= x512 2167012380) (= x149 false) (<= x437 1461501637330902918203684832716283019655932542975) (= x4 false) (= x291 4) (= x17 x132) (= false x169) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x132) x58)) x172)))
(assert (x415 x47))
(assert (x415 x235))
(assert (x162 x168 (- x551 x168)))
(assert (x273 x168 x551 x168 x393))
(assert (x373 x309 2))
(assert (x26 (- x382 x393)))
(assert (x415 x541))
(assert (= (and x146 x434) x366))
(assert (x273 x382 x393 x168 x551))
(assert (x162 x393 (- x382 x393)))
(assert (x60 x299 x25))
(assert (= (and x198 x407) x280))
(assert (= (x220 57005) 0))
(assert (x415 x341))
(assert (x415 x435))
(assert (= (x463 64 x246 156) (x220 (x463 64 x246 156))))
(assert (x415 x299))
(assert (x503 x168 x393 x168 x551))
(assert (x415 x189))
(assert (< (x430 32 4) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (and x502 (not x404)) x474))
(assert (= (x305 (x463 64 x340 156)) x340))
(assert (x415 x424))
(assert (x415 x73))
(assert (x415 x24))
(assert (x415 x83))
(assert (= (x220 18446744073709551615) 0))
(assert (x307 x444))
(assert (x415 x504))
(assert (x281 x371))
(assert (x115 22163329580580053030292883849319169862539958002407764210677428189014622470144))
(assert (x415 x250))
(assert (x307 x371))
(assert (x415 x412))
(assert (x415 x180))
(assert (= x317 (or x448 x436)))
(assert (x516 x97 x479))
(assert (x415 x288))
(assert (= x198 (or (and (not x262) x100) x214)))
(assert (x153 (x467 2 x433)))
(assert (= x294 (or x278 x280)))
(assert (x153 x432))
(assert (> (x430 32 3) 10000))
(assert (= 0 (x220 2167012380)))
(assert (x26 x333))
(assert (= (=> (and (= (x247 (- x47 (mod (ite (< x435 32) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x454) (= (> x435 31) x146) (= (ite (> x47 0) x371 (x111 127 x371)) x435) (= (x111 1 x514) x47) (>= 18446744073709551615 x98) (= x98 (x142 192)) (or (= 1 x454) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x454)) (= x371 (x428 x514 2))) (and (=> (and (and (= x509 (> x519 x158)) (= (+ x158 x88) x519) (= (x428 (+ x435 31) 32) x88) (= x158 (x430 32 155))) x146) (and (=> (not x509) x184) (=> x509 x344))) (=> (not x146) x227))) x453))
(assert (= x13 (or x259 x254)))
(assert (= (and (not x546) x11) x272))
(assert (x415 x66))
(assert (x415 x485))
(assert (= (x463 64 x340 161) (x220 (x463 64 x340 161))))
(assert (= x448 (and x324 x331)))
(assert (x415 x126))
(assert (= (x305 (x463 64 x340 158)) x340))
(assert (x505 128))
(assert (x415 x382))
(assert (x415 x51))
(assert (= (and (not x89) x181) x229))
(assert (x415 x218))
(assert (x415 x365))
(assert (x516 x477 x490))
(assert (x415 x374))
(assert (x307 x217))
(assert (x307 x212))
(assert (= (and x199 (not x327)) x338))
(assert (x415 x210))
(assert (x503 x382 x480 x168 x393))
(assert (x113 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x467 2 x347)))
(assert (= 0 (x220 382502381645197248123620639812464696550576095234)))
(assert (= (and x386 x277) x466))
(assert (x307 x408))
(assert (x238 x192 2))
(assert (x415 x192))
(assert (not (x115 (x463 64 x340 158))))
(assert (x415 x27))
(assert (x415 x22))
(assert (= (x306 (x463 64 x340 159)) 64))
(assert (= x246 (x305 (x463 64 x246 161))))
(assert (not (x115 (x463 64 x340 156))))
(assert (x273 x393 x382 x168 x551))
(assert (x273 x382 x480 x393 x382))
(assert (x503 x168 x551 x382 x480))
(assert (x503 x393 x168 x168 x551))
(assert (x26 2))
(assert (= 0 (x220 1461501637330902918203684832716283019655932542975)))
(assert (x16 8 x212))
(assert (x307 x332))
(assert (x162 x393 (- x168 x382)))
(assert (= x266 (and x257 x175)))
(assert (x26 x98))
(assert (x162 x480 (- x382 x393)))
(assert (= x203 (=> (and (or (and (and (= 1 x15) (<= 32 x521) (<= x521 4294967295)) x438) (and (not x438) (= x95 x15))) (and (= 192 x133) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x521) (= x3 128) (= 256 x180) (>= x521 32) (= x438 (> x95 0)))) x422)))
(assert (x415 x479))
(assert (x26 (- x393 x382)))
(assert (x415 x217))
(assert (x273 x168 x551 x393 x382))
(assert (x503 x393 x382 x168 x393))
(assert (x162 x168 (- x393 x168)))
(assert (x94 x383))
(assert (= x278 (and (not x407) x198)))
(assert (x415 x122))
(assert (not (x115 (x463 64 x246 161))))
(assert (x415 x279))
(assert (x415 x418))
(assert (= x502 (and x316 x487)))
(assert (x307 x97))
(assert (x516 x496 x217))
(assert (x26 x325))
(assert (x307 x73))
(assert (= x227 (=> (and (= (= 1 (ite (< 31 x98) 1 0)) x35) (or (and (and (<= 1 x491) (= (* x98 8) x461) (= x143 (ite (>= 1 x534) x279 (x53 x534 x245))) (= (x19 115792089237316195423570985008687907853269984665640564039457584007913129639935 x461) x491) (= (x29 (+ x245 x534)) x279) (= x245 (* 2 x98)) (= (x301 224) x408) (= x534 (x111 x408 x518)) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x491) x518)) (not x35)) (and (and (= x93 (* 2 x98)) (= (+ x93 1) x283) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x19 115792089237316195423570985008687907853269984665640564039457584007913129639935 x22)) x523) (= (x111 31 x98) x325) (= x397 (x430 32 155)) (= (x111 x119 x523) x372) (= (* x325 8) x22) (= (x301 224) x119)) x35))) x478)))
(assert (x113 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x467 2 x461)))
(assert (x415 x161))
(assert (x373 (+ 31 x51) 32))
(assert (x307 x541))
(assert (= (x220 x426) (x220 (+ x426 1))))
(assert (x415 x206))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x463 64 x340 159)))
(assert (x415 x447))
(assert (x415 x523))
(assert (x26 x73))
(assert (x415 x57))
(assert (x273 x480 x382 x168 x551))
(assert (x307 x514))
(assert (x503 x551 x168 x382 x480))
(assert (x153 (x467 2 x293)))
(assert (=> (<= x246 10000) (= 0 (x220 x246))))
(assert (x516 x358 x367))
(assert (x162 x168 (- x393 x480)))
(assert (x415 x286))
(assert (x307 x192))
(assert (= (x220 (x463 64 x246 159)) (x463 64 x246 159)))
(assert (x238 x514 2))
(assert (x415 x103))
(assert (x415 x36))
(assert (x415 x202))
(assert (x503 x168 x551 x168 x393))
(assert (x105 x87))
(assert (= (ite (< x416 256) (x428 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x467 2 x416)) 0) (x19 115792089237316195423570985008687907853269984665640564039457584007913129639935 x416)))
(assert (x415 x551))
(assert (x273 x551 x168 x393 x382))
(assert (= (x306 (x430 32 4)) 32))
(assert (x415 x121))
(assert (x115 57896044618658097711785492504343953926634992332820282019728792003956564819967))
(assert (x415 x141))
(assert (= 64 (x306 (x463 64 x340 158))))
(assert (x415 x419))
(assert (= (x306 (x463 64 x246 156)) 64))
(assert (x273 x168 x393 x551 x168))
(assert (= (=> (and (and (and (= x163 false) (<= x63 127) (= x340 x216) (<= x63 127) (= x443 1889567281) (= x204 x340) (= (x463 64 x340 161) x82) (= (= 0 x129) x407) (>= 2 x129) (= false x48) (= x150 (x464 x529)) (= (x108 x82) x129) (<= 1 x150)) (or (and x407 (and (= x244 x67) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x244) (= (x21 x188) x235) (= x188 (x463 64 x340 158)) (= x126 x488) (= x244 (x225 x382 x480)) (= x39 x488) (>= x39 0) (< (+ x67 x235) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (+ x67 x235) x39) (<= x39 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< (x225 x382 x480) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x480 (x368 x91)) (= x91 (x463 64 x340 156)) (<= 0 x244))) (and (not x407) (and (= x76 (x282 x388)) (= x388 (x463 64 x340 159)) (= x126 x76))))) (and (>= 127 x27) (= false x308) (= x171 false) (>= 127 x27) (<= 0 x455) (= x270 false) (= x304 x204) (= 404098525 x319) (= x222 (x464 x529)) (< (x225 x382 x393) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x391 false) (= x45 false) (= x542 4) (= x1 x174) (= x208 false) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x1 x193)) (= (+ x1 x193) x455) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x455) (= x174 (x225 x382 x393)) (= 36 x87) (<= 1 x222) (= x138 false) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x174) (= false x160) (<= 0 x174) (= x471 x455))) x46) x187))
(assert (= (x128 (x463 64 x340 158)) 158))
(assert (x415 x497))
(assert (= x77 x70))
(assert (= (x128 (x463 64 x246 156)) 156))
(assert (x16 8 x325))
(assert (x415 x544))
(assert (x273 x382 x393 x393 x168))
(assert (x415 x211))
(assert (x505 x522))
(assert (x26 (- x168 x480)))
(assert (x415 x99))
(assert (x16 2 x73))
(assert (x415 x63))
(assert (x162 x393 (- x382 x168)))
(assert (x115 1461501637330902918203684832716283019655932542975))
(assert (and (= 9444732965739290427392 (x467 2 73)) (= 348449143727040986586495598010130648530944 (x467 2 138)) (= (x467 2 46) 70368744177664) (= 11692013098647223345629478661730264157247460343808 (x467 2 163)) (= (x467 2 214) 26328072917139296674479506920917608079723773850137277813577744384) (= (x467 2 171) 2993155353253689176481146537402947624255349848014848) (= 309485009821345068724781056 (x467 2 88)) (= 6427752177035961102167848369364650410088811975131171341205504 (x467 2 202)) (= 2305843009213693952 (x467 2 61)) (= 131072 (x467 2 17)) (= (x467 2 21) 2097152) (= 524288 (x467 2 19)) (= 166153499473114484112975882535043072 (x467 2 117)) (= (x467 2 55) 36028797018963968) (= (x467 2 87) 154742504910672534362390528) (= 748288838313422294120286634350736906063837462003712 (x467 2 169)) (= 178405961588244985132285746181186892047843328 (x467 2 147)) (= 73786976294838206464 (x467 2 66)) (= 1099511627776 (x467 2 40)) (= 81129638414606681695789005144064 (x467 2 106)) (= 1048576 (x467 2 20)) (= 2199023255552 (x467 2 41)) (= (x467 2 12) 4096) (= (x467 2 236) 110427941548649020598956093796432407239217743554726184882600387580788736) (= (x467 2 131) 2722258935367507707706996859454145691648) (= 14474011154664524427946373126085988481658748083205070504932198000989141204992 (x467 2 253)) (= 4611686018427387904 (x467 2 62)) (= 1532495540865888858358347027150309183618739122183602176 (x467 2 180)) (= (x467 2 233) 13803492693581127574869511724554050904902217944340773110325048447598592) (= 5070602400912917605986812821504 (x467 2 102)) (= (x467 2 28) 268435456) (= 842498333348457493583344221469363458551160763204392890034487820288 (x467 2 219)) (= (x467 2 231) 3450873173395281893717377931138512726225554486085193277581262111899648) (= 91343852333181432387730302044767688728495783936 (x467 2 156)) (= (x467 2 129) 680564733841876926926749214863536422912) (= 883423532389192164791648750371459257913741948437809479060803100646309888 (x467 2 239)) (= (x467 2 57) 144115188075855872) (= (x467 2 52) 4503599627370496) (= (x467 2 84) 19342813113834066795298816) (= (x467 2 32) 4294967296) (= (x467 2 227) 215679573337205118357336120696157045389097155380324579848828881993728) (= (x467 2 5) 32) (= 374144419156711147060143317175368453031918731001856 (x467 2 168)) (= (x467 2 69) 590295810358705651712) (= (x467 2 59) 576460752303423488) (= (x467 2 216) 105312291668557186697918027683670432318895095400549111254310977536) (= 18446744073709551616 (x467 2 64)) (= (x467 2 193) 12554203470773361527671578846415332832204710888928069025792) (= (x467 2 9) 512) (= 42535295865117307932921825928971026432 (x467 2 125)) (= 6582018229284824168619876730229402019930943462534319453394436096 (x467 2 212)) (= 17592186044416 (x467 2 44)) (= 2854495385411919762116571938898990272765493248 (x467 2 151)) (= (x467 2 79) 604462909807314587353088) (= (x467 2 109) 649037107316853453566312041152512) (= (x467 2 68) 295147905179352825856) (= (x467 2 247) 226156424291633194186662080095093570025917938800079226639565593765455331328) (= (x467 2 184) 24519928653854221733733552434404946937899825954937634816) (= (x467 2 241) 3533694129556768659166595001485837031654967793751237916243212402585239552) (= 205688069665150755269371147819668813122841983204197482918576128 (x467 2 207)) (= (x467 2 192) 6277101735386680763835789423207666416102355444464034512896) (= (x467 2 23) 8388608) (= (x467 2 85) 38685626227668133590597632) (= 28269553036454149273332760011886696253239742350009903329945699220681916416 (x467 2 244)) (= (x467 2 122) 5316911983139663491615228241121378304) (= 107839786668602559178668060348078522694548577690162289924414440996864 (x467 2 226)) (= (x467 2 99) 633825300114114700748351602688) (= 34359738368 (x467 2 35)) (= 316912650057057350374175801344 (x467 2 98)) (= 1569275433846670190958947355801916604025588861116008628224 (x467 2 190)) (= (x467 2 215) 52656145834278593348959013841835216159447547700274555627155488768) (= (x467 2 170) 1496577676626844588240573268701473812127674924007424) (= 191561942608236107294793378393788647952342390272950272 (x467 2 177)) (= (x467 2 197) 200867255532373784442745261542645325315275374222849104412672) (= 5192296858534827628530496329220096 (x467 2 112)) (= (x467 2 123) 10633823966279326983230456482242756608) (= (x467 2 31) 2147483648) (= (x467 2 54) 18014398509481984) (= 23384026197294446691258957323460528314494920687616 (x467 2 164)) (= 5846006549323611672814739330865132078623730171904 (x467 2 162)) (= (x467 2 223) 13479973333575319897333507543509815336818572211270286240551805124608) (= (x467 2 141) 2787593149816327892691964784081045188247552) (= 332306998946228968225951765070086144 (x467 2 118)) (= (x467 2 203) 12855504354071922204335696738729300820177623950262342682411008) (= 20282409603651670423947251286016 (x467 2 104)) (= (x467 2 51) 2251799813685248) (= (x467 2 53) 9007199254740992) (= (x467 2 221) 3369993333393829974333376885877453834204643052817571560137951281152) (= (x467 2 139) 696898287454081973172991196020261297061888) (= 23945242826029513411849172299223580994042798784118784 (x467 2 174)) (= (x467 2 161) 2923003274661805836407369665432566039311865085952) (= (x467 2 234) 27606985387162255149739023449108101809804435888681546220650096895197184) (= (x467 2 165) 46768052394588893382517914646921056628989841375232) (= (x467 2 206) 102844034832575377634685573909834406561420991602098741459288064) (= 7237005577332262213973186563042994240829374041602535252466099000494570602496 (x467 2 252)) (= 174224571863520493293247799005065324265472 (x467 2 137)) (= (x467 2 148) 356811923176489970264571492362373784095686656) (= 549755813888 (x467 2 39)) (= (x467 2 15) 32768) (= 4 (x467 2 2)) (= (x467 2 158) 365375409332725729550921208179070754913983135744) (= (x467 2 7) 128) (= (x467 2 36) 68719476736) (= 3291009114642412084309938365114701009965471731267159726697218048 (x467 2 211)) (= 5986310706507378352962293074805895248510699696029696 (x467 2 172)) (= 340282366920938463463374607431768211456 (x467 2 128)) (= 562949953421312 (x467 2 49)) (= 77371252455336267181195264 (x467 2 86)) (= 2048 (x467 2 11)) (= (x467 2 82) 4835703278458516698824704) (= (x467 2 111) 2596148429267413814265248164610048) (= 411376139330301510538742295639337626245683966408394965837152256 (x467 2 208)) (= (x467 2 153) 11417981541647679048466287755595961091061972992) (= 1180591620717411303424 (x467 2 70)) (= 17179869184 (x467 2 34)) (= (x467 2 200) 1606938044258990275541962092341162602522202993782792835301376) (= 281474976710656 (x467 2 48)) (= (x467 2 250) 1809251394333065553493296640760748560207343510400633813116524750123642650624) (= 75557863725914323419136 (x467 2 76)) (= (x467 2 119) 664613997892457936451903530140172288) (= (x467 2 132) 5444517870735015415413993718908291383296) (= 3213876088517980551083924184682325205044405987565585670602752 (x467 2 201)) (= (x467 2 4) 16) (= 1208925819614629174706176 (x467 2 80)) (= 41538374868278621028243970633760768 (x467 2 115)) (= 53919893334301279589334030174039261347274288845081144962207220498432 (x467 2 225)) (= (x467 2 26) 67108864) (= (x467 2 246) 113078212145816597093331040047546785012958969400039613319782796882727665664) (= 100433627766186892221372630771322662657637687111424552206336 (x467 2 196)) (= 904625697166532776746648320380374280103671755200316906558262375061821325312 (x467 2 249)) (= (x467 2 30) 1073741824) (= (x467 2 127) 170141183460469231731687303715884105728) (= 9671406556917033397649408 (x467 2 83)) (= 10141204801825835211973625643008 (x467 2 103)) (= 33554432 (x467 2 25)) (= 162259276829213363391578010288128 (x467 2 107)) (= 2417851639229258349412352 (x467 2 81)) (= (x467 2 195) 50216813883093446110686315385661331328818843555712276103168) (= (x467 2 191) 3138550867693340381917894711603833208051177722232017256448) (= 22835963083295358096932575511191922182123945984 (x467 2 154)) (= (x467 2 16) 65536) (= 401734511064747568885490523085290650630550748445698208825344 (x467 2 198)) (= 95780971304118053647396689196894323976171195136475136 (x467 2 176)) (= (x467 2 24) 16777216) (= (x467 2 232) 6901746346790563787434755862277025452451108972170386555162524223799296) (= (x467 2 71) 2361183241434822606848) (= 4951760157141521099596496896 (x467 2 92)) (= 383123885216472214589586756787577295904684780545900544 (x467 2 178)) (= 862718293348820473429344482784628181556388621521298319395315527974912 (x467 2 229)) (= (x467 2 194) 25108406941546723055343157692830665664409421777856138051584) (= 36893488147419103232 (x467 2 65)) (= 83076749736557242056487941267521536 (x467 2 116)) (= 1024 (x467 2 10)) (= 21267647932558653966460912964485513216 (x467 2 124)) (= 1361129467683753853853498429727072845824 (x467 2 130)) (= 12259964326927110866866776217202473468949912977468817408 (x467 2 183)) (= 151115727451828646838272 (x467 2 77)) (= 822752278660603021077484591278675252491367932816789931674304512 (x467 2 209)) (= 1267650600228229401496703205376 (x467 2 100)) (= (x467 2 155) 45671926166590716193865151022383844364247891968) (= 536870912 (x467 2 29)) (= (x467 2 90) 1237940039285380274899124224) (= 1 (x467 2 0)) (= 13164036458569648337239753460458804039861886925068638906788872192 (x467 2 213)) (= 5575186299632655785383929568162090376495104 (x467 2 142)) (= (x467 2 56) 72057594037927936) (= (x467 2 45) 35184372088832) (= (x467 2 220) 1684996666696914987166688442938726917102321526408785780068975640576) (= (x467 2 251) 3618502788666131106986593281521497120414687020801267626233049500247285301248) (= 6739986666787659948666753771754907668409286105635143120275902562304 (x467 2 222)) (= 18889465931478580854784 (x467 2 74)) (= (x467 2 43) 8796093022208) (= (x467 2 135) 43556142965880123323311949751266331066368) (= 1427247692705959881058285969449495136382746624 (x467 2 150)) (= (x467 2 240) 1766847064778384329583297500742918515827483896875618958121606201292619776) (= 256 (x467 2 8)) (= 766247770432944429179173513575154591809369561091801088 (x467 2 179)) (= (x467 2 63) 9223372036854775808) (= 4194304 (x467 2 22)) (= 79228162514264337593543950336 (x467 2 96)) (= 1461501637330902918203684832716283019655932542976 (x467 2 160)) (= (x467 2 1) 2) (= 441711766194596082395824375185729628956870974218904739530401550323154944 (x467 2 238)) (= 16384 (x467 2 14)) (= (x467 2 121) 2658455991569831745807614120560689152) (= (x467 2 126) 85070591730234615865843651857942052864) (= (x467 2 58) 288230376151711744) (= 220855883097298041197912187592864814478435487109452369765200775161577472 (x467 2 237)) (= 158456325028528675187087900672 (x467 2 97)) (= 14134776518227074636666380005943348126619871175004951664972849610340958208 (x467 2 243)) (= (x467 2 133) 10889035741470030830827987437816582766592) (= (x467 2 175) 47890485652059026823698344598447161988085597568237568) (= (x467 2 75) 37778931862957161709568) (= (x467 2 149) 713623846352979940529142984724747568191373312) (= (x467 2 188) 392318858461667547739736838950479151006397215279002157056) (= 9903520314283042199192993792 (x467 2 93)) (= 21778071482940061661655974875633165533184 (x467 2 134)) (= (x467 2 248) 452312848583266388373324160190187140051835877600158453279131187530910662656) (= (x467 2 146) 89202980794122492566142873090593446023921664) (= 8192 (x467 2 13)) (= 7067388259113537318333190002971674063309935587502475832486424805170479104 (x467 2 242)) (= 784637716923335095479473677900958302012794430558004314112 (x467 2 189)) (= 137438953472 (x467 2 37)) (= 49039857307708443467467104868809893875799651909875269632 (x467 2 185)) (= (x467 2 245) 56539106072908298546665520023773392506479484700019806659891398441363832832) (= 1393796574908163946345982392040522594123776 (x467 2 140)) (= (x467 2 67) 147573952589676412928) (= 39614081257132168796771975168 (x467 2 95)) (= (x467 2 204) 25711008708143844408671393477458601640355247900524685364822016) (= (x467 2 210) 1645504557321206042154969182557350504982735865633579863348609024) (= (x467 2 157) 182687704666362864775460604089535377456991567872) (= (x467 2 254) 28948022309329048855892746252171976963317496166410141009864396001978282409984) (= (x467 2 230) 1725436586697640946858688965569256363112777243042596638790631055949824) (= 19807040628566084398385987584 (x467 2 94)) (= 57896044618658097711785492504343953926634992332820282019728792003956564819968 (x467 2 255)) (= 51422017416287688817342786954917203280710495801049370729644032 (x467 2 205)) (= 55213970774324510299478046898216203619608871777363092441300193790394368 (x467 2 235)) (= (x467 2 120) 1329227995784915872903807060280344576) (= 1298074214633706907132624082305024 (x467 2 110)) (= (x467 2 199) 803469022129495137770981046170581301261101496891396417650688) (= 5708990770823839524233143877797980545530986496 (x467 2 152)) (= (x467 2 143) 11150372599265311570767859136324180752990208) (= 64 (x467 2 6)) (= (x467 2 167) 187072209578355573530071658587684226515959365500928) (= (x467 2 113) 10384593717069655257060992658440192) (= (x467 2 224) 26959946667150639794667015087019630673637144422540572481103610249216) (= (x467 2 217) 210624583337114373395836055367340864637790190801098222508621955072) (= 11972621413014756705924586149611790497021399392059392 (x467 2 173)) (= (x467 2 105) 40564819207303340847894502572032) (= (x467 2 218) 421249166674228746791672110734681729275580381602196445017243910144) (= (x467 2 78) 302231454903657293676544) (= 3064991081731777716716694054300618367237478244367204352 (x467 2 181)) (= 6129982163463555433433388108601236734474956488734408704 (x467 2 182)) (= (x467 2 114) 20769187434139310514121985316880384) (= (x467 2 3) 8) (= 730750818665451459101842416358141509827966271488 (x467 2 159)) (= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x467 2 256)) (= 324518553658426726783156020576256 (x467 2 108)) (= (x467 2 228) 431359146674410236714672241392314090778194310760649159697657763987456) (= (x467 2 38) 274877906944) (= (x467 2 89) 618970019642690137449562112) (= (x467 2 145) 44601490397061246283071436545296723011960832) (= 140737488355328 (x467 2 47)) (= (x467 2 187) 196159429230833773869868419475239575503198607639501078528) (= (x467 2 91) 2475880078570760549798248448) (= 22300745198530623141535718272648361505980416 (x467 2 144)) (= (x467 2 50) 1125899906842624) (= (x467 2 27) 134217728) (= (x467 2 60) 1152921504606846976) (= (x467 2 33) 8589934592) (= (x467 2 18) 262144) (= 4398046511104 (x467 2 42)) (= (x467 2 101) 2535301200456458802993406410752) (= 93536104789177786765035829293842113257979682750464 (x467 2 166)) (= (x467 2 72) 4722366482869645213696) (= 98079714615416886934934209737619787751599303819750539264 (x467 2 186)) (= (x467 2 136) 87112285931760246646623899502532662132736)))
(assert (= x449 (and x35 x13)))
(assert (x162 x382 x393))
(assert (x307 x367))
(assert (x415 x221))
(assert (x415 x432))
(assert (x415 x271))
(assert (= x402 (and x502 x404)))
(assert (x26 (- x551 x382)))
(assert (x16 8 x447))
(assert (x415 x481))
(assert (x415 x231))
(assert (x505 x309))
(assert (x415 x44))
(assert (x162 x393 (- x168 x480)))
(assert (x307 x479))
(assert (x307 x518))
(assert (< 10000 (x463 64 x246 158)))
(assert (= (x220 (x463 64 x246 158)) (x463 64 x246 158)))
(assert (x281 x36))
(assert (x273 x382 x480 x393 x168))
(assert (< (x430 32 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x273 x168 x551 x382 x480))
(assert (= (x220 x426) (x220 (+ x298 x426))))
(assert (x307 x496))
(assert (x415 x129))
(assert (x415 x25))
(assert (x505 2))
(assert (= (x19 115792089237316195423570985008687907853269984665640564039457584007913129639935 x22) (ite (< x22 256) (x428 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x467 2 x22)) 0)))
(assert (x101 x514))
(assert (x16 2 x98))
(assert (x26 x341))
(assert (x415 x216))
(assert (not x241))
(assert (= x440 (=> (and (= x51 (ite (> x374 0) x522 (x111 127 x522))) (= x343 (> x51 31)) (= x522 (x428 x309 2)) (= x212 (x525 288)) (<= x212 18446744073709551615) (= x286 (x247 (- x374 (mod (ite (< x51 32) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (or (= 1 x286) (= x286 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= x374 (x111 1 x309))) (and (=> (not x343) x334) (=> (and (and (= (+ x103 x540) x74) (= (> x74 x540) x511) (= x540 (x430 32 4)) (= (x428 (+ 31 x51) 32) x103)) x343) (and (=> x511 x117) (=> (not x511) x389)))))))
(assert (x415 x480))
(assert (= 0 (x220 1889567281)))
(assert (= (and x120 x343) x376))
(assert (x415 x123))
(assert (x101 x432))
(assert (x415 x496))
(assert (= x439 (and x120 (not x343))))
(assert (x415 x398))
(assert (x415 x410))
(assert (x115 404098525))
(assert (x415 x381))
(assert (x238 x309 2))
(assert (x503 x393 x168 x382 x393))
(assert (x415 x364))
(assert (x415 x433))
(assert (= x422 (=> (and (and (= (ite (< 0 x236) x527 (x111 127 x527)) x481) (<= 1 x15) (= (= 1 (ite (> x447 31) 1 0)) x386) (<= x447 18446744073709551615) (= (< 31 x481) x458) (= x447 (x346 128)) (= x256 (x251 256)) (= (x111 1 x432) x236) (= x527 (x428 x432 2)) (or (= x31 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 1 x31)) (<= x288 255) (not x458) (<= 1 x288) (= x31 (x247 (- x236 (mod (ite (< x481 32) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= x231 288)) (or (and (not x386) (and (= (ite (<= x406 1) x292 (x53 x406 x431)) x420) (<= 1 x185) (= x185 (x19 115792089237316195423570985008687907853269984665640564039457584007913129639935 x433)) (= x490 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x185)) (= (x29 (+ x406 x431)) x292) (= x477 (x252 160)) (= (x111 x477 x490) x406) (= x433 (* x447 8)) (= (* x447 2) x431))) (and (and (= x141 (x111 x444 x541)) (= (x252 160) x444) (= (* 8 x349) x293) (= (+ x497 1) x173) (= (x111 31 x447) x349) (= x336 (x430 32 3)) (= (* 2 x447) x497) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x19 115792089237316195423570985008687907853269984665640564039457584007913129639935 x293)) x541)) x386))) x440)))
(assert (x415 x340))
(assert (= (=> (and (or (and (and (= x383 (x111 x358 x367)) (= x335 (* 8 x212)) (= x112 (x19 115792089237316195423570985008687907853269984665640564039457584007913129639935 x335)) (= x498 (ite (<= x383 1) x189 (x53 x383 x274))) (<= 1 x112) (= x367 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x112)) (= (x482 320) x358) (= x189 (x29 (+ x383 x274))) (= (* x212 2) x274)) (not x327)) (and (and (= (+ x219 1) x178) (= x81 (* 8 x341)) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x19 115792089237316195423570985008687907853269984665640564039457584007913129639935 x81)) x217) (= x209 (x430 32 4)) (= (x111 x496 x217) x485) (= (* 2 x212) x219) (= (x482 320) x496) (= x341 (x111 31 x212))) x327)) (= x327 (= (ite (< 31 x212) 1 0) 1))) x322) x334))
(assert (x153 (x467 2 x461)))
(assert (x505 x432))
(assert (x238 x36 128))
(assert (x162 x382 (- x480 x382)))
(assert (= (x220 (+ 1 x540)) (x220 x540)))
(assert (= (and (not x511) x376) x539))
(assert (x273 x393 x382 x382 x480))
(assert (x115 18446744073709551615))
(assert (= 0 (x220 72464927124685711895252664195178772226123872012682517813167109100718830649344)))
(assert (x415 x291))
(assert (x415 x527))
(assert (x415 x326))
(assert (= (and x366 x509) x110))
(assert (= (x306 (x430 32 155)) 32))
(assert (x415 x358))
(assert (x307 x36))
(assert (x307 x522))
(assert (x113 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x467 2 x335)))
(assert (= 159 (x128 (x463 64 x246 159))))
(assert (x273 x168 x551 x393 x168))
(assert (x415 x461))
(assert (< 10000 (x463 64 x340 156)))
(assert (x503 x551 x168 x168 x393))
(assert (x26 (- x168 x551)))
(assert (x105 x291))
(assert (x415 x6))
(assert (x281 x522))
(assert (x415 x178))
(assert (x503 x382 x480 x382 x393))
(assert (x105 x355))
(assert (not (x115 (x463 64 x246 158))))
(assert (< (x463 64 x246 159) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x373 (+ x435 31) 32))
(assert (x415 x212))
(assert (x162 x382 x480))
(assert (x415 x298))
(assert (x415 x168))
(assert (= 0 (x220 4294967295)))
(assert (= (x306 (x463 64 x246 161)) 64))
(assert (= x184 x227))
(assert (x79 x98))
(assert (x153 (x467 2 x81)))
(assert (x415 x325))
(assert (x16 8 x73))
(assert (x415 x328))
(assert (= 156 (x128 (x463 64 x340 156))))
(assert (= x54 (and (not x262) x317)))
(assert (x503 x480 x382 x168 x393))
(assert (x415 x81))
(assert (x26 (- x480 x393)))
(assert (x415 x370))
(assert (x415 x127))
(assert (x115 1889567281))
(assert (x503 x168 x551 x382 x393))
(assert (= 161 (x128 (x463 64 x340 161))))
(assert (x415 x31))
(assert (x373 x432 2))
(assert (=> (>= 10000 x224) (= 0 (x220 x224))))
(assert (x415 x136))
(assert (x415 x363))
(assert (x415 x98))
(assert (x162 x551 (- x168 x382)))
(assert (x162 x393 (- x168 x551)))
(assert (x113 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x467 2 x81)))
(assert (x162 x168 (- x393 x382)))
(assert (x415 x529))
(assert (x415 x475))
(assert (= (and x487 (not x316)) x176))
(assert (x162 x393 (- x382 x480)))
(assert (x26 8))
(assert (= (x220 (x430 32 4)) (x430 32 4)))
(assert (x26 (- x480 x382)))
(assert (x162 x168 (- x393 x551)))
(assert (x415 x95))
(assert (x415 x112))
(assert (= (x430 32 154) (x220 (x430 32 154))))
(assert (= x389 x334))
(check-sat)
(exit)
