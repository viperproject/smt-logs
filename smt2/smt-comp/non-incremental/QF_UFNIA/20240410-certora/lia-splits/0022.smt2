(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Certora
Generated on: 2024-04-10
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x229 () Bool)
(declare-fun x463 () Int)
(declare-fun x323 () Int)
(declare-fun x532 () Int)
(declare-fun x97 () Int)
(declare-fun x168 () Int)
(declare-fun x469 () Bool)
(declare-fun x305 () Bool)
(declare-fun x179 () Int)
(declare-fun x551 () Bool)
(declare-fun x489 () Int)
(declare-fun x470 () Bool)
(declare-fun x282 () Bool)
(declare-fun x340 () Int)
(declare-fun x149 () Int)
(declare-fun x519 (Int Int) Int)
(declare-fun x290 () Int)
(declare-fun x30 () Bool)
(declare-fun x462 () Int)
(declare-fun x431 () Bool)
(declare-fun x472 () Bool)
(declare-fun x316 () Int)
(declare-fun x383 () Bool)
(declare-fun x366 () Int)
(declare-fun x346 () Int)
(declare-fun x498 () Int)
(declare-fun x275 (Int) Int)
(declare-fun x315 () Bool)
(declare-fun x195 () Bool)
(declare-fun x116 () Int)
(declare-fun x352 () Int)
(declare-fun x265 () Int)
(declare-fun x49 () Bool)
(declare-fun x306 () Bool)
(declare-fun x310 () Int)
(declare-fun x237 () Int)
(declare-fun x271 () Int)
(declare-fun x309 () Bool)
(declare-fun x381 () Int)
(declare-fun x253 () Int)
(declare-fun x202 () Int)
(declare-fun x75 () Int)
(declare-fun x344 () Int)
(declare-fun x497 () Int)
(declare-fun x314 () Int)
(declare-fun x420 () Int)
(declare-fun x101 () Int)
(declare-fun x549 () Int)
(declare-fun x311 (Int Int) Int)
(declare-fun x342 () Int)
(declare-fun x432 () Int)
(declare-fun x361 () Int)
(declare-fun x93 () Int)
(declare-fun x264 () Int)
(declare-fun x141 () Int)
(declare-fun x561 () Int)
(declare-fun x250 () Int)
(declare-fun x474 () Bool)
(declare-fun x480 () Int)
(declare-fun x444 () Int)
(declare-fun x120 () Int)
(declare-fun x487 () Bool)
(declare-fun x38 () Int)
(declare-fun x165 () Int)
(declare-fun x164 () Int)
(declare-fun x425 () Int)
(declare-fun x332 () Int)
(declare-fun x11 () Int)
(declare-fun x556 () Int)
(declare-fun x341 () Int)
(declare-fun x351 () Bool)
(declare-fun x15 () Int)
(declare-fun x384 () Bool)
(declare-fun x354 () Int)
(declare-fun x226 () Int)
(declare-fun x544 () Int)
(declare-fun x134 () Int)
(declare-fun x325 () Int)
(declare-fun x170 () Int)
(declare-fun x260 () Int)
(declare-fun x441 () Bool)
(declare-fun x343 () Int)
(declare-fun x382 () Int)
(declare-fun x102 () Int)
(declare-fun x26 () Int)
(declare-fun x262 () Bool)
(declare-fun x39 () Int)
(declare-fun x62 () Bool)
(declare-fun x516 () Int)
(declare-fun x298 () Bool)
(declare-fun x176 () Int)
(declare-fun x256 () Int)
(declare-fun x186 () Int)
(declare-fun x502 () Int)
(declare-fun x386 () Bool)
(declare-fun x110 () Int)
(declare-fun x442 () Int)
(declare-fun x292 () Int)
(declare-fun x328 () Bool)
(declare-fun x167 () Int)
(declare-fun x337 () Int)
(declare-fun x416 () Int)
(declare-fun x312 () Int)
(declare-fun x527 () Int)
(declare-fun x78 (Int) Int)
(declare-fun x521 () Int)
(declare-fun x83 () Int)
(declare-fun x468 () Bool)
(declare-fun x484 () Int)
(declare-fun x180 () Int)
(declare-fun x203 () Bool)
(declare-fun x147 () Bool)
(declare-fun x95 () Int)
(declare-fun x460 () Int)
(declare-fun x37 () Bool)
(declare-fun x163 () Bool)
(declare-fun x135 () Int)
(declare-fun x446 () Bool)
(declare-fun x173 () Int)
(declare-fun x91 () Bool)
(declare-fun x507 () Bool)
(declare-fun x20 (Int) Int)
(declare-fun x402 () Bool)
(declare-fun x317 () Int)
(declare-fun x269 () Bool)
(declare-fun x392 () Bool)
(declare-fun x257 () Int)
(declare-fun x19 () Int)
(declare-fun x356 () Int)
(declare-fun x495 () Bool)
(declare-fun x272 (Int Int Int) Int)
(declare-fun x87 () Int)
(declare-fun x217 () Int)
(declare-fun x188 () Int)
(declare-fun x24 () Bool)
(declare-fun x86 () Int)
(declare-fun x423 () Bool)
(declare-fun x515 () Int)
(declare-fun x222 () Bool)
(declare-fun x31 () Int)
(declare-fun x347 () Int)
(declare-fun x429 () Int)
(declare-fun x293 () Int)
(declare-fun x114 () Int)
(declare-fun x452 () Bool)
(declare-fun x190 () Int)
(declare-fun x537 () Bool)
(declare-fun x72 (Int) Int)
(declare-fun x3 () Bool)
(declare-fun x479 () Int)
(declare-fun x243 () Int)
(declare-fun x508 () Int)
(declare-fun x362 () Bool)
(declare-fun x367 (Int) Int)
(declare-fun x154 () Bool)
(declare-fun x208 () Int)
(declare-fun x358 () Int)
(declare-fun x125 (Int) Int)
(declare-fun x417 () Int)
(declare-fun x48 () Int)
(declare-fun x235 () Bool)
(declare-fun x127 () Int)
(declare-fun x29 () Bool)
(declare-fun x530 () Bool)
(declare-fun x380 () Bool)
(declare-fun x107 () Int)
(declare-fun x357 () Bool)
(declare-fun x156 () Bool)
(declare-fun x7 () Int)
(declare-fun x207 () Bool)
(declare-fun x199 () Int)
(declare-fun x43 () Int)
(declare-fun x449 () Bool)
(declare-fun x185 () Int)
(declare-fun x299 (Int) Int)
(declare-fun x270 () Bool)
(declare-fun x307 () Int)
(declare-fun x476 () Bool)
(declare-fun x338 () Bool)
(declare-fun x407 () Bool)
(declare-fun x535 () Int)
(declare-fun x294 () Int)
(declare-fun x475 () Int)
(declare-fun x16 () Int)
(declare-fun x388 () Bool)
(declare-fun x350 (Int) Int)
(declare-fun x555 () Int)
(declare-fun x92 () Bool)
(declare-fun x140 () Bool)
(declare-fun x106 () Int)
(declare-fun x218 () Int)
(declare-fun x242 () Int)
(declare-fun x74 () Int)
(declare-fun x205 () Bool)
(declare-fun x333 () Int)
(declare-fun x267 () Int)
(declare-fun x421 () Int)
(declare-fun x349 () Int)
(declare-fun x404 () Int)
(declare-fun x506 () Bool)
(declare-fun x76 () Bool)
(declare-fun x458 () Bool)
(declare-fun x390 () Bool)
(declare-fun x10 () Int)
(declare-fun x394 () Int)
(declare-fun x288 () Int)
(declare-fun x369 () Bool)
(declare-fun x368 () Bool)
(declare-fun x241 () Int)
(declare-fun x13 () Bool)
(declare-fun x459 (Int) Bool)
(declare-fun x500 () Int)
(declare-fun x94 () Int)
(declare-fun x548 () Bool)
(declare-fun x488 () Int)
(declare-fun x345 () Bool)
(declare-fun x184 () Int)
(declare-fun x246 () Int)
(declare-fun x196 () Int)
(declare-fun x131 () Int)
(declare-fun x118 () Bool)
(declare-fun x138 () Int)
(declare-fun x240 () Int)
(declare-fun x279 () Int)
(declare-fun x194 (Int) Int)
(declare-fun x400 () Int)
(declare-fun x276 () Int)
(declare-fun x22 () Int)
(declare-fun x133 () Bool)
(declare-fun x79 () Int)
(declare-fun x258 () Int)
(declare-fun x284 () Int)
(declare-fun x117 () Bool)
(declare-fun x88 () Int)
(declare-fun x198 () Int)
(declare-fun x96 () Bool)
(declare-fun x377 () Bool)
(declare-fun x230 () Bool)
(declare-fun x447 () Int)
(declare-fun x493 () Int)
(declare-fun x481 () Bool)
(declare-fun x396 () Int)
(declare-fun x251 () Int)
(declare-fun x145 () Int)
(declare-fun x99 () Int)
(declare-fun x17 () Int)
(declare-fun x172 () Int)
(declare-fun x129 () Int)
(declare-fun x200 () Bool)
(declare-fun x259 () Int)
(declare-fun x375 () Bool)
(declare-fun x64 () Bool)
(declare-fun x221 () Bool)
(declare-fun x45 (Int) Int)
(declare-fun x454 () Int)
(declare-fun x128 () Bool)
(declare-fun x280 () Int)
(declare-fun x60 () Bool)
(declare-fun x531 () Bool)
(declare-fun x281 () Int)
(declare-fun x505 () Int)
(declare-fun x210 () Int)
(declare-fun x478 () Int)
(declare-fun x422 () Int)
(declare-fun x52 () Bool)
(declare-fun x410 () Int)
(declare-fun x435 () Bool)
(declare-fun x213 () Int)
(declare-fun x111 () Bool)
(declare-fun x34 () Int)
(declare-fun x248 () Int)
(declare-fun x403 () Int)
(declare-fun x121 () Int)
(declare-fun x261 () Bool)
(declare-fun x437 () Int)
(declare-fun x12 () Int)
(declare-fun x552 () Bool)
(declare-fun x371 (Int) Int)
(declare-fun x21 () Int)
(declare-fun x329 () Bool)
(declare-fun x303 () Bool)
(declare-fun x6 () Int)
(declare-fun x483 () Bool)
(declare-fun x373 () Int)
(declare-fun x82 () Bool)
(declare-fun x123 () Int)
(declare-fun x415 () Bool)
(declare-fun x224 () Int)
(declare-fun x249 () Bool)
(declare-fun x450 () Bool)
(declare-fun x477 () Bool)
(declare-fun x541 () Int)
(declare-fun x158 () Int)
(declare-fun x212 () Int)
(declare-fun x409 () Int)
(declare-fun x490 () Int)
(declare-fun x308 () Int)
(declare-fun x359 () Int)
(declare-fun x433 () Bool)
(declare-fun x522 () Bool)
(declare-fun x252 () Int)
(declare-fun x238 () Int)
(declare-fun x466 () Int)
(declare-fun x426 () Int)
(declare-fun x528 () Int)
(declare-fun x98 () Bool)
(declare-fun x501 (Int Int) Int)
(declare-fun x214 () Bool)
(declare-fun x413 () Int)
(declare-fun x197 () Int)
(declare-fun x534 () Int)
(declare-fun x55 () Int)
(declare-fun x523 () Int)
(declare-fun x150 (Int) Int)
(declare-fun x151 () Bool)
(declare-fun x132 () Int)
(declare-fun x171 () Int)
(declare-fun x63 () Int)
(declare-fun x157 () Int)
(declare-fun x473 () Int)
(declare-fun x115 () Int)
(declare-fun x255 () Int)
(declare-fun x539 () Bool)
(declare-fun x291 () Int)
(declare-fun x297 () Bool)
(declare-fun x268 (Int Int) Int)
(declare-fun x266 () Bool)
(declare-fun x201 () Int)
(declare-fun x122 () Int)
(declare-fun x443 () Int)
(declare-fun x331 () Int)
(declare-fun x113 () Int)
(declare-fun x51 () Bool)
(declare-fun x215 () Bool)
(declare-fun x2 () Bool)
(declare-fun x245 () Bool)
(declare-fun x206 () Bool)
(declare-fun x320 () Bool)
(declare-fun x8 () Bool)
(declare-fun x84 () Bool)
(declare-fun x159 () Int)
(declare-fun x419 () Bool)
(declare-fun x283 () Int)
(declare-fun x510 () Int)
(declare-fun x339 () Bool)
(declare-fun x146 () Bool)
(declare-fun x66 () Bool)
(declare-fun x44 () Int)
(declare-fun x32 () Bool)
(declare-fun x336 () Bool)
(declare-fun x112 () Bool)
(declare-fun x254 () Int)
(declare-fun x25 () Int)
(declare-fun x353 () Int)
(declare-fun x525 () Bool)
(declare-fun x322 () Bool)
(declare-fun x211 () Bool)
(declare-fun x529 () Int)
(declare-fun x28 () Int)
(declare-fun x90 () Bool)
(declare-fun x126 () Int)
(declare-fun x504 () Int)
(declare-fun x33 () Bool)
(declare-fun x558 () Bool)
(declare-fun x559 () Bool)
(declare-fun x4 (Int) Int)
(declare-fun x14 () Int)
(declare-fun x41 () Int)
(declare-fun x553 () Int)
(declare-fun x148 () Int)
(declare-fun x511 () Bool)
(declare-fun x438 () Bool)
(declare-fun x47 () Int)
(declare-fun x295 () Bool)
(declare-fun x104 () Bool)
(declare-fun x23 () Bool)
(declare-fun x563 () Bool)
(declare-fun x59 () Int)
(declare-fun x178 (Int Int) Int)
(declare-fun x405 () Int)
(declare-fun x440 () Bool)
(declare-fun x137 () Int)
(declare-fun x411 () Int)
(declare-fun x227 () Int)
(declare-fun x304 () Bool)
(declare-fun x73 () Bool)
(declare-fun x209 () Int)
(declare-fun x189 () Bool)
(declare-fun x85 () Int)
(declare-fun x503 () Bool)
(declare-fun x428 () Int)
(declare-fun x560 () Bool)
(declare-fun x330 () Bool)
(declare-fun x136 () Int)
(declare-fun x233 () Int)
(declare-fun x130 () Int)
(declare-fun x53 () Bool)
(declare-fun x496 () Int)
(declare-fun x536 () Int)
(declare-fun x414 () Int)
(declare-fun x69 () Int)
(declare-fun x68 () Int)
(declare-fun x318 () Int)
(declare-fun x247 () Int)
(declare-fun x108 () Int)
(declare-fun x70 () Int)
(declare-fun x40 () Bool)
(declare-fun x183 () Int)
(declare-fun x430 () Int)
(declare-fun x557 () Int)
(declare-fun x393 (Int) Int)
(declare-fun x554 () Int)
(declare-fun x378 () Bool)
(declare-fun x434 () Int)
(declare-fun x71 () Int)
(declare-fun x244 () Int)
(declare-fun x236 (Int) Int)
(declare-fun x319 () Int)
(declare-fun x174 () Int)
(declare-fun x80 () Bool)
(declare-fun x543 () Int)
(declare-fun x313 () Int)
(declare-fun x286 () Int)
(declare-fun x191 () Int)
(declare-fun x278 () Int)
(declare-fun x385 () Int)
(declare-fun x192 () Bool)
(declare-fun x296 () Int)
(declare-fun x36 () Int)
(declare-fun x453 () Int)
(declare-fun x467 () Int)
(declare-fun x550 () Bool)
(declare-fun x77 () Int)
(declare-fun x56 () Bool)
(declare-fun x387 () Bool)
(declare-fun x18 () Int)
(define-fun x219 ((x301 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x301) (>= x301 0)) x301 (- x301 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x412 ((x301 Int)) Int (ite (and (< x301 0) (>= x301 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x301 115792089237316195423570985008687907853269984665640564039457584007913129639936) x301))
(define-fun x370 ((x301 Int)) Int (ite (and (>= x301 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x301)) x301 (ite (and (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 x301) (> 231584178474632390847141970017375815706539969331281128078915168015826259279872 x301)) (- x301 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (>= x301 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (< x301 0)) (+ x301 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x501 x301 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x533 ((x35 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x35) (<= 0 x35)))
(define-fun x464 ((x35 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x35) (>= x35 0)))
(define-fun x152 ((x35 Int)) Bool (and (= x35 (x519 x35 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (x519 115792089237316195423570985008687907853269984665640564039457584007913129639935 x35) x35)))
(define-fun x538 ((x35 Int)) Bool (and (= 0 (x519 0 x35)) (= 0 (x519 x35 0))))
(define-fun x177 ((x35 Int)) Bool (= x35 (x519 x35 x35)))
(define-fun x379 ((x35 Int)) Bool (and (x538 x35) (x177 x35) (x152 x35)))
(define-fun x239 ((x35 Int) (x326 Int)) Bool (= (x519 x35 x326) (x519 x326 x35)))
(define-fun x175 ((x35 Int) (x326 Int)) Bool (and (<= 0 (x519 x35 x326)) (=> (<= 0 x35) (<= (x519 x35 x326) x35)) (=> (<= 0 x326) (>= x326 (x519 x35 x326)))))
(define-fun x234 ((x35 Int) (x326 Int)) Bool (and (x239 x35 x326) (x175 x35 x326)))
(define-fun x232 ((x35 Int)) Bool (= (x519 x35 1461501637330902918203684832716283019655932542975) (x501 x35 1461501637330902918203684832716283019655932542976)))
(define-fun x395 ((x35 Int)) Bool (and (x234 x35 1461501637330902918203684832716283019655932542975) (x232 x35)))
(define-fun x100 ((x35 Int) (x326 Int)) Bool (and (> x326 (x501 x35 x326)) (>= (x501 x35 x326) 0)))
(define-fun x181 ((x35 Int) (x326 Int)) Bool (=> (and (< 0 x326) (<= 0 x35)) (= (< x35 x326) (= x35 (x501 x35 x326)))))
(define-fun x513 ((x35 Int) (x326 Int)) Bool (=> (and (> x326 0) (and (> (+ x326 x326) x35) (<= x326 x35))) (= (x501 x35 x326) (- x35 x326))))
(define-fun x348 ((x35 Int) (x326 Int)) Bool (=> (> x326 0) (= x35 (+ (* (x268 x35 x326) x326) (x501 x35 x326)))))
(define-fun x324 ((x35 Int) (x326 Int)) Bool (and (x181 x35 x326) (x100 x35 x326) (x348 x35 x326) (x513 x35 x326)))
(define-fun x228 ((x35 Int)) Bool (= (x501 0 x35) 0))
(define-fun x182 ((x35 Int)) Bool (= (x501 x35 1) 0))
(define-fun x220 ((x35 Int)) Bool (= (x501 x35 x35) 0))
(define-fun x285 ((x35 Int)) Bool (and (x220 x35) (x182 x35) (x228 x35)))
(define-fun x57 ((x35 Int) (x326 Int)) Bool (= (* x326 x35) (x311 x35 x326)))
(define-fun x562 ((x35 Int) (x326 Int)) Bool (and (= (* (- x326 115792089237316195423570985008687907853269984665640564039457584007913129639936) x35) (x311 x35 (- x326 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x311 (- x35 115792089237316195423570985008687907853269984665640564039457584007913129639936) x326) (- (* x35 x326) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x326))) (= (x311 (- x35 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x326 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* x35 (- x326 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x326 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x302 ((x35 Int) (x326 Int)) Bool (=> (and (> x35 0) (> x326 0)) (= (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x311 x35 x326)) (= x326 (x268 (x370 (x311 x35 x326)) x35)))))
(define-fun x391 ((x35 Int) (x326 Int)) Bool (=> (and (not (= 0 x326)) (not (= 0 x35))) (and (= x326 (x268 (x311 x35 x326) x35)) (= (x268 (x311 x35 x326) x326) x35))))
(define-fun x105 ((x35 Int) (x326 Int)) Bool (=> (and (> x35 0) (> x326 0)) (= (< (x268 115792089237316195423570985008687907853269984665640564039457584007913129639935 x35) x326) (> (x311 x35 x326) 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x67 ((x35 Int) (x326 Int)) Bool (and (= (x370 (x311 (- x35 115792089237316195423570985008687907853269984665640564039457584007913129639936) x326)) (x370 (x311 x35 x326))) (= (x370 (x311 x35 x326)) (x370 (x311 (- x35 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x326 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x370 (x311 x35 (- x326 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x370 (x311 x35 x326)))))
(define-fun x455 ((x35 Int) (x326 Int)) Bool (and (=> (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x35) (> x35 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x326) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x326))) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x311 (- x35 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x326 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (>= (x268 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x326)) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x35)))) (=> (and (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x326) (< 0 x326)) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x35) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x35))) (= (>= (x268 57896044618658097711785492504343953926634992332820282019728792003956564819968 x326) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x35)) (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x311 (- x35 115792089237316195423570985008687907853269984665640564039457584007913129639936) x326)))) (=> (and (and (> x326 0) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x326)) (and (< 0 x35) (<= x35 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (<= x35 (x268 57896044618658097711785492504343953926634992332820282019728792003956564819967 x326)) (<= (x311 x35 x326) 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (=> (and (and (> x326 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x326)) (and (< 0 x35) (<= x35 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x311 x35 (- x326 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x326) (x268 57896044618658097711785492504343953926634992332820282019728792003956564819968 x35))))))
(define-fun x193 ((x35 Int) (x326 Int)) Bool (and (x391 x35 x326) (x67 x35 x326) (x105 x35 x326) (x57 x35 x326) (x302 x35 x326) (x562 x35 x326) (x455 x35 x326)))
(define-fun x461 ((x35 Int)) Bool (and (= (x311 0 x35) 0) (= (x311 x35 0) 0)))
(define-fun x445 ((x35 Int)) Bool (and (= (x311 x35 1) x35) (= (x311 1 x35) x35)))
(define-fun x61 ((x35 Int)) Bool (and (x445 x35) (x461 x35)))
(define-fun x54 ((x35 Int) (x326 Int)) Bool (=> (and (> x326 0) (< 0 x35)) (and (>= x35 (x268 x35 x326)) (>= (x268 x35 x326) 0))))
(define-fun x456 ((x35 Int) (x326 Int)) Bool (=> (and (and (<= 1 x326) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x326)) (and (< x35 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x35))) (and (>= (x268 x35 x326) 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x268 x35 x326)))))
(define-fun x81 ((x35 Int) (x326 Int)) Bool (=> (and (> x35 x326) (< 1 x326)) (> x35 (x268 x35 x326))))
(define-fun x360 ((x35 Int) (x326 Int)) Bool (=> (and (> x35 0) (< 0 x326)) (= (< x35 x326) (= 0 (x268 x35 x326)))))
(define-fun x355 ((x35 Int) (x326 Int)) Bool (=> (and (< 0 x326) (< 0 x35)) (and (<= (x311 (x268 x35 x326) x326) x35) (< (- x35 x326) (x311 (x268 x35 x326) x326)))))
(define-fun x169 ((x35 Int) (x326 Int)) Bool (and (x360 x35 x326) (x81 x35 x326) (x456 x35 x326) (x54 x35 x326) (x355 x35 x326)))
(define-fun x46 ((x35 Int)) Bool (= (x268 0 x35) 0))
(define-fun x187 ((x35 Int)) Bool (= x35 (x268 x35 1)))
(define-fun x418 ((x35 Int)) Bool (=> (not (= 0 x35)) (= 1 (x268 x35 x35))))
(define-fun x363 ((x35 Int)) Bool (and (x187 x35) (x46 x35) (x418 x35)))
(define-fun x408 ((x35 Int)) Bool (= (x370 x35) (+ (x501 x35 32) (x519 x35 115792089237316195423570985008687907853269984665640564039457584007913129639904))))
(define-fun x160 ((x35 Int)) Bool (and (x408 x35) (x234 x35 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(define-fun x139 ((x35 Int)) Bool (= (x519 x35 340282366920938463463374607431768211455) (x501 x35 340282366920938463463374607431768211456)))
(define-fun x542 ((x35 Int)) Bool (and (x234 x35 340282366920938463463374607431768211455) (x139 x35)))
(define-fun x436 ((x35 Int) (x326 Int)) Bool (= (x311 x35 x326) (x311 x326 x35)))
(define-fun x485 ((x35 Int) (x326 Int)) Bool (and (=> (and (> 0 x35) (< 0 x326)) (> 0 (x311 x35 x326))) (=> (and (> x326 0) (< 0 x35)) (> (x311 x35 x326) 0)) (=> (and (< x35 0) (> 0 x326)) (< 0 (x311 x35 x326))) (=> (and (< x326 0) (> x35 0)) (< (x311 x35 x326) 0))))
(define-fun x109 ((x35 Int) (x326 Int)) Bool (and (x436 x35 x326) (x105 x35 x326) (x455 x35 x326) (x302 x35 x326) (x391 x35 x326) (x485 x35 x326) (x67 x35 x326)))
(define-fun x153 ((x35 Int) (x326 Int)) Bool (=> (and (> x35 0) (< 0 x326)) (and (<= (* (x268 x35 x326) x326) x35) (< (- x35 x326) (* (x268 x35 x326) x326)))))
(define-fun x204 ((x35 Int) (x326 Int)) Bool (and (x54 x35 x326) (x456 x35 x326) (x81 x35 x326) (x360 x35 x326) (x153 x35 x326)))
(define-fun x166 ((x526 Int)) Int 0)
(define-fun x546 ((x526 Int)) Int 0)
(define-fun x365 ((x526 Int)) Int 0)
(define-fun x65 ((x526 Int)) Int 0)
(define-fun x518 ((x526 Int)) Int 0)
(define-fun x401 ((x526 Int)) Int 0)
(define-fun x225 ((x526 Int)) Int 0)
(define-fun x517 ((x526 Int)) Int 0)
(define-fun x144 ((x526 Int)) Int 0)
(define-fun x142 ((x526 Int)) Int 0)
(define-fun x327 ((x526 Int)) Int 0)
(define-fun x289 ((x526 Int)) Int 0)
(define-fun x216 ((x526 Int)) Int 0)
(define-fun x451 ((x526 Int)) Int 0)
(define-fun x277 ((x526 Int)) Int 0)
(define-fun x397 ((x526 Int)) Int 0)
(define-fun x439 ((x526 Int)) Int 0)
(define-fun x273 ((x526 Int)) Int 0)
(define-fun x9 ((x526 Int)) Int 0)
(define-fun x5 ((x526 Int)) Int 0)
(define-fun x406 ((x526 Int)) Int (ite (= x526 x396) x131 (x20 x526)))
(define-fun x524 ((x526 Int)) Int (ite (= x325 x526) x93 (x406 x526)))
(define-fun x364 ((x526 Int)) Int (ite (= x526 128) 1 (x289 x526)))
(define-fun x482 ((x526 Int)) Int (ite (= 192 x526) 0 (x518 x526)))
(define-fun x399 ((x526 Int)) Int (ite (= 224 x526) 0 (x365 x526)))
(define-fun x457 ((x526 Int)) Int (ite (= x526 256) 0 (x166 x526)))
(define-fun x1 ((x526 Int)) Int (ite (= x526 160) 192 (x273 x526)))
(define-fun x89 ((x526 Int)) Int (ite (= 288 x526) x325 (x482 x526)))
(define-fun x564 ((x526 Int)) Int (ite (= 320 x526) x260 (x399 x526)))
(define-fun x162 ((x526 Int)) Int (ite (= 352 x526) x75 (x457 x526)))
(define-fun x143 ((x526 Int)) Int (ite (= x526 160) 288 (x1 x526)))
(define-fun x491 ((x526 Int)) Int (ite (= 128 x526) x14 (x439 x526)))
(define-fun x465 ((x526 Int)) Int (ite (= x526 160) x129 (x225 x526)))
(define-fun x119 ((x526 Int)) Int (ite x266 (x327 x526) (x465 x526)))
(define-fun x335 ((x526 Int)) Int (ite (= x252 x526) x294 (x277 x526)))
(define-fun x486 ((x526 Int)) Int (ite x266 (x144 x526) (x335 x526)))
(define-fun x398 ((x526 Int)) Int (ite (= x416 x526) x75 (x486 x526)))
(define-fun x27 ((x526 Int)) Int (ite x29 (x486 x526) (x398 x526)))
(define-fun x263 ((x526 Int)) Int 0)
(define-fun x427 ((x526 Int)) Int 0)
(define-fun x42 ((x526 Int)) Int 0)
(define-fun x274 ((x526 Int)) Int 0)
(define-fun x389 ((x526 Int)) Int 0)
(define-fun x334 ((x526 Int)) Int (ite (> x337 x526) (x150 x526) 0))
(define-fun x161 ((x526 Int)) Int (ite (and (> x337 x526) (<= 0 x526)) (x236 x526) (x334 x526)))
(define-fun x514 ((x526 Int)) Int (ite (= x59 x526) x478 (x524 x526)))
(define-fun x471 ((x526 Int)) Int (ite (= x325 x526) x157 (x514 x526)))
(define-fun x50 ((x526 Int)) Int (ite (= x526 x286) x22 (x451 x526)))
(define-fun x512 ((x526 Int)) Int (ite x266 (x142 x526) (x50 x526)))
(define-fun x448 ((x526 Int)) Int (x350 x526))
(define-fun x374 ((x526 Int)) Int (x45 x526))
(define-fun x155 ((x526 Int)) Int (ite (= x526 x129) x94 (x397 x526)))
(define-fun x499 ((x526 Int)) Int (ite x266 (x517 x526) (x155 x526)))
(define-fun x321 ((x526 Int)) Int (ite (= x526 x101) x137 (x78 x526)))
(define-fun x547 ((x526 Int)) Int (x45 x526))
(define-fun x376 ((x526 Int)) Int (ite x295 (x78 x526) (x321 x526)))
(define-fun x424 ((x526 Int)) Int (x350 x526))
(define-fun x103 ((x526 Int)) Int 0)
(define-fun x540 ((x526 Int)) Int (ite (= x526 x557) x21 (x471 x526)))
(define-fun x372 ((x526 Int)) Int (ite (= x526 128) 1 (x216 x526)))
(define-fun x58 ((x526 Int)) Int (ite (= x526 192) 0 (x401 x526)))
(define-fun x223 ((x526 Int)) Int (ite (= x526 224) 0 (x65 x526)))
(define-fun x231 ((x526 Int)) Int (ite (= 256 x526) 0 (x546 x526)))
(define-fun x300 ((x526 Int)) Int (ite (= 160 x526) 192 (x9 x526)))
(define-fun x509 ((x526 Int)) Int (ite (= x526 288) x325 (x58 x526)))
(define-fun x492 ((x526 Int)) Int (ite (= 320 x526) x421 (x223 x526)))
(define-fun x124 ((x526 Int)) Int (ite (= 352 x526) x75 (x231 x526)))
(define-fun x287 ((x526 Int)) Int (ite (= 160 x526) 288 (x300 x526)))
(define-fun x565 ((x35 Int) (x326 Int) (x545 Int) (x494 Int)) Bool (=> (and (<= 0 x35) (>= x326 0) (<= x35 x545) (<= x326 x494)) (<= (x311 x35 x326) (x311 x545 x494))))
(define-fun x520 ((x35 Int) (x326 Int) (x545 Int) (x494 Int)) Bool (=> (= x545 x35) (= (x311 x35 (- x326 x494)) (- (x311 x35 x326) (x311 x545 x494)))))
(assert (x285 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x565 x314 x434 x16 x493))
(assert (= (x371 (x272 64 x174 0)) x174))
(assert (x533 x341))
(assert (= (x275 115792089237316195423570985008687907853269984665640564039457584007913129639840) 0))
(assert (x520 x316 x267 x31 x171))
(assert (x520 x314 x434 x267 x316))
(assert (= x375 (or x431 x266)))
(assert (=> (>= 10000 x331) (= 0 (x275 x331))))
(assert (x533 x260))
(assert (= 0 (x275 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (x533 x417))
(assert (x533 x149))
(assert (x61 (- x314 x171)))
(assert (x533 x79))
(assert (= (and (not x98) x351) x548))
(assert (x533 x361))
(assert (x520 x314 x434 x16 x493))
(assert (x109 x267 (- x316 x314)))
(assert (x520 x16 x493 x171 x31))
(assert (x61 (- x171 x314)))
(assert (x533 x453))
(assert (x533 x99))
(assert (x109 x493 (- x16 x316)))
(assert (x533 x240))
(assert (x533 x202))
(assert (x61 (- x434 x267)))
(assert (x520 x493 x16 x267 x316))
(assert (x565 x171 x31 x314 x434))
(assert (= (x272 64 x250 12) (x275 (x272 64 x250 12))))
(assert (= (x275 (+ x475 1)) (x275 x475)))
(assert (= (x367 (x272 64 x250 0)) 0))
(assert (= x250 (x371 (x272 64 x250 0))))
(assert (x459 1889567281))
(assert (x533 x521))
(assert (x363 x463))
(assert (x109 x314 x434))
(assert (x533 x213))
(assert (x109 x434 (- x314 x31)))
(assert (x520 x434 x314 x267 x316))
(assert (x533 x16))
(assert (x324 x130 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (x275 2997214202) 0))
(assert (x520 x314 x434 x171 x31))
(assert (x61 (- x314 x316)))
(assert (x533 x381))
(assert (x533 x497))
(assert (not (x459 (x272 64 x108 2))))
(assert (x61 (- x16 x316)))
(assert (x379 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x533 x246))
(assert (= (x272 64 x473 8) (x275 (x272 64 x473 8))))
(assert (x61 x434))
(assert (x109 x434 (- x314 x171)))
(assert (x533 x462))
(assert (x61 x14))
(assert (x533 x256))
(assert (=> (>= 10000 x108) (= (x275 x108) 0)))
(assert (x533 x288))
(assert (x109 x493 (- x16 x31)))
(assert (x565 x434 x314 x16 x493))
(assert (x533 x131))
(assert (x533 x488))
(assert (x533 x69))
(assert (= (x275 (x272 64 x174 x113)) (x272 64 x174 x113)))
(assert (x533 x158))
(assert (x533 x120))
(assert (= 0 (x275 18446744073709551615)))
(assert (x379 340282366920938463463374607431768211455))
(assert (not (x459 (x272 64 x250 0))))
(assert (x520 x314 x434 x316 x267))
(assert (x109 x493 (- x16 x434)))
(assert (x533 x255))
(assert (x533 x342))
(assert (x520 x16 x493 x267 x316))
(assert (x533 x291))
(assert (= 64 (x299 (x272 64 x250 0))))
(assert (< (x272 64 x174 x113) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= x506 (=> (and (= x434 (x412 (- x243 x349))) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x344) (= (x194 x179) x349) (= x344 (x311 x314 x434)) (= (not (< 1 x87)) x539) (= x87 (x372 128)) (not (> x434 x243)) (= (x268 x344 1000000000000000000) x149) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x311 x314 x434)) (= x488 (x372 128)) (= (x287 160) x543) (>= x488 1) (= (x272 64 x174 x113) x179) (= (x492 x373) x314) (>= x344 0) (= x373 (x219 (+ x543 32))) (= (+ x121 1) x113)) (and (=> (= x149 x209) x378) x539))))
(assert (x533 x237))
(assert (x520 x434 x314 x171 x31))
(assert (=> (<= x353 10000) (= (x275 x353) 0)))
(assert (x533 x310))
(assert (x533 x480))
(assert (x61 (- x16 x171)))
(assert (= x320 (and x270 x470)))
(assert (x533 x224))
(assert (x520 x31 x171 x314 x434))
(assert (x61 (- x267 x434)))
(assert (x520 x267 x316 x434 x314))
(assert (x533 x43))
(assert (= (x275 x180) (x275 (+ x180 1))))
(assert (x533 x227))
(assert (x565 x16 x493 x267 x316))
(assert (x533 x529))
(assert (x109 x171 (- x31 x267)))
(assert (x379 x183))
(assert (= (x272 64 x253 0) (x275 (x272 64 x253 0))))
(assert (x61 (- x171 x316)))
(assert (x61 (- x316 x434)))
(assert (= 64 (x299 (x272 64 x174 x113))))
(assert (x109 x171 (- x31 x314)))
(assert (x533 x515))
(assert (x285 x218))
(assert (x324 x130 32))
(assert (x109 x31 (- x171 x316)))
(assert (x61 (- x31 x434)))
(assert (x61 (- x434 x316)))
(assert (x520 x16 x493 x31 x171))
(assert (x565 x267 x316 x31 x171))
(assert (x533 x434))
(assert (x109 x267 x316))
(assert (x109 x267 (- x316 x171)))
(assert (x533 x414))
(assert (x533 x41))
(assert (x520 x434 x314 x16 x493))
(assert (x533 x294))
(assert (= x90 (=> (= x336 (= 0 (ite (> x115 0) x115 (ite (not (< x99 x385)) 1 0)))) (and (=> (and (= x243 x394) (not x336)) x506) (=> (and x336 (and (or (and (= x47 x39) (not x163)) (and (= x47 x385) x163)) (= (< x385 x39) x163))) x328)))))
(assert (x533 x252))
(assert (x533 x447))
(assert (x533 x7))
(assert (x533 x123))
(assert (x533 x11))
(assert (x533 x184))
(assert (x533 x479))
(assert (x533 x18))
(assert (x363 x425))
(assert (= (x275 (+ x121 1)) (x275 x121)))
(assert (x533 x134))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x272 64 x250 0)))
(assert (= x353 (x371 (x272 64 x353 8))))
(assert (x520 x493 x16 x316 x267))
(assert (x109 x434 (- x314 x16)))
(assert (x61 1000000000000000000))
(assert (x533 x259))
(assert (x533 x77))
(assert (x533 x523))
(assert (x533 x373))
(assert (x520 x316 x267 x434 x314))
(assert (x533 x316))
(assert (x533 x159))
(assert (x109 x314 (- x434 x493)))
(assert (x61 (- x16 x434)))
(assert (= (x371 (x272 64 x108 2)) x108))
(assert (x533 x122))
(assert (x61 (- x16 x314)))
(assert (x61 (- x267 x493)))
(assert (x533 x164))
(assert (x109 x267 (- x316 x434)))
(assert (x533 x186))
(assert (x533 x21))
(assert (x520 x31 x171 x16 x493))
(assert (x533 x97))
(assert (x533 x137))
(assert (x533 x172))
(assert (x533 x83))
(assert (x533 x14))
(assert (x464 x516))
(assert (x533 x15))
(assert (x363 1000000000000000000))
(assert (= (or x322 x62) x111))
(assert (x533 x292))
(assert (x61 (- x16 x267)))
(assert (x109 x31 (- x171 x267)))
(assert (x464 x79))
(assert (=> (>= 10000 x557) (= 0 (x275 x557))))
(assert (x533 x218))
(assert (x533 x543))
(assert (x285 32))
(assert (x520 x31 x171 x493 x16))
(assert (= (=> (and (= (x491 128) x10) (= x426 x7) (= x128 (< 0 x10))) (and (=> x128 x221) (=> (not x128) x235))) x558))
(assert (x520 x267 x316 x493 x16))
(assert (x169 x198 x463))
(assert (= 0 (x275 1289409798)))
(assert (x109 x267 (- x316 x493)))
(assert (x533 x366))
(assert (x533 x489))
(assert (x61 (- x314 x267)))
(assert (< 10000 (x272 64 x353 8)))
(assert (= (x275 4294967295) 0))
(assert (x109 x316 (- x267 x314)))
(assert (= (x272 64 x250 0) (x275 (x272 64 x250 0))))
(assert (x459 20282409603651670423947251286015))
(assert (and (= (x311 9 3) 27) (= 9 (x311 3 3)) (= 81 (x311 27 3)) (= (x311 9 9) 81)))
(assert (x61 (- x434 x171)))
(assert (> (x272 64 x253 0) 10000))
(assert (x533 x165))
(assert (x109 x31 (- x171 x493)))
(assert (= 0 (x275 1000000000000000000)))
(assert (= (=> (and (= x318 (x311 x16 x493)) (= x233 (x268 x198 x463)) (<= 1 x463) (< (x311 x16 x493) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (not (>= (+ x394 x233) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x265 x243) (not (< x47 x493)) (= (* 1000000000000000000 x318) x198) (= x265 (x219 (+ x233 x394))) (>= 57896044618658097711785492504343953926634992332820282019728 x318) (>= x318 0) (= x493 (x412 (- x47 x99)))) x506) x328))
(assert (= x74 (x367 (x272 64 x250 x74))))
(assert (x533 x197))
(assert (x520 x171 x31 x267 x316))
(assert (x565 x16 x493 x314 x434))
(assert (= x91 (and x468 x30)))
(assert (= 64 (x299 (x272 64 x473 8))))
(assert (< (x272 64 x174 12) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x565 x31 x171 x314 x434))
(assert (= (and x402 (not x40)) x322))
(assert (x324 x183 340282366920938463463374607431768211456))
(assert (x533 x48))
(assert (= x438 (and x531 x306)))
(assert (x395 x462))
(assert (x285 x413))
(assert (x520 x16 x493 x314 x434))
(assert (= (x275 x467) (x275 (+ x467 1))))
(assert (x533 x279))
(assert (x520 x434 x314 x493 x16))
(assert (x61 x255))
(assert (x533 x185))
(assert (= (and x156 x560) x431))
(assert (x193 1000000000000000000 x255))
(assert (x533 x86))
(assert (x520 x493 x16 x31 x171))
(assert (x533 x201))
(assert (x459 2378104546))
(assert (x459 18446744073709551614))
(assert (x520 x31 x171 x267 x316))
(assert (x459 57896044618658097711785492504343953926634992332820282019728))
(assert (x533 x170))
(assert (x459 1000000000000000000))
(assert (= (and (not x560) x156) x266))
(assert (= x156 (or x146 x441)))
(assert (x533 x532))
(assert (x565 x434 x314 x267 x316))
(assert (x61 x308))
(assert (x533 x85))
(assert (= (x275 (x272 64 x250 x74)) (x272 64 x250 x74)))
(assert (x109 x314 (- x434 x171)))
(assert (= x62 (and x402 x40)))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x272 64 x253 0)))
(assert (= (and (not x163) x192) x66))
(assert (= x378 (=> (and (= x116 (x272 64 x174 12)) (= (x219 (+ x403 x209)) x190) (= x112 false) (= x419 false) (= x403 (x72 x116)) (= x245 false) (not (>= (+ x209 x403) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x359 x190) (= false x552) (= x380 (<= x107 x359))) x380)))
(assert (x533 x278))
(assert (= (x299 (x272 64 x108 2)) 64))
(assert (= (x371 (x272 64 x174 12)) x174))
(assert (x533 x293))
(assert (= (x299 (x272 64 x250 12)) 64))
(assert (x533 x271))
(assert (x533 x38))
(assert (= (=> (and (<= 1 x288) (= (x219 (+ x343 32)) x416) (= (x119 160) x343) (= (not (> x86 1)) x433) (= x86 (x491 128)) (= x288 (x491 128))) (and x433 x235)) x221))
(assert (= x331 (x371 (x272 64 x331 8))))
(assert (> (x272 64 x250 x74) 10000))
(assert (= (x275 340282366920938463463374607431768211455) 0))
(assert (=> (>= 10000 x250) (= 0 (x275 x250))))
(assert (x520 x267 x316 x171 x31))
(assert (x565 x434 x314 x31 x171))
(assert (x520 x314 x434 x493 x16))
(assert (= (or x438 x295) x351))
(assert (> (x272 64 x250 0) 10000))
(assert (x193 1000000000000000000 x308))
(assert (x533 x242))
(assert (x109 x31 (- x171 x314)))
(assert (=> (>= 10000 x123) (= (x275 x123) 0)))
(assert (x533 x528))
(assert (x61 (- x267 x31)))
(assert (x533 x188))
(assert (x109 x316 (- x267 x171)))
(assert (x61 (- x16 x31)))
(assert (= 8 (x367 (x272 64 x331 8))))
(assert (x109 x314 (- x434 x267)))
(assert (x459 57896044618658097711785492504343953926634992332820282019728792003956564819931))
(assert (x109 x314 (- x434 x31)))
(assert (x533 x430))
(assert (x459 18446744073709551615))
(assert (x464 x544))
(assert (x533 x95))
(assert (not (x459 (x272 64 x250 x74))))
(assert (x533 x429))
(assert (= (=> (and (= (x311 x267 x316) x308) (= x284 x307) (>= x352 1) (= x284 (x219 (+ x38 x561))) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x38 x561))) (<= 0 x308) (= x316 (x412 (- x555 x26))) (not (> x316 x555)) (= (x268 x247 x352) x561) (< (x311 x267 x316) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= x308 57896044618658097711785492504343953926634992332820282019728) (= (* x308 1000000000000000000) x247)) x511) x2))
(assert (x533 x283))
(assert (x520 x316 x267 x16 x493))
(assert (x109 x493 (- x16 x267)))
(assert (= 64 (x299 (x272 64 x253 0))))
(assert (x533 x129))
(assert (x533 x493))
(assert (x395 x413))
(assert (not x384))
(assert (x109 x493 (- x16 x171)))
(assert (x533 x314))
(assert (= 64 (x299 (x272 64 x353 8))))
(assert (x61 (- x171 x267)))
(assert (x533 x527))
(assert (x533 x106))
(assert (x169 x556 x88))
(assert (x533 x210))
(assert (x565 x316 x267 x314 x434))
(assert (= (and (not x336) x111) x249))
(assert (= 12 (x367 (x272 64 x250 12))))
(assert (x542 x183))
(assert (x533 x173))
(assert (x61 (- x171 x434)))
(assert (x533 x19))
(assert (x533 x141))
(assert (x285 x130))
(assert (x61 (- x434 x31)))
(assert (x533 x257))
(assert (x109 x316 (- x267 x31)))
(assert (= (x275 57896044618658097711785492504343953926634992332820282019728792003956564819967) 0))
(assert (= (x371 (x272 64 x253 0)) x253))
(assert (=> (<= x281 10000) (= (x275 x281) 0)))
(assert (x533 x411))
(assert (x533 x286))
(assert (x459 115792089237316195423570985008687907853269984665640564039457584007913129639840))
(assert (x379 1461501637330902918203684832716283019655932542975))
(assert (x109 x16 (- x493 x171)))
(assert (x109 x171 (- x31 x16)))
(assert (x533 x422))
(assert (x109 x493 (- x16 x314)))
(assert (x533 x253))
(assert (x61 x171))
(assert (x533 x183))
(assert (x565 x171 x31 x267 x316))
(assert (x520 x171 x31 x316 x267))
(assert (x533 x130))
(assert (not (x459 (x272 64 x250 12))))
(assert (not (x459 (x272 64 x253 0))))
(assert (x533 x561))
(assert (x533 x437))
(assert (x533 x557))
(assert (x533 x6))
(assert (x533 x284))
(assert (x520 x171 x31 x434 x314))
(assert (x533 x352))
(assert (x533 x94))
(assert (x61 (- x314 x16)))
(assert (x533 x209))
(assert (x61 (- x493 x316)))
(assert (x533 x312))
(assert (x533 x403))
(assert (= (=> (and (and (>= x484 1) (= x303 false) (<= x242 127) (= x117 false) (= 404098525 x172) (= x197 (x219 (+ x184 x528))) (= false x73) (= false x298) (= x107 x197) (= x484 (x393 x325)) (= false x205) (= false x423) (<= x75 57896044618658097711785492504343953926634992332820282019728) (not (>= (+ x528 x184) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= false x8) (<= x242 127) (= 4 x358) (= x200 false) (= x510 (x272 64 x250 12)) (= x323 x238) (= (x72 x510) x528) (= x79 36) (= x52 false) (= false x151)) (and (and (and (and (<= x173 127) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x337) (= x407 false) (= (x236 4) x6) (<= 68 x337) x392 (= x332 x6) (= x508 (x4 x442)) (>= 127 x173) (>= 18446744073709551615 x6) (= x283 (x236 0)) (= x108 x325) (<= 1 x28) (= x136 1889567281) (= x357 false) (= x28 (x393 x281)) (= false x24) (= false x387) (= false x222) (= x500 x108) (= x283 x356) (= x215 false) (= x442 (x272 64 x108 2)) (= x329 false) (= (>= x508 x158) x392)) (and (and (and (>= x199 1) (= (x524 x59) x478) (= (+ x196 32) x106) (= (x514 x325) x312) (= x414 (* x14 32)) (= (x519 115792089237316195423570985008687907853269984665640564039457584007913129639904 x130) x256) (= (+ 4 x6) x196) (<= x256 18446744073709551487) (= (x393 x325) x199) (> x337 x411) (= x479 (+ x106 x138)) (= (+ x256 128) x129) (not (> x479 x337)) (>= 18446744073709551615 x14) (= x469 false) (<= x159 127) (= x560 (< x106 x479)) (<= x159 127) (= (* x14 96) x138) (= x342 128) (>= x256 1) (= x14 (x161 x196)) (= x157 x312) (= x147 false) (= x59 x55) (= x411 (+ 31 x196)) (= x532 2997214202) (= x130 (+ 63 x414))) (= x554 x71)) (= x55 x426))) (and (= x269 false) (= x255 x201) (<= x85 127) (<= 1 x502) (>= 127 x85) (= 1289409798 x210) (= false x3) (>= x88 1) (= x315 false) (= (x393 x325) x502) (= (x268 x556 x88) x158) (= false x104) (= false x435) (= false x261) (>= 105312291668557186697918027683670432318895095400549111254310977535 x88) (= (* x255 1000000000000000000) x556) (= x544 36) (= x75 x255))) (and (= false x345) (<= x246 127) (= false x452) (= 1889567281 x432) (= x366 404098525) (= x466 x68) (= x211 (<= x296 x466)) (= false x133) (= (x125 x460) x296) (= x323 x253) (= x309 false) (= false x507) (= 36 x48) (= false x446) (>= x361 1) (= x339 (>= x75 x296)) (= false x449) (= x32 false) (= false x551) (= x516 4) (= false x230) (= x361 (x393 x325)) x339 (= false x386) (>= 20282409603651670423947251286015 x296) (= x460 (x272 64 x253 0)) (<= 1 x529) x211 (= x529 (x393 x325)) (= x224 x253) (<= x246 127) (<= x95 127) (= x140 false) (>= 127 x95)))) (and (=> (not x560) x558) (=> x560 x37))) x92))
(assert (= (x275 18446744073709551614) 0))
(assert (x533 x516))
(assert (x533 x135))
(assert (x533 x167))
(assert (x459 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (x533 x199))
(assert (= x388 (or x548 x33)))
(assert (=> (>= 10000 x473) (= (x275 x473) 0)))
(assert (x459 18446744073709551487))
(assert (x533 x463))
(assert (x109 x434 (- x314 x493)))
(assert (= 12 (x367 (x272 64 x174 12))))
(assert (= x192 (and x336 x111)))
(assert (x533 x349))
(assert (x520 x31 x171 x434 x314))
(assert (x363 x247))
(assert (x61 x316))
(assert (x533 x176))
(assert (x533 x136))
(assert (x520 x31 x171 x316 x267))
(assert (x520 x493 x16 x434 x314))
(assert (x109 x434 (- x314 x267)))
(assert (> (x272 64 x331 8) 10000))
(assert (x109 x31 (- x171 x16)))
(assert (x533 x426))
(assert (x533 x108))
(assert (= x369 (and x91 x76)))
(assert (= (x275 20282409603651670423947251286015) 0))
(assert (x61 (- x267 x16)))
(assert (= x495 (or x23 x369)))
(assert (x109 x267 (- x316 x16)))
(assert (x61 (- x267 x314)))
(assert (not (x459 (x272 64 x174 12))))
(assert (= (or x249 x229) x33))
(assert (x285 x462))
(assert (x109 x316 (- x267 x434)))
(assert (x363 x344))
(assert (x533 x39))
(assert (x533 x555))
(assert (= (and x375 (not x128)) x29))
(assert (= x306 (or x29 x338)))
(assert (x109 x314 (- x434 x16)))
(assert (= (x275 18446744073709551519) 0))
(assert (x533 x244))
(assert (x61 (- x31 x267)))
(assert (= x146 (and (not x458) x483)))
(assert (x565 x493 x16 x267 x316))
(assert (= x295 (and x306 (not x531))))
(assert (x464 x48))
(assert (= x338 (and x375 x128)))
(assert (x533 x347))
(assert (x533 x26))
(assert (= 0 (x275 404098525)))
(assert (x379 x462))
(assert (= (x275 57896044618658097711785492504343953926634992332820282019728792003956564819931) 0))
(assert (= 0 (x275 105312291668557186697918027683670432318895095400549111254310977535)))
(assert (not (x459 (x272 64 x174 0))))
(assert (x533 x126))
(assert (= (and (not x470) x270) x476))
(assert (x533 x325))
(assert (x109 x16 x493))
(assert (x533 x93))
(assert (x533 x148))
(assert (< (x272 64 x331 8) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (x275 115792089237316195423570985008687907853269984665640564039457584007913129639934) 0))
(assert (x533 x267))
(assert (= 0 (x367 (x272 64 x174 0))))
(assert (x61 32))
(assert (x61 (- x316 x31)))
(assert (x533 x553))
(assert (x533 x332))
(assert (x520 x16 x493 x316 x267))
(assert (x464 x358))
(assert (x109 x16 (- x493 x316)))
(assert (x533 x432))
(assert (x459 18446744073709551519))
(assert (x533 x243))
(assert (x533 x549))
(assert (x61 (- x434 x16)))
(assert (=> (>= 10000 x325) (= 0 (x275 x325))))
(assert (x533 x290))
(assert (x61 (- x316 x493)))
(assert (x533 x343))
(assert (x459 115792089237316195423570985008687907853269984665640564039457584007913129639934))
(assert (< 10000 (x272 64 x473 8)))
(assert (= 64 (x299 (x272 64 x331 8))))
(assert (x565 x316 x267 x16 x493))
(assert (x533 x317))
(assert (x565 x16 x493 x31 x171))
(assert (x520 x171 x31 x16 x493))
(assert (x520 x16 x493 x434 x314))
(assert (x459 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x520 x171 x31 x493 x16))
(assert (x533 x535))
(assert (= 0 (x275 2378104546)))
(assert (x565 x314 x434 x31 x171))
(assert (x61 (- x31 x16)))
(assert (x61 (- x31 x314)))
(assert (= (and (not x76) x91) x23))
(assert (x459 57896044618658097711785492504343953926634992332820282019728792003956564819967))
(assert (x459 340282366920938463463374607431768211455))
(assert (x379 x130))
(assert (x533 x208))
(assert (x533 x75))
(assert (x533 x10))
(assert (= (x275 (x272 64 x353 8)) (x272 64 x353 8)))
(assert (=> (>= 10000 x174) (= (x275 x174) 0)))
(assert (x459 2997214202))
(assert (= (x367 (x272 64 x174 x113)) x113))
(assert (x520 x267 x316 x314 x434))
(assert (x193 32 x14))
(assert (x61 (- x314 x31)))
(assert (x363 x556))
(assert (not (x459 (x272 64 x331 8))))
(assert (x61 (- x316 x16)))
(assert (x61 96))
(assert (x204 x425 1000000000000000000))
(assert (x533 x138))
(assert (= x481 (=> (= (= 0 (ite (< 0 x310) x310 (ite (not (< x26 x385)) 1 0))) x30) (and (=> (and (and (= x76 (< x385 x254)) (or (and (not x76) (= x254 x555)) (and x76 (= x555 x385)))) x30) x2) (=> (and (not x30) (= x38 x307)) x511)))))
(assert (x565 x267 x316 x314 x434))
(assert (x533 x191))
(assert (x109 x16 (- x493 x31)))
(assert (x565 x31 x171 x267 x316))
(assert (x533 x353))
(assert (x533 x416))
(assert (x533 x25))
(assert (> (x272 64 x250 12) 10000))
(assert (x533 x17))
(assert (x109 x316 (- x267 x493)))
(assert (x61 x493))
(assert (< 10000 (x272 64 x174 x113)))
(assert (x193 96 x14))
(assert (= (x275 (+ 1 x101)) (x275 x101)))
(assert (= (x367 (x272 64 x253 0)) 0))
(assert (x109 x16 (- x493 x434)))
(assert (x533 x421))
(assert (= (x272 64 x331 8) (x275 (x272 64 x331 8))))
(assert (= (x275 115792089237316195423570985008687907853269984665640564039457584007913129639935) 0))
(assert (x533 x498))
(assert (< 10000 (x272 64 x174 12)))
(assert (= (and x468 (not x30)) x82))
(assert (x520 x316 x267 x171 x31))
(assert (x533 x396))
(assert (x533 x88))
(assert (x565 x31 x171 x16 x493))
(assert (= 64 (x299 (x272 64 x174 12))))
(assert (x533 x473))
(assert (x61 (- x493 x267)))
(assert (< (x272 64 x250 x74) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x285 340282366920938463463374607431768211456))
(assert (= (x371 (x272 64 x250 x74)) x250))
(assert (= (x367 (x272 64 x353 8)) 8))
(assert (x533 x196))
(assert (= (=> (and (<= 1 x347) (= x347 (x491 128)) (>= x213 1) (= x183 (x499 x69)) (>= x41 1) (= x101 (x272 64 x473 8)) (= (x45 x101) x278) (= (x119 160) x535) (= x549 (x491 128)) (<= 1 x292) (= x473 (x519 1461501637330902918203684832716283019655932542975 x413)) (= (x119 160) x69) (= x208 x126) (= x536 (x219 (+ x226 32))) (= (x119 160) x226) (= (x491 128) x292) (= (x491 128) x213) (<= 1 x549) (= (x350 x212) x208) (= (x512 x145) x413) (<= x278 340282366920938463463374607431768211455) (= (< 0 x257) x368) (= x400 (x219 (+ 64 x535))) (= x83 (x119 160)) (<= 1 x409) (= (x491 128) x409) (= (x491 128) x102) (= (+ 1 x101) x212) (= (x491 128) x41) (= x430 (x512 x400)) (not x368) (= x257 (x412 (- x71 x278))) (= (x519 340282366920938463463374607431768211455 x183) x137) (= (x27 x536) x405) (= x189 (not (< 1 x102))) (= (x219 (+ x83 64)) x145)) (and x203 x189)) x559))
(assert (x61 x31))
(assert (=> (>= 10000 x396) (= (x275 x396) 0)))
(assert (x533 x400))
(assert (= (and x192 x163) x415))
(assert (= (and x483 x458) x270))
(assert (x533 x190))
(assert (x533 x115))
(assert (x520 x314 x434 x31 x171))
(assert (x533 x145))
(assert (x533 x28))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x272 64 x174 0)))
(assert (x533 x331))
(assert (x459 115792089237316195423570985008687907853269984665640564039457584007913129639841))
(assert (< (x272 64 x473 8) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x169 x247 x352))
(assert (= (x275 18446744073709551487) 0))
(assert (x459 404098525))
(assert (x533 x281))
(assert (x533 x233))
(assert (x459 4294967295))
(assert (x533 x394))
(assert (x61 (- x31 x493)))
(assert (x109 x31 x171))
(assert (x565 x493 x16 x31 x171))
(assert (x533 x87))
(assert (x520 x493 x16 x171 x31))
(assert (x533 x114))
(assert (x459 105312291668557186697918027683670432318895095400549111254310977535))
(assert (x109 x171 (- x31 x434)))
(assert (x533 x428))
(assert (= (=> (and (= (> x167 0) x531) (= (x491 128) x167)) (and (=> (not x531) x203) (=> x531 x559))) x235))
(assert (x533 x110))
(assert (x61 (- x493 x171)))
(assert (x533 x276))
(assert (x324 x218 1461501637330902918203684832716283019655932542976))
(assert (x520 x316 x267 x493 x16))
(assert (x533 x251))
(assert (x533 x544))
(assert (x533 x36))
(assert (x533 x409))
(assert (= (=> (and (and (and (= false x60) (= x250 x241)) (and (and (= x515 (x393 x325)) (= x55 x396) (<= x290 127) (= x440 false) (= x490 x68) (= x447 x93) (<= 0 x68) (= x18 2378104546) (= x340 (x272 64 x250 0)) (= false x304) x550 (= (x125 x340) x260) (>= x240 1) (= x43 128) (= x240 (x364 128)) (= x131 (x20 x396)) (>= 127 x290) (<= 1 x515) (= (> x36 0) x458) (= x36 (x364 128)) (= (<= x260 x490) x550) (>= 20282409603651670423947251286015 x260) (= (x406 x325) x447) (= x381 x250)) (= x554 x254))) (and (<= 0 x238) (<= x168 1461501637330902918203684832716283019655932542975) (>= x410 0) (<= x404 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= 4294967295 x34) (>= x123 1) (<= 0 x70) x305 (<= x248 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (= x281 x429)) (<= x319 1461501637330902918203684832716283019655932542975) (<= x132 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x420 0) (>= x34 0) (= x454 1) (<= x123 1461501637330902918203684832716283019655932542975) (>= x404 0) (>= x554 0) (= 36 x19) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x44) (= (< 0 (x393 x281)) x305) x450 (<= 0 x248) (= x241 x238) (<= 0 x132) x477 (= (> (x393 x123) 0) x477) (= 2997214202 x504) (not (= x123 x281)) (not (= x325 x429)) (<= x325 1461501637330902918203684832716283019655932542975) (<= 1 x281) (>= 1461501637330902918203684832716283019655932542975 x346) (= x377 false) (<= 0 x55) x53 (= x217 x325) (<= x7 1461501637330902918203684832716283019655932542975) (= x206 false) (>= 1461501637330902918203684832716283019655932542975 x55) (<= 0 x346) (>= x44 0) (>= 1461501637330902918203684832716283019655932542975 x281) (= x118 false) (<= 1 x325) (= x280 0) (= (< 0 (x393 x429)) x53) (>= 1461501637330902918203684832716283019655932542975 x429) (>= x168 0) (not (= x325 x281)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x420) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x410) (<= x70 1461501637330902918203684832716283019655932542975) (= false x563) (= x450 (< 0 (x393 x325))) (<= 1 x429) (<= x238 1461501637330902918203684832716283019655932542975) (not (= x123 x429)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x554) (not (= x325 x123)))) (and (=> (and (and (or (and (= x310 (ite (= x254 x26) 1 0)) (not x470)) (and (= x17 x310) x470)) (and (<= x26 340282366920938463463374607431768211455) (= x38 (x350 x180)) (= x541 (x219 (+ 64 x527))) (>= 340282366920938463463374607431768211455 x267) (= (x143 160) x527) (= x180 (+ x467 1)) (= (x162 x541) x352) (= x114 (x364 128)) (>= x453 1) (= (x143 160) x15) (= (x272 64 x353 8) x467) (= (x89 x15) x218) (= x353 (x519 1461501637330902918203684832716283019655932542975 x218)) (>= x114 1) (= (x364 128) x453) (= x17 (ite (= 0 x267) (ite (= x267 0) 1 0) (ite (= 0 x352) 1 0))) (= (< 0 x17) x470) (= (x78 x467) x267) (= (x45 x467) x26))) x458) x481) (=> (and (not x458) (= 0 x184)) x92))) x384))
(assert (x109 x316 (- x267 x16)))
(assert (= (x272 64 x108 2) (x275 (x272 64 x108 2))))
(assert (= x483 true))
(assert (= (x299 (x272 64 x174 0)) 64))
(assert (x520 x267 x316 x31 x171))
(assert (x533 x258))
(assert (x379 x218))
(assert (x533 x307))
(assert (= (x275 115792089237316195423570985008687907853269984665640564039457584007913129639841) 0))
(assert (x533 x59))
(assert (x109 x314 (- x434 x316)))
(assert (x533 x356))
(assert (= x441 (or x82 x495)))
(assert (x109 x171 (- x31 x316)))
(assert (x520 x171 x31 x314 x434))
(assert (= (x371 (x272 64 x250 12)) x250))
(assert (x533 x502))
(assert (x61 (- x31 x316)))
(assert (x395 x218))
(assert (x565 x171 x31 x16 x493))
(assert (= (=> (and (and (and (= x554 x39) (and (>= 127 x534) (= x68 x63) (= false x56) (= x127 x417) (= x497 (x393 x325)) (= x390 (>= x63 x421)) (>= x497 1) (= x421 (x125 x382)) (= x443 (x372 128)) (= (x540 x325) x127) (= 128 x341) (= false x154) (= x553 2378104546) (<= x534 127) (= x25 x174) (= x98 (< 0 x148)) (= x21 (x471 x557)) (= (x372 128) x148) (= x55 x557) x390 (>= x443 1) (>= 20282409603651670423947251286015 x421) (= x382 (x272 64 x174 0)))) (and (= x262 false) (= x174 x12))) (and (= x496 36) (= x64 false) (= x238 x12) (= false x383))) (and (=> (and (not x98) (= 0 x209)) x378) (=> (and (and (and (= x428 (x287 160)) (>= x120 1) (= (x376 x475) x16) (= (x272 64 x331 8) x475) (<= x16 340282366920938463463374607431768211455) (= (+ x475 1) x121) (= x463 (x124 x264)) (<= 1 x422) (= (x519 1461501637330902918203684832716283019655932542975 x462) x331) (= x170 (x287 160)) (= x120 (x372 128)) (<= x99 340282366920938463463374607431768211455) (= x40 (> x165 0)) (= (x424 x121) x394) (= x165 (ite (= 0 x16) (ite (= 0 x16) 1 0) (ite (= x463 0) 1 0))) (= (x219 (+ 64 x170)) x264) (= x422 (x372 128)) (= (x509 x428) x462) (= x99 (x547 x475))) (or (and (= (ite (= x39 x99) 1 0) x115) (not x40)) (and (= x165 x115) x40))) x98) x90))) x203))
(assert (= (x275 (x272 64 x174 12)) (x272 64 x174 12)))
(assert (x533 x484))
(assert (x533 x226))
(assert (x61 x318))
(assert (x533 x171))
(assert (x533 x127))
(assert (x61 x267))
(assert (x379 x413))
(assert (= 8 (x367 (x272 64 x473 8))))
(assert (= x468 (or x476 x320)))
(assert (x533 x385))
(assert (x533 x102))
(assert (x533 x319))
(assert (=> (>= 10000 x59) (= (x275 x59) 0)))
(assert (x61 x314))
(assert (= 64 (x299 (x272 64 x250 x74))))
(assert (x533 x47))
(assert (not (x459 (x272 64 x174 x113))))
(assert (x61 (- x316 x171)))
(assert (= (x275 1461501637330902918203684832716283019655932542975) 0))
(assert (x533 x254))
(assert (x533 x157))
(assert (x533 x358))
(assert (x520 x267 x316 x16 x493))
(assert (x61 (- x171 x16)))
(assert (x109 x16 (- x493 x267)))
(assert (x109 x171 (- x31 x493)))
(assert (x109 x31 (- x171 x434)))
(assert (x533 x505))
(assert (= (=> (and (<= x94 340282366920938463463374607431768211455) (= x259 (+ x258 32)) (= (x219 (+ 32 x252)) x286) (>= 18446744073709551615 x129) (>= x337 132) (<= 96 x313) (= (x412 (- x337 x106)) x313) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x337) (= x530 (not (> x479 (+ x259 32)))) (= x22 (x161 x259)) (not (> x129 x202)) (or (<= 115792089237316195423570985008687907853269984665640564039457584007913129639841 x129) (>= 18446744073709551519 x129)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639840 x129)) (= x202 (x219 (+ 96 x129))) (= x258 (+ x106 32)) (= x94 (x161 x106)) (< x129 x202) (>= 1461501637330902918203684832716283019655932542975 x22) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x129) (= x294 (x161 x258)) (or (>= x129 115792089237316195423570985008687907853269984665640564039457584007913129639841) (>= 18446744073709551519 x129)) (= x252 (x219 (+ 32 x129))) (<= x129 18446744073709551614) (>= 18446744073709551614 x129) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819931 x313) (<= x129 18446744073709551615)) (and x558 x530)) x37))
(assert (x459 1461501637330902918203684832716283019655932542975))
(assert (= (=> (and (not (> x171 x307)) (= x185 (x364 128)) (= (x268 x425 1000000000000000000) x176) (= x444 (x272 64 x250 x74)) (<= 0 x425) (= (+ 1 x180) x74) (<= 1 x185) (= (x364 128) x134) (= (x194 x444) x122) (= x425 (x311 x31 x171)) (= (x219 (+ 32 x135)) x437) (<= x425 57896044618658097711785492504343953926634992332820282019728792003956564819967) (= (not (< 1 x134)) x84) (< (x311 x31 x171) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x31 (x564 x437)) (= (x412 (- x307 x122)) x171) (= x135 (x143 160))) (and (=> (= x184 x176) x92) x84)) x511))
(assert (not (x459 (x272 64 x353 8))))
(assert (x533 x313))
(assert (x61 (- x493 x434)))
(assert (x520 x493 x16 x314 x434))
(assert (x533 x500))
(assert (x520 x434 x314 x316 x267))
(assert (= 0 (x275 1889567281)))
(assert (x285 x183))
(assert (x61 (- x493 x31)))
(assert (< (x272 64 x353 8) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= x473 (x371 (x272 64 x473 8))))
(assert (x61 x16))
(assert (x459 1289409798))
(assert (> (x272 64 x174 0) 10000))
(assert (x464 x496))
(assert (x533 x250))
(assert (x533 x478))
(assert (x533 x534))
(assert (x533 x541))
(assert (x533 x31))
(assert (> (x272 64 x108 2) 10000))
(assert (x533 x333))
(assert (x61 (- x316 x314)))
(assert (x193 1000000000000000000 x318))
(assert (x533 x496))
(assert (x464 x19))
(assert (x533 x265))
(assert (x109 x267 (- x316 x31)))
(assert (x565 x316 x267 x31 x171))
(assert (x61 (- x434 x493)))
(assert (= x402 (and x98 x351)))
(assert (x363 x198))
(assert (x533 x71))
(assert (x533 x405))
(assert (x565 x314 x434 x267 x316))
(assert (x533 x174))
(assert (x109 x16 (- x493 x314)))
(assert (x324 x413 1461501637330902918203684832716283019655932542976))
(assert (x533 x264))
(assert (x61 (- x314 x493)))
(assert (x533 x296))
(assert (x520 x434 x314 x31 x171))
(assert (x363 x88))
(assert (x533 x508))
(assert (=> (>= 10000 x253) (= 0 (x275 x253))))
(assert (x285 1461501637330902918203684832716283019655932542976))
(assert (x533 x413))
(assert (x533 x443))
(assert (x160 x130))
(assert (= x174 (x371 (x272 64 x174 x113))))
(assert (x109 x434 (- x314 x316)))
(assert (x61 (- x267 x171)))
(assert (x520 x316 x267 x314 x434))
(assert (x204 x344 1000000000000000000))
(assert (x61 (- x171 x493)))
(assert (x565 x267 x316 x16 x493))
(assert (= (or x66 x415) x229))
(assert (x565 x493 x16 x314 x434))
(assert (not (x459 (x272 64 x473 8))))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x272 64 x250 12)))
(assert (x533 x354))
(assert (x533 x337))
(assert (x533 x536))
(assert (= 0 (x275 57896044618658097711785492504343953926634992332820282019728)))
(assert (x61 (- x493 x314)))
(assert (= (x367 (x272 64 x108 2)) 2))
(assert (< (x272 64 x108 2) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x363 x352))
(assert (=> (<= x429 10000) (= (x275 x429) 0)))
(assert (x533 x22))
(assert (= (x275 (x272 64 x174 0)) (x272 64 x174 0)))
(assert (x324 x462 1461501637330902918203684832716283019655932542976))
(check-sat)
(exit)
