(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Certora
Generated on: 2024-04-10
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x296 (Int) Int)
(declare-fun x195 () Int)
(declare-fun x111 () Int)
(declare-fun x504 () Int)
(declare-fun x509 () Bool)
(declare-fun x138 () Bool)
(declare-fun x119 () Int)
(declare-fun x107 () Int)
(declare-fun x207 () Int)
(declare-fun x417 (Int) Int)
(declare-fun x472 (Int Int) Int)
(declare-fun x335 () Int)
(declare-fun x99 () Bool)
(declare-fun x475 () Int)
(declare-fun x432 () Int)
(declare-fun x268 () Int)
(declare-fun x370 () Int)
(declare-fun x342 () Bool)
(declare-fun x488 () Bool)
(declare-fun x149 () Bool)
(declare-fun x179 () Int)
(declare-fun x77 () Int)
(declare-fun x355 () Bool)
(declare-fun x313 () Bool)
(declare-fun x212 () Int)
(declare-fun x487 () Int)
(declare-fun x181 () Bool)
(declare-fun x97 () Int)
(declare-fun x338 () Int)
(declare-fun x373 (Int) Int)
(declare-fun x94 () Int)
(declare-fun x281 () Int)
(declare-fun x152 () Int)
(declare-fun x501 () Int)
(declare-fun x62 () Int)
(declare-fun x275 () Bool)
(declare-fun x192 () Int)
(declare-fun x279 () Int)
(declare-fun x481 () Bool)
(declare-fun x171 () Bool)
(declare-fun x383 () Bool)
(declare-fun x264 () Int)
(declare-fun x327 () Int)
(declare-fun x459 () Int)
(declare-fun x269 () Int)
(declare-fun x449 () Int)
(declare-fun x307 () Int)
(declare-fun x25 () Int)
(declare-fun x4 () Bool)
(declare-fun x379 () Int)
(declare-fun x258 () Int)
(declare-fun x36 () Bool)
(declare-fun x349 (Int Int) Int)
(declare-fun x477 () Int)
(declare-fun x251 () Int)
(declare-fun x302 () Int)
(declare-fun x131 () Bool)
(declare-fun x196 () Int)
(declare-fun x372 () Int)
(declare-fun x85 () Bool)
(declare-fun x430 () Int)
(declare-fun x333 (Int Int) Int)
(declare-fun x51 () Int)
(declare-fun x386 () Bool)
(declare-fun x165 () Int)
(declare-fun x221 () Int)
(declare-fun x468 (Int) Int)
(declare-fun x235 () Bool)
(declare-fun x421 () Bool)
(declare-fun x209 () Int)
(declare-fun x289 () Bool)
(declare-fun x489 () Int)
(declare-fun x457 () Bool)
(declare-fun x71 () Int)
(declare-fun x478 () Bool)
(declare-fun x253 () Int)
(declare-fun x374 () Int)
(declare-fun x315 () Int)
(declare-fun x399 () Int)
(declare-fun x28 () Int)
(declare-fun x220 () Int)
(declare-fun x359 () Int)
(declare-fun x439 () Int)
(declare-fun x169 () Int)
(declare-fun x15 () Int)
(declare-fun x80 (Int) Int)
(declare-fun x86 () Int)
(declare-fun x38 () Bool)
(declare-fun x276 () Bool)
(declare-fun x366 () Bool)
(declare-fun x58 () Int)
(declare-fun x26 () Int)
(declare-fun x510 () Int)
(declare-fun x189 () Int)
(declare-fun x243 () Bool)
(declare-fun x426 () Int)
(declare-fun x347 () Bool)
(declare-fun x286 () Int)
(declare-fun x172 (Int Int) Int)
(declare-fun x226 () Int)
(declare-fun x497 () Bool)
(declare-fun x396 () Int)
(declare-fun x59 () Bool)
(declare-fun x303 () Int)
(declare-fun x53 (Int Int) Int)
(declare-fun x294 () Bool)
(declare-fun x79 () Bool)
(declare-fun x63 (Int Int) Int)
(declare-fun x30 () Bool)
(declare-fun x249 () Int)
(declare-fun x162 () Bool)
(declare-fun x401 () Bool)
(declare-fun x326 (Int) Int)
(declare-fun x217 () Bool)
(declare-fun x482 () Int)
(declare-fun x64 () Int)
(declare-fun x113 () Int)
(declare-fun x48 () Int)
(declare-fun x513 () Int)
(declare-fun x46 () Int)
(declare-fun x31 (Int) Int)
(declare-fun x185 () Int)
(declare-fun x178 () Int)
(declare-fun x156 (Int) Int)
(declare-fun x458 () Int)
(declare-fun x22 () Bool)
(declare-fun x92 () Int)
(declare-fun x514 () Int)
(declare-fun x499 () Int)
(declare-fun x184 () Int)
(declare-fun x69 () Int)
(declare-fun x240 () Bool)
(declare-fun x187 () Int)
(declare-fun x110 () Int)
(declare-fun x208 () Bool)
(declare-fun x244 () Int)
(declare-fun x175 () Int)
(declare-fun x124 () Bool)
(declare-fun x238 () Int)
(declare-fun x486 () Bool)
(declare-fun x205 () Int)
(declare-fun x159 () Int)
(declare-fun x340 () Int)
(declare-fun x147 () Bool)
(declare-fun x247 () Int)
(declare-fun x10 () Int)
(declare-fun x362 () Bool)
(declare-fun x492 () Int)
(declare-fun x160 () Int)
(declare-fun x227 () Int)
(declare-fun x216 (Int) Int)
(declare-fun x413 () Int)
(declare-fun x40 () Bool)
(declare-fun x278 () Int)
(declare-fun x95 () Int)
(declare-fun x452 () Int)
(declare-fun x445 () Int)
(declare-fun x498 (Int Int) Int)
(declare-fun x115 () Int)
(declare-fun x368 () Int)
(declare-fun x350 (Int) Int)
(declare-fun x424 () Int)
(declare-fun x441 () Bool)
(declare-fun x323 () Bool)
(declare-fun x277 () Int)
(declare-fun x346 () Bool)
(declare-fun x88 () Bool)
(declare-fun x236 () Int)
(declare-fun x246 () Bool)
(declare-fun x117 () Int)
(declare-fun x423 () Int)
(declare-fun x440 () Bool)
(declare-fun x460 () Int)
(declare-fun x473 () Int)
(declare-fun x68 () Bool)
(declare-fun x154 () Bool)
(declare-fun x167 () Bool)
(declare-fun x505 () Int)
(declare-fun x155 () Int)
(declare-fun x123 () Int)
(declare-fun x199 () Int)
(declare-fun x82 () Int)
(declare-fun x12 () Int)
(declare-fun x98 () Int)
(declare-fun x237 () Bool)
(declare-fun x41 () Int)
(declare-fun x55 () Bool)
(declare-fun x9 () Bool)
(declare-fun x358 () Bool)
(declare-fun x13 () Bool)
(declare-fun x24 () Bool)
(declare-fun x427 () Int)
(declare-fun x106 () Bool)
(declare-fun x433 () Bool)
(declare-fun x448 () Bool)
(declare-fun x325 (Int) Int)
(declare-fun x336 () Int)
(declare-fun x479 () Int)
(declare-fun x484 () Int)
(declare-fun x464 () Int)
(declare-fun x512 () Bool)
(declare-fun x145 () Bool)
(declare-fun x320 () Int)
(declare-fun x239 () Int)
(declare-fun x295 () Bool)
(declare-fun x225 () Int)
(declare-fun x126 () Bool)
(declare-fun x109 () Bool)
(declare-fun x435 () Bool)
(declare-fun x250 (Int) Int)
(declare-fun x447 () Int)
(declare-fun x158 () Int)
(declare-fun x164 (Int) Int)
(declare-fun x496 () Bool)
(declare-fun x201 () Bool)
(declare-fun x287 () Int)
(declare-fun x54 () Int)
(declare-fun x508 () Int)
(declare-fun x89 () Int)
(declare-fun x182 () Int)
(declare-fun x328 () Int)
(declare-fun x414 () Int)
(declare-fun x375 () Int)
(declare-fun x371 () Bool)
(declare-fun x5 () Int)
(declare-fun x466 () Bool)
(declare-fun x405 () Bool)
(declare-fun x316 (Int Int) Int)
(declare-fun x137 () Bool)
(declare-fun x100 () Int)
(declare-fun x436 () Int)
(declare-fun x369 () Int)
(declare-fun x70 () Int)
(declare-fun x35 () Int)
(declare-fun x444 () Int)
(declare-fun x197 () Bool)
(declare-fun x450 () Bool)
(declare-fun x252 (Int) Int)
(declare-fun x377 () Bool)
(declare-fun x507 () Int)
(declare-fun x357 (Int) Int)
(declare-fun x60 () Bool)
(declare-fun x288 () Bool)
(declare-fun x272 () Int)
(declare-fun x470 () Bool)
(declare-fun x494 () Int)
(declare-fun x204 (Int Int) Int)
(declare-fun x257 () Int)
(declare-fun x407 () Int)
(declare-fun x474 () Int)
(declare-fun x353 () Int)
(declare-fun x282 () Int)
(declare-fun x56 () Bool)
(declare-fun x140 () Int)
(declare-fun x176 () Bool)
(declare-fun x397 () Bool)
(declare-fun x392 () Int)
(declare-fun x173 () Int)
(declare-fun x132 () Int)
(declare-fun x491 () Int)
(declare-fun x139 () Int)
(declare-fun x291 (Int) Int)
(declare-fun x206 () Int)
(declare-fun x404 () Bool)
(declare-fun x214 (Int) Int)
(declare-fun x351 () Int)
(declare-fun x382 () Int)
(declare-fun x381 () Bool)
(declare-fun x141 () Bool)
(declare-fun x485 () Int)
(declare-fun x393 () Int)
(declare-fun x389 () Bool)
(declare-fun x120 () Int)
(declare-fun x211 () Int)
(declare-fun x39 () Bool)
(declare-fun x438 () Int)
(declare-fun x116 () Int)
(declare-fun x334 () Int)
(declare-fun x490 () Bool)
(declare-fun x428 () Int)
(declare-fun x150 () Int)
(declare-fun x418 () Int)
(declare-fun x394 () Int)
(declare-fun x42 () Bool)
(declare-fun x434 () Int)
(declare-fun x43 () Bool)
(declare-fun x174 () Bool)
(declare-fun x471 () Int)
(declare-fun x462 () Bool)
(declare-fun x352 () Bool)
(declare-fun x148 () Bool)
(declare-fun x183 () Int)
(declare-fun x422 () Int)
(declare-fun x283 () Bool)
(declare-fun x146 () Int)
(declare-fun x81 () Bool)
(declare-fun x73 () Int)
(declare-fun x467 () Bool)
(declare-fun x493 () Bool)
(declare-fun x61 () Int)
(declare-fun x260 () Int)
(declare-fun x304 () Int)
(declare-fun x129 () Int)
(declare-fun x332 () Int)
(declare-fun x298 () Bool)
(declare-fun x180 () Bool)
(declare-fun x45 () Int)
(declare-fun x385 () Int)
(declare-fun x108 () Bool)
(declare-fun x446 () Bool)
(declare-fun x102 () Bool)
(declare-fun x193 (Int) Bool)
(declare-fun x191 () Int)
(declare-fun x188 () Int)
(declare-fun x425 () Int)
(declare-fun x6 () Int)
(declare-fun x76 () Int)
(declare-fun x388 () Bool)
(declare-fun x228 (Int) Int)
(declare-fun x376 () Bool)
(declare-fun x142 () Bool)
(declare-fun x222 () Int)
(declare-fun x231 () Bool)
(declare-fun x387 () Bool)
(declare-fun x213 () Int)
(declare-fun x52 (Int) Int)
(declare-fun x259 () Int)
(declare-fun x65 () Int)
(declare-fun x301 () Int)
(declare-fun x461 () Int)
(declare-fun x233 () Int)
(declare-fun x420 () Int)
(declare-fun x134 () Int)
(declare-fun x308 () Int)
(declare-fun x248 () Int)
(declare-fun x47 () Int)
(declare-fun x437 () Bool)
(declare-fun x93 () Int)
(declare-fun x463 () Bool)
(declare-fun x500 () Int)
(declare-fun x87 () Int)
(declare-fun x416 (Int) Int)
(declare-fun x306 () Int)
(declare-fun x23 () Bool)
(declare-fun x219 () Int)
(declare-fun x284 () Int)
(declare-fun x400 () Bool)
(declare-fun x230 () Int)
(declare-fun x21 () Int)
(declare-fun x267 () Bool)
(declare-fun x83 () Int)
(declare-fun x409 () Bool)
(declare-fun x265 () Bool)
(declare-fun x254 () Bool)
(declare-fun x339 () Bool)
(declare-fun x218 () Int)
(declare-fun x341 () Int)
(declare-fun x318 () Bool)
(declare-fun x483 () Int)
(declare-fun x121 () Int)
(declare-fun x324 () Bool)
(declare-fun x33 () Bool)
(declare-fun x112 () Int)
(declare-fun x202 () Bool)
(declare-fun x348 () Bool)
(declare-fun x266 () Int)
(declare-fun x398 (Int Int Int) Int)
(declare-fun x242 () Int)
(declare-fun x343 () Bool)
(declare-fun x331 () Int)
(declare-fun x2 () Bool)
(declare-fun x27 () Int)
(declare-fun x402 () Bool)
(declare-fun x223 () Bool)
(declare-fun x229 () Int)
(declare-fun x293 () Bool)
(declare-fun x356 () Int)
(declare-fun x506 () Int)
(declare-fun x511 () Int)
(declare-fun x32 () Int)
(declare-fun x157 () Bool)
(declare-fun x215 () Bool)
(declare-fun x101 () Int)
(declare-fun x72 () Bool)
(declare-fun x118 () Bool)
(declare-fun x503 () Bool)
(declare-fun x516 () Bool)
(declare-fun x455 (Int) Int)
(declare-fun x319 () Int)
(declare-fun x161 () Bool)
(declare-fun x310 () Int)
(declare-fun x408 () Bool)
(declare-fun x168 () Bool)
(declare-fun x198 () Bool)
(declare-fun x232 () Int)
(declare-fun x19 () Bool)
(declare-fun x456 () Bool)
(declare-fun x384 () Int)
(declare-fun x136 () Bool)
(declare-fun x74 () Int)
(declare-fun x300 () Bool)
(declare-fun x292 () Int)
(declare-fun x480 () Int)
(define-fun x78 ((x495 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x495) (>= x495 0)) x495 (- x495 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x515 ((x495 Int)) Int (ite (and (< x495 0) (>= x495 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x495 115792089237316195423570985008687907853269984665640564039457584007913129639936) x495))
(define-fun x37 ((x495 Int)) Int (ite (and (>= x495 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x495)) x495 (ite (and (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 x495) (> 231584178474632390847141970017375815706539969331281128078915168015826259279872 x495)) (- x495 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (>= x495 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (< x495 0)) (+ x495 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x333 x495 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x367 ((x200 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x200) (<= 0 x200)))
(define-fun x337 ((x200 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x200) (>= x200 0)))
(define-fun x395 ((x200 Int) (x305 Int)) Bool (= (x172 x305 x200) (x172 x200 x305)))
(define-fun x378 ((x200 Int) (x305 Int)) Bool (and (=> (and (> x305 0) (< x200 0)) (> 0 (x172 x200 x305))) (=> (and (> 0 x305) (> x200 0)) (> 0 (x172 x200 x305))) (=> (and (< 0 x305) (< 0 x200)) (> (x172 x200 x305) 0)) (=> (and (< x305 0) (> 0 x200)) (< 0 (x172 x200 x305)))))
(define-fun x186 ((x200 Int) (x305 Int)) Bool (=> (and (> x305 0) (> x200 0)) (= (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x172 x200 x305)) (= x305 (x316 (x37 (x172 x200 x305)) x200)))))
(define-fun x312 ((x200 Int) (x305 Int)) Bool (=> (and (not (= x305 0)) (not (= 0 x200))) (and (= x305 (x316 (x172 x200 x305) x200)) (= x200 (x316 (x172 x200 x305) x305)))))
(define-fun x406 ((x200 Int) (x305 Int)) Bool (=> (and (< 0 x305) (> x200 0)) (= (< 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x172 x200 x305)) (< (x316 115792089237316195423570985008687907853269984665640564039457584007913129639935 x200) x305))))
(define-fun x133 ((x200 Int) (x305 Int)) Bool (and (= (x37 (x172 x200 x305)) (x37 (x172 (- x200 115792089237316195423570985008687907853269984665640564039457584007913129639936) x305))) (= (x37 (x172 x200 x305)) (x37 (x172 x200 (- x305 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x37 (x172 x200 x305)) (x37 (x172 (- x200 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x305 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))
(define-fun x469 ((x200 Int) (x305 Int)) Bool (and (=> (and (and (<= x200 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 0 x200)) (and (> x305 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x305))) (= (>= (x316 57896044618658097711785492504343953926634992332820282019728792003956564819968 x200) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x305)) (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x172 x200 (- x305 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (=> (and (and (> x305 0) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x305)) (and (> x200 0) (<= x200 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (<= (x172 x200 x305) 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= (x316 57896044618658097711785492504343953926634992332820282019728792003956564819967 x305) x200))) (=> (and (and (<= x305 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x305)) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x200) (<= x200 115792089237316195423570985008687907853269984665640564039457584007913129639935))) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 (x172 (- x200 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x305 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (>= (x316 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x305)) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x200)))) (=> (and (and (> x305 0) (<= x305 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (> x200 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x200 115792089237316195423570985008687907853269984665640564039457584007913129639935))) (= (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x172 (- x200 115792089237316195423570985008687907853269984665640564039457584007913129639936) x305)) (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x200) (x316 57896044618658097711785492504343953926634992332820282019728792003956564819968 x305))))))
(define-fun x465 ((x200 Int) (x305 Int)) Bool (and (x378 x200 x305) (x395 x200 x305) (x406 x200 x305) (x469 x200 x305) (x186 x200 x305) (x312 x200 x305) (x133 x200 x305)))
(define-fun x163 ((x200 Int)) Bool (and (= (x172 x200 0) 0) (= (x172 0 x200) 0)))
(define-fun x273 ((x200 Int)) Bool (and (= (x172 1 x200) x200) (= (x172 x200 1) x200)))
(define-fun x330 ((x200 Int)) Bool (and (x273 x200) (x163 x200)))
(define-fun x314 ((x200 Int)) Bool (and (= x200 (x204 115792089237316195423570985008687907853269984665640564039457584007913129639935 x200)) (= x200 (x204 x200 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x11 ((x200 Int)) Bool (and (= 0 (x204 x200 0)) (= 0 (x204 0 x200))))
(define-fun x329 ((x200 Int)) Bool (= (x204 x200 x200) x200))
(define-fun x127 ((x200 Int)) Bool (and (x314 x200) (x11 x200) (x329 x200)))
(define-fun x57 ((x200 Int) (x305 Int)) Bool (= (x204 x200 x305) (x204 x305 x200)))
(define-fun x16 ((x200 Int) (x305 Int)) Bool (and (=> (<= 0 x305) (>= x305 (x204 x200 x305))) (>= (x204 x200 x305) 0) (=> (<= 0 x200) (>= x200 (x204 x200 x305)))))
(define-fun x443 ((x200 Int) (x305 Int)) Bool (and (x16 x200 x305) (x57 x200 x305)))
(define-fun x344 ((x200 Int)) Bool (= (x333 x200 32) (x204 x200 31)))
(define-fun x135 ((x200 Int)) Bool (and (x443 x200 31) (x344 x200)))
(define-fun x166 ((x200 Int) (x305 Int)) Bool (and (> x305 (x333 x200 x305)) (>= (x333 x200 x305) 0)))
(define-fun x17 ((x200 Int) (x305 Int)) Bool (=> (and (<= 0 x200) (< 0 x305)) (= (= x200 (x333 x200 x305)) (> x305 x200))))
(define-fun x18 ((x200 Int) (x305 Int)) Bool (=> (and (> x305 0) (and (<= x305 x200) (< x200 (+ x305 x305)))) (= (x333 x200 x305) (- x200 x305))))
(define-fun x271 ((x200 Int) (x305 Int)) Bool (=> (< 0 x305) (= x200 (+ (x333 x200 x305) (* (x316 x200 x305) x305)))))
(define-fun x170 ((x200 Int) (x305 Int)) Bool (and (x166 x200 x305) (x17 x200 x305) (x271 x200 x305) (x18 x200 x305)))
(define-fun x270 ((x200 Int)) Bool (= (x333 0 x200) 0))
(define-fun x354 ((x200 Int)) Bool (= 0 (x333 x200 1)))
(define-fun x410 ((x200 Int)) Bool (= 0 (x333 x200 x200)))
(define-fun x285 ((x200 Int)) Bool (and (x354 x200) (x270 x200) (x410 x200)))
(define-fun x451 ((x200 Int) (x305 Int)) Bool (= (* x305 x200) (x172 x200 x305)))
(define-fun x442 ((x200 Int) (x305 Int)) Bool (and (= (x172 (- x200 115792089237316195423570985008687907853269984665640564039457584007913129639936) x305) (- (* x305 x200) (* x305 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x172 (- x200 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x305 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* x200 (- x305 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (- x305 115792089237316195423570985008687907853269984665640564039457584007913129639936) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (* (- x305 115792089237316195423570985008687907853269984665640564039457584007913129639936) x200) (x172 x200 (- x305 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x419 ((x200 Int) (x305 Int)) Bool (and (x312 x200 x305) (x442 x200 x305) (x406 x200 x305) (x133 x200 x305) (x186 x200 x305) (x469 x200 x305) (x451 x200 x305)))
(define-fun x105 ((x200 Int) (x305 Int)) Bool (=> (and (> x305 0) (> x200 0)) (and (>= (x316 x200 x305) 0) (<= (x316 x200 x305) x200))))
(define-fun x391 ((x200 Int) (x305 Int)) Bool (=> (and (and (< x200 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x200 0)) (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x305) (>= x305 1))) (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x316 x200 x305)) (>= (x316 x200 x305) 0))))
(define-fun x29 ((x200 Int) (x305 Int)) Bool (=> (and (> x200 x305) (> x305 1)) (< (x316 x200 x305) x200)))
(define-fun x262 ((x200 Int) (x305 Int)) Bool (=> (and (< 0 x305) (< 0 x200)) (= (< x200 x305) (= 0 (x316 x200 x305)))))
(define-fun x122 ((x200 Int) (x305 Int)) Bool (=> (and (< 0 x200) (< 0 x305)) (and (>= x200 (x172 (x316 x200 x305) x305)) (< (- x200 x305) (x172 (x316 x200 x305) x305)))))
(define-fun x431 ((x200 Int) (x305 Int)) Bool (and (x29 x200 x305) (x122 x200 x305) (x391 x200 x305) (x105 x200 x305) (x262 x200 x305)))
(define-fun x91 ((x200 Int)) Bool (= (x316 0 x200) 0))
(define-fun x245 ((x200 Int)) Bool (= x200 (x316 x200 1)))
(define-fun x453 ((x200 Int)) Bool (=> (not (= x200 0)) (= (x316 x200 x200) 1)))
(define-fun x363 ((x200 Int)) Bool (and (x453 x200) (x91 x200) (x245 x200)))
(define-fun x50 ((x200 Int)) Bool (and (= (x63 x200 115792089237316195423570985008687907853269984665640564039457584007913129639935) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x63 115792089237316195423570985008687907853269984665640564039457584007913129639935 x200) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(define-fun x128 ((x200 Int)) Bool (and (= x200 (x63 x200 0)) (= x200 (x63 0 x200))))
(define-fun x130 ((x200 Int)) Bool (= x200 (x63 x200 x200)))
(define-fun x411 ((x200 Int)) Bool (and (x50 x200) (x130 x200) (x128 x200)))
(define-fun x380 ((x200 Int) (x305 Int)) Bool (= (x63 x305 x200) (x63 x200 x305)))
(define-fun x34 ((x200 Int) (x305 Int)) Bool (and (=> (<= 0 x200) (<= x200 (x63 x200 x305))) (>= (+ x200 x305) (x63 x200 x305)) (=> (>= x305 0) (<= x305 (x63 x200 x305)))))
(define-fun x321 ((x200 Int) (x305 Int)) Bool (and (x380 x200 x305) (x34 x200 x305)))
(define-fun x415 ((x200 Int) (x305 Int)) Bool (=> (and (< 0 x305) (< 0 x200)) (and (< (- x200 x305) (* (x316 x200 x305) x305)) (<= (* x305 (x316 x200 x305)) x200))))
(define-fun x390 ((x200 Int) (x305 Int)) Bool (= (* (x316 x200 x305) x305) (- x200 (x204 (- x305 1) x200))))
(define-fun x194 ((x200 Int) (x305 Int)) Bool (and (x262 x200 x305) (x391 x200 x305) (x390 x200 x305) (x415 x200 x305) (x29 x200 x305) (x105 x200 x305)))
(define-fun x256 ((x200 Int)) Bool (= (x204 x200 1) (x333 x200 2)))
(define-fun x177 ((x200 Int)) Bool (and (x256 x200) (x443 x200 1)))
(define-fun x360 ((x200 Int)) Bool (= (x333 x200 128) (x204 x200 127)))
(define-fun x203 ((x200 Int)) Bool (and (x360 x200) (x443 x200 127)))
(define-fun x75 ((x241 Int)) Int 0)
(define-fun x67 ((x241 Int)) Int 0)
(define-fun x153 ((x241 Int)) Int 0)
(define-fun x345 ((x241 Int)) Int 0)
(define-fun x263 ((x241 Int)) Int 0)
(define-fun x125 ((x241 Int)) Int 0)
(define-fun x299 ((x241 Int)) Int 0)
(define-fun x66 ((x241 Int)) Int 0)
(define-fun x3 ((x241 Int)) Int 0)
(define-fun x502 ((x241 Int)) Int 0)
(define-fun x234 ((x241 Int)) Int 0)
(define-fun x290 ((x241 Int)) Int (ite (< x241 x508) (x31 x241) 0))
(define-fun x255 ((x241 Int)) Int (ite (and (> x508 x241) (<= 0 x241)) (x228 x241) (x290 x241)))
(define-fun x309 ((x241 Int)) Int (ite (= x82 x241) x420 (x326 x241)))
(define-fun x8 ((x241 Int)) Int (ite (= x241 x356) x278 (x309 x241)))
(define-fun x90 ((x241 Int)) Int (ite (= x241 128) 13 (x263 x241)))
(define-fun x454 ((x241 Int)) Int (ite (= x241 160) 39553310892875263560936207548857176834471854732421237974622739861269930573824 (x153 x241)))
(define-fun x103 ((x241 Int)) Int (ite (= 192 x241) 4 (x67 x241)))
(define-fun x151 ((x241 Int)) Int (ite (= 224 x241) 39473711962023174749424659199615060097653232135126263878786656434573155500032 (x75 x241)))
(define-fun x261 ((x241 Int)) Int (ite (= x241 256) 72464927124685711895252664195178772226123872012682517813167109100718830649344 (x3 x241)))
(define-fun x20 ((x241 Int)) Int (ite (and (> 288 x241) (>= x241 256)) (x252 (- x241 256)) (x261 x241)))
(define-fun x476 ((x241 Int)) Int 0)
(define-fun x297 ((x241 Int)) Int 0)
(define-fun x322 ((x241 Int)) Int (ite (= x241 x46) 0 (x468 x241)))
(define-fun x403 ((x241 Int)) Int (ite (= x165 x241) 0 (x455 x241)))
(define-fun x44 ((x241 Int)) Int (ite x421 (x468 x241) (x322 x241)))
(define-fun x274 ((x241 Int)) Int (ite x486 (x455 x241) (x403 x241)))
(define-fun x412 ((x241 Int)) Int (ite x503 (x468 x241) (ite x421 (x468 x241) (x322 x241))))
(define-fun x114 ((x241 Int)) Int (ite (= x241 320) 22163329580580053030292883849319169862539958002407764210677428189014622470144 (x125 x241)))
(define-fun x144 ((x241 Int)) Int (ite (= x494 x241) x385 (x412 x241)))
(define-fun x364 ((x241 Int)) Int (ite x108 (x455 x241) (ite x486 (x455 x241) (x403 x241))))
(define-fun x143 ((x241 Int)) Int (ite (= x241 x413) x277 (x364 x241)))
(define-fun x190 ((x241 Int)) Int (ite (= x241 288) 1 (x299 x241)))
(define-fun x14 ((x241 Int)) Int (ite (and (> 288 x241) (>= x241 256)) (x252 (- x241 256)) (x66 x241)))
(define-fun x317 ((x241 Int)) Int (ite x55 (x214 x241) (x216 x241)))
(define-fun x1 ((x241 Int)) Int (ite (= x71 x241) x209 (x317 x241)))
(define-fun x365 ((x241 Int)) Int (ite x19 (x20 x241) (x261 x241)))
(define-fun x210 ((x241 Int)) Int (ite (= x241 352) 34602258808455191227493136189427688107261027562213901346293687426555358216192 (x365 x241)))
(define-fun x224 ((x241 Int)) Int (ite (= 356 x241) x356 (x210 x241)))
(define-fun x84 ((x241 Int)) Int (ite (= x241 388) 0 (x224 x241)))
(define-fun x361 ((x241 Int)) Int (ite (= 420 x241) 0 (x84 x241)))
(define-fun x280 ((x241 Int)) Int (ite (= x241 452) 57005 (x361 x241)))
(define-fun x311 ((x241 Int)) Int (ite x131 (x416 x241) (x80 x241)))
(define-fun x7 ((x241 Int)) Int (ite (= x308 x241) x98 (x311 x241)))
(define-fun x96 ((x200 Int) (x305 Int) (x104 Int) (x429 Int)) Bool (=> (and (>= x429 x305) (>= x305 0) (>= x200 0) (>= x104 x200)) (<= (x172 x200 x305) (x172 x104 x429))))
(define-fun x49 ((x200 Int) (x305 Int) (x104 Int) (x429 Int)) Bool (=> (= x200 x104) (= (- (x172 x200 x305) (x172 x104 x429)) (x172 x200 (- x305 x429)))))
(assert (< 10000 (x472 32 3)))
(assert (x367 x302))
(assert (= (x164 (x398 64 x218 158)) 64))
(assert (x367 x266))
(assert (x367 x179))
(assert (x367 x253))
(assert (x170 x155 128))
(assert (x465 x282 (- x424 x185)))
(assert (x49 x249 x424 x244 x185))
(assert (x419 8 x370))
(assert (x465 x424 (- x249 x244)))
(assert (x330 x438))
(assert (x96 x185 x244 x424 x249))
(assert (x170 x95 128))
(assert (x367 x315))
(assert (x465 x249 (- x424 x282)))
(assert (x49 x424 x282 x185 x244))
(assert (x194 x248 2))
(assert (x367 x248))
(assert (> (x398 64 x242 158) 10000))
(assert (= (x349 115792089237316195423570985008687907853269984665640564039457584007913129639935 x292) (ite (< x292 256) (x316 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x53 2 x292)) 0)))
(assert (x193 1889567281))
(assert (= (x164 (x398 64 x242 156)) 64))
(assert (x367 x264))
(assert (x367 x230))
(assert (x49 x424 x282 x249 x244))
(assert (not (x193 (x398 64 x218 156))))
(assert (x330 (- x282 x244)))
(assert (x49 x185 x244 x282 x424))
(assert (x367 x428))
(assert (x367 x89))
(assert (= (and x42 (not x294)) x376))
(assert (x330 (- x249 x282)))
(assert (x465 x424 (- x249 x282)))
(assert (= x441 (and x313 x386)))
(assert (x49 x185 x244 x244 x249))
(assert (x330 (- x244 x282)))
(assert (= x389 (or x376 x254)))
(assert (= (and (not x405) x68) x488))
(assert (x49 x249 x424 x244 x249))
(assert (x285 x95))
(assert (= x324 (=> (and x59 (and (= x59 (not (< x182 x229))) (= (+ x46 1) x182))) x145)))
(assert (x127 x426))
(assert (x367 x272))
(assert (x330 x511))
(assert (x367 x73))
(assert (x367 x10))
(assert (x49 x424 x282 x244 x185))
(assert (x367 x418))
(assert (x127 x95))
(assert (= (and x223 x342) x467))
(assert (x367 x379))
(assert (= (x417 (x472 32 154)) (x472 32 154)))
(assert (= x149 (=> (and (= 0 x504) (= x244 (x14 256)) (= 0 x424) (= x370 (x90 128)) (= (x515 (- x45 (mod (ite (< x219 32) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x232) (= (< 31 x219) x138) (= x258 (x316 x248 2)) (= (x204 1 x248) x45) (or (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x232) (= 1 x232)) (= x219 (ite (< 0 x45) x258 (x204 127 x258))) (<= x370 18446744073709551615) (= 0 x107)) (and (=> (and (and (= (+ x165 x414) x139) (= (x472 32 154) x165) (= x414 (x316 (+ 31 x219) 32)) (= (> x139 x165) x512)) x138) (and (=> (not x512) x466) (=> x512 x448))) (=> (not x138) x13)))))
(assert (x443 x359 x259))
(assert (x411 x230))
(assert (x367 x192))
(assert (x285 2))
(assert (x285 x227))
(assert (x443 x150 x87))
(assert (x367 x61))
(assert (x465 x244 x185))
(assert (x330 (- x249 x424)))
(assert (x96 x244 x249 x424 x282))
(assert (x49 x249 x244 x249 x424))
(assert (x193 39473711962023174749424659199615060097653232135126263878786656434573155500032))
(assert (x367 x242))
(assert (x170 x370 32))
(assert (x170 x248 2))
(assert (x96 x244 x249 x244 x185))
(assert (x367 x107))
(assert (x367 x199))
(assert (x367 x394))
(assert (= (or x503 x371) x362))
(assert (x367 x459))
(assert (x285 x506))
(assert (=> (>= 10000 x218) (= (x417 x218) 0)))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x472 32 155)))
(assert (= (x472 32 3) (x417 (x472 32 3))))
(assert (x127 x188))
(assert (x419 8 x511))
(assert (x367 x504))
(assert (x367 x236))
(assert (= x371 (or x421 x397)))
(assert (< (x398 64 x218 161) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= 0 (x417 22163329580580053030292883849319169862539958002407764210677428189014622470144)))
(assert (x367 x336))
(assert (x465 x282 (- x424 x249)))
(assert (x367 x384))
(assert (x363 x248))
(assert (=> (<= x353 10000) (= 0 (x417 x353))))
(assert (= (and x148 x223) x409))
(assert (= (x398 64 x218 161) (x417 (x398 64 x218 161))))
(assert (x411 x489))
(assert (x177 x199))
(assert true)
(assert (x127 x514))
(assert (x367 x58))
(assert (x127 x51))
(assert (not (x193 (x398 64 x218 158))))
(assert (= (x417 382502381645197248123620639812464696550576095234) 0))
(assert (and (= (x53 2 21) 2097152) (= 562949953421312 (x53 2 49)) (= (x53 2 1) 2) (= 3064991081731777716716694054300618367237478244367204352 (x53 2 181)) (= 4398046511104 (x53 2 42)) (= 256 (x53 2 8)) (= 19807040628566084398385987584 (x53 2 94)) (= 10384593717069655257060992658440192 (x53 2 113)) (= (x53 2 102) 5070602400912917605986812821504) (= 137438953472 (x53 2 37)) (= (x53 2 207) 205688069665150755269371147819668813122841983204197482918576128) (= (x53 2 85) 38685626227668133590597632) (= 110427941548649020598956093796432407239217743554726184882600387580788736 (x53 2 236)) (= (x53 2 196) 100433627766186892221372630771322662657637687111424552206336) (= 8589934592 (x53 2 33)) (= 6901746346790563787434755862277025452451108972170386555162524223799296 (x53 2 232)) (= 87112285931760246646623899502532662132736 (x53 2 136)) (= 2596148429267413814265248164610048 (x53 2 111)) (= (x53 2 191) 3138550867693340381917894711603833208051177722232017256448) (= (x53 2 176) 95780971304118053647396689196894323976171195136475136) (= (x53 2 107) 162259276829213363391578010288128) (= (x53 2 227) 215679573337205118357336120696157045389097155380324579848828881993728) (= 28269553036454149273332760011886696253239742350009903329945699220681916416 (x53 2 244)) (= 365375409332725729550921208179070754913983135744 (x53 2 158)) (= (x53 2 83) 9671406556917033397649408) (= (x53 2 231) 3450873173395281893717377931138512726225554486085193277581262111899648) (= (x53 2 119) 664613997892457936451903530140172288) (= (x53 2 20) 1048576) (= 26328072917139296674479506920917608079723773850137277813577744384 (x53 2 214)) (= (x53 2 120) 1329227995784915872903807060280344576) (= 75557863725914323419136 (x53 2 76)) (= 85070591730234615865843651857942052864 (x53 2 126)) (= 18446744073709551616 (x53 2 64)) (= (x53 2 101) 2535301200456458802993406410752) (= (x53 2 78) 302231454903657293676544) (= 6739986666787659948666753771754907668409286105635143120275902562304 (x53 2 222)) (= 70368744177664 (x53 2 46)) (= (x53 2 61) 2305843009213693952) (= (x53 2 250) 1809251394333065553493296640760748560207343510400633813116524750123642650624) (= (x53 2 226) 107839786668602559178668060348078522694548577690162289924414440996864) (= (x53 2 91) 2475880078570760549798248448) (= (x53 2 13) 8192) (= (x53 2 3) 8) (= (x53 2 171) 2993155353253689176481146537402947624255349848014848) (= 822752278660603021077484591278675252491367932816789931674304512 (x53 2 209)) (= (x53 2 5) 32) (= (x53 2 106) 81129638414606681695789005144064) (= (x53 2 199) 803469022129495137770981046170581301261101496891396417650688) (= (x53 2 18) 262144) (= (x53 2 211) 3291009114642412084309938365114701009965471731267159726697218048) (= 1532495540865888858358347027150309183618739122183602176 (x53 2 180)) (= 6582018229284824168619876730229402019930943462534319453394436096 (x53 2 212)) (= (x53 2 122) 5316911983139663491615228241121378304) (= (x53 2 104) 20282409603651670423947251286016) (= (x53 2 166) 93536104789177786765035829293842113257979682750464) (= (x53 2 246) 113078212145816597093331040047546785012958969400039613319782796882727665664) (= (x53 2 17) 131072) (= (x53 2 248) 452312848583266388373324160190187140051835877600158453279131187530910662656) (= 11972621413014756705924586149611790497021399392059392 (x53 2 173)) (= (x53 2 34) 17179869184) (= (x53 2 169) 748288838313422294120286634350736906063837462003712) (= 316912650057057350374175801344 (x53 2 98)) (= (x53 2 124) 21267647932558653966460912964485513216) (= (x53 2 254) 28948022309329048855892746252171976963317496166410141009864396001978282409984) (= (x53 2 93) 9903520314283042199192993792) (= (x53 2 43) 8796093022208) (= (x53 2 148) 356811923176489970264571492362373784095686656) (= (x53 2 133) 10889035741470030830827987437816582766592) (= 158456325028528675187087900672 (x53 2 97)) (= 41538374868278621028243970633760768 (x53 2 115)) (= (x53 2 6) 64) (= (x53 2 117) 166153499473114484112975882535043072) (= 4722366482869645213696 (x53 2 72)) (= (x53 2 163) 11692013098647223345629478661730264157247460343808) (= (x53 2 105) 40564819207303340847894502572032) (= (x53 2 121) 2658455991569831745807614120560689152) (= 1073741824 (x53 2 30)) (= 7237005577332262213973186563042994240829374041602535252466099000494570602496 (x53 2 252)) (= (x53 2 193) 12554203470773361527671578846415332832204710888928069025792) (= 1645504557321206042154969182557350504982735865633579863348609024 (x53 2 210)) (= (x53 2 217) 210624583337114373395836055367340864637790190801098222508621955072) (= 22300745198530623141535718272648361505980416 (x53 2 144)) (= (x53 2 160) 1461501637330902918203684832716283019655932542976) (= 5846006549323611672814739330865132078623730171904 (x53 2 162)) (= (x53 2 240) 1766847064778384329583297500742918515827483896875618958121606201292619776) (= (x53 2 82) 4835703278458516698824704) (= 9223372036854775808 (x53 2 63)) (= (x53 2 221) 3369993333393829974333376885877453834204643052817571560137951281152) (= (x53 2 142) 5575186299632655785383929568162090376495104) (= 604462909807314587353088 (x53 2 79)) (= (x53 2 130) 1361129467683753853853498429727072845824) (= (x53 2 230) 1725436586697640946858688965569256363112777243042596638790631055949824) (= 6427752177035961102167848369364650410088811975131171341205504 (x53 2 202)) (= (x53 2 233) 13803492693581127574869511724554050904902217944340773110325048447598592) (= 5708990770823839524233143877797980545530986496 (x53 2 152)) (= (x53 2 145) 44601490397061246283071436545296723011960832) (= (x53 2 55) 36028797018963968) (= (x53 2 241) 3533694129556768659166595001485837031654967793751237916243212402585239552) (= (x53 2 251) 3618502788666131106986593281521497120414687020801267626233049500247285301248) (= (x53 2 114) 20769187434139310514121985316880384) (= (x53 2 200) 1606938044258990275541962092341162602522202993782792835301376) (= (x53 2 29) 536870912) (= 25108406941546723055343157692830665664409421777856138051584 (x53 2 194)) (= (x53 2 203) 12855504354071922204335696738729300820177623950262342682411008) (= (x53 2 74) 18889465931478580854784) (= 618970019642690137449562112 (x53 2 89)) (= (x53 2 165) 46768052394588893382517914646921056628989841375232) (= (x53 2 58) 288230376151711744) (= (x53 2 51) 2251799813685248) (= (x53 2 218) 421249166674228746791672110734681729275580381602196445017243910144) (= (x53 2 109) 649037107316853453566312041152512) (= 2722258935367507707706996859454145691648 (x53 2 131)) (= (x53 2 112) 5192296858534827628530496329220096) (= 862718293348820473429344482784628181556388621521298319395315527974912 (x53 2 229)) (= 23945242826029513411849172299223580994042798784118784 (x53 2 174)) (= 2147483648 (x53 2 31)) (= 1180591620717411303424 (x53 2 70)) (= (x53 2 65) 36893488147419103232) (= 89202980794122492566142873090593446023921664 (x53 2 146)) (= (x53 2 127) 170141183460469231731687303715884105728) (= (x53 2 225) 53919893334301279589334030174039261347274288845081144962207220498432) (= 2923003274661805836407369665432566039311865085952 (x53 2 161)) (= (x53 2 224) 26959946667150639794667015087019630673637144422540572481103610249216) (= (x53 2 77) 151115727451828646838272) (= (x53 2 45) 35184372088832) (= 1393796574908163946345982392040522594123776 (x53 2 140)) (= 73786976294838206464 (x53 2 66)) (= (x53 2 188) 392318858461667547739736838950479151006397215279002157056) (= 140737488355328 (x53 2 47)) (= 309485009821345068724781056 (x53 2 88)) (= (x53 2 90) 1237940039285380274899124224) (= (x53 2 12) 4096) (= 105312291668557186697918027683670432318895095400549111254310977536 (x53 2 216)) (= (x53 2 201) 3213876088517980551083924184682325205044405987565585670602752) (= 590295810358705651712 (x53 2 69)) (= (x53 2 71) 2361183241434822606848) (= (x53 2 54) 18014398509481984) (= 730750818665451459101842416358141509827966271488 (x53 2 159)) (= (x53 2 177) 191561942608236107294793378393788647952342390272950272) (= 11150372599265311570767859136324180752990208 (x53 2 143)) (= (x53 2 187) 196159429230833773869868419475239575503198607639501078528) (= 268435456 (x53 2 28)) (= 766247770432944429179173513575154591809369561091801088 (x53 2 179)) (= 383123885216472214589586756787577295904684780545900544 (x53 2 178)) (= (x53 2 235) 55213970774324510299478046898216203619608871777363092441300193790394368) (= (x53 2 135) 43556142965880123323311949751266331066368) (= 1152921504606846976 (x53 2 60)) (= (x53 2 48) 281474976710656) (= 200867255532373784442745261542645325315275374222849104412672 (x53 2 197)) (= 144115188075855872 (x53 2 57)) (= (x53 2 95) 39614081257132168796771975168) (= (x53 2 247) 226156424291633194186662080095093570025917938800079226639565593765455331328) (= 401734511064747568885490523085290650630550748445698208825344 (x53 2 198)) (= (x53 2 24) 16777216) (= 50216813883093446110686315385661331328818843555712276103168 (x53 2 195)) (= (x53 2 99) 633825300114114700748351602688) (= (x53 2 183) 12259964326927110866866776217202473468949912977468817408) (= (x53 2 15) 32768) (= (x53 2 234) 27606985387162255149739023449108101809804435888681546220650096895197184) (= (x53 2 10) 1024) (= 1684996666696914987166688442938726917102321526408785780068975640576 (x53 2 220)) (= (x53 2 186) 98079714615416886934934209737619787751599303819750539264) (= 51422017416287688817342786954917203280710495801049370729644032 (x53 2 205)) (= (x53 2 243) 14134776518227074636666380005943348126619871175004951664972849610340958208) (= (x53 2 40) 1099511627776) (= 784637716923335095479473677900958302012794430558004314112 (x53 2 189)) (= 2854495385411919762116571938898990272765493248 (x53 2 151)) (= 57896044618658097711785492504343953926634992332820282019728792003956564819968 (x53 2 255)) (= (x53 2 141) 2787593149816327892691964784081045188247552) (= (x53 2 192) 6277101735386680763835789423207666416102355444464034512896) (= (x53 2 153) 11417981541647679048466287755595961091061972992) (= 1569275433846670190958947355801916604025588861116008628224 (x53 2 190)) (= 332306998946228968225951765070086144 (x53 2 118)) (= (x53 2 223) 13479973333575319897333507543509815336818572211270286240551805124608) (= (x53 2 41) 2199023255552) (= 42535295865117307932921825928971026432 (x53 2 125)) (= (x53 2 7) 128) (= (x53 2 155) 45671926166590716193865151022383844364247891968) (= (x53 2 11) 2048) (= (x53 2 68) 295147905179352825856) (= (x53 2 150) 1427247692705959881058285969449495136382746624) (= (x53 2 2) 4) (= (x53 2 39) 549755813888) (= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x53 2 256)) (= 23384026197294446691258957323460528314494920687616 (x53 2 164)) (= 52656145834278593348959013841835216159447547700274555627155488768 (x53 2 215)) (= 348449143727040986586495598010130648530944 (x53 2 138)) (= (x53 2 154) 22835963083295358096932575511191922182123945984) (= 47890485652059026823698344598447161988085597568237568 (x53 2 175)) (= 187072209578355573530071658587684226515959365500928 (x53 2 167)) (= 9444732965739290427392 (x53 2 73)) (= 10141204801825835211973625643008 (x53 2 103)) (= 134217728 (x53 2 27)) (= (x53 2 50) 1125899906842624) (= 19342813113834066795298816 (x53 2 84)) (= (x53 2 32) 4294967296) (= (x53 2 22) 4194304) (= 147573952589676412928 (x53 2 67)) (= (x53 2 132) 5444517870735015415413993718908291383296) (= (x53 2 228) 431359146674410236714672241392314090778194310760649159697657763987456) (= (x53 2 249) 904625697166532776746648320380374280103671755200316906558262375061821325312) (= (x53 2 0) 1) (= 102844034832575377634685573909834406561420991602098741459288064 (x53 2 206)) (= 4611686018427387904 (x53 2 62)) (= 56539106072908298546665520023773392506479484700019806659891398441363832832 (x53 2 245)) (= (x53 2 9) 512) (= (x53 2 185) 49039857307708443467467104868809893875799651909875269632) (= 10633823966279326983230456482242756608 (x53 2 123)) (= 13164036458569648337239753460458804039861886925068638906788872192 (x53 2 213)) (= 83076749736557242056487941267521536 (x53 2 116)) (= 2417851639229258349412352 (x53 2 81)) (= (x53 2 157) 182687704666362864775460604089535377456991567872) (= 883423532389192164791648750371459257913741948437809479060803100646309888 (x53 2 239)) (= 713623846352979940529142984724747568191373312 (x53 2 149)) (= 8388608 (x53 2 23)) (= (x53 2 4) 16) (= (x53 2 184) 24519928653854221733733552434404946937899825954937634816) (= (x53 2 204) 25711008708143844408671393477458601640355247900524685364822016) (= 6129982163463555433433388108601236734474956488734408704 (x53 2 182)) (= 33554432 (x53 2 25)) (= 7067388259113537318333190002971674063309935587502475832486424805170479104 (x53 2 242)) (= (x53 2 36) 68719476736) (= (x53 2 59) 576460752303423488) (= 696898287454081973172991196020261297061888 (x53 2 139)) (= (x53 2 253) 14474011154664524427946373126085988481658748083205070504932198000989141204992) (= (x53 2 238) 441711766194596082395824375185729628956870974218904739530401550323154944) (= 77371252455336267181195264 (x53 2 86)) (= (x53 2 38) 274877906944) (= (x53 2 75) 37778931862957161709568) (= 21778071482940061661655974875633165533184 (x53 2 134)) (= (x53 2 19) 524288) (= (x53 2 108) 324518553658426726783156020576256) (= 4951760157141521099596496896 (x53 2 92)) (= 91343852333181432387730302044767688728495783936 (x53 2 156)) (= (x53 2 16) 65536) (= 411376139330301510538742295639337626245683966408394965837152256 (x53 2 208)) (= 1208925819614629174706176 (x53 2 80)) (= 154742504910672534362390528 (x53 2 87)) (= (x53 2 100) 1267650600228229401496703205376) (= 842498333348457493583344221469363458551160763204392890034487820288 (x53 2 219)) (= (x53 2 35) 34359738368) (= (x53 2 128) 340282366920938463463374607431768211456) (= 72057594037927936 (x53 2 56)) (= (x53 2 129) 680564733841876926926749214863536422912) (= 67108864 (x53 2 26)) (= (x53 2 170) 1496577676626844588240573268701473812127674924007424) (= 174224571863520493293247799005065324265472 (x53 2 137)) (= 16384 (x53 2 14)) (= 374144419156711147060143317175368453031918731001856 (x53 2 168)) (= (x53 2 96) 79228162514264337593543950336) (= 17592186044416 (x53 2 44)) (= 5986310706507378352962293074805895248510699696029696 (x53 2 172)) (= 220855883097298041197912187592864814478435487109452369765200775161577472 (x53 2 237)) (= 9007199254740992 (x53 2 53)) (= (x53 2 147) 178405961588244985132285746181186892047843328) (= (x53 2 110) 1298074214633706907132624082305024) (= 4503599627370496 (x53 2 52))))
(assert (x367 x169))
(assert (not (x193 (x398 64 x218 161))))
(assert (x49 x282 x424 x249 x244))
(assert (x96 x244 x185 x244 x249))
(assert (= (x325 (x398 64 x242 161)) x242))
(assert (= x300 (or x141 x109)))
(assert (x330 x244))
(assert (= (=> (and (and (or (and (not x294) (and (= x175 x121) (= (x291 x120) x121) (= (x398 64 x218 159) x120))) (and x294 (and (>= x485 0) (<= 0 x225) (= (x398 64 x218 158) x499) (= x185 (x350 x492)) (= x236 x225) (= x485 (+ x236 x264)) (<= x225 115792089237316195423570985008687907853269984665640564039457584007913129639935) (< (+ x236 x264) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= x485 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x172 x244 x185)) (= x332 x175) (= x492 (x398 64 x218 156)) (= x485 x332) (= (x172 x244 x185) x225) (= x264 (x296 x499))))) (and (= x288 false) (<= 1 x369) (= x423 x218) (= (x357 x268) x471) (>= 2 x471) (= x268 (x398 64 x218 161)) (<= x73 127) (= x352 false) (= x369 (x373 x356)) (= x218 x382) (<= x73 127) (= x372 1889567281) (= x294 (= 0 x471)))) (and (= false x377) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x159) (= (+ x195 x61) x159) (= x338 x195) (<= 1 x169) (= false x198) (= x338 (x172 x244 x249)) (>= 127 x428) (= 4 x260) (< (+ x61 x195) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= x428 127) (= x40 false) (<= x338 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 36 x425) (= false x348) (= x382 x484) (= x470 false) (= 404098525 x272) (= false x215) (<= 0 x338) (= false x388) (>= x159 0) (= x169 (x373 x356)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x172 x244 x249)) (= x176 false) (= x159 x119))) x137) x118))
(assert (x411 x279))
(assert (x465 x244 (- x249 x244)))
(assert (x367 x334))
(assert (x367 x220))
(assert (= (or x43 x488) x235))
(assert (x367 x244))
(assert (= (x325 (x472 32 154)) 154))
(assert (not (x193 (x398 64 x242 156))))
(assert (x367 x260))
(assert (not (x193 (x472 32 154))))
(assert (x367 x374))
(assert (x330 (- x185 x244)))
(assert (x367 x480))
(assert (x330 (- x424 x249)))
(assert (= (x398 64 x242 161) (x417 (x398 64 x242 161))))
(assert (x285 x511))
(assert (x337 x459))
(assert (< 10000 (x398 64 x218 156)))
(assert (x49 x249 x244 x424 x282))
(assert (x367 x259))
(assert (x367 x281))
(assert (= 0 (x417 18446744073709551615)))
(assert (x193 382502381645197248123620639812464696550576095234))
(assert (x419 8 x111))
(assert (x363 (x53 2 x303)))
(assert (x367 x47))
(assert (x465 x424 (- x282 x244)))
(assert (x96 x249 x244 x244 x185))
(assert (x367 x331))
(assert (x367 x187))
(assert (= (x417 (x472 32 155)) (x472 32 155)))
(assert (= (and x343 (not x85)) x421))
(assert (x367 x471))
(assert (x367 x25))
(assert (x321 x279 x178))
(assert (x330 x424))
(assert (x170 x384 32))
(assert (x363 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (x96 x244 x185 x424 x249))
(assert (x49 x249 x244 x424 x249))
(assert (x363 x426))
(assert (x367 x213))
(assert (x330 2))
(assert (x367 x506))
(assert (= (x417 x165) (x417 (+ x165 1))))
(assert (x367 x461))
(assert (< 10000 (x398 64 x218 158)))
(assert (x367 x100))
(assert (x367 x452))
(assert (x170 x511 32))
(assert (x367 x304))
(assert (x96 x282 x424 x244 x185))
(assert (x367 x205))
(assert (x49 x282 x424 x244 x185))
(assert (= (x250 (x398 64 x242 158)) 158))
(assert (x127 x150))
(assert (x419 8 x134))
(assert (x367 x449))
(assert (x431 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x53 2 x335)))
(assert (x465 x185 (- x244 x282)))
(assert (= 159 (x250 (x398 64 x242 159))))
(assert (x367 x251))
(assert (x170 x426 2))
(assert (x431 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x53 2 x292)))
(assert (x96 x249 x244 x424 x282))
(assert (x367 x269))
(assert (= (and x343 x85) x397))
(assert (= (=> (and (= x386 (= 1 (ite (> x370 31) 1 0))) (or (and (and (= x438 (x204 31 x370)) (= x461 (* 2 x370)) (= (x472 32 154) x413) (= (* 8 x438) x505) (= x319 (+ 1 x461)) (= x277 (x204 x513 x51)) (= (x454 160) x513) (= x51 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x349 115792089237316195423570985008687907853269984665640564039457584007913129639935 x505)))) x386) (and (and (= (x349 115792089237316195423570985008687907853269984665640564039457584007913129639935 x213) x112) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x112) x514) (= (ite (<= x279 1) x474 (x63 x279 x178)) x306) (= (x204 x310 x514) x279) (= x310 (x454 160)) (= (* x370 2) x178) (= (x78 (+ x178 x279)) x474) (<= 1 x112) (= (* x370 8) x213)) (not x386)))) x23) x13))
(assert (x465 x249 (- x424 x185)))
(assert (x367 x6))
(assert (x419 2 x370))
(assert (x127 127))
(assert (x465 x244 (- x249 x185)))
(assert (= 161 (x250 (x398 64 x242 161))))
(assert (x193 57896044618658097711785492504343953926634992332820282019728792003956564819967))
(assert (x203 x258))
(assert (= x246 (=> (and (and (or (= 1 x226) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x226)) (= x227 (x90 128)) (>= x48 1) (= (x316 x336 2) x506) (= x226 (x515 (- x368 (mod (ite (< x158 32) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (ite (> x368 0) x506 (x204 127 x506)) x158) (= (x14 256) x302) (= 288 x449) (>= x41 1) (= x381 (= 1 (ite (> x227 31) 1 0))) (= (x204 1 x336) x368) (>= 18446744073709551615 x227) (= x240 (< 31 x158)) (>= 255 x48) (not x240)) (or (and (not x381) (and (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x374) x62) (= (x349 115792089237316195423570985008687907853269984665640564039457584007913129639935 x487) x374) (>= x374 1) (= x230 (x204 x116 x62)) (= (x78 (+ x320 x230)) x269) (= x320 (* 2 x227)) (= x487 (* x227 8)) (= (ite (>= 1 x230) x269 (x63 x230 x320)) x439) (= (x454 160) x116))) (and (and (= x308 (x472 32 3)) (= x140 (* x227 2)) (= x458 (+ 1 x140)) (= (x204 x464 x188) x98) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x349 115792089237316195423570985008687907853269984665640564039457584007913129639935 x184)) x188) (= (* x134 8) x184) (= x134 (x204 31 x227)) (= (x454 160) x464)) x381))) x30)))
(assert (x367 x219))
(assert (x367 x407))
(assert (= 161 (x250 (x398 64 x218 161))))
(assert (x367 x439))
(assert (x363 32))
(assert (x170 x258 128))
(assert (= x39 (and (not x346) x496)))
(assert (x49 x244 x185 x282 x424))
(assert (= (x398 64 x242 158) (x417 (x398 64 x242 158))))
(assert (x465 x424 (- x282 x249)))
(assert (= 158 (x250 (x398 64 x218 158))))
(assert (= (and (not x223) x342) x516))
(assert (x367 x93))
(assert (x465 x249 (- x424 x244)))
(assert (= 0 (x417 2167012380)))
(assert (= (x164 (x472 32 155)) 32))
(assert (= (x325 (x398 64 x242 158)) x242))
(assert (x127 x199))
(assert (> (x472 32 154) 10000))
(assert (x367 x359))
(assert (x367 x282))
(assert (= (=> (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x69) (<= 0 x328) (= 0 x32) (>= x353 1) (<= 0 x501) (= x430 (x373 x356)) (>= x21 0) (>= 1461501637330902918203684832716283019655932542975 x15) (= false x481) (= (> (x373 x117) 0) x265) (<= x501 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x430 1) (<= x508 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x427) (= x4 (< 0 (x373 x351))) (>= 1461501637330902918203684832716283019655932542975 x351) (= x500 404098525) (= x174 (> (x373 x353) 0)) x437 (>= 1461501637330902918203684832716283019655932542975 x356) (= false x99) (not (= x117 x351)) (<= 0 x233) (<= x251 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x477) (>= x64 0) (<= x484 1461501637330902918203684832716283019655932542975) (= x201 false) (<= 0 x189) (<= 4 x508) (not (= x351 x356)) (= x473 0) (<= x89 255) (< (x172 x424 x249) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= x58 127) (>= 1461501637330902918203684832716283019655932542975 x253) (>= x351 1) (>= x444 0) (<= 1 x117) (<= 1 x356) (= false x102) (<= 0 x477) (not (= x356 x117)) (not (= x353 x117)) (= x284 x356) (not (= x356 x353)) (= x445 x484) (<= x482 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x233) (not (= x351 x353)) (<= x117 1461501637330902918203684832716283019655932542975) (>= x427 0) (= x207 x233) x174 (= 2167012380 x27) (= x501 x434) (<= x353 1461501637330902918203684832716283019655932542975) (>= x484 0) (<= x160 4294967295) (<= x328 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x160) (<= x396 1461501637330902918203684832716283019655932542975) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x21) (<= 0 x396) (= x289 false) (>= 1461501637330902918203684832716283019655932542975 x64) x265 (= x402 false) (= false x401) (<= 0 x482) (= x233 (+ x61 x434)) (= (< 0 (x373 x356)) x437) (= x106 false) (<= 0 x287) (< (+ x61 x434) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= 36 x192) (= x462 false) (<= x444 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x172 x424 x249) x501) (<= x58 127) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x287) (= 4 x379) (<= x189 1461501637330902918203684832716283019655932542975) (= false x323) (<= 0 x69) x4 (>= 1461501637330902918203684832716283019655932542975 x129)) (and (or (and x405 (and (= x196 x132) (= (x172 x424 x282) x86) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x93 x239)) (< (x172 x424 x282) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x341 (x398 64 x242 156)) (>= x340 0) (= x340 (+ x239 x93)) (= (x350 x341) x282) (= x340 x132) (>= x86 0) (<= x340 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x86 x93) (= x94 (x398 64 x242 158)) (= (x296 x94) x239) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x86))) (and (and (= x35 (x291 x65)) (= x65 (x398 64 x242 159)) (= x35 x196)) (not x405))) (and (>= 127 x220) (= (= 0 x205) x405) (>= x399 1) (= x26 (x398 64 x242 161)) (<= x205 2) (= x197 false) (= x181 false) (= 1889567281 x301) (= x242 x445) (= x242 x432) (= (x373 x356) x399) (>= 127 x220) (= (x357 x26) x205)))) x295) x22))
(assert (x367 x121))
(assert (x194 (+ 31 x101) 32))
(assert (= (x164 (x398 64 x242 158)) 64))
(assert (x367 x191))
(assert (x127 x394))
(assert (x367 x327))
(assert (x367 x277))
(assert (x465 x249 (- x244 x424)))
(assert (x96 x424 x282 x424 x249))
(assert (x419 8 x227))
(assert (x367 x35))
(assert (x330 (- x249 x185)))
(assert (x96 x424 x282 x244 x249))
(assert (x193 34602258808455191227493136189427688107261027562213901346293687426555358216192))
(assert (x96 x244 x185 x424 x282))
(assert (=> (<= x351 10000) (= (x417 x351) 0)))
(assert (x367 x132))
(assert (= (x164 (x472 32 154)) 32))
(assert (= (x417 (x472 32 4)) (x472 32 4)))
(assert (x330 x134))
(assert (x170 x336 2))
(assert (= 0 (x417 39473711962023174749424659199615060097653232135126263878786656434573155500032)))
(assert (x49 x424 x282 x249 x424))
(assert (x49 x244 x249 x244 x185))
(assert (x367 x97))
(assert (x465 x244 (- x249 x282)))
(assert (x193 39553310892875263560936207548857176834471854732421237974622739861269930573824))
(assert (x465 x244 x249))
(assert (x367 x196))
(assert (x367 x183))
(assert (x367 x123))
(assert (x127 x248))
(assert (x367 x422))
(assert (x367 x319))
(assert (= (=> (and (= x9 false) (= x24 (<= x175 x119)) (= false x171) (= false x180) (= false x126)) x24) x137))
(assert (= x56 (and (not x318) x362)))
(assert (x367 x475))
(assert (x411 x331))
(assert (x419 8 x384))
(assert (= (x398 64 x242 159) (x417 (x398 64 x242 159))))
(assert (x419 2 x227))
(assert (=> (<= x82 10000) (= 0 (x417 x82))))
(assert (x367 x332))
(assert (= (x325 (x398 64 x218 158)) x218))
(assert (= (x164 (x472 32 3)) 32))
(assert (= (ite (> 256 x487) (x316 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x53 2 x487)) 0) (x349 115792089237316195423570985008687907853269984665640564039457584007913129639935 x487)))
(assert (< 10000 (x398 64 x218 159)))
(assert (= (x417 1461501637330902918203684832716283019655932542975) 0))
(assert (x367 x438))
(assert (= (x164 (x398 64 x242 159)) 64))
(assert (x367 x335))
(assert (= (and x405 x68) x43))
(assert (x337 x47))
(assert (x330 (- x185 x249)))
(assert (x363 (x53 2 x213)))
(assert (= (and x362 x318) x124))
(assert (x465 x249 (- x244 x282)))
(assert (x127 x370))
(assert (x49 x244 x249 x282 x424))
(assert (x411 x178))
(assert (x363 x199))
(assert (x49 x424 x249 x282 x424))
(assert (x367 x424))
(assert (x96 x424 x249 x244 x249))
(assert (x363 (x53 2 x335)))
(assert (x203 x506))
(assert (= x503 (and x300 (not x497))))
(assert (x367 x221))
(assert (x367 x54))
(assert (x367 x209))
(assert (x330 x249))
(assert (x49 x249 x244 x282 x424))
(assert (x367 x292))
(assert (= (x417 (x398 64 x242 156)) (x398 64 x242 156)))
(assert (x363 (x53 2 x292)))
(assert (x367 x152))
(assert (x367 x392))
(assert (and (= (x172 27 3) 81) (= 27 (x172 9 3)) (= (x172 3 3) 9) (= 81 (x172 9 9))))
(assert (x330 (- x282 x185)))
(assert (x194 x426 2))
(assert (x330 (- x244 x424)))
(assert (x367 x95))
(assert (x367 x98))
(assert (x367 x188))
(assert (x49 x244 x185 x424 x282))
(assert (x367 x222))
(assert (x49 x249 x424 x185 x244))
(assert (x49 x185 x244 x424 x282))
(assert (x367 x368))
(assert (x330 (- x282 x424)))
(assert (x285 x155))
(assert (< (x472 32 154) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x367 x514))
(assert (= (=> (and (and (= false x478) (= (>= x207 x196) x237) (= false x136) (= x152 x392) (= x392 (x228 0)) (= false x167) x237 (= x358 false) (= x157 false)) (and (or (and (and (= (ite (> 1 x222) 1 0) x212) (>= 255 x222)) x223) (and (= (ite x223 1 0) x212) (not x223))) (and (<= x183 127) (= x238 2167012380) (>= 255 x187) (= x477 x82) (= (x309 x356) x10) (>= 127 x183) (= x420 (x326 x82)) (<= 1 x304) (= x223 (= x187 0)) (= (x373 x356) x304) (= false x33) (= false x231) (= x10 x278)))) x509) x295))
(assert (= (and x223 x235) x433))
(assert (< 10000 (x398 64 x242 161)))
(assert (= (x417 (x398 64 x218 159)) (x398 64 x218 159)))
(assert (x96 x282 x424 x244 x249))
(assert (= x55 (or x441 x2)))
(assert (< (x472 32 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x367 x175))
(assert (= x13 x466))
(assert (x367 x447))
(assert (x127 x464))
(assert (x96 x282 x424 x424 x249))
(assert (x330 (- x244 x249)))
(assert (x49 x244 x185 x249 x424))
(assert (x367 x76))
(assert (x367 x513))
(assert (< 10000 (x472 32 4)))
(assert (= x254 (and x42 x294)))
(assert (x49 x185 x244 x249 x424))
(assert (x367 x507))
(assert (x193 2167012380))
(assert (x367 x420))
(assert (x465 x249 (- x244 x249)))
(assert (= x141 (and (not x381) x131)))
(assert (x330 x282))
(assert (x367 x430))
(assert (= (x417 x46) (x417 (+ x46 1))))
(assert (x203 x155))
(assert (x285 x370))
(assert (x330 x221))
(assert (x367 x195))
(assert (= x109 (and x381 x131)))
(assert (= (or x298 x486) x490))
(assert (= (x417 x46) (x417 (+ x46 x25))))
(assert (> (x398 64 x218 161) 10000))
(assert (x367 x173))
(assert (x367 x310))
(assert (x367 x436))
(assert (x193 404098525))
(assert (x367 x505))
(assert (x367 x372))
(assert (x330 (- x185 x282)))
(assert (x367 x353))
(assert (x330 (- x185 x424)))
(assert (x127 x62))
(assert (x330 x111))
(assert (x367 x178))
(assert (= (x398 64 x218 156) (x417 (x398 64 x218 156))))
(assert (x367 x226))
(assert (= x509 (=> (and (or (and (not x223) (= x187 x48)) (and x223 (and (= 1 x70) (= 1 x48)))) (and (= 1 x212) (= x408 (> x212 0)) (= 1 x483) x408)) x161)))
(assert (x367 x150))
(assert (x194 x336 2))
(assert (x367 x483))
(assert (x330 (- x244 x185)))
(assert (x367 x92))
(assert (x49 x424 x282 x244 x249))
(assert (x367 x146))
(assert (= (ite (< x184 256) (x316 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x53 2 x184)) 0) (x349 115792089237316195423570985008687907853269984665640564039457584007913129639935 x184)))
(assert (x337 x260))
(assert (= (x349 115792089237316195423570985008687907853269984665640564039457584007913129639935 x335) (ite (< x335 256) (x316 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x53 2 x335)) 0)))
(assert (x431 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x53 2 x213)))
(assert (x367 x207))
(assert (= x218 (x325 (x398 64 x218 159))))
(assert (= x131 (or x39 x19)))
(assert (x96 x249 x424 x244 x185))
(assert (x367 x474))
(assert (x367 x101))
(assert (x367 x479))
(assert (x367 x460))
(assert (x49 x244 x185 x424 x249))
(assert (x49 x249 x424 x424 x282))
(assert (x330 8))
(assert (x465 x424 (- x249 x424)))
(assert (x367 x185))
(assert (x465 x244 (- x185 x282)))
(assert (x127 x310))
(assert (x127 x155))
(assert (x49 x282 x424 x424 x249))
(assert (x127 x87))
(assert (= 64 (x164 (x398 64 x218 156))))
(assert (= (x417 4294967295) 0))
(assert (= (x417 (x398 64 x218 158)) (x398 64 x218 158)))
(assert (not x22))
(assert (= (and x497 x300) x343))
(assert (x367 x28))
(assert (x170 x227 32))
(assert (x367 x303))
(assert (x367 x83))
(assert (x367 x41))
(assert (x367 x77))
(assert (= x68 true))
(assert (x330 x384))
(assert (x49 x424 x249 x244 x185))
(assert (x321 x230 x320))
(assert (x367 x426))
(assert (x465 x244 (- x185 x244)))
(assert (x203 x95))
(assert (x285 x258))
(assert (x363 (x53 2 x491)))
(assert (x367 x232))
(assert (x367 x111))
(assert (x367 x45))
(assert (not (x193 (x398 64 x242 159))))
(assert (x443 x464 x188))
(assert (x367 x212))
(assert (x367 x239))
(assert (x367 x87))
(assert (x170 x199 2))
(assert (x135 x384))
(assert (x431 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x53 2 x303)))
(assert (x330 (- x282 x249)))
(assert (x367 x491))
(assert (x363 x336))
(assert (= 0 (x417 1889567281)))
(assert (< 10000 (x398 64 x242 156)))
(assert (x367 x12))
(assert (x367 x425))
(assert (x367 x155))
(assert (x330 (- x424 x244)))
(assert (x367 x320))
(assert (x431 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x53 2 x184)))
(assert (x367 x399))
(assert (> (x472 32 155) 10000))
(assert (x367 x110))
(assert (< (x398 64 x242 156) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= 156 (x250 (x398 64 x242 156))))
(assert (x96 x185 x244 x244 x249))
(assert (x193 22163329580580053030292883849319169862539958002407764210677428189014622470144))
(assert (x431 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x53 2 x491)))
(assert (x367 x134))
(assert (x49 x282 x424 x185 x244))
(assert (x419 8 x221))
(assert (= (x349 115792089237316195423570985008687907853269984665640564039457584007913129639935 x213) (ite (> 256 x213) (x316 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x53 2 x213)) 0)))
(assert (x127 x259))
(assert (x367 x393))
(assert (x419 8 x438))
(assert (x337 x379))
(assert (x367 x369))
(assert (= (x417 34602258808455191227493136189427688107261027562213901346293687426555358216192) 0))
(assert (x367 x119))
(assert (= (x325 (x472 32 3)) 3))
(assert (x363 2))
(assert (x465 x424 x249))
(assert (x367 x82))
(assert (x127 x513))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x398 64 x218 159)))
(assert (x367 x306))
(assert (x465 x244 (- x185 x424)))
(assert (x127 x511))
(assert (not (x193 (x472 32 155))))
(assert (x465 x249 (- x424 x249)))
(assert (x367 x258))
(assert (x49 x424 x249 x249 x244))
(assert (x465 x185 (- x244 x424)))
(assert (x96 x424 x249 x244 x185))
(assert (x49 x424 x249 x185 x244))
(assert (= x218 (x325 (x398 64 x218 156))))
(assert (= 159 (x250 (x398 64 x218 159))))
(assert (= 156 (x250 (x398 64 x218 156))))
(assert (x127 x359))
(assert (= (or x433 x457) x342))
(assert (x367 x218))
(assert (x367 x227))
(assert (x194 (+ 31 x219) 32))
(assert (=> (<= x117 10000) (= (x417 x117) 0)))
(assert (x465 x424 (- x282 x424)))
(assert (x367 x211))
(assert (= (x325 (x472 32 155)) 155))
(assert (= (ite (< x491 256) (x316 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x53 2 x491)) 0) (x349 115792089237316195423570985008687907853269984665640564039457584007913129639935 x491)))
(assert (= (=> (and (= x318 (= 1 (ite (> x384 31) 1 0))) (or (and (and (= (x349 115792089237316195423570985008687907853269984665640564039457584007913129639935 x335) x110) (= x489 (* x384 2)) (= x146 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x110)) (= (* 8 x384) x335) (= x315 (x78 (+ x331 x489))) (>= x110 1) (= x113 (x114 320)) (= x331 (x204 x113 x146)) (= (ite (>= 1 x331) x315 (x63 x331 x489)) x507)) (not x318)) (and x318 (and (= x221 (x204 31 x384)) (= (+ x418 1) x460) (= x150 (x114 320)) (= x87 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x349 115792089237316195423570985008687907853269984665640564039457584007913129639935 x292))) (= x418 (* x384 2)) (= (x204 x150 x87) x385) (= x494 (x472 32 4)) (= (* x221 8) x292))))) x149) x60))
(assert (x367 x458))
(assert (= (or x81 x339) x148))
(assert (not (x193 (x398 64 x218 159))))
(assert (= x19 (and x346 x496)))
(assert (x285 x384))
(assert (x367 x464))
(assert (x363 (x53 2 x505)))
(assert (x367 x257))
(assert (x411 x479))
(assert (x367 x508))
(assert (x49 x244 x249 x185 x244))
(assert (x443 x513 x51))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x398 64 x218 156)))
(assert (= 0 (x417 39553310892875263560936207548857176834471854732421237974622739861269930573824)))
(assert (x367 x70))
(assert (x177 x336))
(assert (x321 x12 x479))
(assert (x127 x336))
(assert (x193 57005))
(assert (x127 x258))
(assert (= (x417 404098525) 0))
(assert (x49 x244 x249 x424 x282))
(assert (x367 x487))
(assert (= x446 (and x168 x138)))
(assert (x465 x249 (- x244 x185)))
(assert (x367 x356))
(assert (x367 x510))
(assert (x443 x394 x5))
(assert (< (x472 32 4) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= x145 x60))
(assert (x330 x185))
(assert (x127 x506))
(assert (x330 x227))
(assert (x465 x424 x282))
(assert (x367 x370))
(assert (x363 (x53 2 x184)))
(assert (= x2 (and x313 (not x386))))
(assert (= (x417 x165) (x417 (+ x165 x414))))
(assert (x363 (+ 31 x101)))
(assert (= 0 (x417 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x367 x184))
(assert (= (x164 (x472 32 4)) 32))
(assert (x285 32))
(assert (not (x193 (x472 32 3))))
(assert (x330 x370))
(assert (x465 x185 (- x244 x249)))
(assert (x367 x301))
(assert (> (x398 64 x242 159) 10000))
(assert (x465 x244 (- x185 x249)))
(assert (x49 x244 x185 x249 x244))
(assert (x367 x423))
(assert (x127 31))
(assert (< (x398 64 x242 161) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (x349 115792089237316195423570985008687907853269984665640564039457584007913129639935 x505) (ite (< x505 256) (x316 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x53 2 x505)) 0)))
(assert (x367 x15))
(assert (x465 x424 (- x249 x185)))
(assert (= (or x56 x124) x168))
(assert (x443 x113 x146))
(assert (x49 x244 x249 x249 x424))
(assert (x367 x129))
(assert (x177 x426))
(assert (x135 x511))
(assert (x367 x112))
(assert (< (x398 64 x242 158) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (x325 (x398 64 x218 161)) x218))
(assert (x285 x199))
(assert (x419 2 x384))
(assert (= (x325 (x398 64 x242 159)) x242))
(assert (x49 x249 x244 x244 x185))
(assert (x367 x140))
(assert (x367 x511))
(assert (= (x349 115792089237316195423570985008687907853269984665640564039457584007913129639935 x303) (ite (< x303 256) (x316 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x53 2 x303)) 0)))
(assert (x337 x192))
(assert (= (x164 (x398 64 x242 161)) 64))
(assert (x367 x432))
(assert (x285 128))
(assert (x49 x185 x244 x424 x249))
(assert (= (=> (and x366 (and (= x366 (not (< x307 x139))) (= x307 (+ 1 x165)))) x466) x448))
(assert (x367 x351))
(assert (x367 x62))
(assert (x367 x249))
(assert (x411 x12))
(assert (x96 x185 x244 x424 x282))
(assert (= (x417 72464927124685711895252664195178772226123872012682517813167109100718830649344) 0))
(assert (x193 72464927124685711895252664195178772226123872012682517813167109100718830649344))
(assert (x193 1461501637330902918203684832716283019655932542975))
(assert (x431 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x53 2 x487)))
(assert (=> (<= x356 10000) (= 0 (x417 x356))))
(assert (x367 x48))
(assert (x96 x249 x244 x424 x249))
(assert (x194 x199 2))
(assert (x367 x434))
(assert (x367 x158))
(assert (=> (>= 10000 x242) (= (x417 x242) 0)))
(assert (x127 x116))
(assert (= (or x409 (and (not x223) x148)) x42))
(assert (x193 18446744073709551615))
(assert (x367 x489))
(assert (x49 x249 x424 x249 x244))
(assert (x431 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x53 2 x505)))
(assert (not (x193 (x472 32 4))))
(assert (x96 x424 x249 x424 x282))
(assert (x411 x320))
(assert (x367 x113))
(assert (x367 x238))
(assert (< (x398 64 x218 158) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x367 x375))
(assert (x330 (- x249 x244)))
(assert (= 4 (x325 (x472 32 4))))
(assert (x367 x5))
(assert (x96 x249 x424 x424 x282))
(assert (x96 x249 x424 x244 x249))
(assert (x127 x227))
(assert (x337 x425))
(assert (x367 x385))
(assert (x127 x384))
(assert (x49 x424 x282 x424 x249))
(assert (= 0 (x417 57896044618658097711785492504343953926634992332820282019728792003956564819967)))
(assert (= x313 (or x108 x490)))
(assert (x330 (- x424 x185)))
(assert (x135 x370))
(assert (x367 x117))
(assert (x367 x51))
(assert (x367 x206))
(assert (= (and x55 x387) x339))
(assert (x127 x113))
(assert (x285 x248))
(assert (= x161 (=> (and (or (and (= x41 x452) (not x346)) (and (and (<= 32 x459) (>= 4294967295 x459) (= x41 1)) x346)) (and (= x334 256) (<= x459 57896044618658097711785492504343953926634992332820282019728792003956564819967) (= (> x452 0) x346) (= 192 x266) (<= 32 x459) (= 128 x28))) x246)))
(assert (= (x417 57005) 0))
(assert (= (x325 (x398 64 x242 156)) x242))
(assert (= x496 (or x467 x516)))
(assert (x49 x424 x249 x424 x282))
(assert (x367 x74))
(assert (x285 x426))
(assert (x465 x424 (- x282 x185)))
(assert (x330 (- x424 x282)))
(assert (= 64 (x164 (x398 64 x218 161))))
(assert (x363 (+ x219 31)))
(assert (x363 (x53 2 x487)))
(assert (= (x164 (x398 64 x218 159)) 64))
(assert (x96 x424 x282 x244 x185))
(assert (x127 1))
(assert (x193 4294967295))
(assert (x465 x282 (- x424 x244)))
(assert (= x298 (and x446 x512)))
(assert (x443 x116 x62))
(assert (x321 x331 x489))
(assert (x170 x506 128))
(assert (x367 x286))
(assert (= (=> (and (and (= (x8 382502381645197248123620639812464696550576095234) x123) x440 (= x147 (= x123 (x156 382502381645197248123620639812464696550576095234))) (= x286 (x373 382502381645197248123620639812464696550576095234)) (= x407 (x8 x356)) (<= 1 x179) (<= 1 x286) (<= x47 4294967295) (= x440 (<= x407 (x156 x356))) x147 (= 352 x6)) (or (not x223) (and (= 0 x100) x223))) x118) x208))
(assert (= (=> (and (= x74 (x204 1 x426)) (= (x190 288) x384) (>= 18446744073709551615 x384) (= x155 (x316 x426 2)) (= (x515 (- x74 (mod (ite (< x101 32) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x97) (= (< 31 x101) x497) (= (ite (> x74 0) x155 (x204 127 x155)) x101) (or (= x97 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x97 1))) (and (=> (and x497 (and (= (+ x46 x25) x229) (= x85 (< x46 x229)) (= (x316 (+ x101 31) 32) x25) (= x46 (x472 32 4)))) (and (=> (not x85) x145) (=> x85 x324))) (=> (not x497) x60))) x30))
(assert (x193 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (x419 2 x511))
(assert (x367 x500))
(assert (not (x193 (x398 64 x242 161))))
(assert (x443 x310 x514))
(assert (x285 x336))
(assert (= x486 (and x446 (not x512))))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x398 64 x242 159)))
(assert (x177 x248))
(assert (x127 x5))
(assert (x49 x244 x185 x244 x249))
(assert (= (and x235 (not x223)) x457))
(assert (= (and x168 (not x138)) x108))
(assert (x367 x278))
(assert (x135 x227))
(assert (x127 x146))
(assert (= x81 (and (not x387) x55)))
(assert (x367 x115))
(assert (x367 x116))
(assert (x367 x247))
(assert (= (=> (and (or (and (not x387) (and (= x479 (* 2 x511)) (= (x349 115792089237316195423570985008687907853269984665640564039457584007913129639935 x491) x281) (= (* 8 x511) x491) (>= x281 1) (= (x151 224) x394) (= x76 (x78 (+ x12 x479))) (= (x204 x394 x5) x12) (= x475 (ite (<= x12 1) x76 (x63 x12 x479))) (= x5 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x281)))) (and (and (= x359 (x151 224)) (= (* x511 2) x375) (= x327 (+ x375 1)) (= x111 (x204 31 x511)) (= (x204 x359 x259) x209) (= x71 (x472 32 155)) (= (* x111 8) x303) (= x259 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x349 115792089237316195423570985008687907853269984665640564039457584007913129639935 x303)))) x387)) (and (= (ite (> x173 0) x95 (x204 127 x95)) x480) (not x38) (= (x103 192) x511) (= (= (ite (< 31 x511) 1 0) 1) x387) (= (x316 x199 2) x95) (= (x204 1 x199) x173) (<= x511 18446744073709551615) (= (< 31 x480) x38) (or (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x115) (= x115 1)) (= x115 (x515 (- x173 (mod (ite (> 32 x480) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))) x208) x23))
(assert (not (x193 (x398 64 x242 158))))
(assert (x367 x414))
(assert (x465 x244 (- x249 x424)))
(assert (x96 x244 x249 x424 x249))
(assert (x49 x282 x424 x244 x249))
(assert (x367 x279))
(check-sat)
(exit)
