(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Certora
Generated on: 2024-04-10
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x414 () Int)
(declare-fun x558 () Int)
(declare-fun x522 () Int)
(declare-fun x492 () Bool)
(declare-fun x228 () Bool)
(declare-fun x628 () Bool)
(declare-fun x139 (Int) Int)
(declare-fun x129 () Int)
(declare-fun x591 () Int)
(declare-fun x104 () Bool)
(declare-fun x163 () Int)
(declare-fun x170 () Int)
(declare-fun x319 (Int) Int)
(declare-fun x47 () Int)
(declare-fun x454 () Bool)
(declare-fun x98 () Int)
(declare-fun x178 () Int)
(declare-fun x325 () Int)
(declare-fun x263 () Int)
(declare-fun x230 () Bool)
(declare-fun x287 (Int Int) Int)
(declare-fun x534 () Int)
(declare-fun x377 () Int)
(declare-fun x217 () Int)
(declare-fun x525 () Bool)
(declare-fun x620 (Int) Int)
(declare-fun x54 () Int)
(declare-fun x418 () Int)
(declare-fun x237 () Int)
(declare-fun x33 () Int)
(declare-fun x55 () Bool)
(declare-fun x169 () Bool)
(declare-fun x254 () Bool)
(declare-fun x62 () Bool)
(declare-fun x80 () Int)
(declare-fun x567 () Int)
(declare-fun x255 () Int)
(declare-fun x599 () Bool)
(declare-fun x481 () Int)
(declare-fun x470 () Int)
(declare-fun x527 () Int)
(declare-fun x302 () Int)
(declare-fun x342 () Bool)
(declare-fun x209 () Bool)
(declare-fun x164 () Bool)
(declare-fun x466 () Bool)
(declare-fun x143 () Bool)
(declare-fun x608 () Int)
(declare-fun x451 () Int)
(declare-fun x226 () Int)
(declare-fun x332 () Bool)
(declare-fun x88 () Bool)
(declare-fun x338 () Bool)
(declare-fun x629 () Int)
(declare-fun x434 () Int)
(declare-fun x91 () Int)
(declare-fun x285 () Bool)
(declare-fun x308 () Bool)
(declare-fun x309 () Int)
(declare-fun x15 () Bool)
(declare-fun x172 (Int) Int)
(declare-fun x76 () Bool)
(declare-fun x75 () Int)
(declare-fun x137 () Int)
(declare-fun x602 () Int)
(declare-fun x595 () Int)
(declare-fun x198 () Bool)
(declare-fun x614 () Int)
(declare-fun x215 () Int)
(declare-fun x626 () Int)
(declare-fun x258 () Int)
(declare-fun x148 () Int)
(declare-fun x555 () Int)
(declare-fun x234 () Int)
(declare-fun x484 (Int) Int)
(declare-fun x531 () Int)
(declare-fun x58 () Int)
(declare-fun x594 () Int)
(declare-fun x290 () Int)
(declare-fun x515 () Int)
(declare-fun x199 () Int)
(declare-fun x562 () Int)
(declare-fun x590 () Bool)
(declare-fun x561 () Bool)
(declare-fun x291 () Int)
(declare-fun x565 () Bool)
(declare-fun x413 (Int) Int)
(declare-fun x516 () Bool)
(declare-fun x541 () Int)
(declare-fun x503 () Bool)
(declare-fun x106 (Int) Bool)
(declare-fun x564 () Int)
(declare-fun x79 () Int)
(declare-fun x253 () Int)
(declare-fun x439 () Int)
(declare-fun x327 () Int)
(declare-fun x330 () Int)
(declare-fun x146 () Int)
(declare-fun x300 () Bool)
(declare-fun x364 () Int)
(declare-fun x366 () Bool)
(declare-fun x78 () Int)
(declare-fun x190 () Int)
(declare-fun x20 () Bool)
(declare-fun x446 () Int)
(declare-fun x173 () Bool)
(declare-fun x533 () Bool)
(declare-fun x280 () Bool)
(declare-fun x422 () Bool)
(declare-fun x269 () Int)
(declare-fun x87 () Int)
(declare-fun x320 () Int)
(declare-fun x176 () Int)
(declare-fun x549 () Int)
(declare-fun x81 () Int)
(declare-fun x110 () Bool)
(declare-fun x612 () Int)
(declare-fun x317 () Int)
(declare-fun x274 (Int) Int)
(declare-fun x77 () Int)
(declare-fun x507 (Int Int) Int)
(declare-fun x348 () Int)
(declare-fun x520 () Int)
(declare-fun x355 () Bool)
(declare-fun x32 () Int)
(declare-fun x60 () Int)
(declare-fun x212 () Bool)
(declare-fun x19 () Int)
(declare-fun x111 () Bool)
(declare-fun x597 () Int)
(declare-fun x126 () Int)
(declare-fun x205 () Int)
(declare-fun x416 () Int)
(declare-fun x605 () Int)
(declare-fun x579 () Int)
(declare-fun x99 () Int)
(declare-fun x623 () Int)
(declare-fun x121 () Int)
(declare-fun x131 () Int)
(declare-fun x240 () Int)
(declare-fun x42 () Bool)
(declare-fun x206 (Int) Int)
(declare-fun x135 () Bool)
(declare-fun x144 (Int) Int)
(declare-fun x535 (Int Int Int) Int)
(declare-fun x624 () Bool)
(declare-fun x352 () Int)
(declare-fun x133 () Int)
(declare-fun x266 () Bool)
(declare-fun x138 () Int)
(declare-fun x1 () Int)
(declare-fun x512 (Int Int) Int)
(declare-fun x502 () Int)
(declare-fun x153 () Bool)
(declare-fun x476 () Int)
(declare-fun x545 () Int)
(declare-fun x496 () Int)
(declare-fun x119 () Int)
(declare-fun x305 () Int)
(declare-fun x179 () Int)
(declare-fun x154 () Int)
(declare-fun x147 () Bool)
(declare-fun x521 () Int)
(declare-fun x568 () Int)
(declare-fun x184 () Int)
(declare-fun x425 () Bool)
(declare-fun x586 () Int)
(declare-fun x436 () Int)
(declare-fun x13 () Bool)
(declare-fun x617 () Bool)
(declare-fun x267 () Bool)
(declare-fun x460 () Int)
(declare-fun x477 () Int)
(declare-fun x388 () Int)
(declare-fun x575 () Int)
(declare-fun x264 () Bool)
(declare-fun x85 () Int)
(declare-fun x214 () Bool)
(declare-fun x490 (Int Int) Int)
(declare-fun x539 () Int)
(declare-fun x449 () Bool)
(declare-fun x603 () Int)
(declare-fun x315 () Bool)
(declare-fun x618 () Int)
(declare-fun x278 () Bool)
(declare-fun x526 () Int)
(declare-fun x390 () Bool)
(declare-fun x271 () Bool)
(declare-fun x40 () Int)
(declare-fun x409 () Bool)
(declare-fun x94 () Bool)
(declare-fun x467 () Bool)
(declare-fun x616 (Int) Int)
(declare-fun x259 () Int)
(declare-fun x578 () Int)
(declare-fun x401 () Int)
(declare-fun x57 () Bool)
(declare-fun x400 () Int)
(declare-fun x5 () Int)
(declare-fun x2 () Int)
(declare-fun x311 () Bool)
(declare-fun x242 () Int)
(declare-fun x84 () Int)
(declare-fun x487 () Int)
(declare-fun x488 () Bool)
(declare-fun x277 () Int)
(declare-fun x11 () Int)
(declare-fun x478 (Int) Int)
(declare-fun x194 () Int)
(declare-fun x48 () Int)
(declare-fun x359 (Int) Int)
(declare-fun x485 () Int)
(declare-fun x224 () Int)
(declare-fun x391 (Int Int) Int)
(declare-fun x112 () Int)
(declare-fun x232 () Bool)
(declare-fun x514 () Bool)
(declare-fun x102 () Bool)
(declare-fun x334 () Bool)
(declare-fun x51 () Int)
(declare-fun x201 () Int)
(declare-fun x456 () Bool)
(declare-fun x552 (Int Int) Int)
(declare-fun x73 () Int)
(declare-fun x202 () Int)
(declare-fun x26 () Int)
(declare-fun x372 () Int)
(declare-fun x473 () Int)
(declare-fun x427 () Bool)
(declare-fun x504 () Int)
(declare-fun x43 () Bool)
(declare-fun x501 () Bool)
(declare-fun x16 () Int)
(declare-fun x588 (Int) Int)
(declare-fun x90 () Int)
(declare-fun x428 () Bool)
(declare-fun x275 () Int)
(declare-fun x321 () Bool)
(declare-fun x222 () Bool)
(declare-fun x581 () Int)
(declare-fun x457 () Bool)
(declare-fun x272 () Int)
(declare-fun x573 () Bool)
(declare-fun x410 () Int)
(declare-fun x276 () Int)
(declare-fun x375 () Int)
(declare-fun x353 () Int)
(declare-fun x351 () Int)
(declare-fun x265 () Bool)
(declare-fun x270 () Int)
(declare-fun x540 () Int)
(declare-fun x50 () Bool)
(declare-fun x430 () Bool)
(declare-fun x415 () Int)
(declare-fun x168 () Int)
(declare-fun x370 (Int) Int)
(declare-fun x475 () Bool)
(declare-fun x192 () Int)
(declare-fun x381 () Bool)
(declare-fun x167 () Int)
(declare-fun x423 () Bool)
(declare-fun x382 () Int)
(declare-fun x207 () Int)
(declare-fun x328 () Int)
(declare-fun x373 (Int Int) Int)
(declare-fun x145 () Int)
(declare-fun x68 () Bool)
(declare-fun x63 () Bool)
(declare-fun x349 () Int)
(declare-fun x550 () Int)
(declare-fun x537 () Int)
(declare-fun x243 () Int)
(declare-fun x288 () Int)
(declare-fun x613 () Int)
(declare-fun x336 (Int) Int)
(declare-fun x360 () Bool)
(declare-fun x72 () Bool)
(declare-fun x142 () Bool)
(declare-fun x433 () Int)
(declare-fun x175 () Int)
(declare-fun x213 () Int)
(declare-fun x132 () Int)
(declare-fun x25 () Bool)
(declare-fun x294 () Int)
(declare-fun x596 () Int)
(declare-fun x9 () Bool)
(declare-fun x551 () Int)
(declare-fun x307 () Bool)
(declare-fun x136 () Int)
(declare-fun x171 () Int)
(declare-fun x166 () Bool)
(declare-fun x585 () Bool)
(declare-fun x402 () Bool)
(declare-fun x34 () Int)
(declare-fun x157 () Int)
(declare-fun x297 () Bool)
(declare-fun x284 () Int)
(declare-fun x186 () Int)
(declare-fun x219 () Int)
(declare-fun x560 () Int)
(declare-fun x407 () Int)
(declare-fun x155 () Int)
(declare-fun x600 () Int)
(declare-fun x412 () Int)
(declare-fun x453 () Bool)
(declare-fun x335 () Int)
(declare-fun x69 (Int) Int)
(declare-fun x395 () Int)
(declare-fun x180 () Int)
(declare-fun x92 () Int)
(declare-fun x331 (Int) Int)
(declare-fun x606 () Bool)
(declare-fun x601 () Bool)
(declare-fun x299 () Int)
(declare-fun x426 () Int)
(declare-fun x431 () Bool)
(declare-fun x165 () Int)
(declare-fun x100 () Int)
(declare-fun x318 () Int)
(declare-fun x630 () Int)
(declare-fun x424 () Int)
(declare-fun x461 () Int)
(declare-fun x442 () Bool)
(declare-fun x358 () Int)
(declare-fun x494 () Int)
(declare-fun x408 () Int)
(declare-fun x231 () Int)
(declare-fun x12 () Bool)
(declare-fun x462 () Int)
(declare-fun x455 () Bool)
(declare-fun x71 () Int)
(declare-fun x322 (Int Int) Int)
(declare-fun x6 (Int) Int)
(declare-fun x293 (Int) Int)
(declare-fun x464 () Bool)
(declare-fun x369 () Bool)
(declare-fun x397 () Int)
(declare-fun x486 () Bool)
(declare-fun x101 () Int)
(declare-fun x598 () Int)
(declare-fun x203 () Int)
(declare-fun x66 () Int)
(declare-fun x301 () Int)
(declare-fun x356 () Int)
(declare-fun x225 () Int)
(declare-fun x200 () Bool)
(declare-fun x128 (Int Int) Int)
(declare-fun x223 () Int)
(declare-fun x482 () Int)
(declare-fun x115 () Int)
(declare-fun x458 () Int)
(declare-fun x570 () Int)
(declare-fun x583 () Int)
(declare-fun x296 () Int)
(declare-fun x185 () Int)
(declare-fun x621 () Int)
(declare-fun x347 () Bool)
(declare-fun x227 () Bool)
(declare-fun x459 () Bool)
(declare-fun x506 () Bool)
(declare-fun x339 () Int)
(declare-fun x340 () Bool)
(declare-fun x35 () Int)
(declare-fun x162 () Bool)
(declare-fun x109 () Int)
(declare-fun x363 (Int) Int)
(declare-fun x392 (Int) Int)
(declare-fun x67 () Int)
(declare-fun x489 () Int)
(declare-fun x282 () Bool)
(declare-fun x161 (Int Int) Int)
(declare-fun x443 () Bool)
(declare-fun x210 () Int)
(declare-fun x508 () Bool)
(declare-fun x117 () Int)
(declare-fun x622 () Int)
(declare-fun x441 () Bool)
(declare-fun x557 () Int)
(declare-fun x448 (Int) Int)
(declare-fun x125 () Bool)
(declare-fun x380 () Int)
(declare-fun x404 () Bool)
(declare-fun x580 () Int)
(declare-fun x406 () Int)
(declare-fun x74 () Int)
(declare-fun x610 () Int)
(declare-fun x329 () Bool)
(declare-fun x556 () Bool)
(declare-fun x3 () Int)
(declare-fun x160 () Int)
(declare-fun x524 () Int)
(declare-fun x385 () Int)
(declare-fun x310 () Bool)
(declare-fun x177 () Bool)
(declare-fun x517 () Bool)
(declare-fun x257 () Int)
(declare-fun x103 () Int)
(declare-fun x509 () Int)
(declare-fun x536 () Int)
(declare-fun x38 (Int) Int)
(declare-fun x95 () Bool)
(declare-fun x37 (Int) Int)
(declare-fun x24 () Int)
(declare-fun x615 () Bool)
(declare-fun x116 () Int)
(declare-fun x134 () Int)
(declare-fun x593 () Int)
(declare-fun x582 () Bool)
(declare-fun x396 () Int)
(declare-fun x547 () Int)
(declare-fun x450 () Int)
(declare-fun x97 (Int) Int)
(declare-fun x314 () Int)
(declare-fun x532 () Int)
(declare-fun x44 () Int)
(declare-fun x236 () Int)
(declare-fun x429 () Int)
(declare-fun x389 () Bool)
(declare-fun x233 () Int)
(declare-fun x468 () Int)
(declare-fun x323 () Int)
(declare-fun x379 () Int)
(declare-fun x279 () Int)
(declare-fun x218 () Bool)
(declare-fun x251 () Int)
(declare-fun x183 () Bool)
(declare-fun x607 () Bool)
(declare-fun x86 () Int)
(declare-fun x156 () Int)
(declare-fun x438 () Bool)
(declare-fun x241 () Bool)
(declare-fun x483 () Int)
(declare-fun x419 () Int)
(declare-fun x89 () Int)
(declare-fun x256 () Int)
(declare-fun x313 () Int)
(declare-fun x435 () Int)
(declare-fun x543 () Int)
(declare-fun x204 () Int)
(declare-fun x61 () Int)
(declare-fun x211 () Bool)
(declare-fun x70 () Bool)
(declare-fun x465 (Int) Int)
(declare-fun x386 () Bool)
(declare-fun x14 () Int)
(declare-fun x493 () Int)
(declare-fun x495 () Bool)
(declare-fun x592 () Int)
(declare-fun x421 () Int)
(declare-fun x333 () Int)
(declare-fun x221 () Int)
(declare-fun x378 (Int) Int)
(declare-fun x268 () Int)
(declare-fun x197 () Int)
(declare-fun x571 () Int)
(declare-fun x182 (Int) Int)
(declare-fun x589 () Int)
(declare-fun x152 () Int)
(declare-fun x158 () Int)
(declare-fun x187 () Int)
(declare-fun x141 () Int)
(declare-fun x398 (Int) Int)
(declare-fun x574 () Int)
(declare-fun x362 () Int)
(declare-fun x528 () Bool)
(declare-fun x546 () Int)
(declare-fun x181 () Int)
(declare-fun x367 () Int)
(declare-fun x437 () Int)
(declare-fun x548 () Bool)
(declare-fun x510 (Int) Int)
(declare-fun x189 (Int) Int)
(declare-fun x505 () Bool)
(declare-fun x261 () Int)
(declare-fun x553 () Int)
(declare-fun x371 () Int)
(declare-fun x46 () Int)
(declare-fun x420 (Int) Int)
(declare-fun x59 () Int)
(declare-fun x387 () Bool)
(declare-fun x576 () Int)
(define-fun x383 ((x554 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x554) (>= x554 0)) x554 (- x554 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x324 ((x554 Int)) Int (ite (and (< x554 0) (>= x554 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x554 115792089237316195423570985008687907853269984665640564039457584007913129639936) x554))
(define-fun x239 ((x554 Int)) Int (ite (and (>= x554 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x554)) x554 (ite (and (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 x554) (> 231584178474632390847141970017375815706539969331281128078915168015826259279872 x554)) (- x554 115792089237316195423570985008687907853269984665640564039457584007913129639936) (ite (and (>= x554 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (< x554 0)) (+ x554 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x373 x554 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(define-fun x472 ((x452 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x452) (<= 0 x452)))
(define-fun x247 ((x452 Int)) Bool (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x452) (>= x452 0)))
(define-fun x345 ((x452 Int) (x523 Int)) Bool (=> (and (> x523 0) (< 0 x452)) (and (>= x452 (x322 x452 x523)) (<= 0 (x322 x452 x523)))))
(define-fun x627 ((x452 Int) (x523 Int)) Bool (=> (and (and (<= 1 x523) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x523)) (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x452) (>= x452 0))) (and (>= (x322 x452 x523) 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x322 x452 x523)))))
(define-fun x114 ((x452 Int) (x523 Int)) Bool (=> (and (> x452 x523) (> x523 1)) (> x452 (x322 x452 x523))))
(define-fun x36 ((x452 Int) (x523 Int)) Bool (=> (and (< 0 x523) (> x452 0)) (= (< x452 x523) (= (x322 x452 x523) 0))))
(define-fun x469 ((x452 Int) (x523 Int)) Bool (=> (and (> x452 0) (< 0 x523)) (and (> (x391 (x322 x452 x523) x523) (- x452 x523)) (<= (x391 (x322 x452 x523) x523) x452))))
(define-fun x174 ((x452 Int) (x523 Int)) Bool (and (x469 x452 x523) (x36 x452 x523) (x114 x452 x523) (x345 x452 x523) (x627 x452 x523)))
(define-fun x368 ((x452 Int)) Bool (= 0 (x322 0 x452)))
(define-fun x250 ((x452 Int)) Bool (= (x322 x452 1) x452))
(define-fun x105 ((x452 Int)) Bool (=> (not (= 0 x452)) (= 1 (x322 x452 x452))))
(define-fun x354 ((x452 Int)) Bool (and (x250 x452) (x105 x452) (x368 x452)))
(define-fun x346 ((x452 Int)) Bool (and (= (x128 115792089237316195423570985008687907853269984665640564039457584007913129639935 x452) x452) (= x452 (x128 x452 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x572 ((x452 Int)) Bool (and (= 0 (x128 x452 0)) (= (x128 0 x452) 0)))
(define-fun x39 ((x452 Int)) Bool (= x452 (x128 x452 x452)))
(define-fun x326 ((x452 Int)) Bool (and (x572 x452) (x39 x452) (x346 x452)))
(define-fun x463 ((x452 Int) (x523 Int)) Bool (= (x128 x523 x452) (x128 x452 x523)))
(define-fun x511 ((x452 Int) (x523 Int)) Bool (and (=> (<= 0 x523) (>= x523 (x128 x452 x523))) (=> (>= x452 0) (>= x452 (x128 x452 x523))) (<= 0 (x128 x452 x523))))
(define-fun x298 ((x452 Int) (x523 Int)) Bool (and (x511 x452 x523) (x463 x452 x523)))
(define-fun x447 ((x452 Int)) Bool (= (x373 x452 2) (x128 x452 1)))
(define-fun x304 ((x452 Int)) Bool (and (x447 x452) (x298 x452 1)))
(define-fun x344 ((x452 Int) (x523 Int)) Bool (and (>= (x373 x452 x523) 0) (< (x373 x452 x523) x523)))
(define-fun x513 ((x452 Int) (x523 Int)) Bool (=> (and (>= x452 0) (> x523 0)) (= (= (x373 x452 x523) x452) (< x452 x523))))
(define-fun x374 ((x452 Int) (x523 Int)) Bool (=> (and (> x523 0) (and (> (+ x523 x523) x452) (<= x523 x452))) (= (- x452 x523) (x373 x452 x523))))
(define-fun x289 ((x452 Int) (x523 Int)) Bool (=> (< 0 x523) (= x452 (+ (x373 x452 x523) (* x523 (x322 x452 x523))))))
(define-fun x559 ((x452 Int) (x523 Int)) Bool (and (x289 x452 x523) (x344 x452 x523) (x513 x452 x523) (x374 x452 x523)))
(define-fun x123 ((x452 Int)) Bool (= (x373 0 x452) 0))
(define-fun x316 ((x452 Int)) Bool (= 0 (x373 x452 1)))
(define-fun x140 ((x452 Int)) Bool (= 0 (x373 x452 x452)))
(define-fun x498 ((x452 Int)) Bool (and (x123 x452) (x140 x452) (x316 x452)))
(define-fun x96 ((x452 Int)) Bool (= (x239 x452) (+ (x128 x452 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x373 x452 32))))
(define-fun x281 ((x452 Int)) Bool (and (x96 x452) (x298 x452 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(define-fun x195 ((x452 Int)) Bool (= (x128 x452 6277101735386680763835789423207666416102355444464034512895) (x373 x452 6277101735386680763835789423207666416102355444464034512896)))
(define-fun x530 ((x452 Int)) Bool (and (x195 x452) (x298 x452 6277101735386680763835789423207666416102355444464034512895)))
(define-fun x357 ((x452 Int) (x523 Int)) Bool (= (* x452 x523) (x391 x452 x523)))
(define-fun x384 ((x452 Int) (x523 Int)) Bool (and (= (x391 (- x452 115792089237316195423570985008687907853269984665640564039457584007913129639936) x523) (- (* x523 x452) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 x523))) (= (x391 x452 (- x523 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* x452 (- x523 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (x391 (- x452 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x523 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (- (* x452 (- x523 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* 115792089237316195423570985008687907853269984665640564039457584007913129639936 (- x523 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))
(define-fun x124 ((x452 Int) (x523 Int)) Bool (=> (and (< 0 x452) (< 0 x523)) (= (= x523 (x322 (x239 (x391 x452 x523)) x452)) (< (x391 x452 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(define-fun x405 ((x452 Int) (x523 Int)) Bool (=> (and (not (= x452 0)) (not (= 0 x523))) (and (= x523 (x322 (x391 x452 x523) x452)) (= x452 (x322 (x391 x452 x523) x523)))))
(define-fun x566 ((x452 Int) (x523 Int)) Bool (=> (and (< 0 x523) (< 0 x452)) (= (< (x322 115792089237316195423570985008687907853269984665640564039457584007913129639935 x452) x523) (> (x391 x452 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x159 ((x452 Int) (x523 Int)) Bool (and (= (x239 (x391 x452 x523)) (x239 (x391 (- x452 115792089237316195423570985008687907853269984665640564039457584007913129639936) x523))) (= (x239 (x391 x452 (- x523 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x239 (x391 x452 x523))) (= (x239 (x391 (- x452 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x523 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x239 (x391 x452 x523)))))
(define-fun x500 ((x452 Int) (x523 Int)) Bool (and (=> (and (and (< 0 x452) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x452)) (and (<= x523 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x523 0))) (= (<= (x391 x452 x523) 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x452 (x322 57896044618658097711785492504343953926634992332820282019728792003956564819967 x523)))) (=> (and (and (> x452 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x452)) (and (> x523 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x523 115792089237316195423570985008687907853269984665640564039457584007913129639935))) (= (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x452) (x322 57896044618658097711785492504343953926634992332820282019728792003956564819967 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x523))) (<= (x391 (- x452 115792089237316195423570985008687907853269984665640564039457584007913129639936) (- x523 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (=> (and (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x452) (<= x452 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (and (< 0 x523) (<= x523 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (>= (x322 57896044618658097711785492504343953926634992332820282019728792003956564819968 x523) (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x452)) (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x391 (- x452 115792089237316195423570985008687907853269984665640564039457584007913129639936) x523)))) (=> (and (and (<= x523 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> x523 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (> x452 0) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x452))) (= (<= (- 115792089237316195423570985008687907853269984665640564039457584007913129639936 x523) (x322 57896044618658097711785492504343953926634992332820282019728792003956564819968 x452)) (<= (- 57896044618658097711785492504343953926634992332820282019728792003956564819968) (x391 x452 (- x523 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))))
(define-fun x619 ((x452 Int) (x523 Int)) Bool (and (x405 x452 x523) (x384 x452 x523) (x500 x452 x523) (x357 x452 x523) (x566 x452 x523) (x159 x452 x523) (x124 x452 x523)))
(define-fun x83 ((x452 Int)) Bool (and (= 0 (x391 0 x452)) (= 0 (x391 x452 0))))
(define-fun x27 ((x452 Int)) Bool (and (= (x391 x452 1) x452) (= (x391 1 x452) x452)))
(define-fun x127 ((x452 Int)) Bool (and (x27 x452) (x83 x452)))
(define-fun x238 ((x452 Int)) Bool (= (x373 x452 8) (+ (x128 x452 4) (x373 x452 4))))
(define-fun x29 ((x452 Int)) Bool (and (x298 x452 4) (x238 x452)))
(define-fun x611 ((x452 Int) (x523 Int)) Bool (=> (and (> x523 0) (< 0 x452)) (and (>= x452 (* (x322 x452 x523) x523)) (> (* x523 (x322 x452 x523)) (- x452 x523)))))
(define-fun x361 ((x452 Int) (x523 Int)) Bool (= (* x523 (x322 x452 x523)) (- x452 (x128 (- x523 1) x452))))
(define-fun x529 ((x452 Int) (x523 Int)) Bool (and (x361 x452 x523) (x36 x452 x523) (x345 x452 x523) (x114 x452 x523) (x611 x452 x523) (x627 x452 x523)))
(define-fun x229 ((x452 Int)) Bool (and (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x552 115792089237316195423570985008687907853269984665640564039457584007913129639935 x452)) (= (x552 x452 115792089237316195423570985008687907853269984665640564039457584007913129639935) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(define-fun x292 ((x452 Int)) Bool (and (= (x552 0 x452) x452) (= x452 (x552 x452 0))))
(define-fun x30 ((x452 Int)) Bool (= x452 (x552 x452 x452)))
(define-fun x56 ((x452 Int)) Bool (and (x292 x452) (x30 x452) (x229 x452)))
(define-fun x17 ((x452 Int) (x523 Int)) Bool (= (x552 x452 x523) (x552 x523 x452)))
(define-fun x246 ((x452 Int) (x523 Int)) Bool (and (<= (x552 x452 x523) (+ x452 x523)) (=> (<= 0 x523) (<= x523 (x552 x452 x523))) (=> (>= x452 0) (<= x452 (x552 x452 x523)))))
(define-fun x108 ((x452 Int) (x523 Int)) Bool (and (x17 x452 x523) (x246 x452 x523)))
(define-fun x252 ((x393 Int)) Int (ite (< x393 x429) (x189 x393) 0))
(define-fun x295 ((x393 Int)) Int (ite (< x393 x270) (x331 x393) 0))
(define-fun x306 ((x393 Int)) Int (ite (> x207 x393) (x319 x393) 0))
(define-fun x235 ((x393 Int)) Int (ite (> x541 x393) (x448 x393) 0))
(define-fun x337 ((x393 Int)) Int 0)
(define-fun x538 ((x393 Int)) Int 0)
(define-fun x130 ((x393 Int)) Int 0)
(define-fun x544 ((x393 Int)) Int 0)
(define-fun x394 ((x393 Int)) Int 0)
(define-fun x499 ((x393 Int)) Int 0)
(define-fun x52 ((x393 Int)) Int 0)
(define-fun x491 ((x393 Int)) Int 0)
(define-fun x542 ((x393 Int)) Int 0)
(define-fun x312 ((x393 Int)) Int 0)
(define-fun x7 ((x393 Int)) Int 0)
(define-fun x93 ((x393 Int)) Int 0)
(define-fun x365 ((x393 Int)) Int 0)
(define-fun x22 ((x393 Int)) Int 0)
(define-fun x21 ((x393 Int)) Int 0)
(define-fun x28 ((x393 Int)) Int 0)
(define-fun x609 ((x393 Int)) Int 0)
(define-fun x440 ((x393 Int)) Int 0)
(define-fun x113 ((x393 Int)) Int 0)
(define-fun x587 ((x393 Int)) Int 0)
(define-fun x18 ((x393 Int)) Int 0)
(define-fun x220 ((x393 Int)) Int 0)
(define-fun x45 ((x393 Int)) Int 0)
(define-fun x260 ((x393 Int)) Int 0)
(define-fun x518 ((x393 Int)) Int 0)
(define-fun x196 ((x393 Int)) Int 0)
(define-fun x417 ((x393 Int)) Int 0)
(define-fun x64 ((x393 Int)) Int 0)
(define-fun x497 ((x393 Int)) Int 0)
(define-fun x248 ((x393 Int)) Int (ite (= x325 x393) x436 (x620 x393)))
(define-fun x584 ((x393 Int)) Int (ite (= x536 x393) x401 (x248 x393)))
(define-fun x245 ((x393 Int)) Int (ite x422 (ite x422 (x392 x393) (x293 x393)) (x392 x393)))
(define-fun x188 ((x393 Int)) Int (ite x198 (x392 x393) (x245 x393)))
(define-fun x31 ((x393 Int)) Int (ite x422 (ite x422 (x465 x393) (x6 x393)) (x465 x393)))
(define-fun x41 ((x393 Int)) Int (ite x198 (x465 x393) (x31 x393)))
(define-fun x519 ((x393 Int)) Int (ite x422 (ite x422 (x336 x393) (x144 x393)) (x336 x393)))
(define-fun x193 ((x393 Int)) Int (ite x198 (x336 x393) (x519 x393)))
(define-fun x262 ((x393 Int)) Int (ite (= x223 x393) x51 (x363 x393)))
(define-fun x343 ((x393 Int)) Int (ite x590 (x392 x393) (ite x198 (x392 x393) (x245 x393))))
(define-fun x244 ((x393 Int)) Int (ite x590 (x465 x393) (ite x198 (x465 x393) (x31 x393))))
(define-fun x149 ((x393 Int)) Int (ite x590 (x336 x393) (ite x198 (x336 x393) (x519 x393))))
(define-fun x341 ((x393 Int)) Int 0)
(define-fun x303 ((x393 Int)) Int 0)
(define-fun x376 ((x393 Int)) Int 0)
(define-fun x10 ((x393 Int)) Int (ite (= x393 x494) x192 (x584 x393)))
(define-fun x107 ((x393 Int)) Int (ite (= x536 x393) x407 (x10 x393)))
(define-fun x479 ((x393 Int)) Int (ite (= x551 x393) x598 (x107 x393)))
(define-fun x625 ((x393 Int)) Int (ite (= x393 x176) 1 (x196 x393)))
(define-fun x474 ((x393 Int)) Int (ite (< x393 x100) (x398 x393) 0))
(define-fun x8 ((x393 Int)) Int (ite (and (<= 0 x393) (< x393 x100)) (x378 x393) (x474 x393)))
(define-fun x151 ((x393 Int)) Int (ite (and (<= x175 x393) (< x393 (+ 1 x175))) (x8 (- (+ x101 x393) x175)) (x260 x393)))
(define-fun x216 ((x393 Int)) Int (ite (= x309 x393) 0 (x151 x393)))
(define-fun x445 ((x393 Int)) Int (ite (= x393 x586) 110026930297299635154336525195245038188021419673779079278965243793336073977856 (x544 x393)))
(define-fun x208 ((x393 Int)) Int (ite (= x302 x393) x630 (x445 x393)))
(define-fun x65 ((x393 Int)) Int (ite (= x586 x393) x138 (x208 x393)))
(define-fun x577 ((x393 Int)) Int (ite (= x537 x393) 46441568142033591978231907782937720737460700430992383298758718876245066514432 (x65 x393)))
(define-fun x150 ((x393 Int)) Int (ite (= x393 x231) x14 (x577 x393)))
(define-fun x563 ((x393 Int)) Int (ite (= x393 x258) x546 (x150 x393)))
(define-fun x604 ((x393 Int)) Int (ite (= x353 x393) 96 (x563 x393)))
(define-fun x82 ((x393 Int)) Int (ite (= x71 x393) x255 (x604 x393)))
(define-fun x569 ((x393 Int)) Int (ite (and (<= x115 x393) (> (+ x255 x115) x393)) (x216 (- (+ x393 x175) x115)) (x82 x393)))
(define-fun x411 ((x393 Int)) Int (ite (and (> x180 x393) (<= 132 x393)) (x569 (- (+ x393 (x383 (+ x537 132))) 132)) (x235 x393)))
(define-fun x286 ((x393 Int)) Int (x484 x393))
(define-fun x191 ((x393 Int)) Int (x510 x393))
(define-fun x444 ((x393 Int)) Int (x413 x393))
(define-fun x432 ((x393 Int)) Int (x69 x393))
(define-fun x471 ((x393 Int)) Int (x139 x393))
(define-fun x350 ((x393 Int)) Int (x182 x393))
(define-fun x273 ((x393 Int)) Int (x172 x393))
(define-fun x399 ((x393 Int)) Int (x38 x393))
(define-fun x4 ((x393 Int)) Int (ite (= x393 0) x33 (x206 x393)))
(define-fun x53 ((x393 Int)) Int (ite (= x393 x537) x33 (x569 x393)))
(define-fun x403 ((x393 Int)) Int (ite (and (> (+ 32 x537) x393) (>= x393 x537)) (x4 (- x393 x537)) (x52 x393)))
(define-fun x122 ((x393 Int)) Int (ite x422 (x336 x393) (x144 x393)))
(define-fun x249 ((x393 Int)) Int (ite x422 (x465 x393) (x6 x393)))
(define-fun x283 ((x393 Int)) Int (ite x422 (x392 x393) (x293 x393)))
(define-fun x120 ((x393 Int)) Int (ite (= 128 x393) x527 (x312 x393)))
(define-fun x118 ((x393 Int)) Int (ite (and (<= 160 x393) (< x393 (+ 160 x527))) (x8 (- (+ x393 x101) 160)) (x499 x393)))
(define-fun x480 ((x393 Int)) Int (ite (= x184 x393) 0 (x118 x393)))
(define-fun x49 ((x393 Int)) Int (ite (= 0 x393) x138 (x616 x393)))
(define-fun x23 ((x393 Int)) Int (ite (and (> (+ x586 32) x393) (<= x586 x393)) (x49 (- x393 x586)) (x337 x393)))
(assert (x472 x90))
(assert (=> (<= x277 10000) (= (x37 x277) 0)))
(assert (x498 (ite (> 256 x333) (x161 2 x333) 0)))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x535 64 x481 153)))
(assert (= 0 (x37 1722613502)))
(assert (=> (>= 10000 x460) (= (x37 x460) 0)))
(assert (x472 x46))
(assert (= (x478 (x535 64 x546 152)) x546))
(assert (x472 x117))
(assert (x472 x521))
(assert (x472 x121))
(assert (x472 x351))
(assert (= x221 (x478 (x535 64 x221 153))))
(assert (x559 x567 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x326 x272))
(assert (= (x478 (x535 64 x630 155)) x630))
(assert (= (and (not x142) x70) x25))
(assert (x472 x14))
(assert (x619 1 (x161 2 x333)))
(assert (x619 32 x253))
(assert (= (=> (and (= x585 (= x450 0)) (= (= x183 x177) x55) (= x42 false) (= x177 (not x585)) (= x308 false) (= false x442) (= 0 x160) (= x488 false)) x55) x278))
(assert (= x425 (and x222 x57)))
(assert (= x506 (=> (and (= x431 (= 0 x547)) (or (and (and (<= 1 x583) (= x583 (x120 128)) (= x524 (x490 x424 248)) (<= x333 255) (= (x480 x593) x424) (<= 1 x46) (= x61 (- x46 1)) (= x46 (x120 128)) (= x593 (x383 (+ x203 128))) (> x333 x524) (= x203 (x383 (+ 32 x61))) (<= x424 115339776388732929035197660848497720713218148788040405586178452820382218977279) (< x61 x583) (>= x333 1)) (not x431)) x431)) x449)))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x535 64 x99 153)))
(assert (x472 x35))
(assert (= x389 (or x422 x25)))
(assert (= 153 (x420 (x535 64 x221 153))))
(assert (x472 x318))
(assert (< 10000 (x535 64 x460 153)))
(assert (x472 x167))
(assert (< (x507 32 x414) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x247 x207))
(assert (= 152 (x420 (x535 64 x502 152))))
(assert (= (x37 (x535 64 x277 152)) (x535 64 x277 152)))
(assert (x472 x630))
(assert (> (x535 64 x502 152) 10000))
(assert (= (x420 (x535 64 x546 152)) 152))
(assert (x472 x629))
(assert (= (and x425 x427) x271))
(assert (x472 x152))
(assert (x472 x272))
(assert (x127 (x161 2 (x490 x314 248))))
(assert (x106 1363191112))
(assert (= (=> (and (or (and x142 (and x280 (= (x324 (- x299 x537)) x180) (= x536 x522) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x537) (= (x383 (+ 4 x537)) x231) (>= 6277101735386680763835789423207666416102355444464034512895 x91) (not (> x397 x597)) (not x360) (<= 1 x522) (= x81 46441568142033591978231907782937720737460700430992383298758718876245066514432) (= (x359 x592) x301) x9 (= (x383 (+ 31 x255)) x567) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x180) (= x71 (x383 (+ x231 96))) (>= x597 132) (= x3 x11) (<= x537 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= x11 x546) (= x112 x14) (= x33 (x128 6277101735386680763835789423207666416102355444464034512895 x272)) (not (= x537 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (= (< 0 x603) x9) (= (= x255 (x235 100)) x280) (= x91 (x403 x537)) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x597) (= x397 (+ 132 x614)) (= x614 (x411 100)) (= (x383 (+ x71 32)) x115) (= (x383 (+ x115 x199)) x299) (= x603 (ite (= 0 x91) 1 0)) (= x624 false) (= 1722613502 x348) (<= x614 18446744073709551615) (= x467 false) (>= x180 132) (>= x301 1) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x537)) (<= x204 127) (= x180 x597) (= x272 0) (= x372 96) (<= x204 127) (= x92 (x383 (+ x537 32))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x537) (= false x300) (<= x522 1461501637330902918203684832716283019655932542975) (= (x128 115792089237316195423570985008687907853269984665640564039457584007913129639904 x567) x199) (not (= x537 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (= false x340) (= (x625 x176) x255) (= (x383 (+ 32 x258)) x353) (= (> x614 0) x360) (< x537 x92) (= (x383 (+ x231 32)) x258))) (not x142)) (and (not (= x176 115792089237316195423570985008687907853269984665640564039457584007913129639872)) (> x537 x176) (= (x383 (+ 1 x175)) x309) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639872 x176)) (= (x128 1 x132) x531) (<= x176 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= x537 (x383 (+ x176 64))) (= 1 x531) (= x132 (x490 x87 x630)) (<= x176 115792089237316195423570985008687907853269984665640564039457584007913129639934) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x176) (= 1 x504) (= x175 (x383 (+ x176 32))) (= x142 (= x543 1)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639872 x176)))) x347) x386))
(assert (< 10000 (x535 64 x546 152)))
(assert (x472 x187))
(assert (x29 x351))
(assert (= x618 (x478 (x507 32 x618))))
(assert (= (ite (< x630 256) (x322 x87 (x161 2 x630)) 0) (x490 x87 x630)))
(assert (x247 x133))
(assert (and (= 38685626227668133590597632 (x161 2 85)) (= 618970019642690137449562112 (x161 2 89)) (= 452312848583266388373324160190187140051835877600158453279131187530910662656 (x161 2 248)) (= (x161 2 244) 28269553036454149273332760011886696253239742350009903329945699220681916416) (= 4722366482869645213696 (x161 2 72)) (= (x161 2 19) 524288) (= (x161 2 217) 210624583337114373395836055367340864637790190801098222508621955072) (= 65536 (x161 2 16)) (= (x161 2 66) 73786976294838206464) (= (x161 2 188) 392318858461667547739736838950479151006397215279002157056) (= 6427752177035961102167848369364650410088811975131171341205504 (x161 2 202)) (= 4503599627370496 (x161 2 52)) (= 174224571863520493293247799005065324265472 (x161 2 137)) (= (x161 2 123) 10633823966279326983230456482242756608) (= (x161 2 118) 332306998946228968225951765070086144) (= 11417981541647679048466287755595961091061972992 (x161 2 153)) (= (x161 2 236) 110427941548649020598956093796432407239217743554726184882600387580788736) (= 17592186044416 (x161 2 44)) (= (x161 2 8) 256) (= (x161 2 243) 14134776518227074636666380005943348126619871175004951664972849610340958208) (= 549755813888 (x161 2 39)) (= (x161 2 49) 562949953421312) (= (x161 2 84) 19342813113834066795298816) (= (x161 2 5) 32) (= 81129638414606681695789005144064 (x161 2 106)) (= 536870912 (x161 2 29)) (= (x161 2 69) 590295810358705651712) (= 2854495385411919762116571938898990272765493248 (x161 2 151)) (= (x161 2 187) 196159429230833773869868419475239575503198607639501078528) (= (x161 2 30) 1073741824) (= 1361129467683753853853498429727072845824 (x161 2 130)) (= (x161 2 227) 215679573337205118357336120696157045389097155380324579848828881993728) (= (x161 2 105) 40564819207303340847894502572032) (= (x161 2 114) 20769187434139310514121985316880384) (= (x161 2 245) 56539106072908298546665520023773392506479484700019806659891398441363832832) (= 182687704666362864775460604089535377456991567872 (x161 2 157)) (= (x161 2 11) 2048) (= (x161 2 156) 91343852333181432387730302044767688728495783936) (= 5986310706507378352962293074805895248510699696029696 (x161 2 172)) (= (x161 2 241) 3533694129556768659166595001485837031654967793751237916243212402585239552) (= (x161 2 65) 36893488147419103232) (= 3213876088517980551083924184682325205044405987565585670602752 (x161 2 201)) (= (x161 2 2) 4) (= 68719476736 (x161 2 36)) (= 42535295865117307932921825928971026432 (x161 2 125)) (= 18446744073709551616 (x161 2 64)) (= (x161 2 170) 1496577676626844588240573268701473812127674924007424) (= (x161 2 159) 730750818665451459101842416358141509827966271488) (= 70368744177664 (x161 2 46)) (= (x161 2 82) 4835703278458516698824704) (= 8192 (x161 2 13)) (= (x161 2 190) 1569275433846670190958947355801916604025588861116008628224) (= (x161 2 133) 10889035741470030830827987437816582766592) (= 288230376151711744 (x161 2 58)) (= (x161 2 14) 16384) (= (x161 2 18) 262144) (= 64 (x161 2 6)) (= (x161 2 184) 24519928653854221733733552434404946937899825954937634816) (= (x161 2 35) 34359738368) (= (x161 2 251) 3618502788666131106986593281521497120414687020801267626233049500247285301248) (= 281474976710656 (x161 2 48)) (= 113078212145816597093331040047546785012958969400039613319782796882727665664 (x161 2 246)) (= 3291009114642412084309938365114701009965471731267159726697218048 (x161 2 211)) (= 295147905179352825856 (x161 2 68)) (= 1267650600228229401496703205376 (x161 2 100)) (= 10141204801825835211973625643008 (x161 2 103)) (= (x161 2 146) 89202980794122492566142873090593446023921664) (= (x161 2 255) 57896044618658097711785492504343953926634992332820282019728792003956564819968) (= 105312291668557186697918027683670432318895095400549111254310977536 (x161 2 216)) (= (x161 2 33) 8589934592) (= 8 (x161 2 3)) (= 35184372088832 (x161 2 45)) (= (x161 2 186) 98079714615416886934934209737619787751599303819750539264) (= (x161 2 119) 664613997892457936451903530140172288) (= (x161 2 1) 2) (= 3138550867693340381917894711603833208051177722232017256448 (x161 2 191)) (= (x161 2 210) 1645504557321206042154969182557350504982735865633579863348609024) (= (x161 2 225) 53919893334301279589334030174039261347274288845081144962207220498432) (= (x161 2 152) 5708990770823839524233143877797980545530986496) (= 3369993333393829974333376885877453834204643052817571560137951281152 (x161 2 221)) (= (x161 2 185) 49039857307708443467467104868809893875799651909875269632) (= (x161 2 12) 4096) (= 85070591730234615865843651857942052864 (x161 2 126)) (= 842498333348457493583344221469363458551160763204392890034487820288 (x161 2 219)) (= 8388608 (x161 2 23)) (= (x161 2 209) 822752278660603021077484591278675252491367932816789931674304512) (= (x161 2 197) 200867255532373784442745261542645325315275374222849104412672) (= 75557863725914323419136 (x161 2 76)) (= (x161 2 97) 158456325028528675187087900672) (= (x161 2 22) 4194304) (= (x161 2 166) 93536104789177786765035829293842113257979682750464) (= 72057594037927936 (x161 2 56)) (= 649037107316853453566312041152512 (x161 2 109)) (= 604462909807314587353088 (x161 2 79)) (= 77371252455336267181195264 (x161 2 86)) (= (x161 2 57) 144115188075855872) (= 100433627766186892221372630771322662657637687111424552206336 (x161 2 196)) (= 11972621413014756705924586149611790497021399392059392 (x161 2 173)) (= 2251799813685248 (x161 2 51)) (= (x161 2 34) 17179869184) (= 20282409603651670423947251286016 (x161 2 104)) (= (x161 2 218) 421249166674228746791672110734681729275580381602196445017243910144) (= (x161 2 213) 13164036458569648337239753460458804039861886925068638906788872192) (= (x161 2 87) 154742504910672534362390528) (= 365375409332725729550921208179070754913983135744 (x161 2 158)) (= (x161 2 10) 1024) (= 401734511064747568885490523085290650630550748445698208825344 (x161 2 198)) (= 43556142965880123323311949751266331066368 (x161 2 135)) (= (x161 2 120) 1329227995784915872903807060280344576) (= 46768052394588893382517914646921056628989841375232 (x161 2 165)) (= 1684996666696914987166688442938726917102321526408785780068975640576 (x161 2 220)) (= 1099511627776 (x161 2 40)) (= 1 (x161 2 0)) (= (x161 2 7) 128) (= 166153499473114484112975882535043072 (x161 2 117)) (= 1048576 (x161 2 20)) (= (x161 2 90) 1237940039285380274899124224) (= (x161 2 70) 1180591620717411303424) (= 1606938044258990275541962092341162602522202993782792835301376 (x161 2 200)) (= (x161 2 128) 340282366920938463463374607431768211456) (= (x161 2 63) 9223372036854775808) (= 348449143727040986586495598010130648530944 (x161 2 138)) (= 1393796574908163946345982392040522594123776 (x161 2 140)) (= 5444517870735015415413993718908291383296 (x161 2 132)) (= 4951760157141521099596496896 (x161 2 92)) (= (x161 2 9) 512) (= 883423532389192164791648750371459257913741948437809479060803100646309888 (x161 2 239)) (= (x161 2 148) 356811923176489970264571492362373784095686656) (= 5575186299632655785383929568162090376495104 (x161 2 142)) (= (x161 2 73) 9444732965739290427392) (= (x161 2 194) 25108406941546723055343157692830665664409421777856138051584) (= 1461501637330902918203684832716283019655932542976 (x161 2 160)) (= (x161 2 242) 7067388259113537318333190002971674063309935587502475832486424805170479104) (= (x161 2 144) 22300745198530623141535718272648361505980416) (= (x161 2 127) 170141183460469231731687303715884105728) (= 26959946667150639794667015087019630673637144422540572481103610249216 (x161 2 224)) (= 7237005577332262213973186563042994240829374041602535252466099000494570602496 (x161 2 252)) (= (x161 2 204) 25711008708143844408671393477458601640355247900524685364822016) (= 748288838313422294120286634350736906063837462003712 (x161 2 169)) (= (x161 2 81) 2417851639229258349412352) (= (x161 2 27) 134217728) (= 10384593717069655257060992658440192 (x161 2 113)) (= 26328072917139296674479506920917608079723773850137277813577744384 (x161 2 214)) (= 2361183241434822606848 (x161 2 71)) (= (x161 2 129) 680564733841876926926749214863536422912) (= (x161 2 171) 2993155353253689176481146537402947624255349848014848) (= (x161 2 178) 383123885216472214589586756787577295904684780545900544) (= (x161 2 108) 324518553658426726783156020576256) (= 696898287454081973172991196020261297061888 (x161 2 139)) (= 226156424291633194186662080095093570025917938800079226639565593765455331328 (x161 2 247)) (= (x161 2 131) 2722258935367507707706996859454145691648) (= (x161 2 24) 16777216) (= (x161 2 180) 1532495540865888858358347027150309183618739122183602176) (= 12554203470773361527671578846415332832204710888928069025792 (x161 2 193)) (= 37778931862957161709568 (x161 2 75)) (= 302231454903657293676544 (x161 2 78)) (= (x161 2 124) 21267647932558653966460912964485513216) (= (x161 2 94) 19807040628566084398385987584) (= 268435456 (x161 2 28)) (= 191561942608236107294793378393788647952342390272950272 (x161 2 177)) (= (x161 2 42) 4398046511104) (= 22835963083295358096932575511191922182123945984 (x161 2 154)) (= (x161 2 212) 6582018229284824168619876730229402019930943462534319453394436096) (= (x161 2 101) 2535301200456458802993406410752) (= 9903520314283042199192993792 (x161 2 93)) (= 3064991081731777716716694054300618367237478244367204352 (x161 2 181)) (= (x161 2 253) 14474011154664524427946373126085988481658748083205070504932198000989141204992) (= 18014398509481984 (x161 2 54)) (= (x161 2 147) 178405961588244985132285746181186892047843328) (= 6901746346790563787434755862277025452451108972170386555162524223799296 (x161 2 232)) (= 27606985387162255149739023449108101809804435888681546220650096895197184 (x161 2 234)) (= 45671926166590716193865151022383844364247891968 (x161 2 155)) (= 67108864 (x161 2 26)) (= (x161 2 37) 137438953472) (= 5316911983139663491615228241121378304 (x161 2 122)) (= 862718293348820473429344482784628181556388621521298319395315527974912 (x161 2 229)) (= 803469022129495137770981046170581301261101496891396417650688 (x161 2 199)) (= 28948022309329048855892746252171976963317496166410141009864396001978282409984 (x161 2 254)) (= 5846006549323611672814739330865132078623730171904 (x161 2 162)) (= (x161 2 47) 140737488355328) (= (x161 2 168) 374144419156711147060143317175368453031918731001856) (= 3450873173395281893717377931138512726225554486085193277581262111899648 (x161 2 231)) (= (x161 2 206) 102844034832575377634685573909834406561420991602098741459288064) (= (x161 2 207) 205688069665150755269371147819668813122841983204197482918576128) (= 9007199254740992 (x161 2 53)) (= (x161 2 143) 11150372599265311570767859136324180752990208) (= 187072209578355573530071658587684226515959365500928 (x161 2 167)) (= (x161 2 31) 2147483648) (= 151115727451828646838272 (x161 2 77)) (= (x161 2 175) 47890485652059026823698344598447161988085597568237568) (= 51422017416287688817342786954917203280710495801049370729644032 (x161 2 205)) (= (x161 2 256) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= 309485009821345068724781056 (x161 2 88)) (= 2787593149816327892691964784081045188247552 (x161 2 141)) (= (x161 2 80) 1208925819614629174706176) (= (x161 2 235) 55213970774324510299478046898216203619608871777363092441300193790394368) (= (x161 2 17) 131072) (= 1809251394333065553493296640760748560207343510400633813116524750123642650624 (x161 2 250)) (= (x161 2 237) 220855883097298041197912187592864814478435487109452369765200775161577472) (= 16 (x161 2 4)) (= (x161 2 110) 1298074214633706907132624082305024) (= 36028797018963968 (x161 2 55)) (= (x161 2 136) 87112285931760246646623899502532662132736) (= (x161 2 215) 52656145834278593348959013841835216159447547700274555627155488768) (= 316912650057057350374175801344 (x161 2 98)) (= (x161 2 183) 12259964326927110866866776217202473468949912977468817408) (= (x161 2 249) 904625697166532776746648320380374280103671755200316906558262375061821325312) (= 12855504354071922204335696738729300820177623950262342682411008 (x161 2 203)) (= (x161 2 38) 274877906944) (= 39614081257132168796771975168 (x161 2 95)) (= (x161 2 32) 4294967296) (= 2923003274661805836407369665432566039311865085952 (x161 2 161)) (= (x161 2 99) 633825300114114700748351602688) (= 13803492693581127574869511724554050904902217944340773110325048447598592 (x161 2 233)) (= 41538374868278621028243970633760768 (x161 2 115)) (= (x161 2 240) 1766847064778384329583297500742918515827483896875618958121606201292619776) (= 1152921504606846976 (x161 2 60)) (= (x161 2 15) 32768) (= 5070602400912917605986812821504 (x161 2 102)) (= (x161 2 25) 33554432) (= 713623846352979940529142984724747568191373312 (x161 2 149)) (= (x161 2 228) 431359146674410236714672241392314090778194310760649159697657763987456) (= (x161 2 74) 18889465931478580854784) (= 23945242826029513411849172299223580994042798784118784 (x161 2 174)) (= 13479973333575319897333507543509815336818572211270286240551805124608 (x161 2 223)) (= 6739986666787659948666753771754907668409286105635143120275902562304 (x161 2 222)) (= 2097152 (x161 2 21)) (= (x161 2 150) 1427247692705959881058285969449495136382746624) (= (x161 2 112) 5192296858534827628530496329220096) (= (x161 2 134) 21778071482940061661655974875633165533184) (= (x161 2 238) 441711766194596082395824375185729628956870974218904739530401550323154944) (= (x161 2 59) 576460752303423488) (= (x161 2 195) 50216813883093446110686315385661331328818843555712276103168) (= (x161 2 163) 11692013098647223345629478661730264157247460343808) (= (x161 2 179) 766247770432944429179173513575154591809369561091801088) (= 411376139330301510538742295639337626245683966408394965837152256 (x161 2 208)) (= (x161 2 91) 2475880078570760549798248448) (= (x161 2 83) 9671406556917033397649408) (= 2305843009213693952 (x161 2 61)) (= 6277101735386680763835789423207666416102355444464034512896 (x161 2 192)) (= 2199023255552 (x161 2 41)) (= (x161 2 50) 1125899906842624) (= (x161 2 121) 2658455991569831745807614120560689152) (= 95780971304118053647396689196894323976171195136475136 (x161 2 176)) (= (x161 2 107) 162259276829213363391578010288128) (= (x161 2 62) 4611686018427387904) (= (x161 2 111) 2596148429267413814265248164610048) (= (x161 2 189) 784637716923335095479473677900958302012794430558004314112) (= (x161 2 96) 79228162514264337593543950336) (= (x161 2 182) 6129982163463555433433388108601236734474956488734408704) (= (x161 2 145) 44601490397061246283071436545296723011960832) (= 147573952589676412928 (x161 2 67)) (= 8796093022208 (x161 2 43)) (= (x161 2 226) 107839786668602559178668060348078522694548577690162289924414440996864) (= (x161 2 230) 1725436586697640946858688965569256363112777243042596638790631055949824) (= (x161 2 164) 23384026197294446691258957323460528314494920687616) (= (x161 2 116) 83076749736557242056487941267521536)))
(assert (x472 x379))
(assert (x472 x236))
(assert (x472 x325))
(assert (= (x37 (x507 32 x618)) (x507 32 x618)))
(assert (x472 x146))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x535 64 x221 153)))
(assert (x472 x170))
(assert (x472 x77))
(assert (not (x106 (x507 32 x618))))
(assert (= 0 (x37 115792089237316195423570985008687907853269984665640564039457584007913129639934)))
(assert (x247 x435))
(assert (x106 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x498 x567))
(assert (x106 115792089237316195423570985008687907853269984665640564039457584007913129639934))
(assert (x472 x255))
(assert (x472 x557))
(assert (= (x37 6277101735386680763835789423207666416102355444464034512895) 0))
(assert (x472 x477))
(assert (= 155 (x420 (x535 64 x630 155))))
(assert (x106 4294967295))
(assert (x472 x116))
(assert (x472 x504))
(assert (x472 x203))
(assert (x472 x199))
(assert (x472 x437))
(assert (x354 x424))
(assert (< (x535 64 x460 153) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x472 x555))
(assert (= (x37 (x535 64 x221 153)) (x535 64 x221 153)))
(assert (= (or x514 x63) x76))
(assert (= (x37 (x535 64 x460 153)) (x535 64 x460 153)))
(assert (x559 x547 6277101735386680763835789423207666416102355444464034512896))
(assert (x472 x145))
(assert (x472 x302))
(assert (= (x37 (x507 32 x364)) (x507 32 x364)))
(assert (= (x37 (x507 32 x540)) (x507 32 x540)))
(assert (= (x588 (x535 64 x460 153)) 64))
(assert (x106 110026930297299635154336525195245038188021419673779079278965243793336073977856))
(assert (x106 1461501637330902918203684832716283019655932542975))
(assert (x472 x564))
(assert (x619 1 (x161 2 (x490 x485 248))))
(assert (= (x478 (x535 64 x630 3)) x630))
(assert (x472 x231))
(assert (x354 x87))
(assert (x498 8))
(assert (x472 x207))
(assert (< (x535 64 x502 152) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x472 x335))
(assert (x472 x98))
(assert (x472 x526))
(assert (x106 324282958))
(assert (x472 x132))
(assert (x472 x178))
(assert (= (x239 (ite (< x333 256) (x161 2 x333) 0)) (x287 1 x333)))
(assert (x472 x234))
(assert (not (x106 (x507 32 x414))))
(assert (x498 x547))
(assert (= x628 (and x508 x457)))
(assert (= x460 (x478 (x535 64 x460 153))))
(assert (not (x106 (x535 64 x481 153))))
(assert (= (x37 1461501637330902918203684832716283019655932542975) 0))
(assert (x106 6277101735386680763835789423207666416102355444464034512895))
(assert (x619 1 (x161 2 (x490 x314 248))))
(assert (= 0 (x37 4081125666)))
(assert (x472 x54))
(assert (x472 x176))
(assert (x304 x132))
(assert (x472 x19))
(assert (x472 x395))
(assert (x326 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (=> (<= x613 10000) (= (x37 x613) 0)))
(assert (x529 x424 452312848583266388373324160190187140051835877600158453279131187530910662656))
(assert (x108 x580 x137))
(assert (x559 (ite (< (x490 x314 248) 256) (x161 2 (x490 x314 248)) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (=> (>= 10000 x536) (= (x37 x536) 0)))
(assert (x326 x547))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x507 32 x618)))
(assert (x472 x314))
(assert (x472 x553))
(assert (x472 x163))
(assert (not (x106 (x535 64 x460 153))))
(assert (x472 x47))
(assert (x174 x87 (x161 2 x630)))
(assert (x472 x67))
(assert (x498 x272))
(assert (= 3 (x420 (x535 64 x630 3))))
(assert (=> (>= 10000 x592) (= (x37 x592) 0)))
(assert (x472 x87))
(assert (x472 x148))
(assert (not (x106 (x535 64 x99 153))))
(assert (x472 x401))
(assert (= (x588 (x507 32 x364)) 32))
(assert (x472 x290))
(assert (x472 x550))
(assert (= (x588 (x535 64 x546 152)) 64))
(assert (x472 x103))
(assert (x472 x11))
(assert (= (x37 (+ x225 1)) (x37 x225)))
(assert (x472 x591))
(assert (x472 x543))
(assert (x56 x580))
(assert (x472 x277))
(assert (x472 x66))
(assert (x472 x80))
(assert (x326 1))
(assert (= x456 (or x169 x329)))
(assert (x498 6277101735386680763835789423207666416102355444464034512896))
(assert (=> (>= 10000 x470) (= (x37 x470) 0)))
(assert (x472 x435))
(assert (x106 4081125666))
(assert (= (x478 (x507 32 x414)) x414))
(assert (x472 x180))
(assert (= (x37 (+ x5 x626)) (x37 x626)))
(assert (x529 x314 452312848583266388373324160190187140051835877600158453279131187530910662656))
(assert (x472 x243))
(assert (x472 x622))
(assert (= (x535 64 x99 153) (x37 (x535 64 x99 153))))
(assert (x472 x596))
(assert (x472 x320))
(assert (x354 32))
(assert (=> (>= 10000 x103) (= (x37 x103) 0)))
(assert (x472 x268))
(assert (x472 x527))
(assert (= x457 true))
(assert (not (x106 (x535 64 x502 152))))
(assert (x472 x489))
(assert (= (x420 (x535 64 x277 152)) 152))
(assert (not (x106 (x535 64 x14 153))))
(assert (= (x322 x314 452312848583266388373324160190187140051835877600158453279131187530910662656) (x490 x314 248)))
(assert (x472 x541))
(assert (= (x37 110026930297299635154336525195245038188021419673779079278965243793336073977856) 0))
(assert (= (x37 x276) (x37 (+ 1 x276))))
(assert (x472 x237))
(assert (= (x322 x487 452312848583266388373324160190187140051835877600158453279131187530910662656) (x490 x487 248)))
(assert (x472 x407))
(assert (x472 x258))
(assert (not (x106 (x507 32 x540))))
(assert (=> (>= 10000 x546) (= (x37 x546) 0)))
(assert (= (x37 x224) (x37 (+ x224 1))))
(assert (= x590 (and x57 (not x222))))
(assert (x127 32))
(assert (x619 32 x290))
(assert (x472 x99))
(assert (= x601 (=> (and (and (= x430 false) (= 36 x594) (= x451 x156) (= x164 false)) (and (and (and (<= x589 127) (= false x402) (= false x332) (<= 1 x152) (= x481 x288) (= x453 false) (= 324282958 x564) (= x121 36) (= x68 false) (= (x535 64 x481 153) x261) (= false x111) (= x152 (x359 x536)) (>= 127 x589) (= false x428) (= x502 x78) (= x502 (x370 x261)) (= false x423)) (and (and (<= 1 x131) (= x556 false) (= x291 x551) (= x486 (= x434 0)) (= x167 x80) (= (x479 x536) x167) (= (x107 x551) x598) (= 2266951753 x40) (= x434 (x244 x323)) (= (x535 64 x502 152) x323) (>= 127 x570) (= false x606) (>= 127 x570) (= x78 x426) (= x131 (x359 x536))) (or (and x486 (= x450 0)) (and (and (= (x244 x414) x591) (= (- x434 1) x596) (= (x535 64 x502 152) x414) (> x591 x596) (>= x591 1) (>= 6277101735386680763835789423207666416102355444464034512895 x458) (= (x507 32 x414) x612) (= x458 x450) (= x458 (x149 x215)) (= (+ x612 x596) x215) (<= 1 x434)) (not x486))))) (and (<= x555 127) (= x183 (= x145 1)) (= x288 x156) (= 4248375386 x141) (= x232 false) (= false x390) (<= x555 127) (= x99 x451) (>= x24 1) (= x225 (x535 64 x99 153)) (= x476 36) (<= x145 2) (= false x241) (= x366 false) (= x24 (x359 x536)) (= (x343 x446) x145) (= false x454) (= (+ 1 x225) x446) (= false x264)))) x278)))
(assert (x106 57896044618658097711785492504343953926634992332820282019728792003956564819968))
(assert (x472 x294))
(assert (x472 x462))
(assert (x619 32 x187))
(assert (x106 4248375386))
(assert (x498 x351))
(assert (x472 x157))
(assert (x326 4))
(assert (x472 x185))
(assert (< 10000 (x535 64 x14 153)))
(assert (x106 452312848583266388373324160190187140051835877600158453279131187530910662656))
(assert (x326 x89))
(assert (= (x37 x612) (x37 (+ x612 x596))))
(assert (x472 x348))
(assert (= x218 (and (not x125) x104)))
(assert (x498 x132))
(assert (= 0 (x37 452312848583266388373324160190187140051835877600158453279131187530910662656)))
(assert (=> (>= 10000 x86) (= 0 (x37 x86))))
(assert (x472 x613))
(assert (x472 x129))
(assert (= 64 (x588 (x535 64 x277 152))))
(assert (x106 115792089237316195423570985008687907853269984665640564039457584007913129639872))
(assert (x472 x589))
(assert (> (x535 64 x630 155) 10000))
(assert (= (x37 (x535 64 x630 155)) (x535 64 x630 155)))
(assert (x326 x351))
(assert (= (x420 (x535 64 x14 153)) 153))
(assert (= 0 (x37 57896044618658097711785492504343953926634992332820282019728792003956564819968)))
(assert (x472 x3))
(assert (< 10000 (x535 64 x99 153)))
(assert (x472 x602))
(assert (< 10000 (x507 32 x414)))
(assert (x472 x372))
(assert (x472 x40))
(assert (=> (>= 10000 x14) (= (x37 x14) 0)))
(assert (=> (>= 10000 x221) (= (x37 x221) 0)))
(assert (x127 x253))
(assert (x472 x221))
(assert (x472 x429))
(assert (x472 x115))
(assert (= (and x70 x142) x422))
(assert (x354 x485))
(assert (x326 6277101735386680763835789423207666416102355444464034512895))
(assert (x472 x257))
(assert (x472 x26))
(assert (x472 x436))
(assert (= 0 (x37 115339776388732929035197660848497720713218148788040405586178452820382218977279)))
(assert (x472 x426))
(assert (x472 x576))
(assert (= x14 (x478 (x535 64 x14 153))))
(assert (x559 x567 32))
(assert (x247 x371))
(assert (not (x106 (x535 64 x630 3))))
(assert (x472 x558))
(assert (= x502 (x478 (x535 64 x502 152))))
(assert (x472 x594))
(assert (x472 x60))
(assert (x326 x132))
(assert (x247 x270))
(assert (x472 x578))
(assert (x472 x470))
(assert (= (x588 (x535 64 x221 153)) 64))
(assert (= (x37 x574) (x37 (+ x257 x574))))
(assert (= 0 (x37 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (= (=> (= x468 x547) x506) x88))
(assert (x472 x32))
(assert (x472 x581))
(assert (= (and (not x431) x456) x409))
(assert (x106 57896044618658097711785492504343953926634992332820282019728792003956564819967))
(assert (= (x490 x485 248) (x322 x485 452312848583266388373324160190187140051835877600158453279131187530910662656)))
(assert (x472 x575))
(assert (x247 x541))
(assert (x559 x351 4))
(assert (x472 x494))
(assert (x472 x190))
(assert (x472 x154))
(assert (x498 x461))
(assert (x472 x520))
(assert (and (= (x391 3 3) 9) (= (x391 9 9) 81) (= 27 (x391 9 3)) (= (x391 27 3) 81)))
(assert (= (or x198 x389) x20))
(assert (x472 x81))
(assert (x472 x138))
(assert (x472 x305))
(assert (x472 x205))
(assert (x472 x270))
(assert (= (x588 (x535 64 x14 153)) 64))
(assert (x472 x194))
(assert (x472 x112))
(assert (x472 x349))
(assert (= 0 (x37 46441568142033591978231907782937720737460700430992383298758718876245066514432)))
(assert (not (x106 (x535 64 x630 155))))
(assert (= (and x271 (not x516)) x517))
(assert (x472 x461))
(assert (= (x588 (x507 32 x618)) 32))
(assert (x472 x524))
(assert (x472 x269))
(assert (= (x588 (x535 64 x630 3)) 64))
(assert (x472 x137))
(assert (x106 46441568142033591978231907782937720737460700430992383298758718876245066514432))
(assert (x472 x309))
(assert (x472 x299))
(assert (< (x535 64 x14 153) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (=> (<= x325 10000) (= (x37 x325) 0)))
(assert (= (=> (and (<= x580 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= 1 x580) (= x137 (x287 1 (x490 x314 248))) (= (x480 161) x314) (= x165 (x120 128)) (>= x352 2) (= (not (< 2 x165)) x214) (= (x120 128) x352) (>= x314 452312848583266388373324160190187140051835877600158453279131187530910662656) (> x137 x580)) (and (=> (= (x552 x580 x137) x468) x88) x214)) x211))
(assert (x472 x78))
(assert (x472 x522))
(assert (x472 x141))
(assert (= (x239 (ite (> 256 (x490 x485 248)) (x161 2 (x490 x485 248)) 0)) (x287 1 (x490 x485 248))))
(assert (= x143 (and x125 x104)))
(assert (x472 x487))
(assert (= 0 (x37 1363191112)))
(assert (x472 x571))
(assert (x472 x476))
(assert (x472 x204))
(assert (x472 x385))
(assert (= (x588 (x535 64 x481 153)) 64))
(assert (x472 x330))
(assert (< 10000 (x535 64 x221 153)))
(assert (x498 2))
(assert (= x198 (and (not x427) x425)))
(assert (x472 x44))
(assert (x472 x536))
(assert (= (x420 (x535 64 x99 153)) 153))
(assert (x472 x382))
(assert (x472 x165))
(assert (x472 x603))
(assert (x559 x132 2))
(assert (x472 x61))
(assert (= (x37 4248375386) 0))
(assert (not (x106 (x507 32 x364))))
(assert (x247 x476))
(assert (x472 x586))
(assert (x354 (+ 31 x527)))
(assert (=> (>= 10000 x194) (= 0 (x37 x194))))
(assert (= x63 (and x310 x486)))
(assert (x472 x560))
(assert (x472 x2))
(assert (= (x37 57896044618658097711785492504343953926634992332820282019728792003956564819899) 0))
(assert (not (x106 (x535 64 x546 152))))
(assert (x472 x406))
(assert (= x329 (or x143 x218)))
(assert (x472 x412))
(assert (x106 57896044618658097711785492504343953926634992332820282019728792003956564819899))
(assert (x472 x219))
(assert (x106 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (x127 1))
(assert (x472 x608))
(assert (= 0 (x37 324282958)))
(assert (x127 (x161 2 x333)))
(assert (x472 x58))
(assert (= (x478 (x535 64 x277 152)) x277))
(assert (x530 x547))
(assert (x472 x86))
(assert (x472 x415))
(assert (x472 x333))
(assert (=> (<= x630 10000) (= 0 (x37 x630))))
(assert (x472 x546))
(assert (x559 (ite (< x333 256) (x161 2 x333) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x472 x296))
(assert (=> (>= 10000 x481) (= (x37 x481) 0)))
(assert (x529 x485 452312848583266388373324160190187140051835877600158453279131187530910662656))
(assert (x472 x583))
(assert (= (x37 (x535 64 x14 153)) (x535 64 x14 153)))
(assert (x472 x33))
(assert (x354 x314))
(assert (not (x106 (x535 64 x277 152))))
(assert (x247 x121))
(assert (= (=> (and (and (and (= (+ x276 1) x263) (<= x116 127) (= x129 4248375386) (= false x548) (= x334 false) (= x94 false) (= false x321) (= (x359 x536) x237) (= false x617) (<= 1 x237) (= false x455) (<= x116 127) (= x276 (x535 64 x221 153)) (>= 2 x179) (= x156 x433) (= x102 (= x179 1)) (= x59 x221) (= x269 36) (= (x392 x263) x179)) (and (and (= x571 (x359 x536)) (= x371 36) (<= x236 127) (= x483 (x535 64 x460 153)) (= false x72) (= x464 false) (= x254 false) (>= x571 1) (= x277 (x370 x483)) (= x50 false) (= x277 x412) (= false x582) (<= x236 127) (= false x267) (= x460 x433) (= x282 false) (= 324282958 x382)) (and (and (= false x173) (<= x155 127) (= x473 (x535 64 x277 152)) (= x34 (x465 x473)) (= x291 x325) (= x412 x154) (<= x155 127) (= x436 (x620 x325)) (= x47 (x248 x536)) (= false x135) (= (= x34 0) x508) (= x401 x47) (= x553 2266951753) (<= 1 x416) (= (x359 x536) x416)) (or (and (not x508) (and (= x5 (- x34 1)) (= x210 (+ x626 x5)) (= x157 x234) (= (x465 x540) x562) (= x540 (x535 64 x277 152)) (<= 1 x34) (= (x336 x210) x234) (> x562 x5) (= x626 (x507 32 x540)) (<= 1 x562) (<= x234 6277101735386680763835789423207666416102355444464034512895))) (and (= 0 x157) x508))))) (and (= x599 false) (<= 0 x623) (not (= x103 x470)) (>= 1461501637330902918203684832716283019655932542975 x240) (not (= x470 x328)) (<= 0 x367) (<= x181 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x339 2) (>= x362 0) (not (= x194 x328)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x213) (not (= x613 x592)) (<= 0 x240) (<= x558 1461501637330902918203684832716283019655932542975) (= (< 0 (x359 x592)) x492) (>= x156 0) (not (= x592 x470)) (<= 0 x534) (>= 1461501637330902918203684832716283019655932542975 x418) (>= 1461501637330902918203684832716283019655932542975 x470) (<= x522 1461501637330902918203684832716283019655932542975) (<= 0 x595) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x595) (<= x623 1461501637330902918203684832716283019655932542975) (not (= x86 x536)) (not (= x194 x86)) (>= x226 0) (= x119 0) (= x369 false) (<= x328 1461501637330902918203684832716283019655932542975) x443 (not (= x328 x592)) (>= 1461501637330902918203684832716283019655932542975 x605) (= (< 0 (x359 x194)) x13) (<= 1 x103) (<= x549 1461501637330902918203684832716283019655932542975) (= 0 x134) (>= 1461501637330902918203684832716283019655932542975 x526) (>= 1461501637330902918203684832716283019655932542975 x592) (>= x613 1) (<= 1 x470) (>= x171 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x75) (<= x16 1461501637330902918203684832716283019655932542975) (>= x1 0) (<= x194 1461501637330902918203684832716283019655932542975) (<= x358 1461501637330902918203684832716283019655932542975) (>= x275 0) (<= 1 x194) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x367) (<= x275 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= x86 1461501637330902918203684832716283019655932542975) (<= 0 x74) (= x166 (< 0 (x359 x613))) (>= x197 0) (not (= x470 x194)) (= x156 x59) (<= 0 x358) (not (= x194 x592)) (<= 132 x100) (not (= x86 x328)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x171) (<= x197 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= x1 4294967295) (>= x75 0) (<= 1 x86) (<= 0 x181) x166 x492 (<= x536 1461501637330902918203684832716283019655932542975) (= (> (x359 x536) 0) x443) (>= x549 0) (not (= x536 x328)) (= x466 (> (x359 x328) 0)) (>= x536 1) (<= 1 x328) (<= x515 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x213) (>= x388 0) (= 36 x435) x13 (= x536 x482) (>= 1461501637330902918203684832716283019655932542975 x388) x466 (not (= x536 x103)) (<= x613 1461501637330902918203684832716283019655932542975) (not (= x613 x470)) (>= 1461501637330902918203684832716283019655932542975 x534) x228 (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x74) (<= x156 1461501637330902918203684832716283019655932542975) (= x228 (> (x359 x470) 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x356) x15 (not (= x103 x86)) (not (= x470 x86)) (not (= x328 x103)) (<= 0 x291) (not (= x536 x194)) (not (= x592 x86)) (= 1363191112 x568) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x100) (not (= x103 x194)) (<= 0 x356) (= (< 0 (x359 x86)) x607) (<= x377 1461501637330902918203684832716283019655932542975) (not (= x536 x613)) (= false x505) (<= 0 x515) (not (= x613 x86)) (>= 1461501637330902918203684832716283019655932542975 x103) (not (= x613 x194)) (>= x592 1) (= x15 (< 0 (x359 x103))) x607 (not (= x613 x103)) (= x565 false) (not (= x536 x592)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x362) (not (= x103 x592)) (not (= x470 x536)) (not (= x613 x328)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x226) (<= x291 1461501637330902918203684832716283019655932542975) (<= x202 1461501637330902918203684832716283019655932542975))) x533) x43))
(assert (x472 x328))
(assert (x559 x272 6277101735386680763835789423207666416102355444464034512896))
(assert (x298 x89 x48))
(assert (x559 (ite (> 256 (x490 x485 248)) (x161 2 (x490 x485 248)) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x472 x397))
(assert (x472 x570))
(assert (x472 x126))
(assert (= 0 (x37 18446744073709551615)))
(assert (> (x535 64 x481 153) 10000))
(assert (x472 x580))
(assert (x472 x434))
(assert (= (x37 115792089237316195423570985008687907853269984665640564039457584007913129639872) 0))
(assert (x472 x186))
(assert (x559 x461 6277101735386680763835789423207666416102355444464034512896))
(assert (x529 x487 452312848583266388373324160190187140051835877600158453279131187530910662656))
(assert (x472 x84))
(assert (x472 x450))
(assert (not x43))
(assert (x498 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x472 x380))
(assert (x472 x313))
(assert (= 64 (x588 (x535 64 x502 152))))
(assert (x472 x410))
(assert (> (x507 32 x540) 10000))
(assert (x472 x424))
(assert (x472 x545))
(assert (= (x478 (x507 32 x540)) x540))
(assert (x472 x327))
(assert (x472 x301))
(assert (x472 x175))
(assert (x472 x184))
(assert (= (x37 57896044618658097711785492504343953926634992332820282019728792003956564819967) 0))
(assert (x472 x371))
(assert (= x99 (x478 (x535 64 x99 153))))
(assert (x472 x259))
(assert (x106 1722613502))
(assert (=> (<= x494 10000) (= 0 (x37 x494))))
(assert (= (x535 64 x546 152) (x37 (x535 64 x546 152))))
(assert (x472 x597))
(assert (x472 x537))
(assert (= x147 (=> (and (= x223 (x535 64 x630 155)) (= x475 (not (< 1 x527)))) (and x601 x475))))
(assert (< 10000 (x507 32 x618)))
(assert (x529 (+ 31 x527) 32))
(assert (= (x420 (x535 64 x460 153)) 153))
(assert (= (and x310 (not x486)) x514))
(assert (x472 x593))
(assert (x472 x614))
(assert (= (x37 2266951753) 0))
(assert (= (x37 x251) (x37 (+ x421 x251))))
(assert (x106 18446744073709551615))
(assert (= (x420 (x535 64 x481 153)) 153))
(assert (x472 x547))
(assert (=> (<= x502 10000) (= (x37 x502) 0)))
(assert (x247 x594))
(assert (x472 x567))
(assert (x472 x101))
(assert (x472 x73))
(assert (= x481 (x478 (x535 64 x481 153))))
(assert (=> (>= 10000 x551) (= (x37 x551) 0)))
(assert (x472 x509))
(assert (x326 x48))
(assert (= (x535 64 x630 3) (x37 (x535 64 x630 3))))
(assert (x472 x131))
(assert (= (or x315 x628) x95))
(assert (x530 x461))
(assert (x472 x468))
(assert (x472 x605))
(assert (x472 x419))
(assert (x56 x137))
(assert (= (x588 (x535 64 x99 153)) 64))
(assert (x472 x284))
(assert (x472 x532))
(assert (= 0 (x37 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x472 x416))
(assert (x472 x179))
(assert (x472 x279))
(assert (x472 x485))
(assert (x472 x317))
(assert (x127 x290))
(assert (x472 x496))
(assert (= x70 (or x297 x517)))
(assert (= (=> (and (= x461 (- (x287 1 x333) 1)) (= x222 (> x527 0)) (= x89 (x128 6277101735386680763835789423207666416102355444464034512895 x547)) (= 1 x84) (= x48 (x128 6277101735386680763835789423207666416102355444464034512895 x461)) (= x89 x98) (= x98 (x128 x89 x48)) (= 1 x170) (= x187 x527)) (and (=> (not x222) x601) (=> (and (and (>= 127 x201) (= x284 (x383 (+ 32 x317))) (= x489 x90) (= 36 x622) (= (x97 x439) x138) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x586)) (not (= x586 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (or (and (< x385 x2) (= (<= x385 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x2 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x2) (> x385 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (>= x313 1) (>= x26 1) (or (>= 57896044618658097711785492504343953926634992332820282019728792003956564819899 x385) (<= 57896044618658097711785492504343953926634992332820282019728792003956564819968 x385)) (= x317 (x383 (+ x385 x408))) (<= x379 4294967295) (<= x187 18446744073709551615) (= x379 x253) (= false x311) (= x630 (x490 x487 248)) (= x302 (x383 (+ 4 x586))) (= (x535 64 x630 3) x256) (= x257 (- x26 1)) (>= 4294967295 x138) (= (x8 x101) x487) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x586)) (= x493 (* x253 32)) (= x313 (x359 x328)) (= (x8 x317) x253) (= 110026930297299635154336525195245038188021419673779079278965243793336073977856 x375) (= (x324 (- x126 x586)) x622) (= x265 false) (= x439 (+ x257 x574)) (= x133 36) (= (x274 x256) x26) (= (x507 32 x618) x574) (= false x266) (= (x324 (- x100 x408)) x217) (= x525 false) (= (< 0 x253) x427) (< x586 x557) (= x60 4081125666) (= (x324 (- x100 x493)) x419) (>= 18446744073709551615 x527) (<= 1 x602) (not (or (and (> x284 x419) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x284) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x419))) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x419) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x284)))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x586) (= x630 x489) (> x602 x257) (= (x383 (+ x302 32)) x126) (<= x586 115792089237316195423570985008687907853269984665640564039457584007913129639934) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x586) (= (x274 x618) x602) (= x2 (x324 (- x217 31))) (<= 1 x527) (= x557 (x383 (+ x586 32))) (= (x23 x586) x379) (= (x535 64 x630 3) x618) (<= x201 127) (>= x187 1) (= x385 (x8 x408)) (>= 4294967295 x253)) x222) (and (=> (and x427 (and (or (and x516 (= 0 x87)) (and (and (= x294 x87) (= (x535 64 x546 152) x364) (<= x294 6277101735386680763835789423207666416102355444464034512895) (= x421 (- x560 1)) (= x251 (x507 32 x364)) (= (+ x251 x421) x158) (= (x465 x364) x415) (<= 1 x415) (>= x560 1) (< x421 x415) (= x294 (x336 x158))) (not x516))) (and (= x176 (x383 (+ 64 x557))) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639872 x557)) (<= x557 115792089237316195423570985008687907853269984665640564039457584007913129639934) (> x176 x557) (= x610 (+ 1 x224)) (= x14 (x8 x284)) (<= x543 2) (<= x557 115792089237316195423570985008687907853269984665640564039457584007913129639934) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639872 x557)) (= x539 (x535 64 x546 152)) (<= x14 1461501637330902918203684832716283019655932542975) (= (= x560 0) x516) (= x560 (x465 x539)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x557) (<= x253 4294967295) (>= x14 1) (>= x253 1) (= x224 (x535 64 x14 153)) (= x543 (x392 x610)) (= x546 (x370 x224)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639872 x557))))) x386) (=> (not x427) x147))))) x449))
(assert (x326 x461))
(assert (x472 x242))
(assert (=> (<= x328 10000) (= 0 (x37 x328))))
(assert (x354 452312848583266388373324160190187140051835877600158453279131187530910662656))
(assert (x472 x79))
(assert (x472 x502))
(assert (x472 x16))
(assert (x472 x458))
(assert (= (x478 (x507 32 x364)) x364))
(assert (x472 x375))
(assert (x326 x567))
(assert (x472 x100))
(assert (= (x507 32 x414) (x37 (x507 32 x414))))
(assert (= (x37 (x535 64 x502 152)) (x535 64 x502 152)))
(assert (x498 (ite (< (x490 x485 248) 256) (x161 2 (x490 x485 248)) 0)))
(assert (< (x507 32 x364) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x472 x531))
(assert (x472 x85))
(assert (x472 x377))
(assert (x472 x493))
(assert (= (x588 (x535 64 x630 155)) 64))
(assert (= (x37 4294967295) 0))
(assert (= (x287 1 (x490 x314 248)) (x239 (ite (< (x490 x314 248) 256) (x161 2 (x490 x314 248)) 0))))
(assert (x498 (ite (> 256 (x490 x314 248)) (x161 2 (x490 x314 248)) 0)))
(assert (= (x535 64 x481 153) (x37 (x535 64 x481 153))))
(assert (x247 x597))
(assert (x472 x92))
(assert (x127 (x161 2 (x490 x485 248))))
(assert (x472 x201))
(assert (x247 x269))
(assert (x472 x233))
(assert (x472 x621))
(assert (x472 x408))
(assert (= (x588 (x507 32 x414)) 32))
(assert (x472 x136))
(assert (x472 x133))
(assert (x498 32))
(assert (x354 x487))
(assert (< (x535 64 x546 152) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x472 x600))
(assert (= x347 (=> (= (not (> x253 1)) x338) (and x338 x147))))
(assert (< (x535 64 x630 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x472 x71))
(assert (x472 x460))
(assert (x472 x421))
(assert (x281 x567))
(assert (x559 x351 8))
(assert (x472 x481))
(assert (=> (>= 10000 x99) (= 0 (x37 x99))))
(assert (x472 x598))
(assert (= (or x590 x20) x310))
(assert (x472 x418))
(assert (> (x507 32 x364) 10000))
(assert (= (=> (and (and (= (x378 0) x509) (= (not x404) x528) (= false x227) (<= x178 18446744073709551615) (= x230 false) (= x477 x178) (= false x307) (= x305 x509) (= x400 0) (= (= x102 x528) x501) (= (= 0 x157) x404) x501 (= false x561) (= (x378 4) x259) (= (x378 36) x178) (<= x259 18446744073709551615) (= x259 x410) (= x387 false)) (and (= x181 x51) (and (= x330 (* 32 x187)) (= x279 (+ x101 x527)) (<= x44 127) (= (+ 31 x545) x406) (<= x44 127) (= (* 32 x290) x396) (= 128 x296) (= (+ x190 31) x621) (>= 255 x333) (= x438 false) (= x190 (+ 4 x178)) (= x388 x494) (= x407 x576) (= x184 (+ x527 160)) (= (+ 4 x259) x545) (= (x120 128) x205) (<= x186 3) (> x100 x621) (= x521 0) (= x320 (x359 x536)) (= x342 (= 0 x205)) (> x100 x406) (= (x128 4 x351) x186) (= x192 (x584 x494)) (<= x187 18446744073709551615) (>= x320 1) (not (> x279 x100)) (= false x459) (= x327 1363191112) (not (> x233 x100)) (= x290 (x322 (+ x527 31) 32)) (<= x527 18446744073709551615) (= (x120 128) x550) (= (+ x408 x330) x233) (= (+ x396 160) x586) (= x408 (+ x545 32)) (= 2 x608) (= x527 (x8 x190)) (= (x8 x545) x187) (= (+ x190 32) x101) (>= 256 x550) (= x576 (x10 x536))))) (and (=> (and (not x342) (and (= x580 (x287 1 (x490 x485 248))) (= (x120 128) x163) (= (< 1 x163) x125) (<= 1 x578) (= (x480 160) x485) (= (x120 128) x578))) (and (=> (and (= x580 x468) (not x125)) x88) (=> x125 x211))) (=> (and (= x547 0) x342) x506))) x533))
(assert (x472 x253))
(assert (x498 4))
(assert (x472 x353))
(assert (x472 x109))
(assert (= (and (not x342) x95) x104))
(assert (not (x106 (x535 64 x221 153))))
(assert (x472 x202))
(assert (x472 x48))
(assert (= (x490 x424 248) (x322 x424 452312848583266388373324160190187140051835877600158453279131187530910662656)))
(assert (x472 x168))
(assert (= x57 (or (and x456 x431) x409)))
(assert (< 10000 (x535 64 x277 152)))
(assert (< (x535 64 x630 155) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x472 x91))
(assert (x472 x352))
(assert (= (and x95 x342) x169))
(assert (x106 2266951753))
(assert (x472 x217))
(assert (= (x588 (x507 32 x540)) 32))
(assert (x106 115339776388732929035197660848497720713218148788040405586178452820382218977279))
(assert (x530 x272))
(assert (x472 x51))
(assert (x127 x187))
(assert (x247 x429))
(assert (x472 x192))
(assert (x472 x5))
(assert (x472 x562))
(assert (x472 x89))
(assert (< 10000 (x535 64 x630 3)))
(assert (x472 x579))
(assert (x472 x155))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x507 32 x540)))
(assert (x472 x396))
(assert (= (and x516 x271) x297))
(assert (x354 (x161 2 x630)))
(assert (x472 x592))
(assert (x472 x24))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x535 64 x277 152)))
(assert (x472 x34))
(assert (= (and x457 (not x508)) x315))
(assert (x472 x551))
(check-sat)
(exit)
