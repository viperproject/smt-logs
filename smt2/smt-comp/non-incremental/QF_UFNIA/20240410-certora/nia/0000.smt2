(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Certora
Generated on: 2024-04-10
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x432 () Bool)
(declare-fun x115 () Int)
(declare-fun x190 () Int)
(declare-fun x72 () Bool)
(declare-fun x418 () Int)
(declare-fun x330 () Bool)
(declare-fun x245 () Int)
(declare-fun x371 () Int)
(declare-fun x281 () Int)
(declare-fun x475 () Bool)
(declare-fun x74 () Int)
(declare-fun x560 () Int)
(declare-fun x348 () Int)
(declare-fun x443 () Int)
(declare-fun x346 () Bool)
(declare-fun x254 () Int)
(declare-fun x574 () Int)
(declare-fun x67 () Int)
(declare-fun x369 () Int)
(declare-fun x582 () Int)
(declare-fun x375 () Bool)
(declare-fun x299 () Bool)
(declare-fun x477 () Int)
(declare-fun x45 () Int)
(declare-fun x525 () Int)
(declare-fun x455 () Bool)
(declare-fun x547 () Int)
(declare-fun x29 (Int) Bool)
(declare-fun x311 () Int)
(declare-fun x98 (Int) Int)
(declare-fun x424 () Bool)
(declare-fun x82 () Int)
(declare-fun x552 () Int)
(declare-fun x488 () Bool)
(declare-fun x47 () Int)
(declare-fun x483 (Int) Int)
(declare-fun x410 () Int)
(declare-fun x194 () Bool)
(declare-fun x626 () Int)
(declare-fun x122 () Int)
(declare-fun x584 () Int)
(declare-fun x589 () Int)
(declare-fun x295 () Bool)
(declare-fun x269 () Int)
(declare-fun x158 () Int)
(declare-fun x326 (Int) Int)
(declare-fun x219 () Int)
(declare-fun x618 () Int)
(declare-fun x363 () Int)
(declare-fun x519 () Int)
(declare-fun x399 () Int)
(declare-fun x150 () Int)
(declare-fun x62 () Int)
(declare-fun x40 () Int)
(declare-fun x588 () Bool)
(declare-fun x568 () Int)
(declare-fun x187 (Int) Int)
(declare-fun x593 () Int)
(declare-fun x457 () Bool)
(declare-fun x607 () Int)
(declare-fun x199 () Bool)
(declare-fun x337 () Bool)
(declare-fun x139 () Int)
(declare-fun x471 () Int)
(declare-fun x135 () Int)
(declare-fun x96 () Int)
(declare-fun x80 () Int)
(declare-fun x490 () Int)
(declare-fun x612 () Int)
(declare-fun x609 () Bool)
(declare-fun x354 () Int)
(declare-fun x267 () Int)
(declare-fun x276 () Bool)
(declare-fun x627 () Int)
(declare-fun x385 () Int)
(declare-fun x441 () Int)
(declare-fun x440 () Int)
(declare-fun x401 () Int)
(declare-fun x234 () Bool)
(declare-fun x537 () Int)
(declare-fun x92 () Int)
(declare-fun x644 () Int)
(declare-fun x565 () Bool)
(declare-fun x402 () Int)
(declare-fun x167 () Int)
(declare-fun x553 (Int) Int)
(declare-fun x406 () Int)
(declare-fun x65 () Bool)
(declare-fun x189 () Int)
(declare-fun x464 () Int)
(declare-fun x447 () Bool)
(declare-fun x205 () Int)
(declare-fun x90 () Int)
(declare-fun x339 () Int)
(declare-fun x389 () Int)
(declare-fun x502 () Int)
(declare-fun x630 () Int)
(declare-fun x13 () Int)
(declare-fun x308 () Int)
(declare-fun x76 () Int)
(declare-fun x253 () Int)
(declare-fun x566 () Int)
(declare-fun x213 () Int)
(declare-fun x107 () Int)
(declare-fun x643 () Bool)
(declare-fun x559 () Int)
(declare-fun x21 () Int)
(declare-fun x504 () Int)
(declare-fun x358 () Bool)
(declare-fun x538 () Int)
(declare-fun x523 () Int)
(declare-fun x583 () Int)
(declare-fun x557 (Int) Int)
(declare-fun x575 () Int)
(declare-fun x26 () Int)
(declare-fun x590 () Int)
(declare-fun x193 () Int)
(declare-fun x336 () Int)
(declare-fun x511 () Int)
(declare-fun x149 () Int)
(declare-fun x623 () Int)
(declare-fun x518 () Int)
(declare-fun x7 (Int) Int)
(declare-fun x430 () Bool)
(declare-fun x297 () Bool)
(declare-fun x540 () Int)
(declare-fun x163 () Int)
(declare-fun x121 () Int)
(declare-fun x225 () Int)
(declare-fun x118 (Int) Int)
(declare-fun x69 () Int)
(declare-fun x126 () Int)
(declare-fun x619 () Int)
(declare-fun x210 () Int)
(declare-fun x113 () Bool)
(declare-fun x36 () Int)
(declare-fun x9 () Bool)
(declare-fun x280 () Int)
(declare-fun x454 () Int)
(declare-fun x515 () Int)
(declare-fun x494 () Int)
(declare-fun x144 () Int)
(declare-fun x526 () Int)
(declare-fun x419 () Int)
(declare-fun x373 () Int)
(declare-fun x191 (Int) Int)
(declare-fun x137 () Bool)
(declare-fun x479 () Bool)
(declare-fun x499 () Int)
(declare-fun x458 () Int)
(declare-fun x642 () Bool)
(declare-fun x396 () Bool)
(declare-fun x416 () Int)
(declare-fun x273 () Int)
(declare-fun x426 () Int)
(declare-fun x467 () Int)
(declare-fun x414 () Bool)
(declare-fun x434 () Int)
(declare-fun x263 () Int)
(declare-fun x303 () Int)
(declare-fun x315 () Int)
(declare-fun x52 () Int)
(declare-fun x312 () Bool)
(declare-fun x379 () Int)
(declare-fun x571 () Int)
(declare-fun x640 (Int) Int)
(declare-fun x211 () Int)
(declare-fun x392 () Int)
(declare-fun x423 () Int)
(declare-fun x637 () Int)
(declare-fun x377 () Int)
(declare-fun x19 () Int)
(declare-fun x97 () Int)
(declare-fun x635 () Int)
(declare-fun x334 () Int)
(declare-fun x196 () Bool)
(declare-fun x486 () Int)
(declare-fun x192 () Int)
(declare-fun x621 () Int)
(declare-fun x114 () Int)
(declare-fun x407 () Int)
(declare-fun x136 () Int)
(declare-fun x78 () Bool)
(declare-fun x289 () Int)
(declare-fun x302 () Bool)
(declare-fun x73 () Int)
(declare-fun x134 () Bool)
(declare-fun x180 () Bool)
(declare-fun x387 () Int)
(declare-fun x246 () Int)
(declare-fun x594 () Int)
(declare-fun x46 () Int)
(declare-fun x425 () Int)
(declare-fun x415 () Bool)
(declare-fun x87 () Int)
(declare-fun x159 (Int) Int)
(declare-fun x59 () Int)
(declare-fun x169 () Int)
(declare-fun x241 () Bool)
(declare-fun x344 () Int)
(declare-fun x296 (Int Int) Int)
(declare-fun x530 () Int)
(declare-fun x613 () Int)
(declare-fun x634 () Bool)
(declare-fun x463 () Int)
(declare-fun x420 () Int)
(declare-fun x381 () Int)
(declare-fun x324 () Int)
(declare-fun x355 () Bool)
(declare-fun x20 () Int)
(declare-fun x620 () Bool)
(declare-fun x294 () Int)
(declare-fun x633 () Bool)
(declare-fun x328 () Bool)
(declare-fun x398 () Int)
(declare-fun x397 () Bool)
(declare-fun x562 () Int)
(declare-fun x611 () Bool)
(declare-fun x570 (Int) Int)
(declare-fun x473 () Int)
(declare-fun x264 () Int)
(declare-fun x577 (Int Int) Int)
(declare-fun x251 () Int)
(declare-fun x11 () Int)
(declare-fun x275 () Int)
(declare-fun x563 () Int)
(declare-fun x484 () Bool)
(declare-fun x184 () Int)
(declare-fun x156 () Int)
(declare-fun x203 () Int)
(declare-fun x61 () Int)
(declare-fun x433 () Bool)
(declare-fun x331 () Int)
(declare-fun x181 () Int)
(declare-fun x532 () Int)
(declare-fun x383 () Bool)
(declare-fun x30 () Int)
(declare-fun x287 (Int) Int)
(declare-fun x427 () Int)
(declare-fun x446 () Bool)
(declare-fun x230 () Int)
(declare-fun x365 () Int)
(declare-fun x394 () Int)
(declare-fun x452 () Bool)
(declare-fun x202 () Int)
(declare-fun x349 () Int)
(declare-fun x421 () Int)
(declare-fun x22 (Int) Int)
(declare-fun x154 () Bool)
(declare-fun x53 () Int)
(declare-fun x99 () Int)
(declare-fun x512 () Int)
(declare-fun x239 () Bool)
(declare-fun x384 () Int)
(declare-fun x428 () Bool)
(declare-fun x28 () Int)
(declare-fun x489 () Bool)
(declare-fun x411 () Int)
(declare-fun x351 () Bool)
(declare-fun x5 () Int)
(declare-fun x261 () Int)
(declare-fun x145 () Int)
(declare-fun x319 () Int)
(declare-fun x370 () Bool)
(declare-fun x249 () Int)
(declare-fun x395 () Int)
(declare-fun x183 () Int)
(declare-fun x480 () Int)
(declare-fun x529 () Bool)
(declare-fun x422 () Int)
(declare-fun x456 () Int)
(declare-fun x108 () Int)
(declare-fun x647 () Int)
(declare-fun x469 () Bool)
(declare-fun x271 () Bool)
(declare-fun x161 () Int)
(declare-fun x417 () Int)
(declare-fun x71 () Int)
(declare-fun x465 () Bool)
(declare-fun x12 (Int) Int)
(declare-fun x27 () Bool)
(declare-fun x364 () Int)
(declare-fun x376 () Int)
(declare-fun x543 () Int)
(declare-fun x174 (Int Int) Int)
(declare-fun x215 () Int)
(declare-fun x198 () Int)
(declare-fun x579 () Int)
(declare-fun x390 () Bool)
(declare-fun x572 () Int)
(declare-fun x316 () Int)
(declare-fun x214 () Int)
(declare-fun x638 () Int)
(declare-fun x32 () Int)
(declare-fun x103 () Int)
(declare-fun x359 () Int)
(declare-fun x429 () Int)
(declare-fun x119 () Int)
(declare-fun x586 () Int)
(declare-fun x240 () Int)
(declare-fun x232 () Int)
(declare-fun x165 () Bool)
(declare-fun x95 () Int)
(declare-fun x438 () Int)
(declare-fun x596 () Int)
(declare-fun x3 () Int)
(declare-fun x197 () Int)
(declare-fun x435 () Bool)
(declare-fun x48 () Int)
(declare-fun x23 () Bool)
(declare-fun x531 () Int)
(declare-fun x256 () Int)
(declare-fun x412 () Bool)
(declare-fun x124 () Bool)
(declare-fun x388 () Int)
(declare-fun x528 () Int)
(declare-fun x56 () Int)
(declare-fun x259 () Int)
(declare-fun x117 () Int)
(declare-fun x601 () Int)
(declare-fun x481 () Int)
(declare-fun x177 () Int)
(declare-fun x332 () Int)
(declare-fun x501 () Bool)
(declare-fun x116 () Int)
(declare-fun x556 () Int)
(declare-fun x608 () Int)
(declare-fun x650 () Bool)
(declare-fun x449 () Int)
(declare-fun x459 () Int)
(declare-fun x243 () Bool)
(declare-fun x450 () Int)
(declare-fun x497 () Int)
(declare-fun x321 () Int)
(declare-fun x466 () Int)
(declare-fun x81 () Int)
(declare-fun x257 () Int)
(declare-fun x632 () Int)
(declare-fun x129 () Bool)
(declare-fun x41 () Int)
(declare-fun x146 () Bool)
(declare-fun x368 () Bool)
(declare-fun x274 () Int)
(declare-fun x266 () Bool)
(declare-fun x155 () Bool)
(declare-fun x341 () Bool)
(declare-fun x451 () Bool)
(declare-fun x237 () Int)
(declare-fun x25 () Int)
(declare-fun x382 () Bool)
(declare-fun x252 () Bool)
(declare-fun x221 () Int)
(declare-fun x307 () Bool)
(declare-fun x91 () Int)
(declare-fun x105 () Int)
(declare-fun x242 () Bool)
(declare-fun x310 () Int)
(declare-fun x153 () Int)
(declare-fun x641 () Int)
(declare-fun x491 () Int)
(declare-fun x130 () Int)
(declare-fun x83 () Int)
(declare-fun x505 () Int)
(declare-fun x39 () Int)
(declare-fun x598 () Bool)
(declare-fun x314 () Int)
(declare-fun x272 () Int)
(declare-fun x216 () Int)
(declare-fun x64 () Int)
(declare-fun x220 () Bool)
(declare-fun x141 () Int)
(declare-fun x75 (Int) Int)
(declare-fun x347 () Bool)
(declare-fun x6 () Int)
(declare-fun x265 () Int)
(declare-fun x400 () Int)
(declare-fun x573 () Int)
(declare-fun x602 (Int) Int)
(declare-fun x581 () Int)
(declare-fun x616 () Int)
(declare-fun x89 () Int)
(declare-fun x171 () Bool)
(declare-fun x218 () Int)
(declare-fun x622 () Bool)
(declare-fun x309 () Bool)
(declare-fun x624 () Bool)
(declare-fun x605 () Int)
(declare-fun x524 () Bool)
(declare-fun x14 () Int)
(declare-fun x343 () Int)
(declare-fun x285 () Int)
(declare-fun x60 () Bool)
(declare-fun x461 () Int)
(declare-fun x147 () Int)
(declare-fun x127 () Int)
(declare-fun x317 () Int)
(declare-fun x386 () Int)
(declare-fun x104 () Bool)
(declare-fun x631 () Int)
(declare-fun x409 () Int)
(declare-fun x291 () Int)
(declare-fun x533 () Int)
(declare-fun x561 () Bool)
(declare-fun x362 () Int)
(declare-fun x436 () Int)
(declare-fun x444 () Int)
(declare-fun x380 () Int)
(declare-fun x549 () Bool)
(declare-fun x258 () Int)
(declare-fun x551 () Bool)
(declare-fun x320 () Bool)
(declare-fun x313 () Bool)
(declare-fun x413 () Int)
(declare-fun x558 () Bool)
(declare-fun x77 () Int)
(declare-fun x298 () Bool)
(declare-fun x545 () Int)
(declare-fun x580 () Bool)
(declare-fun x367 () Int)
(declare-fun x516 () Bool)
(declare-fun x478 () Int)
(declare-fun x554 () Bool)
(declare-fun x327 () Int)
(declare-fun x614 (Int) Int)
(declare-fun x100 () Int)
(declare-fun x172 () Int)
(declare-fun x374 () Int)
(declare-fun x16 () Int)
(declare-fun x51 () Int)
(declare-fun x340 () Bool)
(declare-fun x408 () Bool)
(declare-fun x522 () Bool)
(declare-fun x585 () Int)
(declare-fun x453 () Int)
(declare-fun x597 () Bool)
(declare-fun x178 () Int)
(declare-fun x186 () Bool)
(declare-fun x496 () Int)
(declare-fun x306 () Int)
(declare-fun x227 () Int)
(declare-fun x236 () Int)
(declare-fun x175 () Int)
(declare-fun x209 () Bool)
(declare-fun x353 () Bool)
(declare-fun x128 () Int)
(declare-fun x49 () Int)
(declare-fun x567 () Int)
(declare-fun x223 () Int)
(declare-fun x185 () Int)
(declare-fun x290 () Int)
(declare-fun x514 () Bool)
(declare-fun x474 () Bool)
(declare-fun x617 () Bool)
(declare-fun x86 () Int)
(declare-fun x345 () Bool)
(declare-fun x335 () Bool)
(declare-fun x212 () Int)
(declare-fun x286 () Int)
(declare-fun x142 () Int)
(declare-fun x17 () Bool)
(declare-fun x323 () Int)
(declare-fun x54 () Bool)
(declare-fun x405 () Int)
(declare-fun x305 () Bool)
(declare-fun x224 () Int)
(declare-fun x255 () Bool)
(declare-fun x204 () Bool)
(declare-fun x509 () Int)
(declare-fun x138 () Bool)
(declare-fun x262 () Int)
(declare-fun x628 () Int)
(declare-fun x43 () Int)
(declare-fun x468 () Int)
(declare-fun x24 () Int)
(declare-fun x217 () Int)
(declare-fun x33 (Int Int Int) Int)
(declare-fun x372 () Int)
(declare-fun x521 () Int)
(declare-fun x70 () Int)
(declare-fun x587 () Int)
(declare-fun x578 () Int)
(declare-fun x361 () Int)
(declare-fun x31 () Bool)
(declare-fun x333 () Int)
(declare-fun x250 () Int)
(declare-fun x507 () Bool)
(declare-fun x282 () Int)
(declare-fun x68 () Int)
(declare-fun x546 () Int)
(declare-fun x131 () Int)
(declare-fun x44 () Int)
(declare-fun x472 () Int)
(declare-fun x222 () Int)
(declare-fun x293 () Int)
(declare-fun x173 () Int)
(declare-fun x510 () Int)
(declare-fun x569 () Bool)
(declare-fun x111 () Int)
(declare-fun x544 () Bool)
(declare-fun x329 () Int)
(declare-fun x229 (Int) Int)
(declare-fun x88 () Int)
(declare-fun x244 () Bool)
(declare-fun x513 (Int) Int)
(declare-fun x338 () Int)
(declare-fun x599 () Int)
(declare-fun x500 () Int)
(declare-fun x646 () Int)
(declare-fun x37 () Int)
(declare-fun x366 () Int)
(declare-fun x356 () Int)
(declare-fun x120 () Int)
(declare-fun x378 () Int)
(declare-fun x160 () Int)
(declare-fun x132 () Int)
(declare-fun x603 () Int)
(declare-fun x101 () Bool)
(declare-fun x448 () Bool)
(declare-fun x393 () Int)
(declare-fun x201 () Int)
(declare-fun x606 () Int)
(declare-fun x503 () Bool)
(declare-fun x564 () Int)
(declare-fun x534 () Int)
(declare-fun x284 () Int)
(declare-fun x85 () Int)
(declare-fun x162 () Int)
(declare-fun x342 () Int)
(declare-fun x226 () Int)
(declare-fun x404 () Bool)
(declare-fun x2 (Int) Int)
(declare-fun x179 () Int)
(declare-fun x248 () Int)
(declare-fun x639 () Int)
(declare-fun x10 (Int Int) Int)
(declare-fun x636 () Int)
(declare-fun x445 () Int)
(declare-fun x536 () Int)
(declare-fun x462 () Int)
(declare-fun x485 () Int)
(declare-fun x495 () Int)
(declare-fun x15 () Int)
(declare-fun x591 () Int)
(declare-fun x140 () Int)
(declare-fun x541 (Int) Int)
(declare-fun x106 () Bool)
(declare-fun x517 () Int)
(declare-fun x604 () Int)
(declare-fun x301 () Int)
(declare-fun x403 () Int)
(declare-fun x439 () Int)
(declare-fun x352 () Int)
(declare-fun x539 () Int)
(declare-fun x437 () Bool)
(declare-fun x79 () Bool)
(declare-fun x360 () Int)
(declare-fun x625 () Int)
(declare-fun x648 () Int)
(declare-fun x133 () Int)
(declare-fun x207 () Bool)
(declare-fun x260 () Bool)
(declare-fun x57 () Int)
(declare-fun x63 () Int)
(declare-fun x649 () Bool)
(declare-fun x206 () Int)
(declare-fun x592 () Int)
(declare-fun x292 () Bool)
(declare-fun x270 (Int) Int)
(declare-fun x442 () Int)
(declare-fun x123 () Int)
(declare-fun x164 () Int)
(declare-fun x1 (Int) Int)
(declare-fun x542 () Int)
(declare-fun x66 () Int)
(declare-fun x268 () Int)
(declare-fun x18 () Int)
(declare-fun x170 () Int)
(declare-fun x4 () Int)
(declare-fun x166 () Int)
(define-fun x506 ((x55 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x55) (>= x55 0)) x55 (- x55 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x195 ((x55 Int)) Int (ite (and (< x55 0) (>= x55 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x55 115792089237316195423570985008687907853269984665640564039457584007913129639936) x55))
(define-fun x112 ((x58 Int)) Bool (and (>= x58 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x58)))
(define-fun x231 ((x58 Int)) Bool (and (= (x577 x58 115792089237316195423570985008687907853269984665640564039457584007913129639935) x58) (= (x577 115792089237316195423570985008687907853269984665640564039457584007913129639935 x58) x58)))
(define-fun x487 ((x58 Int)) Bool (and (= 0 (x577 x58 0)) (= (x577 0 x58) 0)))
(define-fun x555 ((x58 Int)) Bool (= (x577 x58 x58) x58))
(define-fun x318 ((x58 Int)) Bool (and (x555 x58) (x231 x58) (x487 x58)))
(define-fun x520 ((x58 Int) (x629 Int)) Bool (= (x577 x58 x629) (x577 x629 x58)))
(define-fun x288 ((x58 Int) (x629 Int)) Bool (and (=> (>= x58 0) (>= x58 (x577 x58 x629))) (<= 0 (x577 x58 x629)) (=> (>= x629 0) (<= (x577 x58 x629) x629))))
(define-fun x157 ((x58 Int) (x629 Int)) Bool (and (x288 x58 x629) (x520 x58 x629)))
(define-fun x35 ((x58 Int)) Bool (and (= (x296 115792089237316195423570985008687907853269984665640564039457584007913129639935 x58) (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x58)) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x58) (x296 x58 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x645 ((x58 Int)) Bool (and (= (x296 x58 0) x58) (= (x296 0 x58) x58)))
(define-fun x176 ((x58 Int)) Bool (= (x296 x58 x58) 0))
(define-fun x50 ((x58 Int)) Bool (and (x35 x58) (x645 x58) (x176 x58)))
(define-fun x94 ((x58 Int) (x629 Int)) Bool (= (x296 x58 x629) (x296 x629 x58)))
(define-fun x300 ((x58 Int) (x629 Int)) Bool (and (>= (x296 x58 x629) 0) (<= (x296 x58 x629) (+ x629 x58))))
(define-fun x188 ((x58 Int) (x629 Int)) Bool (and (x94 x58 x629) (x300 x58 x629)))
(define-fun x208 ((x58 Int)) Bool (and (= (x10 115792089237316195423570985008687907853269984665640564039457584007913129639935 x58) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x10 x58 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x527 ((x58 Int)) Bool (and (= (x10 0 x58) x58) (= x58 (x10 x58 0))))
(define-fun x168 ((x58 Int)) Bool (= x58 (x10 x58 x58)))
(define-fun x34 ((x58 Int)) Bool (and (x527 x58) (x168 x58) (x208 x58)))
(define-fun x279 ((x58 Int) (x629 Int)) Bool (= (x10 x58 x629) (x10 x629 x58)))
(define-fun x470 ((x58 Int) (x629 Int)) Bool (and (<= (x10 x58 x629) (+ x629 x58)) (=> (<= 0 x629) (<= x629 (x10 x58 x629))) (=> (<= 0 x58) (<= x58 (x10 x58 x629)))))
(define-fun x110 ((x58 Int) (x629 Int)) Bool (and (x470 x58 x629) (x279 x58 x629)))
(define-fun x350 ((x548 Int)) Int 0)
(define-fun x431 ((x548 Int)) Int 0)
(define-fun x482 ((x548 Int)) Int 0)
(define-fun x148 ((x548 Int)) Int 0)
(define-fun x38 ((x548 Int)) Int (ite (> x480 x548) (x513 x548) 0))
(define-fun x42 ((x548 Int)) Int (ite (and (<= 0 x548) (< x548 x480)) (x191 x548) (x38 x548)))
(define-fun x277 ((x548 Int)) Int (ite (= x308 x548) x502 (x287 x548)))
(define-fun x152 ((x548 Int)) Int (ite (= x548 128) 50942633119752846454219349998365661925608737367104304655302372697894809501696 (x482 x548)))
(define-fun x391 ((x548 Int)) Int (ite (= 132 x548) x538 (x152 x548)))
(define-fun x235 ((x548 Int)) Int (ite (= 0 x548) x623 (x7 x548)))
(define-fun x357 ((x548 Int)) Int (ite (= 128 x548) x623 (x391 x548)))
(define-fun x304 ((x548 Int)) Int (ite (and (< x548 160) (<= 128 x548)) (x235 (- x548 128)) (x350 x548)))
(define-fun x182 ((x548 Int)) Int (ite (= x349 x548) x21 (x2 x548)))
(define-fun x615 ((x548 Int)) Int (ite (= x537 x548) x625 (x187 x548)))
(define-fun x493 ((x548 Int)) Int (ite (= x378 x548) x203 (x614 x548)))
(define-fun x322 ((x548 Int)) Int (ite x292 (x614 x548) (x493 x548)))
(define-fun x550 ((x548 Int)) Int (ite x292 (x2 x548) (x182 x548)))
(define-fun x600 ((x548 Int)) Int (ite x292 (x187 x548) (x615 x548)))
(define-fun x610 ((x548 Int)) Int (ite x292 (x148 x548) (x357 x548)))
(define-fun x151 ((x548 Int)) Int (ite (= x548 x70) x533 (x600 x548)))
(define-fun x535 ((x548 Int)) Int (ite (= x70 x548) x439 (x151 x548)))
(define-fun x233 ((x548 Int)) Int (ite x244 (x600 x548) (x535 x548)))
(define-fun x283 ((x548 Int)) Int (ite (= x269 x548) x36 (x12 x548)))
(define-fun x200 ((x548 Int)) Int (ite x244 (x12 x548) (x283 x548)))
(define-fun x576 ((x548 Int)) Int (ite (= x548 x64) x76 (x98 x548)))
(define-fun x325 ((x548 Int)) Int (ite x244 (x98 x548) (x576 x548)))
(define-fun x109 ((x548 Int)) Int (ite (= x548 x587) x525 (x326 x548)))
(define-fun x102 ((x548 Int)) Int (ite (= x548 x133) 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x610 x548)))
(define-fun x476 ((x548 Int)) Int (ite (= x548 x594) x145 (x102 x548)))
(define-fun x125 ((x548 Int)) Int (ite (= x548 x264) x590 (x476 x548)))
(define-fun x247 ((x548 Int)) Int (ite (= x548 x142) x127 (x270 x548)))
(define-fun x84 ((x548 Int)) Int (ite (= x97 x548) x486 (x247 x548)))
(define-fun x492 ((x548 Int)) Int (ite (= 128 x548) x590 (x431 x548)))
(define-fun x228 ((x548 Int)) Int (ite (= 128 x548) 1 (x492 x548)))
(define-fun x460 ((x548 Int)) Int (ite (= x548 0) x189 (x75 x548)))
(define-fun x498 ((x548 Int)) Int (ite (= x269 x548) x473 (x200 x548)))
(define-fun x238 ((x548 Int)) Int (ite x337 (x200 x548) (x498 x548)))
(define-fun x93 ((x548 Int)) Int (ite (= x548 x434) x639 (x550 x548)))
(define-fun x8 ((x548 Int)) Int (ite (= x548 x52) x360 (x118 x548)))
(define-fun x508 ((x548 Int)) Int (ite (= x548 x333) x310 (x541 x548)))
(define-fun x143 ((x548 Int)) Int (ite (= x548 x269) x26 (x238 x548)))
(define-fun x278 ((x548 Int)) Int (ite (= x548 x342) x203 (x325 x548)))
(define-fun x595 ((x548 Int)) Int (ite (= x464 x548) x332 (x233 x548)))
(assert (x29 3536776372))
(assert (x112 x85))
(assert (x112 x502))
(assert (x29 31536000))
(assert (x112 x4))
(assert (x112 x95))
(assert (x112 x89))
(assert (x112 x530))
(assert (x112 x471))
(assert (x112 x519))
(assert (= (x22 x362) (x22 (+ 1 x362))))
(assert (x112 x245))
(assert (= (x483 (x33 64 x248 1)) 1))
(assert (x112 x574))
(assert (x112 x523))
(assert (x112 x128))
(assert (x112 x201))
(assert (= (and (not x207) x328) x295))
(assert (= x337 (and x243 x137)))
(assert (x112 x399))
(assert (x112 x411))
(assert (x112 x395))
(assert (x112 x69))
(assert (x112 x253))
(assert (x112 x545))
(assert (x112 x613))
(assert (x112 x36))
(assert (x112 x202))
(assert (x112 x261))
(assert (x112 x315))
(assert (x112 x635))
(assert (x112 x450))
(assert (= x404 (or x597 x330)))
(assert (=> (= x456 0) (= 0 (div x456 x456))))
(assert (= (and x243 (not x137)) x65))
(assert (= 0 (x22 126144000)))
(assert (x112 x63))
(assert (x112 x590))
(assert (x112 x381))
(assert (= x113 (and (not x313) x65)))
(assert (x112 x559))
(assert (x112 x608))
(assert (x112 x147))
(assert (x112 x578))
(assert (x112 x133))
(assert (x34 x69))
(assert (> (x33 64 x497 2) 10000))
(assert (x112 x436))
(assert (x112 x105))
(assert (x112 x406))
(assert (= (or x430 x368) x60))
(assert (x112 x625))
(assert (x112 x15))
(assert (x112 x314))
(assert (x112 x420))
(assert (= (x22 (+ 2 x249)) (x22 x249)))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x33 64 x605 2)))
(assert (x112 x100))
(assert (=> (= 0 x39) (= 0 (div x49 x39))))
(assert (x112 x91))
(assert (= 3 (x483 (x33 64 x232 3))))
(assert (x112 x348))
(assert (= x78 (=> (and (not (< x203 x85)) (= (x12 x269) x559) (= x85 (x602 x539)) (= (+ 1 x462) x52) (= (x33 64 x248 1) x462) (= x425 (x326 x587)) (= x87 (x118 x52)) (= (+ 1 x539) x587) (= (x33 64 x425 2) x402) (not (> x505 x87)) (= x539 (+ 5 x462)) (= x269 (+ 3 x462)) (= (> x627 x425) x320)) (and (=> (and x320 (and (and (= x48 (x195 (- x6 x630))) (= x468 (x98 x64)) (= (x195 (- x48 (mod (ite (< x6 x630) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x323) (not (< x76 x206)) (= x206 (x322 x402)) (not (< x76 x635)) (= (x118 x52) x197) (= x630 (mod (* x197 x635) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= 31536000 x440) (= (= x323 0) x129) (= (+ x269 1) x64) (= (mod (* x197 x635) 115792089237316195423570985008687907853269984665640564039457584007913129639935) x6) (= (x506 (+ x206 604800)) x76) (= (x195 (- x76 x468)) x635)) (or (and (not x129) (and (= (div x192 128) x567) (= x626 (x506 (+ x128 x567))) (>= 31535999 x323) (= x128 (mod (* 904625697166532776746648320380374280103671755200316906558262375061821325312 x216) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x363 x135) (= (x195 (- x630 x257)) x192) (= (x195 (- x323 (mod (ite (< x630 x257) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x216) (= (mod (* x626 69185743945351922119161689019356421013382125510479073735908722411855439477079) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x135) (= x257 (mod (* x635 x197) 31536000)))) (and x129 (and (= x96 (div x630 31536000)) (= x363 x96)))))) x514) (=> (and (and (= 0 x590) (= x525 x425) (= x429 x46) (= x367 x644)) (not x320)) x549)))))
(assert (=> (>= 10000 x538) (= (x22 x538) 0)))
(assert (x34 x518))
(assert (x50 2))
(assert (x112 x156))
(assert (x29 126144000))
(assert (x112 x189))
(assert (x157 x613 x585))
(assert (x112 x585))
(assert (= (x22 2835717307) 0))
(assert (x112 x286))
(assert (x112 x377))
(assert (x112 x116))
(assert (x112 x454))
(assert (x112 x394))
(assert (= (x22 (x33 64 x248 1)) (x33 64 x248 1)))
(assert (= true x104))
(assert (x112 x329))
(assert (= x544 (or x295 x455)))
(assert (x112 x398))
(assert (x112 x301))
(assert (x112 x532))
(assert (x112 x628))
(assert (x112 x542))
(assert (= (x553 (x33 64 x145 0)) x145))
(assert (x112 x32))
(assert (x112 x521))
(assert (x112 x226))
(assert (< 10000 (x33 64 x145 0)))
(assert (x112 x230))
(assert (x112 x334))
(assert (x112 x604))
(assert (x318 x585))
(assert (< 10000 (x33 64 x605 2)))
(assert (x112 x16))
(assert (x112 x316))
(assert (=> (<= x425 10000) (= 0 (x22 x425))))
(assert (x112 x336))
(assert (x112 x418))
(assert (x112 x248))
(assert (x188 x324 2))
(assert (x112 x426))
(assert (= (x1 (x33 64 x425 2)) 64))
(assert (x112 x92))
(assert (= (x22 x402) (x22 (+ 1 x402))))
(assert (x112 x190))
(assert (= (x22 31535999) 0))
(assert (x112 x646))
(assert (x112 x83))
(assert (x112 x366))
(assert (x112 x61))
(assert (x112 x562))
(assert (x112 x25))
(assert (= (and x271 x404) x430))
(assert (=> (= x545 0) (= 0 (div x471 x545))))
(assert (x112 x338))
(assert (x112 x459))
(assert (x112 x88))
(assert (x112 x425))
(assert (x112 x115))
(assert (x112 x385))
(assert (x318 x604))
(assert (x112 x237))
(assert (= (x22 (+ 5 x37)) (x22 x37)))
(assert (x112 x481))
(assert (x112 x123))
(assert (= x79 (and x355 x488)))
(assert (x112 x468))
(assert (x112 x161))
(assert (x112 x166))
(assert (= (or (and (not x503) x435) x558) x243))
(assert (= (x483 (x33 64 x627 2)) 2))
(assert (= x341 (=> (and (and (= x531 (ite (= x456 0) 1 0)) (= (div x456 x456) x453) (= (> x572 x286) x194) (= (x10 x531 x518) x511) (= x518 (ite (= 1 x453) 1 0)) (= 1 x511) (= (x506 (+ x100 x363)) x572) (not (> x363 x572)) (not (< x286 x456)) (= x286 (x506 (+ x456 x563)))) (or (and (and (not (> x193 x286)) (= (x195 (- x286 x100)) x193) (= x193 x387)) x194) (and (not x194) (= x363 x387)))) x180)))
(assert (x112 x389))
(assert (x112 x323))
(assert (= (=> (and (= (x550 x434) x581) (not (< x329 x639)) (= (x151 x70) x426) (= x183 x46) (not (< x365 x627)) (not (< x426 x439)) (= x365 (+ x425 1)) (= (x550 x434) x329) (<= x425 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= (+ x639 x275) x467) (= (x195 (- x329 x344)) x639) (= x365 x525) (= x344 x590) (= (x195 (- x426 x608)) x439) (= x644 x481) (= x275 (- x495 x581))) x549) x72))
(assert (x112 x48))
(assert (x112 x639))
(assert (x112 x496))
(assert (= x609 (and x320 x383)))
(assert (x112 x572))
(assert (x112 x273))
(assert (x112 x623))
(assert (x112 x170))
(assert (x110 x510 x543))
(assert (= (=> (and (= x503 (< 0 x590)) (or (not x503) (and x503 (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x133) (= x161 x59) (= (x33 64 x145 0) x97) (= false x489) (= x384 2835717307) (<= x145 1461501637330902918203684832716283019655932542975) (= (x557 x462) x145) (= false x299) (= x552 (x33 64 x538 0)) (not (> x590 x381)) (= x189 (x228 128)) (= x547 (x195 (- x509 x590))) (= x512 (x640 x245)) (= x221 (x195 (- x519 x133))) (= x381 (x270 x552)) (<= x294 127) (= (x33 64 x538 0) x142) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x133)) (= (x247 x97) x410) (= x486 (x506 (+ x410 x590))) (= x389 x273) (> x272 x133) (<= x133 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= (x506 (+ x594 64)) x519) (not (= x133 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (= (x195 (- x509 x590)) x181) (>= x145 1) (= x264 (x506 (+ x594 32))) (>= x512 1) (= x590 x161) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x133)) (= (x506 (+ 4 x133)) x594) (not (> x547 x509)) (= x92 68) (= x23 false) (= x389 x145) (<= x133 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= false x297) (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 x334) (= x163 1) (= x221 68) (<= x294 127) (= (x506 (+ 32 x133)) x272) (= (x195 (- x381 x590)) x127))))) x634) x549))
(assert (= x155 (or x370 x171)))
(assert (x112 x144))
(assert (= 0 (x22 274184521717934524641157099916833587217)))
(assert (= (x33 64 x425 2) (x22 (x33 64 x425 2))))
(assert (= x622 (and x609 (not x129))))
(assert (x112 x387))
(assert (= (and x207 x328) x455))
(assert (x112 x303))
(assert (x112 x332))
(assert (x112 x386))
(assert (x112 x579))
(assert (x112 x51))
(assert (x112 x163))
(assert (= 0 (x483 (x33 64 x538 0))))
(assert (= (x22 1889567281) 0))
(assert (x112 x20))
(assert (x112 x232))
(assert (x112 x162))
(assert (> (x33 64 x627 2) 10000))
(assert (x112 x515))
(assert (x34 x632))
(assert (x112 x218))
(assert (x112 x158))
(assert (x112 x99))
(assert (x112 x365))
(assert (= x307 (and x347 x252)))
(assert (=> (>= 10000 x248) (= (x22 x248) 0)))
(assert (x112 x466))
(assert (not (x29 (x33 64 x538 0))))
(assert (x112 x644))
(assert (= x432 (and (not x355) x488)))
(assert (x112 x458))
(assert (=> (= 0 x5) (= (div x578 x5) 0)))
(assert (x112 x647))
(assert (x34 x589))
(assert (= (x22 x131) (x22 (+ 1 x131))))
(assert (x112 x543))
(assert (x112 x344))
(assert (x112 x637))
(assert (= (x483 (x33 64 x425 2)) 2))
(assert (= (and x544 x194) x597))
(assert (= x634 (=> (and (= (x195 (- x525 x627)) x91) (not (> x582 x407)) (= x582 (x195 (- x407 x559))) (= (> x91 0) x137) (= (x200 x269) x407)) (and (=> (and (and (= x377 x644) (= x259 x46)) x137) x437) (=> (and (and (and (= (x118 x52) x140) (= x249 (x33 64 x627 2)) (= (x195 (- x441 (mod (ite (< x477 x289) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x419) (= (+ 1 x269) x342) (= (x195 (- x477 x289)) x441) (= x477 (mod (* x140 x411) 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= x289 (mod (* x140 x411) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (not (> x411 x203)) (= x313 (= 0 x419)) (= (x195 (- x203 x284)) x411) (= 31536000 x352) (= x284 (x325 x342))) (or (and (and (= x99 (mod (* 69185743945351922119161689019356421013382125510479073735908722411855439477079 x246) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x230 (div x517 128)) (= x246 (x506 (+ x230 x14))) (>= 31535999 x419) (= x517 (x195 (- x289 x32))) (= (mod (* 904625697166532776746648320380374280103671755200316906558262375061821325312 x327) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x14) (= x327 (x195 (- x419 (mod (ite (> x32 x289) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= x403 x99) (= (mod (* x140 x411) 31536000) x32)) (not x313)) (and x313 (and (= x403 x74) (= (div x289 31536000) x74))))) (not x137)) x204)))))
(assert (x29 4294967295))
(assert (x112 x13))
(assert (x112 x56))
(assert (x29 31535999))
(assert (= x204 (=> (and (or (and x451 (and (= x542 x356) (= x356 (div x18 31536000)))) (and (not x451) (and (= (mod (* x56 904625697166532776746648320380374280103671755200316906558262375061821325312) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x268) (= x607 (x506 (+ x612 x268))) (= x542 x20) (<= x56 31535999) (= x20 (mod (* 69185743945351922119161689019356421013382125510479073735908722411855439477079 x607) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (div x18 128) x612)))) (and (= x451 (= x56 0)) (= (ite (= x403 0) 1 0) x303) (= (x118 x52) x158) (= 1 x348) (= x369 (x200 x269)) (= (ite (= x564 1) 1 0) x89) (= (mod (* x158 126144000) 115792089237316195423570985008687907853269984665640564039457584007913129639935) x485) (= (x195 (- x256 (mod (ite (> x18 x485) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x56) (= (+ 1 x52) x371) (= (x10 x303 x89) x348) (= x564 (div x403 x403)) (= x256 (x195 (- x485 x18))) (= 126144000 x190) (= 31536000 x175) (= (x541 x371) x338) (= (mod (* x158 126144000) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x18))) x345)))
(assert (x112 x311))
(assert (x112 x632))
(assert (x112 x68))
(assert (x112 x419))
(assert (x112 x581))
(assert (= (=> (and (= x259 x573) (= (+ x249 2) x464) (= x473 (x506 (+ x68 x628))) (= (x233 x464) x574) (not (< x332 x574)) (= x332 (x506 (+ x574 x628))) (not (< x473 x68)) (= x573 (+ x591 x473)) (= (x200 x269) x117) (not (< x121 x644)) (= x214 x377) (= (- x46 x117) x591) (= (x200 x269) x68) (= (x506 (+ x628 x644)) x121) (= x214 (x506 (+ x628 x644)))) x437) x138))
(assert (x112 x74))
(assert (= x345 (=> (and (and (= x632 (ite (= 0 x542) 1 0)) (= x355 (< x364 x311)) (not (> x403 x311)) (= (ite (= x51 1) 1 0) x385) (= x311 (x506 (+ x369 x403))) (not (> x542 x364)) (= x240 1) (= x51 (div x542 x542)) (= x364 (x506 (+ x338 x542))) (= (x10 x632 x385) x240)) (or (and x355 (and (= x53 (x195 (- x364 x369))) (= x628 x53) (not (< x364 x53)))) (and (not x355) (= x403 x628)))) x138)))
(assert (not (x29 (x33 64 x145 0))))
(assert (x112 x504))
(assert (x112 x605))
(assert (x112 x90))
(assert (x110 x632 x385))
(assert (x112 x497))
(assert (not (x29 (x33 64 x497 2))))
(assert (x112 x178))
(assert (x112 x480))
(assert (x318 x331))
(assert (x188 x422 2))
(assert (x112 x268))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x33 64 x425 2)))
(assert (= (x22 x462) (x22 (+ 5 x462))))
(assert (= (=> (and (and (= x395 (ite (= x314 1) 1 0)) (= x459 (mod (* 126144000 x226) 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (x195 (- x494 (mod (ite (> x316 x459) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x306) (= (+ 1 x52) x227) (= x170 126144000) (= (ite (= 0 x363) 1 0) x69) (= x319 31536000) (= (div x363 x363) x314) (= x316 (mod (* 126144000 x226) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x118 x52) x226) (= (x12 x269) x100) (= (x195 (- x459 x316)) x494) (= x563 (x541 x227)) (= x638 1) (= (x10 x69 x395) x638) (= (= x306 0) x207)) (or (and (and (= x123 x456) (= x123 (div x316 31536000))) x207) (and (and (= (mod (* 69185743945351922119161689019356421013382125510479073735908722411855439477079 x593) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x13) (= (div x316 128) x504) (= (mod (* 904625697166532776746648320380374280103671755200316906558262375061821325312 x306) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x515) (= x593 (x506 (+ x515 x504))) (>= 31535999 x306) (= x13 x456)) (not x207)))) x341) x514))
(assert (x112 x30))
(assert (x112 x593))
(assert (x112 x352))
(assert (= (=> (and (or (and x271 (and (= x224 x344) (= (div x400 x613) x224))) (and (not x271) (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x218) (= (div x237 x458) x418) (= x618 (x195 (- x218 (mod (ite (> x472 x400) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= x261 (mod (* x57 x401) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x195 (- 0 x458)) x237) (= (mod (* 3 x282) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x406) (= (x195 (- 2 x90)) x372) (= x366 (mod (* x586 x282) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x577 x613 x585) x458) (= x472 (mod (* x608 x80) x613)) (> x613 x218) (= (mod (* x120 x646) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x83) (= (x195 (- 2 x409)) x114) (= x589 (mod (* x540 x618) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x603 x344) (= x409 (mod (* x282 x261) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x195 (- 2 x77)) x86) (= (mod (* x57 x282) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x566) (= x603 (mod (* x211 (x10 x592 x589)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x120 (x195 (- 2 x253))) (= (mod (* x114 x261) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x586) (= x540 (x506 (+ x418 1))) (= x592 (div x66 x458)) (= x202 (x195 (- 2 x366))) (= x77 (mod (* x282 x83) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x253 (mod (* x282 x646) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x83 x86) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x222) (= x211 (mod (* x372 x222) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x401 (x195 (- 2 x566))) (= (x506 (+ 1 (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x613) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x585) (= x66 (x195 (- x400 x472))) (= (mod (* x222 x282) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x90) (= (div x613 x458) x282) (= (x296 2 x406) x57) (= x646 (mod (* x202 x586) 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (and (<= 1 x613) (= x30 (x12 x269)) (= x183 (+ x36 x601)) (= x491 (x195 (- x41 x400))) (= (+ x402 1) x434) (not (< x450 x367)) (= (x506 (+ x423 x387)) x533) (= x613 (x151 x70)) (= x63 (x283 x269)) (= (x195 (- x491 (mod (ite (> x400 x41) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x218) (= x36 (x506 (+ x387 x30))) (= (x550 x434) x80) (= x423 (x600 x70)) (= x481 (x506 (+ x367 x387))) (= (x506 (+ x387 x367)) x450) (= (mod (* x608 x80) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x400) (= x601 (- x429 x454)) (= (mod (* x608 x80) 115792089237316195423570985008687907853269984665640564039457584007913129639935) x41) (= x70 (+ 2 x402)) (= (x118 x52) x442) (not (> x442 x608)) (not (< x36 x30)) (= x454 (x12 x269)) (= x271 (= 0 x218)) (not (> x423 x533)) (= (x506 (+ x442 x63)) x608))) x72) x180))
(assert (x112 x510))
(assert (x112 x136))
(assert (= (=> (and (or (and (and (= (div x149 x361) x251) (= x198 x251)) x469) (and (not x469) (and (= x438 (x195 (- 0 x5))) (= (mod (* x534 x505) x361) x285) (= (x506 (+ 1 x136)) x167) (= x136 (div x438 x5)) (= x16 (x296 2 x422)) (= x461 (mod (* x167 x523) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x61) (= (mod (* x122 x521) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x336) (= x144 (div x361 x5)) (= x5 (x577 x361 x604)) (= (x195 (- 2 x354)) x521) (= (x195 (- 2 x616)) x88) (= (mod (* x95 x144) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x162) (= (mod (* x144 x436) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x478) (= (x506 (+ (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x361) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1)) x604) (= x198 x579) (= (mod (* x436 x530) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x95) (= (mod (* x343 x144) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x71) (= x354 (mod (* x144 x122) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x343 x185) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x417) (= x578 (x195 (- x149 x285))) (= (mod (* x16 x568) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x343) (= x568 (x195 (- 2 x25))) (= x616 (mod (* x417 x144) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x16 x144) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x25) (= (mod (* x417 x88) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x436) (= (x195 (- 2 x71)) x185) (= x641 (div x578 x5)) (= x530 (x195 (- 2 x478))) (= (mod (* (x10 x641 x461) x336) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x579) (= (mod (* x144 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x422) (= (x195 (- 2 x162)) x262) (= (x195 (- x61 (mod (ite (> x285 x149) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x523) (= x122 (mod (* x262 x95) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (< x61 x361)))) (and (>= x361 1) (= (x195 (- x254 x149)) x560) (= x333 (+ 1 x52)) (= x361 (x118 x52)) (= x534 (x541 x333)) (= (mod (* x505 x534) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x149) (= (mod (* x534 x505) 115792089237316195423570985008687907853269984665640564039457584007913129639935) x254) (= x469 (= 0 x61)) (= (x195 (- x560 (mod (ite (< x254 x149) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x61))) x465) x554))
(assert (x112 x251))
(assert (= (x22 (x33 64 x538 0)) (x33 64 x538 0)))
(assert (= (x22 x539) (x22 (+ x539 1))))
(assert (x112 x246))
(assert (x112 x603))
(assert (x112 x59))
(assert (x112 x114))
(assert (= (and x252 (not x347)) x382))
(assert (x112 x416))
(assert (x112 x222))
(assert (x110 x531 x518))
(assert (x112 x21))
(assert (x112 x49))
(assert (x112 x592))
(assert (x110 x69 x395))
(assert (x112 x356))
(assert (x112 x477))
(assert (x112 x423))
(assert (x112 x169))
(assert (x112 x354))
(assert (x112 x211))
(assert (x112 x505))
(assert (x112 x456))
(assert (x112 x197))
(assert (x112 x192))
(assert (x112 x568))
(assert (x112 x14))
(assert (x112 x82))
(assert (x112 x533))
(assert (x112 x547))
(assert (=> (= 0 x458) (= 0 (div x613 x458))))
(assert (x112 x236))
(assert (x112 x120))
(assert (< 10000 (x33 64 x248 1)))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x33 64 x248 1)))
(assert (x112 x556))
(assert (= (x483 (x33 64 x497 2)) 2))
(assert (=> (= x361 0) (= 0 (div x149 x361))))
(assert (x34 x385))
(assert (= 0 (x22 1461501637330902918203684832716283019655932542975)))
(assert (x112 x583))
(assert (x112 x361))
(assert (=> (= x542 0) (= (div x542 x542) 0)))
(assert (x112 x293))
(assert (x112 x62))
(assert (= (x22 (x33 64 x627 2)) (x33 64 x627 2)))
(assert (x112 x360))
(assert (= x54 (or x448 x397)))
(assert (x112 x77))
(assert (x112 x401))
(assert (x112 x531))
(assert (not (x29 (x33 64 x605 2))))
(assert (x112 x444))
(assert (= (x553 (x33 64 x627 2)) x627))
(assert (x29 1889567281))
(assert (x112 x364))
(assert (x112 x509))
(assert (x112 x500))
(assert (< 10000 (x33 64 x425 2)))
(assert (x112 x44))
(assert (x112 x308))
(assert (x112 x373))
(assert (= (x22 (+ x52 1)) (x22 x52)))
(assert (x112 x219))
(assert (=> (= 0 x363) (= 0 (div x363 x363))))
(assert (x112 x310))
(assert (x112 x225))
(assert (x112 x575))
(assert (x112 x439))
(assert (x112 x41))
(assert (x112 x392))
(assert (= (and x609 x129) x408))
(assert (x112 x648))
(assert (= x425 (x553 (x33 64 x425 2))))
(assert (x112 x240))
(assert (x112 x282))
(assert (x112 x621))
(assert (=> (= 0 x39) (= (div x466 x39) 0)))
(assert (x50 x324))
(assert (x112 x478))
(assert (x112 x272))
(assert (x29 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x34 x461))
(assert (= (x22 115792089237316195423570985008687907853269984665640564039457584007913129639904) 0))
(assert (x112 x267))
(assert (= (and (not x154) x54) x396))
(assert (x112 x627))
(assert (x112 x485))
(assert (= x538 (x553 (x33 64 x538 0))))
(assert (x112 x571))
(assert (= (x22 57896044618658097711785492504343953926634992332820282019728792003956564819967) 0))
(assert (x29 50942633119752846454219349998365661925608737367104304655302372697894809501696))
(assert (x50 x406))
(assert (=> (>= 10000 x232) (= 0 (x22 x232))))
(assert (= (and x529 (not x469)) x370))
(assert (< 10000 (x33 64 x538 0)))
(assert (x112 x491))
(assert (x112 x224))
(assert (x112 x198))
(assert (x29 2835717307))
(assert (x112 x87))
(assert (x112 x280))
(assert (x112 x410))
(assert (= 64 (x1 (x33 64 x145 0))))
(assert (x112 x405))
(assert (= (x22 3536776372) 0))
(assert (x112 x167))
(assert (= (x1 (x33 64 x605 2)) 64))
(assert (x112 x217))
(assert (= (x1 (x33 64 x248 1)) 64))
(assert (x112 x103))
(assert (x112 x563))
(assert (= (or x242 x113) x650))
(assert (= 0 (x22 773316216)))
(assert (x34 x303))
(assert (x112 x393))
(assert (x112 x185))
(assert (= (x1 (x33 64 x232 3)) 64))
(assert (x112 x203))
(assert (=> (<= x245 10000) (= (x22 x245) 0)))
(assert (x112 x441))
(assert (not (x29 (x33 64 x232 3))))
(assert (x112 x449))
(assert (x112 x612))
(assert (x29 115792089237316195423570985008687907853269984665640564039457584007913129639934))
(assert (x112 x407))
(assert (x29 604800))
(assert (= (x22 x269) (x22 (+ 1 x269))))
(assert (x112 x638))
(assert (x112 x86))
(assert (x112 x538))
(assert (x112 x264))
(assert (= (=> (and (and (>= x28 0) (= x276 false) (= (x33 64 x605 2) x184) (= x317 x203) (= (x614 x184) x636) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x3) (= x502 (x287 x308)) (= x647 (x229 x631)) (<= 1 x538) (<= 1 x250) (<= 36 x480) (not (= x245 x538)) (not (> x636 x116)) (>= 255 x647) (>= x619 0) (= x528 0) (= x505 x236) (>= x647 1) x186 (= (< 0 (x640 x245)) x412) (>= 1461501637330902918203684832716283019655932542975 x463) (>= 127 x444) (= (x33 64 x232 3) x631) (= x62 x562) (= false x196) (<= x480 57896044618658097711785492504343953926634992332820282019728792003956564819967) (= (x33 64 x248 1) x37) (>= x3 0) (= x217 773316216) (= (x602 x265) x250) (= (x191 0) x380) (= (x506 (+ 604800 x636)) x116) (= x399 0) (<= 0 x160) (= false x452) (= (not (< x203 x116)) x346) (= (x191 4) x505) (= x315 (x640 x538)) (<= x413 1461501637330902918203684832716283019655932542975) (= x414 false) (>= x108 0) (= false x302) (<= 0 x463) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x132) (= x24 0) (= (x277 x538) x562) (= (+ 5 x37) x265) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x619) (= x449 x380) (>= 1461501637330902918203684832716283019655932542975 x538) (>= 4294967295 x28) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x108) (>= x245 1) (>= x317 0) (<= x444 127) (= x9 false) (= x248 x463) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x111) (= x501 false) (= x290 1) (<= x160 1461501637330902918203684832716283019655932542975) (<= x317 115792089237316195423570985008687907853269984665640564039457584007913129639935) x412 (= x463 x308) (>= 1461501637330902918203684832716283019655932542975 x245) (<= 0 x40) (= x538 x596) (<= 0 x111) (>= x315 1) (= x186 (< 0 (x640 x538))) (<= x40 1461501637330902918203684832716283019655932542975) (= x617 true) (= x236 x141) (>= x263 0) (>= x499 0) (= x232 (x159 x248)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x263) (= 773316216 x210) (<= 0 x132) (>= 1461501637330902918203684832716283019655932542975 x499)) (or (and x346 (= 1 x394)) (and (= x394 (ite x346 1 0)) (not x346)))) x475) x146))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x33 64 x538 0)))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x33 64 x497 2)))
(assert (x112 x214))
(assert (x112 x534))
(assert (x112 x409))
(assert (x112 x285))
(assert (x112 x630))
(assert (= x248 (x553 (x33 64 x248 1))))
(assert (x112 x517))
(assert (x29 76450787359836037641860180984291677749980919077056822294353438043884394381312))
(assert (= x292 (and x54 x154)))
(assert (x112 x518))
(assert (x112 x216))
(assert (x112 x122))
(assert (=> (<= x605 10000) (= (x22 x605) 0)))
(assert (x112 x363))
(assert (= (x22 69185743945351922119161689019356421013382125510479073735908722411855439477079) 0))
(assert (x112 x254))
(assert (x112 x319))
(assert (x112 x384))
(assert (x112 x540))
(assert (x112 x606))
(assert (= (x22 76450787359836037641860180984291677749980919077056822294353438043884394381312) 0))
(assert (x112 x153))
(assert (x157 x545 x331))
(assert (=> (= x5 0) (= 0 (div x438 x5))))
(assert (x29 773316216))
(assert (x112 x618))
(assert (x112 x284))
(assert (x112 x400))
(assert (=> (= x39 0) (= 0 (div x545 x39))))
(assert (x188 x406 2))
(assert (x112 x127))
(assert (=> (= 0 x5) (= 0 (div x361 x5))))
(assert (= (x553 (x33 64 x497 2)) x497))
(assert (=> (= x458 0) (= (div x66 x458) 0)))
(assert (x112 x121))
(assert (x50 x422))
(assert (=> (>= 10000 x627) (= 0 (x22 x627))))
(assert (= (x22 (+ 1 x462)) (x22 x462)))
(assert (x112 x324))
(assert (= (and x451 x650) x255))
(assert (= (x553 (x33 64 x232 3)) x232))
(assert (x112 x589))
(assert (= x437 (=> (and (or (and (and (= (x506 (+ 1 (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x545) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x331) (= x280 x490) (= (mod (* x139 x583) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x637) (= x648 (mod (* x536 x373) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x73 x150) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x281) (= (x195 (- 0 x39)) x49) (= (div x466 x39) x510) (= x301 (div x49 x39)) (= (mod (* x606 x107) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x139) (= (div x545 x39) x150) (= (x506 (+ 1 x301)) x103) (= x466 (x195 (- x471 x115))) (> x545 x166) (= (x195 (- 2 x621)) x373) (= (mod (* (x10 x510 x543) x648) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x490) (= x44 (mod (* x107 x150) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x150 x445) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x105) (= x11 (mod (* x150 x637) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x296 2 x324) x73) (= x153 (x195 (- x166 (mod (ite (> x115 x471) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (mod (* x637 x156) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x536) (= x606 (x195 (- 2 x44))) (= (x195 (- 2 x105)) x126) (= x156 (x195 (- 2 x11))) (= (x195 (- 2 x281)) x500) (= x583 (x195 (- 2 x293))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x166) (= x107 (mod (* x445 x126) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x103 x153) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x543) (= x39 (x577 x545 x331)) (= (mod (* 3 x150) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x324) (= (mod (* x150 x536) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x621) (= x293 (mod (* x139 x150) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x500 x73) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x445) (= (mod (* x416 x505) x545) x115)) (not x347)) (and (and (= x280 x43) (= (div x471 x545) x43)) x347)) (and (= x81 (mod (* x416 x505) 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (x238 x269) x416) (= (x118 x52) x545) (<= 1 x545) (= (= 0 x166) x347) (= (x195 (- x81 x471)) x67) (= x471 (mod (* x416 x505) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x166 (x195 (- x67 (mod (ite (< x81 x471) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))) x554)))
(assert (x112 x6))
(assert (= (x22 604800) 0))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x33 64 x627 2)))
(assert (x112 x367))
(assert (=> (= x458 0) (= (div x237 x458) 0)))
(assert (not (x29 (x33 64 x627 2))))
(assert (= (x22 115792089237316195423570985008687907853269984665640564039457584007913129639935) 0))
(assert (x112 x421))
(assert (x112 x494))
(assert (x112 x511))
(assert (x29 274184521717934524641157099916833587217))
(assert (x112 x525))
(assert (x29 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (x112 x438))
(assert (x112 x80))
(assert (= x488 (or x309 x255)))
(assert (x112 x39))
(assert (x110 x303 x89))
(assert (= x465 (not (and (= x575 (x118 x52)) (= x526 (x541 x333)) (= false x516) (= (x238 x269) x393) (= false x649) (= x390 false) (not (> x584 x420)) (= false x358) (= x213 1499272391) (= (x195 (- x420 x505)) x584) (= x360 (x195 (- x82 x505))) (= x374 (+ x360 x546)) (= x239 false) (= x484 false) (= x260 false) (= false x266) (= (- x259 x267) x164) (= x446 false) (= x546 (- x321 x575)) (= x424 true) (= (+ x164 x26) x599) (= false x165) (= x643 false) (= 1 x376) (= true x106) (= (x238 x269) x267) (= x310 (x195 (- x526 x198))) (= (x195 (- x393 x280)) x26) (= 3 x172) (not (> x379 x377)) (= false x561) (not (> x310 x526)) (= (x195 (- x420 x505)) x179) (= (x118 x52) x82) (not (< x393 x26)) (= false x209) (not (< x82 x360)) (= 1 x443) (= false x642) (= 274184521717934524641157099916833587217 x212) (= x633 false) (= 773316216 x291) (= 773316216 x258) (= x524 false) (= 3536776372 x19) (= x379 (x195 (- x377 x280))) (= x339 773316216) (= x15 (x195 (- x377 x280))) (= x27 false) (= x274 274184521717934524641157099916833587217) (= x522 false) (= x199 false) (= x335 false) (= x205 1499272391) (= x215 3536776372)))))
(assert (x112 x422))
(assert (x112 x135))
(assert (x112 x369))
(assert (x112 x512))
(assert (= (x22 1499272391) 0))
(assert (= x328 (or x408 x622)))
(assert (x112 x641))
(assert (= (x1 (x33 64 x497 2)) 64))
(assert (= x305 (or x432 x79)))
(assert (= x475 (=> (and (= (= 0 x394) x154) (or (and (and (= x433 false) (= x625 (x506 (+ x367 x420))) (= 160 x133) (= (+ 1 x605) x219) (not (> x367 x625)) (= x47 36) (= x427 (x33 64 x538 0)) (= x220 false) (= (x33 64 x605 2) x362) (not (> x21 x225)) (= false x457) (= x421 x201) (= x388 (- x359 x4)) (= x169 x509) (= x537 (+ 2 x223)) (= x177 (+ x21 x388)) (<= x147 127) (= x4 (x2 x349)) (= x349 (+ 1 x131)) (= (x195 (- x225 x571)) x21) (= x177 x495) (= x623 (x270 x427)) (= x497 (+ 1 x605)) (= (x33 64 x605 2) x223) (not (> x571 x178)) (<= x605 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= (x182 x173) x130) (= (x33 64 x497 2) x378) (= x398 (x640 x245)) (= (+ x362 1) x173) (= x627 (+ 1 x605)) (= x386 50942633119752846454219349998365661925608737367104304655302372697894809501696) (= x131 (x33 64 x605 2)) (<= 1 x398) (= x45 128) (<= x147 127) (= x178 (x506 (+ x571 x130))) (= (x506 (+ x130 x571)) x169) (= x225 (x304 128)) (= x569 false) (= x392 1889567281) (= x538 x421)) (not x154)) (and (and (= x133 128) (= x571 x509) (= x495 x359) (= x627 x605)) x154))) x78)))
(assert (=> (<= x145 10000) (= 0 (x22 x145))))
(assert (x34 x543))
(assert (x112 x343))
(assert (x112 x417))
(assert (x112 x567))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x33 64 x232 3)))
(assert (x112 x206))
(assert (x34 x89))
(assert (=> (<= x308 10000) (= (x22 x308) 0)))
(assert (x110 x641 x461))
(assert (x112 x145))
(assert (x29 904625697166532776746648320380374280103671755200316906558262375061821325312))
(assert (x112 x45))
(assert (x34 x531))
(assert (x29 69185743945351922119161689019356421013382125510479073735908722411855439477079))
(assert (x112 x81))
(assert (x112 x636))
(assert (x112 x11))
(assert (=> (<= x497 10000) (= (x22 x497) 0)))
(assert (x112 x67))
(assert (x112 x139))
(assert (x112 x289))
(assert (x112 x221))
(assert (x112 x53))
(assert (= (x22 904625697166532776746648320380374280103671755200316906558262375061821325312) 0))
(assert (x34 x641))
(assert (x112 x119))
(assert (x112 x526))
(assert (= (x483 (x33 64 x605 2)) 2))
(assert (= x558 (and x503 x435)))
(assert (x112 x461))
(assert (x112 x71))
(assert (= (x33 64 x497 2) (x22 (x33 64 x497 2))))
(assert (= x435 (or x244 x60)))
(assert (x112 x107))
(assert (x112 x281))
(assert (x112 x262))
(assert (= (x33 64 x145 0) (x22 (x33 64 x145 0))))
(assert (= (x22 31536000) 0))
(assert (< 10000 (x33 64 x232 3)))
(assert (x112 x582))
(assert (x112 x413))
(assert (x112 x566))
(assert (x112 x181))
(assert (x112 x43))
(assert (x112 x150))
(assert (= x242 (and x313 x65)))
(assert (x112 x76))
(assert (< (x33 64 x145 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x112 x372))
(assert (x112 x250))
(assert (= (x22 (x33 64 x232 3)) (x33 64 x232 3)))
(assert (x112 x5))
(assert (= (x1 (x33 64 x627 2)) 64))
(assert (x29 1461501637330902918203684832716283019655932542975))
(assert (x112 x379))
(assert (x112 x560))
(assert (x112 x327))
(assert (x112 x536))
(assert (= (or x396 x292) x383))
(assert (x112 x130))
(assert (= (and x383 (not x320)) x244))
(assert (x112 x149))
(assert (x29 1499272391))
(assert (x318 x545))
(assert (= x448 (and x104 x346)))
(assert (= x171 (and x529 x469)))
(assert (not x146))
(assert (x112 x126))
(assert (= x309 (and (not x451) x650)))
(assert (= (x22 4294967295) 0))
(assert (x112 x445))
(assert (= 0 (x22 115792089237316195423570985008687907853269984665640564039457584007913129639934)))
(assert (x110 x592 x589))
(assert (x112 x140))
(assert (x112 x66))
(assert (x112 x73))
(assert (x112 x256))
(assert (= 64 (x1 (x33 64 x538 0))))
(assert (x318 x613))
(assert (x112 x306))
(assert (x112 x490))
(assert (x112 x175))
(assert (= (x22 x402) (x22 (+ x402 2))))
(assert (x112 x626))
(assert (not (x29 (x33 64 x425 2))))
(assert (x112 x294))
(assert (= x252 (or x337 x305)))
(assert (x112 x453))
(assert (x29 57896044618658097711785492504343953926634992332820282019728792003956564819967))
(assert (=> (= 0 x613) (= 0 (div x400 x613))))
(assert (x112 x179))
(assert (x112 x616))
(assert (x112 x47))
(assert (x112 x403))
(assert (x112 x442))
(assert (x112 x586))
(assert (= (x22 50942633119752846454219349998365661925608737367104304655302372697894809501696) 0))
(assert (=> (= x403 0) (= (div x403 x403) 0)))
(assert (x112 x607))
(assert (x112 x486))
(assert (x112 x473))
(assert (x112 x472))
(assert (= (and x544 (not x194)) x330))
(assert (x318 x361))
(assert (x112 x257))
(assert (x112 x331))
(assert (= x529 (or x382 x307)))
(assert (= (x22 (+ 2 x223)) (x22 x223)))
(assert (x157 x361 x604))
(assert (= 0 (x483 (x33 64 x145 0))))
(assert (x112 x141))
(assert (x112 x57))
(assert (= (x22 (x33 64 x605 2)) (x33 64 x605 2)))
(assert (x112 x380))
(assert (x112 x18))
(assert (x112 x26))
(assert (= (and x404 (not x271)) x368))
(assert (not (x29 (x33 64 x248 1))))
(assert (x112 x584))
(assert (x112 x594))
(assert (x112 x193))
(assert (x112 x564))
(assert (x112 x440))
(assert (= (and x104 (not x346)) x397))
(assert (= (x22 x462) (x22 (+ x462 3))))
(assert (x34 x395))
(assert (= x605 (x553 (x33 64 x605 2))))
(assert (x34 x510))
(assert (x112 x96))
(assert (x34 x592))
(assert (x112 x117))
(check-sat)
(exit)
