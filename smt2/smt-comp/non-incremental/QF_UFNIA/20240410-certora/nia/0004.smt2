(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Certora
Generated on: 2024-04-10
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x593 (Int) Int)
(declare-fun x14 () Int)
(declare-fun x321 (Int) Int)
(declare-fun x580 () Int)
(declare-fun x388 (Int) Int)
(declare-fun x544 () Int)
(declare-fun x283 () Int)
(declare-fun x17 () Int)
(declare-fun x72 () Int)
(declare-fun x117 () Int)
(declare-fun x597 () Bool)
(declare-fun x342 () Bool)
(declare-fun x585 () Int)
(declare-fun x467 () Int)
(declare-fun x281 () Bool)
(declare-fun x105 () Int)
(declare-fun x476 () Int)
(declare-fun x340 () Int)
(declare-fun x203 () Int)
(declare-fun x319 () Int)
(declare-fun x314 () Int)
(declare-fun x542 (Int) Int)
(declare-fun x148 () Int)
(declare-fun x211 () Int)
(declare-fun x501 () Bool)
(declare-fun x75 () Bool)
(declare-fun x49 () Int)
(declare-fun x181 () Int)
(declare-fun x315 () Int)
(declare-fun x372 () Bool)
(declare-fun x452 () Int)
(declare-fun x537 () Int)
(declare-fun x346 () Bool)
(declare-fun x520 () Int)
(declare-fun x252 () Int)
(declare-fun x503 () Bool)
(declare-fun x227 () Int)
(declare-fun x425 () Int)
(declare-fun x35 () Int)
(declare-fun x576 () Int)
(declare-fun x150 () Int)
(declare-fun x48 () Bool)
(declare-fun x461 () Bool)
(declare-fun x331 () Bool)
(declare-fun x187 () Int)
(declare-fun x124 () Bool)
(declare-fun x376 () Int)
(declare-fun x68 () Int)
(declare-fun x464 () Int)
(declare-fun x572 (Int Int) Int)
(declare-fun x11 () Bool)
(declare-fun x509 () Bool)
(declare-fun x422 () Bool)
(declare-fun x538 () Bool)
(declare-fun x499 () Bool)
(declare-fun x261 () Int)
(declare-fun x358 () Int)
(declare-fun x349 () Int)
(declare-fun x307 () Bool)
(declare-fun x42 () Bool)
(declare-fun x424 () Int)
(declare-fun x498 () Int)
(declare-fun x459 () Int)
(declare-fun x10 () Bool)
(declare-fun x442 () Int)
(declare-fun x215 () Int)
(declare-fun x77 () Int)
(declare-fun x559 () Int)
(declare-fun x231 () Bool)
(declare-fun x130 () Int)
(declare-fun x129 () Int)
(declare-fun x107 () Int)
(declare-fun x25 () Int)
(declare-fun x207 () Int)
(declare-fun x30 () Int)
(declare-fun x474 () Int)
(declare-fun x51 () Int)
(declare-fun x300 () Int)
(declare-fun x379 () Int)
(declare-fun x116 () Bool)
(declare-fun x108 () Int)
(declare-fun x70 () Bool)
(declare-fun x567 () Bool)
(declare-fun x65 () Bool)
(declare-fun x271 () Int)
(declare-fun x103 () Int)
(declare-fun x523 () Int)
(declare-fun x239 () Int)
(declare-fun x137 () Bool)
(declare-fun x522 () Int)
(declare-fun x332 () Int)
(declare-fun x427 () Int)
(declare-fun x264 () Int)
(declare-fun x160 () Int)
(declare-fun x153 () Int)
(declare-fun x420 () Int)
(declare-fun x373 () Bool)
(declare-fun x594 () Int)
(declare-fun x482 () Int)
(declare-fun x366 () Int)
(declare-fun x112 () Bool)
(declare-fun x62 () Int)
(declare-fun x23 () Int)
(declare-fun x20 () Bool)
(declare-fun x66 () Int)
(declare-fun x221 () Int)
(declare-fun x85 () Int)
(declare-fun x86 (Int) Bool)
(declare-fun x250 () Int)
(declare-fun x18 () Bool)
(declare-fun x495 () Bool)
(declare-fun x397 () Int)
(declare-fun x440 () Bool)
(declare-fun x493 () Bool)
(declare-fun x406 () Int)
(declare-fun x356 () Bool)
(declare-fun x535 () Int)
(declare-fun x396 () Int)
(declare-fun x280 () Int)
(declare-fun x394 () Int)
(declare-fun x532 () Int)
(declare-fun x40 () Int)
(declare-fun x162 () Int)
(declare-fun x244 () Int)
(declare-fun x225 () Bool)
(declare-fun x345 () Int)
(declare-fun x295 () Int)
(declare-fun x478 () Int)
(declare-fun x596 () Int)
(declare-fun x369 () Int)
(declare-fun x470 () Int)
(declare-fun x560 () Int)
(declare-fun x15 () Int)
(declare-fun x362 () Int)
(declare-fun x448 () Int)
(declare-fun x284 () Int)
(declare-fun x172 () Int)
(declare-fun x195 () Bool)
(declare-fun x460 () Bool)
(declare-fun x282 () Int)
(declare-fun x363 () Bool)
(declare-fun x437 () Int)
(declare-fun x599 () Int)
(declare-fun x4 (Int) Int)
(declare-fun x418 () Int)
(declare-fun x110 () Bool)
(declare-fun x133 () Int)
(declare-fun x435 () Bool)
(declare-fun x483 () Bool)
(declare-fun x146 () Int)
(declare-fun x595 () Bool)
(declare-fun x515 () Bool)
(declare-fun x2 () Int)
(declare-fun x123 () Int)
(declare-fun x479 () Int)
(declare-fun x449 () Int)
(declare-fun x71 () Int)
(declare-fun x115 () Bool)
(declare-fun x291 () Bool)
(declare-fun x527 () Int)
(declare-fun x128 () Bool)
(declare-fun x251 () Int)
(declare-fun x54 () Int)
(declare-fun x290 () Int)
(declare-fun x228 () Int)
(declare-fun x570 (Int Int) Int)
(declare-fun x139 () Int)
(declare-fun x67 () Int)
(declare-fun x355 () Int)
(declare-fun x217 () Int)
(declare-fun x298 () Int)
(declare-fun x176 () Bool)
(declare-fun x272 () Bool)
(declare-fun x89 () Int)
(declare-fun x395 () Bool)
(declare-fun x318 () Bool)
(declare-fun x81 () Int)
(declare-fun x106 () Int)
(declare-fun x375 () Int)
(declare-fun x481 (Int) Int)
(declare-fun x563 () Int)
(declare-fun x169 (Int Int) Int)
(declare-fun x101 () Int)
(declare-fun x202 () Int)
(declare-fun x113 () Int)
(declare-fun x354 () Int)
(declare-fun x212 () Int)
(declare-fun x466 () Int)
(declare-fun x382 () Int)
(declare-fun x132 () Int)
(declare-fun x248 () Bool)
(declare-fun x184 () Int)
(declare-fun x96 () Int)
(declare-fun x102 () Int)
(declare-fun x357 () Int)
(declare-fun x152 () Bool)
(declare-fun x52 () Int)
(declare-fun x443 () Int)
(declare-fun x69 () Bool)
(declare-fun x335 (Int) Int)
(declare-fun x224 (Int Int) Int)
(declare-fun x56 () Int)
(declare-fun x484 () Int)
(declare-fun x359 (Int) Int)
(declare-fun x348 (Int) Int)
(declare-fun x566 () Bool)
(declare-fun x196 () Int)
(declare-fun x3 () Int)
(declare-fun x205 () Bool)
(declare-fun x367 () Int)
(declare-fun x34 () Bool)
(declare-fun x125 () Int)
(declare-fun x197 () Int)
(declare-fun x163 () Int)
(declare-fun x46 () Bool)
(declare-fun x491 () Int)
(declare-fun x165 () Bool)
(declare-fun x313 (Int) Int)
(declare-fun x416 () Int)
(declare-fun x255 () Int)
(declare-fun x39 (Int) Int)
(declare-fun x581 () Int)
(declare-fun x78 () Int)
(declare-fun x423 () Int)
(declare-fun x84 () Bool)
(declare-fun x53 () Bool)
(declare-fun x82 () Int)
(declare-fun x260 () Int)
(declare-fun x344 () Int)
(declare-fun x178 () Int)
(declare-fun x95 () Int)
(declare-fun x191 () Int)
(declare-fun x134 () Int)
(declare-fun x598 () Bool)
(declare-fun x200 () Bool)
(declare-fun x414 () Int)
(declare-fun x514 () Bool)
(declare-fun x303 () Int)
(declare-fun x93 () Bool)
(declare-fun x465 () Int)
(declare-fun x312 () Int)
(declare-fun x186 () Int)
(declare-fun x529 (Int) Int)
(declare-fun x469 () Int)
(declare-fun x387 () Int)
(declare-fun x140 () Int)
(declare-fun x370 () Int)
(declare-fun x99 () Bool)
(declare-fun x419 () Int)
(declare-fun x403 () Bool)
(declare-fun x168 () Bool)
(declare-fun x502 () Int)
(declare-fun x468 () Int)
(declare-fun x541 () Int)
(declare-fun x127 (Int) Int)
(declare-fun x317 () Bool)
(declare-fun x546 () Int)
(declare-fun x569 () Int)
(declare-fun x119 () Int)
(declare-fun x126 (Int) Int)
(declare-fun x216 () Bool)
(declare-fun x304 () Bool)
(declare-fun x429 () Bool)
(declare-fun x240 () Int)
(declare-fun x485 () Bool)
(declare-fun x407 () Int)
(declare-fun x174 () Bool)
(declare-fun x308 () Int)
(declare-fun x156 () Int)
(declare-fun x458 () Int)
(declare-fun x64 () Int)
(declare-fun x37 () Bool)
(declare-fun x243 () Int)
(declare-fun x164 () Int)
(declare-fun x512 () Int)
(declare-fun x489 () Int)
(declare-fun x402 () Int)
(declare-fun x109 () Int)
(declare-fun x393 (Int) Int)
(declare-fun x273 () Int)
(declare-fun x230 () Int)
(declare-fun x222 () Int)
(declare-fun x475 () Int)
(declare-fun x45 () Int)
(declare-fun x439 () Bool)
(declare-fun x299 () Int)
(declare-fun x587 () Int)
(declare-fun x409 () Int)
(declare-fun x241 () Int)
(declare-fun x6 () Int)
(declare-fun x552 () Int)
(declare-fun x33 () Int)
(declare-fun x286 () Int)
(declare-fun x447 () Int)
(declare-fun x247 () Bool)
(declare-fun x380 () Int)
(declare-fun x347 () Bool)
(declare-fun x206 () Int)
(declare-fun x83 () Bool)
(declare-fun x277 () Int)
(declare-fun x120 () Int)
(declare-fun x480 () Bool)
(declare-fun x477 () Bool)
(declare-fun x330 () Int)
(declare-fun x360 () Int)
(declare-fun x494 () Int)
(declare-fun x179 () Int)
(declare-fun x26 () Int)
(declare-fun x592 () Bool)
(declare-fun x518 () Int)
(declare-fun x296 () Int)
(declare-fun x549 () Int)
(declare-fun x386 () Int)
(declare-fun x508 () Int)
(declare-fun x401 () Int)
(declare-fun x568 () Int)
(declare-fun x450 () Int)
(declare-fun x385 (Int) Int)
(declare-fun x246 () Bool)
(declare-fun x526 () Int)
(declare-fun x288 () Bool)
(declare-fun x310 () Int)
(declare-fun x8 () Int)
(declare-fun x565 () Int)
(declare-fun x100 () Int)
(declare-fun x122 () Int)
(declare-fun x328 () Int)
(declare-fun x233 () Int)
(declare-fun x21 () Int)
(declare-fun x305 (Int) Int)
(declare-fun x24 () Int)
(declare-fun x456 () Bool)
(declare-fun x519 (Int) Int)
(declare-fun x270 () Int)
(declare-fun x378 () Int)
(declare-fun x149 () Bool)
(declare-fun x292 () Int)
(declare-fun x287 () Int)
(declare-fun x492 () Int)
(declare-fun x411 () Int)
(declare-fun x371 () Int)
(declare-fun x374 () Int)
(declare-fun x333 () Bool)
(declare-fun x451 () Int)
(declare-fun x43 () Bool)
(declare-fun x524 () Int)
(declare-fun x430 () Bool)
(declare-fun x497 (Int) Int)
(declare-fun x445 () Int)
(declare-fun x59 () Bool)
(declare-fun x297 () Bool)
(declare-fun x517 () Int)
(declare-fun x590 () Int)
(declare-fun x327 () Int)
(declare-fun x453 () Int)
(declare-fun x175 () Int)
(declare-fun x516 () Int)
(declare-fun x220 () Int)
(declare-fun x41 () Int)
(declare-fun x269 () Int)
(declare-fun x209 () Bool)
(declare-fun x383 () Int)
(declare-fun x121 () Bool)
(declare-fun x97 () Bool)
(declare-fun x534 (Int Int Int) Int)
(declare-fun x455 (Int) Int)
(declare-fun x428 () Bool)
(declare-fun x306 () Bool)
(declare-fun x226 () Int)
(declare-fun x136 () Bool)
(declare-fun x142 () Int)
(declare-fun x28 () Int)
(declare-fun x528 () Bool)
(declare-fun x564 () Int)
(declare-fun x511 () Int)
(declare-fun x504 () Bool)
(declare-fun x588 () Int)
(declare-fun x79 () Int)
(declare-fun x50 () Int)
(declare-fun x263 () Bool)
(declare-fun x398 () Bool)
(declare-fun x433 () Bool)
(declare-fun x229 () Int)
(declare-fun x242 () Bool)
(declare-fun x562 () Int)
(declare-fun x253 () Int)
(declare-fun x486 () Int)
(declare-fun x351 () Bool)
(declare-fun x343 () Int)
(declare-fun x540 () Int)
(declare-fun x444 () Bool)
(declare-fun x61 () Bool)
(declare-fun x392 () Int)
(declare-fun x490 () Int)
(declare-fun x311 () Int)
(declare-fun x426 () Bool)
(declare-fun x473 () Bool)
(declare-fun x161 () Int)
(declare-fun x92 (Int) Int)
(declare-fun x548 () Int)
(declare-fun x256 () Int)
(declare-fun x214 () Int)
(declare-fun x554 () Int)
(declare-fun x384 () Int)
(declare-fun x410 () Int)
(declare-fun x74 () Int)
(declare-fun x279 () Int)
(declare-fun x201 () Bool)
(declare-fun x583 () Int)
(declare-fun x27 () Int)
(declare-fun x353 () Int)
(declare-fun x454 () Int)
(declare-fun x218 () Bool)
(declare-fun x505 () Bool)
(declare-fun x337 () Int)
(declare-fun x73 () Int)
(declare-fun x471 () Int)
(declare-fun x44 () Int)
(declare-fun x219 () Int)
(declare-fun x294 () Bool)
(declare-fun x223 () Int)
(declare-fun x432 () Bool)
(declare-fun x341 () Int)
(declare-fun x325 () Bool)
(declare-fun x268 () Int)
(declare-fun x530 () Int)
(declare-fun x547 () Int)
(declare-fun x405 () Int)
(declare-fun x245 () Int)
(declare-fun x368 () Int)
(declare-fun x170 () Int)
(declare-fun x301 () Int)
(declare-fun x157 () Int)
(declare-fun x193 () Bool)
(declare-fun x91 () Bool)
(declare-fun x235 (Int) Int)
(declare-fun x87 () Int)
(declare-fun x80 () Bool)
(declare-fun x22 () Int)
(declare-fun x198 () Bool)
(declare-fun x316 () Int)
(declare-fun x158 () Int)
(declare-fun x462 () Int)
(declare-fun x506 () Int)
(declare-fun x579 () Bool)
(declare-fun x19 () Int)
(declare-fun x591 () Bool)
(declare-fun x472 () Int)
(declare-fun x336 () Bool)
(declare-fun x145 () Bool)
(declare-fun x441 () Int)
(declare-fun x1 () Int)
(declare-fun x412 () Int)
(declare-fun x262 (Int) Int)
(declare-fun x556 () Int)
(declare-fun x213 () Bool)
(declare-fun x389 () Int)
(declare-fun x446 () Int)
(declare-fun x194 () Int)
(declare-fun x322 () Int)
(declare-fun x391 () Int)
(declare-fun x536 () Int)
(declare-fun x302 () Int)
(declare-fun x177 () Int)
(declare-fun x323 () Int)
(declare-fun x600 () Int)
(declare-fun x533 () Bool)
(declare-fun x589 () Int)
(declare-fun x171 () Int)
(declare-fun x521 () Int)
(declare-fun x555 () Int)
(declare-fun x12 () Int)
(declare-fun x55 () Int)
(declare-fun x204 () Int)
(declare-fun x111 () Bool)
(declare-fun x463 () Bool)
(declare-fun x377 () Int)
(declare-fun x155 () Int)
(declare-fun x329 () Int)
(declare-fun x320 () Int)
(declare-fun x578 () Int)
(declare-fun x350 () Bool)
(declare-fun x57 () Int)
(declare-fun x352 () Bool)
(declare-fun x557 () Int)
(declare-fun x324 () Int)
(declare-fun x76 () Int)
(declare-fun x507 () Int)
(declare-fun x47 () Int)
(declare-fun x550 () Bool)
(declare-fun x404 () Int)
(declare-fun x365 () Int)
(declare-fun x421 () Int)
(declare-fun x144 () Int)
(declare-fun x238 () Int)
(declare-fun x274 () Int)
(declare-fun x141 (Int) Int)
(declare-fun x326 () Int)
(declare-fun x488 () Int)
(declare-fun x173 () Bool)
(declare-fun x415 () Bool)
(declare-fun x199 () Bool)
(declare-fun x381 () Int)
(declare-fun x189 () Bool)
(declare-fun x257 () Int)
(declare-fun x7 () Int)
(declare-fun x438 () Bool)
(declare-fun x151 () Bool)
(declare-fun x496 () Int)
(declare-fun x249 () Int)
(declare-fun x513 () Bool)
(declare-fun x192 () Int)
(declare-fun x237 () Int)
(declare-fun x543 () Bool)
(declare-fun x551 () Bool)
(declare-fun x104 () Int)
(declare-fun x31 () Int)
(declare-fun x586 () Int)
(declare-fun x434 () Int)
(declare-fun x166 () Int)
(define-fun x266 ((x575 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x575) (>= x575 0)) x575 (- x575 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x259 ((x575 Int)) Int (ite (and (< x575 0) (>= x575 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x575 115792089237316195423570985008687907853269984665640564039457584007913129639936) x575))
(define-fun x582 ((x190 Int)) Bool (and (>= x190 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x190)))
(define-fun x584 ((x190 Int)) Bool (and (= (x169 x190 115792089237316195423570985008687907853269984665640564039457584007913129639935) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x169 115792089237316195423570985008687907853269984665640564039457584007913129639935 x190) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(define-fun x154 ((x190 Int)) Bool (and (= x190 (x169 x190 0)) (= (x169 0 x190) x190)))
(define-fun x185 ((x190 Int)) Bool (= (x169 x190 x190) x190))
(define-fun x436 ((x190 Int)) Bool (and (x185 x190) (x584 x190) (x154 x190)))
(define-fun x234 ((x190 Int) (x457 Int)) Bool (= (x169 x190 x457) (x169 x457 x190)))
(define-fun x431 ((x190 Int) (x457 Int)) Bool (and (<= (x169 x190 x457) (+ x190 x457)) (=> (>= x457 0) (>= (x169 x190 x457) x457)) (=> (>= x190 0) (<= x190 (x169 x190 x457)))))
(define-fun x16 ((x190 Int) (x457 Int)) Bool (and (x431 x190 x457) (x234 x190 x457)))
(define-fun x577 ((x190 Int)) Bool (and (= x190 (x224 x190 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (x224 115792089237316195423570985008687907853269984665640564039457584007913129639935 x190) x190)))
(define-fun x278 ((x190 Int)) Bool (and (= 0 (x224 x190 0)) (= (x224 0 x190) 0)))
(define-fun x13 ((x190 Int)) Bool (= x190 (x224 x190 x190)))
(define-fun x500 ((x190 Int)) Bool (and (x13 x190) (x278 x190) (x577 x190)))
(define-fun x338 ((x190 Int) (x457 Int)) Bool (= (x224 x457 x190) (x224 x190 x457)))
(define-fun x94 ((x190 Int) (x457 Int)) Bool (and (=> (>= x457 0) (>= x457 (x224 x190 x457))) (=> (<= 0 x190) (<= (x224 x190 x457) x190)) (<= 0 (x224 x190 x457))))
(define-fun x60 ((x190 Int) (x457 Int)) Bool (and (x94 x190 x457) (x338 x190 x457)))
(define-fun x58 ((x190 Int)) Bool (and (= (x572 115792089237316195423570985008687907853269984665640564039457584007913129639935 x190) (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x190)) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x190) (x572 x190 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x182 ((x190 Int)) Bool (and (= (x572 0 x190) x190) (= (x572 x190 0) x190)))
(define-fun x232 ((x190 Int)) Bool (= 0 (x572 x190 x190)))
(define-fun x98 ((x190 Int)) Bool (and (x182 x190) (x232 x190) (x58 x190)))
(define-fun x32 ((x190 Int) (x457 Int)) Bool (= (x572 x190 x457) (x572 x457 x190)))
(define-fun x364 ((x190 Int) (x457 Int)) Bool (and (>= (x572 x190 x457) 0) (<= (x572 x190 x457) (+ x457 x190))))
(define-fun x531 ((x190 Int) (x457 Int)) Bool (and (x364 x190 x457) (x32 x190 x457)))
(define-fun x143 ((x573 Int)) Int 0)
(define-fun x138 ((x573 Int)) Int 0)
(define-fun x390 ((x573 Int)) Int 0)
(define-fun x417 ((x573 Int)) Int 0)
(define-fun x147 ((x573 Int)) Int 0)
(define-fun x180 ((x573 Int)) Int 0)
(define-fun x188 ((x573 Int)) Int 0)
(define-fun x114 ((x573 Int)) Int (ite (> x140 x573) (x305 x573) 0))
(define-fun x571 ((x573 Int)) Int (ite (and (<= 0 x573) (< x573 x140)) (x4 x573) (x114 x573)))
(define-fun x210 ((x573 Int)) Int (ite (= x1 x573) x23 (x529 x573)))
(define-fun x399 ((x573 Int)) Int (ite (= x573 128) 100085594523021865991783642386441445976377394710335636839107931191495830274048 (x147 x573)))
(define-fun x131 ((x573 Int)) Int (ite (= 132 x573) x171 (x399 x573)))
(define-fun x510 ((x573 Int)) Int (ite (= 128 x573) 50942633119752846454219349998365661925608737367104304655302372697894809501696 (x138 x573)))
(define-fun x267 ((x573 Int)) Int (ite (= 132 x573) x251 (x510 x573)))
(define-fun x561 ((x573 Int)) Int (ite (= x573 0) x214 (x335 x573)))
(define-fun x183 ((x573 Int)) Int (ite (= x573 128) x214 (x267 x573)))
(define-fun x63 ((x573 Int)) Int (ite (and (< x573 160) (>= x573 128)) (x561 (- x573 128)) (x180 x573)))
(define-fun x88 ((x573 Int)) Int (ite (= x420 x573) x516 (x385 x573)))
(define-fun x36 ((x573 Int)) Int (ite (= x544 x573) x155 (x235 x573)))
(define-fun x361 ((x573 Int)) Int (ite (= x573 x540) x178 (x393 x573)))
(define-fun x487 ((x573 Int)) Int (ite x435 (x393 x573) (x361 x573)))
(define-fun x29 ((x573 Int)) Int (ite x435 (x385 x573) (x88 x573)))
(define-fun x539 ((x573 Int)) Int (ite x435 (x235 x573) (x36 x573)))
(define-fun x9 ((x573 Int)) Int (ite x435 (x417 x573) (x183 x573)))
(define-fun x293 ((x573 Int)) Int (ite (= x573 x107) x453 (x455 x573)))
(define-fun x265 ((x573 Int)) Int (ite x398 (x455 x573) (x293 x573)))
(define-fun x309 ((x573 Int)) Int (ite (= x573 x445) x407 (x539 x573)))
(define-fun x276 ((x573 Int)) Int (ite (= x573 x445) x207 (x309 x573)))
(define-fun x545 ((x573 Int)) Int (ite x398 (x539 x573) (x276 x573)))
(define-fun x90 ((x573 Int)) Int (ite (= x573 x28) x322 (x481 x573)))
(define-fun x289 ((x573 Int)) Int (ite x398 (x481 x573) (x90 x573)))
(define-fun x525 ((x573 Int)) Int (ite (= x573 x387) x196 (x593 x573)))
(define-fun x275 ((x573 Int)) Int (ite (= x573 x311) 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x9 x573)))
(define-fun x400 ((x573 Int)) Int (ite (= x573 x26) x170 (x275 x573)))
(define-fun x285 ((x573 Int)) Int (ite (= x376 x573) x326 (x400 x573)))
(define-fun x558 ((x573 Int)) Int (ite (= x316 x573) x230 (x497 x573)))
(define-fun x553 ((x573 Int)) Int (ite (= x552 x573) x472 (x558 x573)))
(define-fun x5 ((x573 Int)) Int (ite (= x573 128) x326 (x143 x573)))
(define-fun x135 ((x573 Int)) Int (ite (= 128 x573) 1 (x5 x573)))
(define-fun x574 ((x573 Int)) Int (ite (= x573 0) x564 (x92 x573)))
(define-fun x339 ((x573 Int)) Int (ite x200 (x497 x573) (x553 x573)))
(define-fun x38 ((x573 Int)) Int (ite (= x573 x578) x178 (x265 x573)))
(define-fun x159 ((x573 Int)) Int (ite x297 (x265 x573) (x38 x573)))
(define-fun x334 ((x573 Int)) Int (ite (= x573 x28) x586 (x289 x573)))
(define-fun x208 ((x573 Int)) Int (ite x297 (x289 x573) (x334 x573)))
(define-fun x254 ((x573 Int)) Int (ite (= x233 x573) x100 (x29 x573)))
(define-fun x258 ((x573 Int)) Int (ite (= x57 x573) x362 (x388 x573)))
(define-fun x167 ((x573 Int)) Int (ite (= x573 x28) x2 (x208 x573)))
(define-fun x118 ((x573 Int)) Int (ite (= x442 x573) x178 (x159 x573)))
(define-fun x413 ((x573 Int)) Int (ite (= x573 x290) x30 (x359 x573)))
(define-fun x408 ((x573 Int)) Int 0)
(define-fun x236 ((x573 Int)) Int (ite (= x573 x381) x478 (x545 x573)))
(assert (x582 x569))
(assert (x582 x486))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x534 64 x35 3)))
(assert (= (x534 64 x425 2) (x126 (x534 64 x425 2))))
(assert (x582 x187))
(assert (x582 x298))
(assert (= 64 (x348 (x534 64 x527 2))))
(assert (= (x126 31535999) 0))
(assert (x582 x85))
(assert (x582 x520))
(assert (x582 x370))
(assert (x86 2835717307))
(assert (= (x126 (x534 64 x251 0)) (x534 64 x251 0)))
(assert (x582 x448))
(assert (x582 x132))
(assert (x582 x7))
(assert (= x149 (and (not x483) x70)))
(assert (x86 57896044618658097711785492504343953926634992332820282019728792003956564819967))
(assert (x582 x518))
(assert (x582 x117))
(assert (x582 x576))
(assert (= (x348 (x534 64 x425 2)) 64))
(assert (x582 x508))
(assert (x582 x465))
(assert (x582 x588))
(assert (x582 x282))
(assert (x16 x274 x106))
(assert (x582 x320))
(assert (x582 x33))
(assert (x582 x122))
(assert (x16 x468 x517))
(assert (= 2 (x141 (x534 64 x238 2))))
(assert (x582 x475))
(assert (< (x534 64 x153 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (=> (<= x425 10000) (= (x126 x425) 0)))
(assert (x582 x202))
(assert (x582 x251))
(assert (x582 x103))
(assert (=> (>= 10000 x251) (= 0 (x126 x251))))
(assert (= (or x263 x195) x533))
(assert (x582 x568))
(assert (x86 100085594523021865991783642386441445976377394710335636839107931191495830274048))
(assert (x582 x25))
(assert (x582 x148))
(assert (x582 x105))
(assert (= 1 (x141 (x534 64 x219 1))))
(assert (= (=> (and (and (= x298 (x519 x179)) (= false x317) (= x389 (x534 64 x153 0)) (= false x331) (= x153 x486) (= x513 false) (>= 127 x104) (= false x46) (= (x339 x389) x369) (= x110 false) (= x153 x78) (<= 1 x298) (= 1889567281 x308) (>= 127 x104) (= (= x369 x405) x165) (= false x291)) (and (= (x266 (+ x129 x150)) x353) (= (+ x123 2) x57) (= false x415) (not (< x362 x269)) (not (> x184 x2)) (not (> x526 x30)) (= 36 x117) (= (x388 x57) x269) (= x17 (x266 (+ x129 x150))) (= x30 (x266 (+ x171 x526))) (= x442 (+ 1 x28)) (= x2 (x266 (+ x184 x150))) (= x526 (x359 x290)) (= (x266 (+ x150 x269)) x362) (= false x18) (= (x208 x28) x184) (= x327 x78) (not (< x353 x129)))) x165) x168))
(assert (x582 x434))
(assert (x582 x41))
(assert (x582 x357))
(assert (= 2 (x141 (x534 64 x527 2))))
(assert (x582 x559))
(assert (x582 x371))
(assert (= (x534 64 x95 2) (x126 (x534 64 x95 2))))
(assert (< (x534 64 x238 2) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (and x515 x124) x198))
(assert (=> (= x354 0) (= 0 (div x394 x354))))
(assert (x582 x362))
(assert (= x218 (=> (and (and (not (> x518 x229)) (<= 1 x354) (= (x321 x286) x537) (= x229 (x266 (+ x518 x14))) (= x550 (= x404 0)) (= (+ x253 2) x445) (not (> x537 x491)) (not (< x407 x280)) (= x484 (x481 x28)) (= (mod (* x491 x520) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x394) (= (x309 x445) x354) (= (x259 (- x158 (mod (ite (> x394 x569) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x404) (= x465 (x266 (+ x14 x518))) (= x158 (x259 (- x569 x394))) (= (x266 (+ x14 x484)) x322) (= (x539 x445) x280) (= (+ x253 1) x233) (= x407 (x266 (+ x14 x280))) (not (< x322 x484)) (= x520 (x29 x233)) (= x491 (x266 (+ x144 x537))) (= (mod (* x520 x491) 115792089237316195423570985008687907853269984665640564039457584007913129639935) x569) (= x144 (x90 x28))) (or (and (and (= x250 (x259 (- 2 x489))) (= x197 (x259 (- x394 x148))) (= (mod (* x491 x520) x354) x148) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x404) (= x462 (mod (* x27 x52) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x113 (x224 x354 x443)) (= x274 (div x197 x113)) (= (x259 (- x404 (mod (ite (< x394 x148) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x555) (= (x266 (+ x119 1)) x412) (= (mod (* x27 x588) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x489) (= x492 (x259 (- 2 x421))) (= (div x345 x113) x119) (= (x572 2 x301) x508) (= (mod (* x588 x250) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x282) (= (mod (* x52 x215) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x423) (= (mod (* x508 x330) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x357) (= x360 (mod (* x27 x423) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x310 (x259 (- 2 x360))) (= (x259 (- 0 x113)) x345) (= x245 (mod (* (x169 x274 x106) x282) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x443 (x266 (+ (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x354) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1))) (= (div x354 x113) x27) (= x355 (mod (* x357 x27) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x27 x328) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x421) (= x215 (x259 (- 2 x462))) (> x354 x404) (= (mod (* x423 x310) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x588) (= (x259 (- 2 x355)) x77) (= (mod (* x27 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x301) (= x469 (mod (* x27 x508) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x177 x245) (= x330 (x259 (- 2 x469))) (= (mod (* x328 x492) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x52) (= x106 (mod (* x412 x555) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x357 x77) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x328)) (not x550)) (and x550 (and (= x211 x177) (= (div x394 x354) x211))))) x209)))
(assert (x86 604800))
(assert (=> (>= 10000 x179) (= (x126 x179) 0)))
(assert (= (x126 (x534 64 x219 1)) (x534 64 x219 1)))
(assert (x582 x227))
(assert (=> (>= 10000 x35) (= 0 (x126 x35))))
(assert (x582 x220))
(assert (x582 x172))
(assert (x582 x523))
(assert (x582 x162))
(assert (x582 x125))
(assert (= (x39 (x534 64 x527 2)) x527))
(assert (x582 x511))
(assert (x582 x14))
(assert (= (and x37 x193) x213))
(assert (= (x126 x28) (x126 (+ x28 1))))
(assert (x582 x464))
(assert (= (x39 (x534 64 x238 2)) x238))
(assert (= 2 (x141 (x534 64 x425 2))))
(assert (x582 x406))
(assert (not (x86 (x534 64 x238 2))))
(assert (x582 x244))
(assert (= (x126 3712381028) 0))
(assert (x582 x476))
(assert (x582 x374))
(assert (= 0 (x126 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (x60 x354 x443))
(assert (= (and (not x336) x356) x493))
(assert (x582 x368))
(assert (x582 x279))
(assert (x86 50942633119752846454219349998365661925608737367104304655302372697894809501696))
(assert (= (and x597 x247) x356))
(assert (=> (= x113 0) (= (div x354 x113) 0)))
(assert (= (x126 (+ x226 1)) (x126 x226)))
(assert (= x591 (or x149 x333)))
(assert (x582 x565))
(assert (= (or x10 x435) x597))
(assert (x582 x421))
(assert (= x504 (and x591 (not x592))))
(assert (x98 2))
(assert (x86 1889567281))
(assert (x582 x284))
(assert (x582 x181))
(assert (x582 x30))
(assert (x582 x427))
(assert (x582 x67))
(assert (x582 x268))
(assert (x582 x77))
(assert (= true x281))
(assert (x582 x287))
(assert (x86 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (= x318 (=> (and (or (and (and (= x392 (div x312 31536000)) (= x130 x392)) x483) (and (and (= x130 x337) (= (mod (* x3 69185743945351922119161689019356421013382125510479073735908722411855439477079) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x337) (= x3 (x266 (+ x441 x161))) (<= x521 31535999) (= (div x312 128) x161) (= x441 (mod (* 904625697166532776746648320380374280103671755200316906558262375061821325312 x521) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (not x483))) (and (= (x259 (- x181 x312)) x587) (= (x259 (- x587 (mod (ite (< x181 x312) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x521) (= (= 0 x521) x483) (= x157 (x321 x286)) (= x252 126144000) (= x378 (+ 1 x286)) (= (x388 x378) x194) (= (mod (* x157 126144000) 115792089237316195423570985008687907853269984665640564039457584007913129639935) x181) (= x283 (ite (= x368 1) 1 0)) (= x368 (div x594 x594)) (= x7 31536000) (= x562 (x169 x386 x283)) (= x562 1) (= x386 (ite (= x594 0) 1 0)) (= x312 (mod (* 126144000 x157) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x367 (x481 x28)))) x440)))
(assert (= (or x216 x551) x503))
(assert (=> (<= x133 10000) (= 0 (x126 x133))))
(assert (x582 x425))
(assert (x436 x106))
(assert (x582 x437))
(assert (= (x534 64 x153 0) (x126 (x534 64 x153 0))))
(assert (< (x534 64 x170 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x500 x354))
(assert (x582 x494))
(assert (x582 x113))
(assert (x582 x101))
(assert (x582 x76))
(assert (= (x126 (+ 1 x123)) (x126 x123)))
(assert (= 0 (x141 (x534 64 x251 0))))
(assert (x582 x450))
(assert (x582 x303))
(assert (x582 x142))
(assert (x16 x109 x556))
(assert (= 64 (x348 (x534 64 x95 2))))
(assert (x582 x238))
(assert (x582 x184))
(assert (x582 x466))
(assert (= (x348 (x534 64 x170 0)) 64))
(assert (= (x126 (+ 2 x123)) (x126 x123)))
(assert (= 64 (x348 (x534 64 x251 0))))
(assert (x582 x376))
(assert (x582 x170))
(assert (x582 x354))
(assert (x582 x130))
(assert (x582 x410))
(assert (= (or x200 x213) x174))
(assert (= (x126 115792089237316195423570985008687907853269984665640564039457584007913129639935) 0))
(assert (x582 x204))
(assert (x582 x87))
(assert (= (x126 1461501637330902918203684832716283019655932542975) 0))
(assert (x582 x586))
(assert (= (x126 57896044618658097711785492504343953926634992332820282019728792003956564819967) 0))
(assert (x582 x243))
(assert (x582 x541))
(assert (x436 x517))
(assert (x582 x522))
(assert (x582 x217))
(assert (= x242 (or x231 x297)))
(assert (x582 x241))
(assert (=> (= 0 x261) (= (div x261 x261) 0)))
(assert (x582 x82))
(assert (x582 x133))
(assert (x582 x526))
(assert (x582 x100))
(assert (x582 x106))
(assert (x582 x283))
(assert (x582 x44))
(assert (= (x126 x257) (x126 (+ 2 x257))))
(assert (= (and x336 x356) x501))
(assert (x582 x383))
(assert (= (x126 904625697166532776746648320380374280103671755200316906558262375061821325312) 0))
(assert (x582 x71))
(assert (= (x126 604800) 0))
(assert (x582 x31))
(assert (x582 x175))
(assert (not (x86 (x534 64 x425 2))))
(assert (=> (= 0 x409) (= (div x409 x409) 0)))
(assert (x582 x260))
(assert (x582 x56))
(assert (x86 115792089237316195423570985008687907853269984665640564039457584007913129639934))
(assert (x582 x330))
(assert (x582 x35))
(assert (x582 x280))
(assert (x582 x537))
(assert (= (=> (and (= (= x471 0) x99) (or (and (and (= x425 x238) (= x332 x166) (= 128 x311)) x99) (and (not x99) (and (= (x534 64 x527 2) x540) (= (+ 1 x425) x238) (>= x25 1) (= (+ x425 1) x496) (= false x151) (= x544 (+ 2 x277)) (= x214 (x497 x549)) (= x416 (x266 (+ x166 x41))) (= x516 (x259 (- x223 x166))) (= x139 (+ x292 1)) (= x173 false) (not (> x516 x223)) (= x277 (x534 64 x425 2)) (= x332 x50) (= false x306) (= (x519 x179) x25) (= x155 (x266 (+ x518 x249))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x425) (= 128 x122) (= x223 (x63 128)) (= x50 (x266 (+ x166 x41))) (= x396 x251) (= 50942633119752846454219349998365661925608737367104304655302372697894809501696 x164) (= x549 (x534 64 x251 0)) (= x401 36) (= x71 x396) (= x176 false) (= (+ 1 x425) x527) (= x226 (x534 64 x425 2)) (= 160 x311) (>= 127 x191) (= (x88 x139) x41) (not (> x518 x155)) (not (> x166 x416)) (= 1889567281 x410) (= x420 (+ x226 1)) (= (x534 64 x425 2) x292) (<= x191 127))))) x128) x304))
(assert (x582 x211))
(assert (< 10000 (x534 64 x219 1)))
(assert (= (x39 (x534 64 x35 3)) x35))
(assert (x436 x109))
(assert (x582 x178))
(assert (< (x534 64 x142 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x582 x315))
(assert (not (x86 (x534 64 x153 0))))
(assert (= x200 (and x37 (not x193))))
(assert (= (x141 (x534 64 x142 0)) 0))
(assert (x582 x599))
(assert (x582 x129))
(assert (x582 x418))
(assert (x582 x19))
(assert (x582 x380))
(assert (x582 x452))
(assert (x582 x332))
(assert (= x219 (x39 (x534 64 x219 1))))
(assert (= 0 (x126 4294967295)))
(assert (x582 x45))
(assert (x436 x241))
(assert (x582 x451))
(assert (= (x39 (x534 64 x153 0)) x153))
(assert (= (=> (and (<= x95 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= x100 (x259 (- x56 x177))) (= (x29 x233) x56) (= x207 (x259 (- x319 x491))) (= x579 (not (> x238 x365))) (not (< x319 x207)) (not (< x56 x100)) (= (+ 1 x95) x365) (= x319 (x309 x445))) (and x579 (=> (and (= x465 x68) (= x196 x365) (= x177 x326)) x543))) x209))
(assert (x582 x249))
(assert (x582 x214))
(assert (x582 x24))
(assert (= 64 (x348 (x534 64 x238 2))))
(assert (x582 x158))
(assert (x582 x596))
(assert (x582 x245))
(assert (x582 x547))
(assert (x436 x274))
(assert (=> (= x557 0) (= 0 (div x557 x557))))
(assert (x582 x196))
(assert (= x11 (=> (and (= x409 x150) (= x517 (ite (= x523 1) 1 0)) (= x536 1) (= (ite (= 0 x409) 1 0) x468) (= (x169 x468 x517) x536) (= x523 (div x409 x409))) x168)))
(assert (x86 1461501637330902918203684832716283019655932542975))
(assert (x582 x27))
(assert (=> (>= 10000 x238) (= 0 (x126 x238))))
(assert (x582 x341))
(assert (x582 x521))
(assert (= (x39 (x534 64 x142 0)) x142))
(assert (x582 x454))
(assert (= x297 (and x566 x174)))
(assert (x582 x512))
(assert (x436 x386))
(assert (= (x126 (x534 64 x35 3)) (x534 64 x35 3)))
(assert (< (x534 64 x251 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x582 x358))
(assert (=> (>= 10000 x170) (= (x126 x170) 0)))
(assert (x582 x102))
(assert (= x251 (x39 (x534 64 x251 0))))
(assert (x582 x474))
(assert (x582 x300))
(assert (x582 x66))
(assert (= x463 (and x48 x528)))
(assert (x582 x366))
(assert (x582 x396))
(assert (= (and x347 x499) x460))
(assert (x582 x462))
(assert (< 10000 (x534 64 x95 2)))
(assert (x582 x469))
(assert (x582 x64))
(assert (x582 x237))
(assert (x582 x496))
(assert (x16 x386 x283))
(assert (not (x86 (x534 64 x251 0))))
(assert (x582 x443))
(assert (x582 x548))
(assert (x582 x255))
(assert (x582 x386))
(assert (= (x126 (+ x286 1)) (x126 x286)))
(assert (= 0 (x126 69185743945351922119161689019356421013382125510479073735908722411855439477079)))
(assert (= (x126 x253) (x126 (+ x253 2))))
(assert (x582 x95))
(assert (x582 x17))
(assert (= (x126 76450787359836037641860180984291677749980919077056822294353438043884394381312) 0))
(assert (x531 x301 2))
(assert (x98 x301))
(assert (> (x534 64 x238 2) 10000))
(assert (x582 x530))
(assert (x582 x22))
(assert (x582 x394))
(assert (x582 x353))
(assert (= (and (not x528) x48) x325))
(assert (x582 x479))
(assert (= (x126 (x534 64 x170 0)) (x534 64 x170 0)))
(assert (=> (>= 10000 x153) (= (x126 x153) 0)))
(assert (= (x348 (x534 64 x142 0)) 64))
(assert (x582 x222))
(assert (x582 x250))
(assert (= (x126 (+ 1 x498)) (x126 x498)))
(assert (x582 x472))
(assert (= (x534 64 x527 2) (x126 (x534 64 x527 2))))
(assert (= (x141 (x534 64 x95 2)) 2))
(assert (not (x86 (x534 64 x142 0))))
(assert (x582 x108))
(assert (x582 x349))
(assert (= x231 (or x288 x198)))
(assert (x582 x3))
(assert (x582 x68))
(assert (x582 x239))
(assert (x582 x546))
(assert (x582 x155))
(assert (x582 x6))
(assert (= x551 (and x281 (not x43))))
(assert (x582 x51))
(assert (x582 x96))
(assert (x582 x407))
(assert (= x216 (and x281 x43)))
(assert (= x65 (=> (and (and (= x19 31536000) (= (x259 (- x31 (mod (ite (< x488 x475) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x466) (= x380 126144000) (= x522 (div x557 x557)) (= (ite (= 0 x557) 1 0) x464) (= (mod (* x402 126144000) 115792089237316195423570985008687907853269984665640564039457584007913129639935) x488) (= (ite (= x522 1) 1 0) x303) (= x432 (= x466 0)) (= (x169 x464 x303) x273) (= x187 (x289 x28)) (= (+ 1 x498) x600) (= (x321 x498) x402) (= (x388 x600) x565) (= (x259 (- x488 x475)) x31) (= 1 x273) (= (mod (* 126144000 x402) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x475)) (or (and (and (= (x266 (+ x340 x203)) x371) (= x340 (div x475 128)) (= x103 (mod (* 69185743945351922119161689019356421013382125510479073735908722411855439477079 x371) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x466 904625697166532776746648320380374280103671755200316906558262375061821325312) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x203) (= x103 x261) (>= 31535999 x466)) (not x432)) (and (and (= (div x475 31536000) x64) (= x261 x64)) x432))) x42)))
(assert (x16 x419 x241))
(assert (x582 x441))
(assert (x582 x412))
(assert (x86 76450787359836037641860180984291677749980919077056822294353438043884394381312))
(assert (x582 x414))
(assert (x582 x62))
(assert (= 0 (x141 (x534 64 x170 0))))
(assert (x582 x587))
(assert (x86 3712381028))
(assert (x582 x256))
(assert (x582 x229))
(assert (= x37 (or x145 x398)))
(assert (x582 x194))
(assert (= (x126 x123) (x126 (+ 3 x123))))
(assert (= x473 (=> (and (not (< x134 x541)) (= x566 (> x482 0)) (= (x259 (- x134 x175)) x541) (= x482 (x259 (- x196 x238))) (= x134 (x289 x28))) (and (=> (and (= x68 x129) x566) x439) (=> (and (and (and (= x498 (+ x123 1)) (= x474 (x259 (- x554 x532))) (= x377 31536000) (not (< x178 x459)) (= x192 (x321 x498)) (= x459 (x259 (- x178 x105))) (= x532 (mod (* x459 x192) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x55 (x259 (- x474 (mod (ite (> x532 x554) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x265 x578) x105) (= (= x55 0) x528) (= (+ x28 1) x578) (= x554 (mod (* x192 x459) 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (x534 64 x238 2) x257)) (or (and (and (= x448 (x266 (+ x530 x89))) (= x524 (mod (* x192 x459) 31536000)) (= (div x295 128) x530) (>= 31535999 x55) (= (x259 (- x532 x524)) x295) (= (x259 (- x55 (mod (ite (> x524 x532) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x228) (= (mod (* x228 904625697166532776746648320380374280103671755200316906558262375061821325312) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x89) (= x557 x452) (= (mod (* x448 69185743945351922119161689019356421013382125510479073735908722411855439477079) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x452)) (not x528)) (and x528 (and (= (div x532 31536000) x237) (= x557 x237))))) (not x566)) x65)))))
(assert (x582 x468))
(assert (=> (= 0 x113) (= 0 (div x197 x113))))
(assert (x582 x49))
(assert (x86 31536000))
(assert (= x430 (and x592 x591)))
(assert (x582 x74))
(assert (x582 x563))
(assert (= (x126 (+ x123 6)) (x126 x123)))
(assert (x582 x484))
(assert (= (and x137 (not x432)) x444))
(assert (x582 x8))
(assert (= (x126 50942633119752846454219349998365661925608737367104304655302372697894809501696) 0))
(assert (x582 x310))
(assert (x582 x308))
(assert (= x543 (=> (and (= (< 0 x326) x193) (or (and x193 (and (= x564 (x135 128)) (= (x266 (+ 64 x26)) x87) (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 x344) (<= x311 115792089237316195423570985008687907853269984665640564039457584007913129639934) (<= 1 x82) (<= 1 x170) (= x44 (x259 (- x332 x326))) (<= x311 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= false x514) (= false x433) (= x156 x244) (= (x534 64 x251 0) x316) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x311)) (= x552 (x534 64 x170 0)) (= x170 x315) (= x212 2835717307) (= false x456) (= 68 x476) (= (x497 x264) x548) (> x222 x311) (<= x576 127) (= (x519 x179) x82) (not (= x311 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (= (x266 (+ x311 4)) x26) (= x156 x326) (= x376 (x266 (+ x26 32))) (= (x259 (- x332 x326)) x383) (= (x259 (- x548 x326)) x230) (= x472 (x266 (+ x62 x326))) (= x315 x590) (= (x558 x552) x62) (= x170 (x127 x123)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x311)) (<= x576 127) (= 1 x450) (<= x311 115792089237316195423570985008687907853269984665640564039457584007913129639934) (not (> x383 x332)) (= 68 x583) (= (x259 (- x87 x311)) x583) (= (x534 64 x251 0) x264) (= x91 false) (>= 1461501637330902918203684832716283019655932542975 x170) (not (> x326 x548)) (= x222 (x266 (+ 32 x311))))) (not x193))) x473)))
(assert (x582 x516))
(assert (= x288 (and x124 (not x515))))
(assert (x582 x355))
(assert (not (x86 (x534 64 x219 1))))
(assert (x582 x140))
(assert (x582 x186))
(assert (= x10 (and (not x99) x503)))
(assert (< (x534 64 x95 2) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x582 x392))
(assert (x582 x340))
(assert (= (=> (and (or (and (not x592) (= x14 x594)) (and (and (not (< x22 x323)) (= (x259 (- x22 x367)) x323) (= x14 x323)) x592)) (and (= x458 (div x130 x130)) (= 1 x547) (= (< x22 x256) x592) (= (ite (= 1 x458) 1 0) x556) (= (x266 (+ x130 x194)) x22) (= x256 (x266 (+ x594 x367))) (= (x169 x109 x556) x547) (not (> x594 x256)) (= (ite (= 0 x130) 1 0) x109) (not (> x130 x22)))) x218) x440))
(assert (= (or x325 x463) x137))
(assert (x436 x283))
(assert (x500 x443))
(assert (=> (= x130 0) (= 0 (div x130 x130))))
(assert (x582 x109))
(assert (x582 x524))
(assert (x582 x402))
(assert (= (x348 (x534 64 x153 0)) 64))
(assert (= (=> (and (not (< x478 x370)) (= (x266 (+ x479 x370)) x478) (= x8 (x266 (+ x479 x68))) (= x129 x568) (not (> x68 x8)) (not (> x186 x586)) (= x186 (x289 x28)) (= (x266 (+ x68 x479)) x568) (= (x545 x381) x370) (= (+ x257 2) x381) (= (x266 (+ x479 x186)) x586)) x439) x598))
(assert (x582 x89))
(assert (x582 x365))
(assert (x86 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x582 x179))
(assert (x582 x203))
(assert (x582 x532))
(assert (= (or x307 x351) x145))
(assert (> (x534 64 x425 2) 10000))
(assert (= x48 (and x174 (not x566))))
(assert (=> (>= 10000 x527) (= (x126 x527) 0)))
(assert (= (x126 x292) (x126 (+ x292 1))))
(assert (= (=> (and (and (= x152 false) (not (= x251 x179)) (<= 0 x146) x480 (= false x199) x352 (>= 1461501637330902918203684832716283019655932542975 x251) (<= x490 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x580) (not (= x179 x219)) (= x79 x219) (= x480 (< 0 (x519 x219))) (<= 1 x179) (= x15 3712381028) (= x327 x535) (<= 1 x133) (<= 0 x581) (>= 1461501637330902918203684832716283019655932542975 x327) (= (< 0 (x519 x179)) x352) (= x251 x133) (<= x581 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x20 (> (x519 x251) 0)) (<= 1 x251) (<= x179 1461501637330902918203684832716283019655932542975) (<= 1 x219) (>= x327 0) x20 (= 0 x585) (= true x248) (not (= x251 x219)) (= 0 x546) (= x395 false) (= 36 x454) (>= 4294967295 x146) (>= x490 0) (= false x363) (>= 1461501637330902918203684832716283019655932542975 x219) (= 1 x73) (<= x133 1461501637330902918203684832716283019655932542975)) (and (and (= (x4 4) x171) (<= x240 1461501637330902918203684832716283019655932542975) (= x255 (x519 x179)) (= x270 x405) (= false x84) (= false x595) (>= x467 0) (>= x140 36) (<= 0 x54) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x314) (<= x382 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= x467 1461501637330902918203684832716283019655932542975) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x140) (= (x534 64 x142 0) x12) (>= x240 0) (= false x372) (= x171 x341) (<= x45 127) (<= x47 1461501637330902918203684832716283019655932542975) (>= 126144000 x171) (= x189 false) (= false x505) (<= 0 x314) (= (x497 x12) x270) (= x302 x449) (>= x382 0) (<= 0 x40) (<= x40 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x379 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x54) (= 1889567281 x406) (>= x411 0) (>= x296 0) (= x142 x414) (= false x115) (>= x47 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x411) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x296) (= x449 (x4 0)) (= x535 x142) (<= x45 127) (>= x255 1) (= x426 false)) (and (and (= x382 x178) (and (and (>= x287 1) (= (x210 x219) x217) (>= x320 1) (= (x542 x507) x81) (= x320 (x519 x133)) (= x67 3712381028) (<= x437 127) (= x346 false) (= x341 x375) (= x97 false) (= x375 x72) (= x108 128) (= false x75) (>= 127 x260) (= x163 3712381028) (>= 1461501637330902918203684832716283019655932542975 x6) (= (x393 x324) x512) (<= 1 x81) (= (x519 x219) x76) (= 36 x424) (not (< x160 x512)) (= (x534 64 x425 2) x324) (= x6 x349) (<= 1 x101) (= x23 (x529 x1)) (>= 255 x81) (= x205 false) (= (x313 x219) x35) (= x33 100085594523021865991783642386441445976377394710335636839107931191495830274048) (= (x534 64 x219 1) x397) (= (x534 64 x35 3) x507) (= (+ 5 x397) x299) (= x72 x446) (<= 1 x76) (= x287 (x519 x251)) (= (x266 (+ 604800 x512)) x160) (= x101 (x359 x299)) (>= 127 x437) (= (not (> x160 x178)) x43) (>= 127 x260) (= x447 x217) (= x240 x1)) (or (and x43 (= x471 1)) (and (not x43) (= x471 (ite x43 1 0)))))) (= x349 x240)))) x304) x83))
(assert (x582 x269))
(assert (x582 x207))
(assert (x582 x447))
(assert (x582 x459))
(assert (x86 126144000))
(assert (not (x86 (x534 64 x35 3))))
(assert (x436 x468))
(assert (x582 x360))
(assert (=> (>= 10000 x219) (= (x126 x219) 0)))
(assert (x436 x419))
(assert (x582 x212))
(assert (x582 x230))
(assert (= (or x493 x501) x70))
(assert (x582 x223))
(assert (x582 x344))
(assert (= (and x432 x137) x225))
(assert (x582 x228))
(assert (= (x534 64 x142 0) (x126 (x534 64 x142 0))))
(assert (x582 x219))
(assert (= (x126 126144000) 0))
(assert (x582 x252))
(assert (x582 x171))
(assert (x582 x343))
(assert (x582 x21))
(assert (= (x126 115792089237316195423570985008687907853269984665640564039457584007913129639934) 0))
(assert (x582 x197))
(assert (x582 x502))
(assert (x582 x416))
(assert (x582 x419))
(assert (x16 x464 x303))
(assert (x582 x206))
(assert (= 0 (x126 31536000)))
(assert (x582 x337))
(assert (= 0 (x141 (x534 64 x153 0))))
(assert (= (x39 (x534 64 x170 0)) x170))
(assert (x582 x506))
(assert (x582 x311))
(assert (= (or x477 x460) x195))
(assert (x582 x594))
(assert (x582 x375))
(assert (= x42 (=> (and (or (and (= x557 x479) (not x515)) (and x515 (and (not (< x279 x384)) (= x384 x479) (= x384 (x259 (- x279 x187)))))) (and (not (> x261 x279)) (= (ite (= x374 1) 1 0) x241) (= x49 1) (= (ite (= 0 x261) 1 0) x419) (= x49 (x169 x419 x241)) (not (< x502 x557)) (= x374 (div x261 x261)) (= x502 (x266 (+ x187 x557))) (= x515 (> x502 x279)) (= (x266 (+ x261 x565)) x279))) x598)))
(assert (> (x534 64 x35 3) 10000))
(assert (x582 x319))
(assert (= (x39 (x534 64 x425 2)) x425))
(assert (x86 904625697166532776746648320380374280103671755200316906558262375061821325312))
(assert (> (x534 64 x142 0) 10000))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x534 64 x425 2)))
(assert (= (x126 x253) (x126 (+ 1 x253))))
(assert (=> (<= x1 10000) (= 0 (x126 x1))))
(assert (x86 4294967295))
(assert (x582 x556))
(assert (x582 x104))
(assert (x582 x536))
(assert (= x351 (and (not x550) x294)))
(assert (= (x126 1889567281) 0))
(assert (x582 x295))
(assert (x582 x562))
(assert (x582 x424))
(assert (x582 x326))
(assert (x582 x345))
(assert (x582 x377))
(assert (x582 x221))
(assert (x582 x489))
(assert (x582 x470))
(assert (x582 x391))
(assert (x582 x449))
(assert (x582 x1))
(assert (= x95 (x39 (x534 64 x95 2))))
(assert (= 64 (x348 (x534 64 x35 3))))
(assert (x582 x446))
(assert (x582 x560))
(assert (= x128 (=> (and (= (x593 x387) x95) (= (+ x123 6) x387) (= x247 (< x95 x238)) (= (x481 x28) x175) (= x28 (+ 3 x123)) (= x253 (x534 64 x95 2)) (= x123 (x534 64 x219 1))) (and (=> (and (and (and (= x271 (mod (* x391 x427) 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (not (> x125 x453)) (= (+ 1 x28) x107) (= (x259 (- x271 x559)) x329) (= x74 (x455 x107)) (= x336 (= x589 0)) (= (x259 (- x453 x74)) x427) (= (+ 1 x123) x286) (= (x259 (- x329 (mod (ite (> x559 x271) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x589) (= 31536000 x434) (not (> x427 x453)) (= (x321 x286) x391) (= x559 (mod (* x391 x427) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x125 (x487 x253)) (= x453 (x266 (+ 604800 x125)))) (or (and x336 (and (= (div x559 31536000) x243) (= x594 x243))) (and (and (= (x259 (- x559 x511)) x162) (= x366 (x266 (+ x51 x132))) (= x494 (x259 (- x589 (mod (ite (> x511 x559) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= x206 (mod (* x366 69185743945351922119161689019356421013382125510479073735908722411855439477079) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x427 x391) 31536000) x511) (<= x589 31535999) (= x132 (div x162 128)) (= x206 x594) (= (mod (* x494 904625697166532776746648320380374280103671755200316906558262375061821325312) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x51)) (not x336)))) x247) x318) (=> (and (and (= x68 x518) (= x326 0) (= x95 x196)) (not x247)) x543)))))
(assert (x582 x191))
(assert (< 10000 (x534 64 x251 0)))
(assert (= 0 (x126 100085594523021865991783642386441445976377394710335636839107931191495830274048)))
(assert (x582 x161))
(assert (x582 x273))
(assert (x582 x329))
(assert (x582 x312))
(assert (x582 x590))
(assert (x582 x482))
(assert (= (x534 64 x238 2) (x126 (x534 64 x238 2))))
(assert (x582 x517))
(assert (x582 x2))
(assert (x582 x488))
(assert (x582 x404))
(assert (= (x126 (+ x123 5)) (x126 x123)))
(assert (x582 x153))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x534 64 x527 2)))
(assert (x86 31535999))
(assert (not x83))
(assert (= (and x483 x70) x333))
(assert (= (and (not x499) x347) x477))
(assert (not (x86 (x534 64 x527 2))))
(assert (x582 x81))
(assert (x582 x458))
(assert (=> (= 0 x113) (= (div x345 x113) 0)))
(assert (x582 x52))
(assert (x582 x55))
(assert (x582 x367))
(assert (x582 x583))
(assert (x582 x322))
(assert (=> (= 0 x594) (= 0 (div x594 x594))))
(assert (x582 x163))
(assert (x436 x556))
(assert (x582 x328))
(assert (x582 x192))
(assert (x582 x119))
(assert (= (x126 (+ 2 x277)) (x126 x277)))
(assert (x582 x557))
(assert (< 10000 (x534 64 x527 2)))
(assert (> (x534 64 x170 0) 10000))
(assert (x86 69185743945351922119161689019356421013382125510479073735908722411855439477079))
(assert (x582 x491))
(assert (= x307 (and x294 x550)))
(assert (= 3 (x141 (x534 64 x35 3))))
(assert (x582 x274))
(assert (x582 x157))
(assert (x582 x478))
(assert (= (and x242 x422) x347))
(assert (x582 x50))
(assert (x582 x401))
(assert (x582 x261))
(assert (not (x86 (x534 64 x170 0))))
(assert (x582 x301))
(assert (x582 x72))
(assert (x582 x492))
(assert (x582 x166))
(assert (=> (<= x142 10000) (= 0 (x126 x142))))
(assert (x582 x564))
(assert (x582 x215))
(assert (x582 x134))
(assert (x436 x303))
(assert (x582 x156))
(assert (x582 x423))
(assert (x582 x302))
(assert (x582 x177))
(assert (x582 x369))
(assert (x582 x471))
(assert (x436 x464))
(assert (x582 x150))
(assert (x582 x453))
(assert (x582 x270))
(assert (= x263 (and x242 (not x422))))
(assert (x582 x554))
(assert (x582 x589))
(assert (< (x534 64 x219 1) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x582 x580))
(assert (x582 x23))
(assert (x582 x323))
(assert (x582 x160))
(assert (= (and x99 x503) x435))
(assert (= x294 (or x504 x430)))
(assert (x582 x384))
(assert (= x439 (=> (and (= (+ 5 x123) x290) (not (> x178 x239)) (not (< x239 x21)) (= x239 (x266 (+ x21 x171))) (= x21 (x359 x290)) (= x422 (< 0 x171)) (= x172 0)) (and (=> (and (not x422) (= x150 0)) x168) (=> (and x422 (and (and (= x560 31536000) (= x96 (x321 x120)) (= (x259 (- x85 x506)) x204) (= x85 (mod (* x171 x96) 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= x499 (= 0 x300)) (= x120 (+ 1 x123)) (= x300 (x259 (- x204 (mod (ite (< x85 x506) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= x506 (mod (* x96 x171) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (or (and (not x499) (and (= (x259 (- x506 x563)) x227) (= x220 (x259 (- x300 (mod (ite (< x506 x563) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (mod (* x268 69185743945351922119161689019356421013382125510479073735908722411855439477079) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x102) (>= 31535999 x300) (= (mod (* 904625697166532776746648320380374280103671755200316906558262375061821325312 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x221) (= (x266 (+ x221 x284)) x268) (= x409 x102) (= x563 (mod (* x171 x96) 31536000)) (= (div x227 128) x284))) (and (and (= x66 x409) (= x66 (div x506 31536000))) x499)))) x11)))))
(assert (x582 x555))
(assert (=> (>= 10000 x95) (= (x126 x95) 0)))
(assert (= (and (not x247) x597) x398))
(assert (x582 x144))
(assert (= (x126 (+ 5 x397)) (x126 x397)))
(assert (x582 x527))
(assert (< 10000 (x534 64 x153 0)))
(assert (not (x86 (x534 64 x95 2))))
(assert (x582 x271))
(assert (= x124 (or x225 x444)))
(assert (x582 x164))
(assert (= (x126 2835717307) 0))
(assert (x582 x26))
(assert (x582 x409))
(assert (= 64 (x348 (x534 64 x219 1))))
(check-sat)
(exit)
