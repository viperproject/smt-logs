(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Certora
Generated on: 2024-04-10
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x300 () Int)
(declare-fun x306 () Int)
(declare-fun x355 () Int)
(declare-fun x489 () Int)
(declare-fun x429 () Int)
(declare-fun x53 () Int)
(declare-fun x467 () Bool)
(declare-fun x10 () Int)
(declare-fun x405 () Int)
(declare-fun x256 (Int Int) Int)
(declare-fun x227 () Bool)
(declare-fun x452 () Int)
(declare-fun x45 () Bool)
(declare-fun x85 () Int)
(declare-fun x210 () Bool)
(declare-fun x191 () Int)
(declare-fun x342 () Int)
(declare-fun x238 () Int)
(declare-fun x110 () Bool)
(declare-fun x318 () Int)
(declare-fun x211 () Int)
(declare-fun x397 () Int)
(declare-fun x485 () Int)
(declare-fun x138 () Bool)
(declare-fun x19 () Int)
(declare-fun x509 () Int)
(declare-fun x332 () Bool)
(declare-fun x175 () Int)
(declare-fun x36 () Bool)
(declare-fun x347 () Int)
(declare-fun x251 () Int)
(declare-fun x421 () Int)
(declare-fun x470 () Int)
(declare-fun x398 () Int)
(declare-fun x282 () Int)
(declare-fun x200 () Bool)
(declare-fun x368 () Int)
(declare-fun x176 () Int)
(declare-fun x554 () Int)
(declare-fun x168 () Int)
(declare-fun x559 () Bool)
(declare-fun x79 () Bool)
(declare-fun x102 () Int)
(declare-fun x73 (Int Int) Int)
(declare-fun x285 () Int)
(declare-fun x224 () Int)
(declare-fun x562 (Int) Int)
(declare-fun x541 () Bool)
(declare-fun x219 () Bool)
(declare-fun x294 () Int)
(declare-fun x374 () Int)
(declare-fun x430 () Int)
(declare-fun x464 () Int)
(declare-fun x307 () Int)
(declare-fun x55 () Int)
(declare-fun x113 () Bool)
(declare-fun x252 () Int)
(declare-fun x40 () Int)
(declare-fun x263 () Int)
(declare-fun x65 () Int)
(declare-fun x366 () Int)
(declare-fun x337 (Int) Int)
(declare-fun x297 () Int)
(declare-fun x279 () Int)
(declare-fun x508 () Bool)
(declare-fun x408 () Bool)
(declare-fun x26 () Int)
(declare-fun x50 () Int)
(declare-fun x146 () Int)
(declare-fun x334 () Bool)
(declare-fun x321 () Int)
(declare-fun x431 () Int)
(declare-fun x209 () Bool)
(declare-fun x357 () Int)
(declare-fun x441 () Int)
(declare-fun x396 () Int)
(declare-fun x288 () Bool)
(declare-fun x214 () Bool)
(declare-fun x373 () Int)
(declare-fun x132 () Int)
(declare-fun x90 () Bool)
(declare-fun x302 () Int)
(declare-fun x59 () Int)
(declare-fun x364 () Bool)
(declare-fun x308 () Bool)
(declare-fun x526 () Int)
(declare-fun x120 () Int)
(declare-fun x169 () Bool)
(declare-fun x198 () Int)
(declare-fun x155 () Bool)
(declare-fun x281 () Int)
(declare-fun x284 () Bool)
(declare-fun x339 () Int)
(declare-fun x519 () Bool)
(declare-fun x570 () Int)
(declare-fun x154 () Int)
(declare-fun x180 () Int)
(declare-fun x275 () Bool)
(declare-fun x77 () Int)
(declare-fun x271 () Int)
(declare-fun x365 () Bool)
(declare-fun x258 () Int)
(declare-fun x384 () Bool)
(declare-fun x171 () Int)
(declare-fun x317 () Int)
(declare-fun x469 () Int)
(declare-fun x93 () Int)
(declare-fun x316 () Int)
(declare-fun x581 () Bool)
(declare-fun x477 () Int)
(declare-fun x287 () Int)
(declare-fun x432 () Int)
(declare-fun x63 () Bool)
(declare-fun x543 () Int)
(declare-fun x345 () Bool)
(declare-fun x248 () Int)
(declare-fun x160 () Int)
(declare-fun x386 () Int)
(declare-fun x22 () Bool)
(declare-fun x346 () Int)
(declare-fun x514 () Bool)
(declare-fun x563 () Int)
(declare-fun x131 () Int)
(declare-fun x20 () Int)
(declare-fun x148 () Int)
(declare-fun x445 () Bool)
(declare-fun x413 () Int)
(declare-fun x108 (Int) Int)
(declare-fun x506 () Int)
(declare-fun x183 () Bool)
(declare-fun x491 () Int)
(declare-fun x539 () Int)
(declare-fun x528 () Int)
(declare-fun x57 () Int)
(declare-fun x479 () Int)
(declare-fun x471 () Int)
(declare-fun x207 () Int)
(declare-fun x480 () Bool)
(declare-fun x291 () Int)
(declare-fun x270 () Int)
(declare-fun x463 () Int)
(declare-fun x392 () Bool)
(declare-fun x262 () Int)
(declare-fun x561 () Int)
(declare-fun x569 () Int)
(declare-fun x215 () Bool)
(declare-fun x69 () Int)
(declare-fun x462 (Int) Int)
(declare-fun x371 () Int)
(declare-fun x206 () Int)
(declare-fun x129 (Int) Int)
(declare-fun x115 () Bool)
(declare-fun x150 () Bool)
(declare-fun x41 (Int) Int)
(declare-fun x232 () Int)
(declare-fun x91 () Bool)
(declare-fun x244 (Int) Int)
(declare-fun x141 () Bool)
(declare-fun x465 () Int)
(declare-fun x340 () Int)
(declare-fun x86 () Bool)
(declare-fun x381 () Int)
(declare-fun x43 () Bool)
(declare-fun x492 () Int)
(declare-fun x422 () Int)
(declare-fun x117 () Bool)
(declare-fun x205 () Int)
(declare-fun x444 () Int)
(declare-fun x383 () Int)
(declare-fun x153 () Int)
(declare-fun x70 () Int)
(declare-fun x193 () Int)
(declare-fun x112 () Int)
(declare-fun x412 () Int)
(declare-fun x126 (Int) Int)
(declare-fun x203 () Bool)
(declare-fun x450 () Bool)
(declare-fun x435 () Int)
(declare-fun x29 () Int)
(declare-fun x99 () Int)
(declare-fun x557 () Bool)
(declare-fun x537 () Int)
(declare-fun x574 () Int)
(declare-fun x66 (Int) Int)
(declare-fun x304 () Int)
(declare-fun x266 () Int)
(declare-fun x400 () Int)
(declare-fun x135 () Bool)
(declare-fun x483 () Int)
(declare-fun x125 () Bool)
(declare-fun x2 () Int)
(declare-fun x486 (Int Int Int) Int)
(declare-fun x500 () Int)
(declare-fun x493 () Int)
(declare-fun x173 () Bool)
(declare-fun x170 () Int)
(declare-fun x274 () Int)
(declare-fun x39 () Int)
(declare-fun x140 () Int)
(declare-fun x420 (Int) Int)
(declare-fun x447 () Int)
(declare-fun x456 () Int)
(declare-fun x8 () Bool)
(declare-fun x104 () Bool)
(declare-fun x449 () Bool)
(declare-fun x319 () Int)
(declare-fun x181 () Int)
(declare-fun x236 () Int)
(declare-fun x89 () Int)
(declare-fun x133 () Bool)
(declare-fun x257 () Int)
(declare-fun x7 (Int Int) Int)
(declare-fun x64 () Int)
(declare-fun x241 () Int)
(declare-fun x361 () Int)
(declare-fun x385 () Int)
(declare-fun x35 () Int)
(declare-fun x439 () Int)
(declare-fun x468 (Int) Int)
(declare-fun x106 () Bool)
(declare-fun x60 () Bool)
(declare-fun x555 (Int) Int)
(declare-fun x459 () Int)
(declare-fun x572 () Int)
(declare-fun x531 (Int Int) Int)
(declare-fun x520 () Bool)
(declare-fun x552 (Int) Int)
(declare-fun x58 () Int)
(declare-fun x250 () Int)
(declare-fun x76 () Bool)
(declare-fun x145 () Bool)
(declare-fun x49 () Int)
(declare-fun x144 () Int)
(declare-fun x157 () Int)
(declare-fun x451 () Int)
(declare-fun x122 () Int)
(declare-fun x329 () Int)
(declare-fun x243 () Int)
(declare-fun x546 () Int)
(declare-fun x196 () Int)
(declare-fun x542 () Int)
(declare-fun x187 () Bool)
(declare-fun x16 () Bool)
(declare-fun x440 () Bool)
(declare-fun x295 () Int)
(declare-fun x33 () Bool)
(declare-fun x121 () Int)
(declare-fun x354 () Int)
(declare-fun x538 () Bool)
(declare-fun x301 () Int)
(declare-fun x162 () Int)
(declare-fun x567 () Int)
(declare-fun x84 () Int)
(declare-fun x289 () Int)
(declare-fun x28 () Bool)
(declare-fun x476 () Bool)
(declare-fun x512 () Int)
(declare-fun x265 () Bool)
(declare-fun x293 () Int)
(declare-fun x513 () Int)
(declare-fun x487 () Int)
(declare-fun x111 () Int)
(declare-fun x571 () Int)
(declare-fun x426 () Int)
(declare-fun x565 () Int)
(declare-fun x264 () Int)
(declare-fun x234 () Int)
(declare-fun x298 () Int)
(declare-fun x127 () Int)
(declare-fun x136 () Int)
(declare-fun x510 () Int)
(declare-fun x24 () Int)
(declare-fun x343 () Int)
(declare-fun x388 () Bool)
(declare-fun x97 () Int)
(declare-fun x27 () Int)
(declare-fun x231 () Int)
(declare-fun x54 () Bool)
(declare-fun x62 (Int) Int)
(declare-fun x94 () Int)
(declare-fun x199 () Int)
(declare-fun x103 () Int)
(declare-fun x9 () Int)
(declare-fun x217 () Int)
(declare-fun x391 () Int)
(declare-fun x152 () Int)
(declare-fun x577 () Int)
(declare-fun x240 () Int)
(declare-fun x242 () Bool)
(declare-fun x44 () Int)
(declare-fun x123 () Bool)
(declare-fun x100 () Int)
(declare-fun x37 () Int)
(declare-fun x239 () Int)
(declare-fun x161 () Int)
(declare-fun x336 () Int)
(declare-fun x158 () Int)
(declare-fun x437 () Int)
(declare-fun x457 () Int)
(declare-fun x212 () Bool)
(declare-fun x362 () Int)
(declare-fun x149 () Int)
(declare-fun x14 (Int) Int)
(declare-fun x403 () Int)
(declare-fun x518 () Int)
(declare-fun x455 () Bool)
(declare-fun x32 () Bool)
(declare-fun x360 () Bool)
(declare-fun x433 () Bool)
(declare-fun x128 () Int)
(declare-fun x124 () Int)
(declare-fun x268 () Int)
(declare-fun x47 () Bool)
(declare-fun x443 (Int) Int)
(declare-fun x533 () Bool)
(declare-fun x488 () Int)
(declare-fun x303 () Bool)
(declare-fun x335 () Bool)
(declare-fun x434 () Int)
(declare-fun x107 () Int)
(declare-fun x423 () Int)
(declare-fun x185 () Int)
(declare-fun x190 () Int)
(declare-fun x414 () Bool)
(declare-fun x182 () Bool)
(declare-fun x202 () Bool)
(declare-fun x515 () Int)
(declare-fun x309 () Int)
(declare-fun x178 () Bool)
(declare-fun x114 () Bool)
(declare-fun x278 () Int)
(declare-fun x192 () Int)
(declare-fun x401 () Bool)
(declare-fun x269 () Bool)
(declare-fun x576 () Bool)
(declare-fun x407 (Int) Int)
(declare-fun x237 (Int) Int)
(declare-fun x547 () Int)
(declare-fun x358 () Int)
(declare-fun x356 () Int)
(declare-fun x229 () Int)
(declare-fun x399 () Int)
(declare-fun x436 () Int)
(declare-fun x254 (Int) Int)
(declare-fun x376 () Bool)
(declare-fun x272 () Bool)
(declare-fun x134 () Int)
(declare-fun x189 () Bool)
(declare-fun x165 () Int)
(declare-fun x545 () Bool)
(declare-fun x460 () Int)
(declare-fun x74 () Bool)
(declare-fun x418 () Int)
(declare-fun x320 () Int)
(declare-fun x17 () Bool)
(declare-fun x233 () Int)
(declare-fun x18 () Bool)
(declare-fun x532 () Int)
(declare-fun x550 () Int)
(declare-fun x12 (Int) Int)
(declare-fun x352 () Int)
(declare-fun x166 () Int)
(declare-fun x25 () Int)
(declare-fun x147 () Bool)
(declare-fun x277 () Bool)
(declare-fun x204 () Bool)
(declare-fun x130 () Int)
(declare-fun x230 () Bool)
(declare-fun x228 () Int)
(declare-fun x273 () Int)
(declare-fun x260 () Bool)
(declare-fun x330 () Int)
(declare-fun x394 () Int)
(declare-fun x92 () Int)
(declare-fun x410 () Int)
(declare-fun x453 () Int)
(declare-fun x370 () Int)
(declare-fun x142 () Int)
(declare-fun x280 () Int)
(declare-fun x558 () Bool)
(declare-fun x404 () Int)
(declare-fun x179 () Int)
(declare-fun x30 () Int)
(declare-fun x369 () Int)
(declare-fun x524 () Int)
(declare-fun x21 () Bool)
(declare-fun x82 () Bool)
(declare-fun x573 () Bool)
(declare-fun x481 () Int)
(declare-fun x521 () Int)
(declare-fun x118 () Bool)
(declare-fun x442 () Bool)
(declare-fun x235 () Int)
(declare-fun x359 () Int)
(declare-fun x310 () Int)
(declare-fun x582 () Int)
(declare-fun x88 () Int)
(declare-fun x549 () Int)
(declare-fun x331 () Int)
(declare-fun x83 () Int)
(declare-fun x11 () Int)
(declare-fun x116 () Int)
(declare-fun x208 () Int)
(declare-fun x159 () Bool)
(declare-fun x151 () Bool)
(declare-fun x505 () Bool)
(declare-fun x290 () Int)
(declare-fun x325 () Int)
(declare-fun x52 () Int)
(declare-fun x448 () Int)
(declare-fun x220 () Int)
(declare-fun x6 () Int)
(declare-fun x255 () Bool)
(declare-fun x458 () Int)
(declare-fun x454 () Int)
(declare-fun x428 (Int) Int)
(declare-fun x367 () Int)
(declare-fun x78 () Int)
(declare-fun x311 () Bool)
(declare-fun x333 () Int)
(declare-fun x188 () Int)
(declare-fun x46 () Bool)
(declare-fun x312 () Bool)
(declare-fun x503 () Int)
(declare-fun x305 () Bool)
(declare-fun x534 () Int)
(declare-fun x286 () Int)
(declare-fun x472 () Int)
(declare-fun x246 () Int)
(declare-fun x197 () Int)
(declare-fun x259 () Int)
(declare-fun x323 (Int) Int)
(declare-fun x507 () Bool)
(declare-fun x560 () Int)
(declare-fun x186 () Int)
(declare-fun x48 () Int)
(declare-fun x349 () Int)
(declare-fun x167 () Int)
(declare-fun x267 () Int)
(declare-fun x579 () Bool)
(declare-fun x72 () Int)
(declare-fun x67 (Int) Bool)
(declare-fun x338 () Int)
(declare-fun x326 () Int)
(declare-fun x498 () Int)
(declare-fun x109 () Int)
(declare-fun x516 () Int)
(declare-fun x382 () Bool)
(declare-fun x172 () Int)
(declare-fun x13 () Bool)
(declare-fun x315 () Int)
(declare-fun x544 () Int)
(declare-fun x143 () Int)
(declare-fun x496 () Bool)
(declare-fun x504 () Int)
(declare-fun x393 () Int)
(declare-fun x101 (Int) Int)
(declare-fun x411 () Int)
(declare-fun x415 () Int)
(declare-fun x213 () Int)
(declare-fun x466 () Int)
(declare-fun x375 () Int)
(declare-fun x201 () Int)
(declare-fun x568 () Int)
(declare-fun x341 () Int)
(declare-fun x119 () Int)
(declare-fun x566 () Int)
(declare-fun x38 () Int)
(declare-fun x501 () Bool)
(declare-fun x427 () Int)
(declare-fun x328 () Int)
(declare-fun x1 () Int)
(declare-fun x34 () Bool)
(declare-fun x575 () Bool)
(declare-fun x517 () Bool)
(declare-fun x438 () Int)
(declare-fun x3 () Int)
(declare-fun x409 () Bool)
(declare-fun x553 () Bool)
(declare-fun x327 () Int)
(declare-fun x378 () Int)
(declare-fun x511 () Int)
(declare-fun x523 () Int)
(declare-fun x417 () Bool)
(declare-fun x75 (Int) Int)
(declare-fun x380 () Int)
(declare-fun x216 () Int)
(declare-fun x184 () Int)
(declare-fun x164 () Int)
(declare-fun x425 () Int)
(declare-fun x163 () Bool)
(declare-fun x482 () Int)
(declare-fun x221 () Int)
(declare-fun x389 () Bool)
(declare-fun x80 () Int)
(declare-fun x475 () Int)
(declare-fun x377 () Int)
(declare-fun x51 () Bool)
(declare-fun x226 () Bool)
(declare-fun x540 () Int)
(declare-fun x299 () Int)
(declare-fun x261 () Bool)
(declare-fun x536 () Int)
(declare-fun x495 () Int)
(declare-fun x177 () Bool)
(declare-fun x296 () Int)
(define-fun x245 ((x324 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x324) (>= x324 0)) x324 (- x324 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x522 ((x324 Int)) Int (ite (and (< x324 0) (>= x324 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x324 115792089237316195423570985008687907853269984665640564039457584007913129639936) x324))
(define-fun x253 ((x223 Int)) Bool (and (>= x223 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x223)))
(define-fun x424 ((x223 Int)) Bool (and (= (x73 x223 115792089237316195423570985008687907853269984665640564039457584007913129639935) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x73 115792089237316195423570985008687907853269984665640564039457584007913129639935 x223) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(define-fun x174 ((x223 Int)) Bool (and (= x223 (x73 x223 0)) (= (x73 0 x223) x223)))
(define-fun x578 ((x223 Int)) Bool (= (x73 x223 x223) x223))
(define-fun x96 ((x223 Int)) Bool (and (x578 x223) (x424 x223) (x174 x223)))
(define-fun x137 ((x223 Int) (x81 Int)) Bool (= (x73 x223 x81) (x73 x81 x223)))
(define-fun x499 ((x223 Int) (x81 Int)) Bool (and (<= (x73 x223 x81) (+ x223 x81)) (=> (>= x81 0) (>= (x73 x223 x81) x81)) (=> (>= x223 0) (<= x223 (x73 x223 x81)))))
(define-fun x139 ((x223 Int) (x81 Int)) Bool (and (x499 x223 x81) (x137 x223 x81)))
(define-fun x222 ((x223 Int)) Bool (and (= x223 (x7 x223 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (x7 115792089237316195423570985008687907853269984665640564039457584007913129639935 x223) x223)))
(define-fun x474 ((x223 Int)) Bool (and (= 0 (x7 x223 0)) (= (x7 0 x223) 0)))
(define-fun x416 ((x223 Int)) Bool (= x223 (x7 x223 x223)))
(define-fun x478 ((x223 Int)) Bool (and (x416 x223) (x474 x223) (x222 x223)))
(define-fun x551 ((x223 Int) (x81 Int)) Bool (= (x7 x81 x223) (x7 x223 x81)))
(define-fun x350 ((x223 Int) (x81 Int)) Bool (and (=> (>= x81 0) (>= x81 (x7 x223 x81))) (=> (<= 0 x223) (<= (x7 x223 x81) x223)) (<= 0 (x7 x223 x81))))
(define-fun x56 ((x223 Int) (x81 Int)) Bool (and (x350 x223 x81) (x551 x223 x81)))
(define-fun x529 ((x223 Int)) Bool (and (= (x256 115792089237316195423570985008687907853269984665640564039457584007913129639935 x223) (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x223)) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x223) (x256 x223 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x156 ((x223 Int)) Bool (and (= (x256 0 x223) x223) (= (x256 x223 0) x223)))
(define-fun x372 ((x223 Int)) Bool (= 0 (x256 x223 x223)))
(define-fun x292 ((x223 Int)) Bool (and (x156 x223) (x372 x223) (x529 x223)))
(define-fun x314 ((x223 Int) (x81 Int)) Bool (= (x256 x223 x81) (x256 x81 x223)))
(define-fun x322 ((x223 Int) (x81 Int)) Bool (and (>= (x256 x223 x81) 0) (<= (x256 x223 x81) (+ x81 x223))))
(define-fun x61 ((x223 Int) (x81 Int)) Bool (and (x322 x223 x81) (x314 x223 x81)))
(define-fun x419 ((x344 Int)) Int 0)
(define-fun x249 ((x344 Int)) Int 0)
(define-fun x525 ((x344 Int)) Int 0)
(define-fun x494 ((x344 Int)) Int 0)
(define-fun x87 ((x344 Int)) Int 0)
(define-fun x446 ((x344 Int)) Int (ite (> x509 x344) (x428 x344) 0))
(define-fun x351 ((x344 Int)) Int (ite (and (<= 0 x344) (< x344 x509)) (x462 x344) (x446 x344)))
(define-fun x31 ((x344 Int)) Int (ite (= x196 x344) x378 (x12 x344)))
(define-fun x402 ((x344 Int)) Int (ite (= x344 128) 50942633119752846454219349998365661925608737367104304655302372697894809501696 (x525 x344)))
(define-fun x195 ((x344 Int)) Int (ite (= 132 x344) x179 (x402 x344)))
(define-fun x564 ((x344 Int)) Int (ite (= 0 x344) x181 (x41 x344)))
(define-fun x95 ((x344 Int)) Int (ite (= 128 x344) x181 (x195 x344)))
(define-fun x527 ((x344 Int)) Int (ite (and (< x344 160) (<= 128 x344)) (x564 (- x344 128)) (x494 x344)))
(define-fun x68 ((x344 Int)) Int (ite (= x369 x344) x3 (x237 x344)))
(define-fun x15 ((x344 Int)) Int (ite (= x55 x344) x290 (x555 x344)))
(define-fun x490 ((x344 Int)) Int (ite (= x370 x344) x274 (x75 x344)))
(define-fun x530 ((x344 Int)) Int (ite x576 (x237 x344) (x68 x344)))
(define-fun x548 ((x344 Int)) Int (ite x576 (x555 x344) (x15 x344)))
(define-fun x283 ((x344 Int)) Int (ite x576 (x249 x344) (x95 x344)))
(define-fun x71 ((x344 Int)) Int (ite x576 (x75 x344) (x490 x344)))
(define-fun x105 ((x344 Int)) Int (ite (= x344 x410) x393 (x548 x344)))
(define-fun x497 ((x344 Int)) Int (ite (= x410 x344) x134 (x105 x344)))
(define-fun x313 ((x344 Int)) Int (ite x269 (x548 x344) (x497 x344)))
(define-fun x502 ((x344 Int)) Int (ite (= x327 x344) x20 (x129 x344)))
(define-fun x247 ((x344 Int)) Int (ite x269 (x129 x344) (x502 x344)))
(define-fun x353 ((x344 Int)) Int (ite (= x344 x236) x167 (x407 x344)))
(define-fun x363 ((x344 Int)) Int (ite x269 (x407 x344) (x353 x344)))
(define-fun x276 ((x344 Int)) Int (ite (= x344 x466) x515 (x420 x344)))
(define-fun x395 ((x344 Int)) Int (ite (= x344 x380) 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x283 x344)))
(define-fun x556 ((x344 Int)) Int (ite (= x344 x89) x430 (x395 x344)))
(define-fun x484 ((x344 Int)) Int (ite (= x344 x240) x493 (x556 x344)))
(define-fun x461 ((x344 Int)) Int (ite (= x344 x1) x403 (x14 x344)))
(define-fun x535 ((x344 Int)) Int (ite (= x24 x344) x426 (x461 x344)))
(define-fun x473 ((x344 Int)) Int (ite (= 128 x344) x493 (x419 x344)))
(define-fun x580 ((x344 Int)) Int (ite (= 128 x344) 1 (x473 x344)))
(define-fun x387 ((x344 Int)) Int (ite (= x344 0) x368 (x108 x344)))
(define-fun x42 ((x344 Int)) Int (ite x82 (x14 x344) (x535 x344)))
(define-fun x23 ((x344 Int)) Int (ite (= x344 x262) x274 (x247 x344)))
(define-fun x225 ((x344 Int)) Int (ite x467 (x247 x344) (x23 x344)))
(define-fun x379 ((x344 Int)) Int (ite (= x344 x236) x109 (x363 x344)))
(define-fun x218 ((x344 Int)) Int (ite x467 (x363 x344) (x379 x344)))
(define-fun x5 ((x344 Int)) Int (ite (= x344 x343) x153 (x530 x344)))
(define-fun x390 ((x344 Int)) Int (ite (= x344 x241) x539 (x244 x344)))
(define-fun x348 ((x344 Int)) Int (ite (= x236 x344) x544 (x218 x344)))
(define-fun x98 ((x344 Int)) Int (ite (= x326 x344) x274 (x225 x344)))
(define-fun x194 ((x344 Int)) Int (ite (= x344 x330) x405 (x62 x344)))
(define-fun x406 ((x344 Int)) Int 0)
(define-fun x4 ((x344 Int)) Int (ite (= x329 x344) x39 (x313 x344)))
(assert (x253 x29))
(assert (x253 x122))
(assert (= (=> (and (and (= x310 (x522 (- x11 x70))) (= x333 (x73 x162 x469)) (= x208 31536000) (= x286 (+ 1 x346)) (= x371 (div x258 x258)) (= x58 (x522 (- x310 (mod (ite (< x11 x70) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= x11 (mod (* 126144000 x489) 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (x407 x236) x259) (= x489 (x101 x346)) (= 126144000 x149) (= 1 x333) (= (ite (= x371 1) 1 0) x469) (= x162 (ite (= 0 x258) 1 0)) (= (mod (* 126144000 x489) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x70) (= (= x58 0) x203) (= x35 (x244 x286))) (or (and (and (= (x245 (+ x459 x116)) x146) (= (mod (* x58 904625697166532776746648320380374280103671755200316906558262375061821325312) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x459) (= x116 (div x70 128)) (= (mod (* 69185743945351922119161689019356421013382125510479073735908722411855439477079 x146) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x160) (= x160 x197) (>= 31535999 x58)) (not x203)) (and x203 (and (= (div x70 31536000) x93) (= x197 x93))))) x118) x227))
(assert (x253 x191))
(assert (= (or x335 x114) x345))
(assert (= (and x226 x189) x559))
(assert (x253 x434))
(assert (< 10000 (x486 64 x430 0)))
(assert (x253 x396))
(assert (x253 x198))
(assert (x96 x469))
(assert (= 0 (x562 31535999)))
(assert (x67 69185743945351922119161689019356421013382125510479073735908722411855439477079))
(assert (< 10000 (x486 64 x434 0)))
(assert (< 10000 (x486 64 x457 0)))
(assert (= (x468 (x486 64 x457 0)) 0))
(assert (= (and x17 (not x433)) x303))
(assert (x253 x367))
(assert (x253 x165))
(assert (=> (= 0 x184) (= (div x471 x184) 0)))
(assert (= (x562 x415) (x562 (+ 5 x415))))
(assert (= x505 (or x545 x219)))
(assert (x253 x307))
(assert (< (x486 64 x179 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (x66 (x486 64 x158 2)) x158))
(assert (x253 x301))
(assert (x253 x438))
(assert (x253 x267))
(assert (x253 x270))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x486 64 x434 0)))
(assert (= (x562 1461501637330902918203684832716283019655932542975) 0))
(assert (x253 x570))
(assert (= x82 (and x163 (not x18))))
(assert (x253 x451))
(assert (x253 x197))
(assert (x253 x152))
(assert (x253 x199))
(assert (= x434 (x66 (x486 64 x434 0))))
(assert (< 10000 (x486 64 x540 1)))
(assert (x253 x342))
(assert (= (x468 (x486 64 x430 0)) 0))
(assert (x253 x193))
(assert (= x485 (x66 (x486 64 x485 2))))
(assert (x253 x574))
(assert (= x455 (and (not x16) x417)))
(assert (= (x552 (x486 64 x331 3)) 64))
(assert (x253 x20))
(assert (x253 x120))
(assert (x253 x423))
(assert (x253 x567))
(assert (x253 x124))
(assert (=> (= 0 x258) (= 0 (div x258 x258))))
(assert (x253 x439))
(assert (x253 x83))
(assert (not (x67 (x486 64 x457 0))))
(assert (x253 x447))
(assert (=> (= 0 x197) (= 0 (div x197 x197))))
(assert (x253 x44))
(assert (= (=> (and (= x270 (x313 x329)) (= x40 (x245 (+ x287 x549))) (= x495 x40) (= x39 (x245 (+ x270 x549))) (not (>= (+ x306 x549) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x306 (x363 x236)) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x549 x287))) (not (>= (+ x270 x549) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x329 (+ 2 x521)) (= (x245 (+ x549 x306)) x109) (= x97 (x245 (+ x549 x287)))) x147) x538))
(assert (x253 x53))
(assert (= (and x414 x104) x110))
(assert (not (x67 (x486 64 x179 0))))
(assert (x253 x217))
(assert (x253 x121))
(assert (= x163 (or x269 x288)))
(assert (= x36 (=> (and (= x103 (div x396 x396)) (= (ite (= 0 x396) 1 0) x571) (= x391 x396) (= (x73 x571 x357) x168) (= (ite (= x103 1) 1 0) x357) (= x168 1)) x212)))
(assert (x253 x566))
(assert (x253 x112))
(assert (= (x562 x415) (x562 (+ 3 x415))))
(assert (x253 x481))
(assert (x253 x459))
(assert (x253 x304))
(assert (not (x67 (x486 64 x158 2))))
(assert (x253 x116))
(assert (= x106 (and (not x514) x345)))
(assert (x67 604800))
(assert (= (x486 64 x457 0) (x562 (x486 64 x457 0))))
(assert (not (x67 (x486 64 x434 0))))
(assert (x253 x39))
(assert (x253 x333))
(assert (= x442 (=> (and (and (not (>= (+ x213 x251) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x541 (< x451 x80)) (= (x245 (+ x213 x251)) x80) (= (x245 (+ x148 x498)) x451) (= x338 (x73 x85 x504)) (= x85 (ite (= 0 x498) 1 0)) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x148 x498))) (= (ite (= 1 x140) 1 0) x504) (= (div x498 x498) x140) (= 1 x338)) (or (and (not x541) (= x213 x549)) (and x541 (and (= x193 x549) (= (x522 (- x451 x251)) x193) (not (< x451 x193)))))) x538)))
(assert (x96 x316))
(assert (x253 x526))
(assert (x253 x571))
(assert (x253 x246))
(assert (= (x66 (x486 64 x430 0)) x430))
(assert (= 0 (x562 4294967295)))
(assert (x253 x534))
(assert (x253 x37))
(assert (x253 x149))
(assert (x253 x421))
(assert (x253 x458))
(assert (x253 x251))
(assert (x253 x231))
(assert (= 0 (x562 115792089237316195423570985008687907853269984665640564039457584007913129639934)))
(assert (x253 x339))
(assert (= x33 (=> (and (= x158 (x420 x466)) (= x415 (x486 64 x540 1)) (= x236 (+ 3 x415)) (= (x407 x236) x298) (= x466 (+ x415 6)) (= (< x158 x485) x104) (= (x486 64 x158 2) x452)) (and (=> (and (not x104) (and (= x515 x158) (= x493 0) (= x546 x287))) x261) (=> (and (and (and (= x121 (mod (* x458 x59) 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (+ 1 x236) x327) (= x231 (x522 (- x121 x317))) (= x59 (x101 x346)) (not (< x20 x458)) (= (x129 x327) x131) (= 31536000 x188) (= (x71 x452) x49) (= x533 (= 0 x239)) (= x458 (x522 (- x20 x131))) (<= x49 115792089237316195423570985008687907853269984665640564039457584007913129035135) (= x346 (+ 1 x415)) (= (+ 604800 x49) x20) (= (mod (* x458 x59) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x317) (= x239 (x522 (- x231 (mod (ite (> x317 x121) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (or (and (not x533) (and (>= 31535999 x239) (= x258 x26) (= x309 (div x157 128)) (= x191 (x522 (- x239 (mod (ite (> x291 x317) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= x291 (mod (* x458 x59) 31536000)) (= (x522 (- x317 x291)) x157) (= (mod (* x191 904625697166532776746648320380374280103671755200316906558262375061821325312) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x257) (= x302 (x245 (+ x257 x309))) (= (mod (* 69185743945351922119161689019356421013382125510479073735908722411855439477079 x302) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x26))) (and x533 (and (= x120 x258) (= x120 (div x317 31536000)))))) x104) x227)))))
(assert (x253 x216))
(assert (x253 x524))
(assert (= (or x558 x209) x74))
(assert (x253 x107))
(assert (= (x552 (x486 64 x457 0)) 64))
(assert (= (x562 (+ 2 x521)) (x562 x521)))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x486 64 x540 1)))
(assert (x253 x290))
(assert (x253 x506))
(assert (> (x486 64 x331 3) 10000))
(assert (= (and x414 (not x104)) x269))
(assert (= (or x376 x13) x141))
(assert (x253 x391))
(assert (x253 x302))
(assert (x253 x328))
(assert (x253 x444))
(assert (= (x66 (x486 64 x107 2)) x107))
(assert (x253 x127))
(assert (x253 x403))
(assert (= 1 (x468 (x486 64 x540 1))))
(assert (= (x486 64 x179 0) (x562 (x486 64 x179 0))))
(assert (= 64 (x552 (x486 64 x158 2))))
(assert (x253 x425))
(assert (x253 x510))
(assert (x253 x146))
(assert (> (x486 64 x179 0) 10000))
(assert (x253 x221))
(assert (x253 x393))
(assert (x253 x349))
(assert (=> (>= 10000 x196) (= (x562 x196) 0)))
(assert (=> (<= x540 10000) (= (x562 x540) 0)))
(assert (x253 x65))
(assert (x253 x338))
(assert (=> (= 0 x471) (= 0 (div x152 x471))))
(assert (x253 x258))
(assert (= (and x541 x505) x54))
(assert (x253 x470))
(assert (x67 50942633119752846454219349998365661925608737367104304655302372697894809501696))
(assert (x253 x27))
(assert (x253 x394))
(assert (> (x486 64 x485 2) 10000))
(assert (x253 x543))
(assert (x253 x278))
(assert (x253 x561))
(assert (x478 x238))
(assert (x253 x49))
(assert (= (x552 (x486 64 x485 2)) 64))
(assert (x253 x375))
(assert (x253 x243))
(assert (=> (<= x340 10000) (= (x562 x340) 0)))
(assert (x253 x463))
(assert (x253 x59))
(assert (x67 1889567281))
(assert (x253 x357))
(assert (x253 x296))
(assert (x253 x88))
(assert (x253 x92))
(assert (x253 x512))
(assert (x253 x374))
(assert (x253 x340))
(assert (= x284 (and x505 (not x541))))
(assert (x253 x289))
(assert (< (x486 64 x331 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x253 x89))
(assert (= (x486 64 x540 1) (x562 (x486 64 x540 1))))
(assert (x253 x366))
(assert (=> (<= x485 10000) (= 0 (x562 x485))))
(assert (x253 x488))
(assert (x253 x513))
(assert (x253 x280))
(assert (= (x562 (+ x346 1)) (x562 x346)))
(assert (= (x562 69185743945351922119161689019356421013382125510479073735908722411855439477079) 0))
(assert (x253 x398))
(assert (x253 x35))
(assert (= (x562 604800) 0))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x486 64 x485 2)))
(assert (x253 x361))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x486 64 x430 0)))
(assert (= (x562 x415) (x562 (+ x415 6))))
(assert (= x219 (and x202 (not x32))))
(assert (x253 x10))
(assert (= (x562 (+ x560 2)) (x562 x560)))
(assert (x253 x19))
(assert (x253 x356))
(assert (=> (= 0 x396) (= (div x396 x396) 0)))
(assert (x253 x418))
(assert (x253 x3))
(assert (x253 x386))
(assert (x253 x157))
(assert (x253 x411))
(assert (x67 76450787359836037641860180984291677749980919077056822294353438043884394381312))
(assert (x253 x378))
(assert (x253 x26))
(assert (= (x562 (+ x452 1)) (x562 x452)))
(assert (x253 x316))
(assert (x96 x357))
(assert (x253 x471))
(assert (= (=> (and (and (= x72 126144000) (= x347 (x73 x488 x536)) (= (x101 x492) x448) (= (x244 x282) x148) (= (= x356 0) x32) (= (ite (= x213 0) 1 0) x488) (= (ite (= 1 x513) 1 0) x536) (= (+ x492 1) x282) (= (mod (* 126144000 x448) 115792089237316195423570985008687907853269984665640564039457584007913129639935) x296) (= 31536000 x386) (= (x522 (- x94 (mod (ite (> x136 x296) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x356) (= x513 (div x213 x213)) (= (x363 x236) x251) (= x347 1) (= x136 (mod (* x448 126144000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x522 (- x296 x136)) x94)) (or (and (not x32) (and (= (x245 (+ x447 x44)) x425) (= x498 x385) (= (mod (* x425 69185743945351922119161689019356421013382125510479073735908722411855439477079) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x385) (= x44 (div x136 128)) (<= x356 31535999) (= (mod (* 904625697166532776746648320380374280103671755200316906558262375061821325312 x356) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x447))) (and x32 (and (= x10 (div x136 31536000)) (= x498 x10))))) x442) x204))
(assert (x67 1461501637330902918203684832716283019655932542975))
(assert (x253 x516))
(assert (x253 x38))
(assert (x253 x11))
(assert (= (x562 x452) (x562 (+ 2 x452))))
(assert (x253 x341))
(assert (x253 x160))
(assert (=> (<= x233 10000) (= 0 (x562 x233))))
(assert (x67 904625697166532776746648320380374280103671755200316906558262375061821325312))
(assert (x253 x132))
(assert (x253 x207))
(assert (= x382 (or x82 x90)))
(assert (x253 x93))
(assert (= (x562 x582) (x562 (+ x582 1))))
(assert (= (x562 31536000) 0))
(assert (x253 x368))
(assert (= 64 (x552 (x486 64 x434 0))))
(assert (x139 x571 x357))
(assert (x253 x158))
(assert (x96 x566))
(assert (x253 x336))
(assert (x253 x179))
(assert (x253 x271))
(assert (= x179 (x66 (x486 64 x179 0))))
(assert (x96 x85))
(assert (x253 x228))
(assert (= x202 (or x559 x573)))
(assert (= (=> (and (or (and (= x258 x470) (not x514)) (and x514 (and (= x336 (x522 (- x25 x259))) (= x336 x470) (not (> x336 x25))))) (and (= (div x197 x197) x229) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x35 x197))) (= (ite (= x197 0) 1 0) x566) (= x316 (ite (= x229 1) 1 0)) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x258 x259))) (= x112 (x73 x566 x316)) (= (x245 (+ x259 x258)) x341) (= (> x341 x25) x514) (= (x245 (+ x197 x35)) x25) (= 1 x112))) x476) x118))
(assert (= x147 (=> (and (not (>= (+ x400 x454) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x245 (+ x400 x454)) x234) (= x440 (> x400 0)) (= x119 0) (not (< x234 x274)) (= x330 (+ 5 x415)) (= x454 (x62 x330))) (and (=> (and (= 0 x391) (not x440)) x212) (=> (and x440 (and (and (= x433 (= x475 0)) (= (x522 (- x534 x250)) x211) (= x487 31536000) (= (x522 (- x211 (mod (ite (< x534 x250) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x475) (= (+ 1 x415) x180) (= (x101 x180) x352) (= x534 (mod (* x400 x352) 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (mod (* x400 x352) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x250)) (or (and x433 (and (= x381 (div x250 31536000)) (= x396 x381))) (and (and (= (x245 (+ x491 x477)) x436) (= x491 (div x263 128)) (= (mod (* x352 x400) 31536000) x577) (= x477 (mod (* 904625697166532776746648320380374280103671755200316906558262375061821325312 x48) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x396 x243) (= (mod (* 69185743945351922119161689019356421013382125510479073735908722411855439477079 x436) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x243) (= x263 (x522 (- x250 x577))) (<= x475 31535999) (= x48 (x522 (- x475 (mod (ite (< x250 x577) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (not x433))))) x36)))))
(assert (x253 x475))
(assert (x253 x233))
(assert (=> (>= 10000 x331) (= (x562 x331) 0)))
(assert (x253 x97))
(assert (x253 x479))
(assert (= (x486 64 x434 0) (x562 (x486 64 x434 0))))
(assert (x253 x577))
(assert (x253 x232))
(assert (not (x67 (x486 64 x331 3))))
(assert (x253 x293))
(assert (x253 x52))
(assert (= (and x433 x17) x169))
(assert (= (or x389 x106) x496))
(assert (= x91 (=> (and (and (and (>= x235 0) (= x47 false) (<= x319 1461501637330902918203684832716283019655932542975) (>= x355 0) (= (x462 4) x400) (= false x60) (>= x453 0) (<= x404 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x154 1) (<= x164 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= x9 1461501637330902918203684832716283019655932542975) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x509) (>= x164 0) (<= x206 1461501637330902918203684832716283019655932542975) (<= 36 x509) (= x360 false) (= (x254 x233) x154) (>= x319 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x235) (>= x142 0) (= x480 false) (= 0 x161) (= x349 (x462 0)) (= (x486 64 x434 0) x569) (= false x332) (>= x9 0) (= x460 x201) (= x482 x434) (= x399 x400) (>= 126144000 x400) (= 1889567281 x77) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x355) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x142) (= false x230) (= x279 x434) (= x349 x37) (<= x185 127) (<= 0 x206) (= (x14 x569) x201) (<= 0 x404) (= x401 false) (<= x453 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= x185 127)) (and (= x540 x319) (and (= x355 x274) (and (or (and (= 1 x246) x305) (and (= (ite x305 1 0) x246) (not x305))) (and (= x65 (x75 x318)) (= false x76) (= false x45) (>= 127 x216) (= x196 x319) (<= 1 x27) (= x190 (x486 64 x540 1)) (>= x53 1) (= x456 (x31 x179)) (>= x83 1) (= x224 (x486 64 x331 3)) (= (x337 x224) x27) (= (+ 604800 x65) x377) (= x83 (x62 x99)) (>= 255 x27) (>= 127 x216) (= x318 (x486 64 x107 2)) (<= x65 115792089237316195423570985008687907853269984665640564039457584007913129035135) (= x305 (not (> x377 x274))) (= x342 x399) (= x456 x295) (= x53 (x254 x179)) (= x331 (x443 x540)) (= (+ 5 x190) x99) (= x378 (x12 x196)) (= 3712381028 x483)))))) (and (>= 1461501637330902918203684832716283019655932542975 x300) (not (= x233 x523)) x63 (<= x266 4294967295) (= x248 0) x312 (not (= x233 x179)) (<= 1 x233) (<= 0 x266) (>= x297 0) (= false x117) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x359) (= x429 x179) x159 (<= x278 1461501637330902918203684832716283019655932542975) (not (= x179 x523)) (>= x429 1) (= x358 0) (>= 1461501637330902918203684832716283019655932542975 x429) (= 1 x518) (= x482 x297) (>= 1461501637330902918203684832716283019655932542975 x179) (>= 1461501637330902918203684832716283019655932542975 x523) (>= x523 1) (<= x297 1461501637330902918203684832716283019655932542975) (= x501 false) (= (< 0 (x254 x523)) x159) (= true x517) (= x51 false) (>= x179 1) (<= 0 x359) (= x294 3712381028) (= false x311) (= (> (x254 x233) 0) x312) (>= 1461501637330902918203684832716283019655932542975 x233) (= x128 x179) (= x63 (< 0 (x254 x179))) (>= x300 0) (= 36 x304))) x553)))
(assert (x253 x250))
(assert (= (x562 x236) (x562 (+ 1 x236))))
(assert (= (and x203 x74) x114))
(assert (x253 x310))
(assert (x253 x263))
(assert (=> (<= x430 10000) (= 0 (x562 x430))))
(assert (x253 x523))
(assert (x253 x511))
(assert (x253 x427))
(assert (x253 x273))
(assert (= 2 (x468 (x486 64 x340 2))))
(assert (=> (>= 10000 x158) (= 0 (x562 x158))))
(assert (< 10000 (x486 64 x107 2)))
(assert (not x91))
(assert (= 3 (x468 (x486 64 x331 3))))
(assert (= x212 (=> (and (and (= false x178) (= x138 (= x460 x207)) (>= 127 x293) (= x214 false) (= x575 false) (>= 127 x293) (<= 1 x532) (= false x445) (= 1889567281 x464) (= x457 x465) (= x528 x457) (= false x581) (= x532 (x254 x233)) (= (x42 x130) x207) (= false x22) (= x130 (x486 64 x457 0))) (and (= (+ x415 2) x241) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x391 x495))) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x561 x391))) (= x29 (x218 x236)) (= x325 (x245 (+ x495 x391))) (= false x46) (= x539 (x245 (+ x391 x561))) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x400 x374))) (= x561 (x244 x241)) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x29 x391))) (= false x187) (= x572 (x245 (+ x391 x495))) (= (x62 x330) x374) (= x297 x465) (= (+ 1 x236) x326) (= x444 36) (= (x245 (+ x374 x400)) x405) (= x544 (x245 (+ x391 x29))))) x138)))
(assert (= (or x284 x54) x215))
(assert (x253 x40))
(assert (x253 x317))
(assert (x253 x422))
(assert (= (and (not x200) x496) x115))
(assert (x253 x432))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x486 64 x457 0)))
(assert (x253 x172))
(assert (x96 x162))
(assert (x253 x167))
(assert (= (and x440 x86) x17))
(assert (= (x562 (+ 1 x492)) (x562 x492)))
(assert (x253 x213))
(assert (= (x66 (x486 64 x540 1)) x540))
(assert (x253 x192))
(assert (=> (= 0 x184) (= 0 (div x271 x184))))
(assert (x253 x168))
(assert (x253 x412))
(assert (= 0 (x562 50942633119752846454219349998365661925608737367104304655302372697894809501696)))
(assert (x253 x371))
(assert (x253 x131))
(assert (< (x486 64 x340 2) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x253 x544))
(assert (=> (<= x457 10000) (= (x562 x457) 0)))
(assert (= (and x382 x183) x467))
(assert (x253 x58))
(assert (= x288 (or x260 x115)))
(assert (x253 x30))
(assert (x253 x285))
(assert (x253 x298))
(assert (x253 x377))
(assert (= x13 (and (not x440) x86)))
(assert (x253 x274))
(assert (x253 x25))
(assert (= (x562 (+ 1 x415)) (x562 x415)))
(assert (x253 x279))
(assert (x253 x441))
(assert (=> (>= 10000 x434) (= 0 (x562 x434))))
(assert (= x545 (and x202 x32)))
(assert (x253 x489))
(assert (x139 x566 x316))
(assert (x96 x571))
(assert (= (and x496 x200) x260))
(assert (x253 x493))
(assert (x253 x487))
(assert (x253 x399))
(assert (= (=> (and (or (and x16 (and (= x280 x30) (= x380 128) (= x107 x485))) (and (not x16) (and (not (< x439 x3)) (= x290 (x245 (+ x546 x100))) (= x289 (x245 (+ x280 x171))) (= x369 (+ 1 x166)) (<= 1 x268) (not (>= (+ x100 x546) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= false x34) (= 36 x111) (= (+ 2 x560) x55) (= (x486 64 x107 2) x582) (= x19 128) (= x334 false) (= x181 (x14 x6)) (= x510 x563) (= x340 (+ 1 x107)) (= (x486 64 x340 2) x370) (= x3 (x522 (- x439 x280))) (= x503 50942633119752846454219349998365661925608737367104304655302372697894809501696) (= false x113) (= 1889567281 x50) (= x485 (+ 1 x107)) (= x179 x563) (= x171 (x68 x57)) (= false x450) (= (+ 1 x107) x411) (<= x398 127) (= x380 160) (= x30 x289) (= (x486 64 x179 0) x6) (= x268 (x254 x233)) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x280 x171))) (= (x245 (+ x280 x171)) x124) (>= 127 x398) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x107) (= x439 (x527 128)) (= (+ 1 x582) x57) (= x560 (x486 64 x107 2)) (= (x486 64 x107 2) x166)))) (= (= x246 0) x16)) x33) x553))
(assert (not (x67 (x486 64 x430 0))))
(assert (x253 x504))
(assert (x253 x208))
(assert (x253 x352))
(assert (= x414 (or x576 x455)))
(assert (x253 x109))
(assert (x253 x426))
(assert (x253 x238))
(assert (x253 x48))
(assert (x253 x111))
(assert (x253 x205))
(assert (x253 x315))
(assert (x478 x471))
(assert (x253 x299))
(assert (x67 31536000))
(assert (= (x562 2835717307) 0))
(assert (x253 x358))
(assert (= x558 (and x110 x533)))
(assert (x253 x77))
(assert (= 64 (x552 (x486 64 x430 0))))
(assert (x253 x268))
(assert (x253 x64))
(assert (x253 x103))
(assert (x253 x175))
(assert (=> (<= x523 10000) (= (x562 x523) 0)))
(assert (x253 x148))
(assert (x253 x554))
(assert (= 2 (x468 (x486 64 x485 2))))
(assert (x253 x515))
(assert (x253 x229))
(assert (x253 x140))
(assert (x253 x381))
(assert (x253 x239))
(assert (= (x468 (x486 64 x179 0)) 0))
(assert (not (x67 (x486 64 x340 2))))
(assert (x253 x565))
(assert (x67 115792089237316195423570985008687907853269984665640564039457584007913129035135))
(assert (x253 x362))
(assert (x253 x498))
(assert (x253 x542))
(assert (x253 x347))
(assert (x253 x537))
(assert (=> (<= x179 10000) (= (x562 x179) 0)))
(assert (< 10000 (x486 64 x340 2)))
(assert (= (x562 (x486 64 x340 2)) (x486 64 x340 2)))
(assert (= true x507))
(assert (x253 x188))
(assert (= x417 (or x384 x308)))
(assert (= 64 (x552 (x486 64 x340 2))))
(assert (x253 x154))
(assert (x253 x181))
(assert (x253 x457))
(assert (x253 x2))
(assert (x61 x506 2))
(assert (x253 x325))
(assert (=> (= x213 0) (= (div x213 x213) 0)))
(assert (= (and x18 x163) x90))
(assert (x253 x85))
(assert (= x476 (=> (and (and (= (x530 x343) x366) (not (>= (+ x470 x122) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x245 (+ x122 x470)) x393) (= (x245 (+ x186 x526)) x198) (= (x101 x346) x186) (= (+ 2 x452) x410) (= (mod (* x198 x366) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x152) (= x500 (mod (* x366 x198) 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (x548 x410) x122) (= (= x228 0) x200) (= (x245 (+ x470 x84)) x167) (= x228 (x522 (- x339 (mod (ite (< x500 x152) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x526 x186))) (= x343 (+ x452 1)) (= x84 (x407 x236)) (= x373 (x245 (+ x546 x470))) (>= x471 1) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x84 x470))) (= x339 (x522 (- x500 x152))) (= x471 (x105 x410)) (= x526 (x353 x236)) (= (x245 (+ x546 x470)) x102) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x546 x470)))) (or (and (and (= x422 (div x152 x471)) (= x78 x422)) x200) (and (not x200) (and (= x315 (div x574 x184)) (= x574 (x522 (- 0 x184))) (= x506 (mod (* 3 x221) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x522 (- x228 (mod (ite (> x299 x152) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x328) (= x184 (x7 x471 x238)) (= (x256 2 x506) x321) (= (mod (* x394 x565) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x479) (= (div x471 x184) x221) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x228) (= x412 (mod (* x321 x64) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x299 (mod (* x366 x198) x471)) (= x301 (mod (* x176 x192) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x88 (mod (* x537 x479) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x172 (mod (* x221 x479) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x221 x321) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x568) (= (x522 (- x152 x299)) x271) (= x537 (x522 (- 2 x172))) (= x418 (mod (* x412 x221) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x375 (mod (* x144 x328) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x394 (x522 (- 2 x547))) (= (mod (* x88 x221) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x232) (= x192 (x522 (- 2 x554))) (= (mod (* x175 x412) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x565) (= (x522 (- 2 x232)) x52) (= x144 (x245 (+ x315 1))) (= (x522 (- 2 x568)) x64) (= x238 (x245 (+ 1 (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x471) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (< x228 x471) (= x78 x127) (= (mod (* x301 (x73 x542 x375)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x127) (= (x522 (- 2 x418)) x175) (= x176 (mod (* x52 x88) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x565 x221) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x547) (= (div x271 x184) x542) (= x554 (mod (* x176 x221) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))) x145)))
(assert (x67 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (x253 x320))
(assert (x253 x397))
(assert (= (x562 (x486 64 x331 3)) (x486 64 x331 3)))
(assert (x253 x291))
(assert (= (x562 115792089237316195423570985008687907853269984665640564039457584007913129639935) 0))
(assert (= x457 (x66 (x486 64 x457 0))))
(assert (x253 x134))
(assert (x253 x201))
(assert (x253 x485))
(assert (x67 31535999))
(assert (x96 x504))
(assert (x253 x321))
(assert (x253 x532))
(assert (x253 x257))
(assert (x253 x509))
(assert (x253 x119))
(assert (= x242 (=> (and (= (x363 x236) x437) (= (x522 (- x437 x298)) x431) (= x432 (x522 (- x515 x485))) (not (< x437 x431)) (= (< 0 x432) x183)) (and (=> (and (= x495 x287) x183) x147) (=> (and (and (or (and (and (<= x512 31535999) (= (mod (* 904625697166532776746648320380374280103671755200316906558262375061821325312 x367) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x427) (= x165 (x522 (- x438 x2))) (= (mod (* 69185743945351922119161689019356421013382125510479073735908722411855439477079 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x92) (= x220 (x245 (+ x427 x441))) (= x2 (mod (* x463 x205) 31536000)) (= (div x165 128) x441) (= x367 (x522 (- x512 (mod (ite (< x438 x2) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= x213 x92)) (not x226)) (and (and (= x213 x285) (= (div x438 31536000) x285)) x226)) (and (not (> x205 x274)) (= x69 (mod (* x463 x205) 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (x522 (- x69 x438)) x567) (= x512 (x522 (- x567 (mod (ite (> x438 x69) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= x463 (x101 x492)) (= (= x512 0) x226) (= x438 (mod (* x463 x205) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x247 x262) x273) (= (x522 (- x274 x273)) x205) (= x262 (+ x236 1)) (= 31536000 x132) (= x492 (+ x415 1)) (= x521 (x486 64 x485 2)))) (not x183)) x204)))))
(assert (x139 x85 x504))
(assert (x292 x506))
(assert (x253 x309))
(assert (x253 x536))
(assert (x96 x375))
(assert (x67 3712381028))
(assert (= x389 (and x514 x345)))
(assert (x253 x252))
(assert (x253 x380))
(assert (x253 x102))
(assert (= 2 (x468 (x486 64 x158 2))))
(assert (x253 x546))
(assert (x253 x503))
(assert (x253 x240))
(assert (x139 x488 x536))
(assert (x253 x472))
(assert (x253 x185))
(assert (= (x562 (+ x415 2)) (x562 x415)))
(assert (= (x486 64 x158 2) (x562 (x486 64 x158 2))))
(assert (x253 x70))
(assert (= (x562 115792089237316195423570985008687907853269984665640564039457584007913129639904) 0))
(assert (x253 x220))
(assert (= (and (not x305) x507) x308))
(assert (= (x552 (x486 64 x179 0)) 64))
(assert (= (x486 64 x430 0) (x562 (x486 64 x430 0))))
(assert (x253 x331))
(assert (x253 x72))
(assert (= x189 (and x382 (not x183))))
(assert (x253 x171))
(assert (= x86 (or x215 x467)))
(assert (= (x562 126144000) 0))
(assert (= (=> (and (or (and (and (= false x364) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x380)) (= x143 (x461 x24)) (= x397 (x254 x233)) (= 68 x264) (= x423 1) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x380)) (= x1 (x486 64 x179 0)) (<= x380 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= x511 (x245 (+ x380 32))) (= x267 68) (= 2835717307 x524) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x380) (= (x522 (- x354 x493)) x403) (= (x245 (+ 32 x89)) x240) (= x173 false) (= false x210) (not (= x380 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (= x24 (x486 64 x430 0)) (<= 1 x397) (= x199 (x522 (- x30 x493))) (= x421 (x245 (+ x89 64))) (= x354 (x14 x170)) (= x383 x361) (= (x323 x415) x430) (= x430 x361) (= x170 (x486 64 x179 0)) (= (x580 128) x368) (not (> x493 x354)) (= x413 (x522 (- x30 x493))) (not (> x199 x30)) (= x89 (x245 (+ x380 4))) (= x264 (x522 (- x421 x380))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x380) (= x493 x217) (<= x252 127) (= (x245 (+ x493 x143)) x426) (> x511 x380) (<= x252 127) (>= x430 1) (= x472 x217) (= x320 76450787359836037641860180984291677749980919077056822294353438043884394381312) (>= 1461501637330902918203684832716283019655932542975 x430) (= x275 false)) x18) (not x18)) (= x18 (> x493 0))) x242) x261))
(assert (x253 x500))
(assert (x253 x281))
(assert (= (x486 64 x107 2) (x562 (x486 64 x107 2))))
(assert (= 2 (x468 (x486 64 x107 2))))
(assert (x253 x385))
(assert (= (and x74 (not x203)) x335))
(assert (x96 x536))
(assert (x253 x354))
(assert (x253 x94))
(assert (x96 x542))
(assert (= (x552 (x486 64 x107 2)) 64))
(assert (x292 2))
(assert (x67 115792089237316195423570985008687907853269984665640564039457584007913129639934))
(assert (x253 x234))
(assert (x253 x186))
(assert (= (x562 x166) (x562 (+ x166 1))))
(assert (x253 x211))
(assert (=> (= x498 0) (= (div x498 x498) 0)))
(assert (x253 x400))
(assert (x253 x136))
(assert (x253 x528))
(assert (= x573 (and x189 (not x226))))
(assert (= (x562 76450787359836037641860180984291677749980919077056822294353438043884394381312) 0))
(assert (= 0 (x562 57896044618658097711785492504343953926634992332820282019728792003956564819967)))
(assert (x253 x454))
(assert (= x340 (x66 (x486 64 x340 2))))
(assert (x253 x373))
(assert (= 0 (x562 904625697166532776746648320380374280103671755200316906558262375061821325312)))
(assert (x253 x483))
(assert (x253 x539))
(assert (x253 x176))
(assert (x67 2835717307))
(assert (x253 x568))
(assert (x253 x435))
(assert (x253 x295))
(assert (x253 x184))
(assert (x253 x464))
(assert (= x331 (x66 (x486 64 x331 3))))
(assert (x253 x50))
(assert (x67 126144000))
(assert (x96 x488))
(assert (x253 x477))
(assert (= (and x305 x507) x384))
(assert (x253 x540))
(assert (x253 x549))
(assert (x139 x162 x469))
(assert (not (x67 (x486 64 x540 1))))
(assert (x253 x448))
(assert (x253 x259))
(assert (x253 x413))
(assert (x253 x547))
(assert (=> (>= 10000 x107) (= (x562 x107) 0)))
(assert (x253 x143))
(assert (x253 x436))
(assert (x253 x405))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x486 64 x158 2)))
(assert (= (x562 3712381028) 0))
(assert (x56 x471 x238))
(assert (x253 x196))
(assert (x253 x153))
(assert (x253 x84))
(assert (x253 x431))
(assert (= (x562 (+ 5 x190)) (x562 x190)))
(assert (x253 x383))
(assert (=> (= x184 0) (= 0 (div x574 x184))))
(assert (= 64 (x552 (x486 64 x540 1))))
(assert (x67 4294967295))
(assert (= (x468 (x486 64 x434 0)) 0))
(assert (x253 x563))
(assert (x139 x542 x375))
(assert (= 0 (x562 115792089237316195423570985008687907853269984665640564039457584007913129035135)))
(assert (x253 x550))
(assert (x253 x491))
(assert (x253 x495))
(assert (x253 x69))
(assert (x253 x430))
(assert (= (and x16 x417) x576))
(assert (= x145 (=> (and (= (x105 x410) x481) (= x543 (x530 x343)) (= x134 (x522 (- x481 x198))) (not (< x481 x134)) (= x365 (not (> x485 x516))) (= x516 (+ 1 x158)) (= x153 (x522 (- x543 x78))) (not (< x543 x153)) (<= x158 115792089237316195423570985008687907853269984665640564039457584007913129639934)) (and x365 (=> (and (= x516 x515) (= x493 x78) (= x102 x287)) x261)))))
(assert (x67 57896044618658097711785492504343953926634992332820282019728792003956564819967))
(assert (x253 x469))
(assert (> (x486 64 x158 2) 10000))
(assert (= (or x169 x303) x376))
(assert (x253 x306))
(assert (= (x562 1889567281) 0))
(assert (= (x562 (x486 64 x485 2)) (x486 64 x485 2)))
(assert (x253 x264))
(assert (x253 x162))
(assert (x253 x144))
(assert (x253 x100))
(assert (x253 x287))
(assert (< (x486 64 x107 2) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x253 x572))
(assert (x67 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x253 x80))
(assert (= (and x110 (not x533)) x209))
(assert (not (x67 (x486 64 x107 2))))
(assert (x253 x456))
(assert (x253 x437))
(assert (x253 x429))
(assert (x253 x78))
(assert (not (x67 (x486 64 x485 2))))
(check-sat)
(exit)
