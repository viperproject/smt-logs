(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Certora
Generated on: 2024-04-10
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x104 () Int)
(declare-fun x110 () Int)
(declare-fun x250 () Int)
(declare-fun x207 (Int) Int)
(declare-fun x81 () Int)
(declare-fun x89 () Int)
(declare-fun x322 () Bool)
(declare-fun x44 () Bool)
(declare-fun x196 (Int) Bool)
(declare-fun x186 () Int)
(declare-fun x68 () Int)
(declare-fun x311 () Bool)
(declare-fun x162 () Bool)
(declare-fun x242 () Bool)
(declare-fun x206 () Int)
(declare-fun x131 () Bool)
(declare-fun x165 () Int)
(declare-fun x358 () Int)
(declare-fun x338 () Int)
(declare-fun x215 () Int)
(declare-fun x284 () Int)
(declare-fun x167 () Int)
(declare-fun x211 () Int)
(declare-fun x354 () Bool)
(declare-fun x85 () Int)
(declare-fun x325 () Int)
(declare-fun x355 () Int)
(declare-fun x150 () Int)
(declare-fun x16 () Bool)
(declare-fun x109 () Bool)
(declare-fun x184 () Bool)
(declare-fun x350 () Bool)
(declare-fun x321 () Bool)
(declare-fun x204 () Int)
(declare-fun x226 () Int)
(declare-fun x40 () Int)
(declare-fun x118 () Int)
(declare-fun x185 () Bool)
(declare-fun x323 () Bool)
(declare-fun x66 () Int)
(declare-fun x218 () Int)
(declare-fun x102 () Bool)
(declare-fun x55 () Int)
(declare-fun x225 () Bool)
(declare-fun x279 () Bool)
(declare-fun x57 () Bool)
(declare-fun x42 (Int) Int)
(declare-fun x166 () Bool)
(declare-fun x241 () Int)
(declare-fun x164 () Int)
(declare-fun x213 () Int)
(declare-fun x317 (Int) Int)
(declare-fun x329 () Int)
(declare-fun x273 () Bool)
(declare-fun x107 () Int)
(declare-fun x337 () Int)
(declare-fun x177 () Bool)
(declare-fun x336 () Int)
(declare-fun x27 () Bool)
(declare-fun x90 () Int)
(declare-fun x70 () Int)
(declare-fun x121 () Int)
(declare-fun x256 () Int)
(declare-fun x347 () Int)
(declare-fun x116 () Int)
(declare-fun x148 () Bool)
(declare-fun x91 (Int) Int)
(declare-fun x88 () Int)
(declare-fun x286 () Bool)
(declare-fun x348 () Bool)
(declare-fun x132 () Bool)
(declare-fun x43 () Bool)
(declare-fun x318 () Bool)
(declare-fun x345 () Int)
(declare-fun x11 () Int)
(declare-fun x33 () Int)
(declare-fun x169 () Int)
(declare-fun x130 () Bool)
(declare-fun x261 () Int)
(declare-fun x176 () Int)
(declare-fun x35 () Int)
(declare-fun x194 () Bool)
(declare-fun x147 () Bool)
(declare-fun x168 () Int)
(declare-fun x292 () Bool)
(declare-fun x144 () Bool)
(declare-fun x60 () Bool)
(declare-fun x135 () Int)
(declare-fun x62 () Bool)
(declare-fun x319 () Bool)
(declare-fun x361 () Int)
(declare-fun x268 () Bool)
(declare-fun x8 () Int)
(declare-fun x133 () Int)
(declare-fun x244 () Int)
(declare-fun x10 () Int)
(declare-fun x106 () Int)
(declare-fun x86 () Int)
(declare-fun x219 () Int)
(declare-fun x200 () Int)
(declare-fun x78 () Int)
(declare-fun x235 (Int) Int)
(declare-fun x152 () Int)
(declare-fun x238 () Int)
(declare-fun x180 () Bool)
(declare-fun x310 () Int)
(declare-fun x264 () Int)
(declare-fun x52 () Int)
(declare-fun x51 () Int)
(declare-fun x94 () Int)
(declare-fun x277 () Bool)
(declare-fun x263 () Int)
(declare-fun x359 () Bool)
(declare-fun x182 () Bool)
(declare-fun x195 () Int)
(declare-fun x328 () Bool)
(declare-fun x161 () Int)
(declare-fun x233 () Int)
(declare-fun x266 () Int)
(declare-fun x187 () Bool)
(declare-fun x61 () Int)
(declare-fun x140 () Int)
(declare-fun x209 () Bool)
(declare-fun x36 () Int)
(declare-fun x45 () Int)
(declare-fun x28 () Int)
(declare-fun x19 () Int)
(declare-fun x272 () Bool)
(declare-fun x122 () Bool)
(declare-fun x254 () Int)
(declare-fun x193 () Int)
(declare-fun x334 () Bool)
(declare-fun x181 () Int)
(declare-fun x247 () Int)
(declare-fun x54 () Bool)
(declare-fun x18 () Int)
(declare-fun x259 () Int)
(declare-fun x77 () Int)
(declare-fun x82 () Int)
(declare-fun x239 () Int)
(declare-fun x96 () Int)
(declare-fun x224 () Int)
(declare-fun x265 () Bool)
(declare-fun x307 () Int)
(declare-fun x240 () Int)
(declare-fun x139 () Int)
(declare-fun x46 () Bool)
(declare-fun x220 () Int)
(declare-fun x258 () Bool)
(declare-fun x300 () Int)
(declare-fun x289 () Bool)
(declare-fun x38 () Bool)
(declare-fun x41 () Int)
(declare-fun x222 () Bool)
(declare-fun x65 () Bool)
(declare-fun x298 () Bool)
(declare-fun x253 () Bool)
(declare-fun x128 () Bool)
(declare-fun x313 (Int) Int)
(declare-fun x108 () Int)
(declare-fun x34 () Bool)
(declare-fun x9 () Int)
(declare-fun x24 () Bool)
(declare-fun x137 () Bool)
(declare-fun x189 () Bool)
(declare-fun x59 () Int)
(declare-fun x3 () Int)
(declare-fun x71 () Bool)
(declare-fun x192 () Int)
(declare-fun x351 () Bool)
(declare-fun x260 () Bool)
(declare-fun x208 () Bool)
(declare-fun x74 () Int)
(declare-fun x157 () Bool)
(declare-fun x255 () Int)
(declare-fun x37 () Int)
(declare-fun x315 () Int)
(declare-fun x288 () Int)
(declare-fun x163 () Int)
(declare-fun x67 () Int)
(declare-fun x305 () Bool)
(declare-fun x79 () Bool)
(declare-fun x22 () Int)
(declare-fun x297 () Int)
(declare-fun x342 () Int)
(declare-fun x49 () Int)
(declare-fun x47 (Int) Int)
(declare-fun x271 () Int)
(declare-fun x125 () Int)
(declare-fun x340 () Bool)
(declare-fun x245 () Int)
(declare-fun x120 () Bool)
(declare-fun x39 () Int)
(declare-fun x23 () Bool)
(declare-fun x113 () Int)
(declare-fun x105 () Int)
(declare-fun x308 () Bool)
(declare-fun x221 () Int)
(declare-fun x12 () Int)
(declare-fun x295 () Int)
(declare-fun x333 () Bool)
(declare-fun x332 () Bool)
(declare-fun x142 () Int)
(declare-fun x199 () Int)
(declare-fun x31 () Bool)
(declare-fun x17 () Bool)
(declare-fun x141 () Int)
(declare-fun x76 () Int)
(declare-fun x304 () Int)
(declare-fun x248 () Int)
(declare-fun x309 () Int)
(declare-fun x197 () Int)
(declare-fun x14 () Int)
(declare-fun x246 () Int)
(declare-fun x229 () Int)
(declare-fun x63 () Int)
(declare-fun x243 () Bool)
(declare-fun x275 () Int)
(declare-fun x32 () Bool)
(declare-fun x53 () Bool)
(declare-fun x276 () Bool)
(declare-fun x191 () Int)
(declare-fun x93 () Bool)
(declare-fun x202 () Int)
(declare-fun x56 () Int)
(declare-fun x214 () Int)
(declare-fun x145 () Bool)
(declare-fun x293 () Int)
(declare-fun x129 () Bool)
(declare-fun x119 () Int)
(declare-fun x138 () Int)
(declare-fun x136 () Int)
(declare-fun x143 () Bool)
(declare-fun x155 () Int)
(declare-fun x230 () Int)
(declare-fun x7 () Int)
(declare-fun x151 () Int)
(declare-fun x101 () Bool)
(declare-fun x175 () Int)
(declare-fun x112 () Bool)
(declare-fun x267 () Int)
(declare-fun x249 () Int)
(declare-fun x283 () Int)
(declare-fun x306 () Int)
(declare-fun x223 () Bool)
(declare-fun x21 () Bool)
(declare-fun x117 () Bool)
(declare-fun x25 () Int)
(declare-fun x97 () Bool)
(declare-fun x232 (Int) Int)
(declare-fun x234 () Int)
(declare-fun x170 () Int)
(declare-fun x312 () Int)
(declare-fun x6 () Bool)
(declare-fun x178 () Int)
(declare-fun x64 () Bool)
(declare-fun x326 () Int)
(declare-fun x327 () Int)
(declare-fun x171 (Int) Int)
(declare-fun x198 () Bool)
(declare-fun x115 () Int)
(declare-fun x341 () Int)
(declare-fun x179 (Int Int Int) Int)
(declare-fun x72 () Bool)
(declare-fun x236 () Int)
(declare-fun x124 () Int)
(declare-fun x83 () Bool)
(declare-fun x69 () Int)
(declare-fun x103 () Bool)
(declare-fun x146 () Int)
(declare-fun x237 () Bool)
(declare-fun x360 () Bool)
(declare-fun x316 () Bool)
(declare-fun x99 () Int)
(declare-fun x339 () Int)
(declare-fun x153 () Int)
(declare-fun x252 () Bool)
(declare-fun x301 () Bool)
(declare-fun x29 () Int)
(declare-fun x201 () Int)
(declare-fun x84 () Int)
(declare-fun x87 () Int)
(declare-fun x296 () Int)
(declare-fun x210 () Bool)
(declare-fun x356 () Int)
(declare-fun x335 () Int)
(declare-fun x203 () Bool)
(declare-fun x95 () Int)
(declare-fun x127 () Bool)
(declare-fun x173 () Int)
(declare-fun x280 () Int)
(declare-fun x324 () Bool)
(declare-fun x269 () Bool)
(declare-fun x262 () Int)
(declare-fun x48 (Int) Int)
(declare-fun x20 () Bool)
(declare-fun x126 () Int)
(declare-fun x352 () Bool)
(declare-fun x349 () Int)
(declare-fun x231 () Int)
(declare-fun x270 () Int)
(declare-fun x274 () Bool)
(declare-fun x156 () Int)
(declare-fun x343 () Int)
(declare-fun x75 () Bool)
(declare-fun x134 () Int)
(declare-fun x290 () Int)
(declare-fun x287 () Int)
(declare-fun x357 (Int) Int)
(declare-fun x212 () Int)
(declare-fun x154 () Int)
(declare-fun x216 () Int)
(declare-fun x30 () Int)
(declare-fun x205 () Bool)
(declare-fun x111 (Int) Int)
(declare-fun x190 () Bool)
(declare-fun x188 () Int)
(declare-fun x281 () Int)
(declare-fun x303 () Bool)
(declare-fun x13 () Bool)
(declare-fun x344 () Int)
(declare-fun x174 () Bool)
(declare-fun x291 () Int)
(declare-fun x92 () Bool)
(declare-fun x227 () Int)
(declare-fun x228 () Int)
(declare-fun x217 () Bool)
(declare-fun x172 () Int)
(declare-fun x80 () Int)
(declare-fun x1 () Int)
(declare-fun x257 () Int)
(declare-fun x114 () Int)
(declare-fun x26 () Bool)
(declare-fun x149 () Bool)
(declare-fun x159 () Bool)
(declare-fun x2 () Int)
(declare-fun x282 (Int) Int)
(declare-fun x98 () Int)
(declare-fun x158 () Bool)
(declare-fun x100 () Int)
(declare-fun x4 () Int)
(declare-fun x285 () Int)
(define-fun x160 ((x302 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x302) (>= x302 0)) x302 (- x302 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x346 ((x302 Int)) Int (ite (and (< x302 0) (>= x302 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x302 115792089237316195423570985008687907853269984665640564039457584007913129639936) x302))
(define-fun x123 ((x353 Int)) Bool (and (>= x353 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x353)))
(define-fun x330 ((x5 Int)) Int 0)
(define-fun x278 ((x5 Int)) Int (ite (> x19 x5) (x42 x5) 0))
(define-fun x299 ((x5 Int)) Int (ite (and (> x19 x5) (<= 0 x5)) (x317 x5) (x278 x5)))
(define-fun x73 ((x5 Int)) Int (ite (= x5 x358) x212 (x171 x5)))
(define-fun x251 ((x5 Int)) Int (ite (= x181 x5) x11 (x73 x5)))
(define-fun x320 ((x5 Int)) Int (ite (= x300 x5) x306 (x48 x5)))
(define-fun x58 ((x5 Int)) Int (ite (= x215 x5) x45 (x111 x5)))
(define-fun x294 ((x5 Int)) Int (ite (= x140 x5) x173 (x357 x5)))
(define-fun x314 ((x5 Int)) Int (ite (= x84 x5) x138 (x207 x5)))
(define-fun x331 ((x5 Int)) Int 0)
(define-fun x183 ((x5 Int)) Int (ite (= x116 x5) x9 (x58 x5)))
(define-fun x15 ((x5 Int)) Int (ite (= x28 x5) x293 (x294 x5)))
(define-fun x50 ((x5 Int)) Int (ite (= x5 x361) x67 (x314 x5)))
(assert (x123 x192))
(assert (x123 x63))
(assert (x123 x188))
(assert (= (x47 (x179 64 x201 156)) 156))
(assert (= 64 (x313 (x179 64 x195 x240))))
(assert (x123 x61))
(assert (x123 x283))
(assert (=> (<= x248 10000) (= 0 (x232 x248))))
(assert (= x308 (and x24 x190)))
(assert (not (x196 (x179 64 x195 x121))))
(assert (x123 x126))
(assert (x123 x195))
(assert (x123 x255))
(assert (x123 x56))
(assert (= x195 (x282 (x179 64 x195 x121))))
(assert (= (x179 64 x201 156) (x232 (x179 64 x201 156))))
(assert (= (x282 (x179 64 x201 161)) x201))
(assert (x123 x280))
(assert (x123 x297))
(assert (x123 x119))
(assert (= (and x303 x65) x137))
(assert (= x23 (=> (and (and (= (x91 x345) x164) (= x345 (x179 64 x201 161)) (= x222 (= x164 0)) (<= x164 2)) (or (and (and (= (x314 x266) x18) (= x266 (x179 64 x201 159)) (= x18 x141)) (not x222)) (and (and (= x77 (* x169 x94)) (= (x294 x219) x175) (= x77 x107) (= x244 (+ x175 x107)) (>= x77 0) (>= x244 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x175 x107)) (<= x77 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x94 (x58 x25)) (= x342 x141) (= (x179 64 x201 158) x219) (= x25 (x179 64 x201 156)) (= x342 x244) (< (* x169 x94) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x244)) x222))) x269)))
(assert (x123 x163))
(assert (x123 x212))
(assert (x123 x106))
(assert (x123 x271))
(assert (x123 x4))
(assert (= x198 (and x117 x274)))
(assert (= (x313 (x179 64 x201 158)) 64))
(assert (x123 x51))
(assert (=> (= 0 x169) (= (div x124 x169) 0)))
(assert (= (=> (and (= x67 x115) (= x188 x9) (= x335 x293)) x252) x305))
(assert (x123 x164))
(assert (x123 x358))
(assert (= (x179 64 x165 162) (x232 (x179 64 x165 162))))
(assert (= (and (not x159) x268) x323))
(assert (= x332 (or x301 x103)))
(assert (< (x179 64 x201 159) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x123 x104))
(assert (< 10000 (x179 64 x201 156)))
(assert (= (x313 (x179 64 x201 159)) 64))
(assert (not (x196 (x179 64 x195 x240))))
(assert (= x102 (or x328 x97)))
(assert (x123 x224))
(assert (= (x232 57896044618658097711785492504343953926634992332820282019728792003956564819967) 0))
(assert (= (or x359 x194) x97))
(assert (x123 x228))
(assert (x123 x169))
(assert (x123 x307))
(assert (= x131 (=> (and (= x45 x297) (= 0 x138) (= x230 x173)) x182)))
(assert (x123 x165))
(assert (x123 x151))
(assert (x123 x349))
(assert (< (x179 64 x165 158) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= x158 (=> (and (not (< x231 x104)) (= x93 (= x96 0)) (= x307 (x346 (- x231 x104))) (>= 2 x96) (= 0 x155) (= (x179 64 x165 161) x202) (= (x91 x202) x96)) (and (=> (and x93 (and (= (= 0 x169) x62) (or (and (and (>= x169 1) (= (mod x307 x169) x230) (= (div x307 x169) x10) (= x297 x10)) (not x62)) (and x62 (and (= x307 x230) (= 0 x297)))))) x131) (=> (and (= x274 (= x96 1)) (not x93)) (and (=> (and x274 (and (= x56 x307) (= x249 0) (= 0 x33))) x258) (=> (and (and (and (= x74 (+ x307 x271)) (<= 0 x355) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x61 x169)) (= (x179 64 x165 156) x86) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x271 x307)) (not (> x163 x247)) (<= 0 x233) (= (x179 64 x165 158) x7) (= x271 x355) (<= x233 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x74) (<= x355 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x179 64 x165 159) x343) (= x124 (x346 (- x247 x163))) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x326 x30)) (<= 0 x74) (= (x207 x343) x163) (= (x357 x7) x30) (= x233 (* x61 x169)) (= (= x169 0) x190) (= x61 (x111 x86)) (= x355 (+ x326 x30)) (= x74 x247) (= x233 x326)) (or (and (not x190) (and (= x40 x262) (= (div x124 x169) x262) (<= 1 x169) (= (mod x124 x169) x90))) (and (and (= 0 x40) (= x90 x124)) x190))) (not x274)) x166)))))))
(assert (x123 x218))
(assert (x123 x325))
(assert (x123 x175))
(assert (= (x282 (x179 64 x165 159)) x165))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x179 64 x165 159)))
(assert (x123 x267))
(assert (=> (<= x257 10000) (= (x232 x257) 0)))
(assert (x123 x3))
(assert (< 10000 (x179 64 x201 161)))
(assert (= (and x185 x60) x359))
(assert (not (x196 (x179 64 x201 156))))
(assert (= (x179 64 x165 158) (x232 (x179 64 x165 158))))
(assert (= x333 (and (not x174) x102)))
(assert (x123 x284))
(assert (not (x196 (x179 64 x201 161))))
(assert (x123 x236))
(assert (x196 404098525))
(assert (x123 x37))
(assert (= 0 (x232 4294967295)))
(assert (= (=> (and (= x250 x293) (= x347 x9) (= x67 0)) x252) x217))
(assert (= x269 (=> (and (= x229 x234) (>= 2 x39) (= (+ x141 x104) x234) (<= x234 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x179 64 x201 161) x213) (= (= 0 x39) x203) (= 0 x267) (= (x91 x213) x39) (< (+ x104 x141) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= x234 0)) (and (=> (and (= (= 1 x39) x185) (not x203)) (and (=> (and x185 (and (= x188 0) (= x229 x115) (= x335 0))) x305) (=> (and (not x185) (and (or (and (not x159) (and (= (mod x142 x169) x236) (= x151 (div x142 x169)) (= x41 x151) (>= x169 1))) (and (and (= 0 x41) (= x236 x142)) x159)) (and (= x170 x339) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x55) (not (> x309 x344)) (= x315 (x179 64 x201 156)) (>= x170 0) (= (+ x133 x339) x55) (not (> x52 x304)) (>= x55 0) (< (* x169 x85) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x52 (x314 x238)) (= (x346 (- x304 x52)) x142) (= (x160 (+ x229 x309)) x304) (<= x170 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x270 (x179 64 x201 158)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x339 x133)) (= x85 (x58 x315)) (= x159 (= x169 0)) (= (x294 x270) x133) (= x170 (* x169 x85)) (= x238 (x179 64 x201 159)) (= (x346 (- (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x104) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x141)) x344) (= x55 x309)))) x350))) (=> (and x203 (and (or (and x210 (and (= x229 x250) (= x347 0))) (and (and (= x250 (mod x229 x169)) (<= 1 x169) (= x347 x66) (= (div x229 x169) x66)) (not x210))) (= (= 0 x169) x210))) x217)))))
(assert (< 10000 (x179 64 x201 158)))
(assert (x123 x227))
(assert (x123 x41))
(assert (= x128 (and (not x354) x149)))
(assert (x123 x293))
(assert (x123 x312))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x179 64 x165 162)))
(assert (< (x179 64 x195 x240) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (and (not x274) x117) x24))
(assert (= (and x253 (not x222)) x205))
(assert (= (x179 64 x165 156) (x232 (x179 64 x165 156))))
(assert (=> (>= 10000 x291) (= (x232 x291) 0)))
(assert (= x182 (=> (and (or (and (not x65) (= x99 x191)) (and x65 (and (= x82 (x346 (- x99 x104))) (not (< x99 x104)) (= x82 x191) (= x349 (x346 (- x99 x104)))))) (and (= x80 (x179 64 x165 161)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x263) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x173 x4)) (= x241 x105) (= (x357 x152) x110) (>= x263 0) (= (x179 64 x165 158) x140) (= x65 (= x312 1)) (= (x179 64 x165 156) x295) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x45 x280)) (= (+ x173 x4) x263) (= x263 x146) (not (< x105 x245)) (= x312 (x91 x80)) (= (x179 64 x165 158) x152) (= (x111 x295) x245) (= (x346 (- x105 x245)) x153) (>= 2 x312) (>= x241 0) (= (x179 64 x165 159) x84) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x241) (not (> x110 x146)) (= (x179 64 x165 156) x215) (= x99 (x346 (- x146 x110))) (= x63 (x346 (- x105 x245))) (= x241 (+ x280 x45)) (= x118 (x346 (- x146 x110))))) x23)))
(assert (= x298 (and x324 x93)))
(assert (x123 x35))
(assert (x123 x337))
(assert (x123 x249))
(assert (x123 x105))
(assert (x123 x290))
(assert (= x103 (and (not x62) x298)))
(assert (= x121 (x47 (x179 64 x195 x121))))
(assert (= (x47 (x179 64 x165 156)) 156))
(assert (x123 x45))
(assert (= (and x253 x222) x273))
(assert (= (or x333 x109) x360))
(assert (< 10000 (x179 64 x165 156)))
(assert (= x258 (=> (and (= x45 x33) (= x249 x173) (= x138 x56)) x182)))
(assert (< 10000 (x179 64 x165 162)))
(assert (x123 x94))
(assert (= x60 (and x225 (not x203))))
(assert (x123 x247))
(assert (=> (>= 10000 x358) (= (x232 x358) 0)))
(assert (x123 x262))
(assert (= (x179 64 x165 161) (x232 (x179 64 x165 161))))
(assert (not (x196 (x179 64 x165 161))))
(assert (x123 x135))
(assert (= (x47 (x179 64 x165 162)) 162))
(assert (x123 x197))
(assert (= (and x102 x174) x109))
(assert (x123 x306))
(assert (x123 x1))
(assert (= x165 (x282 (x179 64 x165 158))))
(assert (x123 x231))
(assert (x123 x87))
(assert (x123 x18))
(assert (x196 1461501637330902918203684832716283019655932542975))
(assert (not (x196 (x179 64 x165 159))))
(assert (x123 x239))
(assert (= x324 (or x209 x128)))
(assert (= x301 (and x62 x298)))
(assert (x123 x99))
(assert (= 64 (x313 (x179 64 x165 161))))
(assert (= (and (not x185) x60) x268))
(assert (x123 x338))
(assert (x123 x153))
(assert (= x195 (x282 (x179 64 x195 x240))))
(assert (x123 x310))
(assert (x123 x155))
(assert (x123 x89))
(assert (= x289 (=> (and (and (and (and (or (and (not x242) (and (not (< x49 x104)) (= x121 (x179 64 x165 162)) (>= x195 1) (= x306 (x346 (- x49 x104))) (>= 1461501637330902918203684832716283019655932542975 x195) (= x300 (x179 64 x195 x121)))) x242) (and (>= 127 x336) (= x11 x167) (>= 127 x336) (= (x73 x181) x167) (= (x179 64 x195 x240) x134) (= (x235 x181) x288) (= x49 (x48 x134)) (= false x132) (= x189 false) (= x37 x290) (= x212 (x171 x358)) (<= 1 x288) (= (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x49) x242) (= x310 x264) (= x87 599290589) (= x358 x341) (= (x179 64 x165 162) x240) (= x36 x125))) (= x195 x341)) (and x184 (= x37 x201) (>= x119 1) (= x275 404098525) (>= 1461501637330902918203684832716283019655932542975 x165) (= x310 x165) (= false x26) (= x192 x172) (= x172 (* x169 x280)) (<= 0 x172) (= 4 x89) (<= x281 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x276 false) (= false x352) (= x36 x104) (= x129 false) (= false x130) (<= 1 x201) (= x104 (x317 68)) (<= 0 x281) (= x119 (x235 x181)) (>= x12 0) (= (x171 x1) x12) (<= x12 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x1 x181) (= x281 x3) (>= 1461501637330902918203684832716283019655932542975 x201) (= x187 false) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x192 x4)) (= x208 false) (<= x224 127) (= x136 x228) (= (<= x3 x12) x184) (= (x317 36) x201) (<= 1 x165) (= (+ x4 x192) x281) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x280 x169)) (= x165 (x317 4)) (= x228 (x317 0)) (<= x172 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= 127 x224))) (and (not (= x257 x291)) (>= 1461501637330902918203684832716283019655932542975 x257) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x204) (>= 1461501637330902918203684832716283019655932542975 x291) (<= x135 1461501637330902918203684832716283019655932542975) (<= x206 1461501637330902918203684832716283019655932542975) (<= 0 x341) (<= x22 1461501637330902918203684832716283019655932542975) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x168) (>= x216 0) (= x88 x181) (<= 0 x329) (>= x261 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x200) (= x72 (< 0 (x235 x257))) (<= x76 1461501637330902918203684832716283019655932542975) (>= x214 0) (<= x181 1461501637330902918203684832716283019655932542975) x72 (<= x100 1461501637330902918203684832716283019655932542975) (<= 1 x186) (= x193 599290589) x157 (= x112 false) (>= 1461501637330902918203684832716283019655932542975 x186) (>= x19 100) (= x81 0) (= x157 (> (x235 x291) 0)) (not (= x291 x186)) (not (= x181 x291)) (<= 1 x181) (not (= x186 x181)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x216) (<= x261 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 3 x220) (not (= x186 x257)) (= x180 (> (x235 x186) 0)) (>= 255 x296) (<= 0 x100) (>= x257 1) (<= x329 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x327 0) (= false x79) (= false x120) (= x57 false) x147 (>= 1461501637330902918203684832716283019655932542975 x239) x180 (<= x214 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= 1461501637330902918203684832716283019655932542975 x95) (>= x95 0) (= x181 x254) (<= 0 x76) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x19) (not (= x257 x181)) (>= x291 1) (= (< 0 (x235 x181)) x147) (>= x204 0) (>= x200 0) (<= 0 x168) (<= x327 4294967295) (>= 1461501637330902918203684832716283019655932542975 x341))) x6)))
(assert (= x318 (and x225 x203)))
(assert (x123 x181))
(assert (x123 x335))
(assert (x123 x52))
(assert (= 0 (x232 599290589)))
(assert (=> (= 0 x169) (= (div x142 x169) 0)))
(assert (x123 x167))
(assert (x123 x118))
(assert (x123 x133))
(assert (= (x47 (x179 64 x165 158)) 158))
(assert (= 161 (x47 (x179 64 x201 161))))
(assert (x123 x304))
(assert (=> (>= 10000 x181) (= 0 (x232 x181))))
(assert (x123 x9))
(assert (= (=> (and (= x90 x249) (= x56 x307) (= x33 x40)) x258) x166))
(assert (x123 x19))
(assert (= x201 (x282 (x179 64 x201 158))))
(assert (= x303 (or x38 x332)))
(assert (x123 x339))
(assert (not (x196 (x179 64 x201 158))))
(assert (= (and x177 (not x242)) x27))
(assert (= (x179 64 x165 159) (x232 (x179 64 x165 159))))
(assert (= 64 (x313 (x179 64 x165 159))))
(assert (= x162 (and x210 x318)))
(assert (< (x179 64 x201 158) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x123 x33))
(assert (x123 x110))
(assert (= (x313 (x179 64 x165 158)) 64))
(assert (= x6 (=> (and (or (and (not x354) (and (= x199 x231) (= x221 (x179 64 x165 159)) (= (x207 x221) x199))) (and (and (= (x179 64 x165 156) x98) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x169 x227)) (= (* x227 x169) x256) (= (x179 64 x165 158) x8) (= (x357 x8) x68) (= x283 x226) (= x283 x231) (<= 0 x256) (= (x111 x98) x227) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x226) (<= 0 x226) (<= x256 115792089237316195423570985008687907853269984665640564039457584007913129639935) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x68 x197)) (= x256 x197) (= (+ x68 x197) x226)) x354)) (and (>= 2 x139) (= x176 (x179 64 x165 161)) (= x139 (x91 x176)) (= x354 (= x139 0)))) x158)))
(assert (x123 x124))
(assert (=> (<= x1 10000) (= 0 (x232 x1))))
(assert (x123 x108))
(assert (x196 57896044618658097711785492504343953926634992332820282019728792003956564819967))
(assert (x123 x82))
(assert (= (x232 1461501637330902918203684832716283019655932542975) 0))
(assert (x123 x285))
(assert (= (=> (and (and (<= x178 2) (= x356 x246) (= x356 (+ x63 x9)) (>= x356 0) (= x69 (x179 64 x201 161)) (<= x356 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x70 x287) (= (x179 64 x201 156) x116) (= x211 (x294 x59)) (= x108 (x58 x154)) (= (x91 x69) x178) (= (x346 (- x246 x108)) x255) (= (x346 (- x287 x211)) x14) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x9 x63)) (<= 0 x70) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x293 x191)) (= (x346 (- x287 x211)) x161) (not (> x108 x246)) (= (x179 64 x201 158) x28) (= (x179 64 x201 158) x59) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x70) (= x284 (x346 (- x246 x108))) (= (x179 64 x201 156) x154) (= x361 (x179 64 x201 159)) (= x70 (+ x293 x191)) (= (= x178 1) x174) (not (< x287 x211))) (or (and x174 (and (= x150 x114) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x104 x14)) (= x325 x150) (<= x150 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x150) (= x338 x150) (= (+ x104 x14) x150))) (and (not x174) (= x338 x14)))) x144) x252))
(assert (= (and x268 x159) x20))
(assert (x123 x275))
(assert (=> (= x169 0) (= 0 (div x229 x169))))
(assert (x123 x211))
(assert (not (x196 (x179 64 x165 158))))
(assert (x123 x139))
(assert (x123 x36))
(assert (x123 x250))
(assert (x196 4294967295))
(assert (x123 x344))
(assert (< (x179 64 x165 161) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= x328 (or x13 x162)))
(assert (x123 x259))
(assert (x123 x115))
(assert (= (and (not x93) x324) x117))
(assert (= x149 (or x27 x127)))
(assert (x123 x40))
(assert (= x209 (and x149 x354)))
(assert (= (and x242 x177) x127))
(assert (=> (>= 10000 x186) (= 0 (x232 x186))))
(assert (x123 x67))
(assert (x123 x191))
(assert (x123 x309))
(assert (= (and (not x190) x24) x348))
(assert (x123 x11))
(assert (= (x232 115792089237316195423570985008687907853269984665640564039457584007913129639935) 0))
(assert (= (x313 (x179 64 x201 161)) 64))
(assert (= (x179 64 x201 161) (x232 (x179 64 x201 161))))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x179 64 x165 156)))
(assert (= 64 (x313 (x179 64 x195 x121))))
(assert (= (x232 (x179 64 x201 158)) (x179 64 x201 158)))
(assert (x123 x288))
(assert (x123 x125))
(assert (x123 x14))
(assert (> (x179 64 x165 159) 10000))
(assert (> (x179 64 x165 161) 10000))
(assert (x123 x178))
(assert (= (x47 (x179 64 x201 158)) 158))
(assert (= (or x348 x308) x260))
(assert (= (or x273 x205) x225))
(assert (=> (<= x195 10000) (= (x232 x195) 0)))
(assert (x123 x291))
(assert (x123 x30))
(assert (x123 x114))
(assert (=> (= x169 0) (= 0 (div x307 x169))))
(assert (= (x313 (x179 64 x165 162)) 64))
(assert (= x177 true))
(assert (= 159 (x47 (x179 64 x165 159))))
(assert (x123 x138))
(assert (> (x179 64 x195 x240) 10000))
(assert (= (and x318 (not x210)) x13))
(assert (> (x179 64 x165 158) 10000))
(assert (not x289))
(assert (x123 x296))
(assert (x123 x287))
(assert (x123 x248))
(assert (= (x282 (x179 64 x165 156)) x165))
(assert (x196 599290589))
(assert (= (x232 (x179 64 x201 159)) (x179 64 x201 159)))
(assert (= (x313 (x179 64 x165 156)) 64))
(assert (x123 x113))
(assert (= 0 (x232 404098525)))
(assert (x123 x206))
(assert (= (x232 (x179 64 x195 x240)) (x179 64 x195 x240)))
(assert (x123 x336))
(assert (< (x179 64 x195 x121) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x123 x257))
(assert (< 10000 (x179 64 x195 x121)))
(assert (not (x196 (x179 64 x201 159))))
(assert (x123 x85))
(assert (= (and (not x65) x303) x101))
(assert (x123 x245))
(assert (x123 x39))
(assert (= x38 (or x260 x198)))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x179 64 x201 156)))
(assert (= 159 (x47 (x179 64 x201 159))))
(assert (x123 x141))
(assert (x123 x173))
(assert (x123 x199))
(assert (= x240 (x47 (x179 64 x195 x240))))
(assert (x123 x142))
(assert (not (x196 (x179 64 x165 156))))
(assert (= (=> (and (and (= x156 x218) (= false x21) (= x248 x181) (>= 127 x51) (= x31 false) (= x113 x2) (<= 1 x35) (>= x2 0) (= 4 x337) (>= x156 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x2) (= x29 (x251 x248)) (>= 127 x51) (<= x29 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x29 0) (= false x53) (= (x235 x181) x35) (< (* x169 x255) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (* x169 x255) x2) (= (+ x338 x113) x156) (= x340 (<= x218 x29)) (= false x71) (= x106 404098525) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x156) (= false x16) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x113 x338)) (= false x145)) (and (= false x316) (= x319 false) (= x122 false) (= x259 1) (= x64 false))) x340) x144))
(assert (x123 x146))
(assert (x123 x96))
(assert (=> (>= 10000 x201) (= (x232 x201) 0)))
(assert (x123 x229))
(assert (x123 x107))
(assert (x196 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (= (=> (and (= x335 x236) (= x229 x115) (= x41 x188)) x305) x350))
(assert (=> (>= 10000 x165) (= 0 (x232 x165))))
(assert (x123 x326))
(assert (x123 x78))
(assert (x123 x201))
(assert (= (x179 64 x195 x121) (x232 (x179 64 x195 x121))))
(assert (x123 x10))
(assert (x123 x68))
(assert (< 10000 (x179 64 x201 159)))
(assert (= x253 (or x101 x137)))
(assert (= (or x323 x20) x194))
(assert (x123 x90))
(assert (not (x196 (x179 64 x165 162))))
(assert (< (x179 64 x201 161) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (x282 (x179 64 x165 162)) x165))
(assert (x123 x264))
(assert (x123 x342))
(assert (x123 x246))
(assert (x123 x22))
(assert (x123 x49))
(assert (= x201 (x282 (x179 64 x201 159))))
(assert (x123 x66))
(assert (= 161 (x47 (x179 64 x165 161))))
(assert (x123 x161))
(assert (x123 x136))
(assert (= (x282 (x179 64 x165 161)) x165))
(assert (x123 x186))
(assert (x123 x230))
(assert (= (x282 (x179 64 x201 156)) x201))
(assert (x123 x347))
(assert (= (x313 (x179 64 x201 156)) 64))
(check-sat)
(exit)
