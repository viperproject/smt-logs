(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Certora
Generated on: 2024-04-10
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x357 () Int)
(declare-fun x500 () Bool)
(declare-fun x135 () Bool)
(declare-fun x499 () Bool)
(declare-fun x173 () Bool)
(declare-fun x34 () Int)
(declare-fun x88 () Int)
(declare-fun x568 () Int)
(declare-fun x510 () Int)
(declare-fun x523 () Int)
(declare-fun x358 () Int)
(declare-fun x183 () Bool)
(declare-fun x214 () Int)
(declare-fun x128 () Int)
(declare-fun x52 () Bool)
(declare-fun x212 () Bool)
(declare-fun x475 () Bool)
(declare-fun x596 () Bool)
(declare-fun x193 () Int)
(declare-fun x123 () Int)
(declare-fun x528 () Int)
(declare-fun x115 () Int)
(declare-fun x433 () Int)
(declare-fun x244 () Int)
(declare-fun x589 () Int)
(declare-fun x330 () Int)
(declare-fun x291 () Int)
(declare-fun x204 () Int)
(declare-fun x84 () Int)
(declare-fun x265 () Int)
(declare-fun x238 () Int)
(declare-fun x455 () Int)
(declare-fun x408 () Int)
(declare-fun x225 () Int)
(declare-fun x440 () Int)
(declare-fun x385 () Int)
(declare-fun x559 () Bool)
(declare-fun x234 () Int)
(declare-fun x258 (Int) Int)
(declare-fun x602 () Bool)
(declare-fun x465 () Int)
(declare-fun x538 () Int)
(declare-fun x279 () Int)
(declare-fun x419 () Bool)
(declare-fun x199 () Int)
(declare-fun x190 () Bool)
(declare-fun x354 () Bool)
(declare-fun x285 () Bool)
(declare-fun x561 () Int)
(declare-fun x120 () Int)
(declare-fun x147 (Int) Int)
(declare-fun x474 () Int)
(declare-fun x129 () Int)
(declare-fun x592 () Int)
(declare-fun x485 () Int)
(declare-fun x529 () Int)
(declare-fun x587 () Int)
(declare-fun x420 () Bool)
(declare-fun x565 () Int)
(declare-fun x507 () Int)
(declare-fun x388 () Bool)
(declare-fun x252 () Bool)
(declare-fun x426 () Int)
(declare-fun x2 () Int)
(declare-fun x21 () Int)
(declare-fun x450 () Bool)
(declare-fun x1 () Int)
(declare-fun x121 () Int)
(declare-fun x580 () Int)
(declare-fun x577 () Bool)
(declare-fun x185 () Int)
(declare-fun x298 () Bool)
(declare-fun x255 () Int)
(declare-fun x253 () Int)
(declare-fun x449 () Int)
(declare-fun x223 () Int)
(declare-fun x579 () Int)
(declare-fun x22 () Int)
(declare-fun x377 () Int)
(declare-fun x387 () Int)
(declare-fun x246 () Int)
(declare-fun x306 () Bool)
(declare-fun x544 () Bool)
(declare-fun x548 () Bool)
(declare-fun x603 () Int)
(declare-fun x262 () Int)
(declare-fun x25 () Int)
(declare-fun x235 () Int)
(declare-fun x92 () Bool)
(declare-fun x158 () Bool)
(declare-fun x593 () Int)
(declare-fun x540 () Bool)
(declare-fun x162 () Int)
(declare-fun x286 () Bool)
(declare-fun x257 () Int)
(declare-fun x82 () Int)
(declare-fun x567 () Int)
(declare-fun x312 () Int)
(declare-fun x251 () Int)
(declare-fun x153 () Int)
(declare-fun x421 () Bool)
(declare-fun x340 (Int) Int)
(declare-fun x310 () Int)
(declare-fun x524 () Int)
(declare-fun x250 (Int Int) Int)
(declare-fun x362 () Int)
(declare-fun x91 () Bool)
(declare-fun x534 () Int)
(declare-fun x488 (Int) Int)
(declare-fun x4 () Bool)
(declare-fun x389 () Bool)
(declare-fun x576 () Bool)
(declare-fun x319 () Bool)
(declare-fun x442 () Int)
(declare-fun x39 () Bool)
(declare-fun x512 () Int)
(declare-fun x436 () Int)
(declare-fun x402 () Int)
(declare-fun x270 () Bool)
(declare-fun x487 () Bool)
(declare-fun x555 () Int)
(declare-fun x459 () Int)
(declare-fun x26 () Int)
(declare-fun x581 () Int)
(declare-fun x32 () Int)
(declare-fun x332 () Bool)
(declare-fun x355 () Bool)
(declare-fun x19 () Int)
(declare-fun x18 () Int)
(declare-fun x302 () Bool)
(declare-fun x542 () Int)
(declare-fun x447 () Bool)
(declare-fun x391 () Int)
(declare-fun x338 () Int)
(declare-fun x205 () Int)
(declare-fun x353 () Bool)
(declare-fun x292 () Bool)
(declare-fun x331 (Int) Int)
(declare-fun x72 () Bool)
(declare-fun x333 () Int)
(declare-fun x134 () Int)
(declare-fun x12 () Bool)
(declare-fun x87 () Bool)
(declare-fun x582 () Bool)
(declare-fun x516 () Bool)
(declare-fun x379 () Int)
(declare-fun x86 () Int)
(declare-fun x479 () Int)
(declare-fun x76 (Int Int Int) Int)
(declare-fun x73 () Bool)
(declare-fun x57 () Bool)
(declare-fun x373 () Bool)
(declare-fun x299 () Int)
(declare-fun x375 () Int)
(declare-fun x127 () Int)
(declare-fun x364 () Int)
(declare-fun x321 () Int)
(declare-fun x610 () Int)
(declare-fun x496 () Int)
(declare-fun x263 () Int)
(declare-fun x108 () Int)
(declare-fun x323 () Int)
(declare-fun x570 () Int)
(declare-fun x432 () Int)
(declare-fun x553 () Bool)
(declare-fun x314 () Bool)
(declare-fun x604 () Int)
(declare-fun x501 () Bool)
(declare-fun x597 () Int)
(declare-fun x236 () Int)
(declare-fun x249 () Int)
(declare-fun x131 () Int)
(declare-fun x345 () Int)
(declare-fun x309 () Int)
(declare-fun x282 () Bool)
(declare-fun x586 () Int)
(declare-fun x343 () Bool)
(declare-fun x395 () Int)
(declare-fun x177 () Int)
(declare-fun x571 () Int)
(declare-fun x489 (Int) Bool)
(declare-fun x56 () Bool)
(declare-fun x95 () Bool)
(declare-fun x161 () Int)
(declare-fun x65 () Bool)
(declare-fun x497 () Bool)
(declare-fun x612 () Bool)
(declare-fun x313 () Int)
(declare-fun x48 () Int)
(declare-fun x376 () Int)
(declare-fun x552 () Bool)
(declare-fun x107 () Bool)
(declare-fun x133 () Int)
(declare-fun x429 () Int)
(declare-fun x468 () Bool)
(declare-fun x227 () Int)
(declare-fun x317 (Int) Int)
(declare-fun x264 () Int)
(declare-fun x187 () Bool)
(declare-fun x368 () Int)
(declare-fun x490 () Bool)
(declare-fun x441 () Int)
(declare-fun x20 () Int)
(declare-fun x68 () Bool)
(declare-fun x539 () Int)
(declare-fun x366 () Int)
(declare-fun x9 () Bool)
(declare-fun x348 (Int Int) Int)
(declare-fun x233 () Bool)
(declare-fun x493 () Int)
(declare-fun x325 () Int)
(declare-fun x297 () Int)
(declare-fun x551 () Bool)
(declare-fun x415 () Bool)
(declare-fun x259 () Int)
(declare-fun x267 () Bool)
(declare-fun x417 () Int)
(declare-fun x504 () Bool)
(declare-fun x33 () Bool)
(declare-fun x152 () Bool)
(declare-fun x431 () Bool)
(declare-fun x6 () Bool)
(declare-fun x384 () Bool)
(declare-fun x381 () Bool)
(declare-fun x609 () Int)
(declare-fun x492 () Int)
(declare-fun x522 () Int)
(declare-fun x178 () Int)
(declare-fun x156 () Bool)
(declare-fun x443 () Bool)
(declare-fun x359 () Int)
(declare-fun x370 () Int)
(declare-fun x411 () Bool)
(declare-fun x113 () Int)
(declare-fun x513 () Int)
(declare-fun x139 () Bool)
(declare-fun x14 () Int)
(declare-fun x38 () Bool)
(declare-fun x326 () Int)
(declare-fun x360 () Int)
(declare-fun x7 () Int)
(declare-fun x320 () Int)
(declare-fun x206 () Int)
(declare-fun x64 () Int)
(declare-fun x401 () Bool)
(declare-fun x467 () Bool)
(declare-fun x168 () Int)
(declare-fun x518 () Int)
(declare-fun x382 () Int)
(declare-fun x268 () Bool)
(declare-fun x261 () Int)
(declare-fun x169 () Bool)
(declare-fun x533 () Int)
(declare-fun x452 () Int)
(declare-fun x150 () Int)
(declare-fun x197 () Int)
(declare-fun x132 () Int)
(declare-fun x209 () Int)
(declare-fun x138 () Bool)
(declare-fun x335 () Int)
(declare-fun x55 () Int)
(declare-fun x483 () Int)
(declare-fun x361 () Int)
(declare-fun x336 (Int) Int)
(declare-fun x503 () Int)
(declare-fun x83 () Int)
(declare-fun x110 () Int)
(declare-fun x70 () Int)
(declare-fun x573 () Bool)
(declare-fun x130 () Bool)
(declare-fun x149 () Int)
(declare-fun x466 () Bool)
(declare-fun x67 () Int)
(declare-fun x272 () Bool)
(declare-fun x566 () Int)
(declare-fun x521 () Bool)
(declare-fun x248 () Bool)
(declare-fun x422 () Bool)
(declare-fun x124 () Int)
(declare-fun x69 () Bool)
(declare-fun x556 (Int Int) Int)
(declare-fun x164 () Bool)
(declare-fun x288 () Int)
(declare-fun x400 () Bool)
(declare-fun x457 () Int)
(declare-fun x10 () Bool)
(declare-fun x97 () Int)
(declare-fun x515 () Bool)
(declare-fun x444 () Int)
(declare-fun x480 () Bool)
(declare-fun x509 () Int)
(declare-fun x143 () Bool)
(declare-fun x423 () Bool)
(declare-fun x508 () Int)
(declare-fun x416 () Int)
(declare-fun x463 (Int Int) Int)
(declare-fun x393 () Int)
(declare-fun x29 (Int Int) Int)
(declare-fun x50 () Int)
(declare-fun x42 () Bool)
(declare-fun x519 () Bool)
(declare-fun x228 () Int)
(declare-fun x125 () Int)
(declare-fun x220 () Int)
(declare-fun x517 () Int)
(declare-fun x240 () Bool)
(declare-fun x484 () Int)
(declare-fun x203 () Int)
(declare-fun x514 () Bool)
(declare-fun x315 () Int)
(declare-fun x446 () Int)
(declare-fun x136 () Int)
(declare-fun x196 () Bool)
(declare-fun x226 () Int)
(declare-fun x308 () Int)
(declare-fun x49 () Bool)
(declare-fun x477 () Bool)
(declare-fun x595 () Bool)
(declare-fun x118 () Bool)
(declare-fun x75 () Int)
(declare-fun x371 () Int)
(declare-fun x563 () Bool)
(declare-fun x461 () Int)
(declare-fun x217 () Int)
(declare-fun x141 () Int)
(declare-fun x578 () Int)
(declare-fun x218 () Int)
(declare-fun x525 () Int)
(declare-fun x216 () Bool)
(declare-fun x154 () Int)
(declare-fun x498 () Bool)
(declare-fun x221 () Int)
(declare-fun x469 () Bool)
(declare-fun x148 () Int)
(declare-fun x157 () Int)
(declare-fun x413 () Bool)
(declare-fun x434 () Bool)
(declare-fun x89 () Int)
(declare-fun x81 (Int) Int)
(declare-fun x275 () Bool)
(declare-fun x281 () Bool)
(declare-fun x414 () Bool)
(declare-fun x427 () Int)
(declare-fun x403 () Bool)
(declare-fun x207 () Int)
(declare-fun x172 () Int)
(declare-fun x105 () Bool)
(declare-fun x62 () Int)
(declare-fun x305 () Int)
(declare-fun x327 () Bool)
(declare-fun x96 () Bool)
(declare-fun x349 () Int)
(declare-fun x66 () Bool)
(declare-fun x28 () Int)
(declare-fun x163 () Bool)
(declare-fun x405 () Int)
(declare-fun x159 (Int) Int)
(declare-fun x372 () Int)
(declare-fun x5 () Int)
(declare-fun x591 () Bool)
(declare-fun x374 () Bool)
(declare-fun x245 () Bool)
(declare-fun x322 () Bool)
(declare-fun x365 () Bool)
(declare-fun x41 () Int)
(declare-fun x585 () Int)
(declare-fun x341 (Int) Int)
(declare-fun x564 () Bool)
(declare-fun x137 () Int)
(declare-fun x58 () Int)
(declare-fun x404 () Bool)
(declare-fun x491 () Int)
(declare-fun x334 () Int)
(declare-fun x63 () Int)
(declare-fun x303 () Int)
(declare-fun x13 () Bool)
(declare-fun x192 () Int)
(declare-fun x215 () Int)
(declare-fun x98 () Int)
(declare-fun x283 () Int)
(declare-fun x256 () Int)
(declare-fun x543 () Bool)
(declare-fun x165 () Int)
(declare-fun x17 () Int)
(declare-fun x307 () Int)
(declare-fun x438 () Int)
(declare-fun x407 () Bool)
(declare-fun x182 () Int)
(declare-fun x482 () Int)
(declare-fun x47 () Int)
(declare-fun x356 () Bool)
(declare-fun x605 () Bool)
(declare-fun x289 () Int)
(declare-fun x536 () Bool)
(declare-fun x186 () Bool)
(declare-fun x611 () Int)
(declare-fun x437 () Int)
(declare-fun x40 () Bool)
(declare-fun x454 () Bool)
(declare-fun x273 () Int)
(declare-fun x280 () Int)
(declare-fun x486 () Bool)
(declare-fun x560 () Int)
(declare-fun x114 () Int)
(declare-fun x43 () Bool)
(declare-fun x506 () Int)
(declare-fun x274 () Int)
(declare-fun x383 () Int)
(declare-fun x44 () Int)
(declare-fun x526 () Bool)
(declare-fun x54 () Int)
(declare-fun x351 () Bool)
(declare-fun x409 () Int)
(declare-fun x344 () Int)
(declare-fun x145 () Int)
(declare-fun x410 () Int)
(declare-fun x106 () Int)
(declare-fun x45 () Bool)
(declare-fun x213 () Bool)
(declare-fun x77 () Int)
(declare-fun x266 () Bool)
(declare-fun x16 () Int)
(declare-fun x27 () Int)
(declare-fun x460 () Int)
(declare-fun x557 () Bool)
(declare-fun x574 () Bool)
(declare-fun x537 () Bool)
(declare-fun x171 () Int)
(declare-fun x254 () Int)
(declare-fun x380 () Bool)
(declare-fun x339 () Bool)
(declare-fun x243 () Int)
(declare-fun x109 () Bool)
(declare-fun x324 () Int)
(declare-fun x103 () Int)
(declare-fun x119 () Int)
(declare-fun x195 () Bool)
(declare-fun x117 () Int)
(declare-fun x367 () Int)
(declare-fun x116 () Int)
(declare-fun x90 () Int)
(declare-fun x397 () Int)
(declare-fun x363 () Bool)
(declare-fun x545 () Int)
(declare-fun x74 () Int)
(declare-fun x347 () Int)
(declare-fun x392 () Int)
(declare-fun x224 () Bool)
(declare-fun x398 () Int)
(declare-fun x219 () Int)
(declare-fun x11 () Bool)
(declare-fun x346 () Bool)
(declare-fun x471 () Bool)
(declare-fun x601 () Int)
(declare-fun x584 () Int)
(declare-fun x352 () Int)
(declare-fun x151 (Int Int) Int)
(declare-fun x284 () Int)
(declare-fun x502 () Int)
(declare-fun x293 () Int)
(declare-fun x15 () Int)
(declare-fun x160 () Int)
(declare-fun x481 () Int)
(declare-fun x425 () Int)
(declare-fun x531 () Int)
(declare-fun x495 () Int)
(declare-fun x583 () Int)
(declare-fun x472 () Bool)
(declare-fun x394 () Int)
(declare-fun x575 () Int)
(declare-fun x112 () Int)
(declare-fun x210 () Int)
(declare-fun x606 () Int)
(declare-fun x456 () Bool)
(declare-fun x60 () Int)
(declare-fun x229 () Bool)
(declare-fun x188 () Int)
(declare-fun x93 () Int)
(declare-fun x430 () Bool)
(declare-fun x198 () Bool)
(declare-fun x337 () Int)
(declare-fun x101 () Bool)
(declare-fun x396 () Int)
(declare-fun x231 () Int)
(declare-fun x36 () Int)
(declare-fun x167 (Int) Int)
(declare-fun x200 () Bool)
(declare-fun x102 () Int)
(declare-fun x276 () Bool)
(declare-fun x562 () Int)
(declare-fun x464 () Int)
(declare-fun x242 (Int) Int)
(declare-fun x600 () Int)
(declare-fun x126 () Int)
(declare-fun x170 () Bool)
(declare-fun x278 () Int)
(declare-fun x269 () Bool)
(declare-fun x232 () Bool)
(declare-fun x428 () Bool)
(declare-fun x24 () Int)
(declare-fun x549 () Bool)
(declare-fun x277 () Bool)
(declare-fun x439 () Int)
(declare-fun x311 () Int)
(declare-fun x80 () Int)
(declare-fun x304 () Int)
(declare-fun x350 () Bool)
(declare-fun x35 (Int) Int)
(declare-fun x412 () Bool)
(declare-fun x329 () Bool)
(declare-fun x476 () Int)
(declare-fun x78 (Int) Int)
(define-fun x201 ((x230 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x230) (>= x230 0)) x230 (- x230 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x176 ((x230 Int)) Int (ite (and (< x230 0) (>= x230 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x230 115792089237316195423570985008687907853269984665640564039457584007913129639936) x230))
(define-fun x494 ((x166 Int)) Bool (and (>= x166 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x166)))
(define-fun x99 ((x166 Int)) Bool (and (= (x556 x166 115792089237316195423570985008687907853269984665640564039457584007913129639935) x166) (= (x556 115792089237316195423570985008687907853269984665640564039457584007913129639935 x166) x166)))
(define-fun x435 ((x166 Int)) Bool (and (= 0 (x556 x166 0)) (= (x556 0 x166) 0)))
(define-fun x424 ((x166 Int)) Bool (= (x556 x166 x166) x166))
(define-fun x458 ((x166 Int)) Bool (and (x424 x166) (x99 x166) (x435 x166)))
(define-fun x448 ((x166 Int) (x51 Int)) Bool (= (x556 x166 x51) (x556 x51 x166)))
(define-fun x588 ((x166 Int) (x51 Int)) Bool (and (=> (>= x166 0) (>= x166 (x556 x166 x51))) (<= 0 (x556 x166 x51)) (=> (>= x51 0) (<= (x556 x166 x51) x51))))
(define-fun x104 ((x166 Int) (x51 Int)) Bool (and (x588 x166 x51) (x448 x166 x51)))
(define-fun x3 ((x166 Int)) Bool (= (mod x166 4294967296) (x556 x166 4294967295)))
(define-fun x46 ((x166 Int)) Bool (and (x3 x166) (x104 x166 4294967295)))
(define-fun x451 ((x166 Int)) Bool (= (x556 x166 1) (mod x166 2)))
(define-fun x369 ((x166 Int)) Bool (and (x451 x166) (x104 x166 1)))
(define-fun x301 ((x166 Int)) Bool (= (mod x166 128) (x556 x166 127)))
(define-fun x406 ((x166 Int)) Bool (and (x301 x166) (x104 x166 127)))
(define-fun x175 ((x166 Int)) Bool (= (mod x166 1461501637330902918203684832716283019655932542976) (x556 x166 1461501637330902918203684832716283019655932542975)))
(define-fun x174 ((x166 Int)) Bool (and (x104 x166 1461501637330902918203684832716283019655932542975) (x175 x166)))
(define-fun x390 ((x166 Int)) Bool (= (mod x166 256) (x556 x166 255)))
(define-fun x247 ((x166 Int)) Bool (and (x104 x166 255) (x390 x166)))
(define-fun x142 ((x166 Int)) Bool (= (+ (mod x166 32) (x556 x166 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (mod x166 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x295 ((x166 Int)) Bool (and (x104 x166 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x142 x166)))
(define-fun x180 ((x166 Int)) Bool (and (= (x463 115792089237316195423570985008687907853269984665640564039457584007913129639935 x166) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x463 x166 115792089237316195423570985008687907853269984665640564039457584007913129639935) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(define-fun x144 ((x166 Int)) Bool (and (= (x463 0 x166) x166) (= (x463 x166 0) x166)))
(define-fun x399 ((x166 Int)) Bool (= x166 (x463 x166 x166)))
(define-fun x194 ((x166 Int)) Bool (and (x144 x166) (x399 x166) (x180 x166)))
(define-fun x237 ((x166 Int) (x51 Int)) Bool (= (x463 x166 x51) (x463 x51 x166)))
(define-fun x473 ((x166 Int) (x51 Int)) Bool (and (=> (<= 0 x166) (>= (x463 x166 x51) x166)) (<= (x463 x166 x51) (+ x166 x51)) (=> (>= x51 0) (<= x51 (x463 x166 x51)))))
(define-fun x342 ((x166 Int) (x51 Int)) Bool (and (x237 x166 x51) (x473 x166 x51)))
(define-fun x462 ((x166 Int)) Bool (= (mod x166 32) (x556 x166 31)))
(define-fun x554 ((x166 Int)) Bool (and (x462 x166) (x104 x166 31)))
(define-fun x53 ((x166 Int)) Bool (= (x556 x166 115792089237316195423570985008687907852929702298798853738508473738074905378815) (- x166 (x556 x166 340282366841710300949110269838224261120))))
(define-fun x594 ((x166 Int)) Bool (and (x104 x166 115792089237316195423570985008687907852929702298798853738508473738074905378815) (x53 x166)))
(define-fun x558 ((x166 Int)) Bool (= (+ (mod x166 79228162514264337593543950336) (x556 x166 340282366841710300949110269838224261120)) (mod x166 340282366920938463463374607431768211456)))
(define-fun x202 ((x166 Int)) Bool (and (x558 x166) (x104 x166 340282366841710300949110269838224261120)))
(define-fun x599 ((x166 Int)) Bool (= (- x166 (x556 x166 6277101735386680763495507056286727952638980837032266301440)) (x556 x166 115792089237316195417293883273301227089774477609353836086818603170880863338495)))
(define-fun x418 ((x166 Int)) Bool (and (x104 x166 115792089237316195417293883273301227089774477609353836086818603170880863338495) (x599 x166)))
(define-fun x61 ((x166 Int)) Bool (= (+ (mod x166 340282366920938463463374607431768211456) (x556 x166 6277101735386680763495507056286727952638980837032266301440)) (mod x166 6277101735386680763835789423207666416102355444464034512896)))
(define-fun x287 ((x166 Int)) Bool (and (x104 x166 6277101735386680763495507056286727952638980837032266301440) (x61 x166)))
(define-fun x155 ((x166 Int)) Bool (= (x556 x166 18446744073709551615) (mod x166 18446744073709551616)))
(define-fun x8 ((x166 Int)) Bool (and (x104 x166 18446744073709551615) (x155 x166)))
(define-fun x316 ((x211 Int)) Int 0)
(define-fun x189 ((x211 Int)) Int 0)
(define-fun x300 ((x211 Int)) Int 0)
(define-fun x111 ((x211 Int)) Int 0)
(define-fun x122 ((x211 Int)) Int 0)
(define-fun x94 ((x211 Int)) Int 0)
(define-fun x23 ((x211 Int)) Int 0)
(define-fun x530 ((x211 Int)) Int 0)
(define-fun x445 ((x211 Int)) Int 0)
(define-fun x511 ((x211 Int)) Int 0)
(define-fun x598 ((x211 Int)) Int (ite (= x264 x211) 0 (x159 x211)))
(define-fun x79 ((x211 Int)) Int (ite x96 (x159 x211) (ite x190 (x159 x211) (x598 x211))))
(define-fun x535 ((x211 Int)) Int (ite (= x211 x124) x153 (x79 x211)))
(define-fun x85 ((x211 Int)) Int (ite x232 (x79 x211) (x535 x211)))
(define-fun x569 ((x211 Int)) Int (ite (= x89 x211) x177 (x85 x211)))
(define-fun x546 ((x211 Int)) Int (ite x65 (x85 x211) (x569 x211)))
(define-fun x239 ((x211 Int)) Int (ite (= x379 x211) x63 (x546 x211)))
(define-fun x59 ((x211 Int)) Int (ite (= x379 x211) x397 (x79 x211)))
(define-fun x100 ((x211 Int)) Int (ite x552 (x239 x211) (x59 x211)))
(define-fun x572 ((x211 Int)) Int (ite (= x313 x211) x565 (x100 x211)))
(define-fun x271 ((x211 Int)) Int (ite (= x313 x211) x362 (x572 x211)))
(define-fun x290 ((x211 Int)) Int (ite (= x211 x585) 0 (x159 x211)))
(define-fun x478 ((x211 Int)) Int (ite x339 (x159 x211) (ite x577 (x159 x211) (x290 x211))))
(define-fun x607 ((x211 Int)) Int (ite (= x211 x436) x121 (x478 x211)))
(define-fun x140 ((x211 Int)) Int (ite x49 (x478 x211) (x607 x211)))
(define-fun x294 ((x211 Int)) Int (ite (= x188 x211) x165 (x140 x211)))
(define-fun x590 ((x211 Int)) Int (ite x156 (x140 x211) (x294 x211)))
(define-fun x37 ((x211 Int)) Int (ite (= x211 x482) x5 (x590 x211)))
(define-fun x505 ((x211 Int)) Int (ite (= x211 x482) x238 (x478 x211)))
(define-fun x30 ((x211 Int)) Int (ite x574 (x37 x211) (x505 x211)))
(define-fun x550 ((x211 Int)) Int (ite (= x211 x178) x579 (x30 x211)))
(define-fun x181 ((x211 Int)) Int (ite (= x211 x178) x15 (x550 x211)))
(define-fun x318 ((x211 Int)) Int (ite x404 (x271 x211) (x181 x211)))
(define-fun x260 ((x211 Int)) Int 0)
(define-fun x179 ((x211 Int)) Int (ite (< x211 x464) (x258 x211) 0))
(define-fun x470 ((x211 Int)) Int (ite (and (<= 0 x211) (< x211 x464)) (x340 x211) (x179 x211)))
(define-fun x608 ((x211 Int)) Int (ite (= x211 x209) x227 (x341 x211)))
(define-fun x222 ((x211 Int)) Int (ite (= 128 x211) x562 (x122 x211)))
(define-fun x146 ((x211 Int)) Int (ite (and (>= x211 160) (> (+ 160 x562) x211)) (x470 (- (+ x528 x211) 160)) (x300 x211)))
(define-fun x386 ((x211 Int)) Int (ite (= x160 x211) 0 (x146 x211)))
(define-fun x31 ((x211 Int)) Int (ite (and (>= x211 0) (> x525 x211)) (x386 (+ 160 x211)) (x331 x211)))
(define-fun x208 ((x211 Int)) Int (x31 x211))
(define-fun x71 ((x211 Int)) Int (x35 x211))
(define-fun x191 ((x211 Int)) Int (ite (= x211 x7) x305 (x189 x211)))
(define-fun x520 ((x211 Int)) Int (ite (and (<= x48 x211) (< x211 (+ x48 x305))) (x35 (- x211 x48)) (x316 x211)))
(define-fun x547 ((x211 Int)) Int (ite (= x211 128) x562 (x530 x211)))
(define-fun x527 ((x211 Int)) Int (ite (and (< x211 (+ x562 160)) (<= 160 x211)) (x470 (- (+ x528 x211) 160)) (x23 x211)))
(define-fun x541 ((x211 Int)) Int (ite (= x211 x359) 0 (x527 x211)))
(define-fun x296 ((x211 Int)) Int (ite (and (> x137 x211) (<= 0 x211)) (x541 (+ x211 160)) (x167 x211)))
(define-fun x184 ((x211 Int)) Int (x296 x211))
(define-fun x532 ((x211 Int)) Int (x317 x211))
(define-fun x241 ((x211 Int)) Int (ite (= x36 x211) x502 (x94 x211)))
(define-fun x328 ((x211 Int)) Int (ite (and (<= x491 x211) (< x211 (+ x502 x491))) (x317 (- x211 x491)) (x111 x211)))
(define-fun x378 ((x211 Int)) Int (ite x577 (x159 x211) (x290 x211)))
(define-fun x453 ((x211 Int)) Int (ite x190 (x159 x211) (x598 x211)))
(assert (x458 x567))
(assert (= x198 (or x339 x514)))
(assert (x494 x74))
(assert (= (x242 x330) (x242 (+ 1 x330))))
(assert (x494 x83))
(assert (x494 x524))
(assert (x494 x437))
(assert (= x454 x447))
(assert (x46 x405))
(assert (x494 x25))
(assert (x494 x377))
(assert (x494 x150))
(assert (x494 x253))
(assert (x458 x368))
(assert (x458 1461501637330902918203684832716283019655932542975))
(assert (x494 x251))
(assert (x494 x442))
(assert (x494 x429))
(assert (x46 x529))
(assert (x494 x375))
(assert (= (and x472 (not x11)) x143))
(assert (x458 x483))
(assert (= (x151 32 x482) (x242 (x151 32 x482))))
(assert (x494 x48))
(assert (x494 x507))
(assert (x494 x337))
(assert (x494 x217))
(assert (x494 x484))
(assert (< 10000 (x76 64 x24 x366)))
(assert (x494 x293))
(assert (= x574 (or x466 x156)))
(assert (= (=> (and (= x91 (not (< x32 x123))) (= (+ x264 1) x32)) (and x373 x91)) x434))
(assert (= (x242 x128) (x242 (+ x50 x128))))
(assert (x287 x492))
(assert (x494 x426))
(assert (= x454 (=> (= (= (ite (< 31 x510) 1 0) 1) x252) (and (=> (and (and (= x393 (x556 115792089237316195423570985008687907853269984665640564039457584007913129639904 x510)) (= (x151 32 x482) x436) (= (> x393 0) x456)) x252) (and (=> (and (and (= x358 32) (= x436 x188)) (not x456)) x389) (=> x456 x343))) (=> (and (and (= x281 (= x510 0)) (or (and x281 (= 0 x311)) (and (not x281) (and (= (x520 x523) x512) (= (x201 (+ 32 x7)) x523) (= x311 x512))))) (not x252)) x139)))))
(assert (= (and x355 x158) x471))
(assert (= x413 (and x143 x269)))
(assert (= 32 (x147 (x151 32 98298139780651710009176378764859410129414531797962094797816435375964751540092))))
(assert (= x10 (=> (and (or (and x38 (= x345 4)) (and (and (= x450 (< x192 x182)) (or (and (and (or (and (= x345 2) x306) (and (not x306) (= (ite (< x192 x223) 1 0) x345))) (= (< x192 x98) x306)) (not x450)) (and x450 (= x345 3)))) (not x38))) (= (> x522 x192) x38)) x487)))
(assert (x494 x106))
(assert (x494 x160))
(assert (= (x348 115792089237316195423570985008687907853269984665640564039457584007913129639935 x197) (ite (> 256 x197) (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x29 2 x197)) 0)))
(assert (x494 x223))
(assert (x494 x168))
(assert (x494 x132))
(assert (= (ite (> 256 x455) (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x29 2 x455)) 0) (x348 115792089237316195423570985008687907853269984665640564039457584007913129639935 x455)))
(assert (x494 x587))
(assert (x494 x262))
(assert (x494 x125))
(assert (= (x242 x124) (x242 (+ x124 1))))
(assert (x494 x215))
(assert (x494 x362))
(assert (x489 18446744073709551616))
(assert (x494 x393))
(assert (=> (>= 10000 x199) (= (x242 x199) 0)))
(assert (x46 x280))
(assert (x104 x377 x575))
(assert (x494 x265))
(assert (x494 x352))
(assert (= 0 (x242 1461501637330902918203684832716283019655932542975)))
(assert (x494 x560))
(assert (x494 x367))
(assert (and (= (x29 2 225) 53919893334301279589334030174039261347274288845081144962207220498432) (= 713623846352979940529142984724747568191373312 (x29 2 149)) (= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x29 2 256)) (= (x29 2 87) 154742504910672534362390528) (= (x29 2 193) 12554203470773361527671578846415332832204710888928069025792) (= (x29 2 81) 2417851639229258349412352) (= (x29 2 252) 7237005577332262213973186563042994240829374041602535252466099000494570602496) (= 24519928653854221733733552434404946937899825954937634816 (x29 2 184)) (= (x29 2 93) 9903520314283042199192993792) (= (x29 2 111) 2596148429267413814265248164610048) (= 13479973333575319897333507543509815336818572211270286240551805124608 (x29 2 223)) (= 67108864 (x29 2 26)) (= 28269553036454149273332760011886696253239742350009903329945699220681916416 (x29 2 244)) (= 55213970774324510299478046898216203619608871777363092441300193790394368 (x29 2 235)) (= (x29 2 189) 784637716923335095479473677900958302012794430558004314112) (= 65536 (x29 2 16)) (= (x29 2 72) 4722366482869645213696) (= (x29 2 136) 87112285931760246646623899502532662132736) (= (x29 2 44) 17592186044416) (= (x29 2 206) 102844034832575377634685573909834406561420991602098741459288064) (= (x29 2 124) 21267647932558653966460912964485513216) (= 75557863725914323419136 (x29 2 76)) (= (x29 2 128) 340282366920938463463374607431768211456) (= 1645504557321206042154969182557350504982735865633579863348609024 (x29 2 210)) (= (x29 2 40) 1099511627776) (= (x29 2 226) 107839786668602559178668060348078522694548577690162289924414440996864) (= 411376139330301510538742295639337626245683966408394965837152256 (x29 2 208)) (= 210624583337114373395836055367340864637790190801098222508621955072 (x29 2 217)) (= 8 (x29 2 3)) (= (x29 2 70) 1180591620717411303424) (= (x29 2 30) 1073741824) (= 21778071482940061661655974875633165533184 (x29 2 134)) (= (x29 2 174) 23945242826029513411849172299223580994042798784118784) (= 91343852333181432387730302044767688728495783936 (x29 2 156)) (= 302231454903657293676544 (x29 2 78)) (= 36028797018963968 (x29 2 55)) (= 316912650057057350374175801344 (x29 2 98)) (= (x29 2 33) 8589934592) (= (x29 2 35) 34359738368) (= 5316911983139663491615228241121378304 (x29 2 122)) (= 11417981541647679048466287755595961091061972992 (x29 2 153)) (= 1048576 (x29 2 20)) (= 2475880078570760549798248448 (x29 2 91)) (= (x29 2 166) 93536104789177786765035829293842113257979682750464) (= (x29 2 239) 883423532389192164791648750371459257913741948437809479060803100646309888) (= 137438953472 (x29 2 37)) (= (x29 2 18) 262144) (= (x29 2 180) 1532495540865888858358347027150309183618739122183602176) (= 4294967296 (x29 2 32)) (= (x29 2 67) 147573952589676412928) (= 452312848583266388373324160190187140051835877600158453279131187530910662656 (x29 2 248)) (= (x29 2 97) 158456325028528675187087900672) (= (x29 2 45) 35184372088832) (= 1461501637330902918203684832716283019655932542976 (x29 2 160)) (= 4 (x29 2 2)) (= (x29 2 165) 46768052394588893382517914646921056628989841375232) (= 100433627766186892221372630771322662657637687111424552206336 (x29 2 196)) (= 205688069665150755269371147819668813122841983204197482918576128 (x29 2 207)) (= (x29 2 131) 2722258935367507707706996859454145691648) (= (x29 2 247) 226156424291633194186662080095093570025917938800079226639565593765455331328) (= 6129982163463555433433388108601236734474956488734408704 (x29 2 182)) (= (x29 2 164) 23384026197294446691258957323460528314494920687616) (= 162259276829213363391578010288128 (x29 2 107)) (= (x29 2 218) 421249166674228746791672110734681729275580381602196445017243910144) (= (x29 2 219) 842498333348457493583344221469363458551160763204392890034487820288) (= 274877906944 (x29 2 38)) (= (x29 2 230) 1725436586697640946858688965569256363112777243042596638790631055949824) (= 27606985387162255149739023449108101809804435888681546220650096895197184 (x29 2 234)) (= (x29 2 69) 590295810358705651712) (= (x29 2 205) 51422017416287688817342786954917203280710495801049370729644032) (= 191561942608236107294793378393788647952342390272950272 (x29 2 177)) (= 268435456 (x29 2 28)) (= (x29 2 46) 70368744177664) (= 766247770432944429179173513575154591809369561091801088 (x29 2 179)) (= 332306998946228968225951765070086144 (x29 2 118)) (= 904625697166532776746648320380374280103671755200316906558262375061821325312 (x29 2 249)) (= (x29 2 183) 12259964326927110866866776217202473468949912977468817408) (= 44601490397061246283071436545296723011960832 (x29 2 145)) (= 8192 (x29 2 13)) (= (x29 2 175) 47890485652059026823698344598447161988085597568237568) (= 633825300114114700748351602688 (x29 2 99)) (= 22835963083295358096932575511191922182123945984 (x29 2 154)) (= 1 (x29 2 0)) (= 105312291668557186697918027683670432318895095400549111254310977536 (x29 2 216)) (= (x29 2 62) 4611686018427387904) (= (x29 2 213) 13164036458569648337239753460458804039861886925068638906788872192) (= 536870912 (x29 2 29)) (= (x29 2 125) 42535295865117307932921825928971026432) (= (x29 2 237) 220855883097298041197912187592864814478435487109452369765200775161577472) (= 822752278660603021077484591278675252491367932816789931674304512 (x29 2 209)) (= 1684996666696914987166688442938726917102321526408785780068975640576 (x29 2 220)) (= (x29 2 1) 2) (= 7067388259113537318333190002971674063309935587502475832486424805170479104 (x29 2 242)) (= (x29 2 15) 32768) (= (x29 2 171) 2993155353253689176481146537402947624255349848014848) (= 20282409603651670423947251286016 (x29 2 104)) (= 73786976294838206464 (x29 2 66)) (= (x29 2 222) 6739986666787659948666753771754907668409286105635143120275902562304) (= (x29 2 163) 11692013098647223345629478661730264157247460343808) (= 431359146674410236714672241392314090778194310760649159697657763987456 (x29 2 228)) (= 6277101735386680763835789423207666416102355444464034512896 (x29 2 192)) (= (x29 2 85) 38685626227668133590597632) (= 3291009114642412084309938365114701009965471731267159726697218048 (x29 2 211)) (= 18889465931478580854784 (x29 2 74)) (= (x29 2 68) 295147905179352825856) (= (x29 2 14) 16384) (= 25711008708143844408671393477458601640355247900524685364822016 (x29 2 204)) (= (x29 2 47) 140737488355328) (= (x29 2 215) 52656145834278593348959013841835216159447547700274555627155488768) (= (x29 2 140) 1393796574908163946345982392040522594123776) (= 3533694129556768659166595001485837031654967793751237916243212402585239552 (x29 2 241)) (= (x29 2 48) 281474976710656) (= 20769187434139310514121985316880384 (x29 2 114)) (= 72057594037927936 (x29 2 56)) (= (x29 2 25) 33554432) (= 524288 (x29 2 19)) (= 79228162514264337593543950336 (x29 2 96)) (= (x29 2 61) 2305843009213693952) (= (x29 2 60) 1152921504606846976) (= 5575186299632655785383929568162090376495104 (x29 2 142)) (= 6582018229284824168619876730229402019930943462534319453394436096 (x29 2 212)) (= (x29 2 59) 576460752303423488) (= 5192296858534827628530496329220096 (x29 2 112)) (= (x29 2 22) 4194304) (= (x29 2 255) 57896044618658097711785492504343953926634992332820282019728792003956564819968) (= (x29 2 23) 8388608) (= (x29 2 49) 562949953421312) (= (x29 2 173) 11972621413014756705924586149611790497021399392059392) (= (x29 2 95) 39614081257132168796771975168) (= (x29 2 39) 549755813888) (= 324518553658426726783156020576256 (x29 2 108)) (= (x29 2 117) 166153499473114484112975882535043072) (= (x29 2 238) 441711766194596082395824375185729628956870974218904739530401550323154944) (= (x29 2 54) 18014398509481984) (= (x29 2 253) 14474011154664524427946373126085988481658748083205070504932198000989141204992) (= 19342813113834066795298816 (x29 2 84)) (= (x29 2 190) 1569275433846670190958947355801916604025588861116008628224) (= 5846006549323611672814739330865132078623730171904 (x29 2 162)) (= 356811923176489970264571492362373784095686656 (x29 2 148)) (= 134217728 (x29 2 27)) (= (x29 2 116) 83076749736557242056487941267521536) (= 17179869184 (x29 2 34)) (= 174224571863520493293247799005065324265472 (x29 2 137)) (= (x29 2 181) 3064991081731777716716694054300618367237478244367204352) (= (x29 2 229) 862718293348820473429344482784628181556388621521298319395315527974912) (= 680564733841876926926749214863536422912 (x29 2 129)) (= 6427752177035961102167848369364650410088811975131171341205504 (x29 2 202)) (= 16777216 (x29 2 24)) (= (x29 2 82) 4835703278458516698824704) (= (x29 2 100) 1267650600228229401496703205376) (= (x29 2 246) 113078212145816597093331040047546785012958969400039613319782796882727665664) (= (x29 2 8) 256) (= (x29 2 161) 2923003274661805836407369665432566039311865085952) (= 9671406556917033397649408 (x29 2 83)) (= 1606938044258990275541962092341162602522202993782792835301376 (x29 2 200)) (= 6901746346790563787434755862277025452451108972170386555162524223799296 (x29 2 232)) (= (x29 2 50) 1125899906842624) (= 41538374868278621028243970633760768 (x29 2 115)) (= (x29 2 144) 22300745198530623141535718272648361505980416) (= 348449143727040986586495598010130648530944 (x29 2 138)) (= (x29 2 123) 10633823966279326983230456482242756608) (= (x29 2 151) 2854495385411919762116571938898990272765493248) (= 13803492693581127574869511724554050904902217944340773110325048447598592 (x29 2 233)) (= (x29 2 236) 110427941548649020598956093796432407239217743554726184882600387580788736) (= 3618502788666131106986593281521497120414687020801267626233049500247285301248 (x29 2 251)) (= 49039857307708443467467104868809893875799651909875269632 (x29 2 185)) (= 128 (x29 2 7)) (= 10384593717069655257060992658440192 (x29 2 113)) (= (x29 2 191) 3138550867693340381917894711603833208051177722232017256448) (= (x29 2 105) 40564819207303340847894502572032) (= 16 (x29 2 4)) (= 748288838313422294120286634350736906063837462003712 (x29 2 169)) (= (x29 2 73) 9444732965739290427392) (= (x29 2 88) 309485009821345068724781056) (= 730750818665451459101842416358141509827966271488 (x29 2 159)) (= (x29 2 106) 81129638414606681695789005144064) (= 4951760157141521099596496896 (x29 2 92)) (= (x29 2 186) 98079714615416886934934209737619787751599303819750539264) (= (x29 2 158) 365375409332725729550921208179070754913983135744) (= 215679573337205118357336120696157045389097155380324579848828881993728 (x29 2 227)) (= (x29 2 103) 10141204801825835211973625643008) (= (x29 2 64) 18446744073709551616) (= 4096 (x29 2 12)) (= (x29 2 187) 196159429230833773869868419475239575503198607639501078528) (= (x29 2 167) 187072209578355573530071658587684226515959365500928) (= 2658455991569831745807614120560689152 (x29 2 121)) (= (x29 2 90) 1237940039285380274899124224) (= 1329227995784915872903807060280344576 (x29 2 120)) (= (x29 2 110) 1298074214633706907132624082305024) (= (x29 2 41) 2199023255552) (= 77371252455336267181195264 (x29 2 86)) (= 803469022129495137770981046170581301261101496891396417650688 (x29 2 199)) (= (x29 2 75) 37778931862957161709568) (= 89202980794122492566142873090593446023921664 (x29 2 146)) (= (x29 2 203) 12855504354071922204335696738729300820177623950262342682411008) (= 618970019642690137449562112 (x29 2 89)) (= 200867255532373784442745261542645325315275374222849104412672 (x29 2 197)) (= (x29 2 42) 4398046511104) (= (x29 2 170) 1496577676626844588240573268701473812127674924007424) (= (x29 2 17) 131072) (= 9223372036854775808 (x29 2 63)) (= 45671926166590716193865151022383844364247891968 (x29 2 155)) (= 95780971304118053647396689196894323976171195136475136 (x29 2 176)) (= (x29 2 57) 144115188075855872) (= 36893488147419103232 (x29 2 65)) (= (x29 2 178) 383123885216472214589586756787577295904684780545900544) (= 64 (x29 2 6)) (= 3450873173395281893717377931138512726225554486085193277581262111899648 (x29 2 231)) (= 56539106072908298546665520023773392506479484700019806659891398441363832832 (x29 2 245)) (= (x29 2 139) 696898287454081973172991196020261297061888) (= (x29 2 31) 2147483648) (= (x29 2 143) 11150372599265311570767859136324180752990208) (= 1361129467683753853853498429727072845824 (x29 2 130)) (= (x29 2 126) 85070591730234615865843651857942052864) (= (x29 2 5) 32) (= 2361183241434822606848 (x29 2 71)) (= 2251799813685248 (x29 2 51)) (= (x29 2 141) 2787593149816327892691964784081045188247552) (= 5070602400912917605986812821504 (x29 2 102)) (= (x29 2 243) 14134776518227074636666380005943348126619871175004951664972849610340958208) (= 43556142965880123323311949751266331066368 (x29 2 135)) (= (x29 2 11) 2048) (= 5986310706507378352962293074805895248510699696029696 (x29 2 172)) (= (x29 2 198) 401734511064747568885490523085290650630550748445698208825344) (= 26959946667150639794667015087019630673637144422540572481103610249216 (x29 2 224)) (= (x29 2 221) 3369993333393829974333376885877453834204643052817571560137951281152) (= (x29 2 188) 392318858461667547739736838950479151006397215279002157056) (= (x29 2 94) 19807040628566084398385987584) (= (x29 2 250) 1809251394333065553493296640760748560207343510400633813116524750123642650624) (= 28948022309329048855892746252171976963317496166410141009864396001978282409984 (x29 2 254)) (= (x29 2 52) 4503599627370496) (= (x29 2 132) 5444517870735015415413993718908291383296) (= 1024 (x29 2 10)) (= (x29 2 147) 178405961588244985132285746181186892047843328) (= (x29 2 240) 1766847064778384329583297500742918515827483896875618958121606201292619776) (= 604462909807314587353088 (x29 2 79)) (= (x29 2 109) 649037107316853453566312041152512) (= 3213876088517980551083924184682325205044405987565585670602752 (x29 2 201)) (= 664613997892457936451903530140172288 (x29 2 119)) (= 5708990770823839524233143877797980545530986496 (x29 2 152)) (= 2535301200456458802993406410752 (x29 2 101)) (= 9007199254740992 (x29 2 53)) (= 151115727451828646838272 (x29 2 77)) (= 2097152 (x29 2 21)) (= 50216813883093446110686315385661331328818843555712276103168 (x29 2 195)) (= (x29 2 194) 25108406941546723055343157692830665664409421777856138051584) (= (x29 2 157) 182687704666362864775460604089535377456991567872) (= (x29 2 133) 10889035741470030830827987437816582766592) (= 1208925819614629174706176 (x29 2 80)) (= 288230376151711744 (x29 2 58)) (= (x29 2 168) 374144419156711147060143317175368453031918731001856) (= (x29 2 36) 68719476736) (= 26328072917139296674479506920917608079723773850137277813577744384 (x29 2 214)) (= 1427247692705959881058285969449495136382746624 (x29 2 150)) (= 512 (x29 2 9)) (= (x29 2 127) 170141183460469231731687303715884105728) (= 8796093022208 (x29 2 43))))
(assert (= (or x232 x381) x135))
(assert (x494 x397))
(assert (x489 4294967296))
(assert (x489 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (x494 x257))
(assert (x494 x344))
(assert (x494 x360))
(assert (x458 x262))
(assert (< (x151 32 98298139780651710009176378764859410129414531797962094797816435375964751540092) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (and (not x233) x356) x96))
(assert (= x164 (or x551 x96)))
(assert (x489 57896044618658097711785492504343953926634992332820282019728792003956564819967))
(assert (x494 x502))
(assert (= (and x138 x605) x543))
(assert (x194 x587))
(assert (x494 x297))
(assert (x494 x102))
(assert (x494 x510))
(assert (x458 x280))
(assert (x494 x64))
(assert (x494 x464))
(assert (x494 x586))
(assert (x287 x533))
(assert (x489 98298139780651710009176378764859410129414531797962094797816435375964751540092))
(assert (x46 x567))
(assert (x494 x584))
(assert (x494 x461))
(assert (x458 x495))
(assert (= x232 (and x105 (not x52))))
(assert (x494 x55))
(assert (x494 x218))
(assert (= (x147 (x76 64 x24 x366)) 64))
(assert (= (x242 x338) (x242 (+ x338 x387))))
(assert (x494 x460))
(assert (x494 x492))
(assert (= x490 x373))
(assert (= x190 (and x302 (not x499))))
(assert (x418 x533))
(assert (x489 6277101735386680763835789423207666416102355444464034512896))
(assert (= 0 (x242 79228162514264337593543950336)))
(assert (x494 x465))
(assert (x458 x529))
(assert (= x298 (and x56 x212)))
(assert (= (x147 (x76 64 x509 43465671953818058730967268728385526579518180683106539896923398506788491384179)) 64))
(assert (= (x242 (x76 64 x199 x28)) (x76 64 x199 x28)))
(assert (x458 x323))
(assert (x494 x63))
(assert (= (or x574 x582) x95))
(assert (x202 x323))
(assert (x494 x193))
(assert (= x28 (x336 (x76 64 x199 x28))))
(assert (= (x242 43465671953818058730967268728385526579518180683106539896923398506788491384179) 0))
(assert (= (and x135 (not x87)) x65))
(assert (x458 115792089237316195417293883273301227089774477609353836086818603170880863338495))
(assert (x494 x474))
(assert (= (or (and (not x355) x158) x471) x564))
(assert (x494 x610))
(assert (x494 x433))
(assert (= 64 (x147 (x76 64 x199 x28))))
(assert (not (x489 (x76 64 x24 x366))))
(assert (x494 x455))
(assert (x494 x108))
(assert (x494 x153))
(assert (x494 x75))
(assert (x494 x291))
(assert (= x275 (or x285 (and x472 x11) x319)))
(assert (= (x336 (x76 64 x24 x366)) x366))
(assert (x494 x5))
(assert (x194 x440))
(assert (x494 x234))
(assert (x494 x405))
(assert (x494 x438))
(assert (> (x76 64 x509 43465671953818058730967268728385526579518180683106539896923398506788491384179) 10000))
(assert (x489 82185713109400095055331377371876241954396308028721386073307644494260448768274))
(assert (x494 x345))
(assert (x489 1461501637330902918203684832716283019655932542975))
(assert (x194 x47))
(assert (= x24 (x488 (x76 64 x24 x366))))
(assert (x458 x150))
(assert (x46 x495))
(assert (x494 x315))
(assert (= x526 (and x298 x411)))
(assert (= x4 (=> (= (not (> x58 1)) x322) (and x322 (=> (and (< x509 x26) (= (x30 x178) x82) (= (div x236 79228162514264337593543950336) x134) (<= 1 x26) (= (x30 98298139780651710009176378764859410129414531797962094797816435375964751540092) x568) (= x492 (x550 x178)) (= x25 (x556 18446744073709551615 x479)) (= x117 (x556 4294967295 x134)) (= x545 (+ x117 x58)) (= (* x25 340282366920938463463374607431768211456) x41) (= x579 (+ x97 x433)) (<= x545 4294967295) (= (+ x161 x234) x178) (= (mod (* 3 x509) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x234) (= (* 79228162514264337593543950336 x545) x433) (> x568 x509) (= x15 (+ x506 x41)) (= x506 (x556 115792089237316195417293883273301227089774477609353836086818603170880863338495 x492)) (= (x151 32 98298139780651710009176378764859410129414531797962094797816435375964751540092) x161) (= x236 (x30 x279)) (= (x556 115792089237316195423570985008687907852929702298798853738508473738074905378815 x82) x97) (= x26 (x30 98298139780651710009176378764859410129414531797962094797816435375964751540092)) (<= x117 4294967294) (>= x568 1) (<= 1 x545)) x68)))))
(assert (x494 x522))
(assert (x494 x261))
(assert (x494 x205))
(assert (x494 x141))
(assert (x494 x368))
(assert (= (and x499 x302) x346))
(assert (x494 x90))
(assert (x489 4294967295))
(assert (= (x242 3930543824) 0))
(assert (= x472 (or x404 x95)))
(assert (x458 x360))
(assert (x494 x209))
(assert (x458 4294967295))
(assert (x46 x308))
(assert (< (x151 32 x482) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (x242 x259) (x242 (+ x259 x452))))
(assert (= x248 true))
(assert (x458 x425))
(assert (x494 x333))
(assert (= (x242 x585) (x242 (+ 1 x585))))
(assert (x494 x441))
(assert (x494 x358))
(assert (= (and x521 (not x504)) x403))
(assert (= x595 x72))
(assert (x494 x58))
(assert (=> (<= x231 10000) (= 0 (x242 x231))))
(assert (x494 x506))
(assert (x458 x575))
(assert (= (and x233 x356) x302))
(assert (x369 x74))
(assert (= x612 (and (not x306) x421)))
(assert (x494 x452))
(assert (x494 x579))
(assert (x458 x518))
(assert (not x92))
(assert (x494 x70))
(assert (= x245 (and x87 x135)))
(assert (x458 x168))
(assert (= x577 (and (not x411) x298)))
(assert (= x39 (or x431 x292 x612 x351)))
(assert (= (x242 1890728005) 0))
(assert (x494 x231))
(assert (= (x242 115792089237316195423570985008687907853269984665640564039457584007913129639904) 0))
(assert (x494 x88))
(assert (x494 x542))
(assert (x494 x120))
(assert (= x552 (or x65 x245)))
(assert (= x329 (and x198 x252)))
(assert (= (x242 6277101735386680763835789423207666416102355444464034512896) 0))
(assert (x489 4294967294))
(assert (x494 x18))
(assert (x494 x396))
(assert (= (=> (and (= x397 (ite (<= x507 1) x333 (x463 x507 x440))) (= (x201 (+ x507 x440)) x333) (>= x2 1) (= (* x262 8) x392) (= x2 (x348 115792089237316195423570985008687907853269984665640564039457584007913129639935 x392)) (= x507 (x556 x457 x518)) (= x518 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x2)) (= (* x262 2) x440)) x268) x430))
(assert (x46 x371))
(assert (= (x242 (+ x357 x205)) (x242 x357)))
(assert (x494 x398))
(assert (= (x242 57896044618658097711785492504343953926634992332820282019728792003956564819967) 0))
(assert (x494 x459))
(assert (x494 x364))
(assert (x494 x394))
(assert (x554 x262))
(assert (x494 x600))
(assert (x494 x121))
(assert (x494 x312))
(assert (x494 x2))
(assert (= (=> (and (= (+ 1 x124) x145) (= x299 (x201 (+ x36 32))) (= x153 (x328 x299)) (= x107 (not (< 32 x246)))) (and (=> (and (= x89 x145) (= 64 x385)) x9) x107)) x384))
(assert (x494 x117))
(assert (= (or x577 x526) x514))
(assert (x494 x97))
(assert (< 10000 (x151 32 98298139780651710009176378764859410129414531797962094797816435375964751540092)))
(assert (x494 x325))
(assert (x494 x273))
(assert (= (x242 (+ x264 1)) (x242 x264)))
(assert (x494 x249))
(assert (= x276 (=> (and (= (* x262 2) x610) (= x63 (+ x610 1))) x268)))
(assert (x494 x385))
(assert (x494 x308))
(assert (= (and x329 x456) x428))
(assert (= x351 (and x421 x306)))
(assert (= x431 (and x275 x38)))
(assert (x494 x509))
(assert (= 98298139780651710009176378764859410129414531797962094797816435375964751540092 (x488 (x151 32 98298139780651710009176378764859410129414531797962094797816435375964751540092))))
(assert (< (x76 64 x24 x366) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x494 x256))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x151 32 x379)))
(assert (x494 x236))
(assert (= (x242 (+ x508 x474)) (x242 x508)))
(assert (x494 x67))
(assert (x494 x523))
(assert (= (x242 (x151 32 x379)) (x151 32 x379)))
(assert (x494 x207))
(assert (x494 x383))
(assert (x46 x449))
(assert (x489 115792089237316195423570985008687907852929702298798853738508473738074905378815))
(assert (= x363 (and (not x281) x13)))
(assert (=> (>= 10000 x509) (= (x242 x509) 0)))
(assert (x458 x74))
(assert (= (x242 82185713109400095055331377371876241954396308028721386073307644494260448768274) 0))
(assert (x494 x137))
(assert (= x199 (x488 (x76 64 x199 x28))))
(assert (x494 x578))
(assert (x369 x538))
(assert (x494 x80))
(assert (= (and x605 (not x138)) x422))
(assert (= x356 (and x497 (not x118))))
(assert (x494 x311))
(assert (x46 x368))
(assert (not (x489 (x151 32 x482))))
(assert (= (and x69 x450) x292))
(assert (x494 x425))
(assert (x494 x349))
(assert (= x582 (or x401 x363)))
(assert (= (or (and (not x101) x413) x544) x285))
(assert (x494 x439))
(assert (= (and x497 x118) x212))
(assert (x104 x457 x518))
(assert (x494 x408))
(assert (=> (>= 10000 x209) (= 0 (x242 x209))))
(assert (x494 x539))
(assert (x489 3930543824))
(assert (x494 x565))
(assert (= (x242 4294967296) 0))
(assert (x406 x344))
(assert (x458 31))
(assert (x458 x457))
(assert (= (and x101 x413) x544))
(assert (= (x242 115792089237316195423570985008687907852929702298798853738508473738074905378815) 0))
(assert (= x13 (and (not x252) x198)))
(assert (x494 x127))
(assert (x494 x24))
(assert (x494 x114))
(assert (= (x242 115792089237316195423570985008687907853269984665640564039457584007913129639935) 0))
(assert (x494 x214))
(assert (x494 x449))
(assert (x494 x562))
(assert (x494 x304))
(assert (x494 x609))
(assert (= (ite (> 256 x392) (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x29 2 x392)) 0) (x348 115792089237316195423570985008687907853269984665640564039457584007913129639935 x392)))
(assert (= (x242 3618502788666131106986593281521497120414687020801267626233049500247285301247) 0))
(assert (x494 x228))
(assert (x458 x218))
(assert (x494 x84))
(assert (x458 1))
(assert (x406 x560))
(assert (x494 x371))
(assert (= 0 (x242 18446744073709551616)))
(assert (not (x489 (x151 32 98298139780651710009176378764859410129414531797962094797816435375964751540092))))
(assert (= x381 (and x52 x105)))
(assert (x458 x560))
(assert (x46 x150))
(assert (x489 3618502788666131106986593281521497120414687020801267626233049500247285301247))
(assert (x494 x177))
(assert (x494 x533))
(assert (x494 x538))
(assert (> (x151 32 x379) 10000))
(assert (x494 x545))
(assert (x494 x199))
(assert (x458 x134))
(assert (x494 x41))
(assert (x494 x44))
(assert (x494 x483))
(assert (x494 x395))
(assert (x494 x409))
(assert (x494 x15))
(assert (= (x242 (+ x256 x444)) (x242 x444)))
(assert (x458 127))
(assert (= (or x403 (and x42 x248) x564) x497))
(assert (x494 x77))
(assert (x489 43465671953818058730967268728385526579518180683106539896923398506788491384179))
(assert (x494 x525))
(assert (x418 x492))
(assert (x494 x361))
(assert (x494 x19))
(assert (x494 x20))
(assert (= x72 (=> (and (and (= x136 x578) (and (= x603 x479) (and (not (> x609 x464)) (= (+ 32 x235) x528) (= x125 x485) (= x609 (+ x562 x528)) (>= 127 x361) (= 1890728005 x437) (= x136 x209) (>= 127 x361) (= x206 x203) (<= x562 618475290480) (= (x176 (- x578 x112)) x257) (= x332 false) (= x118 (> x257 0)) (>= x265 1) (= 82185713109400095055331377371876241954396308028721386073307644494260448768274 x86) (= (x556 1461501637330902918203684832716283019655932542975 x218) x112) (= x186 false) (= x235 (+ x226 4)) (= x218 (x159 82185713109400095055331377371876241954396308028721386073307644494260448768274)) (= (x81 x231) x265) (= (+ 31 x235) x383) (< x383 x464) (= (x470 x235) x562) (= (x341 x209) x227) (= (x608 x231) x485) (>= x562 144)))) (and (>= x324 1) (= (x340 36) x58) (>= 4294967295 x324) (= x221 x226) (<= x509 115792089237316195423570985008687907853269984665640564039457584007913129639934) (> x324 x129) (= x611 x19) (<= x226 18446744073709551615) (= x509 (x340 4)) (= x509 x206) (<= x141 4294967294) (<= x58 4294967295) (<= 180 x464) (= false x327) (<= x493 4294967294) (= x226 (x340 68)) (<= 1 x58) (= x548 false) (not (> x141 x129)) (= false x196) (= 0 x27) (= x19 (x340 0)) (= false x576) (= x58 x312) (>= 4294967294 x129) (= x374 false) (not (> x493 x129)) (= true x486) (= x589 2) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x464))) (and (=> (and (not x118) (and (= x157 0) (= x263 x231) (= (x556 4294967295 x371) x199) (>= x382 x14) (>= x108 1) (= x244 (* 144 x58)) (>= x251 1) (= x77 x137) (= 144 x496) (= x359 (+ x562 160)) (= (x241 x36) x262) (> x251 x509) (= x539 (x176 (- x228 (mod (ite (> 32 x461) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (> x70 x36) (= x387 (mod (* x509 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x76 64 x509 43465671953818058730967268728385526579518180683106539896923398506788491384179) x28) (>= 3618502788666131106986593281521497120414687020801267626233049500247285301247 x149) (= (x201 (+ x36 32)) x491) (= x14 x502) (= x233 (> x461 31)) (= (div (+ x562 31) 32) x254) (= (div x44 2) x344) (= (x159 98298139780651710009176378764859410129414531797962094797816435375964751540092) x251) (= x417 x244) (>= x70 1) (= (* (- x149 1) 32) x481) (= x108 (x159 98298139780651710009176378764859410129414531797962094797816435375964751540092)) (= x44 (x159 x379)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x36) (= (* 32 x149) x382) (= x36 (+ 160 x429)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x36) (= x417 x562) (= (* x254 32) x429) (= (x556 1 x44) x228) (< x509 x108) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x36) (< x481 x14) (= x379 (x76 64 x199 x28)) (= (x151 32 98298139780651710009176378764859410129414531797962094797816435375964751540092) x338) (= x137 (x547 128)) (<= x502 115792089237316195423570985008687907853269984665640564039457584007913129639904) (<= 0 x149) (= x371 (div x531 79228162514264337593543950336)) (>= 18446744073709551615 x262) (= (x201 (+ (mod x382 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x201 (+ x36 32)))) x70) (= x531 (x159 x570)) (= (ite (< 0 x228) x344 (x556 127 x344)) x461) (= x502 x283) (or (= 1 x539) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x539)) (= x570 (+ x387 x338)))) (and (=> (not x233) x490) (=> (and (and (= x225 (+ x288 x584)) (= x123 (+ x288 x438)) (= (ite (> 32 x262) x288 x225) x264) (= (div (+ 31 x262) 32) x584) (= x288 (x151 32 x379)) (= x438 (div (+ 31 x461) 32)) (= (< x264 x123) x499)) x233) (and (=> x499 x434) (=> (not x499) x373))))) (=> (and x118 (and (<= 1 x253) (= x525 (x222 128)) (= x20 (x556 255 x483)) (= x510 (x191 x7)) (= (x176 (- x426 (mod (ite (> 32 x398) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x604) (< x509 x402) (= (x76 64 x24 x366) x482) (= (x159 x482) x538) (= (x201 (+ (x201 (+ 32 x7)) (mod x606 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x103) (= (x159 x279) x503) (= x185 (+ x592 2)) (< x509 x293) (= (x556 4294967295 x150) x24) (= (x556 1461501637330902918203684832716283019655932542975 x364) x459) (= x484 (x159 98298139780651710009176378764859410129414531797962094797816435375964751540092)) (= x309 (* x58 144)) (= (x151 32 98298139780651710009176378764859410129414531797962094797816435375964751540092) x259) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x7) (= (x201 (+ 32 x7)) x48) (= x460 (div (+ 31 x562) 32)) (= x578 x459) (= x309 x441) (= (x159 x592) x465) (<= x7 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= (x159 98298139780651710009176378764859410129414531797962094797816435375964751540092) x293) (= (x556 1 x538) x426) (>= x20 1) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x305) (= x253 (x159 98298139780651710009176378764859410129414531797962094797816435375964751540092)) (= x597 x305) (<= x20 255) (= (* x172 32) x606) (> x171 x93) (<= 0 x172) (< x509 x253) (= x7 (+ x193 160)) (>= x606 x171) (= x305 x171) (= x364 (x159 x185)) (= x562 x441) (< x509 x484) (= x398 (ite (< 0 x426) x560 (x556 127 x560))) (>= 18446744073709551615 x510) (= (mod (* 3 x509) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x474) (= x391 x231) (<= 1 x103) (= x131 144) (= (div x465 6277101735386680763835789423207666416102355444464034512896) x483) (= (x159 98298139780651710009176378764859410129414531797962094797816435375964751540092) x402) (= 0 x110) (= x452 (mod (* x509 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x160 (+ x562 160)) (>= x402 1) (= (x151 32 98298139780651710009176378764859410129414531797962094797816435375964751540092) x508) (>= x484 1) (= x366 (x76 64 x509 43465671953818058730967268728385526579518180683106539896923398506788491384179)) (> x103 x7) (= x150 (div x503 79228162514264337593543950336)) (= x210 x525) (>= x293 1) (= (div x538 2) x560) (<= x172 3618502788666131106986593281521497120414687020801267626233049500247285301247) (= x193 (* 32 x460)) (or (= x604 1) (= x604 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (* (- x172 1) 32) x93) (= (+ x474 x508) x592) (= x279 (+ x259 x452)) (= x56 (< 31 x398)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x7))) (and (=> (not x56) x454) (=> (and (and (= x476 (+ x357 x205)) (= x127 (div (+ 31 x398) 32)) (= x585 (ite (> 32 x510) x357 x476)) (= (div (+ 31 x510) 32) x205) (= x1 (+ x357 x127)) (= x411 (< x585 x1)) (= x357 (x151 32 x482))) x56) (and (=> (not x411) x447) (=> x411 x173)))))))))
(assert (= (=> (= x43 (= 1 (ite (< 31 x262) 1 0))) (and (=> (and (and (= x138 (= 0 x262)) (or (and (= x457 0) x138) (and (not x138) (and (= (x328 x119) x83) (= x119 (x201 (+ 32 x36))) (= x457 x83))))) (not x43)) x430) (=> (and x43 (and (= x124 (x151 32 x379)) (= x246 (x556 115792089237316195423570985008687907853269984665640564039457584007913129639904 x262)) (= (< 0 x246) x52))) (and (=> (and (and (= x385 32) (= x124 x89)) (not x52)) x9) (=> x52 x384))))) x490))
(assert (x494 x518))
(assert true)
(assert (= (and x13 x281) x401))
(assert (= (x242 (+ 1 x436)) (x242 x436)))
(assert (= x69 (and (not x38) x275)))
(assert (x494 x531))
(assert (not (x489 (x76 64 x509 43465671953818058730967268728385526579518180683106539896923398506788491384179))))
(assert (= (x242 x288) (x242 (+ x288 x438))))
(assert (= 0 (x242 4294967295)))
(assert (x494 x402))
(assert (= (=> (and (and (= x289 x372) (and (= (x318 x220) x74) (= x223 (x556 4294967295 x567)) (>= x16 1) (= (x151 32 98298139780651710009176378764859410129414531797962094797816435375964751540092) x444) (= x567 (div x586 79228162514264337593543950336)) (= x495 (x318 x113)) (<= x255 127) (= (div x67 18446744073709551616) x405) (= (div x335 4294967296) x280) (= x297 (x556 1 x74)) (= x586 (x318 x113)) (= (x318 x113) x67) (= x240 false) (= x376 x192) (= x522 (x556 4294967295 x405)) (= (mod (* 3 x289) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x256) (= (x318 98298139780651710009176378764859410129414531797962094797816435375964751540092) x17) (>= 127 x255) (= (x556 4294967295 x495) x98) (= x16 (x81 x231)) (= (+ 1 x113) x220) (= (ite (> x297 0) x561 (x556 127 x561)) x303) (<= 1 x102) (= x114 (x176 (- x297 (mod (ite (< x303 32) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (< x289 x102) (= x394 x289) (= (+ x444 x256) x113) (= (= x303 0) x11) (= x273 3930543824) (or (= x114 1) (= x114 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= x102 (x318 98298139780651710009176378764859410129414531797962094797816435375964751540092)) (<= 1 x17) (= false x267) (= (div x74 2) x561) (= (x318 x113) x335) (= x182 (x556 4294967295 x280)) (< x289 x17))) (and (= x376 x34) (= x207 68) (= x517 x372) (= x350 false) (= false x163))) (and (=> (and (= (> x303 31) x269) (not x11)) (and (=> (not x269) x10) (=> (and x269 (and (= (< 448 x90) x101) (= (+ 416 x303) x90))) (and (=> x101 x500) (=> (not x101) x109))))) (=> x11 x10))) x68))
(assert (= x519 (=> (= (not (> x284 480)) x353) (and x595 x353))))
(assert (x494 x50))
(assert (x494 x568))
(assert (x494 x491))
(assert (= x158 (and x521 x504)))
(assert (x494 x604))
(assert (x494 x417))
(assert (x494 x567))
(assert (= x339 (and (not x56) x212)))
(assert (x458 x479))
(assert (x458 x364))
(assert (= (or x428 x49) x557))
(assert (not (x489 (x76 64 x199 x28))))
(assert (= (x242 618475290480) 0))
(assert (= (x242 (+ x234 x161)) (x242 x161)))
(assert (x494 x528))
(assert (x494 x206))
(assert (x494 x323))
(assert (= 0 (x242 18446744073709551615)))
(assert (x494 x210))
(assert (x554 x510))
(assert (x369 x44))
(assert (= x173 (=> (and (= x555 (+ x585 1)) (= (not (< x555 x1)) x467)) (and x467 x447))))
(assert (x494 x98))
(assert (x458 x510))
(assert (x494 x36))
(assert (x458 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x489 18446744073709551615))
(assert (x342 x507 x440))
(assert (x489 618475290480))
(assert (x494 x133))
(assert (x494 x534))
(assert (= (x242 x592) (x242 (+ 2 x592))))
(assert (x458 x82))
(assert (x489 115792089237316195417293883273301227089774477609353836086818603170880863338495))
(assert (x494 x119))
(assert (x494 x22))
(assert (> (x76 64 x199 x28) 10000))
(assert (= x421 (and x69 (not x450))))
(assert (x104 x311 x360))
(assert (= (=> (and (= x388 false) (= false x559) (= false x553) (= x21 4) (= (not x66) x540) (= false x480) (= x66 (= 4 x345))) x540) x487))
(assert (x494 x580))
(assert (= (x242 (+ x127 x357)) (x242 x357)))
(assert (x458 x409))
(assert (x494 x112))
(assert (x494 x243))
(assert (x494 x86))
(assert (x494 x335))
(assert (= (x242 (x76 64 x509 43465671953818058730967268728385526579518180683106539896923398506788491384179)) (x76 64 x509 43465671953818058730967268728385526579518180683106539896923398506788491384179)))
(assert (x494 x575))
(assert (x458 115792089237316195423570985008687907852929702298798853738508473738074905378815))
(assert (x104 x409 x425))
(assert (= (x488 (x151 32 x379)) x379))
(assert (= (or x552 x286) x404))
(assert (x494 x148))
(assert (= (x242 (x76 64 x24 x366)) (x76 64 x24 x366)))
(assert (x494 x512))
(assert (x494 x359))
(assert (= (and x164 x43) x105))
(assert (x295 x510))
(assert (= x109 x10))
(assert (x406 x168))
(assert (= (and x73 x557) x466))
(assert (= (x242 (+ x288 x584)) (x242 x288)))
(assert (x594 x82))
(assert (x494 x235))
(assert (x8 x479))
(assert (x202 x82))
(assert (x494 x115))
(assert (< (x76 64 x509 43465671953818058730967268728385526579518180683106539896923398506788491384179) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x458 x371))
(assert (x494 x221))
(assert (x494 x16))
(assert (= (=> (and (or (not x73) (and x73 (and (= x455 (* 8 x534)) (= (x201 (+ x358 x7)) x243) (= (x556 x377 x575) x165) (= (x520 x243) x377) (= (x556 31 x510) x534) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x348 115792089237316195423570985008687907853269984665640564039457584007913129639935 x455)) x575)))) (= (> x510 x393) x73)) x277) x389))
(assert (x494 x283))
(assert (x458 6277101735386680763495507056286727952638980837032266301440))
(assert (x494 x387))
(assert (x247 x483))
(assert (= (x242 340282366920938463463374607431768211456) 0))
(assert (x494 x611))
(assert (x494 x601))
(assert (= (x242 4294967294) 0))
(assert (x494 x203))
(assert (= (and x329 (not x456)) x49))
(assert (x489 1642477181))
(assert (x494 x392))
(assert (= (and (not x43) x164) x605))
(assert (= x509 (x488 (x76 64 x509 43465671953818058730967268728385526579518180683106539896923398506788491384179))))
(assert (x406 x561))
(assert (= (or x346 x190) x551))
(assert (x458 x538))
(assert (x458 340282366841710300949110269838224261120))
(assert (x494 x219))
(assert (x489 340282366920938463463374607431768211456))
(assert (x494 x324))
(assert (x458 x492))
(assert (x46 x134))
(assert (x494 x204))
(assert (= 32 (x147 (x151 32 x482))))
(assert (= x521 (and x248 (not x42))))
(assert (< 10000 (x151 32 x482)))
(assert (x494 x226))
(assert (= x319 (and x143 (not x269))))
(assert (x494 x493))
(assert (x458 x311))
(assert (x494 x503))
(assert (x494 x307))
(assert (x494 x370))
(assert (= (x242 115792089237316195417293883273301227089774477609353836086818603170880863338495) 0))
(assert (= (and (not x73) x557) x156))
(assert (= x500 (=> (= x169 (not (> x90 480))) (and x109 x169))))
(assert (x369 x120))
(assert (x458 18446744073709551615))
(assert (x458 255))
(assert (= (x151 32 98298139780651710009176378764859410129414531797962094797816435375964751540092) (x242 (x151 32 98298139780651710009176378764859410129414531797962094797816435375964751540092))))
(assert (x494 x254))
(assert (= (=> (and (= x214 (x201 (+ x7 32))) (= x121 (x520 x214)) (= (not (< 32 x393)) x415) (= (+ 1 x436) x513)) (and x415 (=> (and (= x188 x513) (= 64 x358)) x389))) x343))
(assert (x494 x197))
(assert (= (x242 115792089237316195423570985008687907853269984665640564039457584007913129639934) 0))
(assert (x489 1890728005))
(assert (= (x348 115792089237316195423570985008687907853269984665640564039457584007913129639935 x62) (ite (< x62 256) (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x29 2 x62)) 0)))
(assert (x494 x440))
(assert (x494 x7))
(assert (x594 x323))
(assert (x494 x182))
(assert (= (=> (= x602 (not (< 1 x58))) (and (=> (and (= (x100 x313) x323) (= (div x88 79228162514264337593543950336) x529) (= x217 (mod (* 3 x509) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x556 4294967295 x529) x115) (= x542 (* x304 340282366920938463463374607431768211456)) (> x55 x509) (= x313 (+ x416 x217)) (= x215 (x556 115792089237316195423570985008687907852929702298798853738508473738074905378815 x323)) (= x416 (x151 32 98298139780651710009176378764859410129414531797962094797816435375964751540092)) (< x509 x84) (= (x100 98298139780651710009176378764859410129414531797962094797816435375964751540092) x55) (= (* 79228162514264337593543950336 x75) x601) (= (+ x375 x542) x362) (= (x556 18446744073709551615 x479) x304) (>= x84 1) (= (x100 98298139780651710009176378764859410129414531797962094797816435375964751540092) x84) (>= 4294967294 x115) (>= x75 1) (<= 1 x55) (= x88 (x100 x570)) (= (+ x58 x115) x75) (= x565 (+ x215 x601)) (<= x75 4294967295) (= (x572 x313) x533) (= x375 (x556 115792089237316195417293883273301227089774477609353836086818603170880863338495 x533))) x68) x602)) x268))
(assert (x174 x364))
(assert (x494 x299))
(assert (x489 115792089237316195423570985008687907853269984665640564039457584007913129639934))
(assert (< (x76 64 x199 x28) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x494 x26))
(assert (x494 x255))
(assert (x458 x344))
(assert (x458 x561))
(assert (= (x242 x416) (x242 (+ x217 x416))))
(assert (x494 x116))
(assert (=> (<= x24 10000) (= (x242 x24) 0)))
(assert (x494 x227))
(assert (= (x242 (+ 1 x113)) (x242 x113)))
(assert (x494 x457))
(assert (x494 x47))
(assert (x342 x47 x587))
(assert (x458 x405))
(assert (x174 x218))
(assert (= (x242 1642477181) 0))
(assert (x489 79228162514264337593543950336))
(assert (= x92 (=> (and (and (and (= (x556 4294967295 x308) x141) (= x106 x395) (< x106 x410) (>= 127 x370) (= false x563) (>= 127 x370) (= (x176 (- x337 (mod (ite (> 32 x315) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x291) (= x330 (+ x50 x128)) (<= 1 x352) (= false x414) (= x368 (x159 x330)) (= (div x571 4294967296) x308) (= (x159 x330) x571) (= (x159 98298139780651710009176378764859410129414531797962094797816435375964751540092) x410) (= x204 (x159 x330)) (> x352 x106) (= (x159 98298139780651710009176378764859410129414531797962094797816435375964751540092) x352) (= x315 (ite (< 0 x337) x168 (x556 127 x168))) (= x42 (= x315 0)) (= x324 (x556 4294967295 x368)) (= (x159 x54) x120) (= (x81 x231) x249) (= x129 x326) (= x337 (x556 1 x120)) (= x449 (div x204 18446744073709551616)) (>= x410 1) (= (x556 4294967295 x449) x493) (= x116 3930543824) (= x54 (+ x330 1)) (= x50 (mod (* 3 x106) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x151 32 98298139780651710009176378764859410129414531797962094797816435375964751540092) x128) (or (= 1 x291) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x291)) (= x168 (div x120 2)) (<= 1 x249)) (= x106 x432)) (and (<= x325 4) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x154) (>= 127 x132) (<= x162 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x583 0) (= false x6) x420 (<= x427 1461501637330902918203684832716283019655932542975) (<= 0 x446) (<= x27 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= x593 1461501637330902918203684832716283019655932542975) (>= x60 0) (<= x446 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= x136 1461501637330902918203684832716283019655932542975) (>= x34 0) (>= 1461501637330902918203684832716283019655932542975 x231) (= false x573) (>= x274 0) (= x57 false) (= (> (x81 x231) 0) x420) (>= x517 0) (<= x274 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x443 false) (>= x126 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x583) (= x517 x432) (= true x419) (<= x310 4294967295) (>= x162 0) (<= 0 x593) (= false x498) (= x18 1642477181) (= (x159 98298139780651710009176378764859410129414531797962094797816435375964751540092) x325) (= false x33) (>= x27 0) (= x566 3) (>= 127 x132) (= 1890728005 x347) (<= x603 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= 1461501637330902918203684832716283019655932542975 x60) (= x34 x326) (= x400 false) (= 68 x580) (<= 0 x154) (= x320 4) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x126) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x34) (= false x224) (= (x81 x231) x148) (<= 1 x148) (>= x603 0) (= x334 5) (<= 0 x427) (= x231 x581) (>= x231 1) (= false x282) (>= x136 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x517) (= x423 false) (<= 0 x310))) (and (=> x42 x72) (=> (and (= x504 (> x315 31)) (not x42)) (and (=> (and x504 (and (= (+ x315 416) x284) (= (< 448 x284) x355))) (and (=> (not x355) x595) (=> x355 x519))) (=> (not x504) x72)))))))
(assert (x458 x377))
(assert (x494 x321))
(assert (= (=> (and (= (+ x367 1) x5) (= x367 (* x510 2))) x4) x277))
(assert (= (x488 (x151 32 x482)) x482))
(assert (= (=> (and (= x87 (< x246 x262)) (or (not x87) (and (and (= x524 (x556 31 x262)) (= (x201 (+ x36 x385)) x439) (= x177 (x556 x409 x425)) (= (x328 x439) x409) (= x62 (* x524 8)) (= x425 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x348 115792089237316195423570985008687907853269984665640564039457584007913129639935 x62)))) x87))) x276) x9))
(assert (x194 x507))
(assert (x494 x597))
(assert (x494 x305))
(assert (x494 x17))
(assert (x494 x303))
(assert (x494 x495))
(assert (= 0 (x242 98298139780651710009176378764859410129414531797962094797816435375964751540092)))
(assert (= (=> (and (= x47 (x556 x311 x360)) (= x587 (* x510 2)) (= x360 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x133)) (= x197 (* 8 x510)) (= (x348 115792089237316195423570985008687907853269984665640564039457584007913129639935 x197) x133) (<= 1 x133) (= (ite (<= x47 1) x80 (x463 x47 x587)) x238) (= x80 (x201 (+ x587 x47)))) x4) x139))
(assert (x494 x238))
(assert (x458 x120))
(assert (x494 x62))
(assert (x458 x308))
(assert (x494 x410))
(assert (x494 x278))
(assert (x494 x284))
(assert (x494 x479))
(assert (x489 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (= 32 (x147 (x151 32 x379))))
(assert (x458 x533))
(assert (x494 x571))
(assert (x494 x320))
(assert (x494 x280))
(assert (not (x489 (x151 32 x379))))
(assert (x458 x449))
(assert (x494 x246))
(assert (x494 x561))
(assert (x295 x262))
(assert (x494 x529))
(assert (= (x336 (x76 64 x509 43465671953818058730967268728385526579518180683106539896923398506788491384179)) 43465671953818058730967268728385526579518180683106539896923398506788491384179))
(assert (x494 x129))
(assert (x494 x82))
(assert (x494 x192))
(assert (x494 x289))
(assert (x494 x165))
(assert (x458 x44))
(assert (x494 x103))
(assert (= (or x543 x422) x286))
(assert (x494 x134))
(assert (x494 x485))
(check-sat)
(exit)
