(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Certora
Generated on: 2024-04-10
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x545 () Bool)
(declare-fun x574 () Bool)
(declare-fun x240 () Int)
(declare-fun x419 () Int)
(declare-fun x310 () Int)
(declare-fun x298 () Int)
(declare-fun x337 () Bool)
(declare-fun x107 () Int)
(declare-fun x148 () Int)
(declare-fun x375 () Bool)
(declare-fun x414 (Int) Int)
(declare-fun x634 () Int)
(declare-fun x478 () Int)
(declare-fun x296 () Int)
(declare-fun x268 () Int)
(declare-fun x486 () Int)
(declare-fun x232 () Int)
(declare-fun x505 () Int)
(declare-fun x371 () Bool)
(declare-fun x67 () Int)
(declare-fun x439 () Bool)
(declare-fun x276 () Bool)
(declare-fun x435 () Bool)
(declare-fun x542 () Bool)
(declare-fun x183 () Bool)
(declare-fun x185 () Bool)
(declare-fun x546 () Int)
(declare-fun x224 () Bool)
(declare-fun x503 () Int)
(declare-fun x588 () Bool)
(declare-fun x450 () Bool)
(declare-fun x411 () Int)
(declare-fun x231 () Bool)
(declare-fun x30 () Bool)
(declare-fun x26 () Bool)
(declare-fun x442 () Int)
(declare-fun x116 () Int)
(declare-fun x468 () Int)
(declare-fun x569 (Int) Int)
(declare-fun x485 () Bool)
(declare-fun x92 () Bool)
(declare-fun x75 () Int)
(declare-fun x286 () Int)
(declare-fun x387 () Bool)
(declare-fun x292 () Int)
(declare-fun x396 () Int)
(declare-fun x151 () Int)
(declare-fun x39 () Int)
(declare-fun x145 () Int)
(declare-fun x215 () Int)
(declare-fun x491 () Int)
(declare-fun x313 () Int)
(declare-fun x465 () Int)
(declare-fun x591 () Int)
(declare-fun x223 () Int)
(declare-fun x247 () Int)
(declare-fun x55 () Bool)
(declare-fun x273 (Int) Int)
(declare-fun x302 () Bool)
(declare-fun x563 () Bool)
(declare-fun x60 () Int)
(declare-fun x265 () Int)
(declare-fun x556 () Int)
(declare-fun x222 () Int)
(declare-fun x489 () Int)
(declare-fun x48 (Int Int) Int)
(declare-fun x410 () Int)
(declare-fun x619 () Int)
(declare-fun x279 () Bool)
(declare-fun x593 () Bool)
(declare-fun x36 () Int)
(declare-fun x532 () Int)
(declare-fun x493 () Int)
(declare-fun x361 () Int)
(declare-fun x407 () Int)
(declare-fun x309 () Bool)
(declare-fun x517 () Int)
(declare-fun x97 () Int)
(declare-fun x601 () Int)
(declare-fun x388 () Bool)
(declare-fun x307 () Int)
(declare-fun x515 () Bool)
(declare-fun x86 () Bool)
(declare-fun x577 () Int)
(declare-fun x381 () Int)
(declare-fun x633 () Bool)
(declare-fun x11 () Int)
(declare-fun x622 () Int)
(declare-fun x157 () Int)
(declare-fun x434 () Int)
(declare-fun x600 () Int)
(declare-fun x76 () Int)
(declare-fun x288 () Bool)
(declare-fun x529 () Int)
(declare-fun x227 () Int)
(declare-fun x308 () Int)
(declare-fun x64 () Bool)
(declare-fun x283 () Int)
(declare-fun x37 () Bool)
(declare-fun x490 () Int)
(declare-fun x506 () Int)
(declare-fun x191 () Int)
(declare-fun x252 () Bool)
(declare-fun x248 () Int)
(declare-fun x334 () Int)
(declare-fun x610 () Int)
(declare-fun x197 () Int)
(declare-fun x71 () Bool)
(declare-fun x328 () Int)
(declare-fun x267 () Bool)
(declare-fun x82 () Bool)
(declare-fun x258 () Int)
(declare-fun x599 () Int)
(declare-fun x172 () Int)
(declare-fun x616 () Int)
(declare-fun x315 () Int)
(declare-fun x196 () Int)
(declare-fun x341 () Bool)
(declare-fun x212 () Int)
(declare-fun x359 (Int) Int)
(declare-fun x511 () Int)
(declare-fun x585 (Int Int) Int)
(declare-fun x541 () Int)
(declare-fun x274 () Int)
(declare-fun x620 () Int)
(declare-fun x408 () Int)
(declare-fun x141 () Bool)
(declare-fun x637 () Int)
(declare-fun x25 () Int)
(declare-fun x187 () Int)
(declare-fun x522 () Int)
(declare-fun x590 () Int)
(declare-fun x135 () Bool)
(declare-fun x425 () Int)
(declare-fun x534 () Int)
(declare-fun x49 () Int)
(declare-fun x239 () Bool)
(declare-fun x318 () Int)
(declare-fun x607 () Bool)
(declare-fun x119 () Int)
(declare-fun x518 (Int) Int)
(declare-fun x566 () Int)
(declare-fun x17 () Int)
(declare-fun x230 () Int)
(declare-fun x188 () Int)
(declare-fun x311 () Bool)
(declare-fun x277 (Int) Int)
(declare-fun x184 () Bool)
(declare-fun x99 () Int)
(declare-fun x180 () Int)
(declare-fun x210 () Int)
(declare-fun x409 (Int Int) Int)
(declare-fun x128 () Int)
(declare-fun x463 () Int)
(declare-fun x643 () Int)
(declare-fun x615 () Int)
(declare-fun x349 () Bool)
(declare-fun x320 () Int)
(declare-fun x282 () Int)
(declare-fun x130 () Int)
(declare-fun x1 () Int)
(declare-fun x612 () Int)
(declare-fun x28 () Int)
(declare-fun x262 () Bool)
(declare-fun x27 () Int)
(declare-fun x438 () Int)
(declare-fun x250 () Int)
(declare-fun x639 (Int) Int)
(declare-fun x358 () Int)
(declare-fun x475 () Bool)
(declare-fun x211 () Int)
(declare-fun x520 () Int)
(declare-fun x538 () Int)
(declare-fun x245 () Bool)
(declare-fun x549 () Bool)
(declare-fun x350 () Int)
(declare-fun x389 () Int)
(declare-fun x304 (Int) Int)
(declare-fun x249 () Int)
(declare-fun x526 () Int)
(declare-fun x373 (Int) Int)
(declare-fun x528 () Int)
(declare-fun x66 () Int)
(declare-fun x543 () Int)
(declare-fun x366 () Int)
(declare-fun x205 () Bool)
(declare-fun x550 () Int)
(declare-fun x398 () Int)
(declare-fun x110 () Bool)
(declare-fun x319 () Int)
(declare-fun x98 () Bool)
(declare-fun x646 () Int)
(declare-fun x650 () Int)
(declare-fun x243 () Int)
(declare-fun x177 () Int)
(declare-fun x329 () Int)
(declare-fun x126 () Bool)
(declare-fun x174 (Int) Int)
(declare-fun x325 () Bool)
(declare-fun x492 () Int)
(declare-fun x533 () Int)
(declare-fun x275 () Int)
(declare-fun x59 () Bool)
(declare-fun x61 () Int)
(declare-fun x416 () Int)
(declare-fun x376 () Int)
(declare-fun x233 () Int)
(declare-fun x85 () Int)
(declare-fun x557 () Int)
(declare-fun x81 () Int)
(declare-fun x364 () Bool)
(declare-fun x182 () Int)
(declare-fun x471 () Bool)
(declare-fun x432 () Bool)
(declare-fun x413 () Int)
(declare-fun x447 () Int)
(declare-fun x648 () Int)
(declare-fun x326 () Int)
(declare-fun x572 () Int)
(declare-fun x291 () Int)
(declare-fun x654 () Int)
(declare-fun x104 () Int)
(declare-fun x483 () Bool)
(declare-fun x488 () Int)
(declare-fun x596 () Int)
(declare-fun x595 () Int)
(declare-fun x278 () Int)
(declare-fun x181 () Int)
(declare-fun x38 () Int)
(declare-fun x164 () Bool)
(declare-fun x263 () Int)
(declare-fun x125 () Int)
(declare-fun x481 () Int)
(declare-fun x323 () Int)
(declare-fun x397 () Int)
(declare-fun x441 () Bool)
(declare-fun x23 () Int)
(declare-fun x454 () Int)
(declare-fun x251 () Int)
(declare-fun x422 () Int)
(declare-fun x53 () Int)
(declare-fun x165 () Int)
(declare-fun x284 (Int) Int)
(declare-fun x344 () Int)
(declare-fun x412 () Int)
(declare-fun x91 () Int)
(declare-fun x348 () Bool)
(declare-fun x512 () Int)
(declare-fun x79 () Int)
(declare-fun x317 () Bool)
(declare-fun x4 () Int)
(declare-fun x583 () Int)
(declare-fun x12 () Int)
(declare-fun x406 (Int) Int)
(declare-fun x272 () Bool)
(declare-fun x553 () Bool)
(declare-fun x294 () Int)
(declare-fun x206 () Int)
(declare-fun x431 () Int)
(declare-fun x176 () Int)
(declare-fun x257 () Int)
(declare-fun x34 () Int)
(declare-fun x167 () Int)
(declare-fun x385 () Int)
(declare-fun x340 () Int)
(declare-fun x171 () Int)
(declare-fun x7 () Int)
(declare-fun x155 () Int)
(declare-fun x195 () Int)
(declare-fun x15 () Int)
(declare-fun x213 (Int) Int)
(declare-fun x9 () Int)
(declare-fun x321 () Bool)
(declare-fun x405 (Int) Int)
(declare-fun x117 () Bool)
(declare-fun x401 () Int)
(declare-fun x90 (Int) Int)
(declare-fun x111 () Int)
(declare-fun x207 () Int)
(declare-fun x69 () Bool)
(declare-fun x32 () Int)
(declare-fun x466 () Int)
(declare-fun x80 () Bool)
(declare-fun x562 () Int)
(declare-fun x192 () Int)
(declare-fun x342 () Int)
(declare-fun x565 () Int)
(declare-fun x627 () Int)
(declare-fun x137 () Int)
(declare-fun x299 () Int)
(declare-fun x617 () Int)
(declare-fun x480 () Int)
(declare-fun x626 () Int)
(declare-fun x605 () Bool)
(declare-fun x655 () Int)
(declare-fun x352 () Int)
(declare-fun x592 () Int)
(declare-fun x379 () Int)
(declare-fun x24 () Int)
(declare-fun x58 () Int)
(declare-fun x229 () Int)
(declare-fun x339 () Int)
(declare-fun x152 () Int)
(declare-fun x246 () Int)
(declare-fun x609 () Int)
(declare-fun x154 (Int) Int)
(declare-fun x513 () Int)
(declare-fun x653 () Int)
(declare-fun x301 () Int)
(declare-fun x436 () Bool)
(declare-fun x20 (Int) Int)
(declare-fun x293 () Int)
(declare-fun x547 () Int)
(declare-fun x624 () Int)
(declare-fun x374 () Int)
(declare-fun x72 () Int)
(declare-fun x203 () Int)
(declare-fun x382 () Int)
(declare-fun x84 () Int)
(declare-fun x464 () Int)
(declare-fun x253 () Bool)
(declare-fun x598 () Int)
(declare-fun x580 () Bool)
(declare-fun x523 () Bool)
(declare-fun x209 () Int)
(declare-fun x132 () Bool)
(declare-fun x448 () Bool)
(declare-fun x10 () Int)
(declare-fun x105 () Int)
(declare-fun x476 () Bool)
(declare-fun x134 () Bool)
(declare-fun x501 () Int)
(declare-fun x289 () Int)
(declare-fun x459 () Int)
(declare-fun x649 () Int)
(declare-fun x331 () Int)
(declare-fun x645 () Int)
(declare-fun x332 () Int)
(declare-fun x516 () Int)
(declare-fun x43 () Int)
(declare-fun x395 () Bool)
(declare-fun x355 () Int)
(declare-fun x241 () Bool)
(declare-fun x52 () Bool)
(declare-fun x118 () Int)
(declare-fun x42 () Int)
(declare-fun x403 (Int) Int)
(declare-fun x445 () Int)
(declare-fun x343 () Bool)
(declare-fun x103 () Int)
(declare-fun x33 () Bool)
(declare-fun x40 () Int)
(declare-fun x544 () Int)
(declare-fun x357 () Int)
(declare-fun x444 () Int)
(declare-fun x632 () Int)
(declare-fun x226 () Int)
(declare-fun x508 () Bool)
(declare-fun x560 () Int)
(declare-fun x564 () Int)
(declare-fun x168 () Int)
(declare-fun x153 () Int)
(declare-fun x377 () Bool)
(declare-fun x160 () Int)
(declare-fun x143 () Int)
(declare-fun x106 () Int)
(declare-fun x170 () Int)
(declare-fun x89 () Int)
(declare-fun x427 () Int)
(declare-fun x521 () Int)
(declare-fun x393 () Bool)
(declare-fun x440 () Int)
(declare-fun x587 () Bool)
(declare-fun x363 () Int)
(declare-fun x455 (Int) Int)
(declare-fun x100 () Bool)
(declare-fun x456 () Int)
(declare-fun x124 () Int)
(declare-fun x133 () Int)
(declare-fun x392 () Bool)
(declare-fun x647 () Bool)
(declare-fun x384 () Int)
(declare-fun x630 () Int)
(declare-fun x113 () Int)
(declare-fun x74 () Bool)
(declare-fun x353 () Int)
(declare-fun x383 () Int)
(declare-fun x220 () Bool)
(declare-fun x330 () Bool)
(declare-fun x244 () Bool)
(declare-fun x400 () Int)
(declare-fun x56 () Int)
(declare-fun x608 (Int) Bool)
(declare-fun x269 () Int)
(declare-fun x112 () Int)
(declare-fun x642 () Bool)
(declare-fun x530 () Int)
(declare-fun x216 () Int)
(declare-fun x417 () Int)
(declare-fun x123 () Bool)
(declare-fun x525 () Int)
(declare-fun x346 () Int)
(declare-fun x390 () Bool)
(declare-fun x360 () Int)
(declare-fun x567 () Int)
(declare-fun x8 () Int)
(declare-fun x287 () Bool)
(declare-fun x437 () Int)
(declare-fun x297 () Int)
(declare-fun x496 () Int)
(declare-fun x628 () Int)
(declare-fun x487 () Int)
(declare-fun x603 () Int)
(declare-fun x611 () Bool)
(declare-fun x150 () Bool)
(declare-fun x270 (Int Int) Int)
(declare-fun x45 () Int)
(declare-fun x537 () Bool)
(declare-fun x644 () Int)
(declare-fun x322 () Int)
(declare-fun x613 () Int)
(declare-fun x394 () Int)
(declare-fun x602 () Int)
(declare-fun x62 () Int)
(declare-fun x391 () Bool)
(declare-fun x347 () Int)
(declare-fun x327 () Int)
(declare-fun x575 () Int)
(declare-fun x19 () Int)
(declare-fun x589 () Int)
(declare-fun x581 () Int)
(declare-fun x260 () Int)
(declare-fun x161 () Bool)
(declare-fun x618 () Int)
(declare-fun x95 () Int)
(declare-fun x3 () Int)
(declare-fun x303 () Int)
(declare-fun x142 () Int)
(declare-fun x404 () Int)
(declare-fun x122 () Int)
(declare-fun x495 () Int)
(declare-fun x507 () Int)
(declare-fun x5 (Int) Int)
(declare-fun x29 () Int)
(declare-fun x254 () Int)
(declare-fun x368 () Int)
(declare-fun x144 () Bool)
(declare-fun x467 () Int)
(declare-fun x131 () Bool)
(declare-fun x514 () Int)
(declare-fun x44 () Int)
(declare-fun x370 (Int) Int)
(declare-fun x421 () Bool)
(declare-fun x238 () Int)
(declare-fun x420 () Int)
(declare-fun x94 (Int) Int)
(declare-fun x356 () Int)
(declare-fun x335 () Int)
(declare-fun x540 () Int)
(declare-fun x479 () Int)
(declare-fun x193 () Int)
(declare-fun x65 () Int)
(declare-fun x578 () Int)
(declare-fun x179 () Bool)
(declare-fun x336 () Int)
(declare-fun x138 () Bool)
(declare-fun x186 () Int)
(declare-fun x221 () Int)
(declare-fun x149 () Int)
(declare-fun x41 () Int)
(declare-fun x638 () Int)
(declare-fun x449 () Int)
(declare-fun x635 () Int)
(declare-fun x519 () Int)
(declare-fun x70 () Bool)
(declare-fun x504 () Int)
(declare-fun x96 () Int)
(declare-fun x261 () Int)
(declare-fun x539 () Int)
(declare-fun x510 () Bool)
(declare-fun x63 () Int)
(declare-fun x324 () Int)
(declare-fun x259 () Int)
(declare-fun x477 () Int)
(declare-fun x351 () Int)
(declare-fun x524 () Int)
(declare-fun x21 () Int)
(declare-fun x22 () Int)
(declare-fun x83 (Int) Int)
(declare-fun x108 () Int)
(declare-fun x559 () Int)
(declare-fun x418 () Int)
(declare-fun x54 () Int)
(declare-fun x218 () Int)
(declare-fun x443 () Int)
(declare-fun x623 () Int)
(declare-fun x46 () Int)
(declare-fun x378 () Int)
(declare-fun x173 () Int)
(declare-fun x190 () Int)
(declare-fun x651 () Bool)
(declare-fun x295 () Int)
(declare-fun x338 (Int Int Int) Int)
(declare-fun x461 () Int)
(declare-fun x472 () Bool)
(declare-fun x369 () Int)
(declare-fun x87 () Bool)
(declare-fun x509 () Int)
(declare-fun x159 () Bool)
(declare-fun x120 () Int)
(declare-fun x266 () Int)
(declare-fun x121 () Int)
(declare-fun x453 () Int)
(declare-fun x306 () Bool)
(declare-fun x290 () Int)
(declare-fun x365 () Bool)
(declare-fun x424 () Int)
(declare-fun x102 () Int)
(declare-fun x500 () Int)
(declare-fun x35 () Int)
(declare-fun x14 () Int)
(declare-fun x484 () Int)
(declare-fun x473 () Int)
(declare-fun x314 () Int)
(declare-fun x114 () Bool)
(declare-fun x568 () Int)
(declare-fun x194 () Int)
(declare-fun x631 () Int)
(declare-fun x604 () Int)
(declare-fun x551 () Int)
(declare-fun x147 () Int)
(declare-fun x535 () Bool)
(declare-fun x140 () Int)
(declare-fun x536 () Int)
(declare-fun x561 () Bool)
(declare-fun x93 () Int)
(declare-fun x482 () Int)
(declare-fun x494 () Int)
(declare-fun x469 () Bool)
(declare-fun x423 () Int)
(declare-fun x16 () Int)
(declare-fun x576 () Bool)
(declare-fun x460 () Bool)
(declare-fun x305 () Bool)
(declare-fun x200 () Bool)
(declare-fun x570 () Int)
(declare-fun x656 () Int)
(declare-fun x68 () Int)
(declare-fun x597 () Bool)
(declare-fun x380 (Int) Int)
(declare-fun x548 () Int)
(declare-fun x451 () Int)
(declare-fun x50 () Int)
(declare-fun x109 () Int)
(declare-fun x236 () Int)
(declare-fun x31 () Int)
(declare-fun x166 (Int) Int)
(declare-fun x129 () Int)
(declare-fun x367 () Bool)
(declare-fun x18 () Int)
(declare-fun x201 () Bool)
(declare-fun x641 () Int)
(declare-fun x462 () Int)
(declare-fun x158 () Bool)
(declare-fun x594 () Int)
(declare-fun x433 () Int)
(declare-fun x402 () Int)
(declare-fun x78 () Int)
(declare-fun x225 () Int)
(define-fun x316 ((x474 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x474) (>= x474 0)) x474 (- x474 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x162 ((x474 Int)) Int (ite (and (< x474 0) (>= x474 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x474 115792089237316195423570985008687907853269984665640564039457584007913129639936) x474))
(define-fun x582 ((x198 Int)) Bool (and (>= x198 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x198)))
(define-fun x178 ((x198 Int)) Bool (and (= (x48 x198 115792089237316195423570985008687907853269984665640564039457584007913129639935) x198) (= (x48 115792089237316195423570985008687907853269984665640564039457584007913129639935 x198) x198)))
(define-fun x237 ((x198 Int)) Bool (and (= 0 (x48 x198 0)) (= (x48 0 x198) 0)))
(define-fun x625 ((x198 Int)) Bool (= (x48 x198 x198) x198))
(define-fun x555 ((x198 Int)) Bool (and (x625 x198) (x178 x198) (x237 x198)))
(define-fun x115 ((x198 Int) (x573 Int)) Bool (= (x48 x198 x573) (x48 x573 x198)))
(define-fun x354 ((x198 Int) (x573 Int)) Bool (and (=> (>= x198 0) (>= x198 (x48 x198 x573))) (<= 0 (x48 x198 x573)) (=> (>= x573 0) (<= (x48 x198 x573) x573))))
(define-fun x386 ((x198 Int) (x573 Int)) Bool (and (x354 x198 x573) (x115 x198 x573)))
(define-fun x554 ((x198 Int)) Bool (and (= (x409 115792089237316195423570985008687907853269984665640564039457584007913129639935 x198) (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x198)) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x198) (x409 x198 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x586 ((x198 Int)) Bool (and (= (x409 x198 0) x198) (= (x409 0 x198) x198)))
(define-fun x636 ((x198 Int)) Bool (= (x409 x198 x198) 0))
(define-fun x47 ((x198 Int)) Bool (and (x554 x198) (x586 x198) (x636 x198)))
(define-fun x470 ((x198 Int) (x573 Int)) Bool (= (x409 x198 x573) (x409 x573 x198)))
(define-fun x217 ((x198 Int) (x573 Int)) Bool (and (>= (x409 x198 x573) 0) (<= (x409 x198 x573) (+ x573 x198))))
(define-fun x333 ((x198 Int) (x573 Int)) Bool (and (x470 x198 x573) (x217 x198 x573)))
(define-fun x199 ((x198 Int)) Bool (and (= (x585 115792089237316195423570985008687907853269984665640564039457584007913129639935 x198) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x585 x198 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x2 ((x198 Int)) Bool (and (= (x585 0 x198) x198) (= x198 (x585 x198 0))))
(define-fun x527 ((x198 Int)) Bool (= x198 (x585 x198 x198)))
(define-fun x13 ((x198 Int)) Bool (and (x2 x198) (x527 x198) (x199 x198)))
(define-fun x571 ((x198 Int) (x573 Int)) Bool (= (x585 x198 x573) (x585 x573 x198)))
(define-fun x629 ((x198 Int) (x573 Int)) Bool (and (<= (x585 x198 x573) (+ x573 x198)) (=> (<= 0 x573) (<= x573 (x585 x198 x573))) (=> (<= 0 x198) (<= x198 (x585 x198 x573)))))
(define-fun x57 ((x198 Int) (x573 Int)) Bool (and (x629 x198 x573) (x571 x198 x573)))
(define-fun x558 ((x208 Int)) Int 0)
(define-fun x285 ((x208 Int)) Int 0)
(define-fun x415 ((x208 Int)) Int 0)
(define-fun x372 ((x208 Int)) Int 0)
(define-fun x163 ((x208 Int)) Int 0)
(define-fun x136 ((x208 Int)) Int 0)
(define-fun x429 ((x208 Int)) Int 0)
(define-fun x430 ((x208 Int)) Int 0)
(define-fun x499 ((x208 Int)) Int (ite (> x530 x208) (x639 x208) 0))
(define-fun x426 ((x208 Int)) Int (ite (and (<= 0 x208) (< x208 x530)) (x5 x208) (x499 x208)))
(define-fun x502 ((x208 Int)) Int (ite (= x601 x208) x203 (x403 x208)))
(define-fun x214 ((x208 Int)) Int (ite (= x208 128) 20848563940202744267990913087108931510254607481884580617560775381862534086656 (x136 x208)))
(define-fun x606 ((x208 Int)) Int (ite (= 132 x208) x407 (x214 x208)))
(define-fun x228 ((x208 Int)) Int (ite (= 128 x208) 50942633119752846454219349998365661925608737367104304655302372697894809501696 (x415 x208)))
(define-fun x458 ((x208 Int)) Int (ite (= 132 x208) x360 (x228 x208)))
(define-fun x271 ((x208 Int)) Int (ite (= x208 0) x176 (x273 x208)))
(define-fun x362 ((x208 Int)) Int (ite (= x208 128) x176 (x458 x208)))
(define-fun x579 ((x208 Int)) Int (ite (and (< x208 160) (>= x208 128)) (x271 (- x208 128)) (x429 x208)))
(define-fun x552 ((x208 Int)) Int (ite (= x222 x208) x35 (x406 x208)))
(define-fun x156 ((x208 Int)) Int (ite (= x538 x208) x96 (x213 x208)))
(define-fun x146 ((x208 Int)) Int (ite (= x208 x72) x473 (x284 x208)))
(define-fun x256 ((x208 Int)) Int (ite x365 (x213 x208) (x156 x208)))
(define-fun x531 ((x208 Int)) Int (ite x365 (x163 x208) (x362 x208)))
(define-fun x428 ((x208 Int)) Int (ite x365 (x284 x208) (x146 x208)))
(define-fun x101 ((x208 Int)) Int (ite x365 (x406 x208) (x552 x208)))
(define-fun x281 ((x208 Int)) Int (ite (= x208 x177) x626 (x277 x208)))
(define-fun x234 ((x208 Int)) Int (ite x262 (x277 x208) (x281 x208)))
(define-fun x584 ((x208 Int)) Int (ite (= x208 x81) x423 (x256 x208)))
(define-fun x51 ((x208 Int)) Int (ite (= x208 x81) x266 (x584 x208)))
(define-fun x175 ((x208 Int)) Int (ite x262 (x256 x208) (x51 x208)))
(define-fun x6 ((x208 Int)) Int (ite (= x208 x257) x289 (x455 x208)))
(define-fun x169 ((x208 Int)) Int (ite x262 (x455 x208) (x6 x208)))
(define-fun x312 ((x208 Int)) Int (ite (= x208 x106) x465 (x83 x208)))
(define-fun x280 ((x208 Int)) Int (ite (= x208 x27) 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x531 x208)))
(define-fun x446 ((x208 Int)) Int (ite (= x208 x41) x140 (x280 x208)))
(define-fun x235 ((x208 Int)) Int (ite (= x172 x208) x339 (x446 x208)))
(define-fun x139 ((x208 Int)) Int (ite (= x314 x208) x507 (x359 x208)))
(define-fun x497 ((x208 Int)) Int (ite (= x366 x208) x12 (x139 x208)))
(define-fun x189 ((x208 Int)) Int (ite (= x208 128) x339 (x285 x208)))
(define-fun x219 ((x208 Int)) Int (ite (= 128 x208) 1 (x189 x208)))
(define-fun x202 ((x208 Int)) Int (ite (= x208 0) x437 (x94 x208)))
(define-fun x204 ((x208 Int)) Int (ite x611 (x359 x208) (x497 x208)))
(define-fun x77 ((x208 Int)) Int (ite (= x208 x177) x89 (x234 x208)))
(define-fun x399 ((x208 Int)) Int (ite x279 (x234 x208) (x77 x208)))
(define-fun x264 ((x208 Int)) Int (ite (= x208 x374) x102 (x101 x208)))
(define-fun x300 ((x208 Int)) Int (ite (= x208 x589) x559 (x414 x208)))
(define-fun x73 ((x208 Int)) Int (ite (= x410 x208) x468 (x370 x208)))
(define-fun x452 ((x208 Int)) Int (ite (= x177 x208) x342 (x399 x208)))
(define-fun x614 ((x208 Int)) Int (ite (= x208 128) 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x606 x208)))
(define-fun x498 ((x208 Int)) Int (ite (= 132 x208) x656 (x614 x208)))
(define-fun x88 ((x208 Int)) Int (ite (= x208 164) x407 (x498 x208)))
(define-fun x457 ((x208 Int)) Int (ite (= x208 x129) x630 (x204 x208)))
(define-fun x652 ((x208 Int)) Int (ite (= x208 x78) x521 (x457 x208)))
(define-fun x242 ((x208 Int)) Int (ite (= 128 x208) x407 (x558 x208)))
(define-fun x621 ((x208 Int)) Int (ite (= x208 128) 1 (x242 x208)))
(define-fun x127 ((x208 Int)) Int (ite (= x208 0) x645 (x304 x208)))
(define-fun x345 ((x208 Int)) Int (ite (and (> 160 x208) (<= 128 x208)) (x127 (- x208 128)) (x430 x208)))
(define-fun x640 ((x208 Int)) Int (ite (= x208 x207) x473 (x169 x208)))
(define-fun x255 ((x208 Int)) Int (ite (= x208 x249) x313 (x175 x208)))
(assert (x582 x612))
(assert (x582 x610))
(assert (x582 x484))
(assert (x582 x465))
(assert (x582 x148))
(assert (x608 76450787359836037641860180984291677749980919077056822294353438043884394381312))
(assert (x582 x336))
(assert (x582 x61))
(assert (= 0 (x569 31535999)))
(assert (x582 x45))
(assert (x582 x168))
(assert (x582 x551))
(assert (= 2 (x20 (x338 64 x225 2))))
(assert (= (not (and (= x468 (x162 (- x434 x84))) (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 x568) (= x620 (x162 (- x34 x407))) (= x434 (x370 x410)) (= (x154 x442) x212) (= false x201) (not (> x233 x577)) (= (x162 (- x525 x407)) x630) (= x182 (x414 x589)) (= x323 x363) (= x395 false) (= (x338 64 x656 0) x78) (not (> x468 x434)) (= x135 false) (= true x542) (= x578 x363) (= (x162 (- x577 x318)) x522) (not (> x342 x95)) (<= x180 127) (= 2835717307 x254) (= (x162 (- x577 x318)) x233) (= x334 x656) (not (> x461 x34)) (= (x162 (- x182 x407)) x559) (= x129 (x338 64 x382 0)) (not (< x182 x559)) (= 128 x480) (= x461 (x162 (- x34 x407))) (= false x161) (= x319 x334) (= x645 (x621 128)) (not (< x525 x407)) (= (x338 64 x382 0) x624) (= x61 1) (= x549 false) (= (x204 x624) x525) (= (x457 x78) x186) (= (x316 (+ x407 x186)) x521) (>= x212 1) (= (x345 128) x236) (= x95 (x399 x177)) (<= x180 127) (= x390 false) (= x342 (x162 (- x95 x318))) (= 68 x618) (= x236 1) (= x185 false))) x341))
(assert (= (x569 (+ 2 x65)) (x569 x65)))
(assert (= x306 (and x114 x448)))
(assert (x582 x520))
(assert (x608 31536000))
(assert (x582 x522))
(assert (= (x569 (+ 1 x177)) (x569 x177)))
(assert (= (=> (and (or (and x52 (and (= x501 (div x192 x181)) (= x318 x501))) (and (not x52) (and (= (mod (* x58 x18) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x357) (= (mod (* x39 x18) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x418) (= x171 (x162 (- 2 x418))) (= x591 (mod (* x512 x206) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x532 (x316 (+ 1 x151))) (= (x162 (- 2 x286)) x503) (= x39 (mod (* x278 x643) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x503 x591) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x11) (= (x162 (- 2 x32)) x278) (= x40 (x48 x181 x187)) (= x32 (mod (* x643 x18) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x295 (mod (* x407 x38) x181)) (= (mod (* x381 x532) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x451) (= x590 (mod (* x18 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x39 x171) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x58) (<= x1 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= (mod (* x18 x11) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x634) (= x381 (x162 (- x1 (mod (ite (< x192 x295) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= x274 (div x116 x40)) (= x643 (x409 2 x590)) (= (div x181 x40) x18) (= (div x491 x40) x151) (= (mod (* x11 x447) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x108) (= (x162 (- 0 x40)) x491) (= x15 (mod (* x18 x512) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x447 (x162 (- 2 x634))) (= (mod (* (x585 x274 x451) x108) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x282) (= x318 x282) (< x1 x181) (= x116 (x162 (- x192 x295))) (= (x162 (- 2 x15)) x206) (= (x162 (- 2 x357)) x495) (= x187 (x316 (+ 1 (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x181) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (mod (* x18 x591) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x286) (= x512 (mod (* x58 x495) 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (and (= x38 (x399 x177)) (= x52 (= x1 0)) (= x190 (mod (* x38 x407) 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= x165 (x162 (- x190 x192))) (= x1 (x162 (- x165 (mod (ite (< x190 x192) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= x192 (mod (* x38 x407) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (<= 1 x181) (= (x414 x589) x181))) x309) x184))
(assert (x582 x91))
(assert (x582 x420))
(assert (x582 x315))
(assert (x582 x394))
(assert (= (and (not x71) x141) x262))
(assert (x582 x32))
(assert (= x545 (or x279 x311)))
(assert (x582 x503))
(assert (x582 x108))
(assert (= (=> (and (or (and (and (= x637 x635) (= x637 (div x324 x517))) x132) (and (not x132) (and (= (mod (* x440 x627) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x142) (= x412 (mod (* x440 x125) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (div x517 x534) x440) (= (x409 2 x104) x533) (= (mod (* x411 x513) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x353) (= (div x529 x534) x105) (= (x162 (- 2 x142)) x489) (= (mod (* x230 x440) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x7) (= x404 (div x384 x534)) (= (mod (* 3 x440) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x104) (= x513 (x162 (- x188 (mod (ite (< x324 x149) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= x49 (x162 (- 2 x7))) (= x385 (mod (* x440 x617) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x514 (mod (* x489 x627) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x230 x49) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x617) (= x411 (x316 (+ 1 x105))) (= (mod (* x191 x612) x517) x149) (= x19 (x162 (- 2 x622))) (= x125 (mod (* x238 x514) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x533 x440) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x622) (= x230 (mod (* x655 x125) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x655 (x162 (- 2 x412))) (= (mod (* x533 x19) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x627) (= (x316 (+ (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x517) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1)) x193) (= x635 x632) (= (x162 (- x324 x149)) x384) (= (x162 (- 2 x385)) x401) (= (mod (* x401 x617) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x22) (= (mod (* x514 x440) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x536) (< x188 x517) (= (x162 (- 2 x536)) x238) (= x534 (x48 x517 x193)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x188) (= (mod (* (x585 x404 x353) x22) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x632) (= (x162 (- 0 x534)) x529)))) (and (= (+ x25 2) x81) (= (x256 x81) x482) (= x324 (mod (* x612 x191) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x466 (x414 x589)) (= (= 0 x188) x132) (= x567 (x162 (- x424 x324))) (= (x281 x177) x355) (= x423 (x316 (+ x482 x122))) (= x188 (x162 (- x567 (mod (ite (< x424 x324) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= x424 (mod (* x191 x612) 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (x316 (+ x232 x122)) x626) (= x232 (x277 x177)) (not (> x466 x191)) (>= x517 1) (not (> x232 x626)) (= (+ x25 1) x374) (not (> x350 x336)) (= x612 (x101 x374)) (not (> x482 x423)) (= (x316 (+ x466 x355)) x191) (= x550 (x316 (+ x350 x122))) (= x517 (x584 x81)) (= x336 (x316 (+ x122 x350))))) x64) x317))
(assert (= x302 (and (not x132) x330)))
(assert (x582 x107))
(assert (= (x20 (x338 64 x124 2)) 2))
(assert (x582 x323))
(assert (= 0 (x569 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x582 x294))
(assert (x608 773316216))
(assert (x582 x404))
(assert (= (and x272 x110) x159))
(assert (=> (= x427 0) (= (div x427 x427) 0)))
(assert (x582 x451))
(assert (= 2 (x20 (x338 64 x76 2))))
(assert (= x587 (=> (and (and (= x592 (ite (= 0 x427) 1 0)) (= x377 (= x519 0)) (= (div x427 x427) x269) (= (mod (* 126144000 x79) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x654) (= (ite (= 1 x269) 1 0) x443) (= (x277 x177) x623) (= (x162 (- x453 x654)) x107) (= x519 (x162 (- x107 (mod (ite (< x453 x654) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x370 x221) x50) (= 31536000 x344) (= 1 x118) (= x79 (x414 x589)) (= x118 (x585 x592 x443)) (= x221 (+ x589 1)) (= x3 126144000) (= (mod (* x79 126144000) 115792089237316195423570985008687907853269984665640564039457584007913129639935) x453)) (or (and (and (= x53 x511) (= x511 (div x654 31536000))) x377) (and (not x377) (and (= x53 x210) (= x54 (mod (* x519 904625697166532776746648320380374280103671755200316906558262375061821325312) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x346 69185743945351922119161689019356421013382125510479073735908722411855439477079) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x210) (= x56 (div x654 128)) (= (x316 (+ x54 x56)) x346) (<= x519 31535999))))) x26)))
(assert (= 0 (x569 50942633119752846454219349998365661925608737367104304655302372697894809501696)))
(assert (= (x166 (x338 64 x360 0)) x360))
(assert (x582 x400))
(assert (= (or x611 x306) x441))
(assert (=> (= x534 0) (= 0 (div x529 x534))))
(assert (= (and x100 x436) x364))
(assert (x582 x21))
(assert (= x76 (x166 (x338 64 x76 2))))
(assert (x582 x599))
(assert (x582 x396))
(assert (= (x90 (x338 64 x124 2)) 64))
(assert (x582 x56))
(assert (x582 x109))
(assert (= (x569 x638) (x569 (+ x638 1))))
(assert (x582 x301))
(assert (=> (<= x601 10000) (= (x569 x601) 0)))
(assert (= (x569 (x338 64 x140 0)) (x338 64 x140 0)))
(assert (x582 x176))
(assert (= 0 (x569 31536000)))
(assert (x582 x233))
(assert (=> (<= x225 10000) (= (x569 x225) 0)))
(assert (=> (>= 10000 x526) (= (x569 x526) 0)))
(assert (x582 x544))
(assert (x608 904625697166532776746648320380374280103671755200316906558262375061821325312))
(assert (x582 x443))
(assert (x582 x289))
(assert (x582 x617))
(assert (x582 x182))
(assert (= (and x272 (not x110)) x33))
(assert (x582 x466))
(assert (> (x338 64 x124 2) 10000))
(assert (x582 x528))
(assert (= x231 (and x100 (not x436))))
(assert (= (x90 (x338 64 x382 0)) 64))
(assert (x582 x548))
(assert (= (x569 (+ 1 x25)) (x569 x25)))
(assert (x57 x31 x247))
(assert (= (x569 (x338 64 x526 3)) (x338 64 x526 3)))
(assert (= (x569 76450787359836037641860180984291677749980919077056822294353438043884394381312) 0))
(assert (x582 x18))
(assert (x582 x122))
(assert (x582 x408))
(assert (= (x569 (x338 64 x76 2)) (x338 64 x76 2)))
(assert (x582 x60))
(assert (x57 x592 x443))
(assert (x582 x259))
(assert (= (and x367 x244) x535))
(assert (x582 x437))
(assert (= 0 (x569 773316216)))
(assert (= (x90 (x338 64 x526 3)) 64))
(assert (= (and x588 x441) x279))
(assert (x582 x628))
(assert (x582 x461))
(assert (x13 x438))
(assert (x582 x85))
(assert (=> (>= 10000 x382) (= 0 (x569 x382))))
(assert (x582 x16))
(assert (x582 x299))
(assert (x57 x419 x572))
(assert (x608 126144000))
(assert (x582 x335))
(assert (x582 x3))
(assert (= x382 (x166 (x338 64 x382 0))))
(assert (x582 x67))
(assert (x582 x619))
(assert (x582 x11))
(assert (x608 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x582 x326))
(assert (x13 x247))
(assert (= (x20 (x338 64 x382 0)) 0))
(assert (= 64 (x90 (x338 64 x225 2))))
(assert (= (x166 (x338 64 x382 1)) x382))
(assert (= (or x435 x642) x325))
(assert (x582 x602))
(assert (= (x338 64 x656 0) (x569 (x338 64 x656 0))))
(assert (= (x90 (x338 64 x298 2)) 64))
(assert (x582 x210))
(assert (x582 x66))
(assert (x582 x111))
(assert (< 10000 (x338 64 x225 2)))
(assert (=> (= x216 0) (= 0 (div x283 x216))))
(assert (x582 x278))
(assert (x582 x157))
(assert (x582 x402))
(assert (x582 x40))
(assert (=> (= x396 0) (= 0 (div x113 x396))))
(assert (x582 x376))
(assert (x47 x351))
(assert (x582 x243))
(assert (x582 x513))
(assert (x582 x407))
(assert (x582 x38))
(assert (= (x569 (+ x638 3)) (x569 x638)))
(assert (x582 x556))
(assert (x582 x467))
(assert (x582 x247))
(assert (=> (>= 10000 x76) (= 0 (x569 x76))))
(assert (x582 x28))
(assert (x582 x124))
(assert (x582 x68))
(assert (x582 x171))
(assert (x582 x654))
(assert (x13 x451))
(assert (x333 x590 2))
(assert (x582 x89))
(assert (x582 x167))
(assert (x582 x211))
(assert (x582 x12))
(assert (= x86 (and x134 (not x387))))
(assert (x582 x151))
(assert (x582 x546))
(assert (= 0 (x569 126144000)))
(assert (= (x569 (x338 64 x124 2)) (x338 64 x124 2)))
(assert (= x200 (and x134 x387)))
(assert (x582 x358))
(assert (x582 x363))
(assert (x582 x246))
(assert (=> (= x216 0) (= 0 (div x294 x216))))
(assert (x608 20848563940202744267990913087108931510254607481884580617560775381862534086656))
(assert (x582 x655))
(assert (x582 x351))
(assert (= x140 (x166 (x338 64 x140 0))))
(assert (= (x569 115792089237316195423570985008687907853269984665640564039457584007913129639904) 0))
(assert (= (=> (and (<= x225 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= x465 x196) (= x102 (x162 (- x8 x635))) (= (x584 x81) x575) (= (x101 x374) x8) (= x339 x635) (not (< x575 x266)) (not (> x76 x196)) (= (x162 (- x575 x191)) x266) (= x196 (+ x225 1)) (not (> x102 x8)) (= x550 x68)) x483) x64))
(assert (=> (= x181 0) (= (div x192 x181) 0)))
(assert (x582 x160))
(assert (x582 x368))
(assert (x582 x275))
(assert (x582 x322))
(assert (x47 x104))
(assert (= (and x441 (not x588)) x134))
(assert (x582 x95))
(assert (x582 x453))
(assert (not (x608 (x338 64 x76 2))))
(assert (x582 x283))
(assert (x608 115792089237316195423570985008687907853269984665640564039457584007913129639934))
(assert (x582 x489))
(assert (x582 x464))
(assert (x582 x58))
(assert (= x267 (=> (and (or (and (not x110) (and (= (div x484 128) x310) (<= x398 31535999) (= (x316 (+ x46 x310)) x320) (= (mod (* x320 69185743945351922119161689019356421013382125510479073735908722411855439477079) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x492) (= x46 (mod (* 904625697166532776746648320380374280103671755200316906558262375061821325312 x398) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x520 x492))) (and x110 (and (= x509 (div x484 31536000)) (= x509 x520)))) (and (= x297 (div x275 x275)) (= 31536000 x463) (= x229 (x370 x173)) (= (mod (* x243 126144000) 115792089237316195423570985008687907853269984665640564039457584007913129639935) x352) (= (mod (* 126144000 x243) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x484) (= (+ x589 1) x173) (= (x162 (- x604 (mod (ite (< x352 x484) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x398) (= 1 x505) (= x459 126144000) (= x110 (= x398 0)) (= x505 (x585 x419 x572)) (= (x162 (- x352 x484)) x604) (= (ite (= x275 0) 1 0) x419) (= x243 (x414 x589)) (= x572 (ite (= 1 x297) 1 0)) (= (x234 x177) x63))) x30)))
(assert (x582 x501))
(assert (x582 x568))
(assert (= (x569 (x338 64 x225 2)) (x338 64 x225 2)))
(assert (= (x569 (x338 64 x382 0)) (x338 64 x382 0)))
(assert (= (x569 20848563940202744267990913087108931510254607481884580617560775381862534086656) 0))
(assert (x582 x627))
(assert (x582 x347))
(assert (x582 x269))
(assert (x582 x559))
(assert (= x611 (and x114 (not x448))))
(assert (x13 x353))
(assert (x582 x331))
(assert (= 0 (x569 115792089237316195423570985008687907853269984665640564039457584007913129639934)))
(assert (= x26 (=> (and (and (= x358 (x585 x31 x247)) (= (x316 (+ x53 x50)) x223) (= x247 (ite (= 1 x493) 1 0)) (= x358 1) (not (< x290 x427)) (= x31 (ite (= 0 x53) 1 0)) (not (> x53 x223)) (= (> x290 x223) x436) (= x290 (x316 (+ x427 x623))) (= x493 (div x53 x53))) (or (and x436 (and (= x122 x322) (not (> x322 x223)) (= (x162 (- x223 x623)) x322))) (and (not x436) (= x122 x427)))) x317)))
(assert (not (x608 (x338 64 x360 0))))
(assert (x582 x383))
(assert (x582 x41))
(assert (x608 4294967295))
(assert (= true x515))
(assert (x582 x232))
(assert (x608 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (x582 x361))
(assert (x582 x637))
(assert (x13 x147))
(assert (x582 x541))
(assert (x582 x397))
(assert (x582 x487))
(assert (x582 x186))
(assert (x582 x191))
(assert (= (x569 (+ 1 x589)) (x569 x589)))
(assert (x582 x514))
(assert (x582 x355))
(assert (=> (= 0 x517) (= (div x324 x517) 0)))
(assert (x582 x530))
(assert (x582 x307))
(assert (=> (= x53 0) (= 0 (div x53 x53))))
(assert (< 10000 (x338 64 x382 1)))
(assert (x582 x35))
(assert (= 64 (x90 (x338 64 x656 0))))
(assert (=> (>= 10000 x360) (= 0 (x569 x360))))
(assert (x582 x15))
(assert (x582 x181))
(assert (= x330 (or x231 x364)))
(assert (x386 x517 x193))
(assert (x582 x170))
(assert (x47 x590))
(assert (x582 x39))
(assert (x582 x524))
(assert (x582 x379))
(assert (x582 x75))
(assert (x582 x565))
(assert (= 0 (x20 (x338 64 x656 0))))
(assert (x582 x23))
(assert (x582 x532))
(assert (x582 x491))
(assert (= (x569 (+ x431 1)) (x569 x431)))
(assert (x582 x623))
(assert (< 10000 (x338 64 x140 0)))
(assert (x582 x310))
(assert (= x141 (or x365 x98)))
(assert (= (x569 1461501637330902918203684832716283019655932542975) 0))
(assert (= (and x82 (not x337)) x98))
(assert (x582 x282))
(assert (=> (>= 10000 x656) (= (x569 x656) 0)))
(assert (x582 x539))
(assert (x582 x113))
(assert (x582 x634))
(assert (= x59 (and (not x367) x244)))
(assert (not (x608 (x338 64 x140 0))))
(assert (x582 x27))
(assert (x582 x473))
(assert (x582 x238))
(assert (= (x20 (x338 64 x298 2)) 2))
(assert (x582 x143))
(assert (x582 x649))
(assert (x582 x76))
(assert (x582 x223))
(assert (x582 x381))
(assert (=> (<= x433 10000) (= (x569 x433) 0)))
(assert (= (and x545 x52) x537))
(assert (x582 x529))
(assert (< (x338 64 x382 1) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x386 x181 x187))
(assert (=> (>= 10000 x298) (= 0 (x569 x298))))
(assert (x582 x209))
(assert (= x469 (=> (and (= x337 (= 0 x160)) (or (and (and (= x76 x298) (= x335 x91) (= x27 128)) x337) (and (and (not (< x96 x350)) (= x540 (x154 x442)) (= false x421) (= x490 (+ 1 x613)) (= x117 false) (>= x540 1) (not (> x35 x291)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x298) (= x72 (x338 64 x124 2)) (= x27 160) (= x67 (x316 (+ x335 x121))) (= x356 128) (= (x338 64 x360 0) x486) (= x152 (+ x298 1)) (= x121 (x552 x490)) (= (x316 (+ x350 x34)) x96) (= (x338 64 x298 2) x613) (= x445 x327) (= (+ 2 x560) x538) (= x560 (x338 64 x298 2)) (= x176 (x359 x486)) (= x471 false) (= x445 x360) (= (+ 1 x298) x76) (= x91 x67) (= x35 (x162 (- x291 x335))) (>= 127 x628) (= x547 (x316 (+ x335 x121))) (= x348 false) (not (> x335 x547)) (>= 127 x628) (= 36 x379) (= x431 (x338 64 x298 2)) (= (x579 128) x291) (= (+ x431 1) x222) (= x293 50942633119752846454219349998365661925608737367104304655302372697894809501696) (= x368 1889567281) (= x124 (+ x298 1))) (not x337)))) x651)))
(assert (x582 x635))
(assert (= (x90 (x338 64 x382 1)) 64))
(assert (= (x569 (x338 64 x382 1)) (x338 64 x382 1)))
(assert (x582 x152))
(assert (x582 x603))
(assert (x582 x250))
(assert (= (x338 64 x298 2) (x569 (x338 64 x298 2))))
(assert (x13 x31))
(assert (x582 x468))
(assert (x582 x445))
(assert (x582 x46))
(assert (= (x20 (x338 64 x360 0)) 0))
(assert (x582 x268))
(assert (x582 x496))
(assert (x582 x641))
(assert (x582 x130))
(assert (x582 x29))
(assert (x582 x511))
(assert (x13 x443))
(assert (x582 x226))
(assert (x555 x396))
(assert (x582 x120))
(assert (x582 x547))
(assert (x582 x440))
(assert (x582 x500))
(assert (x582 x225))
(assert (= (x569 4294967295) 0))
(assert (x582 x147))
(assert (x582 x543))
(assert (= x305 (and (not x52) x545)))
(assert (x555 x517))
(assert (x582 x7))
(assert (= 0 (x569 904625697166532776746648320380374280103671755200316906558262375061821325312)))
(assert (x582 x512))
(assert (x582 x196))
(assert (x555 x193))
(assert (x582 x591))
(assert (x13 x419))
(assert (x582 x14))
(assert (=> (= x534 0) (= 0 (div x517 x534))))
(assert (x582 x296))
(assert (= x298 (x166 (x338 64 x298 2))))
(assert (x582 x216))
(assert (=> (= 0 x40) (= (div x181 x40) 0)))
(assert (x13 x572))
(assert (x582 x291))
(assert (x582 x4))
(assert (x582 x620))
(assert (x582 x266))
(assert (x582 x31))
(assert (x582 x598))
(assert (x582 x229))
(assert (x582 x570))
(assert (= (or x241 x262) x114))
(assert (=> (>= 10000 x124) (= 0 (x569 x124))))
(assert (=> (>= 10000 x442) (= 0 (x569 x442))))
(assert (x582 x618))
(assert (=> (= 0 x216) (= 0 (div x396 x216))))
(assert (x582 x385))
(assert (x582 x550))
(assert (= (=> (and (= x249 (+ x65 2)) (not (> x42 x89)) (= x89 (x316 (+ x42 x66))) (not (> x539 x313)) (= x631 x577) (= (x234 x177) x42) (= x650 (x316 (+ x66 x68))) (= (x316 (+ x539 x66)) x313) (= x539 (x175 x249)) (= (x316 (+ x68 x66)) x631) (not (> x68 x650))) x184) x131))
(assert (x582 x557))
(assert (x582 x526))
(assert (x582 x62))
(assert (x582 x434))
(assert (x582 x615))
(assert (= (x90 (x338 64 x76 2)) 64))
(assert (x582 x155))
(assert (= x392 (and x515 (not x92))))
(assert (< 10000 (x338 64 x382 0)))
(assert (x582 x433))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x338 64 x140 0)))
(assert (x582 x180))
(assert (x582 x99))
(assert (> (x338 64 x76 2) 10000))
(assert (x582 x44))
(assert (< (x338 64 x526 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x582 x320))
(assert (x582 x360))
(assert (> (x338 64 x298 2) 10000))
(assert (x582 x411))
(assert (x582 x49))
(assert (= (and x563 x252) x435))
(assert (x582 x319))
(assert (x582 x567))
(assert (=> (= 0 x40) (= 0 (div x491 x40))))
(assert (x582 x478))
(assert (= x432 (and (not x553) x561)))
(assert (= (or x179 x392) x82))
(assert (x582 x327))
(assert (x608 1889567281))
(assert (not x439))
(assert (x582 x519))
(assert (x582 x389))
(assert (x582 x506))
(assert (x57 x404 x353))
(assert (x582 x119))
(assert (x582 x50))
(assert (= x179 (and x92 x515)))
(assert (x608 69185743945351922119161689019356421013382125510479073735908722411855439477079))
(assert (= x656 (x166 (x338 64 x656 0))))
(assert (x582 x449))
(assert (x582 x592))
(assert (x582 x492))
(assert (= (x20 (x338 64 x526 3)) 3))
(assert (x582 x203))
(assert (= (x90 (x338 64 x360 0)) 64))
(assert (not (x608 (x338 64 x382 1))))
(assert (x582 x622))
(assert (x57 x274 x451))
(assert (= x561 (and x141 x71)))
(assert (x582 x540))
(assert (x582 x9))
(assert (x582 x456))
(assert (x582 x488))
(assert (x582 x145))
(assert (x582 x118))
(assert (x582 x251))
(assert (x582 x604))
(assert (x582 x438))
(assert (< 10000 (x338 64 x656 0)))
(assert (x582 x646))
(assert (x582 x192))
(assert (x582 x656))
(assert (x582 x344))
(assert (= (x166 (x338 64 x225 2)) x225))
(assert (x582 x230))
(assert (x582 x104))
(assert (x582 x96))
(assert (x582 x581))
(assert (x582 x212))
(assert (x582 x292))
(assert (not (x608 (x338 64 x382 0))))
(assert (x582 x609))
(assert (x13 x274))
(assert (x582 x382))
(assert (x582 x36))
(assert (x582 x384))
(assert (x582 x340))
(assert (= 0 (x20 (x338 64 x140 0))))
(assert (x582 x54))
(assert (x57 x438 x524))
(assert (x582 x645))
(assert (x582 x313))
(assert (x582 x577))
(assert (x582 x572))
(assert (x582 x482))
(assert (x582 x631))
(assert (x582 x194))
(assert (x582 x525))
(assert (x582 x353))
(assert (= x244 (or x159 x33)))
(assert (= (=> (and (or (and x367 (and (= x226 x66) (not (< x258 x226)) (= x226 (x162 (- x258 x63))))) (and (= x275 x66) (not x367))) (and (= x609 1) (not (> x275 x596)) (= x147 (ite (= 1 x153) 1 0)) (= (> x596 x258) x367) (= (x316 (+ x229 x520)) x258) (= (div x520 x520) x153) (not (> x520 x258)) (= (ite (= 0 x520) 1 0) x649) (= (x585 x649 x147) x609) (= (x316 (+ x275 x63)) x596))) x131) x30))
(assert (x582 x1))
(assert (x582 x424))
(assert (x582 x274))
(assert (x582 x97))
(assert (x582 x93))
(assert (= (or x576 x349) x100))
(assert (x57 x649 x147))
(assert (x13 x524))
(assert (x582 x187))
(assert (x582 x297))
(assert (x582 x17))
(assert (x582 x357))
(assert (x582 x425))
(assert (x582 x493))
(assert (x608 604800))
(assert (< (x338 64 x360 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x582 x494))
(assert (x582 x290))
(assert (x582 x616))
(assert (< (x338 64 x76 2) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= x311 (or x59 x535)))
(assert (=> (>= 10000 x140) (= (x569 x140) 0)))
(assert (x582 x103))
(assert (x582 x63))
(assert (x582 x34))
(assert (x13 x404))
(assert (= (x569 604800) 0))
(assert (= (and x377 x144) x576))
(assert (x582 x650))
(assert (= 1 (x20 (x338 64 x382 1))))
(assert (x13 x592))
(assert (x582 x583))
(assert (x582 x481))
(assert (= (x569 (+ x10 5)) (x569 x10)))
(assert (> (x338 64 x526 3) 10000))
(assert (x582 x116))
(assert (x582 x369))
(assert (= (x569 x560) (x569 (+ x560 2))))
(assert (x582 x495))
(assert (x555 x187))
(assert (x582 x648))
(assert (x582 x193))
(assert (= (x569 57896044618658097711785492504343953926634992332820282019728792003956564819967) 0))
(assert (x582 x342))
(assert (= (x569 (+ 2 x25)) (x569 x25)))
(assert (x582 x350))
(assert (x582 x295))
(assert (< (x338 64 x298 2) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (=> (and (and (<= x530 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= 1 x548) (= false x472) x74 (>= 1461501637330902918203684832716283019655932542975 x433) (= x24 773316216) (<= x261 115792089237316195423570985008687907853269984665640564039457584007913129639935) x150 (<= x197 115792089237316195423570985008687907853269984665640564039457584007913129639935) x70 (= x194 x323) (<= x610 1461501637330902918203684832716283019655932542975) (>= x456 1) (= (x502 x382) x265) (= false x371) (= 128 x130) (= (x5 4) x407) (>= x416 0) (= x99 36) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x328) (= (x154 x382) x301) (= (> (x154 x442) 0) x150) (= 0 x462) (= (x154 x433) x570) (= (x338 64 x382 1) x10) (= 773316216 x23) (= x601 x566) (= x375 false) (>= x382 1) (= x36 20848563940202744267990913087108931510254607481884580617560775381862534086656) (not (= x382 x442)) (= x360 x433) (<= 0 x215) (>= 1461501637330902918203684832716283019655932542975 x477) (= x44 x323) (not (= x442 x360)) (= x422 1) (= x263 (+ 5 x10)) (>= 1461501637330902918203684832716283019655932542975 x444) (= (x284 x248) x619) (= x194 x14) (= x566 x656) (>= 127 x602) (<= x602 127) (= x92 (not (> x227 x473))) (= (x5 0) x170) (<= x456 255) (= false x580) (not (= x360 x382)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x240) (= false x605) (not (> x619 x227)) (<= 0 x328) (= x265 x479) (<= 1 x442) (= x145 0) (= x203 (x403 x601)) (>= 1461501637330902918203684832716283019655932542975 x442) (>= x360 1) (<= 1 x543) (= x261 x473) (>= x530 36) (>= x477 0) (<= 0 x197) (>= x240 0) (<= x562 4294967295) (<= 1 x570) (>= x261 0) (>= 1461501637330902918203684832716283019655932542975 x566) (= x248 (x338 64 x298 2)) (= x407 x44) (= x467 773316216) (<= x378 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x382 x516) (= x303 (x338 64 x526 3)) (>= 1461501637330902918203684832716283019655932542975 x382) (<= 0 x378) (= x526 (x174 x382)) (= (x154 x360) x543) (= x69 false) (>= 1461501637330902918203684832716283019655932542975 x360) (>= 127 x361) (>= 1461501637330902918203684832716283019655932542975 x137) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x416) (>= 1461501637330902918203684832716283019655932542975 x103) (= false x647) (= (x380 x303) x456) (<= 0 x444) (= x62 x170) (>= x301 1) (= (x405 x263) x548) (>= x137 0) (>= 127 x361) (= x227 (x316 (+ 604800 x619))) (= (> (x154 x360) 0) x70) (<= x215 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 1 x566) (= x633 false) (= x74 (> (x154 x382) 0)) (= x158 false) (<= 0 x562) (<= 1 x103) (= x656 x103) (>= x433 1)) (or (and x92 (= 1 x160)) (and (not x92) (= (ite x92 1 0) x160)))) x469) x439))
(assert (x582 x339))
(assert (x582 x459))
(assert (x582 x427))
(assert (x582 x8))
(assert (x582 x308))
(assert (x582 x346))
(assert (not (x608 (x338 64 x526 3))))
(assert (< (x338 64 x225 2) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= x651 (=> (and (= (+ x564 1) x106) (= x25 (x338 64 x225 2)) (= x177 (+ 3 x638)) (= (+ x638 1) x589) (= (x338 64 x382 1) x638) (not (> x407 x143)) (= (x277 x177) x119) (= (< x225 x76) x71) (= x564 (+ 5 x638)) (= x583 (x405 x564)) (= x143 (x414 x589)) (not (> x583 x473)) (= x225 (x83 x106))) (and (=> (and (and (or (and x553 (and (= (div x565 31536000) x109) (= x427 x109))) (and (not x553) (and (= x616 (x162 (- x615 (mod (ite (< x565 x504) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= x329 (mod (* 69185743945351922119161689019356421013382125510479073735908722411855439477079 x557) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x504 (mod (* x260 x326) 31536000)) (= x383 (x162 (- x565 x504))) (= x594 (mod (* 904625697166532776746648320380374280103671755200316906558262375061821325312 x616) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x329 x427) (= (x316 (+ x218 x594)) x557) (= (div x383 128) x218) (>= 31535999 x615)))) (and (= x257 (+ x177 1)) (= (x455 x257) x420) (not (> x260 x289)) (not (< x289 x307)) (= (x162 (- x644 (mod (ite (> x565 x93) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x615) (= x289 (x316 (+ x307 604800))) (= x644 (x162 (- x93 x565))) (= (= x615 0) x553) (= x603 31536000) (= (mod (* x260 x326) 115792089237316195423570985008687907853269984665640564039457584007913129639935) x93) (= x326 (x414 x589)) (= x307 (x428 x25)) (= (mod (* x260 x326) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x565) (= x260 (x162 (- x289 x420))))) x71) x587) (=> (and (and (= x225 x465) (= x68 x350) (= x339 0)) (not x71)) x483)))))
(assert (x582 x334))
(assert (x555 x45))
(assert (x582 x536))
(assert (x582 x632))
(assert (not (x608 (x338 64 x225 2))))
(assert (= (x166 (x338 64 x124 2)) x124))
(assert (x582 x401))
(assert (x582 x505))
(assert (x582 x265))
(assert (= x642 (and x252 (not x563))))
(assert (x582 x206))
(assert (not (x608 (x338 64 x124 2))))
(assert (= 0 (x569 1889567281)))
(assert (x582 x418))
(assert (x582 x293))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x338 64 x124 2)))
(assert (x582 x419))
(assert (x582 x142))
(assert (x582 x42))
(assert (x582 x102))
(assert (= x321 (and x132 x330)))
(assert (x608 50942633119752846454219349998365661925608737367104304655302372697894809501696))
(assert (x582 x260))
(assert (x582 x227))
(assert (x582 x413))
(assert (= (x569 (+ x638 5)) (x569 x638)))
(assert (x582 x521))
(assert (= 0 (x569 2835717307)))
(assert (x582 x324))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x338 64 x656 0)))
(assert (x582 x480))
(assert (x582 x84))
(assert (x582 x121))
(assert (x582 x517))
(assert (= x309 (=> (and (and (= x528 (mod (* x407 x268) 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (+ x589 1) x410) (= (x162 (- x157 (mod (ite (> x113 x528) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x487) (= x113 (mod (* x407 x268) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x162 (- x528 x113)) x157) (= (= x487 0) x563) (<= 1 x396) (= (x414 x589) x396) (= (x370 x410) x268)) (or (and (and (= x167 (x162 (- 2 x331))) (= x646 (mod (* x259 x551) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x283 (x162 (- x113 x43))) (= x331 (mod (* x494 x259) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x556 (mod (* x259 x369) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x400 (mod (* x259 x251) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x162 (- 0 x216)) x294) (= x464 (mod (* x211 x541) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x494 x167) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x251) (= x506 (x316 (+ 1 x546))) (= (div x283 x216) x438) (= (x48 x396 x45) x216) (= x551 (mod (* x369 x75) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x494 (mod (* x155 x464) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x9 (mod (* x551 x340) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x155 (x162 (- 2 x641))) (= x250 (mod (* x259 x541) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x506 x60) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x524) (= x84 x595) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x487) (= (x162 (- 2 x250)) x211) (= (mod (* (x585 x438 x524) x9) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x595) (= x60 (x162 (- x487 (mod (ite (< x113 x43) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= x546 (div x294 x216)) (= x259 (div x396 x216)) (= x641 (mod (* x464 x259) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x454 (x162 (- 2 x400))) (= x45 (x316 (+ (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x396) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1))) (= x541 (x409 2 x351)) (< x487 x396) (= (mod (* x268 x407) x396) x43) (= x340 (x162 (- 2 x646))) (= (mod (* x454 x251) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x369) (= (x162 (- 2 x556)) x75) (= (mod (* 3 x259) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x351)) (not x563)) (and (and (= x397 x84) (= (div x113 x396) x397)) x563))) x341)))
(assert (= (=> (and (or (not x448) (and (and (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x27)) (> x168 x27) (= 2835717307 x376) (= (x359 x195) x402) (= (x518 x638) x140) (>= x332 1) (not (< x91 x246)) (= x347 x339) (= 68 x111) (= 1 x112) (= x195 (x338 64 x360 0)) (= (x154 x442) x332) (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 x488) (<= x599 127) (= x315 (x139 x366)) (= (x338 64 x140 0) x366) (= x496 x140) (= x292 (x162 (- x91 x339))) (= x437 (x219 128)) (= false x450) (= x41 (x316 (+ x27 4))) (= (x162 (- x402 x339)) x507) (= x16 (x316 (+ x41 64))) (= false x37) (<= x27 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= x246 (x162 (- x91 x339))) (= false x574) (>= x140 1) (>= 127 x599) (= x607 false) (= (x316 (+ x339 x315)) x12) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x27)) (= (x316 (+ 32 x27)) x168) (= x148 x347) (<= x27 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= x308 x496) (not (> x339 x402)) (not (= x27 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (= 68 x17) (= (x316 (+ 32 x41)) x172) (<= x140 1461501637330902918203684832716283019655932542975) (= x111 (x162 (- x16 x27))) (= (x338 64 x360 0) x314) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x27)) x448)) (= (< 0 x339) x448)) x508) x483))
(assert (x582 x352))
(assert (x582 x188))
(assert (x582 x534))
(assert (x582 x479))
(assert (x13 x649))
(assert (x582 x442))
(assert (= (x569 x564) (x569 (+ 1 x564))))
(assert (x582 x454))
(assert (x582 x19))
(assert (= (and x144 (not x377)) x349))
(assert (x582 x332))
(assert (x386 x396 x45))
(assert (x582 x140))
(assert (x582 x463))
(assert (x582 x254))
(assert (x582 x125))
(assert (x582 x79))
(assert (x582 x643))
(assert (= 0 (x569 69185743945351922119161689019356421013382125510479073735908722411855439477079)))
(assert (=> (= 0 x275) (= 0 (div x275 x275))))
(assert (=> (= 0 x534) (= 0 (div x384 x534))))
(assert (x582 x504))
(assert (x333 x104 2))
(assert (x582 x133))
(assert (not (x608 (x338 64 x656 0))))
(assert (x582 x105))
(assert (=> (= x40 0) (= 0 (div x116 x40))))
(assert (x582 x594))
(assert (x608 57896044618658097711785492504343953926634992332820282019728792003956564819967))
(assert (x582 x595))
(assert (x582 x509))
(assert (x582 x533))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x338 64 x382 0)))
(assert (x582 x112))
(assert (< 10000 (x338 64 x360 0)))
(assert (x582 x653))
(assert (= (or x432 x523) x144))
(assert (x582 x329))
(assert (x582 x596))
(assert (= x365 (and x337 x82)))
(assert (x582 x190))
(assert (x582 x590))
(assert (x582 x258))
(assert (x582 x165))
(assert (x582 x507))
(assert (x582 x318))
(assert (= (x338 64 x360 0) (x569 (x338 64 x360 0))))
(assert (= (x166 (x338 64 x526 3)) x526))
(assert (= x523 (and x561 x553)))
(assert (x582 x626))
(assert (x582 x218))
(assert (x582 x22))
(assert (x582 x149))
(assert (x582 x236))
(assert (x582 x644))
(assert (= (or x321 x302) x241))
(assert (= (=> (and (= (< 0 x481) x588) (= x648 (x162 (- x29 x119))) (= x29 (x234 x177)) (= (x162 (- x465 x76)) x481) (not (< x29 x648))) (and (=> (and (not x588) (and (or (and (and (= x275 x209) (= (div x598 31536000) x209)) x387) (and (and (= x581 (x162 (- x394 (mod (ite (> x299 x598) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= x449 (x316 (+ x425 x413))) (= x389 (mod (* 69185743945351922119161689019356421013382125510479073735908722411855439477079 x449) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x389 x275) (= (mod (* x581 904625697166532776746648320380374280103671755200316906558262375061821325312) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x425) (= (mod (* x408 x97) 31536000) x299) (>= 31535999 x394) (= (div x85 128) x413) (= x85 (x162 (- x598 x299)))) (not x387))) (and (= x120 (x169 x207)) (= x500 (x162 (- x133 x598))) (= (x414 x589) x97) (= (+ x177 1) x207) (= (mod (* x408 x97) 115792089237316195423570985008687907853269984665640564039457584007913129639935) x133) (= (= 0 x394) x387) (= x598 (mod (* x97 x408) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= 31536000 x296) (= x408 (x162 (- x473 x120))) (= x65 (x338 64 x76 2)) (= x394 (x162 (- x500 (mod (ite (> x598 x133) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (not (> x408 x473))))) x267) (=> (and (= x577 x68) x588) x184))) x508))
(assert (x333 x351 2))
(assert (x582 x286))
(assert (x582 x43))
(assert (x582 x172))
(assert (x582 x600))
(assert (x608 1461501637330902918203684832716283019655932542975))
(assert (x555 x181))
(assert (x608 31535999))
(assert (x582 x128))
(assert (x582 x53))
(assert (= 64 (x90 (x338 64 x140 0))))
(assert (x582 x398))
(assert (=> (= x520 0) (= 0 (div x520 x520))))
(assert (x582 x417))
(assert (x582 x578))
(assert (x582 x630))
(assert (x582 x153))
(assert (x582 x412))
(assert (x582 x575))
(assert (x47 2))
(assert (= (or x537 x305) x252))
(assert (x582 x601))
(assert (= (or x200 x86) x272))
(assert (= (x569 x613) (x569 (+ 1 x613))))
(assert (x582 x298))
(assert (x582 x447))
(assert (x608 2835717307))
(assert (x582 x423))
(assert (not (x608 (x338 64 x298 2))))
(assert (x582 x356))
(check-sat)
(exit)
