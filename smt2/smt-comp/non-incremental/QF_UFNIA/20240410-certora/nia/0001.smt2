(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Certora
Generated on: 2024-04-10
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x527 () Int)
(declare-fun x514 () Bool)
(declare-fun x197 () Int)
(declare-fun x512 () Int)
(declare-fun x3 () Bool)
(declare-fun x571 () Int)
(declare-fun x90 () Int)
(declare-fun x303 () Bool)
(declare-fun x442 () Int)
(declare-fun x429 () Int)
(declare-fun x497 () Int)
(declare-fun x226 () Int)
(declare-fun x486 (Int) Int)
(declare-fun x245 () Int)
(declare-fun x184 () Bool)
(declare-fun x171 () Int)
(declare-fun x567 () Bool)
(declare-fun x280 (Int) Int)
(declare-fun x209 () Int)
(declare-fun x47 () Int)
(declare-fun x554 () Int)
(declare-fun x284 () Bool)
(declare-fun x111 () Bool)
(declare-fun x18 () Int)
(declare-fun x293 () Int)
(declare-fun x49 () Bool)
(declare-fun x223 (Int) Int)
(declare-fun x356 () Int)
(declare-fun x36 () Int)
(declare-fun x434 () Int)
(declare-fun x570 () Int)
(declare-fun x78 () Bool)
(declare-fun x437 () Int)
(declare-fun x219 (Int Int) Int)
(declare-fun x576 (Int) Int)
(declare-fun x410 (Int) Int)
(declare-fun x187 (Int) Int)
(declare-fun x478 () Bool)
(declare-fun x424 () Int)
(declare-fun x289 () Bool)
(declare-fun x193 () Int)
(declare-fun x114 () Int)
(declare-fun x507 () Int)
(declare-fun x106 () Int)
(declare-fun x189 () Int)
(declare-fun x129 () Int)
(declare-fun x305 () Int)
(declare-fun x46 () Int)
(declare-fun x4 () Int)
(declare-fun x199 () Bool)
(declare-fun x438 () Int)
(declare-fun x241 () Int)
(declare-fun x259 () Int)
(declare-fun x389 () Bool)
(declare-fun x196 () Bool)
(declare-fun x299 () Int)
(declare-fun x452 () Bool)
(declare-fun x472 () Int)
(declare-fun x532 () Int)
(declare-fun x328 () Int)
(declare-fun x267 () Int)
(declare-fun x103 () Int)
(declare-fun x20 () Int)
(declare-fun x127 () Int)
(declare-fun x276 () Int)
(declare-fun x94 (Int) Int)
(declare-fun x407 () Int)
(declare-fun x247 () Int)
(declare-fun x539 () Bool)
(declare-fun x7 () Int)
(declare-fun x364 () Bool)
(declare-fun x76 () Int)
(declare-fun x42 () Int)
(declare-fun x334 () Int)
(declare-fun x174 () Bool)
(declare-fun x35 () Bool)
(declare-fun x399 () Bool)
(declare-fun x172 () Int)
(declare-fun x154 () Int)
(declare-fun x110 () Bool)
(declare-fun x67 () Int)
(declare-fun x13 () Int)
(declare-fun x362 () Int)
(declare-fun x271 () Bool)
(declare-fun x262 () Bool)
(declare-fun x307 (Int) Int)
(declare-fun x33 () Int)
(declare-fun x188 () Int)
(declare-fun x440 () Bool)
(declare-fun x85 () Int)
(declare-fun x95 () Int)
(declare-fun x485 () Bool)
(declare-fun x314 () Int)
(declare-fun x340 () Int)
(declare-fun x82 (Int) Int)
(declare-fun x31 () Bool)
(declare-fun x221 () Int)
(declare-fun x495 () Int)
(declare-fun x32 () Int)
(declare-fun x98 () Int)
(declare-fun x562 (Int) Int)
(declare-fun x52 () Bool)
(declare-fun x559 () Int)
(declare-fun x518 () Bool)
(declare-fun x508 () Int)
(declare-fun x590 () Int)
(declare-fun x207 () Int)
(declare-fun x222 () Bool)
(declare-fun x526 () Bool)
(declare-fun x558 () Bool)
(declare-fun x238 () Int)
(declare-fun x466 () Int)
(declare-fun x464 () Int)
(declare-fun x166 () Int)
(declare-fun x591 () Int)
(declare-fun x316 () Bool)
(declare-fun x401 () Int)
(declare-fun x510 () Int)
(declare-fun x86 () Int)
(declare-fun x112 (Int) Int)
(declare-fun x580 () Bool)
(declare-fun x181 () Bool)
(declare-fun x232 () Int)
(declare-fun x432 () Int)
(declare-fun x233 () Bool)
(declare-fun x333 () Int)
(declare-fun x210 () Int)
(declare-fun x354 () Bool)
(declare-fun x596 () Int)
(declare-fun x359 () Int)
(declare-fun x552 () Bool)
(declare-fun x272 () Int)
(declare-fun x146 () Int)
(declare-fun x205 () Int)
(declare-fun x281 () Int)
(declare-fun x545 () Bool)
(declare-fun x484 () Int)
(declare-fun x74 () Int)
(declare-fun x235 () Int)
(declare-fun x498 () Int)
(declare-fun x250 () Int)
(declare-fun x179 () Int)
(declare-fun x183 () Int)
(declare-fun x561 () Int)
(declare-fun x543 () Int)
(declare-fun x324 () Int)
(declare-fun x23 () Int)
(declare-fun x463 () Int)
(declare-fun x509 () Bool)
(declare-fun x8 () Int)
(declare-fun x83 () Int)
(declare-fun x358 () Int)
(declare-fun x16 () Bool)
(declare-fun x229 () Int)
(declare-fun x369 () Int)
(declare-fun x175 () Int)
(declare-fun x542 () Bool)
(declare-fun x218 () Int)
(declare-fun x10 () Bool)
(declare-fun x58 () Int)
(declare-fun x236 () Int)
(declare-fun x311 () Int)
(declare-fun x79 () Int)
(declare-fun x186 () Int)
(declare-fun x519 () Int)
(declare-fun x220 () Int)
(declare-fun x568 () Int)
(declare-fun x55 () Bool)
(declare-fun x101 () Int)
(declare-fun x395 () Bool)
(declare-fun x445 () Int)
(declare-fun x140 () Int)
(declare-fun x22 () Bool)
(declare-fun x448 () Bool)
(declare-fun x323 (Int Int) Int)
(declare-fun x547 () Int)
(declare-fun x48 () Int)
(declare-fun x149 () Int)
(declare-fun x162 () Int)
(declare-fun x138 () Bool)
(declare-fun x214 () Bool)
(declare-fun x517 () Int)
(declare-fun x352 () Int)
(declare-fun x26 () Int)
(declare-fun x19 () Int)
(declare-fun x459 () Bool)
(declare-fun x374 () Int)
(declare-fun x309 () Int)
(declare-fun x577 () Int)
(declare-fun x595 () Bool)
(declare-fun x462 () Int)
(declare-fun x408 () Int)
(declare-fun x592 () Int)
(declare-fun x119 () Int)
(declare-fun x337 () Bool)
(declare-fun x285 () Int)
(declare-fun x69 () Int)
(declare-fun x474 () Int)
(declare-fun x342 () Int)
(declare-fun x531 () Bool)
(declare-fun x494 () Int)
(declare-fun x120 () Int)
(declare-fun x277 (Int) Int)
(declare-fun x304 () Int)
(declare-fun x521 () Int)
(declare-fun x198 () Int)
(declare-fun x332 () Int)
(declare-fun x215 () Int)
(declare-fun x5 () Int)
(declare-fun x108 (Int) Int)
(declare-fun x54 () Int)
(declare-fun x2 () Int)
(declare-fun x585 () Int)
(declare-fun x99 (Int) Bool)
(declare-fun x268 () Int)
(declare-fun x575 () Int)
(declare-fun x66 () Bool)
(declare-fun x225 () Int)
(declare-fun x168 () Int)
(declare-fun x523 () Int)
(declare-fun x372 () Int)
(declare-fun x102 () Int)
(declare-fun x515 () Bool)
(declare-fun x192 () Int)
(declare-fun x477 () Bool)
(declare-fun x397 (Int) Int)
(declare-fun x423 () Bool)
(declare-fun x476 () Bool)
(declare-fun x412 () Int)
(declare-fun x366 () Int)
(declare-fun x73 () Int)
(declare-fun x131 () Bool)
(declare-fun x216 () Int)
(declare-fun x563 () Int)
(declare-fun x400 () Int)
(declare-fun x254 () Int)
(declare-fun x41 () Int)
(declare-fun x260 () Bool)
(declare-fun x14 () Int)
(declare-fun x182 () Int)
(declare-fun x578 () Bool)
(declare-fun x330 () Int)
(declare-fun x291 () Int)
(declare-fun x176 () Int)
(declare-fun x398 () Int)
(declare-fun x92 () Int)
(declare-fun x77 () Int)
(declare-fun x135 () Int)
(declare-fun x70 () Int)
(declare-fun x51 () Int)
(declare-fun x574 () Int)
(declare-fun x134 () Int)
(declare-fun x406 () Int)
(declare-fun x347 () Bool)
(declare-fun x322 () Int)
(declare-fun x588 () Int)
(declare-fun x156 () Int)
(declare-fun x420 () Int)
(declare-fun x139 () Bool)
(declare-fun x403 () Int)
(declare-fun x190 () Bool)
(declare-fun x537 () Int)
(declare-fun x167 () Int)
(declare-fun x417 () Int)
(declare-fun x292 () Int)
(declare-fun x584 () Int)
(declare-fun x231 () Int)
(declare-fun x492 () Int)
(declare-fun x430 () Int)
(declare-fun x208 () Int)
(declare-fun x312 () Int)
(declare-fun x124 () Int)
(declare-fun x123 (Int) Int)
(declare-fun x370 () Int)
(declare-fun x594 () Int)
(declare-fun x365 () Int)
(declare-fun x161 () Bool)
(declare-fun x346 () Int)
(declare-fun x248 () Int)
(declare-fun x159 (Int) Int)
(declare-fun x180 () Int)
(declare-fun x163 () Int)
(declare-fun x422 () Int)
(declare-fun x394 () Int)
(declare-fun x350 () Int)
(declare-fun x269 () Bool)
(declare-fun x318 () Int)
(declare-fun x11 () Int)
(declare-fun x468 () Int)
(declare-fun x313 () Int)
(declare-fun x257 () Bool)
(declare-fun x118 () Int)
(declare-fun x202 () Int)
(declare-fun x378 () Int)
(declare-fun x148 () Bool)
(declare-fun x388 () Int)
(declare-fun x89 () Int)
(declare-fun x414 () Int)
(declare-fun x504 () Int)
(declare-fun x201 () Int)
(declare-fun x548 () Int)
(declare-fun x435 () Int)
(declare-fun x224 () Int)
(declare-fun x255 () Int)
(declare-fun x256 () Int)
(declare-fun x237 () Int)
(declare-fun x310 (Int) Int)
(declare-fun x88 () Int)
(declare-fun x17 () Int)
(declare-fun x579 () Int)
(declare-fun x540 (Int Int) Int)
(declare-fun x27 () Int)
(declare-fun x317 () Int)
(declare-fun x383 () Int)
(declare-fun x65 () Int)
(declare-fun x473 () Int)
(declare-fun x386 () Bool)
(declare-fun x516 () Int)
(declare-fun x96 () Int)
(declare-fun x125 () Int)
(declare-fun x50 () Bool)
(declare-fun x418 () Bool)
(declare-fun x57 () Bool)
(declare-fun x40 () Int)
(declare-fun x499 () Int)
(declare-fun x44 () Int)
(declare-fun x300 (Int) Int)
(declare-fun x326 () Int)
(declare-fun x43 () Int)
(declare-fun x6 () Int)
(declare-fun x133 () Int)
(declare-fun x80 () Int)
(declare-fun x246 () Int)
(declare-fun x557 () Int)
(declare-fun x555 () Bool)
(declare-fun x582 () Int)
(declare-fun x117 () Int)
(declare-fun x453 (Int) Int)
(declare-fun x343 (Int) Int)
(declare-fun x62 () Int)
(declare-fun x416 () Int)
(declare-fun x392 () Bool)
(declare-fun x371 () Int)
(declare-fun x390 (Int Int) Int)
(declare-fun x455 () Int)
(declare-fun x1 () Bool)
(declare-fun x360 () Int)
(declare-fun x483 () Int)
(declare-fun x569 () Bool)
(declare-fun x270 () Int)
(declare-fun x113 () Int)
(declare-fun x275 () Int)
(declare-fun x105 () Bool)
(declare-fun x550 () Bool)
(declare-fun x151 () Int)
(declare-fun x147 () Int)
(declare-fun x212 () Bool)
(declare-fun x38 (Int) Int)
(declare-fun x379 () Bool)
(declare-fun x331 () Int)
(declare-fun x273 () Int)
(declare-fun x528 () Bool)
(declare-fun x355 () Int)
(declare-fun x524 () Bool)
(declare-fun x409 () Bool)
(declare-fun x560 () Int)
(declare-fun x458 () Int)
(declare-fun x529 () Bool)
(declare-fun x109 () Int)
(declare-fun x243 () Bool)
(declare-fun x593 () Int)
(declare-fun x411 () Int)
(declare-fun x150 () Int)
(declare-fun x387 () Int)
(declare-fun x145 () Bool)
(declare-fun x136 () Bool)
(declare-fun x433 () Int)
(declare-fun x319 () Int)
(declare-fun x60 () Int)
(declare-fun x115 () Int)
(declare-fun x396 () Int)
(declare-fun x335 () Int)
(declare-fun x217 () Int)
(declare-fun x384 () Int)
(declare-fun x25 () Int)
(declare-fun x481 () Int)
(declare-fun x64 () Bool)
(declare-fun x142 (Int) Int)
(declare-fun x586 () Int)
(declare-fun x107 () Int)
(declare-fun x565 () Int)
(declare-fun x467 () Int)
(declare-fun x449 () Int)
(declare-fun x404 () Bool)
(declare-fun x556 () Int)
(declare-fun x97 () Bool)
(declare-fun x385 () Int)
(declare-fun x341 () Int)
(declare-fun x164 () Int)
(declare-fun x53 () Int)
(declare-fun x325 () Int)
(declare-fun x493 () Int)
(declare-fun x87 () Int)
(declare-fun x121 () Int)
(declare-fun x349 () Bool)
(declare-fun x534 () Int)
(declare-fun x75 () Int)
(declare-fun x541 () Int)
(declare-fun x573 () Int)
(declare-fun x597 () Int)
(declare-fun x522 () Bool)
(declare-fun x572 () Int)
(declare-fun x443 () Int)
(declare-fun x482 () Int)
(declare-fun x294 () Int)
(declare-fun x587 () Int)
(declare-fun x441 () Int)
(declare-fun x191 () Int)
(declare-fun x157 () Bool)
(declare-fun x513 () Int)
(declare-fun x456 () Int)
(declare-fun x126 () Int)
(declare-fun x338 () Int)
(declare-fun x253 () Bool)
(declare-fun x39 () Int)
(declare-fun x426 () Int)
(declare-fun x444 () Int)
(declare-fun x295 () Int)
(declare-fun x447 () Int)
(declare-fun x213 () Int)
(declare-fun x61 () Bool)
(declare-fun x59 () Int)
(declare-fun x357 () Int)
(declare-fun x480 () Int)
(declare-fun x425 () Int)
(declare-fun x427 () Bool)
(declare-fun x336 (Int Int Int) Int)
(declare-fun x240 () Int)
(declare-fun x72 () Int)
(declare-fun x566 () Int)
(declare-fun x71 () Bool)
(declare-fun x549 () Int)
(declare-fun x242 () Bool)
(declare-fun x393 () Bool)
(declare-fun x431 () Int)
(declare-fun x63 () Int)
(declare-fun x288 () Bool)
(declare-fun x373 () Int)
(declare-fun x413 () Bool)
(declare-fun x206 () Bool)
(declare-fun x546 () Int)
(declare-fun x258 () Bool)
(declare-fun x29 () Bool)
(declare-fun x391 () Int)
(declare-fun x502 () Int)
(declare-fun x415 () Int)
(declare-fun x530 () Bool)
(declare-fun x144 () Int)
(declare-fun x491 () Int)
(declare-fun x12 () Int)
(declare-fun x290 (Int) Int)
(declare-fun x169 () Bool)
(declare-fun x265 () Bool)
(declare-fun x93 () Bool)
(declare-fun x583 () Int)
(declare-fun x266 () Int)
(declare-fun x261 () Int)
(declare-fun x344 () Bool)
(declare-fun x327 () Int)
(declare-fun x503 () Int)
(declare-fun x469 () Int)
(declare-fun x302 () Bool)
(declare-fun x227 () Int)
(declare-fun x9 () Int)
(declare-fun x475 () Bool)
(declare-fun x367 () Bool)
(declare-fun x368 () Int)
(declare-fun x173 () Int)
(declare-fun x68 () Int)
(declare-fun x200 () Int)
(declare-fun x496 () Bool)
(declare-fun x353 () Int)
(declare-fun x158 () Int)
(declare-fun x500 () Int)
(declare-fun x506 () Int)
(declare-fun x155 () Int)
(declare-fun x249 () Int)
(declare-fun x428 () Int)
(declare-fun x160 () Int)
(declare-fun x274 () Int)
(declare-fun x490 () Int)
(declare-fun x81 () Int)
(declare-fun x551 () Int)
(declare-fun x141 () Int)
(declare-fun x204 () Int)
(declare-fun x376 () Int)
(declare-fun x282 () Int)
(declare-fun x297 () Int)
(declare-fun x230 () Int)
(declare-fun x228 () Int)
(declare-fun x152 () Bool)
(declare-fun x511 () Int)
(declare-fun x177 () Int)
(declare-fun x581 () Bool)
(declare-fun x252 () Int)
(declare-fun x479 () Int)
(declare-fun x178 () Int)
(declare-fun x380 () Bool)
(declare-fun x361 () Int)
(declare-fun x345 () Int)
(declare-fun x589 (Int) Int)
(declare-fun x339 () Int)
(declare-fun x211 () Int)
(declare-fun x298 () Int)
(declare-fun x296 () Int)
(declare-fun x143 () Int)
(declare-fun x170 () Int)
(declare-fun x329 () Int)
(declare-fun x382 () Bool)
(declare-fun x91 () Bool)
(declare-fun x315 () Bool)
(declare-fun x375 () Bool)
(declare-fun x470 () Bool)
(declare-fun x286 () Int)
(declare-fun x306 () Int)
(declare-fun x165 () Int)
(define-fun x564 ((x279 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x279) (>= x279 0)) x279 (- x279 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x278 ((x279 Int)) Int (ite (and (< x279 0) (>= x279 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x279 115792089237316195423570985008687907853269984665640564039457584007913129639936) x279))
(define-fun x348 ((x45 Int)) Bool (and (>= x45 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x45)))
(define-fun x351 ((x45 Int)) Bool (and (= (x540 x45 115792089237316195423570985008687907853269984665640564039457584007913129639935) x45) (= (x540 115792089237316195423570985008687907853269984665640564039457584007913129639935 x45) x45)))
(define-fun x132 ((x45 Int)) Bool (and (= 0 (x540 x45 0)) (= (x540 0 x45) 0)))
(define-fun x487 ((x45 Int)) Bool (= (x540 x45 x45) x45))
(define-fun x451 ((x45 Int)) Bool (and (x487 x45) (x351 x45) (x132 x45)))
(define-fun x321 ((x45 Int) (x185 Int)) Bool (= (x540 x45 x185) (x540 x185 x45)))
(define-fun x471 ((x45 Int) (x185 Int)) Bool (and (=> (>= x45 0) (>= x45 (x540 x45 x185))) (<= 0 (x540 x45 x185)) (=> (>= x185 0) (<= (x540 x45 x185) x185))))
(define-fun x264 ((x45 Int) (x185 Int)) Bool (and (x471 x45 x185) (x321 x45 x185)))
(define-fun x520 ((x45 Int)) Bool (and (= (x219 115792089237316195423570985008687907853269984665640564039457584007913129639935 x45) (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x45)) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x45) (x219 x45 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x194 ((x45 Int)) Bool (and (= (x219 x45 0) x45) (= (x219 0 x45) x45)))
(define-fun x287 ((x45 Int)) Bool (= (x219 x45 x45) 0))
(define-fun x30 ((x45 Int)) Bool (and (x520 x45) (x194 x45) (x287 x45)))
(define-fun x533 ((x45 Int) (x185 Int)) Bool (= (x219 x45 x185) (x219 x185 x45)))
(define-fun x195 ((x45 Int) (x185 Int)) Bool (and (>= (x219 x45 x185) 0) (<= (x219 x45 x185) (+ x185 x45))))
(define-fun x244 ((x45 Int) (x185 Int)) Bool (and (x533 x45 x185) (x195 x45 x185)))
(define-fun x505 ((x45 Int)) Bool (and (= (x323 115792089237316195423570985008687907853269984665640564039457584007913129639935 x45) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x323 x45 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x153 ((x45 Int)) Bool (and (= (x323 0 x45) x45) (= x45 (x323 x45 0))))
(define-fun x263 ((x45 Int)) Bool (= x45 (x323 x45 x45)))
(define-fun x501 ((x45 Int)) Bool (and (x153 x45) (x263 x45) (x505 x45)))
(define-fun x450 ((x45 Int) (x185 Int)) Bool (= (x323 x45 x185) (x323 x185 x45)))
(define-fun x535 ((x45 Int) (x185 Int)) Bool (and (<= (x323 x45 x185) (+ x185 x45)) (=> (<= 0 x185) (<= x185 (x323 x45 x185))) (=> (<= 0 x45) (<= x45 (x323 x45 x185)))))
(define-fun x21 ((x45 Int) (x185 Int)) Bool (and (x535 x45 x185) (x450 x45 x185)))
(define-fun x402 ((x465 Int)) Int 0)
(define-fun x239 ((x465 Int)) Int 0)
(define-fun x488 ((x465 Int)) Int 0)
(define-fun x454 ((x465 Int)) Int 0)
(define-fun x538 ((x465 Int)) Int (ite (> x58 x465) (x562 x465) 0))
(define-fun x489 ((x465 Int)) Int (ite (and (<= 0 x465) (< x465 x58)) (x310 x465) (x538 x465)))
(define-fun x320 ((x465 Int)) Int (ite (= x179 x465) x491 (x410 x465)))
(define-fun x446 ((x465 Int)) Int (ite (= x465 128) 50942633119752846454219349998365661925608737367104304655302372697894809501696 (x488 x465)))
(define-fun x116 ((x465 Int)) Int (ite (= 132 x465) x183 (x446 x465)))
(define-fun x405 ((x465 Int)) Int (ite (= 0 x465) x270 (x300 x465)))
(define-fun x544 ((x465 Int)) Int (ite (= 128 x465) x270 (x116 x465)))
(define-fun x308 ((x465 Int)) Int (ite (and (< x465 160) (<= 128 x465)) (x405 (- x465 128)) (x454 x465)))
(define-fun x128 ((x465 Int)) Int (ite (= x229 x465) x458 (x94 x465)))
(define-fun x251 ((x465 Int)) Int (ite (= x559 x465) x83 (x142 x465)))
(define-fun x234 ((x465 Int)) Int (ite (= x585 x465) x591 (x38 x465)))
(define-fun x84 ((x465 Int)) Int (ite x529 (x142 x465) (x251 x465)))
(define-fun x525 ((x465 Int)) Int (ite x529 (x94 x465) (x128 x465)))
(define-fun x536 ((x465 Int)) Int (ite x529 (x239 x465) (x544 x465)))
(define-fun x363 ((x465 Int)) Int (ite x529 (x38 x465) (x234 x465)))
(define-fun x436 ((x465 Int)) Int (ite (= x465 x231) x70 (x453 x465)))
(define-fun x37 ((x465 Int)) Int (ite x131 (x453 x465) (x436 x465)))
(define-fun x100 ((x465 Int)) Int (ite (= x465 x560) x441 (x290 x465)))
(define-fun x381 ((x465 Int)) Int (ite x131 (x290 x465) (x100 x465)))
(define-fun x460 ((x465 Int)) Int (ite (= x465 x551) x120 (x84 x465)))
(define-fun x24 ((x465 Int)) Int (ite (= x465 x551) x224 (x460 x465)))
(define-fun x56 ((x465 Int)) Int (ite x131 (x84 x465) (x24 x465)))
(define-fun x130 ((x465 Int)) Int (ite (= x465 x76) x329 (x486 x465)))
(define-fun x283 ((x465 Int)) Int (ite (= x465 x416) 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x536 x465)))
(define-fun x301 ((x465 Int)) Int (ite (= x465 x314) x232 (x283 x465)))
(define-fun x553 ((x465 Int)) Int (ite (= x465 x420) x211 (x301 x465)))
(define-fun x203 ((x465 Int)) Int (ite (= x465 x141) x126 (x277 x465)))
(define-fun x34 ((x465 Int)) Int (ite (= x547 x465) x117 (x203 x465)))
(define-fun x122 ((x465 Int)) Int (ite (= 128 x465) x211 (x402 x465)))
(define-fun x461 ((x465 Int)) Int (ite (= 128 x465) 1 (x122 x465)))
(define-fun x137 ((x465 Int)) Int (ite (= x465 0) x313 (x123 x465)))
(define-fun x377 ((x465 Int)) Int (ite (= x560 x465) x151 (x381 x465)))
(define-fun x15 ((x465 Int)) Int (ite x145 (x381 x465) (x377 x465)))
(define-fun x421 ((x465 Int)) Int (ite (= x465 x588) x166 (x525 x465)))
(define-fun x419 ((x465 Int)) Int (ite (= x465 x107) x561 (x589 x465)))
(define-fun x104 ((x465 Int)) Int (ite (= x465 x92) x2 (x280 x465)))
(define-fun x28 ((x465 Int)) Int (ite (= x465 x560) x490 (x15 x465)))
(define-fun x439 ((x465 Int)) Int (ite (= x465 x268) x591 (x37 x465)))
(define-fun x457 ((x465 Int)) Int (ite (= x493 x465) x125 (x56 x465)))
(assert (< (x336 64 x232 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x348 x165))
(assert (x348 x285))
(assert (x348 x221))
(assert (x348 x18))
(assert (x348 x205))
(assert (x348 x216))
(assert (= (x336 64 x232 0) (x82 (x336 64 x232 0))))
(assert (x348 x490))
(assert (x348 x202))
(assert (x451 x225))
(assert (x348 x431))
(assert (x348 x249))
(assert (x21 x575 x81))
(assert (= x57 (=> (and (= (x278 (- x329 x294)) x113) (not (> x182 x220)) (= x182 (x278 (- x220 x511))) (= (> x113 0) x344) (= (x381 x560) x220)) (and (=> (and (and (or (and (and (= (x278 (- x548 (mod (ite (> x596 x241) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x146) (= x508 (div x577 128)) (= x596 (mod (* x106 x227) 31536000)) (= (x278 (- x241 x596)) x577) (>= 31535999 x548) (= x198 (x564 (+ x508 x197))) (= x593 x176) (= x197 (mod (* 904625697166532776746648320380374280103671755200316906558262375061821325312 x146) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x176 (mod (* x198 69185743945351922119161689019356421013382125510479073735908722411855439477079) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (not x196)) (and x196 (and (= x593 x118) (= (div x241 31536000) x118)))) (and (= 31536000 x334) (= x506 (x336 64 x294 2)) (= (x37 x268) x69) (= x338 (mod (* x106 x227) 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= x227 (x589 x107)) (= x241 (mod (* x106 x227) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (+ x560 1) x268) (= x106 (x278 (- x591 x69))) (= (= 0 x548) x196) (not (< x591 x106)) (= (x278 (- x338 x241)) x579) (= x548 (x278 (- x579 (mod (ite (> x241 x338) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))) (not x344)) x214) (=> (and x344 (= x306 x388)) x524)))))
(assert (x348 x85))
(assert (x348 x292))
(assert (= (not (and (= (x278 (- x306 x11)) x403) (= false x110) (= x2 (x278 (- x549 x430))) (= x298 (x15 x560)) (= (x278 (- x358 x554)) x561) (= x109 (x278 (- x467 x554))) (= x42 (x278 (- x467 x554))) (not (< x298 x490)) (not (> x403 x306)) (= x526 false) (not (< x358 x561)) (= (x280 x92) x549) (= false x169) (not (> x2 x549)) (= (x278 (- x298 x11)) x490) (= (x278 (- x306 x11)) x425) (= true x550) (not (> x109 x467)) (= (x589 x107) x358))) x35))
(assert (x348 x361))
(assert (= (and x344 x531) x145))
(assert (= true x375))
(assert (x348 x541))
(assert (x99 904625697166532776746648320380374280103671755200316906558262375061821325312))
(assert (x451 x9))
(assert (x348 x226))
(assert (x99 4294967295))
(assert (= x243 (and x349 x199)))
(assert (x501 x129))
(assert (> (x336 64 x232 0) 10000))
(assert (x348 x182))
(assert (x348 x65))
(assert (=> (>= 10000 x407) (= (x82 x407) 0)))
(assert (= x316 (=> (and (and (= x342 (ite (= x435 0) 1 0)) (= x340 (div x435 x435)) (= (> x156 x72) x567) (= x210 (x323 x342 x295)) (= x295 (ite (= 1 x340) 1 0)) (= 1 x210) (= (x564 (+ x384 x124)) x156) (not (>= (+ x384 x124) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x435 x296))) (= x72 (x564 (+ x296 x435)))) (or (and (and (not (> x207 x72)) (= (x278 (- x72 x384)) x207) (= x207 x362)) x567) (and (not x567) (= x124 x362)))) x581)))
(assert (< (x336 64 x294 2) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x348 x151))
(assert (= (x82 50942633119752846454219349998365661925608737367104304655302372697894809501696) 0))
(assert (x348 x597))
(assert (x348 x365))
(assert (> (x336 64 x463 3) 10000))
(assert (x348 x500))
(assert (x99 31535999))
(assert (x348 x89))
(assert (x348 x172))
(assert (x348 x162))
(assert (x348 x13))
(assert (x348 x69))
(assert (x348 x118))
(assert (=> (>= 10000 x232) (= 0 (x82 x232))))
(assert (= (x82 (+ 2 x573)) (x82 x573)))
(assert (x348 x51))
(assert (=> (= x19 0) (= (div x304 x19) 0)))
(assert (x348 x334))
(assert (x348 x327))
(assert (= (and x181 x66) x233))
(assert (x348 x403))
(assert (= (=> (and (or (and x477 (and (= x294 x346) (= x416 128) (= x209 x331))) (and (not x477) (and (= x294 (+ 1 x346)) (= (x336 64 x346 2) x573) (= x180 50942633119752846454219349998365661925608737367104304655302372697894809501696) (>= x565 1) (= 1889567281 x60) (= x339 128) (= x83 (x564 (+ x473 x467))) (= (x336 64 x183 0) x447) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x346) (= x408 36) (not (> x458 x13)) (= x270 (x277 x447)) (= x22 false) (not (>= (+ x467 x473) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x336 64 x407 2) x585) (= x103 x400) (<= x411 127) (= (+ 1 x346) x571) (= (x564 (+ x331 x424)) x62) (= (x128 x121) x424) (= x392 false) (= x62 x209) (= (+ x20 1) x229) (= (x336 64 x346 2) x333) (= x565 (x397 x594)) (= false x52) (= x458 (x278 (- x13 x331))) (= false x139) (= x407 (+ 1 x346)) (= x121 (+ 1 x333)) (= (x308 128) x13) (>= 127 x411) (= x103 x183) (= x226 (x564 (+ x424 x331))) (= x20 (x336 64 x346 2)) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x331 x424))) (= (+ x573 2) x559) (= 160 x416)))) (= x477 (= x438 0))) x475) x3))
(assert (x348 x119))
(assert (x348 x248))
(assert (x348 x41))
(assert (x348 x473))
(assert (x348 x210))
(assert (x501 x254))
(assert (x348 x167))
(assert (x348 x4))
(assert (x348 x247))
(assert (x21 x387 x218))
(assert (= 0 (x82 2835717307)))
(assert (x348 x224))
(assert (= (x82 (+ 1 x333)) (x82 x333)))
(assert (x21 x25 x247))
(assert (x501 x357))
(assert (= (and (not x196) x157) x148))
(assert (= (or x427 x418) x199))
(assert (x348 x164))
(assert (x348 x561))
(assert (x348 x372))
(assert (x348 x200))
(assert (x348 x517))
(assert (x348 x155))
(assert (= (and (not x31) x375) x315))
(assert (x348 x54))
(assert (= (x108 (x336 64 x584 2)) x584))
(assert (x451 x556))
(assert (x348 x369))
(assert (x348 x204))
(assert (x348 x411))
(assert (x348 x527))
(assert (= (x223 (x336 64 x232 0)) 0))
(assert (x348 x339))
(assert (x30 2))
(assert (x99 604800))
(assert (x348 x391))
(assert (x348 x480))
(assert (= (x336 64 x584 2) (x82 (x336 64 x584 2))))
(assert (x348 x230))
(assert (= (and x288 (not x257)) x131))
(assert (= x389 (and x382 (not x78))))
(assert (= (x223 (x336 64 x346 2)) 2))
(assert (= (x108 (x336 64 x407 2)) x407))
(assert (= x183 (x108 (x336 64 x183 0))))
(assert (= (and x530 (not x302)) x111))
(assert (x348 x331))
(assert (= (x336 64 x346 2) (x82 (x336 64 x346 2))))
(assert (= (and (not x567) x580) x514))
(assert (x348 x17))
(assert (x99 57896044618658097711785492504343953926634992332820282019728792003956564819967))
(assert (x348 x62))
(assert (x348 x7))
(assert (x348 x274))
(assert (= x105 (and x157 x196)))
(assert (x348 x483))
(assert (x348 x462))
(assert (= (x82 (+ x149 5)) (x82 x149)))
(assert (x348 x25))
(assert (x348 x340))
(assert (x21 x342 x295))
(assert (= (and (not x222) x478) x91))
(assert (=> (= x341 0) (= 0 (div x469 x341))))
(assert (x348 x293))
(assert (x348 x75))
(assert (x348 x272))
(assert (x348 x188))
(assert (x348 x590))
(assert (x348 x593))
(assert (x348 x8))
(assert (x348 x282))
(assert (x348 x464))
(assert (x348 x416))
(assert (x348 x546))
(assert (x348 x14))
(assert (= (x82 (x336 64 x183 0)) (x336 64 x183 0)))
(assert (< (x336 64 x584 2) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x348 x357))
(assert (x348 x571))
(assert (x451 x546))
(assert (= (x82 (x336 64 x463 3)) (x336 64 x463 3)))
(assert (= (x82 (+ x27 1)) (x82 x27)))
(assert (not (x99 (x336 64 x85 1))))
(assert (=> (= 0 x68) (= (div x177 x68) 0)))
(assert (x348 x401))
(assert (x348 x497))
(assert (= (and x93 (not x542)) x61))
(assert (x348 x154))
(assert (=> (= 0 x543) (= (div x521 x543) 0)))
(assert (< (x336 64 x346 2) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x348 x346))
(assert (x348 x523))
(assert (x348 x383))
(assert (< (x336 64 x407 2) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x348 x575))
(assert (x348 x582))
(assert (x348 x98))
(assert (x348 x74))
(assert (= x174 (and x71 (not x477))))
(assert (=> (= x435 0) (= 0 (div x435 x435))))
(assert (x348 x11))
(assert (x348 x345))
(assert (x348 x566))
(assert (x348 x68))
(assert (= (x108 (x336 64 x294 2)) x294))
(assert (x348 x429))
(assert (x348 x549))
(assert (x348 x583))
(assert (x99 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x244 x444 2))
(assert (x348 x504))
(assert (x348 x358))
(assert (x348 x387))
(assert (x348 x557))
(assert (x501 x396))
(assert (x348 x129))
(assert (x348 x208))
(assert (= x157 (and (not x344) x531)))
(assert (x348 x70))
(assert (= (and (not x349) x199) x367))
(assert (x348 x407))
(assert (= 0 (x82 31536000)))
(assert (x348 x46))
(assert (x99 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (x99 76450787359836037641860180984291677749980919077056822294353438043884394381312))
(assert (x348 x175))
(assert (x348 x430))
(assert (x348 x213))
(assert (= (=> (and (and (= x47 (x280 x217)) (= (x381 x560) x318) (= (= 0 x230) x78) (= x396 (ite (= x163 1) 1 0)) (= (+ x107 1) x217) (= x449 (x278 (- x434 x332))) (= 1 x236) (= (x589 x107) x482) (= (ite (= 0 x593) 1 0) x129) (= 126144000 x523) (= x236 (x323 x129 x396)) (= x434 (mod (* x482 126144000) 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= x230 (x278 (- x449 (mod (ite (> x332 x434) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= x163 (div x593 x593)) (= 31536000 x383) (= (mod (* x482 126144000) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x332)) (or (and (and (= (div x332 31536000) x59) (= x168 x59)) x78) (and (and (= (x564 (+ x483 x6)) x500) (= (div x332 128) x483) (= x168 x204) (= x204 (mod (* 69185743945351922119161689019356421013382125510479073735908722411855439477079 x500) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (<= x230 31535999) (= (mod (* x230 904625697166532776746648320380374280103671755200316906558262375061821325312) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x6)) (not x78)))) x29) x214))
(assert (= 0 (x82 126144000)))
(assert (x348 x227))
(assert (= (x187 (x336 64 x232 0)) 64))
(assert (x348 x596))
(assert (x264 x309 x9))
(assert (= x476 (or x61 x459)))
(assert (= x475 (=> (and (= x76 (+ 1 x27)) (= (+ 5 x149) x27) (= (x112 x27) x494) (= (x290 x560) x511) (= (x486 x76) x584) (= x272 (x589 x107)) (= x149 (x336 64 x85 1)) (= (+ x149 1) x107) (not (< x591 x494)) (= (+ 3 x149) x560) (= x140 (x336 64 x584 2)) (not (< x272 x554)) (= x257 (< x584 x294))) (and (=> (and (and (or (and x515 (and (= x124 x426) (= x426 (div x144 31536000)))) (and (not x515) (and (= x164 (div x256 128)) (= x124 x374) (= x39 (x564 (+ x164 x412))) (<= x532 31535999) (= (x278 (- x532 (mod (ite (< x144 x370) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x88) (= x412 (mod (* 904625697166532776746648320380374280103671755200316906558262375061821325312 x88) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x370 (mod (* x361 x517) 31536000)) (= (mod (* x39 69185743945351922119161689019356421013382125510479073735908722411855439477079) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x374) (= (x278 (- x144 x370)) x256)))) (and (= (= 0 x532) x515) (= x345 (x278 (- x41 x144))) (= (x278 (- x345 (mod (ite (> x144 x41) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x532) (= (mod (* x517 x361) 115792089237316195423570985008687907853269984665640564039457584007913129639935) x41) (>= 115792089237316195423570985008687907853269984665640564039457584007913129035135 x26) (= (+ x26 604800) x70) (= x26 (x363 x140)) (= (x278 (- x70 x43)) x517) (= (mod (* x361 x517) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x144) (= x248 31536000) (not (> x517 x70)) (= x231 (+ 1 x560)) (= (x589 x107) x361) (= (x453 x231) x43))) x257) x578) (=> (and (and (= 0 x211) (= x584 x329) (= x388 x473)) (not x257)) x212)))))
(assert (x348 x338))
(assert (x348 x254))
(assert (x348 x147))
(assert (x348 x468))
(assert (x348 x58))
(assert (not (x99 (x336 64 x294 2))))
(assert (x348 x23))
(assert (= 0 (x82 115792089237316195423570985008687907853269984665640564039457584007913129035135)))
(assert (=> (= x556 0) (= (div x335 x556) 0)))
(assert (x348 x81))
(assert (not (x99 (x336 64 x463 3))))
(assert (x99 115792089237316195423570985008687907853269984665640564039457584007913129035135))
(assert (x99 31536000))
(assert (x348 x371))
(assert (x348 x124))
(assert (= 0 (x82 4294967295)))
(assert (x348 x166))
(assert (= (or x315 x413) x71))
(assert (x21 x129 x396))
(assert (=> (= x341 0) (= (div x54 x341) 0)))
(assert (< (x336 64 x85 1) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x501 x342))
(assert (x264 x19 x225))
(assert (x21 x165 x74))
(assert (x348 x173))
(assert (x348 x467))
(assert (x348 x127))
(assert (x348 x356))
(assert (= 3 (x223 (x336 64 x463 3))))
(assert (x348 x324))
(assert (x348 x176))
(assert (= x478 (or x145 x476)))
(assert (x348 x591))
(assert (= (x82 76450787359836037641860180984291677749980919077056822294353438043884394381312) 0))
(assert (x348 x435))
(assert (=> (>= 10000 x183) (= (x82 x183) 0)))
(assert (x348 x270))
(assert (x348 x479))
(assert (x348 x291))
(assert (x348 x574))
(assert (x348 x417))
(assert (x348 x353))
(assert (not (x99 (x336 64 x584 2))))
(assert (= 0 (x223 (x336 64 x183 0))))
(assert (x348 x19))
(assert (x348 x492))
(assert (x348 x370))
(assert (= (x108 (x336 64 x346 2)) x346))
(assert (x348 x322))
(assert (x501 x295))
(assert (x348 x232))
(assert (x348 x311))
(assert (= (or x91 x262) x530))
(assert (x348 x170))
(assert (x348 x508))
(assert (= (x82 (+ 1 x140)) (x82 x140)))
(assert (=> (<= x584 10000) (= (x82 x584) 0)))
(assert (=> (= 0 x124) (= (div x124 x124) 0)))
(assert (= (=> (and (and (>= 1461501637330902918203684832716283019655932542975 x312) (<= x246 1461501637330902918203684832716283019655932542975) (>= x328 1) (<= 0 x499) (= x186 773316216) (= x574 x554) (= x183 x498) (>= 1461501637330902918203684832716283019655932542975 x183) (<= x519 1461501637330902918203684832716283019655932542975) (= x48 0) (= x31 (not (< x591 x365))) (= x179 x246) (>= x143 0) (<= x167 127) (not (= x594 x51)) (<= 0 x519) (>= x594 1) (= x237 x574) (= (< 0 (x397 x594)) x393) (= x509 false) (>= x86 0) (>= x189 0) (= (x336 64 x346 2) x394) (<= 1 x299) (= (+ x65 604800) x365) (= x463 (x307 x85)) (= x563 x12) (not (= x51 x183)) (= x152 false) (= (> (x397 x51) 0) x271) x271 (<= 1 x498) (= false x386) (= x291 (x159 x586)) (<= 1 x291) (<= x291 255) (= (x410 x179) x491) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x189) (<= x86 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= 127 x167) x393 (= (x336 64 x85 1) x87) (<= 1 x51) (= false x347) (= 0 x510) (= (x112 x385) x328) (= x267 (x310 0)) (<= x534 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (= x594 x183)) (<= x65 115792089237316195423570985008687907853269984665640564039457584007913129035135) (>= 1461501637330902918203684832716283019655932542975 x51) (= x250 x591) (= x380 (< 0 (x397 x183))) (>= 1461501637330902918203684832716283019655932542975 x192) (= x366 773316216) (>= x250 0) (<= 36 x58) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x32) (= x496 false) (= x65 (x38 x394)) (>= x192 0) (= x206 false) (= (x310 4) x554) (= (x397 x183) x299) (>= 4294967295 x67) (= x385 (+ 5 x87)) (= x513 1) (<= x143 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x53) (= false x190) (>= x67 0) (>= x534 0) (= x150 x183) (<= 0 x246) (<= x250 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x85 x246) (>= 1461501637330902918203684832716283019655932542975 x594) (= x4 x267) x380 (>= 1461501637330902918203684832716283019655932542975 x499) (<= x58 57896044618658097711785492504343953926634992332820282019728792003956564819967) (= x586 (x336 64 x463 3)) (= x563 (x320 x183)) (<= 1 x183) (>= 1461501637330902918203684832716283019655932542975 x498) (<= 0 x53) (>= x32 0)) (or (and x31 (= x438 1)) (and (not x31) (= (ite x31 1 0) x438)))) x3) x303))
(assert (x451 x19))
(assert (x348 x313))
(assert (x348 x424))
(assert (x348 x341))
(assert (= x452 (and x66 (not x181))))
(assert (x348 x388))
(assert (x99 2835717307))
(assert (x348 x255))
(assert (x348 x332))
(assert (x348 x296))
(assert (x348 x5))
(assert (x348 x102))
(assert (x348 x133))
(assert (not (x99 (x336 64 x346 2))))
(assert (x348 x373))
(assert (x348 x177))
(assert (x348 x556))
(assert (= x262 (and x478 x222)))
(assert (x501 x74))
(assert (x348 x286))
(assert (x348 x186))
(assert (= (or x233 x452) x337))
(assert (x348 x120))
(assert (x348 x95))
(assert (x348 x444))
(assert (x348 x317))
(assert (x348 x304))
(assert (x348 x39))
(assert (= (or x389 x569) x93))
(assert (x348 x414))
(assert (x501 x25))
(assert (x99 50942633119752846454219349998365661925608737367104304655302372697894809501696))
(assert (x348 x565))
(assert (x348 x572))
(assert (x348 x126))
(assert (x99 1889567281))
(assert (x348 x428))
(assert (x348 x521))
(assert (= 0 (x82 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (=> (= x543 0) (= 0 (div x309 x543))))
(assert (x348 x60))
(assert (x348 x298))
(assert (x348 x442))
(assert (x348 x158))
(assert (x348 x241))
(assert (x348 x180))
(assert (= (and x93 x542) x459))
(assert (x348 x503))
(assert (x348 x193))
(assert (x21 x254 x357))
(assert (x451 x309))
(assert (x348 x434))
(assert (=> (= x309 0) (= (div x415 x309) 0)))
(assert (= x85 (x108 (x336 64 x85 1))))
(assert (x348 x362))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x336 64 x463 3)))
(assert (= 64 (x187 (x336 64 x463 3))))
(assert (x348 x240))
(assert (x348 x396))
(assert (x244 x325 2))
(assert (=> (<= x346 10000) (= 0 (x82 x346))))
(assert (x348 x209))
(assert (= x580 (or x243 x367)))
(assert (x348 x6))
(assert (x348 x563))
(assert (not (x99 (x336 64 x232 0))))
(assert (x348 x295))
(assert (= (x82 (+ 1 x560)) (x82 x560)))
(assert (= (x187 (x336 64 x346 2)) 64))
(assert (x348 x510))
(assert (x348 x360))
(assert (= (x82 (+ 1 x107)) (x82 x107)))
(assert (x348 x256))
(assert (x348 x90))
(assert (= (=> (and (= x265 (< 0 x211)) (or (not x265) (and x265 (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x416) (= x311 x456) (= (x336 64 x232 0) x547) (= false x379) (= x557 2835717307) (<= x232 1461501637330902918203684832716283019655932542975) (= (x343 x149) x232) (= false x555) (= x33 (x336 64 x183 0)) (not (> x211 x213)) (= x313 (x461 128)) (= x162 (x278 (- x209 x211))) (= x292 (x397 x594)) (= x466 (x278 (- x102 x416))) (= x213 (x277 x33)) (<= x147 127) (= (x336 64 x183 0) x141) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x416)) (= (x203 x547) x455) (= x117 (x564 (+ x455 x211))) (= x368 x273) (> x160 x416) (<= x416 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= (x564 (+ x314 64)) x102) (not (= x416 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (= (x278 (- x209 x211)) x259) (>= x232 1) (= x420 (x564 (+ x314 32))) (>= x292 1) (= x211 x311) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x416)) (= (x564 (+ 4 x416)) x314) (not (> x162 x209)) (= x238 68) (= x55 false) (= x368 x232) (<= x416 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= false x1) (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 x23) (= x235 1) (= x466 68) (<= x147 127) (= (x564 (+ 32 x416)) x160) (= (x278 (- x213 x211)) x126))))) x57) x212))
(assert (x348 x494))
(assert (=> (<= x85 10000) (= 0 (x82 x85))))
(assert (= (x82 1889567281) 0))
(assert (x348 x171))
(assert (x348 x36))
(assert (x348 x326))
(assert (x348 x281))
(assert (x348 x101))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x336 64 x183 0)))
(assert (x348 x422))
(assert (= (x336 64 x407 2) (x82 (x336 64 x407 2))))
(assert (x99 126144000))
(assert (= (or x337 x131) x184))
(assert (x348 x215))
(assert (x348 x160))
(assert (x348 x314))
(assert (x348 x115))
(assert (=> (<= x179 10000) (= (x82 x179) 0)))
(assert (x348 x406))
(assert (= x232 (x108 (x336 64 x232 0))))
(assert (x348 x73))
(assert (x348 x178))
(assert (x348 x543))
(assert (x348 x191))
(assert (x348 x88))
(assert (x348 x425))
(assert (x30 x590))
(assert (x348 x114))
(assert (= (x223 (x336 64 x294 2)) 2))
(assert (x348 x335))
(assert (x348 x587))
(assert (x348 x374))
(assert (x348 x463))
(assert (x348 x312))
(assert (= x581 (=> (and (or (and (not x181) (and (= x201 (mod (* x208 x373) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x278 (- 2 x474)) x484) (= x502 (div x177 x68)) (= x101 (mod (* x432 x566) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x240 x96) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x81) (= x177 (x278 (- 0 x68))) (= (x278 (- x335 x512)) x431) (= x546 (x564 (+ (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x556) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1))) (= x373 (div x556 x68)) (= (x564 (+ x502 1)) x96) (= (mod (* x373 x7) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x474) (= (mod (* x479 x355) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x7) (= x240 (x278 (- x406 (mod (ite (> x512 x335) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x278 (- 2 x200)) x75) (= x155 (x278 (- 2 x201))) (= (x219 2 x444) x286) (= (mod (* x373 x261) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x200) (= (mod (* x7 x484) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x261) (= x566 (x278 (- 2 x376))) (= x46 (mod (* (x323 x575 x81) x101) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x286 x442) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x208) (= (mod (* x261 x75) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x432) (= (mod (* x417 x324) x556) x512) (= (x278 (- 2 x305)) x442) (= x319 (mod (* x355 x373) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x278 (- 2 x319)) x479) (= x305 (mod (* x286 x373) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (div x431 x68) x575) (= x391 x46) (= (mod (* x373 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x444) (< x406 x556) (= (mod (* x155 x208) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x355) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x406) (= (mod (* x432 x373) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x376) (= x68 (x540 x556 x546)))) (and x181 (and (= x274 x391) (= (div x335 x556) x274)))) (and (= (x460 x551) x556) (= x441 (x564 (+ x352 x362))) (= x588 (+ x140 1)) (not (>= (+ x362 x352) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x372 (x278 (- x275 x335))) (= x417 (x564 (+ x481 x293))) (= x324 (x525 x588)) (<= 1 x556) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x293 x481))) (not (>= (+ x445 x362) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x100 x560) x293) (= (mod (* x417 x324) 115792089237316195423570985008687907853269984665640564039457584007913129639935) x275) (= (x278 (- x372 (mod (ite (> x335 x275) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x406) (= (= x406 0) x181) (= (x564 (+ x362 x445)) x120) (= (x84 x551) x445) (= (x564 (+ x473 x362)) x266) (= x170 (x564 (+ x362 x473))) (= (x589 x107) x481) (= (x290 x560) x352) (not (>= (+ x362 x473) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x335 (mod (* x417 x324) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (+ 2 x140) x551))) x161)))
(assert (= (x82 x149) (x82 (+ 3 x149))))
(assert (x348 x198))
(assert (= 0 (x82 1461501637330902918203684832716283019655932542975)))
(assert (x348 x237))
(assert (x348 x352))
(assert (x348 x378))
(assert (x501 x218))
(assert (x348 x594))
(assert (= 2 (x223 (x336 64 x584 2))))
(assert (= (x82 (x336 64 x85 1)) (x336 64 x85 1)))
(assert (= 2 (x223 (x336 64 x407 2))))
(assert (x348 x400))
(assert (x348 x398))
(assert (x348 x305))
(assert (x348 x466))
(assert (x348 x106))
(assert (x348 x266))
(assert (x348 x276))
(assert (= (x82 (+ 1 x20)) (x82 x20)))
(assert (=> (= x341 0) (= (div x19 x341) 0)))
(assert (= x66 (or x514 x258)))
(assert (x348 x511))
(assert (x348 x498))
(assert (x348 x437))
(assert (= 64 (x187 (x336 64 x294 2))))
(assert (x348 x168))
(assert (> (x336 64 x346 2) 10000))
(assert (x348 x220))
(assert (x348 x502))
(assert (x348 x456))
(assert (x348 x548))
(assert (= (x187 (x336 64 x183 0)) 64))
(assert (x348 x59))
(assert (x348 x432))
(assert (x348 x267))
(assert (x264 x556 x546))
(assert (= (x82 115792089237316195423570985008687907853269984665640564039457584007913129639935) 0))
(assert (x348 x113))
(assert (= (x187 (x336 64 x584 2)) 64))
(assert (= x382 (or x105 x148)))
(assert (x348 x408))
(assert (x348 x179))
(assert (x348 x455))
(assert (x348 x63))
(assert (= (and x470 x515) x427))
(assert (x348 x79))
(assert (x348 x433))
(assert (x348 x275))
(assert (x348 x197))
(assert (x348 x40))
(assert (= x50 (or x111 x399)))
(assert (x348 x554))
(assert (= (and x184 x265) x522))
(assert (= (=> (and (and (= x115 (x564 (+ x47 x168))) (= x215 1) (= (x564 (+ x318 x593)) x353) (= (ite (= x583 1) 1 0) x218) (= x583 (div x168 x168)) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x47 x168))) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x593 x318))) (= x542 (< x115 x353)) (= (x323 x387 x218) x215) (= x387 (ite (= 0 x168) 1 0))) (or (and (and (= x317 x360) (= x360 (x278 (- x115 x318))) (not (< x115 x360))) x542) (and (not x542) (= x317 x593)))) x16) x29))
(assert (x348 x2))
(assert (x348 x318))
(assert (x348 x245))
(assert (= 64 (x187 (x336 64 x85 1))))
(assert (=> (= 0 x593) (= (div x593 x593) 0)))
(assert (x348 x83))
(assert (x348 x12))
(assert (x348 x342))
(assert (x348 x201))
(assert (x348 x472))
(assert (= x258 (and x580 x567)))
(assert (= (=> (and (not (>= (+ x317 x503) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x125 (x564 (+ x317 x503))) (= x587 (x564 (+ x388 x317))) (= x503 (x56 x493)) (= x216 x306) (= x158 (x381 x560)) (= (x564 (+ x317 x388)) x216) (not (>= (+ x317 x158) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (not (>= (+ x388 x317) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (+ 2 x506) x493) (= (x564 (+ x317 x158)) x151)) x524) x16))
(assert (x348 x207))
(assert (= (or x174 x529) x288))
(assert (x348 x443))
(assert (x348 x491))
(assert (x30 x444))
(assert (x348 x350))
(assert (= (and (not x515) x470) x418))
(assert (= x399 (and x302 x530)))
(assert (=> (= x68 0) (= (div x431 x68) 0)))
(assert (x348 x43))
(assert (x501 x247))
(assert (x348 x273))
(assert (x348 x211))
(assert (x348 x532))
(assert (x348 x228))
(assert (< 10000 (x336 64 x85 1)))
(assert (not x303))
(assert (x348 x458))
(assert (x348 x481))
(assert (x348 x469))
(assert (x348 x592))
(assert (x348 x218))
(assert (x348 x236))
(assert (= 64 (x187 (x336 64 x407 2))))
(assert (x348 x438))
(assert (=> (= x543 0) (= 0 (div x527 x543))))
(assert (x348 x441))
(assert (x348 x577))
(assert (x348 x319))
(assert (x348 x415))
(assert (= (x82 773316216) 0))
(assert (x348 x328))
(assert (x99 773316216))
(assert (x348 x368))
(assert (x348 x47))
(assert (= (x223 (x336 64 x85 1)) 1))
(assert (x348 x482))
(assert (x348 x516))
(assert (= 0 (x82 115792089237316195423570985008687907853269984665640564039457584007913129639934)))
(assert (= (and x71 x477) x529))
(assert (x30 x325))
(assert (x348 x80))
(assert (=> (<= x51 10000) (= 0 (x82 x51))))
(assert (x348 x420))
(assert (= x463 (x108 (x336 64 x463 3))))
(assert (= x413 (and x31 x375)))
(assert (x348 x306))
(assert (x348 x235))
(assert (= (x82 (+ x140 2)) (x82 x140)))
(assert (x501 x575))
(assert (= (x82 904625697166532776746648320380374280103671755200316906558262375061821325312) 0))
(assert (x348 x156))
(assert (x348 x355))
(assert (= (x82 x149) (x82 (+ 1 x149))))
(assert (x348 x77))
(assert (= x578 (=> (and (or (and (not x349) (and (= x401 (mod (* x285 69185743945351922119161689019356421013382125510479073735908722411855439477079) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x564 (+ x133 x507)) x285) (<= x327 31535999) (= x133 (div x98 128)) (= x507 (mod (* x327 904625697166532776746648320380374280103671755200316906558262375061821325312) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x401 x435))) (and x349 (and (= (div x98 31536000) x414) (= x414 x435)))) (and (= x384 (x290 x560)) (= x175 (x323 x254 x357)) (= (x280 x570) x296) (= (x589 x107) x193) (= (ite (= 0 x124) 1 0) x254) (= (mod (* 126144000 x193) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x98) (= x17 (mod (* 126144000 x193) 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= x472 31536000) (= (div x124 x124) x537) (= (x278 (- x433 (mod (ite (> x98 x17) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x327) (= (= x327 0) x349) (= (ite (= 1 x537) 1 0) x357) (= x462 126144000) (= 1 x175) (= x433 (x278 (- x17 x98))) (= x570 (+ x107 1)))) x316)))
(assert (= (=> (and (or (and (not x302) (and (= x356 (div x521 x543)) (= (x278 (- x172 (mod (ite (> x398 x415) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x276) (= (mod (* x429 x221) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x428) (= x325 (mod (* 3 x221) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x278 (- 0 x543)) x521) (= x8 (mod (* x429 x568) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x8 x89) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x252) (= (div x309 x543) x221) (= (mod (* x221 x497) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x178) (= (div x527 x543) x165) (= x255 (mod (* x252 x221) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x495 (mod (* x330 x252) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x9 (x564 (+ (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x309) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1))) (= x359 (mod (* x371 x282) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x568 (x278 (- 2 x428))) (= (x219 2 x325) x282) (= x371 (x278 (- 2 x202))) (= (x564 (+ x356 1)) x119) (= (x540 x309 x9) x543) (= x245 x430) (= (x278 (- 2 x178)) x464) (= x154 (mod (* x221 x359) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x350 x554) x309) x398) (< x172 x309) (= (x278 (- x415 x398)) x527) (= x541 (mod (* x221 x8) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x278 (- 2 x154)) x73) (= x202 (mod (* x282 x221) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x278 (- 2 x255)) x330) (= x245 (mod (* (x323 x165 x74) x495) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (<= x172 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= (mod (* x73 x359) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x497) (= (x278 (- 2 x541)) x89) (= (mod (* x276 x119) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x74) (= x429 (mod (* x464 x497) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (and x302 (and (= (div x415 x309) x63) (= x63 x430)))) (and (= (x278 (- x191 x415)) x77) (= (mod (* x554 x350) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x415) (= (x280 x92) x350) (>= x309 1) (= x302 (= 0 x172)) (= (x589 x107) x309) (= x191 (mod (* x554 x350) 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (+ 1 x107) x92) (= x172 (x278 (- x77 (mod (ite (< x191 x415) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))) x35) x284))
(assert (x348 x412))
(assert (x348 x96))
(assert (x99 1461501637330902918203684832716283019655932542975))
(assert (x348 x309))
(assert (x348 x568))
(assert (x501 x387))
(assert (x348 x42))
(assert (x348 x9))
(assert (not (x99 (x336 64 x183 0))))
(assert (=> (>= 10000 x594) (= 0 (x82 x594))))
(assert (x348 x495))
(assert (= (x336 64 x294 2) (x82 (x336 64 x294 2))))
(assert (x348 x584))
(assert (= (and x78 x382) x569))
(assert (x348 x325))
(assert (x501 x165))
(assert (x348 x484))
(assert (=> (= x168 0) (= 0 (div x168 x168))))
(assert (x348 x474))
(assert (x348 x238))
(assert (x348 x183))
(assert (x348 x330))
(assert (> (x336 64 x183 0) 10000))
(assert (= 0 (x82 69185743945351922119161689019356421013382125510479073735908722411855439477079)))
(assert (x348 x117))
(assert (x348 x72))
(assert (x348 x26))
(assert (= x161 (=> (and (= x224 (x278 (- x79 x417))) (not (> x166 x18)) (not (> x224 x79)) (= x18 (x525 x588)) (= x173 (+ x584 1)) (= x170 x388) (= x166 (x278 (- x18 x391))) (= x79 (x460 x551)) (= x391 x211) (not (< x173 x294)) (= x329 x173) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x584)) x212)))
(assert (x348 x252))
(assert (x501 x81))
(assert (= (x82 (+ x506 2)) (x82 x506)))
(assert (> (x336 64 x584 2) 10000))
(assert (x348 x135))
(assert (x348 x359))
(assert (= (x82 (+ x87 5)) (x82 x87)))
(assert (x348 x299))
(assert (x348 x329))
(assert (x348 x445))
(assert (x348 x163))
(assert (x348 x507))
(assert (x348 x103))
(assert (= 0 (x82 604800)))
(assert (x348 x579))
(assert (x348 x134))
(assert (not (x99 (x336 64 x407 2))))
(assert (x348 x449))
(assert (< 10000 (x336 64 x407 2)))
(assert (x348 x376))
(assert (= (=> (and (or (and (not x222) (and (= x205 (mod (* x322 x443) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x80 (mod (* (x323 x25 x247) x171) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (<= x326 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= (mod (* x127 x437) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x582) (= x322 (div x19 x341)) (= (mod (* x554 x504) x19) x36) (= (x278 (- 0 x341)) x469) (= (div x54 x341) x25) (< x326 x19) (= (div x469 x341) x188) (= x281 (mod (* x322 x582) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x249 (x278 (- 2 x135))) (= (mod (* x5 x592) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x247) (= x11 x80) (= x480 (x278 (- 2 x281))) (= (mod (* x322 x228) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x597) (= (mod (* x228 x492) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x95) (= x44 (mod (* x443 x134) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x171 (mod (* x44 x468) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x590 (mod (* 3 x322) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x134 (x278 (- 2 x205))) (= (x540 x19 x225) x341) (= x492 (x278 (- 2 x597))) (= x5 (x564 (+ 1 x188))) (= x468 (x278 (- 2 x378))) (= (x219 2 x590) x127) (= (mod (* x322 x95) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x135) (= (x278 (- 2 x516)) x437) (= x592 (x278 (- x326 (mod (ite (> x36 x304) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= x443 (mod (* x95 x249) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x378 (mod (* x44 x322) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x225 (x564 (+ (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x19) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1))) (= x54 (x278 (- x304 x36))) (= (mod (* x127 x322) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x516) (= x228 (mod (* x582 x480) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (and x222 (and (= x114 x11) (= (div x304 x19) x114)))) (and (= (x589 x107) x19) (= (x278 (- x40 x304)) x90) (= x504 (x15 x560)) (= (mod (* x554 x504) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x304) (= (mod (* x504 x554) 115792089237316195423570985008687907853269984665640564039457584007913129639935) x40) (= x222 (= x326 0)) (= (x278 (- x90 (mod (ite (> x304 x40) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x326) (>= x19 1))) x284) x524))
(assert (x348 x512))
(assert (x348 x261))
(assert (=> (= x68 0) (= 0 (div x556 x68))))
(assert (x244 x590 2))
(assert (x348 x109))
(assert (x348 x146))
(assert (x348 x44))
(assert (= (x82 31535999) 0))
(assert (x348 x125))
(assert (x348 x537))
(assert (x348 x294))
(assert (x348 x144))
(assert (x99 115792089237316195423570985008687907853269984665640564039457584007913129639934))
(assert (= (and x257 x288) x470))
(assert (x348 x225))
(assert (x348 x297))
(assert (=> (<= x294 10000) (= 0 (x82 x294))))
(assert (x348 x384))
(assert (= (x82 57896044618658097711785492504343953926634992332820282019728792003956564819967) 0))
(assert (= x531 (or x522 (and (not x265) x184))))
(assert (=> (<= x463 10000) (= 0 (x82 x463))))
(assert (< 10000 (x336 64 x294 2)))
(assert (x99 69185743945351922119161689019356421013382125510479073735908722411855439477079))
(assert (x348 x259))
(assert (x348 x426))
(check-sat)
(exit)
