(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Certora
Generated on: 2024-04-10
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x117 () Bool)
(declare-fun x93 () Int)
(declare-fun x163 () Int)
(declare-fun x452 () Bool)
(declare-fun x460 () Bool)
(declare-fun x373 () Int)
(declare-fun x169 () Int)
(declare-fun x443 () Int)
(declare-fun x549 () Int)
(declare-fun x123 () Bool)
(declare-fun x392 () Int)
(declare-fun x631 () Int)
(declare-fun x358 () Int)
(declare-fun x318 () Int)
(declare-fun x368 () Int)
(declare-fun x297 (Int) Int)
(declare-fun x400 () Bool)
(declare-fun x560 () Int)
(declare-fun x554 () Int)
(declare-fun x534 () Int)
(declare-fun x336 () Int)
(declare-fun x309 () Int)
(declare-fun x509 () Int)
(declare-fun x504 () Bool)
(declare-fun x28 () Int)
(declare-fun x105 () Int)
(declare-fun x152 () Int)
(declare-fun x381 () Int)
(declare-fun x620 () Int)
(declare-fun x592 () Int)
(declare-fun x444 () Bool)
(declare-fun x458 () Int)
(declare-fun x349 () Int)
(declare-fun x168 () Int)
(declare-fun x647 () Int)
(declare-fun x26 () Bool)
(declare-fun x227 () Int)
(declare-fun x650 () Int)
(declare-fun x532 () Int)
(declare-fun x630 () Bool)
(declare-fun x2 () Int)
(declare-fun x421 () Int)
(declare-fun x545 () Bool)
(declare-fun x156 () Bool)
(declare-fun x397 () Bool)
(declare-fun x450 () Int)
(declare-fun x176 () Int)
(declare-fun x367 () Int)
(declare-fun x218 () Int)
(declare-fun x46 () Int)
(declare-fun x362 () Bool)
(declare-fun x255 () Int)
(declare-fun x58 () Bool)
(declare-fun x209 () Int)
(declare-fun x521 () Int)
(declare-fun x225 () Int)
(declare-fun x147 () Int)
(declare-fun x232 () Int)
(declare-fun x326 () Int)
(declare-fun x268 () Int)
(declare-fun x247 () Int)
(declare-fun x72 () Int)
(declare-fun x308 () Int)
(declare-fun x591 () Int)
(declare-fun x146 () Int)
(declare-fun x23 () Int)
(declare-fun x440 () Int)
(declare-fun x455 () Int)
(declare-fun x41 () Int)
(declare-fun x363 () Int)
(declare-fun x220 () Int)
(declare-fun x13 () Bool)
(declare-fun x132 () Int)
(declare-fun x474 () Bool)
(declare-fun x536 () Bool)
(declare-fun x36 () Bool)
(declare-fun x385 () Int)
(declare-fun x71 () Int)
(declare-fun x499 () Int)
(declare-fun x282 () Bool)
(declare-fun x293 () Int)
(declare-fun x43 () Bool)
(declare-fun x423 () Int)
(declare-fun x235 () Int)
(declare-fun x589 () Int)
(declare-fun x393 () Int)
(declare-fun x284 () Int)
(declare-fun x353 () Int)
(declare-fun x165 () Int)
(declare-fun x159 () Int)
(declare-fun x82 () Int)
(declare-fun x172 () Int)
(declare-fun x425 () Int)
(declare-fun x270 () Int)
(declare-fun x114 () Bool)
(declare-fun x570 () Int)
(declare-fun x366 () Bool)
(declare-fun x223 () Int)
(declare-fun x524 () Int)
(declare-fun x40 () Int)
(declare-fun x573 () Int)
(declare-fun x5 () Int)
(declare-fun x337 () Int)
(declare-fun x233 () Int)
(declare-fun x382 () Int)
(declare-fun x73 () Int)
(declare-fun x258 () Bool)
(declare-fun x244 () Int)
(declare-fun x321 () Int)
(declare-fun x569 () Bool)
(declare-fun x48 () Int)
(declare-fun x264 () Int)
(declare-fun x606 () Bool)
(declare-fun x434 () Int)
(declare-fun x306 () Int)
(declare-fun x600 () Int)
(declare-fun x184 () Int)
(declare-fun x618 () Bool)
(declare-fun x301 (Int) Int)
(declare-fun x467 () Bool)
(declare-fun x224 () Bool)
(declare-fun x389 () Int)
(declare-fun x143 () Bool)
(declare-fun x511 () Int)
(declare-fun x222 () Int)
(declare-fun x175 () Int)
(declare-fun x27 () Bool)
(declare-fun x403 () Int)
(declare-fun x120 () Bool)
(declare-fun x445 () Int)
(declare-fun x322 () Int)
(declare-fun x599 () Bool)
(declare-fun x69 () Int)
(declare-fun x528 (Int) Int)
(declare-fun x323 () Int)
(declare-fun x32 () Bool)
(declare-fun x317 () Int)
(declare-fun x456 (Int) Int)
(declare-fun x407 () Int)
(declare-fun x611 () Int)
(declare-fun x266 () Int)
(declare-fun x338 () Int)
(declare-fun x20 (Int) Bool)
(declare-fun x415 () Int)
(declare-fun x640 () Bool)
(declare-fun x361 () Int)
(declare-fun x245 () Int)
(declare-fun x633 () Int)
(declare-fun x178 () Int)
(declare-fun x571 () Int)
(declare-fun x251 () Bool)
(declare-fun x206 () Int)
(declare-fun x85 () Int)
(declare-fun x396 (Int) Int)
(declare-fun x379 () Bool)
(declare-fun x583 () Int)
(declare-fun x483 () Bool)
(declare-fun x581 () Int)
(declare-fun x568 () Bool)
(declare-fun x628 () Int)
(declare-fun x643 () Int)
(declare-fun x340 () Int)
(declare-fun x161 () Bool)
(declare-fun x179 (Int Int Int Int Int Int) Int)
(declare-fun x148 () Int)
(declare-fun x490 () Int)
(declare-fun x484 () Int)
(declare-fun x582 () Int)
(declare-fun x612 () Int)
(declare-fun x15 () Int)
(declare-fun x457 () Int)
(declare-fun x451 () Int)
(declare-fun x626 () Int)
(declare-fun x376 () Int)
(declare-fun x649 () Int)
(declare-fun x303 () Int)
(declare-fun x515 () Int)
(declare-fun x548 () Int)
(declare-fun x158 (Int) Int)
(declare-fun x466 () Bool)
(declare-fun x4 () Int)
(declare-fun x596 () Int)
(declare-fun x44 () Int)
(declare-fun x240 () Int)
(declare-fun x485 () Int)
(declare-fun x76 () Int)
(declare-fun x537 () Int)
(declare-fun x635 () Bool)
(declare-fun x343 () Bool)
(declare-fun x42 () Int)
(declare-fun x108 () Int)
(declare-fun x530 (Int) Int)
(declare-fun x288 () Bool)
(declare-fun x602 () Int)
(declare-fun x45 () Bool)
(declare-fun x449 () Int)
(declare-fun x250 () Int)
(declare-fun x412 () Int)
(declare-fun x228 () Int)
(declare-fun x149 () Int)
(declare-fun x118 () Int)
(declare-fun x278 () Int)
(declare-fun x565 () Int)
(declare-fun x276 () Int)
(declare-fun x436 () Int)
(declare-fun x507 () Int)
(declare-fun x277 () Int)
(declare-fun x391 () Int)
(declare-fun x607 () Bool)
(declare-fun x154 () Int)
(declare-fun x49 () Int)
(declare-fun x315 () Int)
(declare-fun x128 () Int)
(declare-fun x253 () Int)
(declare-fun x487 () Int)
(declare-fun x408 () Int)
(declare-fun x197 () Bool)
(declare-fun x70 () Int)
(declare-fun x164 () Int)
(declare-fun x472 () Int)
(declare-fun x271 () Int)
(declare-fun x285 () Int)
(declare-fun x113 () Int)
(declare-fun x121 () Int)
(declare-fun x138 () Int)
(declare-fun x134 () Int)
(declare-fun x200 () Int)
(declare-fun x31 (Int) Int)
(declare-fun x636 () Bool)
(declare-fun x475 () Bool)
(declare-fun x653 () Bool)
(declare-fun x579 () Int)
(declare-fun x198 () Int)
(declare-fun x188 () Int)
(declare-fun x92 () Bool)
(declare-fun x3 () Bool)
(declare-fun x50 () Int)
(declare-fun x215 () Int)
(declare-fun x519 () Int)
(declare-fun x438 () Int)
(declare-fun x17 () Int)
(declare-fun x267 () Int)
(declare-fun x512 () Bool)
(declare-fun x182 () Bool)
(declare-fun x624 () Int)
(declare-fun x55 () Int)
(declare-fun x356 () Int)
(declare-fun x357 () Int)
(declare-fun x523 () Int)
(declare-fun x563 () Int)
(declare-fun x300 () Bool)
(declare-fun x651 () Bool)
(declare-fun x80 () Int)
(declare-fun x500 () Int)
(declare-fun x404 () Int)
(declare-fun x418 () Int)
(declare-fun x390 () Int)
(declare-fun x577 () Int)
(declare-fun x302 (Int) Int)
(declare-fun x319 () Bool)
(declare-fun x432 () Int)
(declare-fun x166 () Bool)
(declare-fun x431 (Int) Int)
(declare-fun x562 () Int)
(declare-fun x260 () Int)
(declare-fun x95 () Int)
(declare-fun x296 () Int)
(declare-fun x652 () Bool)
(declare-fun x249 () Int)
(declare-fun x234 () Int)
(declare-fun x187 () Int)
(declare-fun x480 () Bool)
(declare-fun x461 () Int)
(declare-fun x298 () Int)
(declare-fun x429 (Int) Int)
(declare-fun x192 () Int)
(declare-fun x292 () Int)
(declare-fun x566 () Int)
(declare-fun x464 () Int)
(declare-fun x88 () Int)
(declare-fun x263 () Int)
(declare-fun x130 () Int)
(declare-fun x352 () Int)
(declare-fun x185 () Int)
(declare-fun x405 () Int)
(declare-fun x496 () Int)
(declare-fun x350 () Int)
(declare-fun x541 () Int)
(declare-fun x552 () Int)
(declare-fun x417 () Int)
(declare-fun x550 () Int)
(declare-fun x25 () Int)
(declare-fun x129 (Int) Int)
(declare-fun x195 () Int)
(declare-fun x219 () Bool)
(declare-fun x543 () Bool)
(declare-fun x529 () Int)
(declare-fun x131 () Bool)
(declare-fun x65 () Int)
(declare-fun x354 () Int)
(declare-fun x401 () Bool)
(declare-fun x79 () Int)
(declare-fun x136 () Int)
(declare-fun x394 () Bool)
(declare-fun x430 () Bool)
(declare-fun x426 () Bool)
(declare-fun x435 () Int)
(declare-fun x7 () Int)
(declare-fun x478 () Int)
(declare-fun x433 () Int)
(declare-fun x557 () Int)
(declare-fun x525 () Int)
(declare-fun x151 () Int)
(declare-fun x171 () Int)
(declare-fun x202 () Int)
(declare-fun x508 () Int)
(declare-fun x174 () Int)
(declare-fun x462 () Bool)
(declare-fun x199 () Int)
(declare-fun x97 () Bool)
(declare-fun x533 () Int)
(declare-fun x535 () Int)
(declare-fun x384 () Int)
(declare-fun x201 () Bool)
(declare-fun x110 () Int)
(declare-fun x419 () Int)
(declare-fun x416 () Int)
(declare-fun x248 () Int)
(declare-fun x564 () Int)
(declare-fun x526 () Int)
(declare-fun x538 () Bool)
(declare-fun x411 () Int)
(declare-fun x578 () Int)
(declare-fun x465 () Int)
(declare-fun x155 () Bool)
(declare-fun x327 () Int)
(declare-fun x75 () Int)
(declare-fun x342 () Bool)
(declare-fun x488 () Bool)
(declare-fun x360 () Bool)
(declare-fun x34 () Bool)
(declare-fun x37 () Bool)
(declare-fun x241 () Int)
(declare-fun x388 () Bool)
(declare-fun x627 () Int)
(declare-fun x453 (Int) Int)
(declare-fun x642 () Bool)
(declare-fun x230 () Bool)
(declare-fun x68 () Int)
(declare-fun x104 () Int)
(declare-fun x96 (Int) Int)
(declare-fun x103 () Int)
(declare-fun x406 () Int)
(declare-fun x328 () Bool)
(declare-fun x313 () Int)
(declare-fun x126 () Int)
(declare-fun x314 () Int)
(declare-fun x547 () Int)
(declare-fun x157 () Bool)
(declare-fun x236 () Int)
(declare-fun x30 () Int)
(declare-fun x371 () Int)
(declare-fun x59 (Int) Int)
(declare-fun x428 () Int)
(declare-fun x646 () Int)
(declare-fun x648 () Int)
(declare-fun x190 () Int)
(declare-fun x587 () Int)
(declare-fun x19 () Int)
(declare-fun x345 () Int)
(declare-fun x119 () Bool)
(declare-fun x243 () Int)
(declare-fun x16 () Int)
(declare-fun x494 () Int)
(declare-fun x437 () Bool)
(declare-fun x98 () Int)
(declare-fun x492 () Int)
(declare-fun x553 () Int)
(declare-fun x312 () Bool)
(declare-fun x489 () Int)
(declare-fun x506 () Bool)
(declare-fun x459 () Int)
(declare-fun x531 () Int)
(declare-fun x256 () Int)
(declare-fun x477 () Int)
(declare-fun x622 () Int)
(declare-fun x116 () Int)
(declare-fun x150 () Int)
(declare-fun x211 () Int)
(declare-fun x518 () Bool)
(declare-fun x180 () Int)
(declare-fun x86 () Int)
(declare-fun x77 (Int) Int)
(declare-fun x183 () Int)
(declare-fun x91 () Int)
(declare-fun x621 () Int)
(declare-fun x133 () Int)
(declare-fun x189 () Int)
(declare-fun x495 () Int)
(declare-fun x246 () Int)
(declare-fun x469 () Bool)
(declare-fun x556 () Int)
(declare-fun x420 () Int)
(declare-fun x586 () Int)
(declare-fun x572 () Int)
(declare-fun x470 () Bool)
(declare-fun x331 () Int)
(declare-fun x641 () Bool)
(declare-fun x122 () Int)
(declare-fun x593 () Int)
(declare-fun x546 () Int)
(declare-fun x56 () Int)
(declare-fun x341 () Bool)
(declare-fun x299 () Bool)
(declare-fun x101 () Int)
(declare-fun x207 () Int)
(declare-fun x208 () Int)
(declare-fun x84 () Int)
(declare-fun x473 () Int)
(declare-fun x29 () Int)
(declare-fun x616 () Bool)
(declare-fun x522 () Int)
(declare-fun x584 () Bool)
(declare-fun x94 () Bool)
(declare-fun x74 () Int)
(declare-fun x339 () Int)
(declare-fun x115 () Int)
(declare-fun x81 () Bool)
(declare-fun x559 () Int)
(declare-fun x359 () Int)
(declare-fun x365 () Int)
(declare-fun x216 () Int)
(declare-fun x229 () Int)
(declare-fun x632 () Int)
(declare-fun x127 () Int)
(declare-fun x106 () Int)
(declare-fun x588 () Int)
(declare-fun x212 () Int)
(declare-fun x634 () Int)
(declare-fun x567 () Int)
(declare-fun x53 () Bool)
(declare-fun x231 () Int)
(declare-fun x47 () Int)
(declare-fun x280 () Int)
(declare-fun x625 () Int)
(declare-fun x471 () Int)
(declare-fun x386 () Int)
(declare-fun x623 () Int)
(declare-fun x617 () Bool)
(declare-fun x196 () Int)
(declare-fun x109 () Int)
(declare-fun x191 () Int)
(declare-fun x111 () Int)
(declare-fun x63 () Bool)
(declare-fun x310 () Bool)
(declare-fun x204 (Int) Int)
(declare-fun x135 () Int)
(declare-fun x597 () Int)
(declare-fun x377 () Int)
(declare-fun x378 () Bool)
(declare-fun x441 () Int)
(declare-fun x239 () Int)
(declare-fun x516 () Int)
(declare-fun x67 (Int) Int)
(declare-fun x6 () Int)
(declare-fun x595 () Int)
(declare-fun x307 () Bool)
(declare-fun x107 () Int)
(declare-fun x348 (Int Int) Int)
(declare-fun x332 () Bool)
(declare-fun x173 () Int)
(declare-fun x38 () Int)
(declare-fun x324 (Int) Int)
(declare-fun x217 () Int)
(declare-fun x513 () Int)
(declare-fun x145 () Bool)
(declare-fun x237 () Int)
(declare-fun x89 () Int)
(declare-fun x112 () Int)
(declare-fun x629 () Int)
(declare-fun x372 () Bool)
(declare-fun x254 () Int)
(declare-fun x181 () Int)
(declare-fun x493 () Int)
(declare-fun x410 () Int)
(declare-fun x497 () Int)
(declare-fun x90 () Bool)
(declare-fun x290 () Int)
(declare-fun x540 () Int)
(declare-fun x125 () Int)
(declare-fun x210 () Int)
(declare-fun x610 () Int)
(declare-fun x274 () Bool)
(declare-fun x39 () Int)
(declare-fun x10 () Int)
(declare-fun x645 () Int)
(declare-fun x78 () Int)
(declare-fun x399 () Int)
(declare-fun x213 () Bool)
(declare-fun x585 () Int)
(declare-fun x479 () Bool)
(declare-fun x447 () Int)
(declare-fun x8 () Int)
(declare-fun x330 () Int)
(declare-fun x275 () Bool)
(declare-fun x615 () Bool)
(declare-fun x370 () Int)
(declare-fun x60 () Int)
(declare-fun x481 () Int)
(declare-fun x486 () Int)
(declare-fun x346 () Int)
(declare-fun x305 () Int)
(declare-fun x316 () Int)
(declare-fun x252 () Bool)
(declare-fun x221 () Int)
(declare-fun x140 () Int)
(declare-fun x11 () Int)
(declare-fun x193 () Int)
(declare-fun x100 () Int)
(declare-fun x261 () Bool)
(declare-fun x374 () Int)
(declare-fun x448 () Bool)
(declare-fun x279 () Bool)
(declare-fun x491 () Int)
(declare-fun x501 () Int)
(declare-fun x603 () Int)
(declare-fun x51 () Bool)
(declare-fun x286 () Int)
(declare-fun x558 () Int)
(declare-fun x369 () Bool)
(declare-fun x99 () Int)
(declare-fun x463 () Int)
(declare-fun x102 () Int)
(declare-fun x539 () Bool)
(declare-fun x380 () Bool)
(declare-fun x281 () Int)
(declare-fun x87 () Int)
(declare-fun x265 () Int)
(declare-fun x439 () Int)
(declare-fun x402 () Int)
(declare-fun x226 () Int)
(declare-fun x1 () Bool)
(declare-fun x544 () Int)
(declare-fun x608 (Int Int) Int)
(declare-fun x476 (Int Int Int) Int)
(declare-fun x542 () Int)
(declare-fun x273 () Int)
(declare-fun x364 () Int)
(declare-fun x35 () Int)
(declare-fun x62 () Int)
(define-fun x347 ((x259 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x259) (>= x259 0)) x259 (- x259 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x609 ((x259 Int)) Int (ite (and (< x259 0) (>= x259 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x259 115792089237316195423570985008687907853269984665640564039457584007913129639936) x259))
(define-fun x291 ((x194 Int)) Bool (and (>= x194 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x194)))
(define-fun x186 ((x194 Int)) Bool (and (= (x348 x194 115792089237316195423570985008687907853269984665640564039457584007913129639935) x194) (= (x348 115792089237316195423570985008687907853269984665640564039457584007913129639935 x194) x194)))
(define-fun x139 ((x194 Int)) Bool (and (= 0 (x348 x194 0)) (= (x348 0 x194) 0)))
(define-fun x637 ((x194 Int)) Bool (= (x348 x194 x194) x194))
(define-fun x503 ((x194 Int)) Bool (and (x637 x194) (x186 x194) (x139 x194)))
(define-fun x334 ((x194 Int) (x446 Int)) Bool (= (x348 x194 x446) (x348 x446 x194)))
(define-fun x325 ((x194 Int) (x446 Int)) Bool (and (=> (>= x194 0) (>= x194 (x348 x194 x446))) (<= 0 (x348 x194 x446)) (=> (>= x446 0) (<= (x348 x194 x446) x446))))
(define-fun x12 ((x194 Int) (x446 Int)) Bool (and (x325 x194 x446) (x334 x194 x446)))
(define-fun x160 ((x194 Int)) Bool (= (mod x194 1461501637330902918203684832716283019655932542976) (x348 x194 1461501637330902918203684832716283019655932542975)))
(define-fun x320 ((x194 Int)) Bool (and (x160 x194) (x12 x194 1461501637330902918203684832716283019655932542975)))
(define-fun x601 ((x194 Int)) Bool (and (= (x608 115792089237316195423570985008687907853269984665640564039457584007913129639935 x194) (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x194)) (= (x608 x194 115792089237316195423570985008687907853269984665640564039457584007913129639935) (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x194))))
(define-fun x355 ((x194 Int)) Bool (and (= x194 (x608 x194 0)) (= x194 (x608 0 x194))))
(define-fun x83 ((x194 Int)) Bool (= 0 (x608 x194 x194)))
(define-fun x442 ((x194 Int)) Bool (and (x355 x194) (x83 x194) (x601 x194)))
(define-fun x574 ((x194 Int) (x446 Int)) Bool (= (x608 x194 x446) (x608 x446 x194)))
(define-fun x482 ((x194 Int) (x446 Int)) Bool (and (<= (x608 x194 x446) (+ x194 x446)) (>= (x608 x194 x446) 0)))
(define-fun x18 ((x194 Int) (x446 Int)) Bool (and (x574 x194 x446) (x482 x194 x446)))
(define-fun x510 ((x194 Int)) Bool (= (+ (x348 x194 115792089237316195423570985008687907853269984665640564039457584007913129639904) (mod x194 32)) (mod x194 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x66 ((x194 Int)) Bool (and (x510 x194) (x12 x194 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(define-fun x398 ((x304 Int)) Int 0)
(define-fun x311 ((x304 Int)) Int 0)
(define-fun x144 ((x304 Int)) Int 0)
(define-fun x590 ((x304 Int)) Int 0)
(define-fun x422 ((x304 Int)) Int 0)
(define-fun x414 ((x304 Int)) Int 0)
(define-fun x576 ((x304 Int)) Int 0)
(define-fun x162 ((x304 Int)) Int 0)
(define-fun x344 ((x304 Int)) Int 0)
(define-fun x64 ((x304 Int)) Int 0)
(define-fun x351 ((x304 Int)) Int (ite (= 4 x304) x548 (x64 x304)))
(define-fun x598 ((x304 Int)) Int (ite (= 36 x304) x247 (x351 x304)))
(define-fun x638 ((x304 Int)) Int (ite (= x304 68) x497 (x598 x304)))
(define-fun x205 ((x304 Int)) Int (ite (= 100 x304) x624 (x638 x304)))
(define-fun x514 ((x304 Int)) Int (ite (= x304 132) x277 (x205 x304)))
(define-fun x203 ((x304 Int)) Int (ite (= 164 x304) x621 (x514 x304)))
(define-fun x238 ((x304 Int)) Int (ite (= x304 196) 0 (x203 x304)))
(define-fun x575 ((x304 Int)) Int (ite (= 228 x304) x596 (x238 x304)))
(define-fun x24 ((x304 Int)) Int (ite (= 260 x304) 288 (x575 x304)))
(define-fun x262 ((x304 Int)) Int (ite (= x304 292) x121 (x24 x304)))
(define-fun x383 ((x304 Int)) Int (ite (and (>= x304 324) (> (+ x121 324) x304)) (x129 (- x304 324)) (x262 x304)))
(define-fun x613 ((x304 Int)) Int (ite (= x304 x578) x118 (x158 x304)))
(define-fun x502 ((x304 Int)) Int (ite (= x215 x304) x180 (x613 x304)))
(define-fun x257 ((x304 Int)) Int (ite (= 128 x304) x567 (x422 x304)))
(define-fun x167 ((x304 Int)) Int (ite (= 160 x304) x625 (x144 x304)))
(define-fun x14 ((x304 Int)) Int (ite (= x304 192) x553 (x311 x304)))
(define-fun x333 ((x304 Int)) Int (ite (= 224 x304) x473 (x398 x304)))
(define-fun x605 ((x304 Int)) Int (ite (= 256 x304) x367 (x344 x304)))
(define-fun x22 ((x304 Int)) Int 0)
(define-fun x272 ((x304 Int)) Int (ite (= 480 x304) x268 (x162 x304)))
(define-fun x454 ((x304 Int)) Int 0)
(define-fun x289 ((x304 Int)) Int 0)
(define-fun x520 ((x304 Int)) Int 0)
(define-fun x141 ((x304 Int)) Int 0)
(define-fun x395 ((x304 Int)) Int (ite (= x433 x304) x629 (x502 x304)))
(define-fun x498 ((x304 Int)) Int (ite (= x304 x215) x103 (x395 x304)))
(define-fun x505 ((x304 Int)) Int (ite (= x239 x304) x223 (x297 x304)))
(define-fun x614 ((x304 Int)) Int (ite (= x191 x304) x376 (x431 x304)))
(define-fun x269 ((x304 Int)) Int (ite (= x304 416) 72464927124685711895252664195178772226123872012682517813167109100718830649344 (x414 x304)))
(define-fun x57 ((x304 Int)) Int (ite (and (>= x304 416) (< x304 448)) (x528 (- x304 416)) (x269 x304)))
(define-fun x142 ((x304 Int)) Int (ite x452 (x57 x304) (x269 x304)))
(define-fun x295 ((x304 Int)) Int (ite (= x418 x304) x303 (x142 x304)))
(define-fun x294 ((x304 Int)) Int (ite (= x196 x304) x352 (x295 x304)))
(define-fun x335 ((x304 Int)) Int (ite (= x646 x304) x389 (x294 x304)))
(define-fun x52 ((x304 Int)) Int (ite (= x304 x109) x632 (x335 x304)))
(define-fun x580 ((x304 Int)) Int (ite (= x610 x304) x464 (x52 x304)))
(define-fun x21 ((x304 Int)) Int (ite (= x304 x558) x481 (x429 x304)))
(define-fun x527 ((x304 Int)) Int (ite (= x304 x418) 93852497612052052172171342840208435377766735308355310630824731532202946330624 (x580 x304)))
(define-fun x517 ((x304 Int)) Int (ite (= x519 x304) x303 (x527 x304)))
(define-fun x124 ((x304 Int)) Int (ite (= x304 x171) 64 (x517 x304)))
(define-fun x644 ((x304 Int)) Int (ite (= x304 x570) x552 (x124 x304)))
(define-fun x170 ((x304 Int)) Int (ite (and (> (+ x493 x552) x304) (>= x304 x493)) (x383 (- (+ 324 x304) x493)) (x644 x304)))
(define-fun x33 ((x304 Int)) Int (ite (= x304 x246) 0 (x170 x304)))
(define-fun x639 ((x304 Int)) Int (ite x312 (x580 x304) (x33 x304)))
(define-fun x153 ((x304 Int)) Int (ite x652 (x429 x304) (x21 x304)))
(define-fun x468 ((x304 Int)) Int (ite (= x304 x99) x633 (x153 x304)))
(define-fun x242 ((x304 Int)) Int (ite x156 (x153 x304) (x468 x304)))
(define-fun x61 ((x304 Int)) Int (ite (= x304 x192) x146 (x242 x304)))
(define-fun x409 ((x304 Int)) Int (ite (and (< x304 448) (>= x304 416)) (x528 (- x304 416)) (x590 x304)))
(define-fun x375 ((x304 Int)) Int (ite x341 (x505 x304) (x297 x304)))
(define-fun x387 ((x304 Int)) Int (ite (= x500 x304) x650 (x59 x304)))
(define-fun x551 ((x304 Int)) Int (ite (= x304 x491) x390 (x324 x304)))
(define-fun x561 ((x304 Int)) Int (ite (= x304 x15) x403 (x375 x304)))
(define-fun x424 ((x304 Int)) Int (ite (= x304 x285) x136 (x77 x304)))
(define-fun x329 ((x304 Int)) Int (ite (= x547 x304) x91 (x561 x304)))
(define-fun x427 ((x304 Int)) Int (ite x341 (x614 x304) (x431 x304)))
(define-fun x287 ((x304 Int)) Int (ite (= x304 x589) x220 (x427 x304)))
(define-fun x555 ((x304 Int)) Int (ite (= x221 x304) x113 (x551 x304)))
(define-fun x9 ((x304 Int)) Int (ite (= x304 x226) 0 (x387 x304)))
(define-fun x283 ((x304 Int)) Int (ite x341 (x498 x304) (x502 x304)))
(define-fun x137 ((x304 Int)) Int 0)
(define-fun x413 ((x304 Int)) Int (ite (= x304 x237) x172 (x283 x304)))
(define-fun x619 ((x304 Int)) Int (ite (= x215 x304) x540 (x413 x304)))
(define-fun x177 ((x304 Int)) Int (ite (= x425 x304) x115 (x96 x304)))
(define-fun x214 ((x304 Int)) Int (ite x34 (x242 x304) (x61 x304)))
(define-fun x604 ((x304 Int)) Int (ite (= x98 x304) x128 (x214 x304)))
(define-fun x54 ((x304 Int)) Int (ite (= x418 x304) x389 (x639 x304)))
(define-fun x594 ((x304 Int)) Int (ite (= x227 x304) x303 (x54 x304)))
(assert (x291 x30))
(assert (x291 x118))
(assert (x20 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (= 0 (x453 57896044618658097711785492504343953926975274699741220483192166611388334031421)))
(assert (x291 x352))
(assert (= 64 (x530 (x476 64 x405 3))))
(assert (x291 x588))
(assert (= x460 (=> (and (and (<= 0 x208) (= x249 x643) (= false x426) (>= 340282366920938463463374607431768211455 x581) (= x538 false) (= x415 x85) (= x17 x195) (= x370 302132921) (= x495 (x14 192)) (= x567 x178) (>= x189 0) (<= x169 1461501637330902918203684832716283019655932542975) (= x198 x585) (= (+ 324 x361) x593) (<= 0 x529) (= x309 x313) (>= 1461501637330902918203684832716283019655932542975 x215) (<= x208 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= x478 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x309 x25) (not (> x492 x253)) (<= x183 1461501637330902918203684832716283019655932542975) (>= 127 x138) (>= 1461501637330902918203684832716283019655932542975 x178) (= x95 x29) (= x10 x367) (<= x189 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x605 256) x30) (= (> (x31 x215) 0) x475) (<= x121 4294967295) (= false x310) (= false x512) (= (x96 x556) x235) (= (x333 224) x592) (= x317 x596) (= x253 x593) (= x260 x585) (= 0 x93) (= x197 false) (= x229 0) (= x620 (x476 64 x415 3)) (= 3639262392 x41) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x222) (= (+ x449 2) x556) (= x483 (= x40 0)) (= x164 0) (>= x337 1) (= x42 x495) (>= 1461501637330902918203684832716283019655932542975 x73) (= false x27) (= x28 x202) (= x627 x30) (= x154 (+ 2 x404)) (>= x266 1) (= x485 (x31 x215)) (<= x292 127) (= x603 (x257 128)) (= (and x488 x252) x123) (= (x272 480) x193) (= x572 0) (>= x127 0) (= x337 (x31 x215)) (>= 1461501637330902918203684832716283019655932542975 x592) (= x217 x165) (= x450 x522) (= x643 x212) (>= x357 0) (= x625 x127) (= x175 0) (= x359 x592) (= x488 (not x483)) (= x217 x529) (= x636 false) (= (+ 1 x620) x507) (= x217 x621) (>= x600 0) (>= 1461501637330902918203684832716283019655932542975 x416) (> x147 x296) (<= x552 4294967296) (= x255 x603) (<= x198 1461501637330902918203684832716283019655932542975) (<= 0 x249) (= x110 36) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x357) (= x10 x277) (= (x605 256) x17) (= (x96 x154) x581) (= x2 x317) (= x352 x533) (= x353 x627) (>= 340282366920938463463374607431768211455 x2) (= (x14 192) x198) (>= x485 1) (<= x253 4294967620) (<= 0 x478) (<= 0 x183) (>= 127 x340) (= x279 false) (<= x159 1461501637330902918203684832716283019655932542975) (= x492 (+ 324 x552)) (= x440 x215) (= x241 x373) (<= 0 x10) (= x183 x553) (= x407 x125) (>= x25 0) (>= 340282366920938463463374607431768211455 x235) (= x40 (x297 x507)) (= false x155) (= x484 x532) (= true x372) (= x127 x247) (= x404 (x476 64 x193 3)) (= x322 x78) (>= 340282366920938463463374607431768211455 x40) (= x145 false) (>= x581 1) (= x50 x359) (= x121 x147) (= (x167 160) x125) (= 164 x523) (= x178 x548) (= (* x622 32) x361) (= x71 x582) (>= x361 x147) (<= x611 127) (= x243 x373) (<= x10 115792089237316195423570985008687907853269984665640564039457584007913129639935) x475 (>= 127 x292) (= x486 x416) (<= 1 x321) (= (x167 160) x73) (<= 0 x178) (= x448 false) (= x469 false) (<= x611 127) (= x92 false) (= x183 x497) (= x532 x600) (= x296 (* 32 (- x622 1))) (<= 0 x159) (= (x613 x215) x577) (= (x257 128) x243) (= x209 128) (= x522 x222) (= x552 (x383 292)) (= x330 x461) (<= 1 x215) (= x215 x245) (= x169 x624) (>= 127 x138) (= x578 x416) (>= 1461501637330902918203684832716283019655932542975 x127) (= x85 x184) (<= 0 x95) (>= 134217728 x622) (= false x618) (= x321 (x31 x215)) (<= x243 1461501637330902918203684832716283019655932542975) (= x29 x457) (= false x599) (= x28 (x333 224)) (= x504 false) (= x70 181336955) (= x118 (x158 x578)) (= x159 x436) (>= x222 0) (= 36 x293) (<= 0 x622) (= x466 false) (<= 0 x169) (>= x253 324) (= 288 x46) (= false x81) (= x473 x169) (>= 1461501637330902918203684832716283019655932542975 x529) (>= x416 0) (= x193 x85) (= x116 x436) (= 0 x587) (= x208 x330) (= x180 x577) (= x441 3546984100) (<= x95 340282366920938463463374607431768211455) (= x140 x478) (= x71 x73) (= x317 x352) (= x88 x140) (= x265 x184) (= false x641) (= x252 (not x437)) (= 1 x6) (= x449 (x476 64 x184 3)) (= false x379) (= (x31 x215) x266) (= x230 false) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x249) (= x322 x486) (= (= x235 x457) x437) (= x268 (x179 160 x373 x71 x585 x359 x353)) (= x349 0) (<= x25 1461501637330902918203684832716283019655932542975) (= x207 x165) (= x554 340282366920938463463374607431768211456) (= x173 x415) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x600) (>= 127 x340) (>= x2 1)) (or (and (and (= x1 true) (not x123)) (not x123)) (and (and (= false x201) (= x236 x85) (= (+ x55 x107) x223) (<= x376 340282366920938463463374607431768211455) (= x501 68) (= (+ x382 x318) x263) (<= x432 127) (<= x432 127) (= x51 false) (<= 1 x417) (= x435 (x31 x215)) (= false x397) (= false x518) (= (x502 x433) x629) (= x541 x236) (= 115792089237316195423570985008687907853269984665640564039457584007913129639936 x524) (= x135 x318) (<= x47 127) (>= x521 0) (= x563 x74) (<= x5 340282366920938463463374607431768211455) (= x470 false) (= x417 (x31 x215)) x123 (= x135 (x431 x133)) (= x433 x78) (>= 340282366920938463463374607431768211455 x107) (= false x90) (<= x47 127) (<= x223 340282366920938463463374607431768211455) (= 36 x591) (= 1098332118 x406) (= x74 x85) (= x133 (x476 64 x236 3)) (= 1911856539 x150) (= (x395 x215) x339) (>= 340282366920938463463374607431768211455 x135) (= x369 false) (= x112 x521) (= x376 (+ x5 x55)) (= x112 x55) (= true x536) (= (x476 64 x74 3) x191) (<= 1 x435) (<= x521 340282366920938463463374607431768211455) (= x5 (x431 x191)) (= x339 x103) (= false x328) (= false x479) (= x557 (x476 64 x74 3)) (= (+ x557 1) x239) (= x161 false) (= x382 x521) (= x400 false) (= x107 (x297 x239))) x123))) x97)))
(assert (x291 x458))
(assert (x291 x477))
(assert (=> (<= x373 10000) (= 0 (x453 x373))))
(assert (x291 x41))
(assert (= (x530 (x476 64 x165 x231)) 64))
(assert (x291 x303))
(assert (x20 340282366920938463463374607431768211456))
(assert (x291 x5))
(assert (x18 x515 x508))
(assert (= x651 (=> (and (= (< 0 x552) x319) (or (not x319) (and x319 (and (<= 1 x363) (= x392 (x619 x486)) (= (x31 x486) x472) (= x132 (x609 (- x336 x418))) x43 (= (x347 (+ 32 x519)) x171) (= x43 (<= x163 (x396 x215))) (= (= x392 (x396 x486)) x3) (= x336 (x347 (+ x326 x493))) (<= x75 4294967295) (= x326 (x348 115792089237316195423570985008687907853269984665640564039457584007913129639904 x645)) (= x519 (x347 (+ 4 x418))) (<= 1 x472) (= x493 (x347 (+ x570 32))) (= (x619 x215) x163) x3 (= (+ 31 x552) x645) (= x570 (x347 (+ 64 x519))) (= (x347 (+ x493 x552)) x246))))) x94)))
(assert (> (x476 64 x165 x231) 10000))
(assert (> (x476 64 x165 x623) 10000))
(assert (= (not (and (= (x594 x305) x542) (= x635 false) (= false x480) (<= x418 115792089237316195423570985008687907853269984665640564039457584007913129639903) (= (x347 (+ x418 32)) x305) (>= x588 1) (>= x542 1) (= x565 x542) (= true x275) (= x244 x588) (= x630 false) (= false x36) (= x119 false) (= (x347 (+ x418 32)) x227) (<= x418 115792089237316195423570985008687907853269984665640564039457584007913129639903) (= x615 false) (= x539 true) (= false x378) (= 0 x586) (= x568 true) (= x438 0) (= (x594 x418) x588))) x288))
(assert (x291 x181))
(assert (x291 x47))
(assert (x291 x60))
(assert (= (and x444 x319) x307))
(assert (x291 x76))
(assert (= 0 (x453 4294967620)))
(assert (x291 x101))
(assert (=> (<= x405 10000) (= (x453 x405) 0)))
(assert (= (=> (and (or (and (and (<= x633 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x174 x331) (= x306 (x153 x174)) (>= x306 (- 340282366920938463463374607431768211455)) x45 (= x149 x633) (= (+ x286 x306) x633) (= x286 x443) (= x99 x331) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x306) (>= x633 0)) x45) (and (not x45) (and (= true x53) (not x45)))) (and (= x254 x228) (= (= x254 x215) x45))) x651) x251))
(assert (= (x453 x404) (x453 (+ 2 x404))))
(assert (x291 x393))
(assert (x291 x501))
(assert (x291 x6))
(assert (=> (>= 10000 x165) (= 0 (x453 x165))))
(assert (x503 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x291 x647))
(assert (x291 x276))
(assert (= (x453 (x476 64 x165 x623)) (x476 64 x165 x623)))
(assert (= (x453 (x476 64 x165 x231)) (x476 64 x165 x231)))
(assert (= 0 (x453 300000000000000000)))
(assert (x291 x270))
(assert (x291 x519))
(assert (x20 3546984100))
(assert (x503 x645))
(assert (x20 1000000000000000000000000000000000000))
(assert (x291 x323))
(assert (= (x67 (x476 64 x236 3)) 3))
(assert (x291 x260))
(assert (x291 x390))
(assert (x291 x473))
(assert (x291 x243))
(assert (x291 x434))
(assert (= (and x63 x362) x452))
(assert (x291 x100))
(assert (= (x453 x233) (x453 (+ 1 x233))))
(assert (= (x453 (+ 2 x583)) (x453 x583)))
(assert (x291 x489))
(assert (x66 x645))
(assert (x291 x563))
(assert (= x117 (and x617 x380)))
(assert (= (x453 4294967296) 0))
(assert (not (x20 (x476 64 x165 x623))))
(assert (x291 x581))
(assert (x291 x487))
(assert (x291 x198))
(assert (x291 x290))
(assert (x291 x305))
(assert (= (x453 340282366920938463463374607431768211454) 0))
(assert (x291 x621))
(assert (x291 x339))
(assert (x291 x349))
(assert (x291 x172))
(assert (> (x476 64 x193 2) 10000))
(assert (= 0 (x453 1461501637330902918203684832716283019655932542975)))
(assert (< 10000 (x476 64 x193 3)))
(assert (= x225 (x67 (x476 64 x165 x225))))
(assert (x291 x493))
(assert (x291 x345))
(assert (x291 x645))
(assert (not (x20 (x476 64 x415 3))))
(assert (= x373 (x204 (x179 160 x373 x71 x585 x359 x353))))
(assert (x291 x326))
(assert (= (x453 (x476 64 x415 3)) (x476 64 x415 3)))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x476 64 x165 x16)))
(assert (x291 x132))
(assert (= (x453 (+ x535 1)) (x453 x535)))
(assert (x291 x86))
(assert (x291 x150))
(assert (=> (>= 10000 x74) (= 0 (x453 x74))))
(assert (x20 4294967295))
(assert (x291 x235))
(assert (x291 x406))
(assert (= (x453 (+ 1 x218)) (x453 x218)))
(assert (x503 x49))
(assert (x291 x485))
(assert (x291 x256))
(assert (= 0 (x453 1098332118)))
(assert (= x74 (x204 (x476 64 x74 3))))
(assert (x291 x85))
(assert (x291 x79))
(assert (x291 x497))
(assert (x291 x367))
(assert (x291 x513))
(assert (< 10000 (x476 64 x165 x250)))
(assert (x291 x227))
(assert (= 0 (x453 1911856539)))
(assert (= (=> (and (or (and (and (<= x216 4294967295) (<= 32 x216) (= x531 1)) x362) (and (= x271 x531) (not x362))) (and (= x583 (x476 64 x405 3)) (<= x314 127) (= x78 x237) (= (+ 2 x583) x425) (= 2777397322 x200) (= (x14 192) x368) (= x540 x79) (<= x216 57896044618658097711785492504343953926634992332820282019728792003956564819967) (= x213 false) (= x172 (x283 x237)) (= x114 false) (= 416 x648) (= false x58) (= x85 x405) (= false x584) (= x394 false) (= x457 x115) (>= x216 32) (= x362 (> x271 0)) (= x647 (x31 x215)) (<= 1 x647) (<= x314 127) (= x79 (x413 x215)) (= 68 x571) (= x405 x562) (= x393 (x348 1461501637330902918203684832716283019655932542975 x368)))) x640) x97))
(assert (< (x476 64 x405 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (x530 (x476 64 x165 x364)) 64))
(assert (= (x453 (+ 1 x84)) (x453 x84)))
(assert (= (x476 64 x74 3) (x453 (x476 64 x74 3))))
(assert (= (x204 (x476 64 x165 x250)) x165))
(assert (x291 x115))
(assert (x291 x246))
(assert (x291 x241))
(assert (x291 x200))
(assert (> (x476 64 x165 x16) 10000))
(assert (x20 57896044618658097711785492504343953926634999999999999999999))
(assert (= (x453 340282366920938463463374607431768211455) 0))
(assert (x20 302132921))
(assert (x291 x316))
(assert (x291 x508))
(assert (= (x453 (+ 1 x412)) (x453 x412)))
(assert (= (x453 1000000) 0))
(assert (x291 x537))
(assert (= (or x307 x312) x617))
(assert (< (x476 64 x165 x225) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x320 x384))
(assert (x442 x276))
(assert (x291 x411))
(assert (= (x204 (x476 64 x165 x231)) x165))
(assert (x291 x392))
(assert (= (x453 57896044618658097711785492504343953926975274699741220483192166611388334) 0))
(assert (x291 x173))
(assert (x291 x447))
(assert (x291 x368))
(assert (= (and x13 x388) x131))
(assert (=> (<= x184 10000) (= (x453 x184) 0)))
(assert (< (x476 64 x193 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x291 x40))
(assert (= x360 (and x63 (not x362))))
(assert (= x63 (or x341 x401)))
(assert (= x543 true))
(assert (= (x453 72464927124685711895252664195178772226123872012682517813167109100718830649344) 0))
(assert (= (x453 (x476 64 x165 x225)) (x476 64 x165 x225)))
(assert (x291 x591))
(assert (x291 x277))
(assert (x291 x625))
(assert (x442 1150000000000000000))
(assert (= (and (not x13) x388) x642))
(assert (x291 x472))
(assert (x291 x546))
(assert (< (x476 64 x193 2) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= x16 (x67 (x476 64 x165 x16))))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x476 64 x74 3)))
(assert (= (and (not x319) x444) x312))
(assert (= x405 (x204 (x476 64 x405 3))))
(assert (x20 57896044618658097711785492504343953926975274699741220483192166611388334031421))
(assert (x291 x196))
(assert (= (x453 x449) (x453 (+ 2 x449))))
(assert (x291 x632))
(assert (x291 x402))
(assert (x291 x102))
(assert (x291 x435))
(assert (x291 x44))
(assert (= (x453 x68) (x453 (+ x68 1))))
(assert (x291 x17))
(assert (= (x67 (x179 160 x373 x71 x585 x359 x353)) x71))
(assert (x291 x566))
(assert (x291 x62))
(assert (x291 x105))
(assert (= (x453 (+ x126 1)) (x453 x126)))
(assert (x503 x368))
(assert (x291 x168))
(assert (x291 x540))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x476 64 x236 3)))
(assert (x20 181336955))
(assert (= (x476 64 x165 x16) (x453 (x476 64 x165 x16))))
(assert (x291 x46))
(assert (x291 x327))
(assert (= 2 (x67 (x476 64 x193 2))))
(assert (x291 x610))
(assert (x291 x365))
(assert (x291 x278))
(assert (x291 x471))
(assert (x291 x69))
(assert (= (x204 (x476 64 x415 3)) x415))
(assert (= (x453 (+ x267 1)) (x453 x267)))
(assert (x291 x603))
(assert (not (x20 (x476 64 x193 3))))
(assert (x291 x266))
(assert (x291 x209))
(assert (not (x20 (x476 64 x74 3))))
(assert (x291 x193))
(assert (= (x67 (x476 64 x165 x250)) x250))
(assert (x291 x353))
(assert (= (=> (and (and (= x423 x38) (= x215 x420) (= x546 (x348 1461501637330902918203684832716283019655932542975 x49)) (= (x257 128) x49) (= x546 x148) (= x176 x215) (= x303 x408) (= x423 x486) (= x65 x215) (= (= x215 x38) x380)) (or (and x380 (and (= x146 (- x39 x232)) (>= x146 0) (= x408 x232) (>= 115792147133360814081668696794180412197223911640915263780678067200079741028269 x39) (<= 0 x39) x380 (= x146 x391) (= x39 (x242 x499)) (= x499 x148) (<= x146 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x192 x148))) (and (and (not x380) (= true x120)) (not x380)))) x366) x94))
(assert (x291 x596))
(assert (x291 x207))
(assert (= x623 (x67 (x476 64 x165 x623))))
(assert (x20 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x20 4294967620))
(assert (=> (= 0 x290) (= 0 (div x374 x290))))
(assert (x291 x216))
(assert (x291 x403))
(assert (x291 x11))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x476 64 x165 x465)))
(assert (x20 72464927124685711895252664195178772226123872012682517813167109100718830649344))
(assert (= (x453 (x476 64 x405 3)) (x476 64 x405 3)))
(assert (= (x453 1150000000000000000) 0))
(assert (= x165 (x204 (x476 64 x165 x364))))
(assert (=> (>= 10000 x486) (= 0 (x453 x486))))
(assert (not (x20 (x476 64 x193 2))))
(assert (= (x476 64 x193 2) (x453 (x476 64 x193 2))))
(assert (> (x476 64 x236 3) 10000))
(assert (= (x453 (x476 64 x165 x364)) (x476 64 x165 x364)))
(assert (x291 x223))
(assert (< 10000 (x476 64 x165 x364)))
(assert (=> (<= x585 10000) (= (x453 x585) 0)))
(assert (x291 x236))
(assert (x291 x264))
(assert (= 0 (x453 3546984100)))
(assert (x291 x405))
(assert (x291 x432))
(assert (= 0 (x453 302132921)))
(assert (= (x453 (+ 1 x445)) (x453 x445)))
(assert (x291 x486))
(assert (not (x20 (x476 64 x184 3))))
(assert (= (x530 (x476 64 x193 2)) 64))
(assert (> (x476 64 x165 x225) 10000))
(assert (x291 x451))
(assert (not (x20 (x476 64 x165 x225))))
(assert (< (x179 160 x373 x71 x585 x359 x353) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= 0 (x453 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (x291 x113))
(assert (x291 x273))
(assert (x291 x292))
(assert (x291 x50))
(assert (x291 x389))
(assert (x20 93852497612052052172171342840208435377766735308355310630824731532202946330624))
(assert (x20 2777397322))
(assert (x291 x433))
(assert (= (x67 (x476 64 x184 3)) 3))
(assert (= (and x182 (not x157)) x166))
(assert (x291 x464))
(assert (x291 x337))
(assert (x291 x188))
(assert (not (x20 (x476 64 x165 x465))))
(assert (x291 x415))
(assert (x20 1461501637330902918203684832716283019655932542975))
(assert (x291 x70))
(assert (= 64 (x530 (x476 64 x184 3))))
(assert (=> (>= 10000 x353) (= (x453 x353) 0)))
(assert (= x300 (and x157 x182)))
(assert (x20 57896044618658097711785492504343953926975274699741220483192166611388334))
(assert (x291 x91))
(assert (= (x204 (x476 64 x165 x225)) x165))
(assert (= 0 (x453 134217728)))
(assert (x291 x531))
(assert (= (x453 x187) (x453 (+ 1 x187))))
(assert (x291 x125))
(assert (= 64 (x530 (x476 64 x165 x623))))
(assert (x291 x248))
(assert (x442 x508))
(assert (= 64 (x530 (x476 64 x165 x16))))
(assert (x291 x121))
(assert (x291 x553))
(assert (x503 x384))
(assert (x291 x515))
(assert (x18 x515 x537))
(assert (x291 x534))
(assert (< 10000 (x476 64 x415 3)))
(assert (= 64 (x530 (x476 64 x74 3))))
(assert (= x616 (or x131 x642)))
(assert (= (and x258 x45) x37))
(assert (= 0 (x453 4294967295)))
(assert (=> (<= x415 10000) (= 0 (x453 x415))))
(assert (x291 x55))
(assert (= x342 (and x545 x430)))
(assert (x291 x321))
(assert (x291 x525))
(assert (x291 x103))
(assert (x20 57896044618658097711785492504343953926634992332820282019728792003956564819967))
(assert (=> (= 0 x385) (= (div 1000000000000000000000000000000000000 x385) 0)))
(assert (> (x179 160 x373 x71 x585 x359 x353) 10000))
(assert (= (x530 (x476 64 x165 x250)) 64))
(assert (x291 x363))
(assert (= 64 (x530 (x476 64 x165 x465))))
(assert (x291 x441))
(assert (x291 x109))
(assert (= 64 (x530 (x476 64 x165 x225))))
(assert (=> (>= 10000 x215) (= (x453 x215) 0)))
(assert (x291 x595))
(assert (x20 1150000000000000000))
(assert (=> (<= x433 10000) (= (x453 x433) 0)))
(assert (x291 x4))
(assert (x20 1098332118))
(assert (=> (<= x193 10000) (= (x453 x193) 0)))
(assert (=> (= 0 x371) (= 0 (div x188 x371))))
(assert (< (x476 64 x415 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (=> (<= x359 10000) (= (x453 x359) 0)))
(assert (not (x20 (x476 64 x236 3))))
(assert (= (x453 (+ x557 1)) (x453 x557)))
(assert (x291 x593))
(assert (x291 x567))
(assert (x291 x271))
(assert (x503 1461501637330902918203684832716283019655932542975))
(assert (x291 x104))
(assert (x291 x220))
(assert (x291 x582))
(assert (x291 x570))
(assert (x291 x165))
(assert (x20 4294967296))
(assert (x20 134217728))
(assert (= (x453 1000000000000000000) 0))
(assert (x291 x562))
(assert (x291 x376))
(assert (= (x453 (+ x8 1)) (x453 x8)))
(assert (= (x453 57896044618658097711785492504343953926634992332820282019728792003956564819967) 0))
(assert (x291 x253))
(assert (x291 x541))
(assert (= (x453 x151) (x453 (+ 1 x151))))
(assert (x291 x336))
(assert (x291 x180))
(assert (= (and (not x380) x617) x34))
(assert (= x401 (and (not x123) x543)))
(assert (x291 x384))
(assert (= (x453 (+ 1 x579)) (x453 x579)))
(assert (x291 x184))
(assert (= (x453 93852497612052052172171342840208435377766735308355310630824731532202946330624) 0))
(assert (not x460))
(assert (x20 340282366920938463463374607431768211454))
(assert (x291 x516))
(assert (x291 x577))
(assert (x291 x237))
(assert (= x652 (and (not x545) x430)))
(assert (x291 x110))
(assert (x20 300000000000000000))
(assert (not (x20 (x476 64 x165 x364))))
(assert (x291 x421))
(assert (x291 x542))
(assert (x291 x215))
(assert (not (x20 (x179 160 x373 x71 x585 x359 x353))))
(assert (not (x20 (x476 64 x405 3))))
(assert (x291 x340))
(assert (x291 x73))
(assert (=> (<= x578 10000) (= 0 (x453 x578))))
(assert (x291 x265))
(assert (x291 x35))
(assert (= (x453 115792089237316195423570985008687907853269984665640564039457584007913129639935) 0))
(assert (= (x453 115792089237316195423570985008687907853269984665640564039457584007913129639903) 0))
(assert (= x236 (x204 (x476 64 x236 3))))
(assert (= (x453 2777397322) 0))
(assert (x291 x108))
(assert (= (or x652 x342) x258))
(assert (x291 x650))
(assert (x18 1150000000000000000 x649))
(assert (< 10000 (x476 64 x184 3)))
(assert (= (x204 (x476 64 x165 x16)) x165))
(assert (= 64 (x530 (x476 64 x415 3))))
(assert (= (x453 (+ x509 1)) (x453 x509)))
(assert (x291 x494))
(assert (x291 x19))
(assert (not (x20 (x476 64 x165 x16))))
(assert (x291 x134))
(assert (x291 x49))
(assert (x291 x210))
(assert (x291 x381))
(assert (x20 115792089237316195423570985008687907853269984665640564039457584007913129639903))
(assert (x291 x548))
(assert (< (x476 64 x165 x231) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x291 x629))
(assert (x18 1150000000000000000 x276))
(assert (x291 x624))
(assert (x291 x526))
(assert (x291 x571))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x476 64 x165 x250)))
(assert (= (x453 3639262392) 0))
(assert (x291 x533))
(assert (= (x453 (x476 64 x165 x465)) (x476 64 x165 x465)))
(assert (= (or x360 x452) x182))
(assert (=> (<= x71 10000) (= (x453 x71) 0)))
(assert (= 64 (x530 (x476 64 x236 3))))
(assert (x291 x75))
(assert (= (x476 64 x236 3) (x453 (x476 64 x236 3))))
(assert (x291 x28))
(assert (x320 x368))
(assert (=> (= 0 x23) (= (div x346 x23) 0)))
(assert (x291 x428))
(assert (x291 x350))
(assert (< (x476 64 x165 x623) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (or x166 x300) x430))
(assert (x20 1000000))
(assert (x442 x515))
(assert (x291 x356))
(assert (= x193 (x204 (x476 64 x193 3))))
(assert (= (or x34 x117) x388))
(assert (= x366 (=> (and (and (= x13 (= x419 x215)) (= x419 x420)) (or (and (and (<= 0 x128) x13 (= x399 x128) (= x634 (x214 x48)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x128) (<= x634 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x98 x148) (= x128 (+ x634 x72)) (>= x634 (- 57896044618658097711785492504343953926975274699741220483192166611388334)) (= x408 x72) (= x148 x48)) x13) (and (not x13) (and (not x13) (= true x474))))) x288)))
(assert (x20 3639262392))
(assert (x291 x463))
(assert (> (x476 64 x405 3) 10000))
(assert (x291 x611))
(assert (x291 x175))
(assert (x442 x537))
(assert (= x341 (and x543 x123)))
(assert (x291 x87))
(assert (x291 x138))
(assert (= x165 (x204 (x476 64 x165 x465))))
(assert (= (x302 (x179 160 x373 x71 x585 x359 x353)) x359))
(assert (= (x67 (x476 64 x165 x231)) x231))
(assert (< (x476 64 x165 x364) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x291 x492))
(assert (x291 x417))
(assert (= (x530 (x179 160 x373 x71 x585 x359 x353)) 160))
(assert (x291 x74))
(assert (x320 x49))
(assert (= 0 (x453 181336955)))
(assert (= x184 (x204 (x476 64 x184 3))))
(assert (x291 x649))
(assert (= (=> (and (and (= x196 (x347 (+ x418 32))) (= (x348 1461501637330902918203684832716283019655932542975 x384) x11) (= x109 (x347 (+ 32 x646))) (= (x347 (+ x196 32)) x646) (= x545 (= x284 x215)) (= x443 x389) (= x284 x240) (= x215 x199) (= x610 (x347 (+ x109 32))) (= x240 x215) (= x215 x439) (= (x167 160) x384) (= x152 x215) (= x486 x228) (= x11 x331)) (or (and (and (not x545) (= true x261)) (not x545)) (and (and (>= x612 0) (= x331 x558) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x481) x545 (= x481 x7) (>= x481 0) (= x481 (- x612 x358)) (= (x429 x628) x612) (>= 115792089237316195423570985008687907853610267032561502502920958615344897851390 x612) (= x331 x628) (= x443 x358)) x545))) x251) x143))
(assert (x291 x386))
(assert (not (x20 (x476 64 x165 x250))))
(assert (x291 x163))
(assert (= (x67 (x476 64 x165 x364)) x364))
(assert (x291 x136))
(assert (= 0 (x453 1000000000000000000000000000000000000)))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x476 64 x184 3)))
(assert (= x165 (x204 (x476 64 x165 x623))))
(assert (x291 x298))
(assert (= (x453 x597) (x453 (+ x597 1))))
(assert (x291 x646))
(assert (= (x453 (x476 64 x165 x250)) (x476 64 x165 x250)))
(assert (= (or x37 x156) x444))
(assert (x291 x377))
(assert (=> (>= 10000 x236) (= 0 (x453 x236))))
(assert (x291 x190))
(assert (x291 x135))
(assert (x291 x549))
(assert (= 3 (x67 (x476 64 x405 3))))
(assert (= (x453 340282366920938463463374607431768211456) 0))
(assert (= (x453 (+ 1 x490)) (x453 x490)))
(assert (< 10000 (x476 64 x74 3)))
(assert (= (x179 160 x373 x71 x585 x359 x353) (x453 (x179 160 x373 x71 x585 x359 x353))))
(assert (not (x20 (x476 64 x165 x231))))
(assert (x291 x495))
(assert (x291 x206))
(assert (x291 x281))
(assert (x291 x648))
(assert (x291 x314))
(assert (= x585 (x301 (x179 160 x373 x71 x585 x359 x353))))
(assert (x291 x171))
(assert (x291 x511))
(assert (= (x456 (x179 160 x373 x71 x585 x359 x353)) x353))
(assert (= (x453 x56) (x453 (+ x56 1))))
(assert (= (x453 (+ 1 x626)) (x453 x626)))
(assert (x291 x385))
(assert (x291 x370))
(assert (= (and (not x45) x258) x156))
(assert (x20 340282366920938463463374607431768211455))
(assert (x20 1000000000000000000))
(assert (x291 x418))
(assert (= x465 (x67 (x476 64 x165 x465))))
(assert (= (x67 (x476 64 x415 3)) 3))
(assert (= (x453 (x476 64 x184 3)) (x476 64 x184 3)))
(assert (= 0 (x453 57896044618658097711785492504343953926634999999999999999999)))
(assert (= (x453 (+ x631 1)) (x453 x631)))
(assert (x291 x107))
(assert (=> (= 0 x185) (= (div (+ x327 x89) x185) 0)))
(assert (= 3 (x67 (x476 64 x74 3))))
(assert (> (x476 64 x165 x465) 10000))
(assert (= (x453 x410) (x453 (+ 1 x410))))
(assert (x291 x247))
(assert (x291 x338))
(assert (= x193 (x204 (x476 64 x193 2))))
(assert (= (x453 x620) (x453 (+ 1 x620))))
(assert (x291 x578))
(assert (x291 x293))
(assert (x291 x523))
(assert (x20 1911856539))
(assert (x291 x354))
(assert (x291 x552))
(assert (x442 x649))
(assert (=> (<= x237 10000) (= (x453 x237) 0)))
(assert (= (x453 (+ 1 x111)) (x453 x111)))
(assert (= (x476 64 x193 3) (x453 (x476 64 x193 3))))
(assert (= x640 (=> (and (and (= (* (x608 1150000000000000000 x649) (ite (< x649 1150000000000000000) 1 0)) x276) (>= x544 0) (<= x190 340282366920938463463374607431768211455) (= 0 x350) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x421 x356)) (= (* x471 300000000000000000) x564) (= x487 (x375 x459)) (= x364 (x476 64 x193 2)) (= (x476 64 x193 2) x231) (= x421 (div x280 1000000000000000000000000000000000000)) (= x105 1000000000000000000000000000000000000) (> x595 x534) (= (div x564 1000000000000000000) x168) (<= x136 340282366920938463463374607431768211455) (= x511 (x77 x122)) (<= x494 340282366920938463463374607431768211455) (>= 1000000000000000000 x256) (>= 57896044618658097711785492504343953926975274699741220483192166611388334031421 x188) (= (* x298 x86) x234) (= (* x421 x356) x559) (= (+ x323 1) x206) (= 1000000000000000000 x526) (= (div x544 1000000000000000000) x428) (= (+ 1 x490) x106) (= x626 (x476 64 x193 3)) (= x500 (+ x412 1)) (= (+ 1 x84) x491) (= x19 (x324 x550)) (= (x476 64 x193 3) x535) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x511 x23)) (= x267 (x476 64 x193 3)) (= x188 (+ x566 x234)) (= (+ x525 1000000) x290) (<= x390 340282366920938463463374607431768211454) (>= x374 1) (= 300000000000000000 x181) (not (< x371 x566)) (= x371 (+ 1000000 x19)) (= x84 (x476 64 x193 3)) (= (x476 64 x193 2) x16) (>= 340282366920938463463374607431768211455 x386) (= x385 (- 1000000000000000000 x168)) (>= 340282366920938463463374607431768211455 x403) (= (+ x278 1) x86) (< (* x210 x458) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (x605 256) x256) (= (x324 x455) x525) (= x15 (+ 1 x579)) (not (< x316 x134)) (>= x559 0) (<= x280 57896044618658097711785492504343953926634992332820282019728792003956564819967) (= x494 (x324 x496)) (= x101 1000000000000000000) (= x308 (+ 1 x445)) (>= 340282366920938463463374607431768211455 x298) (= (x59 x308) x298) (= (+ x494 1000000) x316) (= x534 (div x559 1000000000000000000)) (= x544 (* x458 x210)) (>= 340282366920938463463374607431768211455 x278) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x559) (= (+ x535 1) x496) (<= 1 x273) (>= x573 1) (= 1150000000000000000 x434) (= (* x511 x23) x280) (= (* x87 (ite (> x102 x303) 1 0)) x403) (<= 1000000 x188) (= x566 (- x371 1)) (= x374 (* x352 x206)) (>= 57896044618658097711785492504343953926975274699741220483192166611388334 x595) (= 1000000000000000000 x354) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x573) (= (+ 1 x631) x315) (>= 340282366920938463463374607431768211455 x511) (= 1000000000000000000000000000000000000 x248) (= x285 (+ 1 x410)) (= (x476 64 x165 x623) x233) (>= x595 1) (= (x424 x80) x190) (= x573 (* x35 x352)) (= x631 (x476 64 x193 3)) (= (+ x187 1) x82) (= x389 (div x346 x23)) (>= 340282366920938463463374607431768211455 x19) (= x35 (+ x487 1)) (<= x374 57896044618658097711785492504343953926634992332820282019728792003956564819967) (= (+ 1 x233) x80) (= x108 1000000000000000000) (= x386 (x324 x491)) (>= x531 1) (= (+ 1 x267) x455) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x234) (= x87 (x609 (- x102 x303))) (= (x476 64 x193 2) x623) (<= x389 340282366920938463463374607431768211455) (= (+ 1 x626) x459) (= x157 (= x190 0)) (<= x544 57896044618658097711785492504343953926634999999999999999999) (<= x525 340282366920938463463374607431768211455) (= x122 (+ x126 1)) (= (x375 x82) x278) (<= x516 340282366920938463463374607431768211455) (= x136 (x609 (- x516 x389))) (= (x605 256) x356) (= (x77 x285) x516) (= x210 (div x374 x290)) (= (* 1000000000000000000000000000000000000 x428) x346) (= (- 1000000000000000000 x256) x471) (= x458 (x608 1150000000000000000 x276)) (= (x476 64 x165 x16) x412) (= (div x188 x371) x595) (= (x375 x315) x323) (>= 340282366920938463463374607431768211454 x650) (>= 340282366920938463463374607431768211455 x487) (= x410 (x476 64 x165 x225)) (= x303 (div (+ x134 x573) x316)) (= x650 (x609 (- x273 x352))) (= (x476 64 x193 3) x111) (>= x23 1) (<= 0 x234) (= (x476 64 x193 3) x579) (= x550 (+ 1 x111)) (>= x280 0) (= x126 (x476 64 x165 x364)) (= x187 (x476 64 x193 3)) (= (- x316 1) x134) (<= 1 x386) (<= x273 340282366920938463463374607431768211455) (= x445 (x476 64 x165 x231)) (= (x375 x106) x102) (= x273 (x59 x500)) (= x345 1000000000000000000) (>= 340282366920938463463374607431768211455 x323) (<= x102 340282366920938463463374607431768211455) (= x390 (x609 (- x386 x352))) (= x225 (x476 64 x193 2)) (= (div 1000000000000000000000000000000000000 x385) x649) (= x23 (x409 416)) (= (x476 64 x193 3) x490)) (or (and (and (= 768 x418) (= 0 x632) (= x464 0)) (not x157)) (and (and (<= x113 340282366920938463463374607431768211455) (= x151 (x476 64 x193 3)) (= (x609 (- x477 x264)) x91) (= x68 (x476 64 x193 3)) (<= x4 340282366920938463463374607431768211455) (>= 340282366920938463463374607431768211455 x91) (= x221 (+ 1 x68)) (= (* (ite (> x515 x508) 1 0) (x608 x515 x508)) x537) (= x218 (x476 64 x193 3)) (= (x476 64 x193 3) x597) (= x509 (x476 64 x165 x465)) (= (* x100 x447) x89) (= x4 (x551 x211)) (= x211 (+ x151 1)) (<= x451 340282366920938463463374607431768211455) (= x465 (x476 64 x193 2)) (= (x427 x589) x270) (= x560 (+ x597 1)) (= (+ 1 x218) x130) (= x447 (+ 1 x549)) (= (div (+ x89 x327) x185) x508) (= x451 (x551 x221)) (= x100 x464) (= x264 x632) (= (x561 x560) x549) (>= 340282366920938463463374607431768211455 x270) (= (- x185 1) x327) (= (x476 64 x193 3) x8) (>= 340282366920938463463374607431768211455 x100) (= (x608 x515 x537) x264) (= (+ 1000000 x4) x185) (<= 0 x89) (= (x609 (- x451 x100)) x113) (= (x476 64 x193 2) x250) (= (x387 x602) x100) (= x226 (+ 1 x509)) (= (+ x56 1) x602) (<= x477 340282366920938463463374607431768211455) (>= 340282366920938463463374607431768211455 x515) (not (< x185 x327)) (<= x537 340282366920938463463374607431768211455) (= (x609 (- x270 x264)) x220) (= (x561 x547) x477) (= x589 (x476 64 x193 3)) (<= x89 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 340282366920938463463374607431768211455 x220) (= (x476 64 x165 x250) x56) (= x515 (x561 x130)) (= x418 960) (>= 340282366920938463463374607431768211455 x549) (= (+ 1 x8) x547)) x157))) x143)))
(assert (x291 x185))
(assert (=> (= 0 x316) (= 0 (div (+ x134 x573) x316))))
(assert (= 3 (x67 (x476 64 x193 3))))
(assert (x291 x23))
(assert (= 64 (x530 (x476 64 x193 3))))
(assert (x291 x371))
(assert (x291 x592))
(check-sat)
(exit)
