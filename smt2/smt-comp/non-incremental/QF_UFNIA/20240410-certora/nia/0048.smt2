(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Certora
Generated on: 2024-04-10
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x521 () Int)
(declare-fun x222 () Bool)
(declare-fun x362 (Int) Bool)
(declare-fun x599 () Bool)
(declare-fun x539 () Bool)
(declare-fun x58 () Int)
(declare-fun x893 () Int)
(declare-fun x792 () Int)
(declare-fun x897 () Int)
(declare-fun x797 () Bool)
(declare-fun x334 () Int)
(declare-fun x1041 () Int)
(declare-fun x245 () Int)
(declare-fun x767 () Bool)
(declare-fun x1065 () Int)
(declare-fun x1088 () Int)
(declare-fun x1034 () Int)
(declare-fun x59 () Int)
(declare-fun x1187 () Bool)
(declare-fun x433 () Int)
(declare-fun x327 () Bool)
(declare-fun x67 () Int)
(declare-fun x1046 () Int)
(declare-fun x998 () Int)
(declare-fun x586 () Int)
(declare-fun x1181 () Int)
(declare-fun x1173 () Bool)
(declare-fun x419 (Int Int) Int)
(declare-fun x590 () Int)
(declare-fun x577 () Int)
(declare-fun x566 () Int)
(declare-fun x243 () Bool)
(declare-fun x343 () Int)
(declare-fun x884 () Int)
(declare-fun x162 () Bool)
(declare-fun x24 () Int)
(declare-fun x1183 () Bool)
(declare-fun x709 () Bool)
(declare-fun x19 () Bool)
(declare-fun x1009 () Int)
(declare-fun x675 () Bool)
(declare-fun x69 () Int)
(declare-fun x806 () Int)
(declare-fun x618 () Int)
(declare-fun x923 () Bool)
(declare-fun x734 () Bool)
(declare-fun x544 () Int)
(declare-fun x1099 () Bool)
(declare-fun x333 () Int)
(declare-fun x446 () Int)
(declare-fun x415 () Int)
(declare-fun x368 () Bool)
(declare-fun x364 () Int)
(declare-fun x604 () Int)
(declare-fun x484 () Int)
(declare-fun x179 () Bool)
(declare-fun x1037 () Bool)
(declare-fun x665 () Int)
(declare-fun x341 () Int)
(declare-fun x1179 () Bool)
(declare-fun x110 () Int)
(declare-fun x316 () Bool)
(declare-fun x1091 () Int)
(declare-fun x534 () Int)
(declare-fun x899 () Int)
(declare-fun x838 () Bool)
(declare-fun x891 () Int)
(declare-fun x1156 () Int)
(declare-fun x186 () Int)
(declare-fun x337 () Int)
(declare-fun x335 () Bool)
(declare-fun x1155 () Int)
(declare-fun x973 () Bool)
(declare-fun x655 () Int)
(declare-fun x685 () Int)
(declare-fun x1052 () Int)
(declare-fun x1123 () Int)
(declare-fun x513 () Int)
(declare-fun x908 () Bool)
(declare-fun x425 () Int)
(declare-fun x778 () Int)
(declare-fun x875 () Int)
(declare-fun x135 () Int)
(declare-fun x372 () Int)
(declare-fun x299 () Int)
(declare-fun x930 () Int)
(declare-fun x976 () Int)
(declare-fun x504 () Int)
(declare-fun x145 () Bool)
(declare-fun x219 () Bool)
(declare-fun x353 () Int)
(declare-fun x859 () Bool)
(declare-fun x45 () Int)
(declare-fun x1218 () Int)
(declare-fun x906 () Int)
(declare-fun x18 () Int)
(declare-fun x1100 () Int)
(declare-fun x195 () Int)
(declare-fun x489 () Bool)
(declare-fun x1069 () Int)
(declare-fun x282 () Bool)
(declare-fun x497 () Int)
(declare-fun x800 () Int)
(declare-fun x265 () Int)
(declare-fun x760 () Int)
(declare-fun x950 () Int)
(declare-fun x178 () Bool)
(declare-fun x102 () Bool)
(declare-fun x815 () Int)
(declare-fun x275 () Int)
(declare-fun x927 () Bool)
(declare-fun x338 () Int)
(declare-fun x395 () Int)
(declare-fun x704 () Int)
(declare-fun x680 () Int)
(declare-fun x605 () Int)
(declare-fun x83 () Int)
(declare-fun x601 () Bool)
(declare-fun x332 () Int)
(declare-fun x38 () Int)
(declare-fun x149 () Int)
(declare-fun x194 () Bool)
(declare-fun x647 () Int)
(declare-fun x199 () Int)
(declare-fun x1001 () Bool)
(declare-fun x86 () Int)
(declare-fun x1060 () Bool)
(declare-fun x284 () Int)
(declare-fun x164 () Int)
(declare-fun x651 () Int)
(declare-fun x744 () Bool)
(declare-fun x583 () Int)
(declare-fun x205 () Bool)
(declare-fun x1125 () Int)
(declare-fun x331 () Int)
(declare-fun x781 (Int Int) Int)
(declare-fun x872 () Int)
(declare-fun x57 () Bool)
(declare-fun x74 () Int)
(declare-fun x619 () Int)
(declare-fun x824 () Bool)
(declare-fun x713 () Int)
(declare-fun x515 () Int)
(declare-fun x737 () Int)
(declare-fun x1033 () Int)
(declare-fun x134 () Int)
(declare-fun x469 () Bool)
(declare-fun x258 () Int)
(declare-fun x291 () Int)
(declare-fun x658 () Bool)
(declare-fun x643 () Int)
(declare-fun x473 () Int)
(declare-fun x1093 () Int)
(declare-fun x1078 () Bool)
(declare-fun x814 () Int)
(declare-fun x774 () Int)
(declare-fun x576 () Int)
(declare-fun x750 () Bool)
(declare-fun x229 () Int)
(declare-fun x554 () Int)
(declare-fun x231 () Bool)
(declare-fun x524 () Bool)
(declare-fun x852 () Int)
(declare-fun x374 () Int)
(declare-fun x293 () Int)
(declare-fun x530 () Bool)
(declare-fun x978 () Int)
(declare-fun x92 () Int)
(declare-fun x217 () Bool)
(declare-fun x161 () Bool)
(declare-fun x839 () Int)
(declare-fun x820 () Bool)
(declare-fun x340 () Bool)
(declare-fun x892 () Bool)
(declare-fun x262 (Int) Int)
(declare-fun x304 () Int)
(declare-fun x414 () Int)
(declare-fun x808 () Bool)
(declare-fun x584 () Int)
(declare-fun x361 () Bool)
(declare-fun x233 () Int)
(declare-fun x849 (Int) Int)
(declare-fun x126 () Int)
(declare-fun x466 () Int)
(declare-fun x276 () Bool)
(declare-fun x182 () Bool)
(declare-fun x755 () Int)
(declare-fun x492 () Int)
(declare-fun x1048 () Bool)
(declare-fun x157 () Bool)
(declare-fun x88 () Int)
(declare-fun x1059 () Int)
(declare-fun x151 () Bool)
(declare-fun x843 () Int)
(declare-fun x919 () Int)
(declare-fun x667 () Int)
(declare-fun x1150 () Bool)
(declare-fun x612 () Int)
(declare-fun x28 () Int)
(declare-fun x918 () Bool)
(declare-fun x1158 () Bool)
(declare-fun x32 () Int)
(declare-fun x7 () Int)
(declare-fun x1198 () Int)
(declare-fun x1140 () Int)
(declare-fun x408 () Bool)
(declare-fun x68 () Bool)
(declare-fun x220 () Int)
(declare-fun x345 () Int)
(declare-fun x639 () Bool)
(declare-fun x336 () Bool)
(declare-fun x1079 () Int)
(declare-fun x454 () Bool)
(declare-fun x6 () Bool)
(declare-fun x1097 () Int)
(declare-fun x264 () Bool)
(declare-fun x1206 () Int)
(declare-fun x846 () Int)
(declare-fun x531 () Int)
(declare-fun x690 () Int)
(declare-fun x548 () Int)
(declare-fun x1214 () Int)
(declare-fun x167 () Int)
(declare-fun x812 () Bool)
(declare-fun x1036 () Int)
(declare-fun x948 () Bool)
(declare-fun x1102 () Int)
(declare-fun x188 () Int)
(declare-fun x1180 () Bool)
(declare-fun x828 () Int)
(declare-fun x114 () Bool)
(declare-fun x247 () Bool)
(declare-fun x681 () Bool)
(declare-fun x748 () Int)
(declare-fun x1148 () Int)
(declare-fun x352 () Int)
(declare-fun x382 () Int)
(declare-fun x541 () Int)
(declare-fun x197 () Int)
(declare-fun x100 () Bool)
(declare-fun x817 () Bool)
(declare-fun x399 () Int)
(declare-fun x411 () Int)
(declare-fun x801 () Int)
(declare-fun x305 () Bool)
(declare-fun x223 () Bool)
(declare-fun x829 () Int)
(declare-fun x881 () Int)
(declare-fun x963 () Int)
(declare-fun x1085 () Int)
(declare-fun x836 () Int)
(declare-fun x434 () Int)
(declare-fun x803 () Int)
(declare-fun x857 () Bool)
(declare-fun x236 () Int)
(declare-fun x589 () Bool)
(declare-fun x138 () Int)
(declare-fun x856 () Int)
(declare-fun x1081 () Bool)
(declare-fun x1095 () Int)
(declare-fun x804 () Int)
(declare-fun x105 (Int) Int)
(declare-fun x404 () Int)
(declare-fun x93 () Int)
(declare-fun x946 () Bool)
(declare-fun x47 () Int)
(declare-fun x405 () Int)
(declare-fun x1054 () Int)
(declare-fun x574 () Int)
(declare-fun x443 () Int)
(declare-fun x101 () Bool)
(declare-fun x1015 () Int)
(declare-fun x833 () Int)
(declare-fun x351 () Bool)
(declare-fun x653 () Int)
(declare-fun x1160 () Int)
(declare-fun x79 () Int)
(declare-fun x1182 () Int)
(declare-fun x602 () Int)
(declare-fun x468 () Int)
(declare-fun x312 () Int)
(declare-fun x357 () Int)
(declare-fun x945 () Int)
(declare-fun x823 () Int)
(declare-fun x520 () Int)
(declare-fun x71 () Int)
(declare-fun x984 () Int)
(declare-fun x920 () Bool)
(declare-fun x322 () Int)
(declare-fun x27 () Int)
(declare-fun x596 () Int)
(declare-fun x310 () Int)
(declare-fun x1132 () Int)
(declare-fun x183 () Int)
(declare-fun x307 () Bool)
(declare-fun x766 () Int)
(declare-fun x97 () Int)
(declare-fun x753 () Int)
(declare-fun x921 () Int)
(declare-fun x1162 () Int)
(declare-fun x444 () Int)
(declare-fun x463 () Int)
(declare-fun x43 () Int)
(declare-fun x999 () Bool)
(declare-fun x191 () Int)
(declare-fun x1219 () Int)
(declare-fun x25 () Int)
(declare-fun x994 () Int)
(declare-fun x716 () Bool)
(declare-fun x929 () Int)
(declare-fun x711 () Int)
(declare-fun x255 () Bool)
(declare-fun x359 () Int)
(declare-fun x877 () Bool)
(declare-fun x841 () Int)
(declare-fun x241 () Int)
(declare-fun x96 () Bool)
(declare-fun x1135 () Int)
(declare-fun x430 () Int)
(declare-fun x1153 () Int)
(declare-fun x861 () Int)
(declare-fun x889 () Int)
(declare-fun x273 () Int)
(declare-fun x536 (Int) Int)
(declare-fun x637 () Bool)
(declare-fun x977 () Int)
(declare-fun x850 () Int)
(declare-fun x10 () Int)
(declare-fun x678 () Bool)
(declare-fun x904 () Int)
(declare-fun x608 () Int)
(declare-fun x788 () Bool)
(declare-fun x580 () Int)
(declare-fun x480 () Int)
(declare-fun x1020 () Bool)
(declare-fun x80 () Int)
(declare-fun x769 () Int)
(declare-fun x763 () Int)
(declare-fun x448 () Int)
(declare-fun x499 () Int)
(declare-fun x422 () Int)
(declare-fun x175 () Bool)
(declare-fun x288 () Int)
(declare-fun x869 () Int)
(declare-fun x858 () Int)
(declare-fun x356 () Int)
(declare-fun x150 () Int)
(declare-fun x649 () Int)
(declare-fun x1073 () Int)
(declare-fun x718 () Int)
(declare-fun x491 (Int Int) Int)
(declare-fun x714 () Int)
(declare-fun x968 () Int)
(declare-fun x691 () Int)
(declare-fun x735 () Int)
(declare-fun x1165 () Int)
(declare-fun x535 () Int)
(declare-fun x628 () Int)
(declare-fun x1026 () Bool)
(declare-fun x952 () Bool)
(declare-fun x546 () Bool)
(declare-fun x211 () Bool)
(declare-fun x1023 () Int)
(declare-fun x159 () Int)
(declare-fun x487 () Int)
(declare-fun x474 () Int)
(declare-fun x453 () Int)
(declare-fun x498 () Int)
(declare-fun x360 () Int)
(declare-fun x418 () Bool)
(declare-fun x747 () Bool)
(declare-fun x738 () Int)
(declare-fun x636 () Int)
(declare-fun x112 () Bool)
(declare-fun x1163 () Bool)
(declare-fun x409 () Bool)
(declare-fun x896 () Int)
(declare-fun x1186 () Bool)
(declare-fun x160 () Int)
(declare-fun x181 () Int)
(declare-fun x1030 () Int)
(declare-fun x34 () Bool)
(declare-fun x677 () Int)
(declare-fun x761 () Int)
(declare-fun x1016 () Int)
(declare-fun x831 () Int)
(declare-fun x158 () Int)
(declare-fun x981 () Int)
(declare-fun x842 () Int)
(declare-fun x166 () Int)
(declare-fun x555 () Int)
(declare-fun x397 () Int)
(declare-fun x835 () Bool)
(declare-fun x1029 () Int)
(declare-fun x407 () Int)
(declare-fun x1028 () Int)
(declare-fun x1064 () Int)
(declare-fun x117 () Bool)
(declare-fun x532 () Int)
(declare-fun x594 (Int Int) Int)
(declare-fun x559 () Int)
(declare-fun x784 () Int)
(declare-fun x152 () Int)
(declare-fun x177 () Bool)
(declare-fun x303 () Int)
(declare-fun x1193 () Int)
(declare-fun x1209 () Bool)
(declare-fun x830 () Int)
(declare-fun x22 () Int)
(declare-fun x64 () Int)
(declare-fun x1208 () Bool)
(declare-fun x1176 () Int)
(declare-fun x1044 () Int)
(declare-fun x1068 () Int)
(declare-fun x1189 () Int)
(declare-fun x349 () Int)
(declare-fun x802 () Int)
(declare-fun x49 () Int)
(declare-fun x969 () Int)
(declare-fun x1014 () Int)
(declare-fun x274 () Bool)
(declare-fun x379 () Int)
(declare-fun x1013 () Int)
(declare-fun x200 () Bool)
(declare-fun x682 () Int)
(declare-fun x717 () Int)
(declare-fun x260 () Int)
(declare-fun x72 () Int)
(declare-fun x1045 () Int)
(declare-fun x363 () Int)
(declare-fun x1167 () Int)
(declare-fun x845 () Int)
(declare-fun x234 () Int)
(declare-fun x1007 () Bool)
(declare-fun x447 () Int)
(declare-fun x888 () Int)
(declare-fun x924 () Int)
(declare-fun x935 () Int)
(declare-fun x1106 () Int)
(declare-fun x139 () Int)
(declare-fun x789 () Bool)
(declare-fun x1055 () Int)
(declare-fun x76 () Int)
(declare-fun x206 () Bool)
(declare-fun x786 () Int)
(declare-fun x971 () Int)
(declare-fun x440 (Int) Int)
(declare-fun x878 () Bool)
(declare-fun x5 () Int)
(declare-fun x1110 () Int)
(declare-fun x562 () Int)
(declare-fun x163 () Int)
(declare-fun x854 () Int)
(declare-fun x876 () Int)
(declare-fun x154 () Int)
(declare-fun x654 () Bool)
(declare-fun x826 () Bool)
(declare-fun x507 () Int)
(declare-fun x109 () Bool)
(declare-fun x696 () Bool)
(declare-fun x610 () Int)
(declare-fun x1139 () Int)
(declare-fun x582 () Int)
(declare-fun x785 () Bool)
(declare-fun x8 () Int)
(declare-fun x124 () Int)
(declare-fun x949 () Bool)
(declare-fun x1112 () Int)
(declare-fun x488 () Bool)
(declare-fun x99 () Int)
(declare-fun x187 () Int)
(declare-fun x325 () Int)
(declare-fun x113 () Int)
(declare-fun x445 () Int)
(declare-fun x727 () Int)
(declare-fun x699 () Bool)
(declare-fun x807 () Bool)
(declare-fun x771 () Bool)
(declare-fun x420 () Int)
(declare-fun x756 () Int)
(declare-fun x686 () Int)
(declare-fun x295 () Bool)
(declare-fun x953 () Int)
(declare-fun x475 () Bool)
(declare-fun x457 () Int)
(declare-fun x527 () Int)
(declare-fun x1072 () Int)
(declare-fun x464 () Bool)
(declare-fun x1122 () Int)
(declare-fun x965 () Bool)
(declare-fun x123 () Int)
(declare-fun x909 () Int)
(declare-fun x732 () Int)
(declare-fun x997 () Int)
(declare-fun x523 () Int)
(declare-fun x638 () Int)
(declare-fun x301 () Int)
(declare-fun x450 () Int)
(declare-fun x956 () Int)
(declare-fun x238 () Int)
(declare-fun x708 () Int)
(declare-fun x1172 () Bool)
(declare-fun x886 () Int)
(declare-fun x78 () Int)
(declare-fun x81 () Int)
(declare-fun x116 () Bool)
(declare-fun x1151 () Int)
(declare-fun x989 () Int)
(declare-fun x242 () Int)
(declare-fun x725 () Bool)
(declare-fun x438 () Int)
(declare-fun x939 () Int)
(declare-fun x991 () Int)
(declare-fun x412 () Int)
(declare-fun x848 () Bool)
(declare-fun x705 () Int)
(declare-fun x1053 () Int)
(declare-fun x545 () Int)
(declare-fun x1096 () Int)
(declare-fun x42 () Int)
(declare-fun x107 () Int)
(declare-fun x762 () Int)
(declare-fun x75 () Int)
(declare-fun x490 () Int)
(declare-fun x613 () Int)
(declare-fun x1006 () Int)
(declare-fun x810 () Bool)
(declare-fun x1039 () Int)
(declare-fun x1027 () Int)
(declare-fun x483 () Bool)
(declare-fun x381 () Int)
(declare-fun x1212 () Bool)
(declare-fun x1107 () Bool)
(declare-fun x1159 () Bool)
(declare-fun x142 () Bool)
(declare-fun x1115 () Int)
(declare-fun x679 () Int)
(declare-fun x321 () Int)
(declare-fun x148 () Int)
(declare-fun x525 () Bool)
(declare-fun x172 () Bool)
(declare-fun x1129 () Int)
(declare-fun x65 () Int)
(declare-fun x847 () Int)
(declare-fun x701 () Int)
(declare-fun x917 () Int)
(declare-fun x1118 () Int)
(declare-fun x95 () Bool)
(declare-fun x170 () Int)
(declare-fun x476 () Int)
(declare-fun x832 () Int)
(declare-fun x1134 () Bool)
(declare-fun x1210 () Int)
(declare-fun x41 () Int)
(declare-fun x1031 () Int)
(declare-fun x324 () Bool)
(declare-fun x174 () Bool)
(declare-fun x1128 () Int)
(declare-fun x52 () Bool)
(declare-fun x575 () Bool)
(declare-fun x922 () Int)
(declare-fun x465 () Int)
(declare-fun x783 () Int)
(declare-fun x1087 () Int)
(declare-fun x720 () Int)
(declare-fun x1022 () Bool)
(declare-fun x470 () Bool)
(declare-fun x244 () Int)
(declare-fun x540 () Int)
(declare-fun x777 () Int)
(declare-fun x782 () Bool)
(declare-fun x890 () Bool)
(declare-fun x298 () Int)
(declare-fun x208 () Int)
(declare-fun x593 () Int)
(declare-fun x538 () Int)
(declare-fun x565 () Bool)
(declare-fun x192 () Bool)
(declare-fun x300 () Int)
(declare-fun x63 () Int)
(declare-fun x452 () Int)
(declare-fun x1067 () Bool)
(declare-fun x267 () Int)
(declare-fun x1109 () Int)
(declare-fun x697 () Bool)
(declare-fun x873 () Int)
(declare-fun x825 () Int)
(declare-fun x959 () Int)
(declare-fun x330 () Bool)
(declare-fun x190 () Int)
(declare-fun x798 () Int)
(declare-fun x669 () Bool)
(declare-fun x1043 () Int)
(declare-fun x62 () Bool)
(declare-fun x632 () Int)
(declare-fun x11 () Int)
(declare-fun x719 () Int)
(declare-fun x1164 () Int)
(declare-fun x821 () Int)
(declare-fun x1040 () Int)
(declare-fun x860 () Int)
(declare-fun x980 () Bool)
(declare-fun x710 () Bool)
(declare-fun x424 () Bool)
(declare-fun x1200 () Int)
(declare-fun x898 () Int)
(declare-fun x573 () Int)
(declare-fun x350 () Int)
(declare-fun x1190 () Bool)
(declare-fun x13 () Int)
(declare-fun x627 () Int)
(declare-fun x1101 () Int)
(declare-fun x249 () Int)
(declare-fun x951 () Int)
(declare-fun x37 () Int)
(declare-fun x439 () Int)
(declare-fun x87 () Int)
(declare-fun x153 () Int)
(declare-fun x132 () Int)
(declare-fun x942 () Int)
(declare-fun x944 () Int)
(declare-fun x1003 () Int)
(declare-fun x456 () Bool)
(declare-fun x280 () Int)
(declare-fun x1071 () Int)
(declare-fun x1061 () Bool)
(declare-fun x248 () Bool)
(declare-fun x130 () Int)
(declare-fun x837 () Int)
(declare-fun x1 () Int)
(declare-fun x543 () Int)
(declare-fun x733 () Bool)
(declare-fun x467 () Int)
(declare-fun x111 () Bool)
(declare-fun x739 () Int)
(declare-fun x993 () Int)
(declare-fun x819 () Bool)
(declare-fun x257 () Int)
(declare-fun x626 () Int)
(declare-fun x1117 () Int)
(declare-fun x500 () Int)
(declare-fun x1035 () Int)
(declare-fun x611 () Int)
(declare-fun x741 () Bool)
(declare-fun x1047 () Int)
(declare-fun x103 () Int)
(declare-fun x21 () Int)
(declare-fun x799 () Bool)
(declare-fun x129 () Int)
(declare-fun x614 () Bool)
(declare-fun x1121 () Bool)
(declare-fun x687 () Int)
(declare-fun x33 () Bool)
(declare-fun x329 () Bool)
(declare-fun x386 () Int)
(declare-fun x36 () Int)
(declare-fun x120 () Int)
(declare-fun x31 () Int)
(declare-fun x827 () Bool)
(declare-fun x285 () Int)
(declare-fun x44 () Int)
(declare-fun x674 () Int)
(declare-fun x449 () Int)
(declare-fun x35 () Bool)
(declare-fun x144 () Int)
(declare-fun x595 () Bool)
(declare-fun x657 () Int)
(declare-fun x853 () Bool)
(declare-fun x749 () Int)
(declare-fun x137 () Bool)
(declare-fun x308 () Int)
(declare-fun x77 () Bool)
(declare-fun x816 () Int)
(declare-fun x776 () Int)
(declare-fun x1021 () Int)
(declare-fun x1025 () Bool)
(declare-fun x1077 () Bool)
(declare-fun x266 () Bool)
(declare-fun x646 () Int)
(declare-fun x834 () Bool)
(declare-fun x629 () Int)
(declare-fun x1149 () Bool)
(declare-fun x585 () Int)
(declare-fun x964 () Int)
(declare-fun x560 () Bool)
(declare-fun x787 () Int)
(declare-fun x519 () Bool)
(declare-fun x1063 () Int)
(declare-fun x176 () Int)
(declare-fun x597 () Int)
(declare-fun x1220 () Bool)
(declare-fun x1205 () Int)
(declare-fun x209 () Int)
(declare-fun x692 () Bool)
(declare-fun x184 () Int)
(declare-fun x402 () Int)
(declare-fun x279 () Int)
(declare-fun x398 () Int)
(declare-fun x1038 () Int)
(declare-fun x571 () Int)
(declare-fun x630 () Bool)
(declare-fun x1194 () Int)
(declare-fun x503 () Int)
(declare-fun x688 () Int)
(declare-fun x517 () Int)
(declare-fun x880 () Bool)
(declare-fun x533 () Bool)
(declare-fun x516 () Int)
(declare-fun x928 () Int)
(declare-fun x568 () Int)
(declare-fun x413 () Bool)
(declare-fun x383 () Bool)
(declare-fun x561 () Int)
(declare-fun x650 () Bool)
(declare-fun x436 () Int)
(declare-fun x269 () Int)
(declare-fun x375 () Bool)
(declare-fun x740 () Bool)
(declare-fun x218 () Bool)
(declare-fun x1213 () Int)
(declare-fun x967 () Int)
(declare-fun x1199 () Bool)
(declare-fun x745 () Int)
(declare-fun x1070 () Bool)
(declare-fun x659 (Int Int) Int)
(declare-fun x1127 () Int)
(declare-fun x770 () Bool)
(declare-fun x670 () Bool)
(declare-fun x318 () Bool)
(declare-fun x193 () Bool)
(declare-fun x230 () Int)
(declare-fun x380 () Int)
(declare-fun x40 () Int)
(declare-fun x70 () Int)
(declare-fun x987 () Bool)
(declare-fun x290 () Int)
(declare-fun x721 () Int)
(declare-fun x726 () Bool)
(declare-fun x1094 () Int)
(declare-fun x775 () Int)
(declare-fun x1082 () Int)
(declare-fun x1192 () Bool)
(declare-fun x1092 () Int)
(declare-fun x268 () Int)
(declare-fun x326 () Int)
(declare-fun x607 () Int)
(declare-fun x319 () Int)
(declare-fun x203 () Int)
(declare-fun x1142 () Int)
(declare-fun x66 () Int)
(declare-fun x683 () Int)
(declare-fun x204 () Int)
(declare-fun x227 () Int)
(declare-fun x115 () Int)
(declare-fun x384 () Int)
(declare-fun x347 () Bool)
(declare-fun x122 () Int)
(declare-fun x180 () Bool)
(declare-fun x250 () Int)
(declare-fun x600 () Int)
(declare-fun x641 () Int)
(declare-fun x866 () Bool)
(declare-fun x642 () Int)
(declare-fun x631 () Bool)
(declare-fun x729 (Int) Int)
(declare-fun x879 () Bool)
(declare-fun x648 () Int)
(declare-fun x82 () Int)
(declare-fun x966 () Int)
(declare-fun x795 () Int)
(declare-fun x224 () Bool)
(declare-fun x526 () Int)
(declare-fun x592 () Int)
(declare-fun x707 () Bool)
(declare-fun x283 () Int)
(declare-fun x328 () Bool)
(declare-fun x455 () Int)
(declare-fun x426 () Bool)
(declare-fun x365 () Bool)
(declare-fun x640 () Int)
(declare-fun x17 () Int)
(declare-fun x518 () Int)
(declare-fun x89 () Int)
(declare-fun x988 () Int)
(declare-fun x1058 () Int)
(declare-fun x652 () Int)
(declare-fun x48 () Int)
(declare-fun x26 () Bool)
(declare-fun x141 () Bool)
(declare-fun x1152 () Bool)
(declare-fun x579 () Int)
(declare-fun x1185 () Bool)
(declare-fun x1032 () Int)
(declare-fun x309 () Bool)
(declare-fun x213 () Int)
(declare-fun x1012 () Int)
(declare-fun x522 () Int)
(declare-fun x342 () Int)
(declare-fun x286 () Int)
(declare-fun x570 () Int)
(declare-fun x225 () Bool)
(declare-fun x1166 () Int)
(declare-fun x323 () Bool)
(declare-fun x693 () Int)
(declare-fun x934 () Bool)
(declare-fun x656 () Bool)
(declare-fun x147 () Int)
(declare-fun x572 () Int)
(declare-fun x39 () Int)
(declare-fun x867 () Int)
(declare-fun x501 () Int)
(declare-fun x292 () Int)
(declare-fun x1137 () Bool)
(declare-fun x1103 () Bool)
(declare-fun x237 () Int)
(declare-fun x514 () Int)
(declare-fun x272 () Bool)
(declare-fun x346 () Int)
(declare-fun x344 () Int)
(declare-fun x955 () Bool)
(declare-fun x759 () Int)
(declare-fun x633 () Bool)
(declare-fun x106 () Int)
(declare-fun x339 () Int)
(declare-fun x947 () Int)
(declare-fun x990 () Int)
(declare-fun x410 () Bool)
(declare-fun x1154 () Int)
(declare-fun x887 () Int)
(declare-fun x620 () Int)
(declare-fun x1024 () Int)
(declare-fun x121 () Int)
(declare-fun x442 () Int)
(declare-fun x1178 () Int)
(declare-fun x1221 () Bool)
(declare-fun x108 () Int)
(declare-fun x104 () Int)
(declare-fun x400 () Int)
(declare-fun x985 () Int)
(declare-fun x314 () Int)
(declare-fun x435 () Int)
(declare-fun x431 () Int)
(declare-fun x1057 () Bool)
(declare-fun x569 () Bool)
(declare-fun x173 () Int)
(declare-fun x1105 () Int)
(declare-fun x215 () Int)
(declare-fun x1131 () Bool)
(declare-fun x509 () Int)
(declare-fun x428 () Int)
(declare-fun x9 () Bool)
(declare-fun x54 () Int)
(declare-fun x1217 () Int)
(declare-fun x1201 () Int)
(declare-fun x1138 () Int)
(declare-fun x1119 () Int)
(declare-fun x1174 () Int)
(declare-fun x1018 () Int)
(declare-fun x1204 () Bool)
(declare-fun x84 () Int)
(declare-fun x156 () Int)
(declare-fun x127 () Int)
(declare-fun x50 () Int)
(declare-fun x377 () Int)
(declare-fun x715 () Bool)
(declare-fun x772 () Bool)
(declare-fun x417 () Int)
(declare-fun x743 () Int)
(declare-fun x606 () Int)
(declare-fun x56 () Int)
(declare-fun x1216 () Bool)
(declare-fun x155 () Bool)
(declare-fun x598 () Bool)
(declare-fun x1005 () Int)
(declare-fun x306 () Int)
(declare-fun x975 () Bool)
(declare-fun x1113 () Int)
(declare-fun x644 () Bool)
(declare-fun x458 () Int)
(declare-fun x168 () Bool)
(declare-fun x512 () Int)
(declare-fun x840 () Int)
(declare-fun x1062 () Int)
(declare-fun x706 () Int)
(declare-fun x1188 () Int)
(declare-fun x1168 () Int)
(declare-fun x1169 () Int)
(declare-fun x623 () Int)
(declare-fun x660 () Int)
(declare-fun x232 () Int)
(declare-fun x622 () Int)
(declare-fun x668 () Int)
(declare-fun x671 () Int)
(declare-fun x563 () Int)
(declare-fun x936 () Int)
(declare-fun x201 () Bool)
(declare-fun x542 () Int)
(declare-fun x664 () Int)
(declare-fun x1184 () Int)
(declare-fun x1207 () Int)
(declare-fun x811 () Int)
(declare-fun x287 () Int)
(declare-fun x165 () Bool)
(declare-fun x393 () Bool)
(declare-fun x53 () Bool)
(declare-fun x864 () Int)
(declare-fun x983 () Bool)
(declare-fun x550 () Bool)
(declare-fun x913 () Int)
(declare-fun x296 () Int)
(declare-fun x793 () Int)
(declare-fun x818 () Bool)
(declare-fun x212 () Bool)
(declare-fun x673 () Bool)
(declare-fun x394 () Int)
(declare-fun x813 () Bool)
(declare-fun x239 () Int)
(declare-fun x1049 () Int)
(declare-fun x16 () Bool)
(declare-fun x277 () Int)
(declare-fun x581 () Bool)
(declare-fun x437 () Bool)
(declare-fun x634 () Bool)
(declare-fun x427 () Int)
(declare-fun x85 () Int)
(declare-fun x931 () Int)
(declare-fun x169 () Int)
(declare-fun x481 () Int)
(declare-fun x757 () Int)
(declare-fun x553 () Int)
(declare-fun x730 () Bool)
(declare-fun x385 (Int Int) Int)
(declare-fun x1090 () Int)
(declare-fun x844 () Bool)
(declare-fun x317 () Int)
(declare-fun x460 () Int)
(declare-fun x1076 () Int)
(declare-fun x3 () Bool)
(declare-fun x221 () Int)
(declare-fun x1147 () Int)
(declare-fun x992 () Int)
(declare-fun x885 () Int)
(declare-fun x960 () Bool)
(declare-fun x251 () Int)
(declare-fun x313 () Int)
(declare-fun x91 () Int)
(declare-fun x1019 () Bool)
(declare-fun x1074 () Int)
(declare-fun x870 () Int)
(declare-fun x1104 () Bool)
(declare-fun x751 () Int)
(declare-fun x943 () Bool)
(declare-fun x254 () Bool)
(declare-fun x862 () Int)
(declare-fun x259 () Int)
(declare-fun x1010 () Int)
(declare-fun x1004 () Int)
(declare-fun x20 () Bool)
(declare-fun x226 () Int)
(declare-fun x940 () Int)
(declare-fun x510 () Int)
(declare-fun x932 () Int)
(declare-fun x557 () Bool)
(declare-fun x416 () Int)
(declare-fun x1177 () Bool)
(declare-fun x302 () Bool)
(declare-fun x1050 (Int) Int)
(declare-fun x1196 () Int)
(declare-fun x603 () Int)
(declare-fun x390 () Int)
(declare-fun x537 () Int)
(declare-fun x143 () Bool)
(declare-fun x391 () Int)
(declare-fun x90 () Bool)
(declare-fun x996 () Int)
(declare-fun x702 () Int)
(declare-fun x883 () Int)
(declare-fun x703 () Int)
(declare-fun x723 () Bool)
(declare-fun x764 () Int)
(declare-fun x1120 () Int)
(declare-fun x1133 () Bool)
(declare-fun x23 () Int)
(declare-fun x773 () Int)
(declare-fun x146 () Bool)
(declare-fun x14 () Int)
(declare-fun x689 () Int)
(declare-fun x1000 () Int)
(declare-fun x995 () Bool)
(declare-fun x1114 () Bool)
(declare-fun x905 () Bool)
(declare-fun x695 () Int)
(declare-fun x502 () Int)
(declare-fun x528 () Bool)
(declare-fun x549 () Int)
(declare-fun x551 (Int) Int)
(declare-fun x493 () Int)
(declare-fun x348 () Int)
(declare-fun x916 () Int)
(declare-fun x297 () Bool)
(declare-fun x128 () Bool)
(declare-fun x925 () Int)
(declare-fun x270 () Int)
(declare-fun x278 () Int)
(declare-fun x957 () Int)
(declare-fun x2 () Int)
(declare-fun x355 () Int)
(declare-fun x55 () Int)
(declare-fun x822 () Int)
(declare-fun x911 () Int)
(declare-fun x281 () Int)
(declare-fun x46 () Int)
(declare-fun x722 () Int)
(declare-fun x1195 () Int)
(declare-fun x171 () Int)
(declare-fun x403 () Int)
(declare-fun x421 () Bool)
(declare-fun x401 () Bool)
(declare-fun x914 () Int)
(declare-fun x511 () Int)
(declare-fun x937 () Int)
(declare-fun x61 () Int)
(declare-fun x1066 () Int)
(declare-fun x616 () Bool)
(declare-fun x805 () Int)
(declare-fun x1136 () Bool)
(declare-fun x609 () Int)
(declare-fun x189 () Int)
(declare-fun x863 () Int)
(declare-fun x547 () Int)
(declare-fun x12 () Bool)
(declare-fun x578 () Int)
(declare-fun x495 () Int)
(declare-fun x486 () Int)
(declare-fun x1111 () Bool)
(declare-fun x1083 () Int)
(declare-fun x1157 () Bool)
(declare-fun x240 () Int)
(declare-fun x752 () Int)
(declare-fun x587 () Int)
(declare-fun x228 () Int)
(declare-fun x972 () Int)
(declare-fun x961 () Int)
(declare-fun x256 () Int)
(declare-fun x1203 () Int)
(declare-fun x903 () Bool)
(declare-fun x118 () Bool)
(declare-fun x974 () Bool)
(declare-fun x1011 () Int)
(declare-fun x315 () Int)
(declare-fun x461 () Int)
(declare-fun x207 () Int)
(declare-fun x556 () Int)
(declare-fun x246 () Bool)
(declare-fun x261 () Int)
(declare-fun x938 () Bool)
(declare-fun x432 () Int)
(declare-fun x661 () Int)
(declare-fun x369 () Int)
(declare-fun x1146 () Int)
(declare-fun x496 () Bool)
(declare-fun x1211 () Int)
(declare-fun x214 () Int)
(declare-fun x387 () Int)
(declare-fun x140 () Int)
(declare-fun x910 () Int)
(declare-fun x1175 () Int)
(declare-fun x396 () Bool)
(declare-fun x882 () Int)
(declare-fun x1130 () Int)
(declare-fun x196 () Bool)
(declare-fun x472 () Int)
(declare-fun x378 () Int)
(declare-fun x529 () Int)
(declare-fun x684 () Int)
(declare-fun x133 () Bool)
(declare-fun x1089 () Bool)
(declare-fun x506 () Int)
(declare-fun x462 () Int)
(declare-fun x736 () Int)
(declare-fun x94 () Int)
(declare-fun x136 (Int) Int)
(declare-fun x941 () Int)
(declare-fun x235 () Bool)
(declare-fun x1056 () Int)
(declare-fun x894 () Bool)
(declare-fun x370 () Int)
(define-fun x624 ((x1124 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x1124) (>= x1124 0)) x1124 (- x1124 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x1215 ((x1124 Int)) Int (ite (and (< x1124 0) (>= x1124 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x1124 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1124))
(define-fun x1161 ((x311 Int)) Bool (and (>= x311 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x311)))
(define-fun x354 ((x311 Int)) Bool (and (= (x594 x311 115792089237316195423570985008687907853269984665640564039457584007913129639935) x311) (= (x594 115792089237316195423570985008687907853269984665640564039457584007913129639935 x311) x311)))
(define-fun x900 ((x311 Int)) Bool (and (= 0 (x594 x311 0)) (= (x594 0 x311) 0)))
(define-fun x371 ((x311 Int)) Bool (= (x594 x311 x311) x311))
(define-fun x73 ((x311 Int)) Bool (and (x371 x311) (x354 x311) (x900 x311)))
(define-fun x731 ((x311 Int) (x768 Int)) Bool (= (x594 x311 x768) (x594 x768 x311)))
(define-fun x615 ((x311 Int) (x768 Int)) Bool (and (=> (>= x311 0) (>= x311 (x594 x311 x768))) (<= 0 (x594 x311 x768)) (=> (>= x768 0) (<= (x594 x311 x768) x768))))
(define-fun x558 ((x311 Int) (x768 Int)) Bool (and (x615 x311 x768) (x731 x311 x768)))
(define-fun x202 ((x311 Int)) Bool (and (= (x491 115792089237316195423570985008687907853269984665640564039457584007913129639935 x311) (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x311)) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x311) (x491 x311 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x982 ((x311 Int)) Bool (and (= (x491 x311 0) x311) (= (x491 0 x311) x311)))
(define-fun x851 ((x311 Int)) Bool (= (x491 x311 x311) 0))
(define-fun x700 ((x311 Int)) Bool (and (x202 x311) (x982 x311) (x851 x311)))
(define-fun x505 ((x311 Int) (x768 Int)) Bool (= (x491 x311 x768) (x491 x768 x311)))
(define-fun x441 ((x311 Int) (x768 Int)) Bool (and (>= (x491 x311 x768) 0) (<= (x491 x311 x768) (+ x768 x311))))
(define-fun x1042 ((x311 Int) (x768 Int)) Bool (and (x505 x311 x768) (x441 x311 x768)))
(define-fun x871 ((x311 Int)) Bool (and (= (x385 115792089237316195423570985008687907853269984665640564039457584007913129639935 x311) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x385 x311 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x479 ((x311 Int)) Bool (and (= (x385 0 x311) x311) (= x311 (x385 x311 0))))
(define-fun x358 ((x311 Int)) Bool (= x311 (x385 x311 x311)))
(define-fun x874 ((x311 Int)) Bool (and (x479 x311) (x358 x311) (x871 x311)))
(define-fun x635 ((x311 Int) (x768 Int)) Bool (= (x385 x311 x768) (x385 x768 x311)))
(define-fun x29 ((x311 Int) (x768 Int)) Bool (and (<= (x385 x311 x768) (+ x768 x311)) (=> (<= 0 x768) (<= x768 (x385 x311 x768))) (=> (<= 0 x311) (<= x311 (x385 x311 x768)))))
(define-fun x1170 ((x311 Int) (x768 Int)) Bool (and (x29 x311 x768) (x635 x311 x768)))
(define-fun x388 ((x311 Int)) Bool (= (mod x311 79228162514264337593543950336) (x594 x311 79228162514264337593543950335)))
(define-fun x1108 ((x311 Int)) Bool (and (x388 x311) (x558 x311 79228162514264337593543950335)))
(define-fun x485 ((x311 Int)) Bool (= (+ (mod x311 79228162514264337593543950336) (x594 x311 6277101735386680763835789423128438253588091106870490562560)) (mod x311 6277101735386680763835789423207666416102355444464034512896)))
(define-fun x1075 ((x311 Int)) Bool (and (x485 x311) (x558 x311 6277101735386680763835789423128438253588091106870490562560)))
(define-fun x98 ((x311 Int)) Bool (= (x594 x311 65535) (mod x311 65536)))
(define-fun x868 ((x311 Int)) Bool (and (x558 x311 65535) (x98 x311)))
(define-fun x185 ((x311 Int)) Bool (= (+ (mod x311 65536) (x594 x311 5192296858534827628530496329154560)) (mod x311 5192296858534827628530496329220096)))
(define-fun x373 ((x311 Int)) Bool (and (x185 x311) (x558 x311 5192296858534827628530496329154560)))
(define-fun x663 ((x311 Int)) Bool (= (mod x311 411376139330301510538742295639337626245683966408394965837152256) (+ (mod x311 5192296858534827628530496329220096) (x594 x311 411376139330301510538742295634145329387149138779864469507932160))))
(define-fun x252 ((x311 Int)) Bool (and (x558 x311 411376139330301510538742295634145329387149138779864469507932160) (x663 x311)))
(define-fun x471 ((x311 Int)) Bool (= (mod x311 26959946667150639794667015087019630673637144422540572481103610249216) (+ (mod x311 411376139330301510538742295639337626245683966408394965837152256) (x594 x311 26959535291011309493156476344723991336010898738574164086137773096960))))
(define-fun x125 ((x311 Int)) Bool (and (x471 x311) (x558 x311 26959535291011309493156476344723991336010898738574164086137773096960)))
(define-fun x1080 ((x311 Int)) Bool (= (mod x311 1766847064778384329583297500742918515827483896875618958121606201292619776) (+ (mod x311 26959946667150639794667015087019630673637144422540572481103610249216) (x594 x311 1766820104831717178943502833727831496196810259731196417549125097682370560))))
(define-fun x1051 ((x311 Int)) Bool (and (x1080 x311) (x558 x311 1766820104831717178943502833727831496196810259731196417549125097682370560)))
(define-fun x478 ((x780 Int)) Int 0)
(define-fun x970 ((x780 Int)) Int 0)
(define-fun x1143 ((x780 Int)) Int 0)
(define-fun x51 ((x780 Int)) Int 0)
(define-fun x954 ((x780 Int)) Int 0)
(define-fun x1086 ((x780 Int)) Int 0)
(define-fun x958 ((x780 Int)) Int 0)
(define-fun x376 ((x780 Int)) Int 0)
(define-fun x210 ((x780 Int)) Int 0)
(define-fun x895 ((x780 Int)) Int 0)
(define-fun x617 ((x780 Int)) Int 0)
(define-fun x423 ((x780 Int)) Int 0)
(define-fun x779 ((x780 Int)) Int 0)
(define-fun x4 ((x780 Int)) Int 0)
(define-fun x1098 ((x780 Int)) Int 0)
(define-fun x591 ((x780 Int)) Int 0)
(define-fun x216 ((x780 Int)) Int 0)
(define-fun x742 ((x780 Int)) Int 0)
(define-fun x1126 ((x780 Int)) Int 0)
(define-fun x666 ((x780 Int)) Int 0)
(define-fun x508 ((x780 Int)) Int 0)
(define-fun x263 ((x780 Int)) Int 0)
(define-fun x429 ((x780 Int)) Int 0)
(define-fun x907 ((x780 Int)) Int 0)
(define-fun x902 ((x780 Int)) Int 0)
(define-fun x746 ((x780 Int)) Int 0)
(define-fun x1197 ((x780 Int)) Int 0)
(define-fun x1171 ((x780 Int)) Int 0)
(define-fun x1116 ((x780 Int)) Int 0)
(define-fun x962 ((x780 Int)) Int 0)
(define-fun x588 ((x780 Int)) Int 0)
(define-fun x294 ((x780 Int)) Int 0)
(define-fun x625 ((x780 Int)) Int 0)
(define-fun x552 ((x780 Int)) Int 0)
(define-fun x933 ((x780 Int)) Int 0)
(define-fun x564 ((x780 Int)) Int 0)
(define-fun x794 ((x780 Int)) Int 0)
(define-fun x698 ((x780 Int)) Int 0)
(define-fun x915 ((x780 Int)) Int 0)
(define-fun x1002 ((x780 Int)) Int 0)
(define-fun x926 ((x780 Int)) Int 0)
(define-fun x758 ((x780 Int)) Int 0)
(define-fun x389 ((x780 Int)) Int 0)
(define-fun x724 ((x780 Int)) Int 0)
(define-fun x1141 ((x780 Int)) Int 0)
(define-fun x676 ((x780 Int)) Int 0)
(define-fun x728 ((x780 Int)) Int 0)
(define-fun x754 ((x780 Int)) Int (ite (= x780 128) 58712522155081554758111416936196854083347032101528093538124555458258380259328 (x1143 x780)))
(define-fun x1191 ((x780 Int)) Int (ite (= 132 x780) x786 (x754 x780)))
(define-fun x477 ((x780 Int)) Int (ite (= x780 0) x414 (x105 x780)))
(define-fun x1017 ((x780 Int)) Int (ite (and (> 160 x780) (>= x780 128)) (x477 (- x780 128)) (x478 x780)))
(define-fun x1202 ((x780 Int)) Int 0)
(define-fun x289 ((x780 Int)) Int (ite (= 704 x780) 58712522155081554758111416936196854083347032101528093538124555458258380259328 (x429 x780)))
(define-fun x406 ((x780 Int)) Int (ite (= 708 x780) x283 (x289 x780)))
(define-fun x482 ((x780 Int)) Int (ite (= x780 704) x163 (x406 x780)))
(define-fun x865 ((x780 Int)) Int (ite (= 736 x780) x804 (x482 x780)))
(define-fun x621 ((x780 Int)) Int (ite (= x780 768) x507 (x865 x780)))
(define-fun x367 ((x780 Int)) Int 0)
(define-fun x567 ((x780 Int)) Int (ite (= x780 128) 58712522155081554758111416936196854083347032101528093538124555458258380259328 (x51 x780)))
(define-fun x791 ((x780 Int)) Int (ite (= 132 x780) x886 (x567 x780)))
(define-fun x912 ((x780 Int)) Int (ite (= x780 0) x875 (x262 x780)))
(define-fun x198 ((x780 Int)) Int (ite (and (< x780 160) (<= 128 x780)) (x912 (- x780 128)) (x970 x780)))
(define-fun x320 ((x780 Int)) Int 0)
(define-fun x366 ((x780 Int)) Int (ite (= x780 704) 58712522155081554758111416936196854083347032101528093538124555458258380259328 (x907 x780)))
(define-fun x901 ((x780 Int)) Int (ite (= x780 708) x473 (x366 x780)))
(define-fun x494 ((x780 Int)) Int (ite (= x780 704) x553 (x901 x780)))
(define-fun x645 ((x780 Int)) Int (ite (= x780 736) x352 (x494 x780)))
(define-fun x119 ((x780 Int)) Int (ite (= x780 768) x1024 (x645 x780)))
(define-fun x790 ((x780 Int)) Int (ite (= x780 0) x163 (x536 x780)))
(define-fun x809 ((x780 Int)) Int (ite (and (<= 704 x780) (> 736 x780)) (x790 (- x780 704)) (x508 x780)))
(define-fun x1144 ((x780 Int)) Int (ite (= 0 x780) x553 (x729 x780)))
(define-fun x712 ((x780 Int)) Int (ite (and (> 736 x780) (<= 704 x780)) (x1144 (- x780 704)) (x263 x780)))
(define-fun x672 ((x780 Int)) Int (ite (= 992 x780) x523 (x1141 x780)))
(define-fun x60 ((x780 Int)) Int (ite (= 1024 x780) x832 (x672 x780)))
(define-fun x979 ((x780 Int)) Int (ite (= x780 1056) x801 (x60 x780)))
(define-fun x392 ((x780 Int)) Int (ite (= 1088 x780) x260 (x979 x780)))
(define-fun x253 ((x780 Int)) Int (ite (= 1120 x780) x638 (x392 x780)))
(define-fun x15 ((x780 Int)) Int (ite (= 1152 x780) x526 (x253 x780)))
(define-fun x796 ((x780 Int)) Int (ite (= x780 1184) x480 (x15 x780)))
(define-fun x986 ((x780 Int)) Int (ite (= x780 1216) x514 (x796 x780)))
(define-fun x1084 ((x780 Int)) Int (ite (= x780 1248) x292 (x986 x780)))
(define-fun x1145 ((x780 Int)) Int 0)
(define-fun x271 ((x780 Int)) Int (ite (= x780 992) x511 (x676 x780)))
(define-fun x131 ((x780 Int)) Int (ite (= x780 1024) x402 (x271 x780)))
(define-fun x1008 ((x780 Int)) Int (ite (= 1056 x780) x110 (x131 x780)))
(define-fun x662 ((x780 Int)) Int (ite (= x780 1088) x439 (x1008 x780)))
(define-fun x451 ((x780 Int)) Int (ite (= 1120 x780) x425 (x662 x780)))
(define-fun x459 ((x780 Int)) Int (ite (= x780 1152) x720 (x451 x780)))
(define-fun x855 ((x780 Int)) Int (ite (= 1184 x780) x92 (x459 x780)))
(define-fun x694 ((x780 Int)) Int (ite (= 1216 x780) x840 (x855 x780)))
(define-fun x765 ((x780 Int)) Int (ite (= x780 1248) x445 (x694 x780)))
(define-fun x30 ((x780 Int)) Int 0)
(assert (= (and x174 (not x1199)) x918))
(assert (x1161 x86))
(assert (x1161 x36))
(assert (x1161 x229))
(assert (= x62 (=> (and (and (= x772 (< x278 x228)) (= x228 (x624 (+ x679 x317))) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x679 x317)))) (or (and (and (= x391 x613) (= (* 100000000000000000000000 x242) x613) (= x379 27) (= x228 x804) (= x391 x507) (= x829 4)) x772) (and (and (= x104 x507) (= x977 x104) (= 27 x300) (= x977 (* 100000000000000000000000 x242)) (= x278 x804) (= x1156 4)) (not x772)))) x1001)))
(assert (x1161 x132))
(assert (x362 411376139330301510538742295634145329387149138779864469507932160))
(assert (x1161 x816))
(assert (x1161 x228))
(assert (x700 x1140))
(assert (x1161 x959))
(assert (= (x551 1461501637330902918203684832716283019655932542975) 0))
(assert (x1161 x928))
(assert (x1161 x544))
(assert (x1161 x498))
(assert (x1161 x566))
(assert (x700 x287))
(assert (x868 x372))
(assert (=> (= 0 x997) (= (div x229 x997) 0)))
(assert (= x95 (and x162 x489)))
(assert (x1161 x1160))
(assert (x1161 x23))
(assert (x1161 x1030))
(assert (x1161 x887))
(assert (= (and x1190 x799) x960))
(assert (= x740 (and x368 x866)))
(assert (x1161 x191))
(assert (x1161 x120))
(assert (= (=> (= (> x997 x31) x276) (and (=> (and x276 (and (and (= x162 (= 0 x1154)) (= 1000000000000000000000000000 x647) (= x1148 (mod (* x31 x455) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x1154 (x1215 (- x998 (mod (ite (< x988 x1148) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= x988 (mod (* x31 x455) 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= x998 (x1215 (- x988 x1148)))) (or (and x162 (and (= x1109 x270) (= (div x1148 1000000000000000000000000000) x1109))) (and (not x162) (and (>= 999999999999999999999999999 x1154) (= x653 (x624 (+ x1120 x64))) (= x1038 (x1215 (- x1148 x1046))) (= x64 (mod (* x1132 862718293348820473429344482784628181556388621521298319395315527974912) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x1215 (- x1154 (mod (ite (> x1046 x1148) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x1132) (= x641 (mod (* 15501966263465142598656971426345627788199674109747006013765225610400761231029 x653) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x270 x641) (= x1046 (mod (* x31 x455) 1000000000000000000000000000)) (= x1120 (div x1038 134217728))))))) x336) (=> (and (not x276) (and (or (and x1136 (and (= (div x732 1000000000000000000000000000) x522) (= x234 x522))) (and (not x1136) (and (= (x1215 (- x732 x778)) x124) (= (mod (* 862718293348820473429344482784628181556388621521298319395315527974912 x887) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x978) (= x1088 (x624 (+ x612 x978))) (= (div x124 134217728) x612) (= (mod (* 15501966263465142598656971426345627788199674109747006013765225610400761231029 x1088) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x939) (= x778 (mod (* x997 x455) 1000000000000000000000000000)) (<= x1211 999999999999999999999999999) (= x887 (x1215 (- x1211 (mod (ite (> x778 x732) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= x939 x234)))) (and (= x203 1000000000000000000000000000) (not (> x381 x31)) (= (mod (* x997 x455) 115792089237316195423570985008687907853269984665640564039457584007913129639935) x1003) (= x732 (mod (* x997 x455) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x542 (x1215 (- x1003 x732))) (= (= 0 x1211) x1136) (= (x1215 (- x31 x997)) x381) (= x1211 (x1215 (- x542 (mod (ite (< x1003 x732) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))) x1208))) x211))
(assert (x1161 x79))
(assert (= x368 (and (not x810) x1157)))
(assert (x362 1000000000000000000000000000))
(assert (x1161 x420))
(assert (x373 x867))
(assert (x1161 x468))
(assert (x874 x332))
(assert (= (and x1199 x174) x328))
(assert (= (=> (and (and (= x606 (x624 (+ x350 x234))) (= x1190 (= x1155 0)) (= x55 (mod (* x997 x888) 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (mod (* x888 x997) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x291) (= (x1215 (- x55 x291)) x561) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x350 x234))) (= x1198 1000000000000000000000000000) (= x1155 (x1215 (- x561 (mod (ite (> x291 x55) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (or (and (not x1190) (and (>= 999999999999999999999999999 x1155) (= (mod (* 15501966263465142598656971426345627788199674109747006013765225610400761231029 x159) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x520) (= x169 (mod (* 862718293348820473429344482784628181556388621521298319395315527974912 x660) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x596 x520) (= x660 (x1215 (- x1155 (mod (ite (> x377 x291) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (mod (* x997 x888) 1000000000000000000000000000) x377) (= (x1215 (- x291 x377)) x286) (= x994 (div x286 134217728)) (= x159 (x624 (+ x994 x169))))) (and (and (= x1083 x596) (= x1083 (div x291 1000000000000000000000000000))) x1190))) x581) x1208))
(assert (x1161 x127))
(assert (x1161 x31))
(assert (= x34 (and x539 x57)))
(assert (x1161 x431))
(assert (=> (= 0 x1125) (= 0 (div x719 x1125))))
(assert (x1161 x783))
(assert (= (=> (and (or (and x1159 (and (= x872 x609) (= x609 (div x950 1000000000000000000000000000)))) (and (and (= x450 (mod (* x984 x37) 1000000000000000000000000000)) (= x872 x447) (= x342 (x624 (+ x683 x170))) (= x447 (mod (* x342 15501966263465142598656971426345627788199674109747006013765225610400761231029) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (>= 999999999999999999999999999 x1139) (= x127 (x1215 (- x1139 (mod (ite (> x450 x950) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= x1118 (x1215 (- x950 x450))) (= x683 (div x1118 134217728)) (= x170 (mod (* 862718293348820473429344482784628181556388621521298319395315527974912 x127) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (not x1159))) (and (not (>= (+ x584 x1122) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x384 (x1215 (- x925 x950))) (= 1000000000000000000000000000 x236) (= x1159 (= x1139 0)) (= x238 (x624 (+ x1122 x584))) (= x1139 (x1215 (- x384 (mod (ite (> x950 x925) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (mod (* x984 x37) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x950) (= x925 (mod (* x37 x984) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))) x1137) x616))
(assert (x1161 x234))
(assert (x73 x372))
(assert (x1161 x981))
(assert (x1161 x226))
(assert (x362 31536000))
(assert (x1161 x402))
(assert (x1161 x738))
(assert (x1161 x493))
(assert (= x33 (or x327 x817)))
(assert (x1161 x197))
(assert (= (x551 4008608923) 0))
(assert (x1161 x399))
(assert (x1161 x872))
(assert (x1161 x372))
(assert (x252 x1085))
(assert (x1161 x786))
(assert (x1161 x63))
(assert (x1161 x103))
(assert (x1161 x773))
(assert (x1161 x130))
(assert (x1161 x1096))
(assert (x1161 x628))
(assert (x1161 x822))
(assert (x1161 x1176))
(assert (= (or x892 x767) x223))
(assert (= x193 (or x834 x949 x730 x1025 x601)))
(assert (x1161 x473))
(assert (x1161 x517))
(assert (x1161 x14))
(assert (x1161 x78))
(assert (x1161 x953))
(assert (x1161 x39))
(assert (=> (= x708 0) (= (div x941 x708) 0)))
(assert (= 0 (x551 26959535291011309493156476344723991336010898738574164086137773096960)))
(assert (= (x551 115792089237316195423570985008687907853269984665639564039457584007913129639936) 0))
(assert (x362 65535))
(assert (x1161 x279))
(assert (x1161 x543))
(assert (x1161 x435))
(assert (x1161 x481))
(assert (x1161 x1064))
(assert (= x716 (=> (and (or (and (not x351) (and (= (x1215 (- x1006 x1210)) x587) (= (x624 (+ x661 x438)) x870) (= (x1215 (- x864 (mod (ite (> x1210 x1006) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x940) (= x438 (mod (* 862718293348820473429344482784628181556388621521298319395315527974912 x940) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x301 x1052) (= x1210 (mod (* x611 x70) 1000000000000000000000000000)) (= (mod (* 15501966263465142598656971426345627788199674109747006013765225610400761231029 x870) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x301) (<= x864 999999999999999999999999999) (= x661 (div x587 134217728)))) (and (and (= (div x1006 1000000000000000000000000000) x156) (= x1052 x156)) x351)) (and (= (x624 (+ x417 x498)) x584) (not (>= (+ x498 x417) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x864 (x1215 (- x1091 (mod (ite (< x468 x1006) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= x351 (= x864 0)) (= (x1215 (- x468 x1006)) x1091) (= (mod (* x611 x70) 115792089237316195423570985008687907853269984665640564039457584007913129639935) x468) (= x1006 (mod (* x611 x70) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= 1000000000000000000000000000 x348))) x955)))
(assert (x1161 x92))
(assert (x1161 x214))
(assert (x1161 x150))
(assert (x1161 x571))
(assert (x1161 x91))
(assert (x1161 x1024))
(assert (x1161 x443))
(assert (= (and x475 (not x393)) x464))
(assert (x1161 x549))
(assert (x1161 x989))
(assert (= x848 (=> (and (= x766 x458) (= x867 x831) (= x448 x187)) x302)))
(assert (x1161 x944))
(assert (= x955 (=> (and (and (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x1052 x503))) (= (mod (* x967 x37) 115792089237316195423570985008687907853269984665640564039457584007913129639935) x841) (= (x1215 (- x135 (mod (ite (> x629 x841) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x862) (= (mod (* x37 x967) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x629) (= (x624 (+ x1052 x503)) x836) (= (x1215 (- x841 x629)) x135) (= 1000000000000000000000000000 x82) (= (= x862 0) x175)) (or (and (and (= (div x629 1000000000000000000000000000) x120) (= x1122 x120)) x175) (and (not x175) (and (= x150 (x1215 (- x629 x27))) (= (div x150 134217728) x582) (= (x1215 (- x862 (mod (ite (> x27 x629) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x357) (= (mod (* x1102 15501966263465142598656971426345627788199674109747006013765225610400761231029) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x7) (= (x624 (+ x582 x684)) x1102) (= (mod (* x967 x37) 1000000000000000000000000000) x27) (<= x862 999999999999999999999999999) (= x684 (mod (* 862718293348820473429344482784628181556388621521298319395315527974912 x357) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x1122 x7))))) x616)))
(assert (x1161 x1165))
(assert (x362 4294967295))
(assert (x362 26959535291011309493156476344723991336010898738574164086137773096960))
(assert (= (and x1173 (not x1177)) x146))
(assert (x1161 x647))
(assert (x1161 x761))
(assert (x1161 x81))
(assert (= 0 (x551 411376139330301510538742295634145329387149138779864469507932160)))
(assert (x1161 x463))
(assert (= 0 (x551 4294967294)))
(assert (x1161 x693))
(assert (x1161 x800))
(assert (x1161 x516))
(assert (x1161 x13))
(assert (x1161 x433))
(assert (x1161 x870))
(assert (x1161 x602))
(assert (= x470 (and x52 x201)))
(assert (x1075 x360))
(assert (= (div x461 65536) (x781 x461 16)))
(assert (x1161 x472))
(assert (x1161 x998))
(assert (x1161 x80))
(assert (x1161 x1174))
(assert (x1161 x1055))
(assert (=> (= x209 0) (= (div x70 x209) 0)))
(assert (x1161 x290))
(assert (x1161 x1195))
(assert (= x255 (and x297 (not x987))))
(assert (x1161 x798))
(assert (=> (= 0 x708) (= (div x257 x708) 0)))
(assert (=> (= 0 x580) (= (div x997 x580) 0)))
(assert (x1161 x1119))
(assert (x1161 x847))
(assert (= (x781 x822 208) (div x822 411376139330301510538742295639337626245683966408394965837152256)))
(assert (x1075 x83))
(assert (x1161 x241))
(assert (x1161 x1151))
(assert (x1161 x762))
(assert (x1161 x719))
(assert (x1161 x1072))
(assert (= (div x690 411376139330301510538742295639337626245683966408394965837152256) (x781 x690 208)))
(assert (x1161 x1156))
(assert (=> (>= 10000 x333) (= 0 (x551 x333))))
(assert (x1161 x587))
(assert (x1161 x415))
(assert (x1170 x1023 x1045))
(assert (x1161 x88))
(assert (x1161 x58))
(assert (x1161 x556))
(assert (x1161 x1035))
(assert (x1161 x1155))
(assert (x1161 x610))
(assert (=> (= x70 0) (= 0 (div x916 x70))))
(assert (x1161 x919))
(assert (x1075 x839))
(assert (x1161 x1094))
(assert (= (div x241 5192296858534827628530496329220096) (x781 x241 112)))
(assert (x1161 x837))
(assert (x1161 x64))
(assert (= (and x637 (not x1159)) x533))
(assert (x868 x867))
(assert (x1161 x370))
(assert (= x634 (or x401 x525)))
(assert (x1161 x607))
(assert (x73 x360))
(assert (= x699 (and x96 x33)))
(assert (=> (= 0 x997) (= 0 (div x1176 x997))))
(assert (x1161 x287))
(assert (x1161 x846))
(assert (x1161 x349))
(assert (x1161 x940))
(assert (x1161 x841))
(assert (= 2 (x136 (x419 32 2))))
(assert (x1161 x899))
(assert (x874 x745))
(assert (x1161 x434))
(assert (x1161 x540))
(assert (x1161 x422))
(assert (x1161 x363))
(assert (=> (= x580 0) (= 0 (div x1072 x580))))
(assert (= 0 (x551 100000000000000)))
(assert (x1161 x708))
(assert (= (or x707 x1070) x650))
(assert (x1161 x997))
(assert (x1161 x909))
(assert (x1161 x382))
(assert (x1161 x1021))
(assert (x1161 x364))
(assert (x1161 x706))
(assert (x252 x655))
(assert (x1161 x1005))
(assert (x1161 x568))
(assert (= x1157 true))
(assert (= (x781 x1071 208) (div x1071 411376139330301510538742295639337626245683966408394965837152256)))
(assert (= x475 (and x920 (not x456))))
(assert (x1161 x1073))
(assert (= x327 (or x918 x328)))
(assert (x1161 x8))
(assert (x1161 x1076))
(assert (x1161 x705))
(assert (x1161 x526))
(assert (x1161 x397))
(assert (x558 x70 x969))
(assert (x1161 x618))
(assert (x1161 x1201))
(assert (x1161 x140))
(assert (x1161 x1213))
(assert (x1161 x814))
(assert (=> (= x11 0) (= (div x1113 x11) 0)))
(assert (x1161 x428))
(assert (x1161 x861))
(assert (x1161 x356))
(assert (x362 15501966263465142598656971426345627788199674109747006013765225610400761231029))
(assert (x1161 x996))
(assert (x1161 x308))
(assert (x362 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (x1161 x804))
(assert (x1161 x66))
(assert (= (x551 1361925195015220700152000000000000000000000000000) 0))
(assert (x1170 x1021 x535))
(assert (= (and x1104 x923) x730))
(assert (x362 5192296858534827628530496329154560))
(assert (= (div x1015 79228162514264337593543950336) (x781 x1015 96)))
(assert (x1161 x501))
(assert (x1161 x661))
(assert (x1161 x605))
(assert (x362 262144))
(assert (= (x551 79228162514264337593543950335) 0))
(assert (x1161 x864))
(assert (x1161 x992))
(assert (x1161 x173))
(assert (= (x551 15501966263465142598656971426345627788199674109747006013765225610400761231029) 0))
(assert (x1161 x1))
(assert (x1161 x686))
(assert (x1161 x47))
(assert (x1161 x70))
(assert (x1161 x1162))
(assert (x1161 x1100))
(assert (x1161 x873))
(assert (x1161 x1117))
(assert (x1161 x776))
(assert (= x111 (and x770 (not x1136))))
(assert (x1161 x310))
(assert (x1161 x476))
(assert (x1161 x1110))
(assert (= x12 (and x637 x1159)))
(assert (x1161 x759))
(assert (x1161 x342))
(assert (x1161 x104))
(assert (not (x362 (x419 32 2))))
(assert (= (x551 115792089237316195423570985008687907853269984665640564039457584007913129639935) 0))
(assert (x1161 x343))
(assert (= (x551 5192296858534827628530496329154560) 0))
(assert (x1161 x44))
(assert (x1161 x89))
(assert (x1161 x749))
(assert (x1161 x582))
(assert (x1161 x1000))
(assert (x1161 x325))
(assert (x1161 x1210))
(assert (x1161 x156))
(assert (x1161 x357))
(assert (x1161 x720))
(assert (x1161 x679))
(assert (x1161 x480))
(assert (x1161 x1182))
(assert (x1161 x94))
(assert (x1161 x1046))
(assert (x1161 x260))
(assert (= (div x646 65536) (x781 x646 16)))
(assert (= (x551 134217728) 0))
(assert (= (=> (and (and (= x115 x563) (= x1164 x576) (= (x594 5192296858534827628530496329154560 x867) x1043) (= x518 (x1084 1216)) (= (x1084 1056) x1059) (= (x594 6277101735386680763835789423128438253588091106870490562560 x448) x761) (= x260 (x781 x1043 16)) (= x1093 (x1084 1088)) (= 704 x442) (= false x143) (= x1221 false) (= (x781 x752 224) x480) (= (x781 x1009 96) x292) (= (x781 x1073 208) x526) (= x914 x687) (= x76 x578) (>= x850 0) (= x993 (x1084 1184)) (= x1093 x24) (= (x1084 1248) x411) (= (x1084 1120) x1164) (= x499 (x1084 1152)) (= false x469) (= x265 x430) (= x1073 (x594 26959535291011309493156476344723991336010898738574164086137773096960 x867)) (= x518 x1033) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x138) (>= x138 0) (= (x1084 1024) x687) (= (x594 79228162514264337593543950335 x448) x523) (<= x850 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x541 x499) (= (x594 79228162514264337593543950335 x766) x514) (= x991 704) (= x1203 x910) (= x282 false) (= x752 (x594 1766820104831717178943502833727831496196810259731196417549125097682370560 x867)) (= x1218 (x594 411376139330301510538742295634145329387149138779864469507932160 x867)) (= x411 x774) (= x638 (x781 x1218 112)) (= x36 100) (= (x594 65535 x867) x801) (= x1059 x1175) (= (x594 6277101735386680763835789423128438253588091106870490562560 x766) x1009) (= x344 x993) (= (x1084 992) x578) (= (x781 x761 96) x832)) (and (and (and (= x883 x1101) (= x1101 x910) (not (< x310 x283)) (>= x25 1) (>= 127 x1094) (= x599 false) (= x1007 false) (= (x1215 (- x123 1)) x310) (= x155 (= x283 0)) (>= 127 x1094) (= x1165 4266371907) (not (< x123 x310)) (= (x849 x333) x25) (= x695 x283)) (= x563 x719)) (= x283 x265))) (and (=> (and x155 (and (= x372 x657) (= x267 x816) (= x618 x1016))) x335) (=> (and (not x155) (and (= (= 1 x283) x835) (or (and x835 (and (= x91 x1029) (= x79 x1130) (= x531 x199))) (and (not x835) (and (= x283 2) (= x760 x1029) (= x199 x433) (= x79 x1151)))))) x824))) x302))
(assert (x1161 x648))
(assert (= (or x734 x365) x1173))
(assert (x1161 x1071))
(assert (x1161 x1069))
(assert (x73 5192296858534827628530496329154560))
(assert (x1161 x745))
(assert (= x1204 (and x938 x1081)))
(assert (x1161 x239))
(assert (x1161 x221))
(assert (x1161 x682))
(assert (x1161 x1188))
(assert (x1161 x1009))
(assert (= (or x696 x699) x920))
(assert (x373 x372))
(assert (x73 79228162514264337593543950335))
(assert (x1161 x334))
(assert (x1161 x1097))
(assert (x1161 x748))
(assert (x1161 x452))
(assert (x1161 x732))
(assert (x1161 x387))
(assert (x1161 x1205))
(assert (x1161 x167))
(assert (x1161 x701))
(assert (x1161 x832))
(assert (= (=> (and (and (>= x359 0) (= (x781 x233 96) x445) (= x88 x597) (= x425 (x781 x99 112)) (= x689 (x594 1766820104831717178943502833727831496196810259731196417549125097682370560 x1085)) (= x484 x166) (= x72 704) (= x182 false) (= x101 false) (= (x594 411376139330301510538742295634145329387149138779864469507932160 x1085) x99) (= x702 (x594 6277101735386680763835789423128438253588091106870490562560 x839)) (= (x594 5192296858534827628530496329154560 x1085) x331) (= (x594 6277101735386680763835789423128438253588091106870490562560 x360) x233) (= (x781 x702 96) x402) (= x215 (x765 1120)) (= (x765 1184) x306) (= x463 x1200) (= x92 (x781 x689 224)) (= false x813) (= x511 (x594 79228162514264337593543950335 x839)) (= x1011 x942) (= x439 (x781 x331 16)) (= (x765 1056) x244) (= (x765 992) x1011) (= x215 x833) (= x1071 (x594 26959535291011309493156476344723991336010898738574164086137773096960 x1085)) (<= x1142 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x1142 0) (= 100 x122) (= x543 x298) (= (x594 79228162514264337593543950335 x360) x840) (= x306 x315) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x359) (= x347 false) (= (x765 1152) x88) (= x299 x604) (= x339 x249) (= x543 (x765 1248)) (= (x765 1216) x463) (= (x781 x1071 208) x720) (= x166 (x765 1024)) (= (x765 1088) x1206) (= x22 x1041) (= (x594 65535 x1085) x110) (= x990 x1206) (= x453 x244) (= x186 704)) (and (and (= x339 x41) (and (= (= x473 0) x96) (= false x1220) (= x1062 x873) (not (> x420 x123)) (= (x849 x333) x935) (not (> x473 x420)) (>= 127 x13) (>= 127 x13) (= x22 x873) (= x473 x356) (= (x1215 (- x123 1)) x420) (>= x935 1) (= false x128) (= 4266371907 x685))) (= x299 x473))) (and (=> (and x96 (and (= x618 x556) (= x657 x655) (= x83 x267))) x409) (=> (and (and (or (and (and (= x46 x531) (= x623 x91) (= x86 x1130)) x145) (and (and (= x86 x1151) (= x760 x623) (= 2 x473) (= x46 x433)) (not x145))) (= (= 1 x473) x145)) (not x96)) x1099))) x820))
(assert (x1161 x917))
(assert (x1161 x123))
(assert (x1161 x113))
(assert (x1161 x270))
(assert (x1161 x935))
(assert (x1161 x704))
(assert (= x670 (and x772 x6)))
(assert (= (=> (= x1177 (> x70 x208)) (and (=> (and x1177 (and (and (= (mod (* x208 x285) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x47) (= x919 (x1215 (- x443 x47))) (= x1081 (= x1194 0)) (= 1000000000000000000000000000 x562) (= x1194 (x1215 (- x919 (mod (ite (< x443 x47) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= x443 (mod (* x208 x285) 115792089237316195423570985008687907853269984665640564039457584007913129639935))) (or (and (not x1081) (and (= (x1215 (- x47 x506)) x1069) (= (x1215 (- x1194 (mod (ite (< x47 x506) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x1127) (= x444 (mod (* 15501966263465142598656971426345627788199674109747006013765225610400761231029 x42) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* 862718293348820473429344482784628181556388621521298319395315527974912 x1127) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x509) (= (mod (* x285 x208) 1000000000000000000000000000) x506) (= x42 (x624 (+ x321 x509))) (<= x1194 999999999999999999999999999) (= x321 (div x1069 134217728)) (= x444 x1214))) (and (and (= (div x47 1000000000000000000000000000) x1005) (= x1214 x1005)) x1081)))) x575) (=> (and (and (and (= (x1215 (- x474 (mod (ite (< x668 x703) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x555) (= (= 0 x555) x488) (= (x1215 (- x668 x703)) x474) (not (> x37 x208)) (= 1000000000000000000000000000 x240) (= x668 (mod (* x70 x285) 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (mod (* x285 x70) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x703) (= (x1215 (- x208 x70)) x37)) (or (and (and (= (div x703 1000000000000000000000000000) x346) (= x417 x346)) x488) (and (and (= (mod (* x343 862718293348820473429344482784628181556388621521298319395315527974912) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x951) (= (x1215 (- x703 x821)) x1138) (= (x1215 (- x555 (mod (ite (< x703 x821) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x343) (= (div x1138 134217728) x268) (= x821 (mod (* x285 x70) 1000000000000000000000000000)) (<= x555 999999999999999999999999999) (= x628 (mod (* x476 15501966263465142598656971426345627788199674109747006013765225610400761231029) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x624 (+ x951 x268)) x476) (= x417 x628)) (not x488)))) (not x1177)) x716))) x725))
(assert (= (x551 6553500000000000000000000000) 0))
(assert (x73 x655))
(assert (= (and (not x351) x859) x525))
(assert (= x681 (=> (and (and (= x1078 (> x769 x753)) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x517 x1162))) (= (x624 (+ x1162 x517)) x769)) (or (and (not x1078) (and (= x43 4) (= x804 x753) (= 27 x130) (= x711 x917) (= x507 x917) (= x711 (* x242 100000000000000000000000)))) (and x1078 (and (= x737 x386) (= (* 100000000000000000000000 x242) x386) (= x769 x804) (= 27 x811) (= x507 x737) (= x345 4))))) x1001)))
(assert (x1161 x590))
(assert (=> (<= x701 10000) (= (x551 x701) 0)))
(assert (x1161 x703))
(assert (x1161 x906))
(assert (x1161 x843))
(assert (x1161 x207))
(assert (x73 26959535291011309493156476344723991336010898738574164086137773096960))
(assert (x1161 x486))
(assert (x1161 x1031))
(assert (= x483 (=> (and (or (and x57 (and (= (div x1176 x997) x924) (= x924 x888))) (and (and (= x1000 (x1215 (- x422 (mod (ite (> x1055 x1176) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= x936 (mod (* x134 x1063) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x931 1000000000000000000000000000) x997) x1055) (= (x1215 (- 0 x997)) x147) (= x387 (mod (* x405 x792) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x792 x585) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x363) (= (x1215 (- 2 x387)) x846) (= x580 (x594 x997 x147)) (= (x1215 (- x1176 x1055)) x1072) (= x190 (mod (* x134 x792) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x718 (mod (* x881 x792) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (>= 6553499999999999999999999999 x422) (= x792 (div x997 x580)) (= x535 (mod (* x858 x1000) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x888 x922) (= (mod (* 3 x792) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x460) (= x964 (mod (* x792 x936) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x134 (x491 2 x460)) (= x1066 (x1215 (- 0 x580))) (= x922 (mod (* x258 (x385 x1021 x535)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x108 x1153) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x405) (= (x1215 (- 2 x718)) x184) (= (mod (* x1153 x792) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x532) (= x258 (mod (* x245 x585) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x846 x405) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x585) (= x889 (div x1066 x580)) (= (mod (* x465 x936) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x881) (= (x1215 (- 2 x363)) x245) (> x997 x422) (= x1021 (div x1072 x580)) (= x465 (x1215 (- 2 x964))) (= (x624 (+ x889 1)) x858) (= (mod (* x881 x184) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1153) (= x108 (x1215 (- 2 x532))) (= (x1215 (- 2 x190)) x1063)) (not x57))) (and (= (= x422 0) x57) (<= x931 79228162514264337593543950335) (= (x1215 (- x784 x1176)) x1040) (= x337 1000000000000000000000000000) (= (* 1000000000000000000000000000 x931) x784) (= (x1215 (- x1040 (mod (ite (> x1176 x784) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x422) (= x931 (x1215 (- x1053 x517))) (= x1176 (* 1000000000000000000000000000 x931)))) x211)))
(assert (x1161 x314))
(assert (x1161 x28))
(assert (x362 999999999999999999))
(assert (= (x551 58712522155081554758111416936196854083347032101528093538124555458258380259328) 0))
(assert (x1161 x1043))
(assert (x1161 x283))
(assert (x1161 x135))
(assert (x362 100000000000000))
(assert (x1108 x839))
(assert (= x1209 (and (not x1133) x1149)))
(assert (x1161 x612))
(assert (= x192 (and x838 x744)))
(assert (x1161 x1129))
(assert (x1161 x341))
(assert (x362 1766820104831717178943502833727831496196810259731196417549125097682370560))
(assert (x1161 x391))
(assert (x1161 x609))
(assert (x1161 x1206))
(assert (x1161 x828))
(assert (x558 x997 x147))
(assert (=> (>= 10000 x502) (= 0 (x551 x502))))
(assert (= x707 (and x1180 (not x710))))
(assert (x1161 x898))
(assert (x1161 x497))
(assert (x1161 x404))
(assert (x1161 x378))
(assert (x1161 x1091))
(assert (= (or x1134 x77) x859))
(assert (x1161 x97))
(assert (= x410 (or x200 x589)))
(assert (x1161 x1169))
(assert (x1161 x93))
(assert (= x196 (and x709 x808)))
(assert (x1161 x1115))
(assert (x1161 x390))
(assert (= (or x100 x324) x637))
(assert (= x744 (and (not x212) x16)))
(assert (x1161 x755))
(assert (= (and x658 x145) x550))
(assert (x1051 x372))
(assert (x1161 x684))
(assert (x1161 x42))
(assert (x1161 x240))
(assert (x1161 x869))
(assert (x1161 x1102))
(assert (x1161 x531))
(assert (x1161 x466))
(assert (x1161 x514))
(assert (x1161 x622))
(assert (x1161 x227))
(assert (x1161 x512))
(assert (x1161 x735))
(assert (x1161 x1211))
(assert (= (and x658 (not x145)) x857))
(assert (x362 1461501637330902918203684832716283019655932542975))
(assert (x1161 x584))
(assert (x1161 x620))
(assert (x1161 x950))
(assert (x1161 x176))
(assert (= x817 (and x633 x361)))
(assert (x1161 x1083))
(assert (x1161 x144))
(assert (x1161 x829))
(assert (x1161 x583))
(assert (= x365 (and x309 x983)))
(assert (x1161 x122))
(assert (x1161 x21))
(assert (x1161 x924))
(assert (x1161 x169))
(assert (x1161 x199))
(assert (x1161 x37))
(assert (=> (= x11 0) (= (div x334 x11) 0)))
(assert (x1161 x1105))
(assert (x1161 x487))
(assert (x1161 x1132))
(assert (x1161 x795))
(assert (x1161 x1062))
(assert (x252 x372))
(assert (x1161 x600))
(assert (x1161 x281))
(assert (x1161 x296))
(assert (x1161 x925))
(assert (x1161 x573))
(assert (x1161 x377))
(assert (x1161 x384))
(assert (x1161 x585))
(assert (x1161 x439))
(assert (x874 x1023))
(assert (x362 441711766194596082395824375185729628956870974218904739530401550323154944))
(assert (x1161 x685))
(assert (x1161 x148))
(assert (x1161 x458))
(assert (x1161 x1018))
(assert (x1161 x994))
(assert (= x892 (and x723 x835)))
(assert (x1161 x303))
(assert (= x799 (or x111 x161)))
(assert (= x100 (and x175 x634)))
(assert (x1161 x1088))
(assert (= 0 (x551 1000000000000000000000000000)))
(assert (x1161 x507))
(assert (x1161 x286))
(assert (x1161 x757))
(assert (x1161 x1052))
(assert (x1161 x689))
(assert (x1161 x350))
(assert (x1161 x993))
(assert (x1161 x236))
(assert (= 0 (x551 6277101735386680763835789423128438253588091106870490562560)))
(assert (x1161 x509))
(assert (x73 x626))
(assert (x1161 x967))
(assert (x1161 x460))
(assert (x1161 x657))
(assert (= (div x1218 5192296858534827628530496329220096) (x781 x1218 112)))
(assert (x1042 x460 2))
(assert (= (and x1149 x1133) x557))
(assert (= x330 (and x393 x475)))
(assert (x1161 x801))
(assert (x1161 x784))
(assert (= x335 (=> (and (= x1015 (x594 6277101735386680763835789423128438253588091106870490562560 x1016)) (= x279 (x809 704)) (= x50 (x781 x1207 224)) (= (x781 x822 208) x649) (= x350 (x781 x646 16)) (= x763 4) (= x45 27) (<= x608 127) (= x66 x680) (= (= 0 x50) x212) (= 27 x861) (= x517 (x781 x876 112)) (= x646 (x594 5192296858534827628530496329154560 x372)) (= false x137) (= x992 8) (= x17 58712522155081554758111416936196854083347032101528093538124555458258380259328) (= 2177768483 x493) (= false x782) (= x997 x593) (= x825 (x594 79228162514264337593543950335 x1016)) (= x876 (x594 411376139330301510538742295634145329387149138779864469507932160 x372)) (= (x440 x521) x163) (= x1207 (x594 1766820104831717178943502833727831496196810259731196417549125097682370560 x372)) (= x1150 false) (= (x594 6277101735386680763835789423128438253588091106870490562560 x816) x380) (= x256 (x594 79228162514264337593543950335 x816)) (= (x849 x701) x259) (= x642 (x781 x1015 96)) (>= 4294967295 x279) (= x521 (+ x515 x283)) (= x695 x1106) (= false x524) (= x1135 36) (>= x259 1) (= x680 (* 10000000000000000000 x279)) (<= x608 127) (= (x594 65535 x372) x242) (= x515 (x419 32 2)) (= x44 704) (= (x594 26959535291011309493156476344723991336010898738574164086137773096960 x372) x822) (= x395 (div x66 31536000)) (= x593 (* x649 100000000000000000000000)) (= x947 416) (>= 4294967295 x163) (= (x781 x380 96) x1053)) (and (=> (and (= x838 (= 0 x1101)) (not x212)) (and (=> (and (not x838) (and (and (= (mod (* x847 x1101) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x529) (= (x1215 (- x590 x529)) x1031) (= x590 (mod (* x847 x1101) 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (* x50 100000000000000) x897) (= 18 x191) (= 1000000000000000000 x1028) (= x847 x897) (= (x1215 (- x1031 (mod (ite (> x529 x590) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x664) (= 4 x909) (= x710 (= 0 x664))) (or (and (and (= (x1215 (- x529 x686)) x1219) (= x686 (mod (* x1101 x847) 1000000000000000000)) (<= 1 x132) (= (x1215 (- x664 (mod (ite (< x529 x686) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x971) (= x132 (mod (* 78156646155174841979727994598816262306175212592076161876661508869554232690281 x261) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x624 (+ x1047 x1167)) x261) (>= 999999999999999999 x664) (= x132 x1125) (= x1047 (div x1219 262144)) (= x1167 (mod (* x971 441711766194596082395824375185729628956870974218904739530401550323154944) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (not x710)) (and x710 (and (= x431 (div x529 1000000000000000000)) (= x1125 x431) (<= 1000000000000000000 x529)))))) x426) (=> (and x838 (= 0 x31)) x788))) (=> (and (and (= x603 4) (= x775 x592) (= x1053 x804) (= 27 x85) (= (* 100000000000000000000000 x242) x592) (= x507 x775)) x212) x1001)))))
(assert (x1161 x152))
(assert (x1161 x1038))
(assert (= (or x650 x192) x1149))
(assert (x1161 x461))
(assert (x1161 x288))
(assert (x1161 x462))
(assert (= (x551 65535) 0))
(assert (x1161 x166))
(assert (x1075 x556))
(assert (x1161 x690))
(assert (x1161 x48))
(assert (x1161 x695))
(assert (x1161 x61))
(assert (= x489 (and x266 x276)))
(assert (x1161 x436))
(assert (= (=> (and (= x86 x655) (= x83 x623) (= x556 x46)) x409) x1099))
(assert (x1161 x1034))
(assert (x1161 x867))
(assert (x1161 x937))
(assert (x73 x83))
(assert (x1161 x611))
(assert (= (and x201 (not x52)) x546))
(assert (= (=> (and (or (and x631 (and (= x679 x273) (= (div x602 1000000000000000000000000000) x273))) (and (and (= (x1215 (- x154 (mod (ite (< x602 x398) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x466) (= x173 (mod (* x466 862718293348820473429344482784628181556388621521298319395315527974912) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x624 (+ x173 x1054)) x1049) (= (mod (* x642 x381) 1000000000000000000000000000) x398) (= (x1215 (- x602 x398)) x759) (= x1054 (div x759 134217728)) (= x1169 (mod (* 15501966263465142598656971426345627788199674109747006013765225610400761231029 x1049) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (>= 999999999999999999999999999 x154) (= x1169 x679)) (not x631))) (and (= (x1215 (- x516 (mod (ite (< x1213 x602) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x154) (= x516 (x1215 (- x1213 x602))) (= (x624 (+ x304 x606)) x278) (= x602 (mod (* x381 x642) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x1213 (mod (* x381 x642) 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (= x154 0) x631) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x606 x304))) (= x1065 1000000000000000000000000000))) x62) x375))
(assert (x1161 x1014))
(assert (x1161 x718))
(assert (x362 115792089237316195423412528683659379178082896764970564039457584007913129639936))
(assert (x1161 x259))
(assert (=> (= 0 x580) (= 0 (div x1066 x580))))
(assert (x1161 x964))
(assert (x1161 x1101))
(assert (x1161 x43))
(assert (= (x551 999999999999999999) 0))
(assert (x1161 x1045))
(assert (x1161 x1194))
(assert (x1170 x745 x332))
(assert (x558 x997 x626))
(assert (= (x781 x1009 96) (div x1009 79228162514264337593543950336)))
(assert (x1161 x577))
(assert (x1161 x1068))
(assert (x1161 x1006))
(assert (x1161 x1093))
(assert (x1161 x608))
(assert (not x222))
(assert (= (x551 31536000) 0))
(assert (x1170 x691 x882))
(assert (x252 x867))
(assert (= (=> (and (and (= x987 (= x963 0)) (= x893 (mod (* x888 x31) 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= x404 1000000000000000000000000000) (= (x1215 (- x1056 (mod (ite (> x1082 x893) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x963) (= (x1215 (- x893 x1082)) x1056) (= (mod (* x31 x888) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1082) (= x753 (x624 (+ x270 x350))) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x270 x350)))) (or (and (and (= x1105 (mod (* 862718293348820473429344482784628181556388621521298319395315527974912 x416) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (div x640 134217728) x277) (= x1162 x852) (= (mod (* x888 x31) 1000000000000000000000000000) x326) (= (x624 (+ x277 x1105)) x981) (= (x1215 (- x963 (mod (ite (< x1082 x326) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x416) (>= 999999999999999999999999999 x963) (= x640 (x1215 (- x1082 x326))) (= (mod (* 15501966263465142598656971426345627788199674109747006013765225610400761231029 x981) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x852)) (not x987)) (and (and (= x1030 x1162) (= x1030 (div x1082 1000000000000000000000000000))) x987))) x681) x336))
(assert (x1161 x793))
(assert (= x807 (or x3 x196)))
(assert (= (x781 x1073 208) (div x1073 411376139330301510538742295639337626245683966408394965837152256)))
(assert (x1161 x278))
(assert (x1161 x535))
(assert (x1161 x65))
(assert (x1042 x1140 2))
(assert (= (and x53 (not x692)) x246))
(assert (x1161 x623))
(assert (x1161 x5))
(assert (= (x781 x59 96) (div x59 79228162514264337593543950336)))
(assert (= x1057 (and (not x772) x6)))
(assert (x1161 x1012))
(assert (= x426 (=> (and (= x31 x548) (= x548 (div x719 x1125))) x788)))
(assert (= (x781 x632 96) (div x632 79228162514264337593543950336)))
(assert (= x797 (=> (and (and (<= 1 x70) (= x144 1000000000000000000000000000) (= (x1215 (- x497 x498)) x232) (<= x70 6553500000000000000000000000) (= x167 (x1215 (- x61 (mod (ite (< x284 x916) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= x61 (x1215 (- x284 x916))) (= (x1215 (- x152 x944)) x497) (= x757 (ite (> x232 x152) 0 x232)) (= x916 (ite (>= (* 1000000000000000000000000000 (ite (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x757) x757 (- x757 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 0) (* 1000000000000000000000000000 (ite (<= x757 57896044618658097711785492504343953926634992332820282019728792003956564819967) x757 (- x757 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ (* 1000000000000000000000000000 (ite (<= x757 57896044618658097711785492504343953926634992332820282019728792003956564819967) x757 (- x757 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (or (>= 1361925195015220700152000000000000000000000000000 x916) (and (>= x916 115792089237316195423412528683659379178082896764970564039457584007913129639936) (>= 115792089237316195423570985008687907853269984665639564039457584007913129639936 x916))) (= (= x167 0) x692) (= (mod (* 1000000000000000000000000000 x757) 115792089237316195423570985008687907853269984665640564039457584007913129639935) x284)) (or (and (and (= (div x916 x70) x230) (= x230 x285)) x692) (and (not x692) (and (= (x1215 (- 2 x504)) x94) (= (mod (* x735 x237) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x547) (= (mod (* x449 x390) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x394) (= x739 (mod (* x78 x390) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x467 (x1215 (- x167 (mod (ite (< x916 x65) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= x449 (mod (* x776 x749) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x390 x148) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x195) (= (mod (* x94 x688) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x776) (= (x1215 (- 2 x976)) x749) (= (mod (* x148 x583) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x688) (= x54 (x1215 (- 2 x394))) (= x806 (mod (* x390 x237) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (div x436 x209) x691) (> x70 x167) (= x209 (x594 x70 x969)) (= (mod (* x540 x467) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x882) (= x549 x285) (= x65 (mod (* x757 1000000000000000000000000000) x70)) (= x540 (x624 (+ x972 1))) (= (mod (* x390 x688) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x504) (>= 6553499999999999999999999999 x167) (= x549 (mod (* (x385 x691 x882) x547) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x969 (x1215 (- 0 x70))) (= x78 (mod (* x54 x449) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x1215 (- 2 x739)) x197) (= (mod (* x776 x390) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x976) (= (mod (* x197 x78) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x237) (= (mod (* x390 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x472) (= (x1215 (- x916 x65)) x436) (= (x491 2 x472) x148) (= (div x762 x209) x972) (= x735 (x1215 (- 2 x806))) (= x762 (x1215 (- 0 x209))) (= (x1215 (- 2 x195)) x583) (= x390 (div x70 x209)))))) x999)))
(assert (= (and x179 x807) x834))
(assert (x1161 x1090))
(assert (x1161 x1095))
(assert (x1161 x209))
(assert (= x3 (and x808 (not x709))))
(assert (=> (= 0 x209) (= (div x436 x209) 0)))
(assert (x1161 x45))
(assert (= (and (not x175) x634) x324))
(assert (x1161 x506))
(assert (x1161 x727))
(assert (x1161 x139))
(assert (x874 x882))
(assert (= x200 (and x464 (not x595))))
(assert (= x77 (and (not x488) x146)))
(assert (x1161 x548))
(assert (x1161 x158))
(assert (= x116 (=> (and (= x569 false) (= x254 (= x942 x76)) (= x789 false) (= false x177) x68 (= x805 x1119) (= (= x453 x1175) x424) (= (= x298 x774) x307) x307 x424 x952 (= x68 (= x990 x24)) (= (= x833 x576) x952) (= (= x597 x541) x418) (= (> x452 x457) x157) x827 (= (x119 736) x1110) (= x1119 (x119 768)) x1187 (= x1187 (= x484 x914)) (= (= x1033 x1200) x1037) (= x827 (= x344 x315)) x254 x418 x157 (= x1110 x1196) (= x383 false) x1037 (= (<= x1087 x1196) x1172)) x1172)))
(assert (x1161 x775))
(assert (x1161 x1184))
(assert (x1161 x913))
(assert (x362 58712522155081554758111416936196854083347032101528093538124555458258380259328))
(assert (x1161 x355))
(assert (x1161 x652))
(assert (x1161 x186))
(assert (x1161 x379))
(assert (x1161 x649))
(assert (x1161 x317))
(assert (x1161 x753))
(assert (x1161 x1082))
(assert (= (x551 x513) (x551 (+ x786 x513))))
(assert (x1161 x403))
(assert (= (x551 262144) 0))
(assert (x1075 x766))
(assert (x1161 x579))
(assert (x1161 x931))
(assert (x1075 x1016))
(assert (x1161 x561))
(assert (x362 999999999999999999999999999))
(assert (x1161 x1125))
(assert (x700 2))
(assert (x125 x867))
(assert (x125 x1085))
(assert (x1161 x542))
(assert (x1161 x71))
(assert (=> (= x11 0) (= 0 (div x70 x11))))
(assert (x1161 x721))
(assert (= x165 (or x1026 x255)))
(assert (x1161 x1015))
(assert (x1161 x474))
(assert (x1161 x752))
(assert (= (=> (and (and (= x231 false) (= x75 x1087) (= 36 x338) (= x75 (x621 736)) (= x71 (x621 768)) (= x980 false) (= x985 x604) (= x272 false) (= x667 x71) (= false x1103)) (and (and (= x454 false) (>= 127 x937) (= x1092 (+ x886 x842)) (>= 127 x121) (= false x678) (= x604 x921) (= x58 x97) (= x886 x97) (= (x849 x333) x296) (= false x1067) (= x905 false) (= (x440 x1092) x875) (= x1146 128) (>= x705 1) (= 58712522155081554758111416936196854083347032101528093538124555458258380259328 x554) (= (x419 32 2) x842) (= x800 4008608923) (= 2177768483 x793) (= x452 x945) (= x911 36) (<= 1 x296) (>= x452 1) (= false x819) (>= 127 x937) (<= x452 4294967295) (<= x121 127) (= false x946) (= x452 (x198 128)) (= false x248) (>= 4294967295 x875) (= 36 x544) (= false x973) (= x886 x985) (= (x849 x701) x705) (= false x9) (= false x1077)) (and (= x921 x204) (not (< x123 x898)) (>= 127 x139) (not (< x898 x204)) (= x989 x204) (>= x107 1) (= 371172950 x1058) (= false x530) (= x107 (x849 x333)) (<= x139 127) (= x194 false) (= (= x204 0) x361) (= x898 (x1215 (- x123 1)))))) (and (=> (and (not x361) (and (= x1199 (= x204 1)) (or (and x1199 (and (= x1130 x481) (= x714 x531) (= x91 x538))) (and (and (= x714 x433) (= x1151 x481) (= x538 x760) (= 2 x204)) (not x1199))))) x26) (=> (and x361 (and (= x839 x267) (= x1085 x657) (= x618 x360))) x820))) x1001))
(assert (x1161 x586))
(assert (x1161 x345))
(assert (= (and x710 x1180) x1070))
(assert (x1161 x492))
(assert (x362 57896044618658097711785492504343953926634992332820282019728792003956564819967))
(assert (= (and x810 x1157) x879))
(assert (x1161 x230))
(assert (x1161 x1027))
(assert (x1161 x537))
(assert (x1161 x332))
(assert (= (and x1136 x770) x161))
(assert (= (x551 (+ x842 x886)) (x551 x842)))
(assert (x1161 x714))
(assert (x1161 x554))
(assert (x1161 x129))
(assert (x1161 x806))
(assert (x1051 x1085))
(assert (x868 x1085))
(assert (x1161 x713))
(assert (x1161 x1146))
(assert (= x16 (or x223 x235)))
(assert (x373 x655))
(assert (= 0 (x551 441711766194596082395824375185729628956870974218904739530401550323154944)))
(assert (x1161 x1164))
(assert (x362 1000000000000000000))
(assert (x1161 x189))
(assert (x1161 x257))
(assert (= 0 (x551 1000000000000000000)))
(assert (x1161 x256))
(assert (x1161 x121))
(assert (x1161 x502))
(assert (x1161 x1122))
(assert (= x575 (=> (and (and (= (mod (* x611 x208) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x764) (= 1000000000000000000000000000 x400) (= (= x1010 0) x709) (= x721 (mod (* x611 x208) 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (not (>= (+ x1214 x498) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x1215 (- x181 (mod (ite (> x764 x721) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x1010) (= (x1215 (- x721 x764)) x181) (= (x624 (+ x498 x1214)) x713)) (or (and (not x709) (and (= x501 (mod (* x208 x611) 1000000000000000000000000000)) (= x312 (x1215 (- x1010 (mod (ite (> x501 x764) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x1215 (- x764 x501)) x651) (>= 999999999999999999999999999 x1010) (= (mod (* 862718293348820473429344482784628181556388621521298319395315527974912 x312) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x607) (= x1064 x38) (= x38 (mod (* x8 15501966263465142598656971426345627788199674109747006013765225610400761231029) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x624 (+ x607 x149)) x8) (= x149 (div x651 134217728)))) (and (and (= (div x764 1000000000000000000000000000) x577) (= x577 x1064)) x709))) x1020)))
(assert (x1051 x655))
(assert (x73 x1016))
(assert (x1161 x1130))
(assert (x1161 x839))
(assert (x362 115792089237316195423570985008687907853269984665639564039457584007913129639936))
(assert (x1161 x677))
(assert (x1161 x69))
(assert (x1161 x301))
(assert (x1161 x251))
(assert (x1161 x447))
(assert (x1161 x632))
(assert (x1161 x858))
(assert (= (or x557 x1209) x539))
(assert (x1161 x671))
(assert (x1161 x395))
(assert (x1161 x852))
(assert (x1161 x1135))
(assert (= (x781 x233 96) (div x233 79228162514264337593543950336)))
(assert (= x247 (or x879 x172)))
(assert (x1161 x886))
(assert (= x733 (and x692 x53)))
(assert (x1161 x1214))
(assert (= x770 (and (not x276) x266)))
(assert (x1161 x1013))
(assert (x1161 x504))
(assert (x1161 x532))
(assert (x1161 x360))
(assert (= (or x95 x785) x297))
(assert (x1161 x87))
(assert (x1161 x860))
(assert (x1161 x1189))
(assert (x1161 x875))
(assert (x1161 x313))
(assert (x1161 x304))
(assert (x1161 x971))
(assert (x1161 x836))
(assert (= (and (not x631) x697) x114))
(assert (x73 x556))
(assert (x1161 x237))
(assert (= (=> (and (= x199 x1016) (= x372 x79) (= x816 x1029)) x335) x824))
(assert (x1161 x717))
(assert (x1161 x1207))
(assert (= (x781 x164 224) (div x164 26959946667150639794667015087019630673637144422540572481103610249216)))
(assert (x874 x691))
(assert (x1161 x412))
(assert (x1161 x763))
(assert (= 32 (x1050 (x419 32 2))))
(assert (x1161 x736))
(assert (= (and x488 x146) x1134))
(assert (x1161 x1044))
(assert (x362 862718293348820473429344482784628181556388621521298319395315527974912))
(assert (x1161 x292))
(assert (x1161 x888))
(assert (x1161 x893))
(assert (x1161 x570))
(assert (x1161 x250))
(assert (x373 x1085))
(assert (x1161 x25))
(assert (x1161 x56))
(assert (x1161 x1003))
(assert (x874 x1021))
(assert (x1161 x67))
(assert (x1161 x687))
(assert (x1161 x1166))
(assert (= x266 (or x673 x34)))
(assert (x1161 x988))
(assert (x73 x766))
(assert (x1161 x966))
(assert (x1161 x147))
(assert (x1161 x208))
(assert (x1161 x195))
(assert (= x658 (and x33 (not x96))))
(assert (x1161 x99))
(assert (= x938 (and x1173 x1177)))
(assert (x1161 x490))
(assert (x1161 x405))
(assert (x1161 x522))
(assert (= (or x496 x960) x201))
(assert (x1161 x603))
(assert (x73 65535))
(assert (x1161 x1138))
(assert (x1161 x941))
(assert (x1161 x1167))
(assert (x1161 x580))
(assert (x1161 x337))
(assert (x1161 x500))
(assert (x1161 x1065))
(assert (x1161 x854))
(assert (x1161 x2))
(assert (x1161 x417))
(assert (= (x551 1766820104831717178943502833727831496196810259731196417549125097682370560) 0))
(assert (= (and x923 (not x1104)) x949))
(assert (x700 x460))
(assert (x1161 x322))
(assert (x1161 x555))
(assert (x73 411376139330301510538742295634145329387149138779864469507932160))
(assert (x1042 x287 2))
(assert (x1161 x233))
(assert (x1161 x1218))
(assert (x1161 x562))
(assert (x1108 x556))
(assert (x73 x816))
(assert (x1161 x171))
(assert (x362 6553500000000000000000000000))
(assert (x73 x70))
(assert (x1161 x59))
(assert (x1161 x1023))
(assert (= (x781 x689 224) (div x689 26959946667150639794667015087019630673637144422540572481103610249216)))
(assert (x1161 x641))
(assert (x1161 x448))
(assert (x1161 x840))
(assert (x1161 x665))
(assert (x1161 x442))
(assert (x1161 x149))
(assert (= (or x857 x550) x696))
(assert (x362 4294967294))
(assert (x1161 x572))
(assert (x1161 x204))
(assert (x1108 x448))
(assert (x1161 x968))
(assert (x1161 x164))
(assert (x1161 x450))
(assert (= (x551 78156646155174841979727994598816262306175212592076161876661508869554232690281) 0))
(assert (x1161 x769))
(assert (x874 x1045))
(assert (x73 x969))
(assert (x1161 x291))
(assert (x1161 x764))
(assert (x1161 x1193))
(assert (x1161 x82))
(assert (x1161 x55))
(assert (x1161 x1085))
(assert (x1161 x326))
(assert (= x581 (=> (and (or (and (and (= x1012 (div x319 134217728)) (= (x1215 (- x512 x930)) x319) (= x403 (mod (* x397 15501966263465142598656971426345627788199674109747006013765225610400761231029) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x930 (mod (* x825 x381) 1000000000000000000000000000)) (= x648 (mod (* x1166 862718293348820473429344482784628181556388621521298319395315527974912) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x624 (+ x1012 x648)) x397) (= x304 x403) (<= x1205 999999999999999999999999999) (= x1166 (x1215 (- x1205 (mod (ite (> x930 x512) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))))) (not x52)) (and x52 (and (= (div x512 1000000000000000000000000000) x884) (= x884 x304)))) (and (= (mod (* x381 x825) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x512) (= x1205 (x1215 (- x435 (mod (ite (> x512 x290) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= x891 1000000000000000000000000000) (= x52 (= 0 x1205)) (= x317 (x624 (+ x596 x517))) (= (mod (* x825 x381) 115792089237316195423570985008687907853269984665640564039457584007913129639935) x290) (= x435 (x1215 (- x290 x512))) (not (>= (+ x596 x517) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) x375)))
(assert (= x133 (and x16 x212)))
(assert (x1161 x825))
(assert (= (x781 x1043 16) (div x1043 65536)))
(assert (x1161 x184))
(assert (x1161 x1154))
(assert (x1161 x261))
(assert (= x1026 (and x987 x297)))
(assert (x1161 x72))
(assert (= (and (not x162) x489) x785))
(assert (x1161 x653))
(assert (x1161 x792))
(assert (x1161 x232))
(assert (= x309 (or x733 x246)))
(assert (x1161 x691))
(assert (=> (= 0 x708) (= 0 (div x997 x708))))
(assert (x1161 x629))
(assert (x1161 x642))
(assert (x1161 x655))
(assert (= x697 (or x546 x470)))
(assert (x1161 x50))
(assert (x1161 x668))
(assert (x1161 x1074))
(assert (x1161 x126))
(assert (x1161 x187))
(assert (x1161 x815))
(assert (x1161 x911))
(assert (= (div x380 79228162514264337593543950336) (x781 x380 96)))
(assert (= x999 (=> (and (or (and (and (= x863 x611) (= x863 (div x1217 x70))) x983) (and (not x983) (and (= (div x334 x11) x738) (= (div x1113 x11) x1023) (= x5 (mod (* x446 x1096) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x1189 (mod (* 1000000000000000000000000000 x622) x70)) (= x674 (x1215 (- 2 x704))) (= x1096 (x491 2 x287)) (= x220 (x1215 (- 0 x70))) (= (mod (* x1004 x566) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x382) (= (x594 x70 x220) x11) (= (mod (* x1096 x40) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x756) (= (mod (* x1027 x382) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x492) (= x334 (x1215 (- 0 x11))) (= x1113 (x1215 (- x1217 x1189))) (= x704 (mod (* x40 x5) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x446 (x1215 (- 2 x756))) (= x677 (mod (* x158 x40) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x415 x226) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1045) (= x1004 (x1215 (- 2 x1095))) (= (div x70 x11) x40) (>= 6553499999999999999999999999 x48) (= x415 (x624 (+ 1 x738))) (= (mod (* x566 x40) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1095) (= x751 (mod (* x40 x382) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* 3 x40) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x287) (= x959 (mod (* (x385 x1023 x1045) x492) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (< x48 x70) (= x226 (x1215 (- x48 (mod (ite (< x1217 x1189) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= x798 (mod (* x322 x158) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x1215 (- 2 x677)) x322) (= (mod (* x674 x5) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x158) (= x1027 (x1215 (- 2 x751))) (= x959 x611) (= x1090 (x1215 (- 2 x160))) (= x566 (mod (* x798 x1090) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x40 x798) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x160)))) (and (= x983 (= x48 0)) (= x928 (* 1000000000000000000000000000 x622)) (>= 79228162514264337593543950335 x622) (= (* x622 1000000000000000000000000000) x1217) (= (x1215 (- x545 (mod (ite (< x928 x1217) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x48) (= x288 1000000000000000000000000000) (= x545 (x1215 (- x928 x1217))) (= (x1215 (- x239 x503)) x622))) x725)))
(assert (x1161 x321))
(assert (x1161 x54))
(assert (= 0 (x551 57896044618658097711785492504343953926634992332820282019728792003956564819967)))
(assert (x1161 x534))
(assert (x1161 x883))
(assert (x1161 x939))
(assert (x1161 x1004))
(assert (x1161 x1113))
(assert (x73 x220))
(assert (x1108 x816))
(assert (x1161 x876))
(assert (x1161 x238))
(assert (x1161 x991))
(assert (x1161 x1066))
(assert (x1161 x348))
(assert (x1161 x40))
(assert (x1161 x449))
(assert (x1161 x333))
(assert (x362 100000000000000000000000))
(assert (x1161 x400))
(assert (x1161 x277))
(assert (x1161 x352))
(assert (x1161 x49))
(assert (x1161 x596))
(assert (x1161 x978))
(assert (= (and x309 (not x983)) x734))
(assert (x1161 x427))
(assert (x1161 x889))
(assert (x1161 x331))
(assert (= (and (not x866) x368) x1158))
(assert (x1161 x1112))
(assert (=> (= x209 0) (= 0 (div x762 x209))))
(assert (= x53 (or x330 x410)))
(assert (x1161 x75))
(assert (x1161 x862))
(assert (x1161 x1040))
(assert (x1161 x38))
(assert (= (x551 371172950) 0))
(assert (x1161 x891))
(assert (x362 79228162514264337593543950335))
(assert (x362 10000000000000000000))
(assert (=> (= 0 x70) (= (div x1217 x70) 0)))
(assert (= (=> (and (= x538 x839) (= x714 x360) (= x481 x1085)) x820) x26))
(assert (x1161 x882))
(assert (x1161 x11))
(assert (x1161 x215))
(assert (= (x551 (+ x283 x515)) (x551 x515)))
(assert (x1161 x1047))
(assert (x73 1766820104831717178943502833727831496196810259731196417549125097682370560))
(assert (x1161 x972))
(assert (x1161 x702))
(assert (x1161 x416))
(assert (x1161 x823))
(assert (x1161 x664))
(assert (= x1025 (and (not x179) x807)))
(assert (x1161 x916))
(assert (x1051 x867))
(assert (x1161 x495))
(assert (x1161 x455))
(assert (x1161 x1118))
(assert (x1161 x106))
(assert (x1161 x381))
(assert (= (x419 32 2) (x551 (x419 32 2))))
(assert (= (x781 x1207 224) (div x1207 26959946667150639794667015087019630673637144422540572481103610249216)))
(assert (x1161 x1106))
(assert (= (and (not x1078) x165) x1163))
(assert (x1161 x467))
(assert (x1161 x547))
(assert (x1161 x154))
(assert (x1161 x626))
(assert (x1108 x83))
(assert (x362 4008608923))
(assert (x1161 x280))
(assert (x1161 x856))
(assert (x1161 x124))
(assert (x1161 x267))
(assert (x700 x472))
(assert (x73 x147))
(assert (x1161 x1128))
(assert (= x1061 (=> (and (= x1178 x208) (= x1178 (div x41 x869))) x797)))
(assert (x362 6553499999999999999999999999))
(assert (x1161 x1028))
(assert (x1161 x636))
(assert (x1161 x1011))
(assert (x1161 x947))
(assert (x1161 x538))
(assert (x1161 x17))
(assert (x1161 x511))
(assert (x362 78156646155174841979727994598816262306175212592076161876661508869554232690281))
(assert (x1161 x751))
(assert (x1161 x922))
(assert (x1161 x683))
(assert (x1161 x884))
(assert (x1161 x414))
(assert (x362 4266371907))
(assert (x1161 x739))
(assert (x1161 x811))
(assert (x1161 x285))
(assert (x1161 x778))
(assert (x362 371172950))
(assert (= (and x247 x155) x235))
(assert (x1161 x821))
(assert (x1161 x766))
(assert (x73 x867))
(assert (= (div x99 5192296858534827628530496329220096) (x781 x99 112)))
(assert (x1161 x929))
(assert (x1161 x411))
(assert (x1161 x831))
(assert (x73 x448))
(assert (x362 1361925195015220700152000000000000000000000000000))
(assert (x1161 x529))
(assert (x362 2177768483))
(assert (x1161 x432))
(assert (= x401 (and x859 x351)))
(assert (x1161 x312))
(assert (x1161 x1219))
(assert (= (and x165 x1078) x630))
(assert (x1161 x518))
(assert (x1161 x881))
(assert (= (x551 100000000000000000000000) 0))
(assert (x1161 x1010))
(assert (x125 x372))
(assert (x1161 x1139))
(assert (x1161 x1059))
(assert (x1161 x1056))
(assert (x1161 x651))
(assert (x1161 x885))
(assert (x1161 x445))
(assert (x1161 x803))
(assert (x73 x997))
(assert (x1161 x425))
(assert (x1161 x904))
(assert (= (x551 2177768483) 0))
(assert (x1161 x1063))
(assert (x1161 x787))
(assert (= (div x331 65536) (x781 x331 16)))
(assert (x1161 x407))
(assert (x1108 x1016))
(assert (x1161 x845))
(assert (x1161 x160))
(assert (x1042 x472 2))
(assert (x1161 x737))
(assert (x1161 x1109))
(assert (x1161 x190))
(assert (x1161 x688))
(assert (=> (= x869 0) (= (div x41 x869) 0)))
(assert (x1161 x258))
(assert (x1161 x242))
(assert (x1161 x963))
(assert (x1161 x203))
(assert (= (or x519 x1204) x808))
(assert (x1161 x936))
(assert (= (x551 4294967295) 0))
(assert (x1161 x213))
(assert (x1161 x134))
(assert (x1161 x638))
(assert (x1161 x545))
(assert (x1161 x84))
(assert (= 0 (x551 115792089237316195423412528683659379178082896764970564039457584007913129639936)))
(assert (x1161 x1029))
(assert (x1161 x380))
(assert (x1161 x722))
(assert (= x633 (or x133 x1163 x630 x670 x1057)))
(assert (x1161 x743))
(assert (= (=> (and (or (and (and (= (x624 (+ 1 x207)) x573) (= (div x997 x708) x49) (= x745 (div x257 x708)) (= (mod (* x823 x736) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x280) (= (x1215 (- 2 x600)) x665) (< x87 x997) (= (x1215 (- 2 x93)) x1188) (= (x1215 (- 2 x1013)) x56) (= (x1215 (- 0 x708)) x941) (= x80 (mod (* (x385 x745 x332) x913) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x929 x56) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x736) (= x708 (x594 x997 x626)) (= (x1215 (- 2 x14)) x823) (<= x87 6553499999999999999999999999) (= x1140 (mod (* x49 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x126 (x1215 (- x87 (mod (ite (< x229 x378) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x1215 (- 0 x997)) x626) (= x293 (mod (* x722 x28) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x257 (x1215 (- x229 x378))) (= x1184 (mod (* x665 x293) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x1188 x1184) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x929) (= x332 (mod (* x573 x126) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x491 2 x1140) x28) (= (mod (* x803 1000000000000000000000000000) x997) x378) (= x722 (x1215 (- 2 x620))) (= x913 (mod (* x250 x280) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x1013 (mod (* x49 x929) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x250 (x1215 (- 2 x1182))) (= x80 x455) (= x14 (mod (* x49 x736) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (div x941 x708) x207) (= (mod (* x1184 x49) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x93) (= x620 (mod (* x49 x28) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x280 x49) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x1182) (= (mod (* x49 x293) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x600)) (not x1133)) (and x1133 (and (= x432 (div x229 x997)) (= x455 x432)))) (and (= (x1215 (- x717 x229)) x1117) (= (x1215 (- x1117 (mod (ite (< x717 x229) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x87) (= (x1215 (- x395 x256)) x221) (= x717 (mod (* 1000000000000000000000000000 x803) 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (<= 1 x997) (= x1076 (x1215 (- x221 x350))) (= 1000000000000000000000000000 x693) (or (and (>= 115792089237316195423570985008687907853269984665639564039457584007913129639936 x229) (>= x229 115792089237316195423412528683659379178082896764970564039457584007913129639936)) (>= 1361925195015220700152000000000000000000000000000 x229)) (= x229 (ite (<= 0 (* (ite (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x803) x803 (- x803 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 1000000000000000000000000000)) (* 1000000000000000000000000000 (ite (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x803) x803 (- x803 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ (* 1000000000000000000000000000 (ite (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x803) x803 (- x803 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (= x87 0) x1133) (>= 6553500000000000000000000000 x997) (= (ite (< x395 x1076) 0 x1076) x803))) x483) x788))
(assert (x1161 x619))
(assert (x1161 x1058))
(assert (x1161 x446))
(assert (x1161 x1036))
(assert (= (or x740 x1158) x172))
(assert (x1161 x1217))
(assert (x1161 x503))
(assert (x1161 x181))
(assert (< (x419 32 2) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x1161 x660))
(assert (x1161 x457))
(assert (x1161 x170))
(assert (x1161 x951))
(assert (x1161 x520))
(assert (x1161 x394))
(assert (x1161 x220))
(assert (= (x551 (+ x527 x473)) (x551 x527)))
(assert (x1161 x319))
(assert (x1075 x448))
(assert (x1161 x7))
(assert (x1108 x360))
(assert (= (and (not x1190) x799) x496))
(assert (x1161 x293))
(assert (x1161 x41))
(assert (x1161 x830))
(assert (x1161 x85))
(assert (x362 6277101735386680763835789423128438253588091106870490562560))
(assert (x1161 x606))
(assert (x1161 x499))
(assert (x1161 x646))
(assert (= (x551 999999999999999999999999999) 0))
(assert (x73 x1085))
(assert (x1161 x374))
(assert (< 10000 (x419 32 2)))
(assert (x1161 x777))
(assert (x1161 x1181))
(assert (x1161 x984))
(assert (x1161 x640))
(assert (x1161 x674))
(assert (x1161 x438))
(assert (x1161 x245))
(assert (x1161 x268))
(assert (x1161 x957))
(assert (x1161 x1198))
(assert (x1161 x760))
(assert (x1161 x346))
(assert (x1161 x444))
(assert (x1161 x627))
(assert (= x673 (and x539 (not x57))))
(assert (x1161 x553))
(assert (x1161 x398))
(assert (x1161 x1127))
(assert (= (x551 6553499999999999999999999999) 0))
(assert (x1161 x18))
(assert (x1161 x108))
(assert (x1161 x107))
(assert (x1161 x32))
(assert (= x923 (or x12 x533)))
(assert (= (div x702 79228162514264337593543950336) (x781 x702 96)))
(assert (x1161 x896))
(assert (x1161 x284))
(assert (= (and x247 (not x155)) x723))
(assert (x1108 x766))
(assert (x1161 x110))
(assert (x1161 x930))
(assert (x362 134217728))
(assert (x1161 x756))
(assert (= x174 (and x633 (not x361))))
(assert (= (x551 4266371907) 0))
(assert (x1161 x1120))
(assert (x1161 x159))
(assert (x868 x655))
(assert (x1161 x1148))
(assert (x1161 x300))
(assert (= (=> (and (and (not (>= (+ x503 x1064) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (> x1018 x713) x179) (= x1018 (x624 (+ x1064 x503)))) (or (and (not x179) (and (= x434 x1024) (= 4 x534) (= x802 x434) (= 27 x837) (= (* 100000000000000000000000 x652) x802) (= x352 x713))) (and (and (= x777 27) (= x1018 x352) (= x370 x1024) (= x956 x370) (= (* 100000000000000000000000 x652) x956) (= x860 4)) x179))) x116) x1020))
(assert (x1075 x816))
(assert (= (div x752 26959946667150639794667015087019630673637144422540572481103610249216) (x781 x752 224)))
(assert (= x601 (and x920 x456)))
(assert (= (and x697 x631) x168))
(assert (x1161 x1153))
(assert (= (and (not x835) x723) x767))
(assert (x1161 x643))
(assert (x1161 x863))
(assert (x1161 x1140))
(assert (= (div x761 79228162514264337593543950336) (x781 x761 96)))
(assert (x1161 x273))
(assert (= x1137 (=> (and (or (and (and (= x352 x748) (= x510 (* x652 100000000000000000000000)) (= x251 4) (= 27 x843) (= x510 x966) (= x1024 x966)) x1104) (and (and (= x353 (* x652 100000000000000000000000)) (= x1174 x1024) (= x353 x1174) (= x352 x238) (= x369 4) (= 27 x113)) (not x1104))) (and (not (>= (+ x836 x872) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x624 (+ x836 x872)) x748) (= x1104 (> x748 x238)))) x116)))
(assert (x1161 x269))
(assert (x1161 x83))
(assert (x1161 x369))
(assert (= x222 (=> (and (and (<= x571 1461501637330902918203684832716283019655932542975) (>= x604 0) (<= x115 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (< 0 (x849 x502)) x1216) (<= x701 1461501637330902918203684832716283019655932542975) (>= 2 x430) (not (= x333 x701)) (>= x1041 0) (<= x249 115792089237316195423570985008687907853269984665640564039457584007913129639935) x1089 (>= 1461501637330902918203684832716283019655932542975 x502) (<= 1 x701) (= x574 36) (<= 1 x502) (<= x1203 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= x537 1461501637330902918203684832716283019655932542975) (<= 0 x249) (<= x275 1461501637330902918203684832716283019655932542975) (<= 1 x333) (<= 0 x115) (>= 2 x604) x1186 (<= 0 x1203) (not (= x333 x502)) (= x1168 x430) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1041) (<= x313 1461501637330902918203684832716283019655932542975) x1216 (= (< 0 (x849 x333)) x1186) (not (= x701 x502)) (<= 0 x430) (= (< 0 (x849 x701)) x1089) (<= x333 1461501637330902918203684832716283019655932542975)) (and (and (not (> x968 x84)) (= (= 0 x968) x810) (= x1036 x968) (= x995 false) (<= 1 x828) (= false x675) (= 371172950 x495) (not (< x123 x84)) (>= 127 x1128) (= x1032 x968) (= (x1215 (- x123 1)) x84) (= x828 (x849 x333)) (>= 127 x1128)) (and (<= 1 x605) (= x19 false) (= x2 2177768483) (= x1068 36) (= x619 x953) (= x899 128) (= false x1022) (<= x325 127) (= x605 (x849 x701)) (= x67 (x849 x333)) (= x457 (x1017 128)) (= false x614) (= x129 4008608923) (= x1121 false) (= x340 false) (= (x419 32 2) x513) (= false x396) (<= x414 4294967295) (= x961 (+ x786 x513)) (= x457 x559) (>= 127 x570) (= x430 x1032) (<= x457 4294967294) (= false x112) (= x786 x619) (= x1168 x786) (= x414 (x440 x961)) (= x903 false) (<= 1 x67) (= false x812) (= 58712522155081554758111416936196854083347032101528093538124555458258380259328 x706) (= false x217) (= 36 x896) (<= x325 127) (<= x570 127)))) (and (=> (and (and (= x766 x618) (= x657 x867) (= x267 x448)) x810) x302) (=> (and (not x810) (and (or (and (and (= x187 x760) (= x458 x433) (= 2 x968) (= x831 x1151)) (not x866)) (and x866 (and (= x91 x187) (= x1130 x831) (= x458 x531)))) (= (= x968 1) x866))) x848)))))
(assert (x1161 x574))
(assert (x1161 x275))
(assert (x73 6277101735386680763835789423128438253588091106870490562560))
(assert (x73 x839))
(assert (x1161 x163))
(assert (x1161 x1123))
(assert (x1161 x183))
(assert (= x6 (or x114 x168)))
(assert (= x519 (and (not x1081) x938)))
(assert (x1161 x523))
(assert (x1161 x1049))
(assert (x874 x535))
(assert (x1161 x74))
(assert (= x409 (=> (and (= x241 (x594 411376139330301510538742295634145329387149138779864469507932160 x655)) (= x553 (x440 x10)) (= x787 x356) (= x456 (= 0 x412)) (= x690 (x594 26959535291011309493156476344723991336010898738574164086137773096960 x655)) (= x239 (x781 x59 96)) (= x932 (* 100000000000000000000000 x1115)) (= 8 x1112) (= 36 x1044) (= (x849 x701) x1074) (= false x1048) (= x498 (x781 x461 16)) (= (x594 65535 x655) x652) (= x89 704) (<= x553 4294967295) (= (+ x527 x473) x10) (= false x844) (<= x1123 4294967295) (= 416 x486) (>= 127 x906) (= x152 (div x795 31536000)) (= x188 x795) (= x818 false) (= (x781 x241 112) x503) (= (x594 1766820104831717178943502833727831496196810259731196417549125097682370560 x655) x164) (= 27 x579) (= false x295) (= x967 (x594 79228162514264337593543950335 x556)) (= x984 (x781 x632 96)) (= x1147 2177768483) (= x70 x932) (= x106 4) (= x39 58712522155081554758111416936196854083347032101528093538124555458258380259328) (= (x594 5192296858534827628530496329154560 x655) x461) (= 27 x856) (= x632 (x594 6277101735386680763835789423128438253588091106870490562560 x556)) (= (x712 704) x1123) (= (x594 6277101735386680763835789423128438253588091106870490562560 x83) x59) (<= x906 127) (>= x1074 1) (= (x419 32 2) x527) (= (x781 x164 224) x412) (= x188 (* x1123 10000000000000000000)) (= x944 (x594 79228162514264337593543950335 x83)) (= x1115 (x781 x690 208))) (and (=> (and (and (= x407 x1024) (= x1079 (* x652 100000000000000000000000)) (= 4 x462) (= x239 x352) (= x407 x1079) (= 27 x183)) x456) x116) (=> (and (= (= 0 x873) x393) (not x456)) (and (=> (and (= 0 x208) x393) x797) (=> (and (not x393) (and (or (and (and (= x281 (mod (* x314 441711766194596082395824375185729628956870974218904739530401550323154944) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (div x227 262144) x586) (= x81 (mod (* x399 x873) 1000000000000000000)) (= (x1215 (- x490 x81)) x227) (<= 1 x568) (= (x1215 (- x364 (mod (ite (< x490 x81) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x314) (= x869 x568) (= x568 (mod (* 78156646155174841979727994598816262306175212592076161876661508869554232690281 x1160) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x1160 (x624 (+ x586 x281))) (<= x364 999999999999999999)) (not x595)) (and x595 (and (<= 1000000000000000000 x490) (= x1039 x869) (= x1039 (div x490 1000000000000000000))))) (and (= x595 (= x364 0)) (= (mod (* x873 x399) 115792089237316195423570985008687907853269984665640564039457584007913129639935) x727) (= x743 18) (= 1000000000000000000 x627) (= x153 x399) (= (mod (* x399 x873) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x490) (= 4 x636) (= x153 (* 100000000000000 x412)) (= (x1215 (- x727 x490)) x755) (= x364 (x1215 (- x755 (mod (ite (< x727 x490) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))) x1061)))))))
(assert (x1161 x338))
(assert (x1161 x306))
(assert (= (div x876 5192296858534827628530496329220096) (x781 x876 112)))
(assert (x1161 x27))
(assert (= x589 (and x595 x464)))
(assert (x125 x655))
(assert (x1161 x578))
(assert (x1161 x969))
(assert (x558 x70 x220))
(assert (x1161 x1178))
(assert (= (and (not x838) x744) x1180))
(assert (x1161 x1039))
(assert (x1161 x1053))
(assert (x1161 x1147))
(assert (x1161 x46))
(assert (x1161 x1016))
(assert (= 0 (x551 862718293348820473429344482784628181556388621521298319395315527974912)))
(assert (= 0 (x551 10000000000000000000)))
(assert (x1161 x1054))
(assert (x1161 x244))
(assert (x1161 x465))
(assert (x1161 x976))
(check-sat)
(exit)
