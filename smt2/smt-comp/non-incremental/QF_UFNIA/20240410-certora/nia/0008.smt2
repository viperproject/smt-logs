(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Certora
Generated on: 2024-04-10
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x401 () Bool)
(declare-fun x63 () Bool)
(declare-fun x132 () Int)
(declare-fun x154 () Int)
(declare-fun x229 () Int)
(declare-fun x328 () Int)
(declare-fun x28 () Bool)
(declare-fun x128 () Int)
(declare-fun x237 () Int)
(declare-fun x338 () Bool)
(declare-fun x226 () Bool)
(declare-fun x85 () Int)
(declare-fun x391 () Int)
(declare-fun x275 () Int)
(declare-fun x64 () Int)
(declare-fun x158 () Bool)
(declare-fun x102 () Int)
(declare-fun x468 () Int)
(declare-fun x44 () Bool)
(declare-fun x32 () Int)
(declare-fun x269 () Int)
(declare-fun x53 () Int)
(declare-fun x351 () Int)
(declare-fun x318 () Bool)
(declare-fun x90 () Int)
(declare-fun x315 () Int)
(declare-fun x362 () Bool)
(declare-fun x183 () Int)
(declare-fun x57 () Int)
(declare-fun x311 () Int)
(declare-fun x135 () Bool)
(declare-fun x220 () Int)
(declare-fun x307 () Int)
(declare-fun x430 () Bool)
(declare-fun x144 () Int)
(declare-fun x109 () Bool)
(declare-fun x193 () Int)
(declare-fun x433 () Int)
(declare-fun x323 () Bool)
(declare-fun x59 () Bool)
(declare-fun x27 () Bool)
(declare-fun x345 () Int)
(declare-fun x421 () Bool)
(declare-fun x509 () Int)
(declare-fun x381 () Int)
(declare-fun x279 () Bool)
(declare-fun x295 () Int)
(declare-fun x35 () Bool)
(declare-fun x176 () Int)
(declare-fun x404 () Bool)
(declare-fun x143 () Int)
(declare-fun x66 () Int)
(declare-fun x22 () Bool)
(declare-fun x197 () Int)
(declare-fun x417 () Int)
(declare-fun x516 () Int)
(declare-fun x460 () Int)
(declare-fun x292 () Int)
(declare-fun x353 () Int)
(declare-fun x230 () Bool)
(declare-fun x480 () Bool)
(declare-fun x173 () Int)
(declare-fun x162 () Bool)
(declare-fun x250 () Bool)
(declare-fun x482 () Bool)
(declare-fun x200 () Int)
(declare-fun x437 () Int)
(declare-fun x60 () Bool)
(declare-fun x223 () Bool)
(declare-fun x171 () Bool)
(declare-fun x475 () Int)
(declare-fun x140 () Bool)
(declare-fun x408 () Int)
(declare-fun x454 () Int)
(declare-fun x142 () Int)
(declare-fun x240 () Bool)
(declare-fun x296 () Int)
(declare-fun x155 () Int)
(declare-fun x324 () Int)
(declare-fun x304 (Int Int) Int)
(declare-fun x387 () Int)
(declare-fun x10 () Int)
(declare-fun x329 () Bool)
(declare-fun x217 () Bool)
(declare-fun x267 () Int)
(declare-fun x446 () Int)
(declare-fun x502 () Bool)
(declare-fun x285 () Int)
(declare-fun x443 () Int)
(declare-fun x294 () Bool)
(declare-fun x286 () Int)
(declare-fun x167 () Int)
(declare-fun x271 () Int)
(declare-fun x356 () Int)
(declare-fun x313 () Bool)
(declare-fun x347 () Bool)
(declare-fun x194 () Int)
(declare-fun x394 () Bool)
(declare-fun x188 () Int)
(declare-fun x163 () Int)
(declare-fun x289 () Int)
(declare-fun x68 () Int)
(declare-fun x282 () Int)
(declare-fun x306 () Bool)
(declare-fun x33 () Int)
(declare-fun x91 () Int)
(declare-fun x507 () Int)
(declare-fun x58 () Bool)
(declare-fun x26 () Int)
(declare-fun x187 () Int)
(declare-fun x81 () Int)
(declare-fun x139 () Bool)
(declare-fun x185 () Int)
(declare-fun x127 () Int)
(declare-fun x283 () Int)
(declare-fun x161 () Int)
(declare-fun x361 () Bool)
(declare-fun x348 () Bool)
(declare-fun x30 (Int) Int)
(declare-fun x19 () Bool)
(declare-fun x424 () Int)
(declare-fun x314 () Bool)
(declare-fun x336 () Bool)
(declare-fun x349 () Int)
(declare-fun x310 () Int)
(declare-fun x92 () Bool)
(declare-fun x327 () Int)
(declare-fun x465 () Int)
(declare-fun x378 () Int)
(declare-fun x234 () Int)
(declare-fun x457 () Int)
(declare-fun x501 () Int)
(declare-fun x320 () Int)
(declare-fun x406 () Int)
(declare-fun x459 () Bool)
(declare-fun x129 () Int)
(declare-fun x303 () Int)
(declare-fun x370 () Int)
(declare-fun x302 () Bool)
(declare-fun x98 (Int) Int)
(declare-fun x299 () Int)
(declare-fun x503 (Int) Int)
(declare-fun x487 () Int)
(declare-fun x195 () Bool)
(declare-fun x114 () Int)
(declare-fun x148 () Int)
(declare-fun x186 (Int) Int)
(declare-fun x449 (Int) Int)
(declare-fun x363 (Int) Int)
(declare-fun x207 () Bool)
(declare-fun x239 () Int)
(declare-fun x360 () Bool)
(declare-fun x511 () Int)
(declare-fun x491 () Bool)
(declare-fun x510 () Int)
(declare-fun x190 () Int)
(declare-fun x159 () Int)
(declare-fun x86 () Int)
(declare-fun x405 () Bool)
(declare-fun x316 () Bool)
(declare-fun x479 () Bool)
(declare-fun x192 () Int)
(declare-fun x184 () Bool)
(declare-fun x476 () Int)
(declare-fun x130 () Bool)
(declare-fun x515 () Bool)
(declare-fun x293 () Int)
(declare-fun x71 () Int)
(declare-fun x498 () Int)
(declare-fun x117 () Int)
(declare-fun x486 () Bool)
(declare-fun x518 () Int)
(declare-fun x160 () Bool)
(declare-fun x312 () Bool)
(declare-fun x249 () Bool)
(declare-fun x191 () Bool)
(declare-fun x206 () Bool)
(declare-fun x354 () Int)
(declare-fun x36 () Bool)
(declare-fun x4 () Int)
(declare-fun x247 () Int)
(declare-fun x436 (Int) Int)
(declare-fun x40 () Bool)
(declare-fun x232 () Int)
(declare-fun x344 () Int)
(declare-fun x253 () Int)
(declare-fun x78 () Int)
(declare-fun x504 () Int)
(declare-fun x278 (Int) Int)
(declare-fun x513 () Bool)
(declare-fun x88 () Int)
(declare-fun x325 () Bool)
(declare-fun x89 () Int)
(declare-fun x444 () Int)
(declare-fun x274 () Int)
(declare-fun x257 () Bool)
(declare-fun x227 () Bool)
(declare-fun x228 () Int)
(declare-fun x106 () Bool)
(declare-fun x39 () Int)
(declare-fun x440 () Int)
(declare-fun x1 () Int)
(declare-fun x382 () Bool)
(declare-fun x397 () Bool)
(declare-fun x233 () Int)
(declare-fun x8 () Bool)
(declare-fun x418 (Int) Bool)
(declare-fun x500 () Bool)
(declare-fun x236 () Bool)
(declare-fun x309 () Bool)
(declare-fun x412 () Bool)
(declare-fun x222 () Bool)
(declare-fun x110 (Int) Int)
(declare-fun x467 () Int)
(declare-fun x9 () Bool)
(declare-fun x99 (Int) Int)
(declare-fun x483 () Bool)
(declare-fun x499 () Int)
(declare-fun x357 () Bool)
(declare-fun x519 () Bool)
(declare-fun x298 () Int)
(declare-fun x434 () Int)
(declare-fun x415 () Int)
(declare-fun x469 (Int Int) Int)
(declare-fun x189 () Bool)
(declare-fun x455 () Bool)
(declare-fun x16 () Bool)
(declare-fun x258 () Int)
(declare-fun x107 () Int)
(declare-fun x215 () Bool)
(declare-fun x199 () Int)
(declare-fun x438 () Int)
(declare-fun x426 () Int)
(declare-fun x461 () Int)
(declare-fun x7 () Int)
(declare-fun x145 () Int)
(declare-fun x108 () Int)
(declare-fun x49 () Int)
(declare-fun x359 () Int)
(declare-fun x214 () Bool)
(declare-fun x339 (Int Int) Int)
(declare-fun x400 () Bool)
(declare-fun x452 () Int)
(declare-fun x168 () Bool)
(declare-fun x435 () Int)
(declare-fun x305 () Bool)
(declare-fun x265 () Int)
(declare-fun x205 () Bool)
(declare-fun x248 () Bool)
(declare-fun x241 () Int)
(declare-fun x520 () Bool)
(declare-fun x46 () Int)
(declare-fun x116 () Bool)
(declare-fun x141 () Int)
(declare-fun x61 () Bool)
(declare-fun x422 () Bool)
(declare-fun x126 () Bool)
(declare-fun x170 () Bool)
(declare-fun x470 () Int)
(declare-fun x276 () Bool)
(declare-fun x74 () Bool)
(declare-fun x96 () Int)
(declare-fun x201 () Int)
(declare-fun x133 () Bool)
(declare-fun x280 () Int)
(declare-fun x65 () Int)
(declare-fun x246 () Int)
(declare-fun x374 () Bool)
(declare-fun x34 (Int) Int)
(declare-fun x54 () Int)
(declare-fun x522 () Bool)
(declare-fun x365 (Int Int Int) Int)
(declare-fun x466 () Bool)
(declare-fun x462 () Int)
(declare-fun x409 () Int)
(declare-fun x125 () Int)
(declare-fun x477 () Bool)
(declare-fun x423 () Int)
(declare-fun x156 () Bool)
(declare-fun x113 () Int)
(declare-fun x97 () Int)
(declare-fun x165 () Bool)
(declare-fun x390 () Bool)
(declare-fun x402 () Int)
(declare-fun x367 () Bool)
(declare-fun x471 () Int)
(declare-fun x506 () Bool)
(declare-fun x120 () Int)
(declare-fun x95 () Bool)
(declare-fun x136 () Int)
(declare-fun x204 () Bool)
(declare-fun x284 () Bool)
(declare-fun x342 () Bool)
(declare-fun x103 () Int)
(declare-fun x42 () Bool)
(declare-fun x384 () Int)
(declare-fun x105 () Bool)
(declare-fun x87 (Int) Int)
(declare-fun x439 () Bool)
(declare-fun x450 () Int)
(declare-fun x82 () Bool)
(declare-fun x419 () Int)
(declare-fun x138 () Int)
(declare-fun x521 () Int)
(declare-fun x31 () Int)
(declare-fun x157 () Bool)
(declare-fun x371 () Int)
(declare-fun x300 () Bool)
(declare-fun x413 () Bool)
(declare-fun x174 () Int)
(declare-fun x474 () Int)
(declare-fun x251 () Int)
(declare-fun x297 () Bool)
(declare-fun x277 () Bool)
(declare-fun x243 () Int)
(declare-fun x411 () Bool)
(declare-fun x210 () Bool)
(declare-fun x377 () Int)
(declare-fun x301 () Int)
(declare-fun x73 () Bool)
(declare-fun x368 () Int)
(declare-fun x153 () Bool)
(declare-fun x373 () Bool)
(declare-fun x255 () Int)
(declare-fun x428 () Bool)
(declare-fun x25 () Bool)
(declare-fun x213 () Bool)
(declare-fun x358 (Int) Int)
(declare-fun x485 () Bool)
(declare-fun x244 () Bool)
(declare-fun x209 () Bool)
(declare-fun x196 () Int)
(declare-fun x93 () Bool)
(declare-fun x458 () Bool)
(declare-fun x263 () Int)
(declare-fun x366 (Int) Int)
(declare-fun x198 () Int)
(declare-fun x308 () Bool)
(declare-fun x20 (Int) Int)
(declare-fun x45 () Int)
(declare-fun x254 () Bool)
(declare-fun x334 () Int)
(declare-fun x379 () Int)
(declare-fun x122 () Bool)
(declare-fun x464 () Int)
(declare-fun x517 () Int)
(declare-fun x447 () Int)
(declare-fun x80 () Bool)
(declare-fun x395 () Bool)
(declare-fun x177 () Int)
(declare-fun x478 () Bool)
(declare-fun x287 () Bool)
(declare-fun x146 () Bool)
(declare-fun x202 () Bool)
(declare-fun x343 () Bool)
(declare-fun x118 () Bool)
(declare-fun x512 () Int)
(declare-fun x75 () Int)
(declare-fun x451 () Int)
(declare-fun x43 () Int)
(declare-fun x208 () Int)
(declare-fun x69 () Bool)
(declare-fun x37 () Int)
(declare-fun x182 () Bool)
(declare-fun x494 () Int)
(declare-fun x259 () Bool)
(declare-fun x111 () Int)
(declare-fun x256 () Bool)
(declare-fun x115 () Int)
(declare-fun x352 () Bool)
(declare-fun x330 () Bool)
(declare-fun x445 () Bool)
(declare-fun x231 () Int)
(declare-fun x383 () Int)
(declare-fun x29 () Bool)
(declare-fun x448 (Int) Int)
(declare-fun x441 () Int)
(declare-fun x496 () Int)
(declare-fun x123 () Bool)
(declare-fun x134 () Int)
(declare-fun x508 (Int) Int)
(declare-fun x17 () Int)
(declare-fun x119 () Int)
(declare-fun x393 () Int)
(declare-fun x337 (Int Int) Int)
(declare-fun x112 () Bool)
(declare-fun x472 () Bool)
(declare-fun x55 () Bool)
(declare-fun x151 () Int)
(declare-fun x62 () Int)
(declare-fun x218 () Bool)
(declare-fun x212 (Int) Int)
(declare-fun x164 () Int)
(declare-fun x369 () Int)
(declare-fun x493 () Int)
(declare-fun x456 () Int)
(declare-fun x224 () Int)
(declare-fun x67 () Int)
(declare-fun x14 () Bool)
(declare-fun x442 () Int)
(declare-fun x76 () Bool)
(declare-fun x23 () Int)
(declare-fun x403 () Bool)
(declare-fun x101 () Int)
(declare-fun x178 () Int)
(declare-fun x169 (Int) Int)
(declare-fun x137 () Int)
(declare-fun x149 () Bool)
(declare-fun x376 () Int)
(declare-fun x332 () Int)
(declare-fun x38 () Bool)
(declare-fun x410 () Bool)
(declare-fun x21 () Int)
(declare-fun x319 () Int)
(declare-fun x416 () Bool)
(declare-fun x94 (Int Int) Int)
(declare-fun x429 () Bool)
(declare-fun x514 () Bool)
(declare-fun x179 () Bool)
(declare-fun x211 () Bool)
(declare-fun x414 () Int)
(declare-fun x392 () Bool)
(declare-fun x291 () Int)
(declare-fun x2 () Int)
(declare-fun x15 () Int)
(declare-fun x355 () Int)
(declare-fun x70 () Int)
(declare-fun x270 () Int)
(declare-fun x131 () Int)
(declare-fun x281 () Bool)
(declare-fun x326 () Bool)
(declare-fun x12 () Bool)
(declare-fun x399 () Bool)
(declare-fun x364 () Bool)
(declare-fun x3 () Int)
(declare-fun x219 () Bool)
(declare-fun x431 () Int)
(declare-fun x268 () Int)
(declare-fun x48 () Int)
(declare-fun x77 () Bool)
(declare-fun x41 () Int)
(declare-fun x56 () Int)
(declare-fun x266 () Int)
(declare-fun x245 () Bool)
(declare-fun x497 () Bool)
(declare-fun x225 () Int)
(declare-fun x481 () Bool)
(declare-fun x463 () Int)
(declare-fun x84 () Int)
(define-fun x260 ((x83 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x83) (>= x83 0)) x83 (- x83 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x72 ((x83 Int)) Int (ite (and (< x83 0) (>= x83 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x83 115792089237316195423570985008687907853269984665640564039457584007913129639936) x83))
(define-fun x121 ((x389 Int)) Bool (and (>= x389 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x389)))
(define-fun x335 ((x389 Int)) Bool (and (= (x94 x389 115792089237316195423570985008687907853269984665640564039457584007913129639935) x389) (= (x94 115792089237316195423570985008687907853269984665640564039457584007913129639935 x389) x389)))
(define-fun x505 ((x389 Int)) Bool (and (= 0 (x94 x389 0)) (= (x94 0 x389) 0)))
(define-fun x264 ((x389 Int)) Bool (= (x94 x389 x389) x389))
(define-fun x380 ((x389 Int)) Bool (and (x264 x389) (x335 x389) (x505 x389)))
(define-fun x489 ((x389 Int) (x100 Int)) Bool (= (x94 x389 x100) (x94 x100 x389)))
(define-fun x152 ((x389 Int) (x100 Int)) Bool (and (=> (>= x389 0) (>= x389 (x94 x389 x100))) (<= 0 (x94 x389 x100)) (=> (>= x100 0) (<= (x94 x389 x100) x100))))
(define-fun x147 ((x389 Int) (x100 Int)) Bool (and (x152 x389 x100) (x489 x389 x100)))
(define-fun x273 ((x389 Int)) Bool (= (mod x389 32) (x94 x389 31)))
(define-fun x321 ((x389 Int)) Bool (and (x273 x389) (x147 x389 31)))
(define-fun x396 ((x389 Int)) Bool (and (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x339 x389 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (x339 115792089237316195423570985008687907853269984665640564039457584007913129639935 x389) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(define-fun x272 ((x389 Int)) Bool (and (= x389 (x339 0 x389)) (= x389 (x339 x389 0))))
(define-fun x47 ((x389 Int)) Bool (= (x339 x389 x389) x389))
(define-fun x104 ((x389 Int)) Bool (and (x396 x389) (x272 x389) (x47 x389)))
(define-fun x290 ((x389 Int) (x100 Int)) Bool (= (x339 x100 x389) (x339 x389 x100)))
(define-fun x388 ((x389 Int) (x100 Int)) Bool (and (>= (+ x100 x389) (x339 x389 x100)) (=> (>= x389 0) (<= x389 (x339 x389 x100))) (=> (<= 0 x100) (>= (x339 x389 x100) x100))))
(define-fun x372 ((x389 Int) (x100 Int)) Bool (and (x290 x389 x100) (x388 x389 x100)))
(define-fun x398 ((x389 Int)) Bool (= (x94 x389 1) (mod x389 2)))
(define-fun x492 ((x389 Int)) Bool (and (x147 x389 1) (x398 x389)))
(define-fun x221 ((x389 Int)) Bool (= (x94 x389 127) (mod x389 128)))
(define-fun x172 ((x389 Int)) Bool (and (x221 x389) (x147 x389 127)))
(define-fun x488 ((x18 Int)) Int 0)
(define-fun x6 ((x18 Int)) Int 0)
(define-fun x181 ((x18 Int)) Int 0)
(define-fun x13 ((x18 Int)) Int 0)
(define-fun x235 ((x18 Int)) Int 0)
(define-fun x52 ((x18 Int)) Int 0)
(define-fun x340 ((x18 Int)) Int 0)
(define-fun x322 ((x18 Int)) Int 0)
(define-fun x203 ((x18 Int)) Int 0)
(define-fun x331 ((x18 Int)) Int 0)
(define-fun x150 ((x18 Int)) Int 0)
(define-fun x341 ((x18 Int)) Int (ite (< x18 x155) (x99 x18) 0))
(define-fun x350 ((x18 Int)) Int (ite (and (> x155 x18) (<= 0 x18)) (x448 x18) (x341 x18)))
(define-fun x252 ((x18 Int)) Int (ite (= x18 x303) x454 (x366 x18)))
(define-fun x242 ((x18 Int)) Int (ite (= x97 x18) x107 (x252 x18)))
(define-fun x51 ((x18 Int)) Int (ite (= 128 x18) 13 (x235 x18)))
(define-fun x490 ((x18 Int)) Int (ite (= x18 160) 39553310892875263560936207548857176834471854732421237974622739861269930573824 (x181 x18)))
(define-fun x175 ((x18 Int)) Int (ite (= 192 x18) 4 (x6 x18)))
(define-fun x216 ((x18 Int)) Int (ite (= x18 224) 39473711962023174749424659199615060097653232135126263878786656434573155500032 (x488 x18)))
(define-fun x432 ((x18 Int)) Int (ite (= x18 256) 72464927124685711895252664195178772226123872012682517813167109100718830649344 (x203 x18)))
(define-fun x524 ((x18 Int)) Int (ite (and (< x18 288) (<= 256 x18)) (x358 (- x18 256)) (x432 x18)))
(define-fun x124 ((x18 Int)) Int 0)
(define-fun x317 ((x18 Int)) Int 0)
(define-fun x180 ((x18 Int)) Int (ite (= x18 x127) 0 (x449 x18)))
(define-fun x407 ((x18 Int)) Int (ite (= x18 x113) 0 (x212 x18)))
(define-fun x262 ((x18 Int)) Int (ite (= x415 x18) 0 (x436 x18)))
(define-fun x50 ((x18 Int)) Int (ite (= x18 x151) 0 (x278 x18)))
(define-fun x385 ((x18 Int)) Int (ite x497 (x449 x18) (x180 x18)))
(define-fun x24 ((x18 Int)) Int (ite x123 (x212 x18) (x407 x18)))
(define-fun x11 ((x18 Int)) Int (ite x61 (x436 x18) (x262 x18)))
(define-fun x288 ((x18 Int)) Int (ite x323 (x278 x18) (x50 x18)))
(define-fun x420 ((x18 Int)) Int (ite x9 (x449 x18) (ite x497 (x449 x18) (x180 x18))))
(define-fun x495 ((x18 Int)) Int (ite (= x18 x327) x101 (x420 x18)))
(define-fun x375 ((x18 Int)) Int (ite x58 (x212 x18) (ite x123 (x212 x18) (x407 x18))))
(define-fun x5 ((x18 Int)) Int (ite (= 320 x18) 22163329580580053030292883849319169862539958002407764210677428189014622470144 (x52 x18)))
(define-fun x473 ((x18 Int)) Int (ite (= x18 x521) x115 (x375 x18)))
(define-fun x453 ((x18 Int)) Int (ite x362 (x436 x18) (ite x61 (x436 x18) (x262 x18))))
(define-fun x79 ((x18 Int)) Int (ite (= x45 x18) x114 (x453 x18)))
(define-fun x484 ((x18 Int)) Int (ite x357 (x278 x18) (ite x323 (x278 x18) (x50 x18))))
(define-fun x333 ((x18 Int)) Int (ite (= x18 x177) x442 (x484 x18)))
(define-fun x346 ((x18 Int)) Int (ite (= x18 288) 1 (x340 x18)))
(define-fun x261 ((x18 Int)) Int (ite (and (> 288 x18) (>= x18 256)) (x358 (- x18 256)) (x322 x18)))
(define-fun x425 ((x18 Int)) Int (ite x211 (x524 x18) (x432 x18)))
(define-fun x386 ((x18 Int)) Int (ite (= 352 x18) 34602258808455191227493136189427688107261027562213901346293687426555358216192 (x425 x18)))
(define-fun x523 ((x18 Int)) Int (ite (= x18 356) x97 (x386 x18)))
(define-fun x238 ((x18 Int)) Int (ite (= x18 388) 0 (x523 x18)))
(define-fun x166 ((x18 Int)) Int (ite (= x18 420) 0 (x238 x18)))
(define-fun x427 ((x18 Int)) Int (ite (= x18 452) 57005 (x166 x18)))
(assert (x121 x463))
(assert (x121 x440))
(assert (x380 x289))
(assert (x321 x70))
(assert (x121 x298))
(assert (x418 22163329580580053030292883849319169862539958002407764210677428189014622470144))
(assert (x121 x419))
(assert (x121 x192))
(assert (x121 x461))
(assert (x121 x3))
(assert (= 64 (x98 (x365 64 x81 156))))
(assert (= x8 (or x429 x211)))
(assert (= x306 x59))
(assert (x121 x246))
(assert (x121 x85))
(assert (x121 x498))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x365 64 x54 159)))
(assert (= (x34 (+ x275 x113)) (x34 x113)))
(assert (= (x186 (x365 64 x54 159)) x54))
(assert (x121 x283))
(assert (x121 x460))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x337 32 155)))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x365 64 x54 156)))
(assert (= x54 (x186 (x365 64 x54 156))))
(assert (x121 x125))
(assert (x121 x251))
(assert (= (and x421 x219) x92))
(assert (=> (>= 10000 x81) (= 0 (x34 x81))))
(assert (and (= 256 (x304 2 8)) (= (x304 2 240) 1766847064778384329583297500742918515827483896875618958121606201292619776) (= (x304 2 42) 4398046511104) (= 23384026197294446691258957323460528314494920687616 (x304 2 164)) (= (x304 2 140) 1393796574908163946345982392040522594123776) (= 2417851639229258349412352 (x304 2 81)) (= (x304 2 141) 2787593149816327892691964784081045188247552) (= (x304 2 76) 75557863725914323419136) (= (x304 2 178) 383123885216472214589586756787577295904684780545900544) (= 1427247692705959881058285969449495136382746624 (x304 2 150)) (= 356811923176489970264571492362373784095686656 (x304 2 148)) (= 205688069665150755269371147819668813122841983204197482918576128 (x304 2 207)) (= 5846006549323611672814739330865132078623730171904 (x304 2 162)) (= (x304 2 104) 20282409603651670423947251286016) (= (x304 2 54) 18014398509481984) (= 618970019642690137449562112 (x304 2 89)) (= 95780971304118053647396689196894323976171195136475136 (x304 2 176)) (= 196159429230833773869868419475239575503198607639501078528 (x304 2 187)) (= 803469022129495137770981046170581301261101496891396417650688 (x304 2 199)) (= 113078212145816597093331040047546785012958969400039613319782796882727665664 (x304 2 246)) (= (x304 2 171) 2993155353253689176481146537402947624255349848014848) (= 72057594037927936 (x304 2 56)) (= 147573952589676412928 (x304 2 67)) (= 102844034832575377634685573909834406561420991602098741459288064 (x304 2 206)) (= (x304 2 137) 174224571863520493293247799005065324265472) (= (x304 2 86) 77371252455336267181195264) (= (x304 2 95) 39614081257132168796771975168) (= 20769187434139310514121985316880384 (x304 2 114)) (= 17179869184 (x304 2 34)) (= (x304 2 69) 590295810358705651712) (= 13479973333575319897333507543509815336818572211270286240551805124608 (x304 2 223)) (= (x304 2 121) 2658455991569831745807614120560689152) (= (x304 2 10) 1024) (= 191561942608236107294793378393788647952342390272950272 (x304 2 177)) (= 13803492693581127574869511724554050904902217944340773110325048447598592 (x304 2 233)) (= 8 (x304 2 3)) (= (x304 2 239) 883423532389192164791648750371459257913741948437809479060803100646309888) (= 664613997892457936451903530140172288 (x304 2 119)) (= (x304 2 248) 452312848583266388373324160190187140051835877600158453279131187530910662656) (= (x304 2 55) 36028797018963968) (= 549755813888 (x304 2 39)) (= 67108864 (x304 2 26)) (= 24519928653854221733733552434404946937899825954937634816 (x304 2 184)) (= (x304 2 136) 87112285931760246646623899502532662132736) (= 8192 (x304 2 13)) (= (x304 2 97) 158456325028528675187087900672) (= 9671406556917033397649408 (x304 2 83)) (= (x304 2 247) 226156424291633194186662080095093570025917938800079226639565593765455331328) (= 21778071482940061661655974875633165533184 (x304 2 134)) (= 2 (x304 2 1)) (= 1 (x304 2 0)) (= (x304 2 106) 81129638414606681695789005144064) (= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x304 2 256)) (= (x304 2 35) 34359738368) (= (x304 2 40) 1099511627776) (= 25711008708143844408671393477458601640355247900524685364822016 (x304 2 204)) (= 6129982163463555433433388108601236734474956488734408704 (x304 2 182)) (= 187072209578355573530071658587684226515959365500928 (x304 2 167)) (= 5070602400912917605986812821504 (x304 2 102)) (= (x304 2 21) 2097152) (= 10384593717069655257060992658440192 (x304 2 113)) (= (x304 2 175) 47890485652059026823698344598447161988085597568237568) (= (x304 2 203) 12855504354071922204335696738729300820177623950262342682411008) (= 1180591620717411303424 (x304 2 70)) (= (x304 2 205) 51422017416287688817342786954917203280710495801049370729644032) (= 324518553658426726783156020576256 (x304 2 108)) (= (x304 2 33) 8589934592) (= (x304 2 220) 1684996666696914987166688442938726917102321526408785780068975640576) (= 822752278660603021077484591278675252491367932816789931674304512 (x304 2 209)) (= (x304 2 37) 137438953472) (= (x304 2 133) 10889035741470030830827987437816582766592) (= 12554203470773361527671578846415332832204710888928069025792 (x304 2 193)) (= (x304 2 52) 4503599627370496) (= 32 (x304 2 5)) (= (x304 2 135) 43556142965880123323311949751266331066368) (= 1569275433846670190958947355801916604025588861116008628224 (x304 2 190)) (= (x304 2 122) 5316911983139663491615228241121378304) (= (x304 2 224) 26959946667150639794667015087019630673637144422540572481103610249216) (= (x304 2 117) 166153499473114484112975882535043072) (= (x304 2 129) 680564733841876926926749214863536422912) (= (x304 2 191) 3138550867693340381917894711603833208051177722232017256448) (= 41538374868278621028243970633760768 (x304 2 115)) (= (x304 2 127) 170141183460469231731687303715884105728) (= 19807040628566084398385987584 (x304 2 94)) (= 8388608 (x304 2 23)) (= 288230376151711744 (x304 2 58)) (= 26328072917139296674479506920917608079723773850137277813577744384 (x304 2 214)) (= 562949953421312 (x304 2 49)) (= (x304 2 255) 57896044618658097711785492504343953926634992332820282019728792003956564819968) (= 1208925819614629174706176 (x304 2 80)) (= (x304 2 215) 52656145834278593348959013841835216159447547700274555627155488768) (= (x304 2 4) 16) (= (x304 2 174) 23945242826029513411849172299223580994042798784118784) (= (x304 2 234) 27606985387162255149739023449108101809804435888681546220650096895197184) (= 11417981541647679048466287755595961091061972992 (x304 2 153)) (= 110427941548649020598956093796432407239217743554726184882600387580788736 (x304 2 236)) (= 1048576 (x304 2 20)) (= (x304 2 6) 64) (= (x304 2 142) 5575186299632655785383929568162090376495104) (= 73786976294838206464 (x304 2 66)) (= 1152921504606846976 (x304 2 60)) (= (x304 2 90) 1237940039285380274899124224) (= (x304 2 194) 25108406941546723055343157692830665664409421777856138051584) (= (x304 2 82) 4835703278458516698824704) (= 55213970774324510299478046898216203619608871777363092441300193790394368 (x304 2 235)) (= (x304 2 24) 16777216) (= 4096 (x304 2 12)) (= 210624583337114373395836055367340864637790190801098222508621955072 (x304 2 217)) (= (x304 2 195) 50216813883093446110686315385661331328818843555712276103168) (= 4294967296 (x304 2 32)) (= 4951760157141521099596496896 (x304 2 92)) (= 2854495385411919762116571938898990272765493248 (x304 2 151)) (= 3618502788666131106986593281521497120414687020801267626233049500247285301248 (x304 2 251)) (= 262144 (x304 2 18)) (= 11150372599265311570767859136324180752990208 (x304 2 143)) (= 2147483648 (x304 2 31)) (= (x304 2 253) 14474011154664524427946373126085988481658748083205070504932198000989141204992) (= (x304 2 98) 316912650057057350374175801344) (= 1073741824 (x304 2 30)) (= (x304 2 48) 281474976710656) (= 9444732965739290427392 (x304 2 73)) (= 89202980794122492566142873090593446023921664 (x304 2 146)) (= (x304 2 149) 713623846352979940529142984724747568191373312) (= 5986310706507378352962293074805895248510699696029696 (x304 2 172)) (= (x304 2 211) 3291009114642412084309938365114701009965471731267159726697218048) (= (x304 2 230) 1725436586697640946858688965569256363112777243042596638790631055949824) (= (x304 2 130) 1361129467683753853853498429727072845824) (= (x304 2 155) 45671926166590716193865151022383844364247891968) (= (x304 2 29) 536870912) (= 93536104789177786765035829293842113257979682750464 (x304 2 166)) (= 83076749736557242056487941267521536 (x304 2 116)) (= (x304 2 103) 10141204801825835211973625643008) (= 633825300114114700748351602688 (x304 2 99)) (= 19342813113834066795298816 (x304 2 84)) (= (x304 2 75) 37778931862957161709568) (= 5192296858534827628530496329220096 (x304 2 112)) (= (x304 2 79) 604462909807314587353088) (= 2596148429267413814265248164610048 (x304 2 111)) (= 3213876088517980551083924184682325205044405987565585670602752 (x304 2 201)) (= 79228162514264337593543950336 (x304 2 96)) (= (x304 2 242) 7067388259113537318333190002971674063309935587502475832486424805170479104) (= (x304 2 170) 1496577676626844588240573268701473812127674924007424) (= (x304 2 165) 46768052394588893382517914646921056628989841375232) (= 9007199254740992 (x304 2 53)) (= 784637716923335095479473677900958302012794430558004314112 (x304 2 189)) (= (x304 2 109) 649037107316853453566312041152512) (= (x304 2 107) 162259276829213363391578010288128) (= 56539106072908298546665520023773392506479484700019806659891398441363832832 (x304 2 245)) (= (x304 2 249) 904625697166532776746648320380374280103671755200316906558262375061821325312) (= (x304 2 232) 6901746346790563787434755862277025452451108972170386555162524223799296) (= (x304 2 62) 4611686018427387904) (= (x304 2 36) 68719476736) (= 8796093022208 (x304 2 43)) (= (x304 2 123) 10633823966279326983230456482242756608) (= 18446744073709551616 (x304 2 64)) (= (x304 2 188) 392318858461667547739736838950479151006397215279002157056) (= (x304 2 74) 18889465931478580854784) (= (x304 2 229) 862718293348820473429344482784628181556388621521298319395315527974912) (= 28948022309329048855892746252171976963317496166410141009864396001978282409984 (x304 2 254)) (= (x304 2 105) 40564819207303340847894502572032) (= 441711766194596082395824375185729628956870974218904739530401550323154944 (x304 2 238)) (= (x304 2 15) 32768) (= (x304 2 101) 2535301200456458802993406410752) (= 2475880078570760549798248448 (x304 2 91)) (= (x304 2 139) 696898287454081973172991196020261297061888) (= 1125899906842624 (x304 2 50)) (= 9903520314283042199192993792 (x304 2 93)) (= (x304 2 16) 65536) (= (x304 2 132) 5444517870735015415413993718908291383296) (= (x304 2 22) 4194304) (= 268435456 (x304 2 28)) (= (x304 2 72) 4722366482869645213696) (= (x304 2 87) 154742504910672534362390528) (= (x304 2 168) 374144419156711147060143317175368453031918731001856) (= (x304 2 179) 766247770432944429179173513575154591809369561091801088) (= 151115727451828646838272 (x304 2 77)) (= 2251799813685248 (x304 2 51)) (= 131072 (x304 2 17)) (= (x304 2 41) 2199023255552) (= 6277101735386680763835789423207666416102355444464034512896 (x304 2 192)) (= (x304 2 197) 200867255532373784442745261542645325315275374222849104412672) (= (x304 2 202) 6427752177035961102167848369364650410088811975131171341205504) (= 274877906944 (x304 2 38)) (= (x304 2 14) 16384) (= (x304 2 138) 348449143727040986586495598010130648530944) (= 340282366920938463463374607431768211456 (x304 2 128)) (= (x304 2 227) 215679573337205118357336120696157045389097155380324579848828881993728) (= (x304 2 71) 2361183241434822606848) (= (x304 2 221) 3369993333393829974333376885877453834204643052817571560137951281152) (= 128 (x304 2 7)) (= (x304 2 11) 2048) (= (x304 2 228) 431359146674410236714672241392314090778194310760649159697657763987456) (= (x304 2 152) 5708990770823839524233143877797980545530986496) (= (x304 2 156) 91343852333181432387730302044767688728495783936) (= (x304 2 125) 42535295865117307932921825928971026432) (= (x304 2 44) 17592186044416) (= (x304 2 185) 49039857307708443467467104868809893875799651909875269632) (= (x304 2 161) 2923003274661805836407369665432566039311865085952) (= 70368744177664 (x304 2 46)) (= 748288838313422294120286634350736906063837462003712 (x304 2 169)) (= (x304 2 163) 11692013098647223345629478661730264157247460343808) (= (x304 2 126) 85070591730234615865843651857942052864) (= 4 (x304 2 2)) (= 421249166674228746791672110734681729275580381602196445017243910144 (x304 2 218)) (= 144115188075855872 (x304 2 57)) (= 14134776518227074636666380005943348126619871175004951664972849610340958208 (x304 2 243)) (= (x304 2 124) 21267647932558653966460912964485513216) (= (x304 2 222) 6739986666787659948666753771754907668409286105635143120275902562304) (= (x304 2 65) 36893488147419103232) (= 11972621413014756705924586149611790497021399392059392 (x304 2 173)) (= (x304 2 110) 1298074214633706907132624082305024) (= (x304 2 210) 1645504557321206042154969182557350504982735865633579863348609024) (= 295147905179352825856 (x304 2 68)) (= (x304 2 160) 1461501637330902918203684832716283019655932542976) (= (x304 2 159) 730750818665451459101842416358141509827966271488) (= (x304 2 244) 28269553036454149273332760011886696253239742350009903329945699220681916416) (= 182687704666362864775460604089535377456991567872 (x304 2 157)) (= (x304 2 237) 220855883097298041197912187592864814478435487109452369765200775161577472) (= (x304 2 250) 1809251394333065553493296640760748560207343510400633813116524750123642650624) (= (x304 2 47) 140737488355328) (= 1532495540865888858358347027150309183618739122183602176 (x304 2 180)) (= (x304 2 63) 9223372036854775808) (= 6582018229284824168619876730229402019930943462534319453394436096 (x304 2 212)) (= 2305843009213693952 (x304 2 61)) (= 98079714615416886934934209737619787751599303819750539264 (x304 2 186)) (= (x304 2 241) 3533694129556768659166595001485837031654967793751237916243212402585239552) (= (x304 2 158) 365375409332725729550921208179070754913983135744) (= (x304 2 216) 105312291668557186697918027683670432318895095400549111254310977536) (= (x304 2 85) 38685626227668133590597632) (= (x304 2 219) 842498333348457493583344221469363458551160763204392890034487820288) (= 12259964326927110866866776217202473468949912977468817408 (x304 2 183)) (= 100433627766186892221372630771322662657637687111424552206336 (x304 2 196)) (= (x304 2 154) 22835963083295358096932575511191922182123945984) (= (x304 2 181) 3064991081731777716716694054300618367237478244367204352) (= (x304 2 19) 524288) (= (x304 2 59) 576460752303423488) (= 411376139330301510538742295639337626245683966408394965837152256 (x304 2 208)) (= (x304 2 144) 22300745198530623141535718272648361505980416) (= (x304 2 120) 1329227995784915872903807060280344576) (= 178405961588244985132285746181186892047843328 (x304 2 147)) (= (x304 2 131) 2722258935367507707706996859454145691648) (= (x304 2 198) 401734511064747568885490523085290650630550748445698208825344) (= (x304 2 225) 53919893334301279589334030174039261347274288845081144962207220498432) (= 332306998946228968225951765070086144 (x304 2 118)) (= (x304 2 213) 13164036458569648337239753460458804039861886925068638906788872192) (= 512 (x304 2 9)) (= 44601490397061246283071436545296723011960832 (x304 2 145)) (= (x304 2 25) 33554432) (= (x304 2 226) 107839786668602559178668060348078522694548577690162289924414440996864) (= (x304 2 252) 7237005577332262213973186563042994240829374041602535252466099000494570602496) (= 35184372088832 (x304 2 45)) (= 1606938044258990275541962092341162602522202993782792835301376 (x304 2 200)) (= (x304 2 78) 302231454903657293676544) (= (x304 2 100) 1267650600228229401496703205376) (= 134217728 (x304 2 27)) (= 309485009821345068724781056 (x304 2 88)) (= 3450873173395281893717377931138512726225554486085193277581262111899648 (x304 2 231))))
(assert (x121 x454))
(assert (x121 x516))
(assert (= x397 (or x330 x519)))
(assert (x121 x197))
(assert (= x520 (=> (and (and (or (and (and (<= 0 x369) (<= x369 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x119 x131) (= x465 x111) (< (* x460 x426) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x426 (x20 x220)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x119) (= (+ x419 x131) x369) (<= 0 x119) (= x369 x465) (< (+ x419 x131) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (x169 x408) x419) (= x119 (* x460 x426)) (= x220 (x365 64 x54 156)) (= x408 (x365 64 x54 158))) x316) (and (and (= x111 x138) (= (x365 64 x54 159) x39) (= x138 (x503 x39))) (not x316))) (and (>= 127 x434) (= 1889567281 x194) (>= 127 x434) (= (= 0 x447) x316) (= x96 (x30 x97)) (= x447 (x87 x267)) (= x54 x145) (>= x96 1) (= x109 false) (= x267 (x365 64 x54 161)) (= false x404) (<= x447 2) (= x311 x54))) (and (<= x134 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= false x394) (>= x409 0) (= x480 (< 0 (x30 x97))) (<= 1 x137) (>= x31 0) (= false x254) (<= 0 x501) (<= x409 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x62 0) (<= x435 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x2) (= x416 (> (x30 x414) 0)) (= x198 36) (= x129 404098525) (= x268 4) (= false x313) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x381) (<= 0 x2) (<= x155 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= 0 x134) (<= 0 x487) (<= 1 x163) (< (* x84 x460) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= 1461501637330902918203684832716283019655932542975 x97) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x31) (>= x381 0) (<= x299 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x190) (= x116 false) (>= x406 0) (<= x487 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 1 x443) (= false x171) (>= x402 0) (not (= x414 x97)) (= x443 (x30 x97)) (>= 4294967295 x237) (<= x368 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x10) (<= x438 127) (>= x368 0) (>= 1461501637330902918203684832716283019655932542975 x66) (= false x343) (not (= x137 x414)) (= x97 x462) x416 x153 (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x402) (= x144 x406) (>= x271 0) (= false x69) (<= 4 x155) (= false x491) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x406) (<= x510 255) (>= 1461501637330902918203684832716283019655932542975 x285) (= 2167012380 x71) (<= 1 x97) (= x406 (+ x471 x78)) (= x78 x409) (= (> (x30 x163) 0) x153) (<= 1 x414) (>= 127 x438) (= 0 x509) (not (= x163 x97)) (<= x137 1461501637330902918203684832716283019655932542975) (= x156 false) (not (= x163 x414)) x217 (not (= x137 x163)) (>= 1461501637330902918203684832716283019655932542975 x414) (>= x285 0) (not (= x97 x137)) (= x409 (* x460 x84)) (= x2 x145) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x517) (= x373 false) (< (+ x471 x78) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= 1461501637330902918203684832716283019655932542975 x163) (>= 1461501637330902918203684832716283019655932542975 x271) (= (< 0 (x30 x137)) x217) (<= 0 x517) x480 (<= 0 x237) (<= 0 x66) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x501))) x318)))
(assert (x121 x426))
(assert (x121 x1))
(assert (= (x34 (x365 64 x54 156)) (x365 64 x54 156)))
(assert (= x323 (and x302 (not x412))))
(assert (x121 x353))
(assert (x121 x201))
(assert (x492 x283))
(assert (< 10000 (x365 64 x54 158)))
(assert (= (x34 1461501637330902918203684832716283019655932542975) 0))
(assert (= 0 (x34 22163329580580053030292883849319169862539958002407764210677428189014622470144)))
(assert (x121 x32))
(assert (x121 x292))
(assert (x121 x57))
(assert (= x158 (or x399 x497)))
(assert (not (x418 (x337 32 154))))
(assert (= (x337 32 3) (x34 (x337 32 3))))
(assert (x121 x56))
(assert (= x401 (and x412 x302)))
(assert (< (x365 64 x54 161) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x121 x148))
(assert (= (x34 (x337 32 4)) (x337 32 4)))
(assert (x121 x447))
(assert (= x213 x184))
(assert (=> (>= 10000 x97) (= (x34 x97) 0)))
(assert (x121 x46))
(assert (x121 x103))
(assert (x121 x228))
(assert (x172 x65))
(assert (= x54 (x186 (x365 64 x54 161))))
(assert (= (=> (and (and (>= x243 0) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x196) (= 4 x68) (= false x309) (>= x196 0) (= x168 false) (= false x25) (>= 127 x90) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x91 x471)) (= x91 x243) (<= 1 x376) (= false x165) (= false x413) (= (+ x471 x91) x196) (= (* x26 x84) x243) (= false x287) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x243) (= x143 36) (= x467 x2) (= false x281) (>= 127 x90) (= x196 x183) (= (x30 x97) x376) (= x370 404098525) (< (* x26 x84) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= false x139)) (and (or (and x182 (and (= (x20 x75) x108) (= (x169 x159) x383) (= x199 x452) (= x75 (x365 64 x81 156)) (<= 0 x199) (= (+ x383 x452) x504) (= x199 (* x108 x26)) (< (* x26 x108) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x504) (= x159 (x365 64 x81 158)) (= x499 x125) (< (+ x452 x383) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x499 x504) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x199) (>= x504 0))) (and (and (= x43 (x503 x378)) (= (x365 64 x81 159) x378) (= x43 x125)) (not x182))) (and (= x286 (x365 64 x81 161)) (= x81 x467) (= x498 1889567281) (<= x265 127) (<= x258 2) (= (x87 x286) x258) (= (x30 x97) x298) (= x182 (= 0 x258)) (<= 1 x298) (= x382 false) (= x470 x81) (>= 127 x265) (= false x477)))) x348) x76))
(assert (x121 x377))
(assert (= (x34 382502381645197248123620639812464696550576095234) 0))
(assert (x121 x456))
(assert (= 0 (x34 1889567281)))
(assert (x121 x144))
(assert (x418 39473711962023174749424659199615060097653232135126263878786656434573155500032))
(assert (not (x418 (x365 64 x81 161))))
(assert (= (ite (> 256 x88) (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x304 2 x88)) 0) (x469 115792089237316195423570985008687907853269984665640564039457584007913129639935 x88)))
(assert (x121 x247))
(assert (= (=> (= (< 0 x493) x209) (and (=> (and (= x493 1) x209) x306) (=> (and (and (and (= x314 (= 0 x224)) (= x86 (ite x314 1 0)) (= x117 (x30 x97)) (= x224 (ite (> x117 0) 1 0))) (or (and x314 (= 1 x496)) (and (not x314) (= x86 1)))) (not x209)) x59))) x27))
(assert (x121 x88))
(assert (= (x365 64 x54 159) (x34 (x365 64 x54 159))))
(assert (= (x337 32 154) (x34 (x337 32 154))))
(assert (x147 x476 x324))
(assert (= (x34 (x365 64 x81 156)) (x365 64 x81 156)))
(assert (x121 x296))
(assert (x121 x451))
(assert (= 161 (x363 (x365 64 x81 161))))
(assert (< (x365 64 x81 159) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x172 x518))
(assert (= x348 (=> (and (= false x308) (= false x40) (= x14 false) (= x74 (>= x183 x125)) (= x392 false)) x74)))
(assert (= (=> (and (or (not x44) (and (= 0 x437) x44)) (and (= x446 (x242 x97)) (= x512 (x242 382502381645197248123620639812464696550576095234)) (>= x239 1) (= x55 (= (x110 382502381645197248123620639812464696550576095234) x512)) x55 (= x293 (x30 382502381645197248123620639812464696550576095234)) (<= 1 x293) (= x32 352) (= (>= (x110 x97) x446) x279) x279 (>= 4294967295 x234))) x76) x395))
(assert (=> (>= 10000 x303) (= (x34 x303) 0)))
(assert (not (x418 (x365 64 x54 161))))
(assert (= (x337 32 155) (x34 (x337 32 155))))
(assert (= (x34 39553310892875263560936207548857176834471854732421237974622739861269930573824) 0))
(assert (x121 x233))
(assert (x121 x423))
(assert (x380 x345))
(assert (x418 34602258808455191227493136189427688107261027562213901346293687426555358216192))
(assert (> (x365 64 x81 159) 10000))
(assert (x372 x136 x46))
(assert (x380 x231))
(assert (= (or x146 (and x210 (not x44))) x297))
(assert (< 10000 (x365 64 x81 161)))
(assert (x121 x41))
(assert (x418 39553310892875263560936207548857176834471854732421237974622739861269930573824))
(assert (x121 x178))
(assert (x121 x417))
(assert (x121 x442))
(assert (< (x365 64 x81 161) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x121 x359))
(assert (x321 x85))
(assert (x121 x67))
(assert (> (x365 64 x54 159) 10000))
(assert (x121 x208))
(assert (x121 x142))
(assert (x121 x167))
(assert (= (and x182 x297) x162))
(assert (< 10000 (x337 32 3)))
(assert (x380 x48))
(assert (= x284 (or x357 x458)))
(assert (x418 4294967295))
(assert (x380 x283))
(assert (x121 x258))
(assert (= x93 (and x249 x222)))
(assert (not x520))
(assert (x121 x356))
(assert (x121 x128))
(assert (x121 x474))
(assert (= (and x405 x455) x302))
(assert (x147 x15 x231))
(assert (x121 x507))
(assert (x121 x464))
(assert (x147 x433 x232))
(assert (= x306 (=> (and (or (and (not x44) (= x270 x228)) (and (and (= 1 x270) (= x274 1)) x44)) (= x511 1)) x223)))
(assert (= (x469 115792089237316195423570985008687907853269984665640564039457584007913129639935 x208) (ite (> 256 x208) (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x304 2 x208)) 0)))
(assert (x121 x114))
(assert (= 64 (x98 (x365 64 x81 158))))
(assert (x121 x70))
(assert (< 10000 (x337 32 4)))
(assert (x147 x292 x193))
(assert (= 156 (x363 (x365 64 x81 156))))
(assert (< 10000 (x365 64 x81 158)))
(assert (= x77 (and (not x182) x297)))
(assert (x121 x496))
(assert (x121 x376))
(assert (x492 x178))
(assert (x121 x433))
(assert (=> (>= 10000 x54) (= 0 (x34 x54))))
(assert (x121 x17))
(assert (x380 x349))
(assert (= x123 (and (not x122) x364)))
(assert (x121 x49))
(assert (= x374 (and (not x222) x249)))
(assert (x121 x37))
(assert (not (x418 (x365 64 x54 158))))
(assert (x172 x253))
(assert (x121 x200))
(assert (< (x365 64 x54 158) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x372 x355 x148))
(assert (x121 x188))
(assert (x121 x282))
(assert (x121 x510))
(assert (= x61 (and x245 (not x28))))
(assert (< 10000 (x365 64 x81 156)))
(assert (x380 x193))
(assert (x380 x474))
(assert (x121 x10))
(assert (= (x34 4294967295) 0))
(assert (x121 x452))
(assert (= x244 (and x44 x250)))
(assert (x121 x344))
(assert (x121 x354))
(assert (= (and x411 (not x361)) x362))
(assert (x147 x301 x464))
(assert (x380 x433))
(assert (x121 x301))
(assert (x121 x303))
(assert (x147 x269 x48))
(assert (x121 x468))
(assert (x121 x102))
(assert (= x422 (=> (and (or (and (and (= x310 (x94 x359 x289)) (= (x490 160) x359) (>= x141 1) (= x142 (* 2 x344)) (= x161 (ite (>= 1 x310) x280 (x339 x310 x142))) (= x229 (* 8 x344)) (= x280 (x260 (+ x310 x142))) (= (x469 115792089237316195423570985008687907853269984665640564039457584007913129639935 x229) x141) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x141) x289)) (not x222)) (and (and (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x469 115792089237316195423570985008687907853269984665640564039457584007913129639935 x247)) x324) (= (* 2 x344) x328) (= (x94 31 x344) x319) (= x114 (x94 x476 x324)) (= x476 (x490 160)) (= (* 8 x319) x247) (= x45 (x337 32 154)) (= (+ x328 1) x475)) x222)) (= (= (ite (> x344 31) 1 0) 1) x222)) x236)))
(assert (x104 x310))
(assert (= (or x312 x244) x360))
(assert (= (and x8 x80) x170))
(assert (x121 x173))
(assert (x380 x178))
(assert (= x223 (=> (and (and (= 192 x185) (= (< 0 x33) x205) (= x307 256) (<= x393 57896044618658097711785492504343953926634992332820282019728792003956564819967) (= 128 x102) (<= 32 x393)) (or (and x205 (and (= x4 1) (<= 32 x393) (>= 4294967295 x393))) (and (= x33 x4) (not x205)))) x227)))
(assert (x121 x155))
(assert (= (ite (> 256 x247) (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x304 2 x247)) 0) (x469 115792089237316195423570985008687907853269984665640564039457584007913129639935 x247)))
(assert (= (and x112 (not x316)) x513))
(assert (= 32 (x98 (x337 32 4))))
(assert (= x481 (=> (and (= (= 1 (ite (< 31 x70) 1 0)) x336) (or (and x336 (and (= (x94 x301 x464) x442) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x469 115792089237316195423570985008687907853269984665640564039457584007913129639935 x263)) x464) (= (x337 32 155) x177) (= (x94 31 x70) x167) (= x463 (+ x56 1)) (= (* x167 8) x263) (= x56 (* x70 2)) (= x301 (x216 224)))) (and (and (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x154) x48) (= x355 (x94 x269 x48)) (= x269 (x216 224)) (= (x469 115792089237316195423570985008687907853269984665640564039457584007913129639935 x208) x154) (= x148 (* 2 x70)) (= x208 (* 8 x70)) (<= 1 x154) (= x266 (ite (<= x355 1) x450 (x339 x355 x148))) (= x450 (x260 (+ x355 x148)))) (not x336)))) x395)))
(assert (= (x34 (x365 64 x54 158)) (x365 64 x54 158)))
(assert (not (x418 (x337 32 4))))
(assert (= (x98 (x337 32 154)) 32))
(assert (x380 x269))
(assert (< 10000 (x337 32 154)))
(assert (x104 x142))
(assert (= 64 (x98 (x365 64 x54 159))))
(assert (not (x418 (x365 64 x81 159))))
(assert (= 159 (x363 (x365 64 x54 159))))
(assert (= (x469 115792089237316195423570985008687907853269984665640564039457584007913129639935 x354) (ite (< x354 256) (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x304 2 x354)) 0)))
(assert (= (x365 64 x81 159) (x34 (x365 64 x81 159))))
(assert (= x81 (x186 (x365 64 x81 156))))
(assert (= (x34 72464927124685711895252664195178772226123872012682517813167109100718830649344) 0))
(assert (x121 x274))
(assert (x418 404098525))
(assert (= 161 (x363 (x365 64 x54 161))))
(assert (x380 x344))
(assert (= (x34 (+ x295 x415)) (x34 x415)))
(assert (x121 x457))
(assert (x380 x70))
(assert (x121 x269))
(assert (x121 x4))
(assert (= x439 (=> (and (= (not (> x371 x255)) x19) (= (+ x151 1) x255)) (and x257 x19))))
(assert (= 155 (x186 (x337 32 155))))
(assert (= (x363 (x365 64 x54 158)) 158))
(assert (x172 x349))
(assert (x380 x359))
(assert (= x519 (and (not x44) x486)))
(assert (= (and x284 x336) x466))
(assert (x121 x15))
(assert (x104 x46))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x337 32 3)))
(assert (= (x98 (x365 64 x54 156)) 64))
(assert (= (x186 (x337 32 4)) 4))
(assert (x418 57005))
(assert (x121 x96))
(assert (= 0 (x34 18446744073709551615)))
(assert (x121 x225))
(assert (= 0 (x34 57896044618658097711785492504343953926634992332820282019728792003956564819967)))
(assert (= x330 (and x44 x486)))
(assert (x121 x154))
(assert (x121 x270))
(assert (x121 x138))
(assert (< 10000 (x337 32 155)))
(assert (not (x418 (x365 64 x54 156))))
(assert (x121 x370))
(assert (> (x365 64 x54 156) 10000))
(assert (< (x365 64 x81 158) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x121 x117))
(assert (= (ite (> 256 x128) (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x304 2 x128)) 0) (x469 115792089237316195423570985008687907853269984665640564039457584007913129639935 x128)))
(assert (x121 x43))
(assert (x121 x161))
(assert (x121 x511))
(assert (x380 x516))
(assert (x121 x224))
(assert (x121 x289))
(assert (= (ite (< x431 256) (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x304 2 x431)) 0) (x469 115792089237316195423570985008687907853269984665640564039457584007913129639935 x431)))
(assert (x121 x299))
(assert (x121 x97))
(assert (x121 x263))
(assert (x104 x225))
(assert (= (x186 (x337 32 3)) 3))
(assert (x121 x231))
(assert (x121 x183))
(assert (x321 x345))
(assert (= x240 (=> (and (= x200 0) (= x344 (x51 128)) (= (x72 (- x377 (mod (ite (< x103 32) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x57) (= x21 0) (= (> x103 31) x361) (= (x94 1 x283) x377) (= (x261 256) x26) (or (= x57 1) (= x57 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= 0 x460) (= (div x283 2) x349) (= (ite (> x377 0) x349 (x94 127 x349)) x103) (>= 18446744073709551615 x344)) (and (=> (not x361) x422) (=> (and (and (= (< x415 x444) x28) (= x295 (div (+ x103 31) 32)) (= x415 (x337 32 154)) (= (+ x295 x415) x444)) x361) (and (=> (not x28) x326) (=> x28 x403)))))))
(assert (x121 x84))
(assert (x321 x344))
(assert (not (x418 (x365 64 x54 159))))
(assert (x121 x434))
(assert (= (=> (and (= (+ x127 1) x241) (= x502 (not (> x291 x241)))) (and x12 x502)) x195))
(assert (= (or x479 x466) x210))
(assert (= (x34 (+ 1 x127)) (x34 x127)))
(assert (x121 x438))
(assert (x121 x493))
(assert (x121 x253))
(assert (= (and (not x209) x360) x63))
(assert (x121 x268))
(assert (x121 x328))
(assert (> (x365 64 x54 161) 10000))
(assert (x121 x414))
(assert (x121 x129))
(assert (= x318 (=> (and (and (= x515 (>= x144 x111)) x515 (= x53 x457) (= x53 (x448 0)) (= x248 false) (= x140 false) (= x29 false) (= false x106) (= x459 false)) (and (or (and (= x493 (ite x44 1 0)) (not x44)) (and x44 (and (= (ite (< x496 1) 1 0) x493) (>= 255 x496)))) (and (= (x30 x97) x188) (= x42 false) (>= 127 x315) (= x468 (x252 x97)) (= x191 false) (<= x315 127) (= x303 x368) (= x67 2167012380) (>= 255 x228) (= (= x228 0) x44) (= (x366 x303) x454) (= x107 x468) (<= 1 x188)))) x27)))
(assert (not (x418 (x365 64 x81 156))))
(assert (x121 x48))
(assert (x121 x387))
(assert (= x486 (or x214 x160)))
(assert (x380 x15))
(assert (= 0 (x34 404098525)))
(assert (x121 x307))
(assert (x121 x91))
(assert (x121 x494))
(assert (= (or x95 x58) x294))
(assert (= (and (not x80) x8) x9))
(assert (= (x34 x113) (x34 (+ 1 x113))))
(assert (= (or x401 x323) x458))
(assert (= x160 (or x215 x35)))
(assert (x121 x311))
(assert (x121 x164))
(assert (x121 x465))
(assert (= x312 (and x250 (not x44))))
(assert (x121 x64))
(assert (= x472 x12))
(assert (x121 x319))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x337 32 4)))
(assert (x418 72464927124685711895252664195178772226123872012682517813167109100718830649344))
(assert (x380 x292))
(assert (x121 x280))
(assert (x380 x476))
(assert (x121 x21))
(assert (= 159 (x363 (x365 64 x81 159))))
(assert (x121 x108))
(assert (= true x112))
(assert (= (x186 (x337 32 154)) 154))
(assert (=> (>= 10000 x137) (= 0 (x34 x137))))
(assert (x121 x275))
(assert (x104 x136))
(assert (x104 x148))
(assert (x418 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (x121 x187))
(assert (= (or x374 x93) x455))
(assert (= (x34 x415) (x34 (+ 1 x415))))
(assert (x380 x518))
(assert (= (and x63 x314) x35))
(assert (x380 x41))
(assert (= (=> (and (= x189 (= (ite (> x345 31) 1 0) 1)) (or (and (not x189) (and (= x507 (* 2 x345)) (= x173 (ite (>= 1 x225) x353 (x339 x225 x507))) (= (x260 (+ x225 x507)) x353) (= x431 (* 8 x345)) (= x201 (x469 115792089237316195423570985008687907853269984665640564039457584007913129639935 x431)) (= x433 (x5 320)) (<= 1 x201) (= x232 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x201)) (= x225 (x94 x433 x232)))) (and (and (= x417 (+ x174 1)) (= x174 (* x345 2)) (= (* x120 8) x88) (= x115 (x94 x292 x193)) (= x120 (x94 31 x345)) (= x193 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x469 115792089237316195423570985008687907853269984665640564039457584007913129639935 x88))) (= (x337 32 4) x521) (= x292 (x5 320))) x189))) x240) x213))
(assert (= (x365 64 x81 158) (x34 (x365 64 x81 158))))
(assert (x121 x131))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x337 32 154)))
(assert (x121 x81))
(assert (x121 x351))
(assert (x121 x379))
(assert (x121 x107))
(assert (x121 x193))
(assert (x121 x470))
(assert (= (x186 (x365 64 x54 158)) x54))
(assert (= (x34 2167012380) 0))
(assert (= 156 (x363 (x365 64 x54 156))))
(assert (x121 x310))
(assert (x121 x239))
(assert (x121 x23))
(assert (= (or x105 x513) x250))
(assert (x380 127))
(assert (= (x98 (x365 64 x54 158)) 64))
(assert (= x249 (or x522 x362)))
(assert (x121 x232))
(assert (x121 x143))
(assert (= (x469 115792089237316195423570985008687907853269984665640564039457584007913129639935 x263) (ite (> 256 x263) (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x304 2 x263)) 0)))
(assert (x121 x320))
(assert (x380 x253))
(assert (x121 x190))
(assert (= (and (not x218) x170) x497))
(assert (= 32 (x98 (x337 32 3))))
(assert (= (and x284 (not x336)) x479))
(assert (x121 x65))
(assert (= (x98 (x365 64 x54 161)) 64))
(assert (= (and x294 x189) x204))
(assert (x121 x393))
(assert (= x305 (or x77 x162)))
(assert (x147 x359 x289))
(assert (x121 x54))
(assert (x121 x384))
(assert (=> (>= 10000 x414) (= 0 (x34 x414))))
(assert (x418 1461501637330902918203684832716283019655932542975))
(assert (x104 x507))
(assert (x121 x265))
(assert (= x325 (=> (and (= x253 (div x41 2)) (or (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x440) (= x440 1)) (= x440 (x72 (- x461 (mod (ite (< x387 32) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (ite (< 0 x461) x253 (x94 127 x253)) x387) (= x338 (< 31 x387)) (= x345 (x346 288)) (<= x345 18446744073709551615) (= x461 (x94 1 x41))) (and (=> (and (and (= x122 (< x113 x391)) (= (+ x113 x275) x391) (= (x337 32 4) x113) (= (div (+ x387 31) 32) x275)) x338) (and (=> x122 x149) (=> (not x122) x184))) (=> (not x338) x213)))))
(assert (x380 x232))
(assert (x121 x435))
(assert (x121 x115))
(assert (x121 x194))
(assert (x121 x234))
(assert (= (=> (and (= (+ x415 1) x424) (= (not (< x424 x444)) x482)) (and x482 x326)) x403))
(assert (x121 x136))
(assert (x121 x450))
(assert (x121 x53))
(assert (x121 x163))
(assert (not (x418 (x365 64 x81 158))))
(assert (x121 x132))
(assert (= x16 (and x421 (not x219))))
(assert (= (x34 (+ x151 x384)) (x34 x151)))
(assert true)
(assert (= x126 (and (not x189) x294)))
(assert (x121 x512))
(assert (x121 x475))
(assert (x121 x349))
(assert (= (and x210 x44) x146))
(assert (x121 x345))
(assert (= (or x16 x92) x226))
(assert (x121 x111))
(assert (= 158 (x363 (x365 64 x81 158))))
(assert (= (x186 (x365 64 x81 161)) x81))
(assert (= (x98 (x365 64 x81 161)) 64))
(assert (x121 x443))
(assert (x121 x185))
(assert (= (and x205 x397) x211))
(assert (= x399 (and x218 x170)))
(assert (x418 57896044618658097711785492504343953926634992332820282019728792003956564819967))
(assert (= x422 x326))
(assert (x418 2167012380))
(assert (x121 x441))
(assert (x121 x26))
(assert (x380 x324))
(assert (= (x98 (x337 32 155)) 32))
(assert (= x81 (x186 (x365 64 x81 159))))
(assert (= x429 (and x397 (not x205))))
(assert (=> (>= 10000 x163) (= (x34 x163) 0)))
(assert (= x38 (and x122 x364)))
(assert (x121 x90))
(assert (= x481 x257))
(assert (x121 x293))
(assert (= (x34 x151) (x34 (+ x151 1))))
(assert (x121 x324))
(assert (= (x469 115792089237316195423570985008687907853269984665640564039457584007913129639935 x229) (ite (> 256 x229) (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x304 2 x229)) 0)))
(assert (= x236 (=> (and (= x70 (x175 192)) (= (x94 1 x474) x164) (= x405 (< 31 x1)) (= x192 (x72 (- x164 (mod (ite (> 32 x1) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= x1 (ite (> x164 0) x518 (x94 127 x518))) (>= 18446744073709551615 x70) (= x518 (div x474 2)) (or (= x192 1) (= x192 115792089237316195423570985008687907853269984665640564039457584007913129639935))) (and (=> (and (and (= (< x151 x371) x412) (= (+ x151 x384) x371) (= x384 (div (+ x1 31) 32)) (= (x337 32 155) x151)) x405) (and (=> x412 x439) (=> (not x412) x257))) (=> (not x405) x481)))))
(assert (x147 x246 x516))
(assert (x121 x471))
(assert (= (x34 34602258808455191227493136189427688107261027562213901346293687426555358216192) 0))
(assert (x121 x7))
(assert (= (x365 64 x81 161) (x34 (x365 64 x81 161))))
(assert (x121 x355))
(assert (= (=> (and (= x89 (+ 1 x113)) (= (not (> x391 x89)) x400)) (and x400 x184)) x149))
(assert (= 0 (x34 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (= x357 (and (not x405) x455)))
(assert (= x215 (and (not x314) x63)))
(assert (x121 x176))
(assert (= (and x338 x226) x364))
(assert (x121 x78))
(assert (= (x186 (x365 64 x81 158)) x81))
(assert (= (x98 (x365 64 x81 159)) 64))
(assert (x121 x315))
(assert (x121 x86))
(assert (x380 x301))
(assert (x418 1889567281))
(assert (= (and x411 x361) x245))
(assert (x380 x85))
(assert (x121 x295))
(assert (x380 x65))
(assert (x492 x474))
(assert (x121 x431))
(assert (x121 x229))
(assert (= (x34 (+ x17 x127)) (x34 x127)))
(assert (x121 x198))
(assert (= (x34 (x365 64 x54 161)) (x365 64 x54 161)))
(assert (= x95 (or x123 x38)))
(assert (x380 1))
(assert (x121 x266))
(assert (x380 x246))
(assert (x380 x464))
(assert (x418 382502381645197248123620639812464696550576095234))
(assert (x121 x446))
(assert (= (and x245 x28) x118))
(assert (x380 31))
(assert (x121 x174))
(assert (x121 x101))
(assert (x372 x225 x507))
(assert (not (x418 (x337 32 155))))
(assert (= (=> (and (or (and x219 (and (= (x94 x246 x516) x101) (= (x94 31 x85) x282) (= x327 (x337 32 3)) (= x356 (+ x351 1)) (= x246 (x490 160)) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x469 115792089237316195423570985008687907853269984665640564039457584007913129639935 x128)) x516) (= (* 8 x282) x128) (= (* 2 x85) x351))) (and (and (= (* x85 8) x354) (= x46 (* x85 2)) (<= 1 x456) (= x37 (ite (<= x136 1) x451 (x339 x136 x46))) (= (x260 (+ x136 x46)) x451) (= x456 (x469 115792089237316195423570985008687907853269984665640564039457584007913129639935 x354)) (= (x490 160) x15) (= (x94 x15 x231) x136) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x456) x231)) (not x219))) (= (= (ite (> x85 31) 1 0) 1) x219)) x325) x472))
(assert (= (or x61 x118) x522))
(assert (x104 x355))
(assert (not (x418 (x337 32 3))))
(assert (x418 18446744073709551615))
(assert (x121 x334))
(assert (= (x34 57005) 0))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x365 64 x81 156)))
(assert (= (x34 39473711962023174749424659199615060097653232135126263878786656434573155500032) 0))
(assert (x121 x33))
(assert (x492 x41))
(assert (= x227 (=> (and (= x3 (x94 1 x178)) (<= 1 x270) (>= 255 x270) (= x233 (ite (> x3 0) x65 (x94 127 x65))) (= x65 (div x178 2)) (= 288 x132) (>= x4 1) (= x80 (> x233 31)) (= x23 (x72 (- x3 (mod (ite (< x233 32) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= x64 (x261 256)) (= x85 (x51 128)) (or (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x23) (= x23 1)) (<= x85 18446744073709551615)) (and (=> (not x80) x472) (=> (and (and (= (+ x127 x17) x291) (= x17 (div (+ x233 31) 32)) (= (< x127 x291) x218) (= (x337 32 3) x127)) x80) (and (=> x218 x195) (=> (not x218) x12)))))))
(assert (= (and x316 x112) x105))
(assert (x121 x120))
(assert (x121 x68))
(assert (x121 x383))
(assert (= x58 (and (not x338) x226)))
(assert (x121 x437))
(assert (x121 x332))
(assert (= x411 (or x126 x204)))
(assert (= (and x360 x209) x214))
(assert (= (or x158 x9) x421))
(assert (x121 x518))
(assert (x372 x310 x142))
(assert (x121 x476))
(assert (x121 x137))
(assert (x121 x499))
(assert (x121 x141))
(check-sat)
(exit)
