(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Certora
Generated on: 2024-04-10
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x32 () Bool)
(declare-fun x452 () Int)
(declare-fun x172 (Int) Int)
(declare-fun x124 () Int)
(declare-fun x119 () Int)
(declare-fun x176 () Int)
(declare-fun x340 () Bool)
(declare-fun x136 () Int)
(declare-fun x449 () Int)
(declare-fun x256 () Int)
(declare-fun x249 () Int)
(declare-fun x91 () Bool)
(declare-fun x115 () Int)
(declare-fun x409 () Int)
(declare-fun x178 () Int)
(declare-fun x491 () Bool)
(declare-fun x303 () Int)
(declare-fun x480 () Bool)
(declare-fun x31 () Bool)
(declare-fun x360 () Bool)
(declare-fun x27 () Int)
(declare-fun x155 () Int)
(declare-fun x386 () Int)
(declare-fun x417 () Int)
(declare-fun x289 () Int)
(declare-fun x36 () Int)
(declare-fun x159 () Bool)
(declare-fun x42 () Int)
(declare-fun x207 () Int)
(declare-fun x57 () Int)
(declare-fun x466 () Int)
(declare-fun x288 () Bool)
(declare-fun x470 () Int)
(declare-fun x20 (Int) Int)
(declare-fun x269 () Int)
(declare-fun x474 (Int Int) Int)
(declare-fun x261 () Bool)
(declare-fun x330 () Int)
(declare-fun x450 () Int)
(declare-fun x193 () Int)
(declare-fun x335 () Int)
(declare-fun x45 () Int)
(declare-fun x109 () Int)
(declare-fun x264 () Int)
(declare-fun x305 () Int)
(declare-fun x443 () Int)
(declare-fun x314 () Bool)
(declare-fun x387 () Int)
(declare-fun x349 () Int)
(declare-fun x35 (Int) Int)
(declare-fun x137 () Int)
(declare-fun x485 () Int)
(declare-fun x475 () Int)
(declare-fun x374 () Int)
(declare-fun x352 () Int)
(declare-fun x125 () Int)
(declare-fun x366 () Int)
(declare-fun x302 () Bool)
(declare-fun x194 () Bool)
(declare-fun x403 () Int)
(declare-fun x156 () Int)
(declare-fun x28 () Int)
(declare-fun x236 () Int)
(declare-fun x167 () Int)
(declare-fun x455 () Int)
(declare-fun x478 () Int)
(declare-fun x486 () Bool)
(declare-fun x23 () Int)
(declare-fun x333 () Int)
(declare-fun x113 () Int)
(declare-fun x479 () Int)
(declare-fun x148 () Bool)
(declare-fun x173 () Bool)
(declare-fun x168 () Int)
(declare-fun x365 () Bool)
(declare-fun x481 () Int)
(declare-fun x378 () Int)
(declare-fun x95 () Bool)
(declare-fun x265 () Bool)
(declare-fun x489 () Int)
(declare-fun x259 () Bool)
(declare-fun x324 (Int) Int)
(declare-fun x426 () Int)
(declare-fun x46 () Int)
(declare-fun x121 () Int)
(declare-fun x180 (Int) Int)
(declare-fun x133 () Int)
(declare-fun x18 () Int)
(declare-fun x140 () Int)
(declare-fun x15 () Int)
(declare-fun x393 () Int)
(declare-fun x286 () Int)
(declare-fun x410 () Int)
(declare-fun x2 () Int)
(declare-fun x186 () Int)
(declare-fun x67 () Bool)
(declare-fun x407 () Int)
(declare-fun x371 () Bool)
(declare-fun x210 () Bool)
(declare-fun x347 () Bool)
(declare-fun x460 () Int)
(declare-fun x275 () Bool)
(declare-fun x96 (Int Int) Int)
(declare-fun x56 () Bool)
(declare-fun x431 () Bool)
(declare-fun x62 (Int) Int)
(declare-fun x384 () Bool)
(declare-fun x120 () Int)
(declare-fun x100 () Bool)
(declare-fun x211 () Int)
(declare-fun x59 () Int)
(declare-fun x71 () Bool)
(declare-fun x482 () Bool)
(declare-fun x129 () Int)
(declare-fun x306 () Bool)
(declare-fun x43 () Bool)
(declare-fun x143 () Bool)
(declare-fun x250 () Bool)
(declare-fun x457 (Int) Int)
(declare-fun x323 () Int)
(declare-fun x6 () Int)
(declare-fun x26 () Int)
(declare-fun x33 () Int)
(declare-fun x382 () Int)
(declare-fun x405 () Bool)
(declare-fun x78 () Bool)
(declare-fun x316 () Int)
(declare-fun x196 () Int)
(declare-fun x240 (Int) Int)
(declare-fun x363 () Bool)
(declare-fun x296 () Int)
(declare-fun x76 (Int) Int)
(declare-fun x89 () Bool)
(declare-fun x376 (Int) Int)
(declare-fun x54 (Int Int) Int)
(declare-fun x285 () Int)
(declare-fun x282 () Int)
(declare-fun x293 () Int)
(declare-fun x141 () Int)
(declare-fun x388 () Bool)
(declare-fun x392 () Int)
(declare-fun x47 (Int) Int)
(declare-fun x463 () Int)
(declare-fun x467 () Int)
(declare-fun x192 (Int) Int)
(declare-fun x53 () Bool)
(declare-fun x93 () Int)
(declare-fun x8 () Bool)
(declare-fun x135 () Bool)
(declare-fun x468 () Int)
(declare-fun x1 () Int)
(declare-fun x146 () Int)
(declare-fun x427 () Int)
(declare-fun x492 () Int)
(declare-fun x81 () Bool)
(declare-fun x304 () Int)
(declare-fun x483 (Int Int Int) Int)
(declare-fun x52 () Int)
(declare-fun x175 () Int)
(declare-fun x353 () Bool)
(declare-fun x328 () Int)
(declare-fun x369 () Bool)
(declare-fun x320 () Bool)
(declare-fun x381 () Bool)
(declare-fun x228 () Bool)
(declare-fun x195 () Int)
(declare-fun x134 () Bool)
(declare-fun x122 () Bool)
(declare-fun x270 () Int)
(declare-fun x63 () Int)
(declare-fun x258 () Int)
(declare-fun x51 () Bool)
(declare-fun x235 () Int)
(declare-fun x401 () Int)
(declare-fun x400 () Int)
(declare-fun x74 () Int)
(declare-fun x329 () Int)
(declare-fun x247 () Bool)
(declare-fun x216 () Int)
(declare-fun x325 () Int)
(declare-fun x68 () Int)
(declare-fun x182 () Int)
(declare-fun x212 () Int)
(declare-fun x108 () Bool)
(declare-fun x202 () Bool)
(declare-fun x203 () Int)
(declare-fun x327 () Int)
(declare-fun x127 () Bool)
(declare-fun x84 () Bool)
(declare-fun x465 () Int)
(declare-fun x459 (Int) Int)
(declare-fun x373 () Bool)
(declare-fun x142 () Int)
(declare-fun x446 () Int)
(declare-fun x262 () Bool)
(declare-fun x183 () Int)
(declare-fun x351 (Int) Bool)
(declare-fun x416 () Int)
(declare-fun x248 () Int)
(declare-fun x205 () Int)
(declare-fun x153 () Int)
(declare-fun x94 () Int)
(declare-fun x402 () Int)
(declare-fun x99 () Int)
(declare-fun x154 () Bool)
(declare-fun x218 () Int)
(declare-fun x447 () Int)
(declare-fun x462 () Int)
(declare-fun x251 (Int) Int)
(declare-fun x291 () Int)
(declare-fun x414 () Int)
(declare-fun x334 () Int)
(declare-fun x441 () Bool)
(declare-fun x252 (Int Int) Int)
(declare-fun x72 () Bool)
(declare-fun x273 () Bool)
(declare-fun x29 () Bool)
(declare-fun x206 () Int)
(declare-fun x279 () Int)
(declare-fun x106 () Bool)
(declare-fun x130 () Int)
(declare-fun x215 () Bool)
(declare-fun x201 () Int)
(declare-fun x471 () Int)
(declare-fun x222 (Int) Int)
(declare-fun x34 () Bool)
(declare-fun x458 () Int)
(declare-fun x64 () Bool)
(declare-fun x274 () Int)
(declare-fun x311 () Int)
(declare-fun x13 () Bool)
(declare-fun x112 (Int) Int)
(declare-fun x157 () Int)
(declare-fun x164 () Int)
(declare-fun x219 () Int)
(declare-fun x213 () Int)
(declare-fun x117 () Bool)
(declare-fun x150 () Int)
(declare-fun x152 (Int Int) Int)
(declare-fun x233 () Int)
(declare-fun x283 () Bool)
(declare-fun x359 () Int)
(declare-fun x344 () Int)
(declare-fun x197 () Bool)
(declare-fun x254 () Int)
(declare-fun x61 () Bool)
(declare-fun x435 () Bool)
(declare-fun x342 () Int)
(declare-fun x453 () Int)
(declare-fun x337 () Bool)
(declare-fun x199 () Int)
(declare-fun x257 (Int) Int)
(declare-fun x385 () Bool)
(declare-fun x241 () Int)
(declare-fun x161 () Bool)
(declare-fun x66 () Int)
(declare-fun x411 () Bool)
(declare-fun x245 () Bool)
(declare-fun x406 () Bool)
(declare-fun x266 () Int)
(declare-fun x145 () Int)
(declare-fun x14 () Bool)
(declare-fun x444 () Bool)
(declare-fun x354 () Bool)
(declare-fun x187 (Int) Int)
(declare-fun x423 () Int)
(declare-fun x38 () Int)
(declare-fun x190 () Bool)
(declare-fun x208 () Bool)
(declare-fun x166 () Int)
(declare-fun x473 () Bool)
(declare-fun x308 () Bool)
(declare-fun x229 () Bool)
(declare-fun x144 () Int)
(declare-fun x348 () Int)
(declare-fun x383 (Int) Int)
(declare-fun x350 () Bool)
(declare-fun x80 () Bool)
(declare-fun x301 () Int)
(declare-fun x98 (Int) Int)
(declare-fun x456 () Int)
(declare-fun x422 (Int) Int)
(declare-fun x7 () Bool)
(declare-fun x429 () Int)
(declare-fun x367 () Int)
(declare-fun x179 () Bool)
(declare-fun x319 () Int)
(declare-fun x77 () Int)
(declare-fun x162 () Int)
(declare-fun x37 () Bool)
(declare-fun x276 () Int)
(declare-fun x390 () Int)
(declare-fun x440 (Int) Int)
(declare-fun x50 () Int)
(declare-fun x102 () Int)
(declare-fun x280 () Bool)
(declare-fun x287 () Int)
(declare-fun x174 () Int)
(declare-fun x160 () Bool)
(declare-fun x118 () Bool)
(declare-fun x370 () Int)
(declare-fun x336 () Bool)
(declare-fun x428 () Bool)
(declare-fun x87 () Bool)
(declare-fun x217 () Bool)
(declare-fun x317 (Int) Int)
(declare-fun x239 () Int)
(declare-fun x75 () Int)
(declare-fun x408 () Bool)
(declare-fun x438 () Int)
(declare-fun x345 () Bool)
(declare-fun x412 () Int)
(declare-fun x177 () Int)
(declare-fun x395 () Int)
(declare-fun x268 () Bool)
(declare-fun x138 () Bool)
(declare-fun x79 () Bool)
(declare-fun x225 () Int)
(declare-fun x425 () Bool)
(declare-fun x41 () Int)
(declare-fun x332 () Int)
(declare-fun x484 () Bool)
(declare-fun x220 () Bool)
(declare-fun x397 () Int)
(declare-fun x171 () Bool)
(declare-fun x420 () Int)
(declare-fun x188 () Int)
(declare-fun x424 () Int)
(declare-fun x237 () Int)
(declare-fun x105 () Bool)
(declare-fun x158 () Int)
(declare-fun x189 () Int)
(declare-fun x11 () Int)
(declare-fun x271 () Bool)
(declare-fun x398 () Int)
(declare-fun x272 () Int)
(declare-fun x437 () Bool)
(declare-fun x477 () Int)
(declare-fun x128 () Bool)
(declare-fun x149 () Bool)
(declare-fun x101 () Bool)
(declare-fun x313 () Int)
(declare-fun x472 () Int)
(declare-fun x55 () Int)
(declare-fun x404 () Bool)
(declare-fun x88 () Int)
(declare-fun x312 () Bool)
(declare-fun x3 () Bool)
(declare-fun x184 () Int)
(declare-fun x389 () Int)
(declare-fun x297 () Bool)
(declare-fun x24 () Int)
(declare-fun x170 (Int) Int)
(declare-fun x5 () Int)
(declare-fun x380 () Int)
(declare-fun x48 () Int)
(declare-fun x39 () Bool)
(declare-fun x433 () Int)
(declare-fun x357 () Int)
(declare-fun x116 () Bool)
(declare-fun x421 () Int)
(declare-fun x204 () Bool)
(declare-fun x69 () Bool)
(declare-fun x223 () Int)
(declare-fun x83 () Bool)
(declare-fun x114 () Int)
(declare-fun x299 () Int)
(declare-fun x300 () Bool)
(declare-fun x338 () Int)
(declare-fun x284 () Bool)
(declare-fun x448 () Int)
(declare-fun x90 () Int)
(declare-fun x70 () Int)
(declare-fun x238 () Int)
(declare-fun x375 () Int)
(declare-fun x493 (Int) Int)
(declare-fun x111 () Bool)
(declare-fun x487 () Int)
(declare-fun x454 () Int)
(declare-fun x253 () Int)
(declare-fun x379 () Int)
(declare-fun x436 () Bool)
(declare-fun x132 () Int)
(declare-fun x191 () Int)
(declare-fun x362 () Int)
(declare-fun x309 () Int)
(declare-fun x260 (Int) Int)
(declare-fun x30 () Bool)
(declare-fun x58 () Int)
(declare-fun x415 () Int)
(declare-fun x419 () Bool)
(declare-fun x490 () Bool)
(declare-fun x244 () Bool)
(declare-fun x103 () Bool)
(declare-fun x110 () Int)
(declare-fun x224 (Int) Int)
(declare-fun x126 () Int)
(declare-fun x372 (Int Int) Int)
(declare-fun x321 () Int)
(declare-fun x200 () Bool)
(declare-fun x396 () Int)
(declare-fun x343 () Int)
(declare-fun x307 () Bool)
(declare-fun x391 () Int)
(declare-fun x163 (Int) Int)
(declare-fun x430 () Int)
(declare-fun x255 () Bool)
(declare-fun x4 () Int)
(declare-fun x356 () Int)
(declare-fun x73 () Int)
(declare-fun x231 () Bool)
(declare-fun x86 () Bool)
(declare-fun x82 () Int)
(declare-fun x65 () Bool)
(declare-fun x221 () Bool)
(declare-fun x294 () Bool)
(declare-fun x469 () Int)
(declare-fun x358 () Bool)
(declare-fun x232 () Int)
(define-fun x434 ((x226 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x226) (>= x226 0)) x226 (- x226 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x439 ((x226 Int)) Int (ite (and (< x226 0) (>= x226 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x226 115792089237316195423570985008687907853269984665640564039457584007913129639936) x226))
(define-fun x318 ((x442 Int)) Bool (and (>= x442 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x442)))
(define-fun x339 ((x442 Int)) Bool (and (= (x96 x442 115792089237316195423570985008687907853269984665640564039457584007913129639935) x442) (= (x96 115792089237316195423570985008687907853269984665640564039457584007913129639935 x442) x442)))
(define-fun x10 ((x442 Int)) Bool (and (= 0 (x96 x442 0)) (= (x96 0 x442) 0)))
(define-fun x413 ((x442 Int)) Bool (= (x96 x442 x442) x442))
(define-fun x451 ((x442 Int)) Bool (and (x413 x442) (x339 x442) (x10 x442)))
(define-fun x310 ((x442 Int) (x464 Int)) Bool (= (x96 x442 x464) (x96 x464 x442)))
(define-fun x85 ((x442 Int) (x464 Int)) Bool (and (=> (>= x442 0) (>= x442 (x96 x442 x464))) (<= 0 (x96 x442 x464)) (=> (>= x464 0) (<= (x96 x442 x464) x464))))
(define-fun x277 ((x442 Int) (x464 Int)) Bool (and (x85 x442 x464) (x310 x442 x464)))
(define-fun x418 ((x442 Int)) Bool (= (mod x442 1099511627776) (x96 x442 1099511627775)))
(define-fun x445 ((x442 Int)) Bool (and (x418 x442) (x277 x442 1099511627775)))
(define-fun x322 ((x442 Int)) Bool (= (x96 x442 1) (mod x442 2)))
(define-fun x488 ((x442 Int)) Bool (and (x322 x442) (x277 x442 1)))
(define-fun x263 ((x442 Int)) Bool (= (mod x442 128) (x96 x442 127)))
(define-fun x246 ((x442 Int)) Bool (and (x263 x442) (x277 x442 127)))
(define-fun x198 ((x442 Int)) Bool (= (+ (mod x442 32) (x96 x442 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (mod x442 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x16 ((x442 Int)) Bool (and (x277 x442 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x198 x442)))
(define-fun x151 ((x442 Int)) Bool (and (= (x372 x442 115792089237316195423570985008687907853269984665640564039457584007913129639935) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x372 115792089237316195423570985008687907853269984665640564039457584007913129639935 x442))))
(define-fun x22 ((x442 Int)) Bool (and (= (x372 0 x442) x442) (= x442 (x372 x442 0))))
(define-fun x476 ((x442 Int)) Bool (= x442 (x372 x442 x442)))
(define-fun x377 ((x442 Int)) Bool (and (x22 x442) (x151 x442) (x476 x442)))
(define-fun x331 ((x442 Int) (x464 Int)) Bool (= (x372 x464 x442) (x372 x442 x464)))
(define-fun x123 ((x442 Int) (x464 Int)) Bool (and (<= (x372 x442 x464) (+ x442 x464)) (=> (<= 0 x464) (<= x464 (x372 x442 x464))) (=> (<= 0 x442) (>= (x372 x442 x464) x442))))
(define-fun x185 ((x442 Int) (x464 Int)) Bool (and (x123 x442 x464) (x331 x442 x464)))
(define-fun x19 ((x442 Int)) Bool (= (x96 x442 31) (mod x442 32)))
(define-fun x107 ((x442 Int)) Bool (and (x19 x442) (x277 x442 31)))
(define-fun x242 ((x97 Int)) Int 0)
(define-fun x12 ((x97 Int)) Int 0)
(define-fun x25 ((x97 Int)) Int (ite (< x97 x282) (x422 x97) 0))
(define-fun x209 ((x97 Int)) Int (ite (and (>= x97 0) (> x282 x97)) (x224 x97) (x25 x97)))
(define-fun x326 ((x97 Int)) Int (ite (= x97 x88) x468 (x47 x97)))
(define-fun x230 ((x97 Int)) Int (ite (= x97 x301) x397 (x112 x97)))
(define-fun x21 ((x97 Int)) Int (ite (= x97 x301) x119 (x230 x97)))
(define-fun x361 ((x97 Int)) Int (ite (= x301 x97) x460 (x383 x97)))
(define-fun x341 ((x97 Int)) Int (ite (= x301 x97) 1 (x257 x97)))
(define-fun x44 ((x97 Int)) Int (ite (= x301 x97) x481 (x251 x97)))
(define-fun x368 ((x97 Int)) Int (ite (= x97 x301) x448 (x376 x97)))
(define-fun x40 ((x97 Int)) Int (ite (= x301 x97) x26 (x44 x97)))
(define-fun x364 ((x97 Int)) Int (ite (= x236 x97) x401 (x222 x97)))
(define-fun x278 ((x97 Int)) Int (ite (= x236 x97) 604800 (x170 x97)))
(define-fun x281 ((x97 Int)) Int (ite (= x254 x97) x36 (x324 x97)))
(define-fun x399 ((x97 Int)) Int (ite (= x97 x162) x279 (x98 x97)))
(define-fun x131 ((x97 Int)) Int (ite (= x162 x97) x438 (x35 x97)))
(define-fun x17 ((x97 Int)) Int (ite (= x162 x97) x75 (x440 x97)))
(define-fun x139 ((x97 Int)) Int (ite (= x97 x150) x475 (x493 x97)))
(define-fun x227 ((x97 Int)) Int (ite (= x301 x97) x233 (x21 x97)))
(define-fun x104 ((x97 Int)) Int (ite (= x97 x301) x166 (x361 x97)))
(define-fun x181 ((x97 Int)) Int (ite (= x301 x97) x342 (x341 x97)))
(define-fun x92 ((x97 Int)) Int (ite (= x97 x301) x426 (x40 x97)))
(define-fun x9 ((x97 Int)) Int (ite (= x97 x301) x57 (x368 x97)))
(define-fun x267 ((x97 Int)) Int (ite (= x236 x97) x110 (x260 x97)))
(define-fun x298 ((x97 Int)) Int 0)
(define-fun x346 ((x97 Int)) Int 0)
(define-fun x290 ((x97 Int)) Int (ite (= x97 x130) 0 (x459 x97)))
(define-fun x169 ((x97 Int)) Int (ite (= x97 x327) 0 (x317 x97)))
(define-fun x214 ((x97 Int)) Int (ite x67 (x459 x97) (x290 x97)))
(define-fun x432 ((x97 Int)) Int (ite x13 (x317 x97) (x169 x97)))
(define-fun x461 ((x97 Int)) Int (ite x100 (x459 x97) (ite x67 (x459 x97) (x290 x97))))
(define-fun x295 ((x97 Int)) Int (ite (= x97 x330) x462 (x172 x97)))
(define-fun x147 ((x97 Int)) Int (ite (= x182 x97) x323 (x461 x97)))
(define-fun x60 ((x97 Int)) Int (ite x358 (x461 x97) (x147 x97)))
(define-fun x394 ((x97 Int)) Int (ite (= x97 x420) x479 (x60 x97)))
(define-fun x243 ((x97 Int)) Int (ite (= x97 x330) x453 (x172 x97)))
(define-fun x234 ((x97 Int)) Int (ite x69 (x317 x97) (ite x13 (x317 x97) (x169 x97))))
(define-fun x292 ((x97 Int)) Int (ite (= x348 x97) x433 (x163 x97)))
(define-fun x315 ((x97 Int)) Int (ite (= x97 x291) x370 (x234 x97)))
(define-fun x355 ((x97 Int)) Int (ite x369 (x234 x97) (x315 x97)))
(define-fun x165 ((x97 Int)) Int (ite (= x97 x378) x395 (x355 x97)))
(define-fun x49 ((x97 Int)) Int (ite (= x348 x97) x203 (x163 x97)))
(assert (= (x180 (+ x304 x15)) (x180 x304)))
(assert (< 10000 (x483 64 x167 2)))
(assert (x318 x423))
(assert (x318 x427))
(assert (x318 x238))
(assert (= (or x67 x171) x103))
(assert (x351 1461501637330902918203684832716283019655932542975))
(assert (x318 x366))
(assert (x318 x188))
(assert (x351 1099511627775))
(assert (= x179 (and (not x105) x72)))
(assert (=> (<= x166 10000) (= 0 (x180 x166))))
(assert (x351 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x318 x141))
(assert (x318 x453))
(assert (= 32 (x457 (x252 32 x254))))
(assert (x318 x424))
(assert (= (x152 115792089237316195423570985008687907853269984665640564039457584007913129639935 x352) (ite (< x352 256) (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x54 2 x352)) 0)))
(assert (= (or (and x320 (not x111)) x39) x173))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x483 64 x211 3)))
(assert (= (or x100 x103) x72))
(assert (x318 x328))
(assert (x318 x462))
(assert (= (x252 32 x348) (x180 (x252 32 x348))))
(assert (x318 x489))
(assert (x351 4294967295))
(assert (x318 x24))
(assert (< (x483 64 x454 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= 0 (x180 604800)))
(assert (= (ite (> 256 x248) (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x54 2 x248)) 0) (x152 115792089237316195423570985008687907853269984665640564039457584007913129639935 x248)))
(assert (x318 x438))
(assert (x318 x332))
(assert (= x350 (and x118 x247)))
(assert (= (x180 (+ 1 x130)) (x180 x130)))
(assert (x318 x99))
(assert (< 10000 (x483 64 x166 2)))
(assert (x318 x349))
(assert (and (= (x54 2 178) 383123885216472214589586756787577295904684780545900544) (= 10141204801825835211973625643008 (x54 2 103)) (= (x54 2 206) 102844034832575377634685573909834406561420991602098741459288064) (= (x54 2 218) 421249166674228746791672110734681729275580381602196445017243910144) (= (x54 2 39) 549755813888) (= 12855504354071922204335696738729300820177623950262342682411008 (x54 2 203)) (= 4951760157141521099596496896 (x54 2 92)) (= (x54 2 58) 288230376151711744) (= (x54 2 131) 2722258935367507707706996859454145691648) (= (x54 2 165) 46768052394588893382517914646921056628989841375232) (= (x54 2 48) 281474976710656) (= 20282409603651670423947251286016 (x54 2 104)) (= (x54 2 122) 5316911983139663491615228241121378304) (= (x54 2 234) 27606985387162255149739023449108101809804435888681546220650096895197184) (= (x54 2 16) 65536) (= (x54 2 77) 151115727451828646838272) (= (x54 2 212) 6582018229284824168619876730229402019930943462534319453394436096) (= (x54 2 182) 6129982163463555433433388108601236734474956488734408704) (= (x54 2 248) 452312848583266388373324160190187140051835877600158453279131187530910662656) (= (x54 2 79) 604462909807314587353088) (= (x54 2 174) 23945242826029513411849172299223580994042798784118784) (= 3618502788666131106986593281521497120414687020801267626233049500247285301248 (x54 2 251)) (= (x54 2 23) 8388608) (= 1329227995784915872903807060280344576 (x54 2 120)) (= 33554432 (x54 2 25)) (= (x54 2 197) 200867255532373784442745261542645325315275374222849104412672) (= (x54 2 233) 13803492693581127574869511724554050904902217944340773110325048447598592) (= 268435456 (x54 2 28)) (= 1237940039285380274899124224 (x54 2 90)) (= (x54 2 128) 340282366920938463463374607431768211456) (= 85070591730234615865843651857942052864 (x54 2 126)) (= 2199023255552 (x54 2 41)) (= (x54 2 229) 862718293348820473429344482784628181556388621521298319395315527974912) (= 191561942608236107294793378393788647952342390272950272 (x54 2 177)) (= 904625697166532776746648320380374280103671755200316906558262375061821325312 (x54 2 249)) (= 87112285931760246646623899502532662132736 (x54 2 136)) (= 748288838313422294120286634350736906063837462003712 (x54 2 169)) (= 73786976294838206464 (x54 2 66)) (= (x54 2 85) 38685626227668133590597632) (= 803469022129495137770981046170581301261101496891396417650688 (x54 2 199)) (= (x54 2 70) 1180591620717411303424) (= (x54 2 220) 1684996666696914987166688442938726917102321526408785780068975640576) (= 210624583337114373395836055367340864637790190801098222508621955072 (x54 2 217)) (= (x54 2 14) 16384) (= 26959946667150639794667015087019630673637144422540572481103610249216 (x54 2 224)) (= 1024 (x54 2 10)) (= 316912650057057350374175801344 (x54 2 98)) (= (x54 2 134) 21778071482940061661655974875633165533184) (= 19807040628566084398385987584 (x54 2 94)) (= 12554203470773361527671578846415332832204710888928069025792 (x54 2 193)) (= 1208925819614629174706176 (x54 2 80)) (= (x54 2 62) 4611686018427387904) (= (x54 2 72) 4722366482869645213696) (= 28948022309329048855892746252171976963317496166410141009864396001978282409984 (x54 2 254)) (= 2854495385411919762116571938898990272765493248 (x54 2 151)) (= (x54 2 27) 134217728) (= (x54 2 163) 11692013098647223345629478661730264157247460343808) (= 170141183460469231731687303715884105728 (x54 2 127)) (= 51422017416287688817342786954917203280710495801049370729644032 (x54 2 205)) (= (x54 2 51) 2251799813685248) (= 6427752177035961102167848369364650410088811975131171341205504 (x54 2 202)) (= 131072 (x54 2 17)) (= (x54 2 100) 1267650600228229401496703205376) (= 2305843009213693952 (x54 2 61)) (= 24519928653854221733733552434404946937899825954937634816 (x54 2 184)) (= (x54 2 140) 1393796574908163946345982392040522594123776) (= 13164036458569648337239753460458804039861886925068638906788872192 (x54 2 213)) (= 12259964326927110866866776217202473468949912977468817408 (x54 2 183)) (= 64 (x54 2 6)) (= (x54 2 138) 348449143727040986586495598010130648530944) (= (x54 2 186) 98079714615416886934934209737619787751599303819750539264) (= 1048576 (x54 2 20)) (= (x54 2 162) 5846006549323611672814739330865132078623730171904) (= (x54 2 73) 9444732965739290427392) (= (x54 2 167) 187072209578355573530071658587684226515959365500928) (= 128 (x54 2 7)) (= (x54 2 185) 49039857307708443467467104868809893875799651909875269632) (= (x54 2 175) 47890485652059026823698344598447161988085597568237568) (= 77371252455336267181195264 (x54 2 86)) (= 25711008708143844408671393477458601640355247900524685364822016 (x54 2 204)) (= (x54 2 208) 411376139330301510538742295639337626245683966408394965837152256) (= (x54 2 157) 182687704666362864775460604089535377456991567872) (= (x54 2 137) 174224571863520493293247799005065324265472) (= (x54 2 230) 1725436586697640946858688965569256363112777243042596638790631055949824) (= 32768 (x54 2 15)) (= (x54 2 256) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (x54 2 236) 110427941548649020598956093796432407239217743554726184882600387580788736) (= 590295810358705651712 (x54 2 69)) (= (x54 2 89) 618970019642690137449562112) (= (x54 2 166) 93536104789177786765035829293842113257979682750464) (= (x54 2 97) 158456325028528675187087900672) (= (x54 2 164) 23384026197294446691258957323460528314494920687616) (= 3213876088517980551083924184682325205044405987565585670602752 (x54 2 201)) (= 39614081257132168796771975168 (x54 2 95)) (= (x54 2 96) 79228162514264337593543950336) (= 196159429230833773869868419475239575503198607639501078528 (x54 2 187)) (= 1606938044258990275541962092341162602522202993782792835301376 (x54 2 200)) (= (x54 2 253) 14474011154664524427946373126085988481658748083205070504932198000989141204992) (= (x54 2 152) 5708990770823839524233143877797980545530986496) (= (x54 2 13) 8192) (= (x54 2 243) 14134776518227074636666380005943348126619871175004951664972849610340958208) (= (x54 2 216) 105312291668557186697918027683670432318895095400549111254310977536) (= (x54 2 37) 137438953472) (= 75557863725914323419136 (x54 2 76)) (= (x54 2 123) 10633823966279326983230456482242756608) (= 680564733841876926926749214863536422912 (x54 2 129)) (= 9223372036854775808 (x54 2 63)) (= 3064991081731777716716694054300618367237478244367204352 (x54 2 181)) (= 4398046511104 (x54 2 42)) (= (x54 2 33) 8589934592) (= (x54 2 26) 67108864) (= 374144419156711147060143317175368453031918731001856 (x54 2 168)) (= 9007199254740992 (x54 2 53)) (= 2993155353253689176481146537402947624255349848014848 (x54 2 171)) (= (x54 2 19) 524288) (= (x54 2 125) 42535295865117307932921825928971026432) (= (x54 2 47) 140737488355328) (= (x54 2 50) 1125899906842624) (= (x54 2 114) 20769187434139310514121985316880384) (= (x54 2 226) 107839786668602559178668060348078522694548577690162289924414440996864) (= 162259276829213363391578010288128 (x54 2 107)) (= 8796093022208 (x54 2 43)) (= (x54 2 57) 144115188075855872) (= 28269553036454149273332760011886696253239742350009903329945699220681916416 (x54 2 244)) (= 13479973333575319897333507543509815336818572211270286240551805124608 (x54 2 223)) (= 35184372088832 (x54 2 45)) (= (x54 2 143) 11150372599265311570767859136324180752990208) (= 392318858461667547739736838950479151006397215279002157056 (x54 2 188)) (= 21267647932558653966460912964485513216 (x54 2 124)) (= (x54 2 255) 57896044618658097711785492504343953926634992332820282019728792003956564819968) (= (x54 2 170) 1496577676626844588240573268701473812127674924007424) (= (x54 2 110) 1298074214633706907132624082305024) (= 226156424291633194186662080095093570025917938800079226639565593765455331328 (x54 2 247)) (= 18014398509481984 (x54 2 54)) (= 2048 (x54 2 11)) (= (x54 2 179) 766247770432944429179173513575154591809369561091801088) (= (x54 2 108) 324518553658426726783156020576256) (= (x54 2 30) 1073741824) (= (x54 2 64) 18446744073709551616) (= (x54 2 112) 5192296858534827628530496329220096) (= (x54 2 31) 2147483648) (= (x54 2 158) 365375409332725729550921208179070754913983135744) (= 332306998946228968225951765070086144 (x54 2 118)) (= (x54 2 49) 562949953421312) (= (x54 2 5) 32) (= 22300745198530623141535718272648361505980416 (x54 2 144)) (= 2475880078570760549798248448 (x54 2 91)) (= 713623846352979940529142984724747568191373312 (x54 2 149)) (= (x54 2 133) 10889035741470030830827987437816582766592) (= (x54 2 59) 576460752303423488) (= (x54 2 145) 44601490397061246283071436545296723011960832) (= (x54 2 32) 4294967296) (= 5575186299632655785383929568162090376495104 (x54 2 142)) (= (x54 2 22) 4194304) (= 72057594037927936 (x54 2 56)) (= 52656145834278593348959013841835216159447547700274555627155488768 (x54 2 215)) (= 45671926166590716193865151022383844364247891968 (x54 2 155)) (= (x54 2 228) 431359146674410236714672241392314090778194310760649159697657763987456) (= 822752278660603021077484591278675252491367932816789931674304512 (x54 2 209)) (= 53919893334301279589334030174039261347274288845081144962207220498432 (x54 2 225)) (= (x54 2 106) 81129638414606681695789005144064) (= 36893488147419103232 (x54 2 65)) (= (x54 2 198) 401734511064747568885490523085290650630550748445698208825344) (= (x54 2 2) 4) (= (x54 2 116) 83076749736557242056487941267521536) (= (x54 2 196) 100433627766186892221372630771322662657637687111424552206336) (= 6739986666787659948666753771754907668409286105635143120275902562304 (x54 2 222)) (= (x54 2 159) 730750818665451459101842416358141509827966271488) (= (x54 2 8) 256) (= (x54 2 239) 883423532389192164791648750371459257913741948437809479060803100646309888) (= 3533694129556768659166595001485837031654967793751237916243212402585239552 (x54 2 241)) (= (x54 2 29) 536870912) (= 1645504557321206042154969182557350504982735865633579863348609024 (x54 2 210)) (= (x54 2 161) 2923003274661805836407369665432566039311865085952) (= 2535301200456458802993406410752 (x54 2 101)) (= 3291009114642412084309938365114701009965471731267159726697218048 (x54 2 211)) (= (x54 2 1) 2) (= (x54 2 227) 215679573337205118357336120696157045389097155380324579848828881993728) (= 9903520314283042199192993792 (x54 2 93)) (= (x54 2 75) 37778931862957161709568) (= 2787593149816327892691964784081045188247552 (x54 2 141)) (= 41538374868278621028243970633760768 (x54 2 115)) (= (x54 2 18) 262144) (= 50216813883093446110686315385661331328818843555712276103168 (x54 2 195)) (= (x54 2 81) 2417851639229258349412352) (= 4096 (x54 2 12)) (= (x54 2 67) 147573952589676412928) (= (x54 2 139) 696898287454081973172991196020261297061888) (= 166153499473114484112975882535043072 (x54 2 117)) (= (x54 2 238) 441711766194596082395824375185729628956870974218904739530401550323154944) (= 649037107316853453566312041152512 (x54 2 109)) (= 5986310706507378352962293074805895248510699696029696 (x54 2 172)) (= (x54 2 82) 4835703278458516698824704) (= 1 (x54 2 0)) (= 5444517870735015415413993718908291383296 (x54 2 132)) (= 16777216 (x54 2 24)) (= (x54 2 21) 2097152) (= 220855883097298041197912187592864814478435487109452369765200775161577472 (x54 2 237)) (= 3450873173395281893717377931138512726225554486085193277581262111899648 (x54 2 231)) (= 22835963083295358096932575511191922182123945984 (x54 2 154)) (= 70368744177664 (x54 2 46)) (= 91343852333181432387730302044767688728495783936 (x54 2 156)) (= (x54 2 240) 1766847064778384329583297500742918515827483896875618958121606201292619776) (= (x54 2 130) 1361129467683753853853498429727072845824) (= (x54 2 250) 1809251394333065553493296640760748560207343510400633813116524750123642650624) (= 512 (x54 2 9)) (= (x54 2 192) 6277101735386680763835789423207666416102355444464034512896) (= (x54 2 78) 302231454903657293676544) (= (x54 2 221) 3369993333393829974333376885877453834204643052817571560137951281152) (= 295147905179352825856 (x54 2 68)) (= (x54 2 84) 19342813113834066795298816) (= 274877906944 (x54 2 38)) (= 154742504910672534362390528 (x54 2 87)) (= 40564819207303340847894502572032 (x54 2 105)) (= (x54 2 160) 1461501637330902918203684832716283019655932542976) (= 56539106072908298546665520023773392506479484700019806659891398441363832832 (x54 2 245)) (= 2658455991569831745807614120560689152 (x54 2 121)) (= 1569275433846670190958947355801916604025588861116008628224 (x54 2 190)) (= 178405961588244985132285746181186892047843328 (x54 2 147)) (= (x54 2 52) 4503599627370496) (= (x54 2 153) 11417981541647679048466287755595961091061972992) (= (x54 2 119) 664613997892457936451903530140172288) (= (x54 2 55) 36028797018963968) (= (x54 2 246) 113078212145816597093331040047546785012958969400039613319782796882727665664) (= (x54 2 191) 3138550867693340381917894711603833208051177722232017256448) (= 842498333348457493583344221469363458551160763204392890034487820288 (x54 2 219)) (= (x54 2 176) 95780971304118053647396689196894323976171195136475136) (= 5070602400912917605986812821504 (x54 2 102)) (= (x54 2 111) 2596148429267413814265248164610048) (= (x54 2 34) 17179869184) (= 6901746346790563787434755862277025452451108972170386555162524223799296 (x54 2 232)) (= 89202980794122492566142873090593446023921664 (x54 2 146)) (= (x54 2 189) 784637716923335095479473677900958302012794430558004314112) (= 8 (x54 2 3)) (= 205688069665150755269371147819668813122841983204197482918576128 (x54 2 207)) (= (x54 2 60) 1152921504606846976) (= (x54 2 35) 34359738368) (= 1532495540865888858358347027150309183618739122183602176 (x54 2 180)) (= 26328072917139296674479506920917608079723773850137277813577744384 (x54 2 214)) (= 9671406556917033397649408 (x54 2 83)) (= (x54 2 135) 43556142965880123323311949751266331066368) (= (x54 2 71) 2361183241434822606848) (= 309485009821345068724781056 (x54 2 88)) (= 17592186044416 (x54 2 44)) (= 11972621413014756705924586149611790497021399392059392 (x54 2 173)) (= (x54 2 99) 633825300114114700748351602688) (= 356811923176489970264571492362373784095686656 (x54 2 148)) (= 1099511627776 (x54 2 40)) (= (x54 2 74) 18889465931478580854784) (= 55213970774324510299478046898216203619608871777363092441300193790394368 (x54 2 235)) (= 16 (x54 2 4)) (= (x54 2 150) 1427247692705959881058285969449495136382746624) (= (x54 2 194) 25108406941546723055343157692830665664409421777856138051584) (= (x54 2 242) 7067388259113537318333190002971674063309935587502475832486424805170479104) (= 10384593717069655257060992658440192 (x54 2 113)) (= (x54 2 36) 68719476736) (= (x54 2 252) 7237005577332262213973186563042994240829374041602535252466099000494570602496)))
(assert (x318 x42))
(assert (= (x483 64 x167 2) (x180 (x483 64 x167 2))))
(assert (=> (>= 10000 x349) (= 0 (x180 x349))))
(assert (x277 x492 x357))
(assert (< 10000 (x483 64 x349 3)))
(assert (x277 x293 x174))
(assert (x318 x59))
(assert (x318 x393))
(assert (x451 31))
(assert (= (x180 x429) (x180 (+ x188 x429))))
(assert (x318 x253))
(assert (= 64 (x457 (x483 64 x166 2))))
(assert (= (x180 (x252 32 x330)) (x252 32 x330)))
(assert (x318 x469))
(assert (= (ite (> 256 x470) (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x54 2 x470)) 0) (x152 115792089237316195423570985008687907853269984665640564039457584007913129639935 x470)))
(assert (x318 x232))
(assert (= (or x358 x200) x320))
(assert (x318 x479))
(assert (x318 x110))
(assert (x318 x55))
(assert (x318 x120))
(assert (x351 57896044618658097711785492504343953926634992332820282019728792003956564819739))
(assert (= x200 (and x353 x204)))
(assert (x277 x94 x42))
(assert (x318 x299))
(assert (x318 x63))
(assert (x318 x379))
(assert (x185 x382 x38))
(assert (= (=> (and (or (and x118 (and (= (x96 x293 x174) x395) (= (x434 (+ x386 x115)) x467) (= x293 (x209 x467)) (= x248 (* x216 8)) (= (x96 31 x46) x216) (= x174 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x152 115792089237316195423570985008687907853269984665640564039457584007913129639935 x248))))) (not x118)) (= x118 (> x46 x417))) x473) x275))
(assert (x318 x196))
(assert (x318 x164))
(assert (x318 x416))
(assert (= (x62 (x483 64 x349 3)) x349))
(assert (x318 x466))
(assert (x318 x375))
(assert (x318 x211))
(assert (=> (<= x24 10000) (= 0 (x180 x24))))
(assert (= 32 (x457 (x252 32 x330))))
(assert (= (or x350 (and (not x118) x247)) x302))
(assert (x318 x382))
(assert (x451 1099511627775))
(assert (x318 x286))
(assert (x318 x75))
(assert (x318 x248))
(assert (x377 x38))
(assert (= (and (not x194) x360) x369))
(assert (> (x483 64 x211 3) 10000))
(assert (x318 x124))
(assert (x16 x46))
(assert (< 10000 (x252 32 x330)))
(assert (x377 x27))
(assert (x318 x266))
(assert (x351 604800))
(assert (x318 x313))
(assert (= x160 (and x61 (not x161))))
(assert (= (x180 57896044618658097711785492504343953926634992332820282019728792003956564819739) 0))
(assert (x318 x289))
(assert (x451 x357))
(assert (x445 x334))
(assert (= (=> (and (= x213 (+ 1 x130)) (= x122 (not (< x213 x296)))) (and x143 x122)) x363))
(assert (= x39 (and x320 x111)))
(assert (x318 x233))
(assert (x318 x305))
(assert (=> (>= 10000 x454) (= (x180 x454) 0)))
(assert (x318 x329))
(assert (x318 x319))
(assert (x318 x23))
(assert (x318 x475))
(assert (x318 x390))
(assert (x318 x448))
(assert (x318 x487))
(assert (= x117 (and x408 x480)))
(assert (x451 x132))
(assert (x318 x18))
(assert (x318 x370))
(assert (x318 x454))
(assert (x318 x121))
(assert (x318 x389))
(assert (x488 x132))
(assert (x318 x458))
(assert (x318 x58))
(assert (x318 x342))
(assert (x318 x325))
(assert (x318 x472))
(assert (x451 x334))
(assert (x318 x380))
(assert (x318 x155))
(assert (x318 x174))
(assert (= (x62 (x252 32 x330)) x330))
(assert (= 3 (x20 (x483 64 x454 3))))
(assert (x318 x90))
(assert (= (x180 x162) (x180 (+ x162 1))))
(assert (= 0 (x180 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x318 x481))
(assert (x318 x455))
(assert (x318 x407))
(assert (x451 x46))
(assert (x351 18446744073709551615))
(assert (x318 x142))
(assert (x318 x28))
(assert (not (x351 (x483 64 x167 2))))
(assert (x318 x133))
(assert (x318 x94))
(assert (x318 x57))
(assert (x318 x41))
(assert (x318 x132))
(assert (x318 x206))
(assert (x318 x303))
(assert (x451 x287))
(assert (x318 x465))
(assert (x318 x492))
(assert (x318 x48))
(assert (= 2 (x20 (x483 64 x167 2))))
(assert (x318 x2))
(assert (x318 x93))
(assert (x318 x447))
(assert (x318 x73))
(assert (x318 x4))
(assert (x318 x52))
(assert (x318 x397))
(assert (x318 x468))
(assert (x318 x145))
(assert (x318 x26))
(assert (= (x62 (x483 64 x454 3)) x454))
(assert (x318 x175))
(assert (= (x180 x301) (x180 (+ x301 1))))
(assert (x318 x409))
(assert (= 0 (x180 1099511627774)))
(assert (x318 x193))
(assert (x318 x156))
(assert (= 0 (x180 3899865236)))
(assert (x318 x398))
(assert (x451 1))
(assert (x318 x269))
(assert (= 3 (x20 (x483 64 x211 3))))
(assert (= (or x255 x91) x259))
(assert (x318 x186))
(assert (x318 x456))
(assert (= (or x259 x302) x61))
(assert (x318 x403))
(assert (x318 x334))
(assert (x318 x46))
(assert (x318 x114))
(assert (x351 3024000))
(assert (x318 x6))
(assert (x318 x219))
(assert (= x100 (and (not x480) x408)))
(assert (= (x180 x330) (x180 (+ x330 1))))
(assert (x318 x178))
(assert (x318 x74))
(assert (x318 x167))
(assert (= (=> (and (or (and x111 (and (= (x209 x478) x492) (= x102 (x96 31 x272)) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x152 115792089237316195423570985008687907853269984665640564039457584007913129639935 x470)) x357) (= (x434 (+ x303 x218)) x478) (= x479 (x96 x492 x357)) (= (* 8 x102) x470))) (not x111)) (= (> x272 x329) x111)) x419) x490))
(assert (x318 x309))
(assert (not (x351 (x483 64 x166 2))))
(assert (x318 x471))
(assert (= (=> (and (= x323 (x209 x218)) (= (not (< 32 x329)) x215) (= x367 (+ x182 1))) (and (=> (and (= 32 x303) (= x420 x367)) x490) x215)) x486))
(assert (x318 x256))
(assert (= (or x283 x369) x247))
(assert (x318 x463))
(assert (= (x457 (x483 64 x211 3)) 64))
(assert (x318 x321))
(assert (x318 x184))
(assert (= x435 (=> (= x306 (not (> x285 1))) (and x306 (=> (and (= (x209 x114) x305) (= x264 (x434 (+ x114 x305))) (>= 2 x63) (= (x209 x55) x270) (= (x439 (- x156 191)) x189) (= x55 (x434 (+ 32 x178))) (or (>= 57896044618658097711785492504343953926634992332820282019728792003956564819739 x305) (>= x305 57896044618658097711785492504343953926634992332820282019728792003956564819968)) (>= 18446744073709551615 x366) (= x342 (x341 x301)) (= (x209 x184) x146) (= (x439 (- x282 x325)) x321) (= x178 (x434 (+ 32 x58))) (<= x325 18446744073709551615) (= x58 (x434 (+ 32 x264))) (= x233 (x21 x301)) (= x186 (x240 x485)) (= x239 (x434 (+ x124 32))) (= (x40 x301) x426) (= (x434 (+ x264 x146)) x124) (>= 1099511627775 x57) (= (x483 64 x166 2) x485) (= x325 (x209 x124)) (= (x439 (- x407 31)) x109) (= x59 (x434 (+ x121 x264))) (= x4 (x209 x264)) (= x121 (x209 x374)) (<= x233 1461501637330902918203684832716283019655932542975) (not (= x121 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (= (x434 (+ x184 32)) x374) (<= x342 255) (= (x439 (- x282 x264)) x407) (or (and (> x109 x146) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x109) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x146))) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x109) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x146))) (= (x439 (- x282 x114)) x156) (= (x434 (+ x55 32)) x184) (or (and (<= x189 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x305 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (> x189 x305) (= (<= x189 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x305 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) (= (x209 x59) x366) (<= x4 1461501637330902918203684832716283019655932542975) (not (= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x146)) (>= 1461501637330902918203684832716283019655932542975 x186) (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x109) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x121)) (< x121 x109)) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x121) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x109))) (= x409 (x439 (- x282 x366))) (= (x434 (+ x59 32)) x424) (= (x209 x178) x63) (= (x187 x485) x110) (= x87 (not (< 1 x285))) (not (or (and (<= x239 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x321)) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x239) (<= x321 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x321 x239)))) (not (= 57896044618658097711785492504343953926634992332820282019728792003956564819999 x407)) (not (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x424) (<= x409 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> x424 x409)) (and (<= x424 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x409)))) (<= x110 1099511627775) (= x57 (x368 x301)) (<= x426 1099511627775)) (and (=> (and (and (= false x347) (= x197 (= x447 0)) (= x447 (x104 x452)) (= (not x197) x268) (>= 127 x120) (= x159 false) (= x23 3054290345) (= x452 (x483 64 x349 3)) (= x245 false) (= false x337) (= false x280) (<= 1 x471) (= x471 (x76 x158)) (<= x120 127) (= x177 x349) (= (or x268 (not x411)) x265) (= false x262) (<= x447 2)) (and (= 4 x2) (= false x7) (= false x208) (= x43 false) (= x217 false) (>= x414 1) (= (x76 x158) x414) (<= x219 127) (= x391 2855319274) (= x250 false) (<= x219 127) (= x249 x258) (= x53 false) (= false x231) (= (< x249 x142) x411) (= x18 36) (= x177 x258) (= x56 false) (= x190 false) (= x273 false))) x265) x87))))))
(assert (= 0 (x180 4294967295)))
(assert (=> (>= 10000 x153) (= (x180 x153) 0)))
(assert (x318 x239))
(assert (= x204 (and x105 x72)))
(assert (x318 x183))
(assert (= 0 (x180 57896044618658097711785492504343953926634992332820282019728792003956564819967)))
(assert (= (and x127 x482) x365))
(assert (x318 x223))
(assert (= (and (not x482) x127) x13))
(assert (x451 x293))
(assert (x318 x415))
(assert (x318 x264))
(assert (= (x62 (x252 32 x348)) x348))
(assert (x318 x335))
(assert (x318 x391))
(assert (x451 x42))
(assert (= x91 (and x37 (not x373))))
(assert (x318 x88))
(assert (x277 x141 x45))
(assert (x318 x50))
(assert (= (x180 x182) (x180 (+ x182 1))))
(assert (x318 x1))
(assert (x318 x235))
(assert (x351 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (= x171 (and x84 x117)))
(assert (x318 x282))
(assert (x318 x82))
(assert (= (and x425 x381) x360))
(assert (= 0 (x180 1461501637330902918203684832716283019655932542975)))
(assert (x377 x237))
(assert (= (x180 (+ 1 x236)) (x180 x236)))
(assert (= (=> (and (= (> x455 31) x308) (= x286 (div x415 2)) (= x195 (x439 (- x282 x46))) (= (x434 (+ 32 x416)) x487) (= x52 (x439 (- x379 (mod (ite (< x455 32) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= x46 (x209 x335)) (= (x209 x487) x5) (or (and (> x359 x5) (= (<= x359 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x5 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x359) (> x5 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (not (or (and (< x195 x115) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x115) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x195))) (and (<= x115 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x195 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) (= (x434 (+ x5 x289)) x335) (<= x46 18446744073709551615) (= x415 (x163 x348)) (not (= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x5)) (= x455 (ite (< 0 x379) x286 (x96 127 x286))) (or (= x52 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 1 x52)) (= (+ 1 x330) x348) (= x379 (x96 1 x415)) (= x115 (x434 (+ 32 x335)))) (and (=> (and x308 (and (= (ite (> 32 x46) x157 x316) x327) (= x157 (x252 32 x348)) (= x393 (div (+ 31 x455) 32)) (= x125 (+ x157 x393)) (= (< x327 x125) x482) (= x316 (+ x157 x48)) (= x48 (div (+ x46 31) 32)))) (and (=> (not x482) x220) (=> x482 x437))) (=> (not x308) x83))) x106))
(assert (x351 1099511627774))
(assert (x318 x359))
(assert (x107 x46))
(assert (x318 x15))
(assert (= x67 (and (not x84) x117)))
(assert (x318 x401))
(assert (= (x152 115792089237316195423570985008687907853269984665640564039457584007913129639935 x392) (ite (< x392 256) (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x54 2 x392)) 0)))
(assert (= (x457 (x483 64 x167 2)) 64))
(assert (x318 x333))
(assert (x318 x225))
(assert (x318 x153))
(assert (= (=> (and (= (x434 (+ x38 x382)) x235) (= (ite (<= x382 1) x235 (x372 x382 x38)) x433) (= (* x46 8) x392) (= (x152 115792089237316195423570985008687907853269984665640564039457584007913129639935 x392) x472) (>= x472 1) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x472) x42) (= x38 (* x46 2)) (= (x96 x94 x42) x382)) x31) x101))
(assert (= (x180 x150) (x180 (+ 1 x150))))
(assert (x318 x115))
(assert (x451 x94))
(assert (= x437 (=> (and (= x70 (+ x327 1)) (= (not (> x125 x70)) x116)) (and x220 x116))))
(assert (x318 x374))
(assert (x318 x189))
(assert (= (=> (= (= (ite (> x272 31) 1 0) 1) x105) (and (=> (and (and (or (and (not x354) (and (= x356 (x209 x218)) (= x141 x356))) (and (= 0 x141) x354)) (= x354 (= x272 0))) (not x105)) x34) (=> (and (and (= x182 (x252 32 x330)) (= (> x329 0) x353) (= x329 (x96 115792089237316195423570985008687907853269984665640564039457584007913129639904 x272))) x105) (and (=> x353 x486) (=> (and (not x353) (and (= x303 0) (= x420 x182))) x490))))) x3))
(assert (x318 x191))
(assert (= (or x13 x365) x228))
(assert (= (x180 x291) (x180 (+ x291 1))))
(assert (= (=> (and (= (x209 x115) x370) (= x95 (not (< 32 x417))) (= (+ x291 1) x477)) (and (=> (and (= 32 x386) (= x378 x477)) x275) x95)) x8))
(assert (< 10000 (x252 32 x348)))
(assert (= (=> (= x425 (= (ite (< 31 x46) 1 0) 1)) (and (=> (and (and (or (and (= x94 0) x373) (and (not x373) (and (= x94 x199) (= (x209 x115) x199)))) (= x373 (= x46 0))) (not x425)) x101) (=> (and (and (= x194 (< 0 x417)) (= (x252 32 x348) x291) (= (x96 115792089237316195423570985008687907853269984665640564039457584007913129639904 x46) x417)) x425) (and (=> (and (not x194) (and (= x378 x291) (= 0 x386))) x275) (=> x194 x8))))) x83))
(assert (not (x351 (x252 32 x254))))
(assert (= x3 x143))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x483 64 x166 2)))
(assert (x318 x279))
(assert (x318 x433))
(assert (= x166 (x62 (x483 64 x166 2))))
(assert (= (or x160 x444) x221))
(assert (x318 x113))
(assert (x318 x417))
(assert (= x436 (or x86 x30)))
(assert (= (=> (and (= (+ x41 1) x453) (= x41 (* 2 x272))) x106) x419))
(assert (= x297 (or x173 x436)))
(assert (= 0 (x180 57896044618658097711785492504343953926634992332820282019728792003956564819968)))
(assert (x318 x27))
(assert (x318 x166))
(assert (x318 x199))
(assert (x318 x102))
(assert (x377 x382))
(assert (= 64 (x457 (x483 64 x454 3))))
(assert (x318 x412))
(assert (x318 x77))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x483 64 x167 2)))
(assert (= (x483 64 x454 3) (x180 (x483 64 x454 3))))
(assert (x451 x174))
(assert (not (x351 (x483 64 x349 3))))
(assert (= (and (not x354) x179) x86))
(assert (= (x180 x157) (x180 (+ x157 x48))))
(assert (x318 x470))
(assert (x318 x5))
(assert (x318 x109))
(assert (= (or x69 x228) x381))
(assert (x318 x66))
(assert (x318 x478))
(assert (> (x483 64 x454 3) 10000))
(assert (x318 x237))
(assert (= 0 (x180 1099511627775)))
(assert (= 0 (x180 3054290345)))
(assert (x451 127))
(assert (x318 x45))
(assert (x318 x467))
(assert (= 3 (x20 (x483 64 x349 3))))
(assert (x318 x272))
(assert (= 0 (x180 1099508603775)))
(assert (= x69 (and x297 (not x308))))
(assert (x318 x293))
(assert (not (x351 (x252 32 x348))))
(assert (= (x180 x157) (x180 (+ x393 x157))))
(assert (x318 x402))
(assert (x318 x421))
(assert (x318 x386))
(assert (x351 57896044618658097711785492504343953926634992332820282019728792003956564819968))
(assert (x351 3054290345))
(assert (x451 x141))
(assert (< (x252 32 x330) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x318 x392))
(assert (x318 x387))
(assert (= 0 (x180 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (x318 x446))
(assert (= (x62 (x252 32 x254)) x254))
(assert (x185 x27 x237))
(assert (= (x252 32 x254) (x180 (x252 32 x254))))
(assert (x451 x286))
(assert (x318 x195))
(assert (x318 x216))
(assert (x451 x272))
(assert (x351 57896044618658097711785492504343953926634992332820282019728792003956564819967))
(assert (x318 x140))
(assert (x318 x126))
(assert (= x29 (=> (and (and (<= 0 x176) (not (= x24 x158)) (= x458 36) (= x314 (> (x76 x24) 0)) x210 (>= 127 x390) (= (< 0 (x76 x466)) x210) (>= 1099511627774 x211) (<= x155 1461501637330902918203684832716283019655932542975) (<= x450 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x168 0) (= false x65) (<= x282 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= 1 x24) (<= 0 x201) (<= 68 x282) (= x158 x33) (= x387 (x76 x158)) (= x207 3899865236) (<= x396 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x202 false) (<= 0 x311) (>= x396 0) (>= x344 0) (<= 1 x153) (<= x126 1461501637330902918203684832716283019655932542975) (= false x384) (= false x294) (>= 4294967295 x212) (>= 1461501637330902918203684832716283019655932542975 x362) (= x148 false) (<= x176 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= x258 1099511627775) (<= x153 1461501637330902918203684832716283019655932542975) (= false x340) x371 (>= x387 1) (<= x400 1461501637330902918203684832716283019655932542975) (= (< 0 (x76 x153)) x32) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x201) (<= 0 x274) (>= x450 0) (not (= x466 x153)) (= (> (x76 x158) 0) x371) (= false x108) x32 (>= 1461501637330902918203684832716283019655932542975 x311) (not (= x466 x24)) (>= 1461501637330902918203684832716283019655932542975 x24) (= 0 x338) (= x443 x258) (= x135 false) (>= 1461501637330902918203684832716283019655932542975 x168) (<= 0 x362) (= x276 x258) (= (> x211 x276) x288) (<= 1 x466) (<= 0 x212) (= x484 false) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x344) (<= 0 x400) (<= 0 x258) (= 2855319274 x427) (<= x144 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= 1461501637330902918203684832716283019655932542975 x466) (not (= x153 x24)) (>= 127 x390) (not (= x158 x153)) (<= x158 1461501637330902918203684832716283019655932542975) x314 (= false x261) (not (= x158 x466)) (= x193 4) (<= 0 x144) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x274) (= x129 1) (<= 1 x158)) (and (and (and (and (= (x209 x289) x279) (= x167 (x209 x389)) (or (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x359) (> x380 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x380) (<= x359 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x380 x359))) (<= 1 x74) (= (x47 x88) x468) (= (x96 1099511627775 x334) x26) (= x150 (+ 1 x162)) (= (ite (> x140 0) x287 (x96 127 x287)) x66) (= x362 x88) (= x403 (+ x114 64)) (= x313 (x439 (- x282 x114))) (= x287 (div x132 2)) (<= x448 1099511627775) (= 3899865236 x241) (= x81 false) (or (<= 57896044618658097711785492504343953926634992332820282019728792003956564819968 x328) (<= x328 57896044618658097711785492504343953926634992332820282019728792003956564819739)) (= x309 (+ x211 1)) (= x68 (x483 64 x167 2)) (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x253) (<= x299 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> x253 x299)) (and (> x299 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x253 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x164 (x209 x114)) (= (x434 (+ 32 x402)) x416) (= (x209 x114) x328) (>= 2 x75) (= (x434 (+ x114 x164)) x289) (= (x439 (- x282 x272)) x225) (= x330 (+ 1 x150)) (= x119 (x230 x301)) (= x188 (mod (* 4 x269) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x319 (x209 x421)) (= (x209 x410) x272) (= (x324 x254) x269) (= x75 (x209 x73)) (= (x383 x301) x460) (= x389 (x434 (+ x403 x299))) (<= 1 x285) (not (or (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x218) (> x225 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (> x218 x225) (= (<= x218 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x225))))) (= (x209 x114) x412) (>= x93 1) (= x132 (x172 x330)) (<= x119 1461501637330902918203684832716283019655932542975) (= x223 x113) (>= 2 x167) (= (x209 x256) x205) (= (+ x456 32) x114) (= (x96 1 x132) x140) (>= 127 x449) (= (x240 x68) x99) (= x380 (x209 x416)) (= x423 (x434 (+ x403 x328))) (= (x434 (+ x114 x412)) x256) (>= 2 x93) (= x299 (x209 x114)) (= x142 (+ 1 x211)) (= (x76 x158) x74) (= x463 (+ x456 31)) (= x448 (x376 x301)) (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x412) (<= x253 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> x253 x412)) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x412) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x253))) (= (+ x333 x114) x133) (= x113 (x326 x158)) (or (>= 57896044618658097711785492504343953926634992332820282019728792003956564819739 x299) (<= 57896044618658097711785492504343953926634992332820282019728792003956564819968 x299)) (>= 18446744073709551615 x272) (= (x251 x301) x481) (= (x252 32 x254) x429) (>= 1099508603775 x191) (not (= x183 57896044618658097711785492504343953926634992332820282019728792003956564819999)) (<= x99 1461501637330902918203684832716283019655932542975) (= (+ x236 1) x254) (or (>= x164 57896044618658097711785492504343953926634992332820282019728792003956564819968) (<= x164 57896044618658097711785492504343953926634992332820282019728792003956564819739)) (= (x434 (+ x289 x380)) x410) (= (x434 (+ x73 32)) x402) (= x183 (x439 (- x282 x289))) (= x301 (x483 64 x211 3)) (not (> x133 x282)) (>= 18446744073709551615 x285) (= x253 (x439 (- x313 191))) (= false x385) (= x456 (+ x145 4)) (< x463 x282) (or (>= 57896044618658097711785492504343953926634992332820282019728792003956564819739 x412) (<= 57896044618658097711785492504343953926634992332820282019728792003956564819968 x412)) (= x359 (x439 (- x183 31))) (= x475 (x209 x402)) (or (= x175 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 1 x175)) (or (and (> x253 x328) (= (<= x253 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x328))) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x253) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x328))) (= x401 (+ 3024000 x191)) (= (x439 (- x140 (mod (ite (< x66 32) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x175) (<= x279 1461501637330902918203684832716283019655932542975) (= (x434 (+ 1 x269)) x36) (= x285 (x209 x456)) (= (x434 (+ 32 x410)) x218) (= (+ x188 x429) x162) (<= x460 255) (<= 1 x99) (= x421 (x434 (+ x289 32))) (= x480 (> x66 31)) (= (x96 1099511627775 x334) x191) (= (x434 (+ x421 32)) x73) (>= 1461501637330902918203684832716283019655932542975 x205) (= (+ 1 x301) x236) (not (= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x380)) (>= 127 x449) (>= 1099511627775 x481) (<= 1 x205) (= x333 (* x285 32)) (= (ite (not (= 0 x319)) 1 0) x438) (= x93 (x209 x423)) (or (and (> x253 x164) (= (<= x253 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x164 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (and (> x164 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x253)))) (= x144 x334)) (= x397 x362)) (and (= x343 (x483 64 x454 3)) (= x128 false) (= (or x491 (not x288)) x428) (= x443 x454) (<= x137 127) (>= 2 x50) (= x266 (x224 0)) (= false x345) (>= x469 1) (= (= x50 0) x149) (= x28 x266) x428 (= x145 x6) (= false x79) (>= 18446744073709551615 x145) (= x404 false) (= x145 (x224 4)) (= x469 (x76 x158)) (<= x137 127) (= false x441) (= x491 (not x149)) (= x89 false) (= (x383 x343) x50) (= x431 false) (= 3054290345 x82)))) (and (=> (and (and (= (+ x304 x15) x136) (= x84 (< x130 x296)) (= x206 (div (+ 31 x66) 32)) (= (x252 32 x330) x304) (= (div (+ 31 x272) 32) x15) (= (+ x304 x206) x296) (= (ite (> 32 x272) x304 x136) x130)) x480) (and (=> (not x84) x143) (=> x84 x363))) (=> (not x480) x3)))))
(assert (= (and x381 (not x425)) x37))
(assert (x318 x203))
(assert (= 0 (x180 18446744073709551615)))
(assert (= (and (not x353) x204) x358))
(assert (= (and x194 x360) x283))
(assert (= (and x37 x373) x255))
(assert (x351 57896044618658097711785492504343953926634992332820282019728792003956564819999))
(assert (= (x180 3024000) 0))
(assert (= (x180 2855319274) 0))
(assert (= true x408))
(assert (x318 x38))
(assert (= x220 x83))
(assert (= x31 (=> (and (and (= (> x489 0) x161) (= (x434 (+ x11 x403)) x90) (or (<= x11 57896044618658097711785492504343953926634992332820282019728792003956564819739) (<= 57896044618658097711785492504343953926634992332820282019728792003956564819968 x11)) (= (x209 x90) x489) (= x11 (x209 x114)) (>= 2 x489) (or (and (= (<= x253 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x11 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> x253 x11)) (and (<= x253 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x11)))) (or (and (and (= (x434 (+ x1 x403)) x446) (<= x430 2) (= x430 x166) (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1) (<= x253 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> x253 x1)) (and (> x1 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x253))) (= x430 (x209 x446)) (= x1 (x209 x114)) (or (<= x1 57896044618658097711785492504343953926634992332820282019728792003956564819739) (<= 57896044618658097711785492504343953926634992332820282019728792003956564819968 x1))) x161) (and (not x161) (= 0 x166)))) x435)))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x252 32 x348)))
(assert (x318 x357))
(assert (x451 x45))
(assert (= x444 (and x161 x61)))
(assert (x318 x270))
(assert (x351 2855319274))
(assert (x318 x285))
(assert (x318 x395))
(assert (not (x351 (x252 32 x330))))
(assert (x107 x272))
(assert (x351 3899865236))
(assert (= (and x354 x179) x30))
(assert (x318 x146))
(assert (= x34 (=> (and (>= x77 1) (= x27 (x96 x141 x45)) (= x462 (ite (>= 1 x27) x238 (x372 x27 x237))) (= x238 (x434 (+ x27 x237))) (= x77 (x152 115792089237316195423570985008687907853269984665640564039457584007913129639935 x352)) (= (* x272 8) x352) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x77) x45) (= (* 2 x272) x237)) x106)))
(assert (= (and x297 x308) x127))
(assert (x318 x426))
(assert (x488 x415))
(assert (x318 x119))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x252 32 x254)))
(assert (=> (<= x211 10000) (= (x180 x211) 0)))
(assert (x318 x241))
(assert (= (x457 (x483 64 x349 3)) 64))
(assert (x318 x287))
(assert (= (x180 (x483 64 x349 3)) (x483 64 x349 3)))
(assert (= (x180 (x483 64 x211 3)) (x483 64 x211 3)))
(assert (x318 x352))
(assert (x318 x36))
(assert (x318 x410))
(assert (= (x483 64 x166 2) (x180 (x483 64 x166 2))))
(assert (< (x483 64 x349 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x351 1099508603775))
(assert (x246 x286))
(assert (= (=> (and (= (+ x232 1) x203) (= x232 (* x46 2))) x31) x473))
(assert (x451 x492))
(assert (not (x351 (x483 64 x211 3))))
(assert (x318 x460))
(assert (x451 x415))
(assert (x246 x287))
(assert (= (x457 (x252 32 x348)) 32))
(assert (= (x62 (x483 64 x167 2)) x167))
(assert (= 0 (x180 57896044618658097711785492504343953926634992332820282019728792003956564819999)))
(assert (= (x180 (+ x206 x304)) (x180 x304)))
(assert (x318 x218))
(assert (x318 x356))
(assert (not (x351 (x483 64 x454 3))))
(assert (= (x62 (x483 64 x211 3)) x211))
(assert (x318 x414))
(assert (x318 x158))
(assert (x318 x449))
(assert (=> (<= x158 10000) (= 0 (x180 x158))))
(assert (=> (<= x466 10000) (= 0 (x180 x466))))
(assert (not x29))
(assert (x318 x137))
(assert (x318 x430))
(assert (=> (<= x167 10000) (= (x180 x167) 0)))
(assert (= (x20 (x483 64 x166 2)) 2))
(assert (x16 x272))
(assert (x318 x11))
(assert (= (x180 (+ 1 x327)) (x180 x327)))
(assert (x318 x205))
(assert (< 10000 (x252 32 x254)))
(assert (x318 x323))
(assert (x451 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (=> (<= x88 10000) (= 0 (x180 x88))))
(check-sat)
(exit)
