(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Certora
Generated on: 2024-04-10
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x242 () Int)
(declare-fun x63 () Int)
(declare-fun x304 () Int)
(declare-fun x129 () Int)
(declare-fun x204 () Int)
(declare-fun x83 () Int)
(declare-fun x44 () Int)
(declare-fun x266 () Int)
(declare-fun x337 () Int)
(declare-fun x202 () Bool)
(declare-fun x39 () Bool)
(declare-fun x125 () Int)
(declare-fun x112 () Int)
(declare-fun x308 () Int)
(declare-fun x156 (Int) Int)
(declare-fun x182 () Int)
(declare-fun x150 () Int)
(declare-fun x197 () Bool)
(declare-fun x24 () Int)
(declare-fun x309 () Int)
(declare-fun x179 () Int)
(declare-fun x270 () Int)
(declare-fun x340 () Int)
(declare-fun x380 () Int)
(declare-fun x26 () Int)
(declare-fun x184 () Bool)
(declare-fun x130 (Int) Int)
(declare-fun x261 () Bool)
(declare-fun x317 () Int)
(declare-fun x183 () Int)
(declare-fun x114 () Int)
(declare-fun x366 () Bool)
(declare-fun x205 () Int)
(declare-fun x332 () Int)
(declare-fun x235 () Int)
(declare-fun x219 () Int)
(declare-fun x257 () Int)
(declare-fun x222 () Int)
(declare-fun x111 () Bool)
(declare-fun x7 () Int)
(declare-fun x151 () Int)
(declare-fun x258 () Int)
(declare-fun x113 () Int)
(declare-fun x169 () Int)
(declare-fun x55 () Bool)
(declare-fun x370 () Int)
(declare-fun x115 () Int)
(declare-fun x348 () Int)
(declare-fun x277 () Int)
(declare-fun x275 (Int) Int)
(declare-fun x203 () Bool)
(declare-fun x1 () Bool)
(declare-fun x196 () Int)
(declare-fun x236 (Int) Int)
(declare-fun x315 () Int)
(declare-fun x20 () Int)
(declare-fun x15 (Int) Int)
(declare-fun x262 () Int)
(declare-fun x336 () Int)
(declare-fun x383 () Int)
(declare-fun x89 () Int)
(declare-fun x25 () Bool)
(declare-fun x34 () Int)
(declare-fun x94 () Int)
(declare-fun x296 () Bool)
(declare-fun x134 () Int)
(declare-fun x378 () Bool)
(declare-fun x102 () Int)
(declare-fun x286 () Int)
(declare-fun x231 (Int) Int)
(declare-fun x371 () Bool)
(declare-fun x376 () Bool)
(declare-fun x73 () Int)
(declare-fun x391 () Bool)
(declare-fun x2 () Bool)
(declare-fun x234 () Int)
(declare-fun x343 () Bool)
(declare-fun x161 (Int) Int)
(declare-fun x66 () Bool)
(declare-fun x310 () Int)
(declare-fun x229 () Int)
(declare-fun x155 () Int)
(declare-fun x149 () Int)
(declare-fun x325 (Int) Int)
(declare-fun x354 () Int)
(declare-fun x245 () Bool)
(declare-fun x32 () Bool)
(declare-fun x363 () Int)
(declare-fun x381 (Int) Int)
(declare-fun x346 () Int)
(declare-fun x154 () Int)
(declare-fun x212 () Bool)
(declare-fun x387 () Int)
(declare-fun x213 () Bool)
(declare-fun x307 () Int)
(declare-fun x175 () Int)
(declare-fun x351 () Int)
(declare-fun x100 () Int)
(declare-fun x282 (Int Int) Int)
(declare-fun x276 () Int)
(declare-fun x136 () Int)
(declare-fun x210 () Int)
(declare-fun x358 () Bool)
(declare-fun x209 () Int)
(declare-fun x359 () Int)
(declare-fun x372 () Bool)
(declare-fun x52 () Int)
(declare-fun x206 (Int) Int)
(declare-fun x110 () Int)
(declare-fun x322 () Bool)
(declare-fun x46 () Int)
(declare-fun x145 () Int)
(declare-fun x58 () Int)
(declare-fun x147 () Int)
(declare-fun x241 () Int)
(declare-fun x207 () Int)
(declare-fun x355 (Int Int) Int)
(declare-fun x313 () Int)
(declare-fun x269 () Int)
(declare-fun x40 () Bool)
(declare-fun x132 (Int) Int)
(declare-fun x193 () Int)
(declare-fun x101 (Int Int) Int)
(declare-fun x303 () Int)
(declare-fun x5 () Int)
(declare-fun x90 () Int)
(declare-fun x29 () Int)
(declare-fun x302 (Int) Int)
(declare-fun x211 () Int)
(declare-fun x316 (Int) Int)
(declare-fun x13 () Int)
(declare-fun x143 (Int) Int)
(declare-fun x230 () Bool)
(declare-fun x47 () Int)
(declare-fun x290 () Int)
(declare-fun x86 () Int)
(declare-fun x379 (Int Int) Int)
(declare-fun x17 (Int) Int)
(declare-fun x8 () Int)
(declare-fun x19 () Bool)
(declare-fun x104 () Int)
(declare-fun x224 () Int)
(declare-fun x139 () Bool)
(declare-fun x271 () Int)
(declare-fun x289 () Int)
(declare-fun x233 (Int) Int)
(declare-fun x386 () Bool)
(declare-fun x62 () Int)
(declare-fun x349 () Int)
(declare-fun x173 () Int)
(declare-fun x41 () Int)
(declare-fun x353 () Int)
(declare-fun x187 () Int)
(declare-fun x225 () Int)
(declare-fun x12 () Int)
(declare-fun x118 () Int)
(declare-fun x157 () Bool)
(declare-fun x21 () Bool)
(declare-fun x335 () Int)
(declare-fun x278 () Int)
(declare-fun x9 () Int)
(declare-fun x128 () Bool)
(declare-fun x68 () Int)
(declare-fun x28 () Int)
(declare-fun x217 () Bool)
(declare-fun x81 () Int)
(declare-fun x364 () Int)
(declare-fun x227 () Bool)
(declare-fun x384 () Bool)
(declare-fun x48 () Int)
(declare-fun x56 () Bool)
(declare-fun x65 () Int)
(declare-fun x357 () Int)
(declare-fun x74 () Int)
(declare-fun x247 () Int)
(declare-fun x42 () Bool)
(declare-fun x159 (Int) Int)
(declare-fun x162 () Int)
(declare-fun x281 () Bool)
(declare-fun x120 () Int)
(declare-fun x188 () Bool)
(declare-fun x216 () Int)
(declare-fun x284 () Bool)
(declare-fun x390 (Int Int) Int)
(declare-fun x119 () Int)
(declare-fun x144 (Int) Int)
(declare-fun x382 () Int)
(declare-fun x265 () Int)
(declare-fun x295 () Int)
(declare-fun x158 () Bool)
(declare-fun x176 () Int)
(declare-fun x221 () Int)
(declare-fun x163 () Bool)
(declare-fun x11 () Int)
(declare-fun x375 () Bool)
(declare-fun x200 () Bool)
(declare-fun x368 () Int)
(declare-fun x137 (Int) Int)
(declare-fun x126 () Int)
(declare-fun x195 () Int)
(declare-fun x72 () Int)
(declare-fun x109 () Bool)
(declare-fun x122 () Int)
(declare-fun x321 () Int)
(declare-fun x232 () Bool)
(declare-fun x243 () Bool)
(declare-fun x121 () Bool)
(declare-fun x61 () Int)
(declare-fun x33 (Int) Int)
(declare-fun x78 () Int)
(declare-fun x170 () Bool)
(declare-fun x260 () Int)
(declare-fun x297 () Int)
(declare-fun x305 () Bool)
(declare-fun x97 () Int)
(declare-fun x54 () Int)
(declare-fun x373 () Bool)
(declare-fun x333 () Int)
(declare-fun x350 () Bool)
(declare-fun x103 () Bool)
(declare-fun x77 (Int) Int)
(declare-fun x189 () Int)
(declare-fun x339 () Int)
(declare-fun x105 () Int)
(declare-fun x344 (Int) Int)
(declare-fun x319 () Int)
(declare-fun x107 () Int)
(declare-fun x10 () Bool)
(declare-fun x76 () Int)
(declare-fun x164 () Bool)
(declare-fun x331 () Int)
(declare-fun x389 () Bool)
(declare-fun x135 () Bool)
(declare-fun x312 () Int)
(declare-fun x152 (Int) Bool)
(declare-fun x267 () Int)
(declare-fun x22 () Int)
(declare-fun x330 () Int)
(declare-fun x201 () Int)
(declare-fun x392 () Bool)
(declare-fun x166 () Bool)
(declare-fun x314 () Bool)
(declare-fun x291 () Int)
(declare-fun x244 () Bool)
(declare-fun x194 () Int)
(declare-fun x67 () Bool)
(declare-fun x215 () Int)
(declare-fun x362 (Int) Int)
(declare-fun x192 () Int)
(declare-fun x214 () Bool)
(declare-fun x299 () Int)
(declare-fun x82 () Bool)
(declare-fun x329 () Int)
(declare-fun x220 () Bool)
(declare-fun x345 () Bool)
(declare-fun x283 () Int)
(declare-fun x174 (Int) Int)
(declare-fun x356 () Int)
(declare-fun x127 () Bool)
(declare-fun x88 () Int)
(declare-fun x95 () Int)
(declare-fun x263 (Int) Int)
(declare-fun x246 () Bool)
(declare-fun x251 () Int)
(declare-fun x14 () Int)
(declare-fun x57 () Int)
(declare-fun x280 () Int)
(declare-fun x36 () Int)
(declare-fun x218 () Bool)
(declare-fun x4 () Int)
(declare-fun x259 () Bool)
(declare-fun x285 () Int)
(declare-fun x377 () Int)
(declare-fun x318 () Bool)
(declare-fun x298 () Int)
(declare-fun x326 () Bool)
(declare-fun x60 () Int)
(declare-fun x3 () Int)
(declare-fun x253 () Bool)
(declare-fun x374 () Int)
(declare-fun x93 () Int)
(declare-fun x31 () Int)
(declare-fun x293 () Bool)
(declare-fun x124 () Int)
(declare-fun x85 () Int)
(declare-fun x146 () Int)
(declare-fun x323 () Bool)
(declare-fun x165 () Int)
(declare-fun x75 () Int)
(declare-fun x369 () Int)
(declare-fun x148 () Int)
(declare-fun x185 () Int)
(declare-fun x16 (Int) Int)
(declare-fun x80 () Int)
(declare-fun x30 () Int)
(declare-fun x274 () Int)
(declare-fun x98 () Bool)
(declare-fun x240 () Bool)
(declare-fun x186 () Bool)
(declare-fun x178 () Int)
(declare-fun x84 () Bool)
(declare-fun x6 (Int Int Int) Int)
(declare-fun x50 () Bool)
(declare-fun x190 () Int)
(declare-fun x300 () Int)
(declare-fun x306 (Int) Int)
(declare-fun x153 () Bool)
(declare-fun x223 () Int)
(declare-fun x181 () Int)
(declare-fun x35 (Int Int) Int)
(declare-fun x361 () Int)
(declare-fun x91 () Bool)
(declare-fun x252 (Int) Int)
(declare-fun x238 () Int)
(declare-fun x140 () Int)
(declare-fun x273 () Bool)
(declare-fun x96 () Bool)
(declare-fun x138 () Int)
(declare-fun x23 () Bool)
(declare-fun x168 () Int)
(declare-fun x341 () Int)
(declare-fun x59 () Int)
(declare-fun x226 () Bool)
(declare-fun x239 () Int)
(declare-fun x37 () Int)
(declare-fun x264 (Int) Int)
(declare-fun x70 () Int)
(declare-fun x250 () Int)
(declare-fun x116 () Int)
(declare-fun x64 () Bool)
(declare-fun x292 () Int)
(declare-fun x254 () Bool)
(declare-fun x365 () Int)
(define-fun x141 ((x53 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x53) (>= x53 0)) x53 (- x53 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x92 ((x53 Int)) Int (ite (and (< x53 0) (>= x53 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x53 115792089237316195423570985008687907853269984665640564039457584007913129639936) x53))
(define-fun x327 ((x248 Int)) Bool (and (>= x248 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x248)))
(define-fun x334 ((x248 Int)) Bool (and (= (x379 x248 115792089237316195423570985008687907853269984665640564039457584007913129639935) x248) (= (x379 115792089237316195423570985008687907853269984665640564039457584007913129639935 x248) x248)))
(define-fun x268 ((x248 Int)) Bool (and (= 0 (x379 x248 0)) (= (x379 0 x248) 0)))
(define-fun x108 ((x248 Int)) Bool (= (x379 x248 x248) x248))
(define-fun x311 ((x248 Int)) Bool (and (x108 x248) (x334 x248) (x268 x248)))
(define-fun x177 ((x248 Int) (x328 Int)) Bool (= (x379 x248 x328) (x379 x328 x248)))
(define-fun x256 ((x248 Int) (x328 Int)) Bool (and (=> (>= x248 0) (>= x248 (x379 x248 x328))) (<= 0 (x379 x248 x328)) (=> (>= x328 0) (<= (x379 x248 x328) x328))))
(define-fun x117 ((x248 Int) (x328 Int)) Bool (and (x256 x248 x328) (x177 x248 x328)))
(define-fun x69 ((x248 Int)) Bool (= (mod x248 1099511627776) (x379 x248 1099511627775)))
(define-fun x320 ((x248 Int)) Bool (and (x69 x248) (x117 x248 1099511627775)))
(define-fun x208 ((x248 Int)) Bool (= (x379 x248 1) (mod x248 2)))
(define-fun x342 ((x248 Int)) Bool (and (x208 x248) (x117 x248 1)))
(define-fun x51 ((x248 Int)) Bool (= (mod x248 128) (x379 x248 127)))
(define-fun x352 ((x248 Int)) Bool (and (x51 x248) (x117 x248 127)))
(define-fun x228 ((x248 Int)) Bool (and (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x390 x248 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (x390 115792089237316195423570985008687907853269984665640564039457584007913129639935 x248) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(define-fun x388 ((x248 Int)) Bool (and (= x248 (x390 x248 0)) (= x248 (x390 0 x248))))
(define-fun x367 ((x248 Int)) Bool (= x248 (x390 x248 x248)))
(define-fun x171 ((x248 Int)) Bool (and (x228 x248) (x367 x248) (x388 x248)))
(define-fun x338 ((x248 Int) (x328 Int)) Bool (= (x390 x328 x248) (x390 x248 x328)))
(define-fun x160 ((x248 Int) (x328 Int)) Bool (and (<= (x390 x248 x328) (+ x328 x248)) (=> (>= x328 0) (<= x328 (x390 x248 x328))) (=> (>= x248 0) (>= (x390 x248 x328) x248))))
(define-fun x79 ((x248 Int) (x328 Int)) Bool (and (x338 x248 x328) (x160 x248 x328)))
(define-fun x142 ((x198 Int)) Int 0)
(define-fun x38 ((x198 Int)) Int 0)
(define-fun x288 ((x198 Int)) Int (ite (< x198 x116) (x174 x198) 0))
(define-fun x191 ((x198 Int)) Int (ite (and (> x116 x198) (<= 0 x198)) (x264 x198) (x288 x198)))
(define-fun x237 ((x198 Int)) Int (ite (= x198 x65) x374 (x325 x198)))
(define-fun x272 ((x198 Int)) Int (ite (= x216 x198) x148 (x77 x198)))
(define-fun x133 ((x198 Int)) Int (ite (= x216 x198) x229 (x272 x198)))
(define-fun x301 ((x198 Int)) Int (ite (= x198 x216) x89 (x362 x198)))
(define-fun x180 ((x198 Int)) Int (ite (= x216 x198) 1 (x236 x198)))
(define-fun x199 ((x198 Int)) Int (ite (= x198 x216) x348 (x33 x198)))
(define-fun x49 ((x198 Int)) Int (ite (= x198 x216) x313 (x275 x198)))
(define-fun x27 ((x198 Int)) Int (ite (= x198 x216) x224 (x199 x198)))
(define-fun x43 ((x198 Int)) Int (ite (= x30 x198) x289 (x159 x198)))
(define-fun x167 ((x198 Int)) Int (ite (= x198 x30) 604800 (x263 x198)))
(define-fun x255 ((x198 Int)) Int (ite (= x364 x198) x4 (x132 x198)))
(define-fun x279 ((x198 Int)) Int (ite (= x198 x104) x285 (x161 x198)))
(define-fun x393 ((x198 Int)) Int (ite (= x104 x198) x309 (x306 x198)))
(define-fun x287 ((x198 Int)) Int (ite (= x104 x198) x179 (x302 x198)))
(define-fun x87 ((x198 Int)) Int (ite (= x120 x198) x303 (x233 x198)))
(define-fun x71 ((x198 Int)) Int (ite (= x198 x216) x234 (x133 x198)))
(define-fun x249 ((x198 Int)) Int (ite (= x216 x198) x329 (x301 x198)))
(define-fun x172 ((x198 Int)) Int (ite (= x198 x216) x149 (x180 x198)))
(define-fun x324 ((x198 Int)) Int (ite (= x216 x198) x335 (x27 x198)))
(define-fun x347 ((x198 Int)) Int (ite (= x198 x216) x270 (x49 x198)))
(define-fun x360 ((x198 Int)) Int (ite (= x30 x198) x189 (x316 x198)))
(define-fun x99 ((x198 Int)) Int 0)
(define-fun x123 ((x198 Int)) Int 0)
(define-fun x106 ((x198 Int)) Int (ite (= x173 x198) 0 (x15 x198)))
(define-fun x385 ((x198 Int)) Int (ite x227 (x15 x198) (x106 x198)))
(define-fun x294 ((x198 Int)) Int (ite x164 (x15 x198) (ite x227 (x15 x198) (x106 x198))))
(define-fun x18 ((x198 Int)) Int (ite (= x8 x198) x280 (x231 x198)))
(define-fun x131 ((x198 Int)) Int (ite x19 (x130 x198) (x16 x198)))
(define-fun x45 ((x198 Int)) Int (ite (= x198 x147) x102 (x137 x198)))
(assert (= (x35 115792089237316195423570985008687907853269984665640564039457584007913129639935 x78) (ite (> 256 x78) (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x355 2 x78)) 0)))
(assert (x327 x136))
(assert (x327 x60))
(assert (x327 x289))
(assert (x327 x58))
(assert (x327 x93))
(assert (x311 1099511627775))
(assert (x311 1))
(assert (= 0 (x381 604800)))
(assert (x311 x3))
(assert (not (x152 (x6 64 x61 2))))
(assert (= (x381 1461501637330902918203684832716283019655932542975) 0))
(assert (x327 x169))
(assert (x327 x107))
(assert (= (x381 1099511627775) 0))
(assert (x327 x112))
(assert (x171 x136))
(assert (x327 x54))
(assert (x327 x333))
(assert (= (x381 (x101 32 x8)) (x101 32 x8)))
(assert (x327 x178))
(assert (> (x6 64 x48 3) 10000))
(assert (x327 x24))
(assert (x327 x65))
(assert (x320 x178))
(assert (x327 x369))
(assert (x311 x26))
(assert (x171 x85))
(assert (x327 x134))
(assert (not (x152 (x6 64 x329 2))))
(assert (=> (<= x61 10000) (= 0 (x381 x61))))
(assert (x327 x151))
(assert (x327 x300))
(assert (= (x17 (x6 64 x61 2)) 64))
(assert (x327 x290))
(assert (x327 x329))
(assert (= x329 (x344 (x6 64 x329 2))))
(assert (= x121 (=> (and (or (and (not x350) (and (= (x191 x215) x57) (= x57 x267))) (and (= 0 x267) x350)) (and (= x350 (= x150 0)) (= x253 (= 1 (ite (> x150 31) 1 0))) (not x253))) x240)))
(assert (x327 x321))
(assert (x327 x125))
(assert (x327 x148))
(assert (x327 x317))
(assert (= x36 (x344 (x6 64 x36 3))))
(assert (x327 x193))
(assert (not (x152 (x101 32 x364))))
(assert (x327 x377))
(assert (x327 x387))
(assert (x327 x100))
(assert (= (x6 64 x48 3) (x381 (x6 64 x48 3))))
(assert (x327 x341))
(assert (= x8 (x344 (x101 32 x8))))
(assert (= (x344 (x6 64 x61 2)) x61))
(assert (= x318 (or x371 x314)))
(assert (x327 x348))
(assert (x327 x105))
(assert (= 0 (x381 2855319274)))
(assert (= 64 (x17 (x6 64 x48 3))))
(assert (= (x381 x173) (x381 (+ x173 1))))
(assert (= (ite (> 256 x300) (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x355 2 x300)) 0) (x35 115792089237316195423570985008687907853269984665640564039457584007913129639935 x300)))
(assert (x327 x313))
(assert (x327 x239))
(assert (= x364 (x344 (x101 32 x364))))
(assert (and (= 53919893334301279589334030174039261347274288845081144962207220498432 (x355 2 225)) (= (x355 2 251) 3618502788666131106986593281521497120414687020801267626233049500247285301248) (= 22835963083295358096932575511191922182123945984 (x355 2 154)) (= 1024 (x355 2 10)) (= 4503599627370496 (x355 2 52)) (= 2097152 (x355 2 21)) (= 2361183241434822606848 (x355 2 71)) (= 2475880078570760549798248448 (x355 2 91)) (= 1606938044258990275541962092341162602522202993782792835301376 (x355 2 200)) (= 5986310706507378352962293074805895248510699696029696 (x355 2 172)) (= 748288838313422294120286634350736906063837462003712 (x355 2 169)) (= 1427247692705959881058285969449495136382746624 (x355 2 150)) (= 21267647932558653966460912964485513216 (x355 2 124)) (= 713623846352979940529142984724747568191373312 (x355 2 149)) (= 131072 (x355 2 17)) (= 205688069665150755269371147819668813122841983204197482918576128 (x355 2 207)) (= (x355 2 110) 1298074214633706907132624082305024) (= 1461501637330902918203684832716283019655932542976 (x355 2 160)) (= (x355 2 201) 3213876088517980551083924184682325205044405987565585670602752) (= 26959946667150639794667015087019630673637144422540572481103610249216 (x355 2 224)) (= 25108406941546723055343157692830665664409421777856138051584 (x355 2 194)) (= (x355 2 75) 37778931862957161709568) (= (x355 2 206) 102844034832575377634685573909834406561420991602098741459288064) (= (x355 2 180) 1532495540865888858358347027150309183618739122183602176) (= 144115188075855872 (x355 2 57)) (= 33554432 (x355 2 25)) (= 18889465931478580854784 (x355 2 74)) (= 20769187434139310514121985316880384 (x355 2 114)) (= 39614081257132168796771975168 (x355 2 95)) (= (x355 2 48) 281474976710656) (= (x355 2 2) 4) (= (x355 2 105) 40564819207303340847894502572032) (= (x355 2 244) 28269553036454149273332760011886696253239742350009903329945699220681916416) (= (x355 2 106) 81129638414606681695789005144064) (= 696898287454081973172991196020261297061888 (x355 2 139)) (= 10633823966279326983230456482242756608 (x355 2 123)) (= 13479973333575319897333507543509815336818572211270286240551805124608 (x355 2 223)) (= 107839786668602559178668060348078522694548577690162289924414440996864 (x355 2 226)) (= (x355 2 9) 512) (= (x355 2 68) 295147905179352825856) (= 147573952589676412928 (x355 2 67)) (= (x355 2 33) 8589934592) (= 536870912 (x355 2 29)) (= (x355 2 148) 356811923176489970264571492362373784095686656) (= 73786976294838206464 (x355 2 66)) (= 47890485652059026823698344598447161988085597568237568 (x355 2 175)) (= 11150372599265311570767859136324180752990208 (x355 2 143)) (= (x355 2 115) 41538374868278621028243970633760768) (= 3064991081731777716716694054300618367237478244367204352 (x355 2 181)) (= (x355 2 127) 170141183460469231731687303715884105728) (= (x355 2 159) 730750818665451459101842416358141509827966271488) (= (x355 2 80) 1208925819614629174706176) (= 680564733841876926926749214863536422912 (x355 2 129)) (= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x355 2 256)) (= (x355 2 46) 70368744177664) (= (x355 2 0) 1) (= 75557863725914323419136 (x355 2 76)) (= (x355 2 247) 226156424291633194186662080095093570025917938800079226639565593765455331328) (= (x355 2 153) 11417981541647679048466287755595961091061972992) (= (x355 2 158) 365375409332725729550921208179070754913983135744) (= 1267650600228229401496703205376 (x355 2 100)) (= (x355 2 108) 324518553658426726783156020576256) (= (x355 2 231) 3450873173395281893717377931138512726225554486085193277581262111899648) (= (x355 2 109) 649037107316853453566312041152512) (= (x355 2 176) 95780971304118053647396689196894323976171195136475136) (= 182687704666362864775460604089535377456991567872 (x355 2 157)) (= (x355 2 58) 288230376151711744) (= (x355 2 11) 2048) (= 6277101735386680763835789423207666416102355444464034512896 (x355 2 192)) (= (x355 2 87) 154742504910672534362390528) (= (x355 2 6) 64) (= (x355 2 234) 27606985387162255149739023449108101809804435888681546220650096895197184) (= (x355 2 174) 23945242826029513411849172299223580994042798784118784) (= (x355 2 242) 7067388259113537318333190002971674063309935587502475832486424805170479104) (= (x355 2 155) 45671926166590716193865151022383844364247891968) (= (x355 2 54) 18014398509481984) (= 10384593717069655257060992658440192 (x355 2 113)) (= (x355 2 216) 105312291668557186697918027683670432318895095400549111254310977536) (= (x355 2 49) 562949953421312) (= (x355 2 93) 9903520314283042199192993792) (= 128 (x355 2 7)) (= (x355 2 64) 18446744073709551616) (= 1099511627776 (x355 2 40)) (= 12855504354071922204335696738729300820177623950262342682411008 (x355 2 203)) (= 2535301200456458802993406410752 (x355 2 101)) (= (x355 2 135) 43556142965880123323311949751266331066368) (= (x355 2 151) 2854495385411919762116571938898990272765493248) (= (x355 2 220) 1684996666696914987166688442938726917102321526408785780068975640576) (= (x355 2 196) 100433627766186892221372630771322662657637687111424552206336) (= (x355 2 165) 46768052394588893382517914646921056628989841375232) (= (x355 2 218) 421249166674228746791672110734681729275580381602196445017243910144) (= (x355 2 53) 9007199254740992) (= (x355 2 37) 137438953472) (= (x355 2 237) 220855883097298041197912187592864814478435487109452369765200775161577472) (= (x355 2 189) 784637716923335095479473677900958302012794430558004314112) (= 2993155353253689176481146537402947624255349848014848 (x355 2 171)) (= 8192 (x355 2 13)) (= (x355 2 81) 2417851639229258349412352) (= (x355 2 217) 210624583337114373395836055367340864637790190801098222508621955072) (= (x355 2 211) 3291009114642412084309938365114701009965471731267159726697218048) (= 1329227995784915872903807060280344576 (x355 2 120)) (= 91343852333181432387730302044767688728495783936 (x355 2 156)) (= 766247770432944429179173513575154591809369561091801088 (x355 2 179)) (= 883423532389192164791648750371459257913741948437809479060803100646309888 (x355 2 239)) (= 32 (x355 2 5)) (= 2787593149816327892691964784081045188247552 (x355 2 141)) (= 256 (x355 2 8)) (= 5192296858534827628530496329220096 (x355 2 112)) (= 151115727451828646838272 (x355 2 77)) (= 6427752177035961102167848369364650410088811975131171341205504 (x355 2 202)) (= (x355 2 208) 411376139330301510538742295639337626245683966408394965837152256) (= 309485009821345068724781056 (x355 2 88)) (= 174224571863520493293247799005065324265472 (x355 2 137)) (= (x355 2 32) 4294967296) (= 262144 (x355 2 18)) (= (x355 2 45) 35184372088832) (= (x355 2 238) 441711766194596082395824375185729628956870974218904739530401550323154944) (= (x355 2 190) 1569275433846670190958947355801916604025588861116008628224) (= (x355 2 132) 5444517870735015415413993718908291383296) (= 383123885216472214589586756787577295904684780545900544 (x355 2 178)) (= (x355 2 39) 549755813888) (= 191561942608236107294793378393788647952342390272950272 (x355 2 177)) (= (x355 2 12) 4096) (= (x355 2 4) 16) (= 1048576 (x355 2 20)) (= 9671406556917033397649408 (x355 2 83)) (= 8796093022208 (x355 2 43)) (= (x355 2 15) 32768) (= (x355 2 198) 401734511064747568885490523085290650630550748445698208825344) (= 56539106072908298546665520023773392506479484700019806659891398441363832832 (x355 2 245)) (= 10141204801825835211973625643008 (x355 2 103)) (= (x355 2 130) 1361129467683753853853498429727072845824) (= 72057594037927936 (x355 2 56)) (= (x355 2 122) 5316911983139663491615228241121378304) (= 5846006549323611672814739330865132078623730171904 (x355 2 162)) (= (x355 2 147) 178405961588244985132285746181186892047843328) (= (x355 2 235) 55213970774324510299478046898216203619608871777363092441300193790394368) (= (x355 2 249) 904625697166532776746648320380374280103671755200316906558262375061821325312) (= (x355 2 50) 1125899906842624) (= (x355 2 212) 6582018229284824168619876730229402019930943462534319453394436096) (= (x355 2 140) 1393796574908163946345982392040522594123776) (= (x355 2 250) 1809251394333065553493296640760748560207343510400633813116524750123642650624) (= (x355 2 79) 604462909807314587353088) (= 2199023255552 (x355 2 41)) (= (x355 2 42) 4398046511104) (= (x355 2 28) 268435456) (= 44601490397061246283071436545296723011960832 (x355 2 145)) (= 302231454903657293676544 (x355 2 78)) (= (x355 2 31) 2147483648) (= (x355 2 170) 1496577676626844588240573268701473812127674924007424) (= (x355 2 240) 1766847064778384329583297500742918515827483896875618958121606201292619776) (= 664613997892457936451903530140172288 (x355 2 119)) (= (x355 2 152) 5708990770823839524233143877797980545530986496) (= (x355 2 61) 2305843009213693952) (= 24519928653854221733733552434404946937899825954937634816 (x355 2 184)) (= 79228162514264337593543950336 (x355 2 96)) (= 23384026197294446691258957323460528314494920687616 (x355 2 164)) (= 34359738368 (x355 2 35)) (= (x355 2 221) 3369993333393829974333376885877453834204643052817571560137951281152) (= 215679573337205118357336120696157045389097155380324579848828881993728 (x355 2 227)) (= (x355 2 232) 6901746346790563787434755862277025452451108972170386555162524223799296) (= (x355 2 243) 14134776518227074636666380005943348126619871175004951664972849610340958208) (= (x355 2 125) 42535295865117307932921825928971026432) (= 332306998946228968225951765070086144 (x355 2 118)) (= 4611686018427387904 (x355 2 62)) (= 140737488355328 (x355 2 47)) (= 2596148429267413814265248164610048 (x355 2 111)) (= (x355 2 233) 13803492693581127574869511724554050904902217944340773110325048447598592) (= (x355 2 26) 67108864) (= (x355 2 209) 822752278660603021077484591278675252491367932816789931674304512) (= 1237940039285380274899124224 (x355 2 90)) (= 2722258935367507707706996859454145691648 (x355 2 131)) (= (x355 2 126) 85070591730234615865843651857942052864) (= (x355 2 14) 16384) (= 19342813113834066795298816 (x355 2 84)) (= (x355 2 228) 431359146674410236714672241392314090778194310760649159697657763987456) (= (x355 2 60) 1152921504606846976) (= 38685626227668133590597632 (x355 2 85)) (= 83076749736557242056487941267521536 (x355 2 116)) (= 4835703278458516698824704 (x355 2 82)) (= (x355 2 163) 11692013098647223345629478661730264157247460343808) (= 1073741824 (x355 2 30)) (= (x355 2 133) 10889035741470030830827987437816582766592) (= (x355 2 214) 26328072917139296674479506920917608079723773850137277813577744384) (= (x355 2 99) 633825300114114700748351602688) (= (x355 2 248) 452312848583266388373324160190187140051835877600158453279131187530910662656) (= 1725436586697640946858688965569256363112777243042596638790631055949824 (x355 2 230)) (= (x355 2 16) 65536) (= 618970019642690137449562112 (x355 2 89)) (= 8 (x355 2 3)) (= (x355 2 236) 110427941548649020598956093796432407239217743554726184882600387580788736) (= (x355 2 252) 7237005577332262213973186563042994240829374041602535252466099000494570602496) (= (x355 2 253) 14474011154664524427946373126085988481658748083205070504932198000989141204992) (= (x355 2 72) 4722366482869645213696) (= (x355 2 70) 1180591620717411303424) (= (x355 2 44) 17592186044416) (= (x355 2 193) 12554203470773361527671578846415332832204710888928069025792) (= (x355 2 19) 524288) (= (x355 2 183) 12259964326927110866866776217202473468949912977468817408) (= (x355 2 117) 166153499473114484112975882535043072) (= (x355 2 182) 6129982163463555433433388108601236734474956488734408704) (= 348449143727040986586495598010130648530944 (x355 2 138)) (= 28948022309329048855892746252171976963317496166410141009864396001978282409984 (x355 2 254)) (= (x355 2 136) 87112285931760246646623899502532662132736) (= (x355 2 166) 93536104789177786765035829293842113257979682750464) (= 36028797018963968 (x355 2 55)) (= (x355 2 187) 196159429230833773869868419475239575503198607639501078528) (= (x355 2 27) 134217728) (= 274877906944 (x355 2 38)) (= 21778071482940061661655974875633165533184 (x355 2 134)) (= (x355 2 144) 22300745198530623141535718272648361505980416) (= (x355 2 97) 158456325028528675187087900672) (= (x355 2 86) 77371252455336267181195264) (= (x355 2 22) 4194304) (= 340282366920938463463374607431768211456 (x355 2 128)) (= (x355 2 255) 57896044618658097711785492504343953926634992332820282019728792003956564819968) (= (x355 2 241) 3533694129556768659166595001485837031654967793751237916243212402585239552) (= 2 (x355 2 1)) (= 19807040628566084398385987584 (x355 2 94)) (= (x355 2 186) 98079714615416886934934209737619787751599303819750539264) (= 2923003274661805836407369665432566039311865085952 (x355 2 161)) (= (x355 2 51) 2251799813685248) (= (x355 2 63) 9223372036854775808) (= 374144419156711147060143317175368453031918731001856 (x355 2 168)) (= 862718293348820473429344482784628181556388621521298319395315527974912 (x355 2 229)) (= (x355 2 197) 200867255532373784442745261542645325315275374222849104412672) (= (x355 2 102) 5070602400912917605986812821504) (= 36893488147419103232 (x355 2 65)) (= (x355 2 146) 89202980794122492566142873090593446023921664) (= (x355 2 173) 11972621413014756705924586149611790497021399392059392) (= (x355 2 215) 52656145834278593348959013841835216159447547700274555627155488768) (= 187072209578355573530071658587684226515959365500928 (x355 2 167)) (= 50216813883093446110686315385661331328818843555712276103168 (x355 2 195)) (= (x355 2 246) 113078212145816597093331040047546785012958969400039613319782796882727665664) (= 13164036458569648337239753460458804039861886925068638906788872192 (x355 2 213)) (= 576460752303423488 (x355 2 59)) (= (x355 2 185) 49039857307708443467467104868809893875799651909875269632) (= 3138550867693340381917894711603833208051177722232017256448 (x355 2 191)) (= 803469022129495137770981046170581301261101496891396417650688 (x355 2 199)) (= (x355 2 107) 162259276829213363391578010288128) (= 316912650057057350374175801344 (x355 2 98)) (= 17179869184 (x355 2 34)) (= 590295810358705651712 (x355 2 69)) (= 842498333348457493583344221469363458551160763204392890034487820288 (x355 2 219)) (= (x355 2 121) 2658455991569831745807614120560689152) (= (x355 2 24) 16777216) (= (x355 2 92) 4951760157141521099596496896) (= 1645504557321206042154969182557350504982735865633579863348609024 (x355 2 210)) (= 392318858461667547739736838950479151006397215279002157056 (x355 2 188)) (= 9444732965739290427392 (x355 2 73)) (= 6739986666787659948666753771754907668409286105635143120275902562304 (x355 2 222)) (= 25711008708143844408671393477458601640355247900524685364822016 (x355 2 204)) (= (x355 2 23) 8388608) (= (x355 2 36) 68719476736) (= 51422017416287688817342786954917203280710495801049370729644032 (x355 2 205)) (= 5575186299632655785383929568162090376495104 (x355 2 142)) (= (x355 2 104) 20282409603651670423947251286016)))
(assert (= x227 (and (not x392) x98)))
(assert (x327 x13))
(assert (= (x101 32 x364) (x381 (x101 32 x364))))
(assert (x327 x97))
(assert (x327 x145))
(assert (x342 x3))
(assert (x327 x7))
(assert (x327 x304))
(assert (= (x381 x8) (x381 (+ x8 1))))
(assert (x327 x85))
(assert (x327 x37))
(assert (= (x381 (x6 64 x61 2)) (x6 64 x61 2)))
(assert (= (x381 (+ x104 1)) (x381 x104)))
(assert (x327 x204))
(assert (x327 x118))
(assert (x327 x234))
(assert (x327 x330))
(assert (x327 x276))
(assert (x327 x374))
(assert (x311 x267))
(assert (= x220 (=> (and (and (<= x41 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x298) (<= 0 x346) (= false x245) (<= x116 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= x356 0) (<= 1 x370) (<= 0 x286) (= x261 (< 0 (x206 x292))) (= x162 x73) (>= 4294967295 x165) (<= 1 x100) (<= x286 1461501637330902918203684832716283019655932542975) (<= 1 x321) (not (= x359 x292)) (= x83 2855319274) (= x326 false) (= 36 x222) (>= 1461501637330902918203684832716283019655932542975 x292) (>= 1461501637330902918203684832716283019655932542975 x356) (not (= x292 x100)) (<= x359 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x207) (>= 1099511627774 x36) (<= 1 x292) (= x2 (> (x206 x359) 0)) (>= x76 0) (= false x25) (= x226 (< 0 (x206 x100))) (not (= x321 x100)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x76) x170 (>= x41 0) (= x376 false) (= x370 (x206 x321)) (<= 0 x90) x261 (<= x93 127) (<= 0 x80) (>= 1461501637330902918203684832716283019655932542975 x90) (= x39 false) (= false x384) (<= 0 x114) (= x74 4) x226 (= x88 x162) (<= 0 x223) (>= 127 x93) (= 1 x122) (= (> (x206 x321) 0) x170) (= (> x36 x73) x202) (= 3899865236 x211) (>= 1461501637330902918203684832716283019655932542975 x369) (not (= x321 x359)) x2 (= x378 false) (<= 68 x116) (not (= x321 x292)) (= x274 x321) (>= 1099511627775 x162) (>= x165 0) (= 0 x219) (<= x114 1461501637330902918203684832716283019655932542975) (= false x50) (not (= x100 x359)) (>= 1461501637330902918203684832716283019655932542975 x321) (>= 1461501637330902918203684832716283019655932542975 x100) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x28) (>= x28 0) (<= 0 x162) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x80) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x298) (= x67 false) (= x10 false) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x346) (>= x359 1) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x223)) (and (and (= x308 (x206 x321)) (= false x64) (<= x119 18446744073709551615) (= false x343) x345 (= x140 (x362 x312)) (<= x365 127) (<= x365 127) (= (x264 0) x357) (= x214 false) (= x119 x44) (= (not x84) x166) (= x212 false) (= x84 (= x140 0)) (= x88 x242) (= (or (not x202) x166) x345) (>= x308 1) (= 3054290345 x351) (= x312 (x6 64 x242 3)) (= false x55) (= x357 x5) (= (x264 4) x119) (>= 2 x140) (= false x373) (= false x218)) (and (= x90 x148) (and (and (>= x52 1) (= x185 (x141 (+ 32 x107))) (= x115 (x92 (- x116 x107))) (= (ite (not (= x257 0)) 1 0) x309) (= x257 (x191 x185)) (= (+ 1 x104) x120) (= x285 (x191 x107)) (<= 1 x13) (= (mod (* x383 4) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x63) (= x216 (x6 64 x36 3)) (= (div x221 2) x276) (= x374 (x325 x65)) (= x336 (x92 (- x116 x126))) (= (x191 x205) x179) (not (< x116 x310)) (= x65 x90) (= (+ x120 1) x8) (= x262 (x141 (+ x107 x47))) (= (x379 1 x221) x239) (= x126 (+ 32 x241)) (or (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x47) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x271)) (and (< x47 x271) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x271) (<= x47 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) (= (x132 x364) x383) (= (+ x36 1) x387) (>= 255 x89) (<= x348 1099511627775) (= (+ 3024000 x112) x289) (= x271 (x92 (- x115 31))) (>= 1461501637330902918203684832716283019655932542975 x52) (= x307 (x191 x126)) (= x103 false) (= x310 (+ x126 x380)) (<= 1 x193) (<= x313 1099511627775) (= (x141 (+ x277 32)) x283) (or (<= 57896044618658097711785492504343953926634992332820282019728792003956564819968 x307) (<= x307 57896044618658097711785492504343953926634992332820282019728792003956564819739)) (= x193 (x156 x194)) (= x348 (x33 x216)) (<= 1 x195) (or (<= x251 57896044618658097711785492504343953926634992332820282019728792003956564819739) (>= x251 57896044618658097711785492504343953926634992332820282019728792003956564819968)) (<= x229 1461501637330902918203684832716283019655932542975) (<= x285 1461501637330902918203684832716283019655932542975) (= x30 (+ 1 x216)) (= (x141 (+ x185 32)) x205) (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x68) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x201)) (> x201 x68)) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x68) (<= x201 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= (x191 x126) x251) (= x215 (x141 (+ x262 32))) (= (x362 x216) x89) (>= 2 x179) (= (x141 (+ x319 x251)) x258) (= (x141 (+ x126 x54)) x107) (<= x225 127) (= (x191 x126) x54) (= x269 3899865236) (= (+ 1 x36) x204) (not (= x115 57896044618658097711785492504343953926634992332820282019728792003956564819999)) (or (>= 57896044618658097711785492504343953926634992332820282019728792003956564819739 x68) (>= x68 57896044618658097711785492504343953926634992332820282019728792003956564819968)) (= (+ x30 1) x364) (= x229 (x272 x216)) (= (x141 (+ x205 32)) x277) (not (or (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x290) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x215)) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x215) (<= x290 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x290 x215)))) (<= x193 1461501637330902918203684832716283019655932542975) (= x68 (x191 x126)) (<= x112 1099508603775) (= x110 x31) (= x317 (x141 (+ x126 x307))) (>= 18446744073709551615 x195) (= x382 (x141 (+ x319 x68))) (= (x92 (- x239 (mod (ite (> 32 x341) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x58) (or (and (<= x201 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x54)) (and (= (<= x201 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x54)) (> x201 x54))) (<= x150 18446744073709551615) (= x176 (+ 31 x241)) (= x366 (> x341 31)) (= x303 (x191 x277)) (= (+ x63 x22) x104) (>= x75 1) (= (x191 x241) x195) (or (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x201) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x251)) (and (= (<= x201 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x251)) (< x251 x201))) (< x176 x116) (= x224 (x379 1099511627775 x178)) (= (+ 4 x119) x241) (or (= x58 1) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x58)) (= (x92 (- x336 191)) x201) (= (x191 x262) x150) (not (= x47 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (= x61 (x191 x382)) (= x4 (x141 (+ 1 x383))) (= false x1) (<= x61 2) (= x380 (* x195 32)) (= (x101 32 x364) x22) (or (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x201) (> x307 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (= (<= x307 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x201 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x307 x201))) (= (x275 x216) x313) (= x341 (ite (> x239 0) x276 (x379 127 x276))) (= x75 (x206 x321)) (= x290 (x92 (- x116 x150))) (= (x237 x321) x31) (= x13 (x191 x258)) (<= x225 127) (= x194 (x6 64 x61 2)) (<= x13 2) (= (x231 x8) x221) (= x112 (x379 1099511627775 x178)) (= x52 (x191 x317)) (= (+ 64 x126) x319) (= x47 (x191 x283)) (or (<= 57896044618658097711785492504343953926634992332820282019728792003956564819968 x54) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819739 x54))) (= x223 x178))))) (and (=> (not x366) x121) (=> (and x366 (and (= x9 (div (+ x341 31) 32)) (= (div (+ 31 x150) 32) x368) (= (< x173 x331) x392) (= (+ x340 x368) x363) (= (x101 32 x8) x340) (= x173 (ite (< x150 32) x340 x363)) (= (+ x9 x340) x331))) (and (=> (not x392) x184) (=> x392 x188)))))))
(assert (x327 x140))
(assert (x327 x260))
(assert (= (x6 64 x329 2) (x381 (x6 64 x329 2))))
(assert (x327 x336))
(assert (x327 x335))
(assert (x327 x61))
(assert (x327 x47))
(assert (= (x381 18446744073709551615) 0))
(assert (x327 x29))
(assert (x352 x276))
(assert (= (or x281 x164) x56))
(assert (= (x381 4294967295) 0))
(assert (x327 x307))
(assert (< 10000 (x6 64 x61 2)))
(assert (x327 x365))
(assert (=> (<= x65 10000) (= 0 (x381 x65))))
(assert (x327 x359))
(assert (= x372 (and x318 (not x259))))
(assert (x327 x74))
(assert (x327 x267))
(assert (= (x381 x22) (x381 (+ x63 x22))))
(assert (x327 x187))
(assert (x327 x44))
(assert (x327 x129))
(assert (x327 x278))
(assert (< (x101 32 x364) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x327 x258))
(assert (x327 x179))
(assert (x327 x310))
(assert (< 10000 (x101 32 x8)))
(assert (= (=> (= (not (< 1 x195)) x254) (and (=> (and (= (x191 x37) x265) (= x247 (x92 (- x116 x265))) (= x154 (x92 (- x116 x337))) (= (x141 (+ x20 32)) x14) (not (or (and (= (<= x154 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x278)) (> x278 x154)) (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x154) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x278)))) (<= x149 255) (= x155 (x92 (- x116 x126))) (= (x191 x94) x260) (>= 1099511627775 x189) (= (x6 64 x329 2) x235) (= x7 (x92 (- x105 31))) (= x190 (x141 (+ x175 x210))) (<= x260 2) (= (x191 x14) x297) (= (x191 x299) x134) (= (x92 (- x116 x210)) x105) (>= 1099511627775 x270) (or (and (<= x7 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x175)) (and (< x175 x7) (= (<= x7 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x175 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) (= x337 (x191 x190)) (= x358 (not (< 1 x195))) (or (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x7) (> x297 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (> x7 x297) (= (<= x7 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x297 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) (not (= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x175)) (= (x49 x216) x270) (= (x27 x216) x335) (= x278 (x141 (+ 32 x190))) (>= 18446744073709551615 x337) (not (= x105 57896044618658097711785492504343953926634992332820282019728792003956564819999)) (>= 18446744073709551615 x265) (= (x191 x20) x175) (not (or (and (<= x209 57896044618658097711785492504343953926634992332820282019728792003956564819967) (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x247)) (and (> x209 x247) (= (<= x247 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x209))))) (not (= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x297)) (= (x191 x210) x146) (= x113 (x92 (- x155 191))) (= x210 (x141 (+ x126 x304))) (or (and (< x304 x113) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x113) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x304))) (and (> x304 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x113 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x37 (x141 (+ x210 x297))) (>= 1461501637330902918203684832716283019655932542975 x146) (<= x234 1461501637330902918203684832716283019655932542975) (= x20 (x141 (+ x299 32))) (= (x141 (+ x210 32)) x151) (= (x141 (+ x151 32)) x94) (= x304 (x191 x126)) (>= 1461501637330902918203684832716283019655932542975 x361) (or (>= x304 57896044618658097711785492504343953926634992332820282019728792003956564819968) (<= x304 57896044618658097711785492504343953926634992332820282019728792003956564819739)) (= x209 (x141 (+ x37 32))) (= x149 (x180 x216)) (= x299 (x141 (+ x94 32))) (= (x144 x235) x189) (>= 1099511627775 x335) (= x234 (x133 x216)) (= (x156 x235) x361)) (and x358 (=> (and (and (= x86 x162) (= x162 x339) (= false x375) (= false x66) (= x213 false) (= x296 false) (= x23 false) (>= 127 x70) (= x111 false) (<= x70 127) (= x145 2855319274) (= x135 false) (= x97 (x206 x321)) (= 4 x238) (= x91 false) (= x386 false) (= x21 false) (<= 1 x97) (= x305 (< x86 x204)) (= 36 x138)) (and (= x82 false) (<= x330 127) (= x200 false) (>= 2 x349) (= false x293) (= (or x284 (not x305)) x186) (= x11 3054290345) (>= x12 1) (= false x243) (= (= x349 0) x273) (= x284 (not x273)) (= false x244) (>= 127 x330) (= (x6 64 x48 3) x81) (= x339 x48) (= x12 (x206 x321)) (= false x153) (= x349 (x249 x81)))) x186))) x254)) x232))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x6 64 x61 2)))
(assert (< (x6 64 x329 2) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (and x318 x259) x158))
(assert (x152 18446744073709551615))
(assert (= (or x372 x158) x127))
(assert (x327 x247))
(assert (= (and x56 x350) x139))
(assert (x327 x271))
(assert (not x220))
(assert (x327 x31))
(assert (x327 x72))
(assert (= (x381 (+ x120 1)) (x381 x120)))
(assert (x327 x319))
(assert (x327 x280))
(assert (x342 x221))
(assert (= (x381 x340) (x381 (+ x340 x9))))
(assert (not (x152 (x6 64 x242 3))))
(assert (=> (<= x329 10000) (= 0 (x381 x329))))
(assert (x152 2855319274))
(assert (x327 x57))
(assert (x152 57896044618658097711785492504343953926634992332820282019728792003956564819968))
(assert (x327 x9))
(assert (x327 x308))
(assert (x327 x210))
(assert (x327 x361))
(assert (x327 x168))
(assert (x327 x189))
(assert (= (x381 x340) (x381 (+ x340 x368))))
(assert (= 3 (x143 (x6 64 x36 3))))
(assert (x327 x221))
(assert (x327 x20))
(assert (= 0 (x381 1099511627774)))
(assert (=> (>= 10000 x36) (= 0 (x381 x36))))
(assert (= 0 (x381 3054290345)))
(assert (x327 x207))
(assert (> (x6 64 x329 2) 10000))
(assert (x327 x26))
(assert (x327 x292))
(assert (x327 x382))
(assert (x327 x59))
(assert (= x128 (and x98 x392)))
(assert (x327 x283))
(assert (x327 x46))
(assert (x327 x215))
(assert (= (x344 (x6 64 x242 3)) x242))
(assert (x327 x238))
(assert (x327 x303))
(assert (= 0 (x381 57896044618658097711785492504343953926634992332820282019728792003956564819968)))
(assert (x327 x150))
(assert (= 0 (x381 3024000)))
(assert (< 10000 (x101 32 x364)))
(assert (=> (<= x321 10000) (= (x381 x321) 0)))
(assert (x327 x36))
(assert (x327 x138))
(assert (x327 x353))
(assert (= 0 (x381 57896044618658097711785492504343953926634992332820282019728792003956564819967)))
(assert (x327 x115))
(assert (= (x17 (x101 32 x364)) 32))
(assert (x327 x380))
(assert (x152 1099508603775))
(assert (= 2 (x143 (x6 64 x61 2))))
(assert (x327 x176))
(assert (= 2 (x143 (x6 64 x329 2))))
(assert (x327 x155))
(assert (x327 x119))
(assert (x327 x175))
(assert (x327 x52))
(assert (x152 1099511627774))
(assert (x327 x185))
(assert (x327 x126))
(assert (x152 1099511627775))
(assert (x327 x201))
(assert (x327 x12))
(assert (= (x381 x30) (x381 (+ x30 1))))
(assert (x171 x118))
(assert (x327 x75))
(assert (x79 x85 x118))
(assert (x311 x276))
(assert (x327 x102))
(assert (= (x381 3899865236) 0))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x101 32 x8)))
(assert (x327 x78))
(assert (x327 x124))
(assert (x311 x377))
(assert (x327 x95))
(assert (not (x152 (x6 64 x48 3))))
(assert (x327 x315))
(assert (= 0 (x381 57896044618658097711785492504343953926634992332820282019728792003956564819739)))
(assert (x327 x269))
(assert (x327 x48))
(assert (= 0 (x381 1099508603775)))
(assert (x327 x251))
(assert (x327 x113))
(assert (x327 x250))
(assert (x311 x46))
(assert (x152 3054290345))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x6 64 x48 3)))
(assert (x327 x229))
(assert (x327 x4))
(assert (x327 x62))
(assert (= (and x19 (not x389)) x371))
(assert (x327 x3))
(assert (x327 x277))
(assert (x327 x285))
(assert (x327 x337))
(assert (x327 x297))
(assert (= x246 (=> (and (and (= x102 (ite (<= x266 1) x332 (x390 x266 x136))) (= (x35 115792089237316195423570985008687907853269984665640564039457584007913129639935 x300) x24) (= x333 (x141 (+ x319 x59))) (= x26 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x24)) (= x259 (> x62 0)) (or (<= x59 57896044618658097711785492504343953926634992332820282019728792003956564819739) (>= x59 57896044618658097711785492504343953926634992332820282019728792003956564819968)) (= x332 (x141 (+ x266 x136))) (= x300 (* x125 8)) (= (* x125 2) x136) (= (x379 x46 x26) x266) (or (and (> x201 x59) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x201) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x59))) (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x201) (> x59 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (>= x24 1) (= (x191 x333) x62) (= (x191 x126) x59) (<= x62 2)) (or (and (= 0 x329) (not x259)) (and x259 (and (>= 2 x182) (or (and (<= x201 57896044618658097711785492504343953926634992332820282019728792003956564819967) (> x60 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (> x201 x60) (= (<= x201 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x60 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) (= (x191 x126) x60) (= x182 x329) (= x353 (x141 (+ x60 x319))) (or (<= x60 57896044618658097711785492504343953926634992332820282019728792003956564819739) (<= 57896044618658097711785492504343953926634992332820282019728792003956564819968 x60)) (= (x191 x353) x182))))) x232)))
(assert (x327 x295))
(assert (=> (>= 10000 x359) (= (x381 x359) 0)))
(assert (x327 x14))
(assert (x152 57896044618658097711785492504343953926634992332820282019728792003956564819967))
(assert (=> (>= 10000 x292) (= (x381 x292) 0)))
(assert (x311 127))
(assert (x327 x34))
(assert (x327 x357))
(assert (= (x143 (x6 64 x242 3)) 3))
(assert (x171 x266))
(assert (x327 x190))
(assert (x327 x368))
(assert (not (x152 (x101 32 x8))))
(assert (x152 57896044618658097711785492504343953926634992332820282019728792003956564819999))
(assert (= x188 (=> (and (= x192 (+ x173 1)) (= x40 (not (> x331 x192)))) (and x40 x184))))
(assert (x327 x265))
(assert (x327 x83))
(assert (= (x381 115792089237316195423570985008687907853269984665640564039457584007913129639935) 0))
(assert (x327 x149))
(assert (= (and x56 (not x350)) x230))
(assert (x327 x116))
(assert (= (x17 (x6 64 x36 3)) 64))
(assert (x152 4294967295))
(assert (x327 x383))
(assert (x352 x354))
(assert (= x240 (=> (and (and (= (x141 (+ x168 x107)) x29) (= (x141 (+ x118 x85)) x129) (= (x379 x267 x377) x85) (= (x141 (+ 32 x283)) x291) (= (x191 x291) x168) (= x217 (= 1 (ite (< 31 x125) 1 0))) (= x196 (ite (< 0 x315) x354 (x379 127 x354))) (or (and (= (<= x168 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x271 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x168 x271)) (and (> x168 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x271 57896044618658097711785492504343953926634992332820282019728792003956564819967))) (= x3 (x137 x147)) (not (or (and (< 57896044618658097711785492504343953926634992332820282019728792003956564819967 x295) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x183)) (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x295) (<= x183 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> x183 x295)))) (= x163 (< 31 x196)) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x124) x377) (= x78 (* 8 x150)) (= (* 2 x150) x118) (= (x92 (- x315 (mod (ite (< x196 32) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x250) (not (= x168 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (= x125 (x191 x29)) (not x217) (= (x141 (+ 32 x29)) x183) (= (ite (>= 1 x85) x129 (x390 x85 x118)) x280) (= x147 (+ 1 x8)) (not x163) (<= 1 x124) (= x315 (x379 1 x3)) (or (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x250) (= 1 x250)) (= x389 (= 0 x125)) (= (div x3 2) x354) (= (x35 115792089237316195423570985008687907853269984665640564039457584007913129639935 x78) x124) (>= 18446744073709551615 x125) (= (x92 (- x116 x125)) x295)) (or (and (and (= x46 x169) (= (x191 x183) x169)) (not x389)) (and (= 0 x46) x389))) x246)))
(assert (= 3 (x143 (x6 64 x48 3))))
(assert (x152 3024000))
(assert (x327 x70))
(assert (x152 604800))
(assert (=> (<= x100 10000) (= 0 (x381 x100))))
(assert (x327 x63))
(assert (x79 x266 x136))
(assert (x327 x291))
(assert (x327 x370))
(assert (x327 x242))
(assert (x327 x309))
(assert (x327 x224))
(assert (x327 x349))
(assert (= (x17 (x101 32 x8)) 32))
(assert (x327 x196))
(assert (x327 x299))
(assert (= (and x203 (not x366)) x164))
(assert (= true x203))
(assert (x311 x354))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x6 64 x36 3)))
(assert (x152 3899865236))
(assert (x327 x5))
(assert (x327 x110))
(assert (x327 x68))
(assert (x327 x354))
(assert (=> (>= 10000 x48) (= (x381 x48) 0)))
(assert (x327 x225))
(assert (not (x152 (x6 64 x36 3))))
(assert (< (x6 64 x242 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (=> (>= 10000 x242) (= (x381 x242) 0)))
(assert (x117 x267 x377))
(assert (x311 x178))
(assert (x327 x241))
(assert (= x19 (or x230 x139)))
(assert (x327 x270))
(assert (x327 x205))
(assert (= 64 (x17 (x6 64 x242 3))))
(assert (x327 x262))
(assert (= x314 (and x19 x389)))
(assert (= x281 (or x227 x128)))
(assert (= (x381 57896044618658097711785492504343953926634992332820282019728792003956564819999) 0))
(assert (= (x6 64 x242 3) (x381 (x6 64 x242 3))))
(assert (x327 x332))
(assert (= (x381 (+ x216 1)) (x381 x216)))
(assert (x152 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (x327 x209))
(assert (x327 x11))
(assert (x152 57896044618658097711785492504343953926634992332820282019728792003956564819739))
(assert (< 10000 (x6 64 x36 3)))
(assert (x327 x182))
(assert (x327 x222))
(assert (x327 x266))
(assert (= x98 (and x203 x366)))
(assert (x117 x46 x26))
(assert (= (x6 64 x36 3) (x381 (x6 64 x36 3))))
(assert (x327 x154))
(assert (x327 x146))
(assert (x152 1461501637330902918203684832716283019655932542975))
(assert (x327 x257))
(assert (x311 x221))
(assert (x327 x181))
(assert (> (x6 64 x242 3) 10000))
(assert (x327 x89))
(assert (x327 x351))
(assert (x327 x94))
(assert (= x48 (x344 (x6 64 x48 3))))
(assert (x327 x195))
(assert (= x184 x121))
(assert (x327 x183))
(assert (= 64 (x17 (x6 64 x329 2))))
(check-sat)
(exit)
