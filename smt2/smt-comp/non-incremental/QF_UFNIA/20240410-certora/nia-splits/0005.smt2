(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Certora
Generated on: 2024-04-10
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x251 () Int)
(declare-fun x428 () Bool)
(declare-fun x87 () Int)
(declare-fun x164 () Int)
(declare-fun x423 () Int)
(declare-fun x512 () Int)
(declare-fun x570 () Int)
(declare-fun x384 () Int)
(declare-fun x104 () Int)
(declare-fun x216 () Int)
(declare-fun x42 () Int)
(declare-fun x171 () Int)
(declare-fun x188 () Bool)
(declare-fun x407 () Int)
(declare-fun x513 () Int)
(declare-fun x232 () Int)
(declare-fun x578 () Int)
(declare-fun x444 () Int)
(declare-fun x509 () Int)
(declare-fun x411 () Int)
(declare-fun x15 () Int)
(declare-fun x4 () Int)
(declare-fun x93 () Bool)
(declare-fun x312 () Int)
(declare-fun x75 () Int)
(declare-fun x236 () Int)
(declare-fun x21 () Int)
(declare-fun x136 () Int)
(declare-fun x248 () Int)
(declare-fun x92 () Int)
(declare-fun x446 () Bool)
(declare-fun x525 (Int) Int)
(declare-fun x522 () Int)
(declare-fun x245 () Bool)
(declare-fun x490 () Bool)
(declare-fun x441 () Int)
(declare-fun x95 () Int)
(declare-fun x239 () Int)
(declare-fun x54 () Int)
(declare-fun x97 () Int)
(declare-fun x581 () Int)
(declare-fun x94 () Int)
(declare-fun x117 () Bool)
(declare-fun x394 () Int)
(declare-fun x315 () Int)
(declare-fun x113 (Int) Int)
(declare-fun x135 () Int)
(declare-fun x545 () Int)
(declare-fun x517 () Int)
(declare-fun x220 () Int)
(declare-fun x371 () Int)
(declare-fun x56 () Int)
(declare-fun x137 () Bool)
(declare-fun x442 () Int)
(declare-fun x417 () Int)
(declare-fun x195 () Int)
(declare-fun x556 () Bool)
(declare-fun x53 () Int)
(declare-fun x145 () Int)
(declare-fun x28 () Int)
(declare-fun x43 () Bool)
(declare-fun x153 () Int)
(declare-fun x252 () Int)
(declare-fun x52 () Int)
(declare-fun x66 () Int)
(declare-fun x329 () Int)
(declare-fun x543 () Int)
(declare-fun x146 () Int)
(declare-fun x473 () Bool)
(declare-fun x465 (Int) Int)
(declare-fun x6 () Int)
(declare-fun x57 () Int)
(declare-fun x574 () Int)
(declare-fun x579 () Int)
(declare-fun x459 () Bool)
(declare-fun x327 () Bool)
(declare-fun x215 () Int)
(declare-fun x357 () Bool)
(declare-fun x63 () Int)
(declare-fun x156 () Int)
(declare-fun x277 () Int)
(declare-fun x521 () Int)
(declare-fun x471 () Int)
(declare-fun x158 () Int)
(declare-fun x194 () Int)
(declare-fun x335 () Int)
(declare-fun x367 () Int)
(declare-fun x172 () Int)
(declare-fun x503 () Int)
(declare-fun x70 () Int)
(declare-fun x115 () Int)
(declare-fun x79 () Int)
(declare-fun x44 () Int)
(declare-fun x261 () Int)
(declare-fun x415 () Int)
(declare-fun x77 () Int)
(declare-fun x203 () Int)
(declare-fun x10 () Int)
(declare-fun x524 () Int)
(declare-fun x263 () Int)
(declare-fun x198 () Int)
(declare-fun x213 () Int)
(declare-fun x45 () Int)
(declare-fun x436 () Int)
(declare-fun x462 () Int)
(declare-fun x270 () Int)
(declare-fun x550 () Int)
(declare-fun x531 () Int)
(declare-fun x214 () Int)
(declare-fun x240 () Bool)
(declare-fun x30 () Int)
(declare-fun x268 () Bool)
(declare-fun x364 () Bool)
(declare-fun x434 () Int)
(declare-fun x235 () Int)
(declare-fun x73 () Int)
(declare-fun x34 () Int)
(declare-fun x404 () Int)
(declare-fun x449 () Bool)
(declare-fun x429 () Int)
(declare-fun x558 () Int)
(declare-fun x391 () Int)
(declare-fun x440 () Int)
(declare-fun x144 () Bool)
(declare-fun x207 (Int) Int)
(declare-fun x81 () Int)
(declare-fun x24 () Int)
(declare-fun x508 () Int)
(declare-fun x552 () Int)
(declare-fun x443 () Int)
(declare-fun x454 () Bool)
(declare-fun x474 () Int)
(declare-fun x264 () Int)
(declare-fun x317 () Bool)
(declare-fun x223 () Bool)
(declare-fun x288 () Int)
(declare-fun x475 (Int) Int)
(declare-fun x3 () Int)
(declare-fun x439 () Int)
(declare-fun x397 () Int)
(declare-fun x514 () Int)
(declare-fun x477 () Int)
(declare-fun x469 () Bool)
(declare-fun x267 () Int)
(declare-fun x76 () Bool)
(declare-fun x163 () Bool)
(declare-fun x316 () Int)
(declare-fun x502 () Int)
(declare-fun x257 () Int)
(declare-fun x343 () Int)
(declare-fun x241 () Int)
(declare-fun x360 () Int)
(declare-fun x256 () Int)
(declare-fun x61 () Int)
(declare-fun x14 () Int)
(declare-fun x478 () Int)
(declare-fun x457 () Int)
(declare-fun x139 () Int)
(declare-fun x321 () Int)
(declare-fun x523 () Int)
(declare-fun x466 () Bool)
(declare-fun x359 () Int)
(declare-fun x564 () Int)
(declare-fun x99 () Int)
(declare-fun x555 () Bool)
(declare-fun x212 () Int)
(declare-fun x332 () Int)
(declare-fun x105 () Int)
(declare-fun x33 () Int)
(declare-fun x72 () Int)
(declare-fun x290 () Bool)
(declare-fun x2 () Bool)
(declare-fun x370 () Bool)
(declare-fun x50 () Int)
(declare-fun x197 () Int)
(declare-fun x541 () Int)
(declare-fun x580 () Int)
(declare-fun x421 () Int)
(declare-fun x447 () Bool)
(declare-fun x274 () Int)
(declare-fun x493 () Int)
(declare-fun x497 () Int)
(declare-fun x389 () Int)
(declare-fun x5 () Int)
(declare-fun x495 () Bool)
(declare-fun x253 () Int)
(declare-fun x262 () Int)
(declare-fun x455 () Int)
(declare-fun x190 () Int)
(declare-fun x507 () Int)
(declare-fun x58 () Int)
(declare-fun x244 () Int)
(declare-fun x222 () Int)
(declare-fun x460 () Int)
(declare-fun x167 () Int)
(declare-fun x280 () Int)
(declare-fun x279 () Int)
(declare-fun x133 () Int)
(declare-fun x487 () Bool)
(declare-fun x124 () Int)
(declare-fun x506 () Int)
(declare-fun x49 () Int)
(declare-fun x118 () Int)
(declare-fun x489 () Int)
(declare-fun x297 () Int)
(declare-fun x395 () Int)
(declare-fun x48 () Int)
(declare-fun x111 () Int)
(declare-fun x282 (Int) Int)
(declare-fun x303 () Int)
(declare-fun x430 () Bool)
(declare-fun x492 () Int)
(declare-fun x225 () Int)
(declare-fun x284 () Int)
(declare-fun x175 () Int)
(declare-fun x276 () Int)
(declare-fun x86 () Int)
(declare-fun x308 () Int)
(declare-fun x336 () Int)
(declare-fun x289 () Int)
(declare-fun x37 () Int)
(declare-fun x47 () Int)
(declare-fun x520 () Int)
(declare-fun x437 () Int)
(declare-fun x463 () Int)
(declare-fun x141 () Int)
(declare-fun x302 () Int)
(declare-fun x224 () Int)
(declare-fun x563 () Int)
(declare-fun x398 () Int)
(declare-fun x151 () Bool)
(declare-fun x528 () Int)
(declare-fun x71 () Int)
(declare-fun x467 () Int)
(declare-fun x193 () Int)
(declare-fun x340 () Int)
(declare-fun x169 () Int)
(declare-fun x90 () Bool)
(declare-fun x106 () Int)
(declare-fun x409 () Int)
(declare-fun x479 () Int)
(declare-fun x328 () Bool)
(declare-fun x183 () Int)
(declare-fun x324 () Int)
(declare-fun x456 () Bool)
(declare-fun x400 () Int)
(declare-fun x152 () Int)
(declare-fun x375 () Int)
(declare-fun x354 () Int)
(declare-fun x168 () Bool)
(declare-fun x342 () Bool)
(declare-fun x233 () Int)
(declare-fun x547 (Int) Int)
(declare-fun x254 () Bool)
(declare-fun x249 () Int)
(declare-fun x483 () Int)
(declare-fun x546 () Int)
(declare-fun x346 () Bool)
(declare-fun x549 () Int)
(declare-fun x353 () Int)
(declare-fun x363 () Int)
(declare-fun x519 () Int)
(declare-fun x88 () Int)
(declare-fun x431 () Int)
(declare-fun x567 () Int)
(declare-fun x344 () Bool)
(declare-fun x129 () Bool)
(declare-fun x209 () Bool)
(declare-fun x414 () Int)
(declare-fun x208 () Int)
(declare-fun x149 () Int)
(declare-fun x352 () Int)
(declare-fun x234 () Int)
(declare-fun x361 () Bool)
(declare-fun x186 () Int)
(declare-fun x377 () Int)
(declare-fun x382 () Int)
(declare-fun x362 () Int)
(declare-fun x565 () Int)
(declare-fun x304 () Bool)
(declare-fun x120 () Int)
(declare-fun x16 () Int)
(declare-fun x17 () Int)
(declare-fun x161 () Int)
(declare-fun x379 (Int) Int)
(declare-fun x29 () Bool)
(declare-fun x180 () Int)
(declare-fun x140 () Int)
(declare-fun x420 () Int)
(declare-fun x392 () Int)
(declare-fun x540 () Bool)
(declare-fun x35 (Int) Int)
(declare-fun x231 (Int) Int)
(declare-fun x318 () Int)
(declare-fun x266 () Bool)
(declare-fun x310 () Int)
(declare-fun x85 () Int)
(declare-fun x228 () Int)
(declare-fun x196 () Bool)
(declare-fun x185 () Int)
(declare-fun x319 (Int) Int)
(declare-fun x575 () Int)
(declare-fun x165 () Int)
(declare-fun x269 () Int)
(declare-fun x119 () Int)
(declare-fun x338 () Bool)
(declare-fun x182 () Bool)
(declare-fun x8 (Int) Int)
(declare-fun x403 () Int)
(declare-fun x170 () Int)
(declare-fun x278 () Int)
(declare-fun x300 () Int)
(declare-fun x526 () Int)
(declare-fun x569 () Int)
(declare-fun x334 () Bool)
(declare-fun x41 () Bool)
(declare-fun x96 () Bool)
(declare-fun x351 () Int)
(declare-fun x511 () Int)
(declare-fun x226 () Int)
(declare-fun x325 () Int)
(declare-fun x237 () Int)
(declare-fun x39 () Int)
(declare-fun x130 () Int)
(declare-fun x32 () Int)
(declare-fun x107 () Int)
(declare-fun x150 () Int)
(declare-fun x418 () Int)
(declare-fun x532 () Int)
(declare-fun x390 (Int) Int)
(declare-fun x347 () Int)
(declare-fun x238 () Bool)
(declare-fun x19 () Int)
(declare-fun x100 () Int)
(declare-fun x306 () Int)
(declare-fun x162 () Int)
(declare-fun x402 () Bool)
(declare-fun x458 () Int)
(declare-fun x102 () Bool)
(declare-fun x281 () Int)
(declare-fun x147 () Int)
(declare-fun x258 () Int)
(declare-fun x380 () Int)
(declare-fun x204 () Int)
(declare-fun x482 () Bool)
(declare-fun x174 (Int Int Int Int Int Int) Int)
(declare-fun x202 () Int)
(declare-fun x286 () Int)
(declare-fun x339 () Bool)
(declare-fun x529 (Int) Int)
(declare-fun x448 () Int)
(declare-fun x134 () Int)
(declare-fun x568 () Int)
(declare-fun x128 () Int)
(declare-fun x427 () Int)
(declare-fun x365 () Int)
(declare-fun x491 () Bool)
(declare-fun x534 () Int)
(declare-fun x122 () Int)
(declare-fun x181 (Int) Int)
(declare-fun x373 () Int)
(declare-fun x159 () Int)
(declare-fun x412 () Int)
(declare-fun x450 () Int)
(declare-fun x401 () Int)
(declare-fun x355 () Bool)
(declare-fun x536 () Int)
(declare-fun x369 () Int)
(declare-fun x433 () Int)
(declare-fun x84 () Int)
(declare-fun x160 () Int)
(declare-fun x572 () Int)
(declare-fun x468 () Bool)
(declare-fun x571 () Int)
(declare-fun x271 () Int)
(declare-fun x126 () Int)
(declare-fun x560 () Int)
(declare-fun x184 () Int)
(declare-fun x573 () Int)
(declare-fun x206 () Bool)
(declare-fun x38 () Int)
(declare-fun x374 () Int)
(declare-fun x36 (Int) Int)
(declare-fun x307 (Int Int) Int)
(declare-fun x453 () Int)
(declare-fun x432 () Int)
(declare-fun x562 () Bool)
(declare-fun x544 () Int)
(declare-fun x452 () Int)
(declare-fun x405 () Int)
(declare-fun x416 () Bool)
(declare-fun x538 (Int Int) Int)
(declare-fun x385 () Bool)
(declare-fun x341 () Int)
(declare-fun x376 () Int)
(declare-fun x299 () Bool)
(declare-fun x201 () Int)
(declare-fun x221 () Int)
(declare-fun x387 () Int)
(declare-fun x366 () Int)
(declare-fun x542 (Int) Int)
(declare-fun x179 () Int)
(declare-fun x272 () Int)
(declare-fun x125 () Bool)
(declare-fun x499 () Int)
(declare-fun x138 () Bool)
(declare-fun x337 () Int)
(declare-fun x74 () Bool)
(declare-fun x275 () Int)
(declare-fun x64 () Bool)
(declare-fun x518 () Bool)
(declare-fun x323 () Int)
(declare-fun x539 () Bool)
(declare-fun x295 () Bool)
(declare-fun x551 (Int Int Int) Int)
(declare-fun x501 () Int)
(declare-fun x577 () Int)
(declare-fun x178 () Int)
(declare-fun x189 () Int)
(declare-fun x7 () Bool)
(declare-fun x535 () Int)
(declare-fun x435 () Int)
(declare-fun x12 () Int)
(declare-fun x27 () Bool)
(declare-fun x413 () Int)
(declare-fun x309 () Int)
(declare-fun x348 () Int)
(declare-fun x199 () Int)
(declare-fun x484 () Int)
(declare-fun x65 (Int) Bool)
(declare-fun x330 (Int) Int)
(declare-fun x273 () Int)
(declare-fun x143 () Int)
(declare-fun x322 () Int)
(declare-fun x157 () Int)
(declare-fun x112 () Bool)
(declare-fun x320 () Int)
(declare-fun x399 () Int)
(declare-fun x98 () Int)
(declare-fun x218 () Int)
(declare-fun x108 () Int)
(declare-fun x291 () Int)
(declare-fun x23 () Int)
(declare-fun x229 () Int)
(declare-fun x516 () Int)
(declare-fun x350 () Int)
(declare-fun x13 () Int)
(declare-fun x393 () Int)
(declare-fun x200 () Int)
(declare-fun x127 () Bool)
(declare-fun x566 () Bool)
(declare-fun x20 () Int)
(declare-fun x259 () Bool)
(declare-fun x246 () Int)
(declare-fun x378 () Int)
(declare-fun x173 () Bool)
(declare-fun x438 () Bool)
(declare-fun x103 () Int)
(declare-fun x311 () Int)
(declare-fun x123 () Int)
(declare-fun x358 () Int)
(declare-fun x191 () Int)
(declare-fun x313 (Int) Int)
(declare-fun x121 () Int)
(declare-fun x298 () Int)
(declare-fun x46 () Int)
(declare-fun x422 () Int)
(declare-fun x305 () Int)
(declare-fun x557 () Int)
(declare-fun x296 () Int)
(declare-fun x476 () Int)
(declare-fun x425 () Int)
(declare-fun x287 () Int)
(declare-fun x372 () Int)
(declare-fun x26 () Int)
(declare-fun x116 () Bool)
(declare-fun x333 () Bool)
(declare-fun x486 () Int)
(declare-fun x142 () Int)
(declare-fun x488 () Int)
(declare-fun x80 () Int)
(declare-fun x187 () Bool)
(declare-fun x217 () Int)
(declare-fun x25 () Int)
(define-fun x293 ((x410 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x410) (>= x410 0)) x410 (- x410 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x166 ((x410 Int)) Int (ite (and (< x410 0) (>= x410 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x410 115792089237316195423570985008687907853269984665640564039457584007913129639936) x410))
(define-fun x59 ((x242 Int)) Bool (and (>= x242 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x242)))
(define-fun x504 ((x242 Int)) Bool (and (= (x538 x242 115792089237316195423570985008687907853269984665640564039457584007913129639935) x242) (= (x538 115792089237316195423570985008687907853269984665640564039457584007913129639935 x242) x242)))
(define-fun x461 ((x242 Int)) Bool (and (= 0 (x538 x242 0)) (= (x538 0 x242) 0)))
(define-fun x227 ((x242 Int)) Bool (= (x538 x242 x242) x242))
(define-fun x60 ((x242 Int)) Bool (and (x227 x242) (x504 x242) (x461 x242)))
(define-fun x368 ((x242 Int) (x396 Int)) Bool (= (x538 x242 x396) (x538 x396 x242)))
(define-fun x470 ((x242 Int) (x396 Int)) Bool (and (=> (>= x242 0) (>= x242 (x538 x242 x396))) (<= 0 (x538 x242 x396)) (=> (>= x396 0) (<= (x538 x242 x396) x396))))
(define-fun x283 ((x242 Int) (x396 Int)) Bool (and (x470 x242 x396) (x368 x242 x396)))
(define-fun x537 ((x242 Int)) Bool (= (mod x242 1461501637330902918203684832716283019655932542976) (x538 x242 1461501637330902918203684832716283019655932542975)))
(define-fun x250 ((x242 Int)) Bool (and (x537 x242) (x283 x242 1461501637330902918203684832716283019655932542975)))
(define-fun x265 ((x242 Int)) Bool (and (= (x307 115792089237316195423570985008687907853269984665640564039457584007913129639935 x242) (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x242)) (= (x307 x242 115792089237316195423570985008687907853269984665640564039457584007913129639935) (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x242))))
(define-fun x247 ((x242 Int)) Bool (and (= x242 (x307 x242 0)) (= x242 (x307 0 x242))))
(define-fun x356 ((x242 Int)) Bool (= 0 (x307 x242 x242)))
(define-fun x31 ((x242 Int)) Bool (and (x247 x242) (x356 x242) (x265 x242)))
(define-fun x285 ((x242 Int) (x396 Int)) Bool (= (x307 x242 x396) (x307 x396 x242)))
(define-fun x505 ((x242 Int) (x396 Int)) Bool (and (<= (x307 x242 x396) (+ x242 x396)) (>= (x307 x242 x396) 0)))
(define-fun x485 ((x242 Int) (x396 Int)) Bool (and (x285 x242 x396) (x505 x242 x396)))
(define-fun x260 ((x242 Int)) Bool (= (+ (x538 x242 115792089237316195423570985008687907853269984665640564039457584007913129639904) (mod x242 32)) (mod x242 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x68 ((x242 Int)) Bool (and (x260 x242) (x283 x242 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(define-fun x548 ((x22 Int)) Int 0)
(define-fun x301 ((x22 Int)) Int 0)
(define-fun x155 ((x22 Int)) Int 0)
(define-fun x533 ((x22 Int)) Int 0)
(define-fun x445 ((x22 Int)) Int 0)
(define-fun x527 ((x22 Int)) Int 0)
(define-fun x496 ((x22 Int)) Int 0)
(define-fun x381 ((x22 Int)) Int 0)
(define-fun x576 ((x22 Int)) Int 0)
(define-fun x78 ((x22 Int)) Int 0)
(define-fun x406 ((x22 Int)) Int (ite (= 4 x22) x420 (x78 x22)))
(define-fun x91 ((x22 Int)) Int (ite (= 36 x22) x477 (x406 x22)))
(define-fun x132 ((x22 Int)) Int (ite (= x22 68) x72 (x91 x22)))
(define-fun x515 ((x22 Int)) Int (ite (= 100 x22) x377 (x132 x22)))
(define-fun x51 ((x22 Int)) Int (ite (= x22 132) x450 (x515 x22)))
(define-fun x83 ((x22 Int)) Int (ite (= 164 x22) x309 (x51 x22)))
(define-fun x383 ((x22 Int)) Int (ite (= x22 196) 0 (x83 x22)))
(define-fun x154 ((x22 Int)) Int (ite (= 228 x22) x15 (x383 x22)))
(define-fun x18 ((x22 Int)) Int (ite (= 260 x22) 288 (x154 x22)))
(define-fun x82 ((x22 Int)) Int (ite (= x22 292) x21 (x18 x22)))
(define-fun x408 ((x22 Int)) Int (ite (and (>= x22 324) (> (+ x21 324) x22)) (x525 (- x22 324)) (x82 x22)))
(define-fun x331 ((x22 Int)) Int (ite (= x22 x87) x204 (x390 x22)))
(define-fun x314 ((x22 Int)) Int (ite (= x235 x22) x321 (x331 x22)))
(define-fun x472 ((x22 Int)) Int (ite (= 128 x22) x170 (x445 x22)))
(define-fun x67 ((x22 Int)) Int (ite (= 160 x22) x276 (x155 x22)))
(define-fun x69 ((x22 Int)) Int (ite (= x22 192) x258 (x301 x22)))
(define-fun x89 ((x22 Int)) Int (ite (= 224 x22) x171 (x548 x22)))
(define-fun x205 ((x22 Int)) Int (ite (= 256 x22) x108 (x576 x22)))
(define-fun x114 ((x22 Int)) Int 0)
(define-fun x553 ((x22 Int)) Int (ite (= 480 x22) x558 (x381 x22)))
(define-fun x62 ((x22 Int)) Int 0)
(define-fun x349 ((x22 Int)) Int 0)
(define-fun x40 ((x22 Int)) Int (x314 x22))
(define-fun x192 ((x22 Int)) Int (x231 x22))
(define-fun x177 ((x22 Int)) Int (x475 x22))
(define-fun x9 ((x22 Int)) Int 0)
(define-fun x554 ((x22 Int)) Int (ite (= x22 x56) x25 (x40 x22)))
(define-fun x386 ((x22 Int)) Int (ite (= x235 x22) x360 (x554 x22)))
(define-fun x464 ((x22 Int)) Int (ite (= x3 x22) x160 (x319 x22)))
(define-fun x481 ((x22 Int)) Int (ite (= x22 416) 72464927124685711895252664195178772226123872012682517813167109100718830649344 (x527 x22)))
(define-fun x131 ((x22 Int)) Int (ite (and (>= x22 416) (< x22 448)) (x113 (- x22 416)) (x481 x22)))
(define-fun x176 ((x22 Int)) Int (ite x299 (x131 x22) (x481 x22)))
(define-fun x494 ((x22 Int)) Int (ite (= x156 x22) x139 (x176 x22)))
(define-fun x101 ((x22 Int)) Int (ite (= x214 x22) x121 (x494 x22)))
(define-fun x1 ((x22 Int)) Int (ite (= x486 x22) x484 (x101 x22)))
(define-fun x294 ((x22 Int)) Int (ite (= x22 x54) x568 (x1 x22)))
(define-fun x109 ((x22 Int)) Int (ite (= x28 x22) x185 (x294 x22)))
(define-fun x426 ((x22 Int)) Int (ite (= x22 x375) x141 (x35 x22)))
(define-fun x500 ((x22 Int)) Int (ite (= x22 x156) 93852497612052052172171342840208435377766735308355310630824731532202946330624 (x109 x22)))
(define-fun x110 ((x22 Int)) Int (ite (= x324 x22) x139 (x500 x22)))
(define-fun x11 ((x22 Int)) Int (ite (= x22 x488) 64 (x110 x22)))
(define-fun x243 ((x22 Int)) Int (ite (= x22 x85) x563 (x11 x22)))
(define-fun x480 ((x22 Int)) Int (ite (and (> (+ x455 x563) x22) (>= x22 x455)) (x408 (- (+ 324 x22) x455)) (x243 x22)))
(define-fun x345 ((x22 Int)) Int (ite (= x22 x86) 0 (x480 x22)))
(define-fun x148 ((x22 Int)) Int (ite x482 (x109 x22) (x345 x22)))
(define-fun x498 ((x22 Int)) Int (ite x446 (x35 x22) (x426 x22)))
(define-fun x419 ((x22 Int)) Int (ite (= x22 x541) x222 (x498 x22)))
(define-fun x561 ((x22 Int)) Int (ite x346 (x498 x22) (x419 x22)))
(define-fun x559 ((x22 Int)) Int (ite (= x22 x20) x358 (x561 x22)))
(define-fun x451 ((x22 Int)) Int (x559 x22))
(define-fun x211 ((x22 Int)) Int (ite (= x352 x22) x197 (x451 x22)))
(define-fun x424 ((x22 Int)) Int (ite (= x156 x22) x484 (x148 x22)))
(define-fun x388 ((x22 Int)) Int (ite (= x84 x22) x139 (x424 x22)))
(define-fun x326 ((x22 Int)) Int (ite (and (> 448 x22) (>= x22 416)) (x113 (- x22 416)) (x533 x22)))
(define-fun x219 ((x22 Int)) Int (ite (= x22 x58) x526 (x181 x22)))
(define-fun x230 ((x22 Int)) Int (ite (= x564 x22) x190 (x36 x22)))
(define-fun x530 ((x22 Int)) Int (ite (= x22 x225) x221 (x177 x22)))
(define-fun x510 ((x22 Int)) Int (ite (= x22 x458) x557 (x330 x22)))
(define-fun x255 ((x22 Int)) Int (ite (= x22 x201) x483 (x530 x22)))
(define-fun x210 ((x22 Int)) Int (ite (= x22 x106) x236 (x192 x22)))
(define-fun x292 ((x22 Int)) Int (ite (= x215 x22) x169 (x230 x22)))
(define-fun x55 ((x22 Int)) Int (ite (= x66 x22) 0 (x219 x22)))
(assert (x59 x269))
(assert (x65 57896044618658097711785492504343953926634999999999999999999))
(assert (= (x379 (x551 64 x437 2)) 2))
(assert (x59 x214))
(assert (= (x529 (x174 160 x316 x389 x274 x217 x286)) x274))
(assert (x59 x179))
(assert (x59 x391))
(assert (x59 x202))
(assert (= (x282 (+ 1 x232)) (x282 x232)))
(assert (x59 x506))
(assert (= (x542 (x551 64 x80 x476)) x80))
(assert (< (x551 64 x80 x517) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x59 x524))
(assert (x59 x99))
(assert (= (x282 x23) (x282 (+ x23 1))))
(assert (x59 x44))
(assert (x59 x63))
(assert (= x217 (x547 (x174 160 x316 x389 x274 x217 x286))))
(assert (x59 x190))
(assert (= x402 (and x469 x466)))
(assert (x59 x34))
(assert (x59 x503))
(assert (x59 x394))
(assert (= (x282 (+ x278 1)) (x282 x278)))
(assert (x59 x397))
(assert (x59 x139))
(assert (= 0 (x282 72464927124685711895252664195178772226123872012682517813167109100718830649344)))
(assert (x65 4294967296))
(assert (< 10000 (x551 64 x49 3)))
(assert (x65 3546984100))
(assert (= (x282 (+ x366 1)) (x282 x366)))
(assert (x59 x171))
(assert (= (x379 (x551 64 x437 3)) 3))
(assert (x59 x53))
(assert (x59 x519))
(assert (not (x65 (x551 64 x80 x400))))
(assert (not (x65 (x551 64 x80 x429))))
(assert (x59 x497))
(assert (= x429 (x379 (x551 64 x80 x429))))
(assert (< 10000 (x551 64 x80 x146)))
(assert (x59 x343))
(assert (x59 x162))
(assert (= (x282 (+ 1 x448)) (x282 x448)))
(assert (x59 x145))
(assert (x59 x253))
(assert (> (x174 160 x316 x389 x274 x217 x286) 10000))
(assert (= (x8 (x551 64 x80 x507)) 64))
(assert (x59 x108))
(assert (= (x282 (+ x228 1)) (x282 x228)))
(assert (=> (>= 10000 x417) (= 0 (x282 x417))))
(assert (= x316 (x542 (x174 160 x316 x389 x274 x217 x286))))
(assert (< (x551 64 x271 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x59 x412))
(assert (not (x65 (x551 64 x437 2))))
(assert (= x476 (x379 (x551 64 x80 x476))))
(assert (x65 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (= x19 (x379 (x551 64 x80 x19))))
(assert (> (x551 64 x80 x517) 10000))
(assert (= (x551 64 x440 3) (x282 (x551 64 x440 3))))
(assert (x59 x417))
(assert (x31 x325))
(assert (= (=> (and (or (not x491) (and (and (= (x293 (+ x455 x563)) x86) x64 (= x350 (x293 (+ x455 x189))) (= x50 (x386 x417)) (= (x538 115792089237316195423570985008687907853269984665640564039457584007913129639904 x492) x189) (= x385 (= x50 (x207 x417))) (= (x293 (+ 32 x85)) x455) (= x488 (x293 (+ x324 32))) (>= x373 1) x385 (= x85 (x293 (+ x324 64))) (>= x46 1) (= (x386 x235) x164) (= x324 (x293 (+ 4 x156))) (= x492 (+ 31 x563)) (= x64 (>= (x207 x235) x164)) (= (x465 x417) x373) (= (x166 (- x350 x156)) x524) (>= 4294967295 x226)) x491)) (= (< 0 x563) x491)) x328) x540))
(assert (not (x65 (x551 64 x440 3))))
(assert (x59 x4))
(assert (not (x65 (x551 64 x49 3))))
(assert (x59 x521))
(assert (x60 x492))
(assert (=> (<= x49 10000) (= 0 (x282 x49))))
(assert (= 64 (x8 (x551 64 x49 3))))
(assert (x59 x579))
(assert (= x80 (x542 (x551 64 x80 x507))))
(assert (x59 x261))
(assert (x59 x258))
(assert (= (x542 (x551 64 x271 3)) x271))
(assert (x59 x359))
(assert (x59 x272))
(assert (x59 x212))
(assert (x68 x492))
(assert (not (x65 (x174 160 x316 x389 x274 x217 x286))))
(assert (x59 x393))
(assert (x250 x322))
(assert (x31 x10))
(assert (x59 x300))
(assert (x59 x104))
(assert (= (x8 (x551 64 x80 x517)) 64))
(assert (x485 1150000000000000000 x580))
(assert (> (x551 64 x271 3) 10000))
(assert (< (x174 160 x316 x389 x274 x217 x286) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x59 x563))
(assert (x485 x546 x325))
(assert (x59 x73))
(assert (= (x8 (x551 64 x80 x429)) 64))
(assert (x59 x87))
(assert (= (x8 (x551 64 x271 3)) 64))
(assert (= (and (not x116) x338) x438))
(assert (= (x282 x512) (x282 (+ 1 x512))))
(assert (= (x282 93852497612052052172171342840208435377766735308355310630824731532202946330624) 0))
(assert (x59 x392))
(assert (x59 x204))
(assert (= (or x299 x357) x338))
(assert (x59 x28))
(assert (= x447 (and x187 x491)))
(assert (= x437 (x542 (x551 64 x437 3))))
(assert (= x482 (and (not x491) x187)))
(assert (> (x551 64 x80 x400) 10000))
(assert (= (x542 (x551 64 x80 x517)) x80))
(assert (x65 72464927124685711895252664195178772226123872012682517813167109100718830649344))
(assert (x59 x581))
(assert (= x361 (=> (and (and (= x267 x573) (= (= x235 x573) x469)) (or (and x469 (and (= x543 x541) (= (x498 x157) x415) (<= x222 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x415) (<= (- 340282366920938463463374607431768211455) x415) (= x150 x457) (= x222 x158) (<= 0 x222) (= x222 (+ x415 x457)) (= x157 x543) x469)) (and (not x469) (and (= true x209) (not x469))))) x540)))
(assert (= (x282 57896044618658097711785492504343953926975274699741220483192166611388334031421) 0))
(assert (= (x379 (x551 64 x80 x517)) x517))
(assert (x65 115792089237316195423570985008687907853269984665640564039457584007913129639903))
(assert (=> (= x427 0) (= (div (+ x77 x347) x427) 0)))
(assert (x59 x276))
(assert (x59 x513))
(assert (=> (<= x217 10000) (= (x282 x217) 0)))
(assert (x65 2777397322))
(assert (= (x282 (x551 64 x49 3)) (x551 64 x49 3)))
(assert (x59 x302))
(assert (< (x551 64 x80 x400) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x59 x453))
(assert (= x286 (x313 (x174 160 x316 x389 x274 x217 x286))))
(assert (= 64 (x8 (x551 64 x80 x19))))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x551 64 x49 3)))
(assert (x65 4294967620))
(assert (x59 x403))
(assert (= (x379 (x551 64 x49 3)) 3))
(assert (x31 x580))
(assert (x59 x233))
(assert (not (x65 (x551 64 x80 x146))))
(assert (x59 x15))
(assert (= 0 (x282 1150000000000000000)))
(assert (< 10000 (x551 64 x80 x507)))
(assert (x59 x427))
(assert (x59 x226))
(assert (x59 x56))
(assert (= (x282 4294967620) 0))
(assert (x59 x10))
(assert (x59 x323))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x551 64 x437 3)))
(assert (= (x8 (x551 64 x80 x400)) 64))
(assert (x485 x546 x122))
(assert (= (x542 (x551 64 x437 2)) x437))
(assert (x59 x443))
(assert (x59 x80))
(assert (x59 x160))
(assert (x59 x100))
(assert (x59 x136))
(assert (= (and (not x127) x206) x446))
(assert (= (x282 115792089237316195423570985008687907853269984665640564039457584007913129639935) 0))
(assert (= (x282 x574) (x282 (+ 1 x574))))
(assert (x59 x50))
(assert (= (x282 (x551 64 x271 3)) (x551 64 x271 3)))
(assert (x59 x369))
(assert (x59 x249))
(assert (x59 x203))
(assert (x59 x309))
(assert (x59 x194))
(assert (x59 x248))
(assert (x59 x256))
(assert (= (x282 x128) (x282 (+ x128 1))))
(assert (x59 x183))
(assert (= (x282 340282366920938463463374607431768211456) 0))
(assert (=> (>= 10000 x80) (= 0 (x282 x80))))
(assert (x59 x535))
(assert (x59 x522))
(assert (=> (<= x271 10000) (= (x282 x271) 0)))
(assert (= (x282 x71) (x282 (+ x71 1))))
(assert (x65 340282366920938463463374607431768211456))
(assert (x59 x321))
(assert (x65 57896044618658097711785492504343953926975274699741220483192166611388334))
(assert (x65 340282366920938463463374607431768211455))
(assert (x59 x306))
(assert (x59 x572))
(assert (x59 x208))
(assert (x65 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (x59 x142))
(assert (=> (>= 10000 x235) (= (x282 x235) 0)))
(assert (= (x551 64 x80 x517) (x282 (x551 64 x80 x517))))
(assert (=> (= 0 x519) (= 0 (div x329 x519))))
(assert (= (x8 (x551 64 x437 3)) 64))
(assert (= 0 (x282 2777397322)))
(assert (=> (>= 10000 x286) (= 0 (x282 x286))))
(assert (x59 x169))
(assert (x59 x237))
(assert (x59 x133))
(assert (= (x282 (x551 64 x80 x507)) (x551 64 x80 x507)))
(assert (< 10000 (x551 64 x440 3)))
(assert (x59 x577))
(assert (x59 x88))
(assert (not (x65 (x551 64 x80 x476))))
(assert (x59 x288))
(assert (x31 x122))
(assert (= (x282 1000000) 0))
(assert (x485 1150000000000000000 x10))
(assert (= (x282 (+ x149 2)) (x282 x149)))
(assert (x59 x103))
(assert (= (x282 300000000000000000) 0))
(assert (x59 x552))
(assert (x65 1461501637330902918203684832716283019655932542975))
(assert (< (x551 64 x80 x476) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x59 x455))
(assert (x59 x170))
(assert (= (x282 134217728) 0))
(assert (=> (<= x316 10000) (= 0 (x282 x316))))
(assert (= (x8 (x174 160 x316 x389 x274 x217 x286)) 160))
(assert (x59 x479))
(assert (= (x282 (+ 1 x501)) (x282 x501)))
(assert (=> (>= 10000 x440) (= 0 (x282 x440))))
(assert (x59 x291))
(assert (x59 x244))
(assert (< 10000 (x551 64 x80 x476)))
(assert (=> (<= x56 10000) (= 0 (x282 x56))))
(assert (x59 x315))
(assert (= (x282 x414) (x282 (+ 1 x414))))
(assert (= (x282 x6) (x282 (+ 1 x6))))
(assert (= (x282 x130) (x282 (+ 1 x130))))
(assert (x65 1150000000000000000))
(assert (= 0 (x282 302132921)))
(assert (x59 x363))
(assert (x59 x420))
(assert (x65 134217728))
(assert (x59 x52))
(assert (x59 x377))
(assert (x59 x382))
(assert (x60 x322))
(assert (not (x65 (x551 64 x80 x507))))
(assert (x65 1000000))
(assert (not (x65 (x551 64 x80 x517))))
(assert (=> (<= x87 10000) (= 0 (x282 x87))))
(assert (x59 x236))
(assert (not (x65 (x551 64 x437 3))))
(assert (x65 302132921))
(assert (x59 x450))
(assert (= (x542 (x551 64 x440 3)) x440))
(assert (= (x282 x126) (x282 (+ x126 1))))
(assert (x59 x477))
(assert (= 0 (x282 57896044618658097711785492504343953926975274699741220483192166611388334)))
(assert (x250 x143))
(assert (x65 181336955))
(assert (x59 x373))
(assert (= (x282 340282366920938463463374607431768211454) 0))
(assert (x59 x432))
(assert (x59 x86))
(assert (= (x282 115792089237316195423570985008687907853269984665640564039457584007913129639904) 0))
(assert (x59 x413))
(assert (x59 x180))
(assert (> (x551 64 x80 x429) 10000))
(assert (x59 x107))
(assert (x65 300000000000000000))
(assert (= (=> (and (and (= x572 (x330 x161)) (= (x551 64 x80 x146) x23) (= (div x329 x519) x484) (= (+ x130 1) x564) (= (x551 64 x437 3) x512) (>= x570 1) (>= 340282366920938463463374607431768211455 x433) (= x225 (+ 1 x126)) (>= 340282366920938463463374607431768211455 x53) (= (- 1000000000000000000 x336) x435) (= x311 (+ x436 1)) (>= 57896044618658097711785492504343953926975274699741220483192166611388334031421 x393) (= x291 (x181 x58)) (= x172 (div x184 1000000000000000000)) (= (+ 1 x23) x161) (>= x291 1) (= x312 1000000000000000000) (= x507 (x551 64 x437 2)) (= x233 (div x570 x413)) (<= 0 x532) (<= 1000000 x393) (<= 0 x213) (= x123 (x181 x239)) (= x423 (x307 1150000000000000000 x10)) (= (* x497 x111) x532) (= x429 (x551 64 x437 2)) (< (* x423 x233) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= (x551 64 x437 2) x19) (= x336 (x205 256)) (= (div x393 x145) x395) (not (< x145 x88)) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x532) (= x88 (- x145 1)) (= 1000000000000000000 x120) (= (x551 64 x437 3) x436) (= x522 (x36 x564)) (<= x392 340282366920938463463374607431768211455) (= x208 1000000000000000000000000000000000000) (= x413 (+ x397 1000000)) (= x392 (x177 x351)) (<= x123 340282366920938463463374607431768211455) (= (+ x545 1) x467) (= 1000000000000000000 x140) (<= x570 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 340282366920938463463374607431768211455 x522) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x186) (>= x519 1) (= x228 (x551 64 x80 x476)) (= (+ x200 1) x407) (= (* x121 x394) x186) (= x239 (+ 1 x134)) (= x145 (+ 1000000 x433)) (= x200 (x551 64 x437 3)) (= (+ x489 1) x220) (>= 340282366920938463463374607431768211455 x237) (>= 340282366920938463463374607431768211455 x291) (>= 340282366920938463463374607431768211455 x318) (= x501 (x551 64 x437 3)) (= x526 (x166 (- x291 x121))) (<= 1 x186) (>= x337 0) (= x6 (x551 64 x80 x507)) (<= x572 340282366920938463463374607431768211455) (= x458 (+ 1 x228)) (>= x277 0) (= x142 (+ x133 1000000)) (= x130 (x551 64 x437 3)) (>= 57896044618658097711785492504343953926634999999999999999999 x277) (= (x551 64 x80 x19) x128) (not (> x552 x142)) (= x434 (x551 64 x437 3)) (= x476 (x551 64 x437 2)) (= (x551 64 x437 2) x146) (< x241 x395) (= x497 (x205 256)) (>= 340282366920938463463374607431768211455 x221) (= x351 (+ x434 1)) (= x460 (+ x512 1)) (= x579 1000000000000000000000000000000000000) (= (x166 (- x180 x484)) x557) (= x552 (- x142 1)) (= x237 (x177 x467)) (= (+ 1 x392) x394) (<= 1 x522) (= x124 1000000000000000000) (= x565 300000000000000000) (= (x166 (- x522 x121)) x190) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x213) (= (* x435 300000000000000000) x184) (= x134 (x551 64 x80 x429)) (= x126 (x551 64 x437 3)) (>= 57896044618658097711785492504343953926975274699741220483192166611388334 x395) (= (* x121 x340) x570) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x572 x519)) (<= x520 340282366920938463463374607431768211455) (= x53 (x177 x311)) (>= x444 1) (= x393 (+ x88 x213)) (= 0 x136) (= x545 (x551 64 x437 3)) (= x139 (div (+ x552 x186) x142)) (= (x330 x458) x180) (= (x510 x493) x318) (= x213 (* x506 x123)) (= x503 1150000000000000000) (= x489 (x551 64 x437 3)) (= (x326 416) x519) (= x10 (* (ite (> 1150000000000000000 x580) 1 0) (x307 1150000000000000000 x580))) (= (* x519 x572) x337) (<= x337 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 340282366920938463463374607431768211454 x526) (= x221 (* x411 (ite (< x139 x520) 1 0))) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x111 x497)) (= (+ x6 1) x493) (= (x36 x460) x133) (= x241 (div x532 1000000000000000000)) (= (x177 x407) x520) (= x433 (x36 x252)) (= (= x318 0) x116) (<= x190 340282366920938463463374607431768211454) (= x45 (- 1000000000000000000 x172)) (= 1000000000000000000 x234) (= x506 (+ x53 1)) (<= x397 340282366920938463463374607431768211455) (= x58 (+ 1 x128)) (>= 340282366920938463463374607431768211455 x180) (= (x166 (- x520 x139)) x411) (<= 1 x395) (>= 340282366920938463463374607431768211455 x557) (= (div 1000000000000000000000000000000000000 x45) x580) (>= 340282366920938463463374607431768211455 x484) (<= x336 1000000000000000000) (<= x133 340282366920938463463374607431768211455) (= (x36 x220) x397) (= (+ x237 1) x340) (= (div x337 1000000000000000000000000000000000000) x111) (= x272 (div x277 1000000000000000000)) (= (* x233 x423) x277) (= (+ 1 x501) x252) (= (* x272 1000000000000000000000000000000000000) x329)) (or (and (and (not (< x427 x77)) (= x517 (x551 64 x437 2)) (= x574 (x551 64 x437 3)) (= x427 (+ x194 1000000)) (= x77 (- x427 1)) (= x256 x185) (>= 340282366920938463463374607431768211455 x546) (= x236 (x166 (- x104 x103))) (= (+ 1 x366) x66) (>= 340282366920938463463374607431768211455 x122) (= (x530 x201) x452) (= x546 (x530 x422)) (= x325 (div (+ x77 x347) x427)) (= (x551 64 x437 3) x71) (= x104 (x192 x106)) (<= x483 340282366920938463463374607431768211455) (>= 340282366920938463463374607431768211455 x194) (= x366 (x551 64 x80 x517)) (= (x551 64 x437 3) x278) (>= 340282366920938463463374607431768211455 x198) (= (x307 x546 x122) x103) (= x422 (+ x232 1)) (>= 340282366920938463463374607431768211455 x236) (= (+ x560 1) x478) (= x347 (* x442 x256)) (= (x230 x16) x194) (= x256 (x219 x478)) (= x232 (x551 64 x437 3)) (>= 340282366920938463463374607431768211455 x104) (= x483 (x166 (- x452 x103))) (= (x551 64 x437 3) x106) (<= x169 340282366920938463463374607431768211455) (<= x256 340282366920938463463374607431768211455) (= (x230 x215) x198) (>= 340282366920938463463374607431768211455 x363) (= (x551 64 x80 x400) x560) (= x448 (x551 64 x437 3)) (= (+ x448 1) x201) (= x568 x103) (= (+ 1 x574) x215) (= (+ 1 x71) x16) (= x400 (x551 64 x437 2)) (>= x347 0) (>= 340282366920938463463374607431768211455 x452) (= x363 (x530 x97)) (= (* (ite (< x325 x546) 1 0) (x307 x546 x325)) x122) (<= x347 57896044618658097711785492504343953926634992332820282019728792003956564819967) (= x442 (+ 1 x363)) (= (x166 (- x198 x256)) x169) (= (+ 1 x278) x97) (= 960 x156)) x116) (and (and (= 768 x156) (= 0 x185) (= 0 x568)) (not x116)))) x129) x238))
(assert (x60 x143))
(assert (x59 x325))
(assert (=> (= 0 x413) (= 0 (div x570 x413))))
(assert (= (x282 (+ 1 x434)) (x282 x434)))
(assert (x59 x435))
(assert (< 10000 (x551 64 x80 x19)))
(assert (x59 x165))
(assert (x59 x124))
(assert (x59 x372))
(assert (= (x282 3639262392) 0))
(assert (x65 1000000000000000000000000000000000000))
(assert (= (x282 x545) (x282 (+ 1 x545))))
(assert (x59 x360))
(assert (x59 x221))
(assert (= (x282 x436) (x282 (+ x436 1))))
(assert (x59 x509))
(assert (x59 x484))
(assert (= 0 (x282 1461501637330902918203684832716283019655932542975)))
(assert (x59 x54))
(assert (= (x282 x200) (x282 (+ 1 x200))))
(assert (x59 x21))
(assert (not (x65 (x551 64 x80 x19))))
(assert (= x357 (and (not x473) x182)))
(assert (x31 1150000000000000000))
(assert (x59 x118))
(assert (x59 x483))
(assert (x59 x557))
(assert (= (x282 (+ x310 2)) (x282 x310)))
(assert (= (or x438 x168) x206))
(assert (x59 x528))
(assert (x59 x47))
(assert (= (x282 1000000000000000000000000000000000000) 0))
(assert (x59 x164))
(assert (= (and x338 x116) x168))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x551 64 x80 x19)))
(assert (x59 x312))
(assert (x59 x46))
(assert (= (x379 (x551 64 x80 x400)) x400))
(assert (x59 x185))
(assert (x31 x546))
(assert (x59 x340))
(assert (x59 x140))
(assert (x59 x172))
(assert (< (x551 64 x440 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x59 x49))
(assert (= 64 (x8 (x551 64 x80 x146))))
(assert (= x182 true))
(assert (< (x551 64 x80 x146) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x59 x13))
(assert (x59 x156))
(assert (x59 x398))
(assert (= (x551 64 x80 x400) (x282 (x551 64 x80 x400))))
(assert (x59 x437))
(assert (x59 x531))
(assert (x59 x284))
(assert (x59 x486))
(assert (x59 x26))
(assert (x59 x399))
(assert (x59 x348))
(assert (x59 x350))
(assert (= (x282 (+ 1 x560)) (x282 x560)))
(assert (x59 x32))
(assert (< 10000 (x551 64 x437 3)))
(assert (x65 93852497612052052172171342840208435377766735308355310630824731532202946330624))
(assert (< (x551 64 x437 2) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (x542 (x551 64 x80 x146)) x80))
(assert (x60 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (= 3 (x379 (x551 64 x271 3))))
(assert (x65 57896044618658097711785492504343953926975274699741220483192166611388334031421))
(assert (x59 x433))
(assert (x59 x536))
(assert (= (x551 64 x80 x146) (x282 (x551 64 x80 x146))))
(assert (= (x282 57896044618658097711785492504343953926634992332820282019728792003956564819967) 0))
(assert (x59 x105))
(assert (not x90))
(assert (= x49 (x542 (x551 64 x49 3))))
(assert (x59 x298))
(assert (= (x282 1000000000000000000) 0))
(assert (x59 x444))
(assert (x59 x474))
(assert (x59 x440))
(assert (= (or x402 x346) x187))
(assert (x59 x286))
(assert (= x346 (and x466 (not x469))))
(assert (x59 x39))
(assert (= (or x76 x446) x466))
(assert (x59 x565))
(assert (= (x282 (x551 64 x80 x19)) (x551 64 x80 x19)))
(assert (x59 x246))
(assert (x59 x502))
(assert (x59 x271))
(assert (x60 x306))
(assert (x59 x234))
(assert (= (x8 (x551 64 x80 x476)) 64))
(assert (= (and x127 x206) x76))
(assert (x59 x322))
(assert (x59 x452))
(assert (x59 x198))
(assert (= 0 (x282 181336955)))
(assert (= (not (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x289) (= false x370) (= x418 x358) (= x43 (= x24 x235)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x197) (= true x454) (<= x156 115792089237316195423570985008687907853269984665640564039457584007913129639903) (= x251 x378) (= x302 (x388 x156)) (<= x341 115792147133360814081668696794180412197223911640915263780678067200079741028269) (= (x472 128) x143) (<= 0 x358) (= x456 true) x43 (= x380 x20) (= false x430) (= x511 x270) (<= x156 115792089237316195423570985008687907853269984665640564039457584007913129639903) (= x417 x270) (= x39 (x538 1461501637330902918203684832716283019655932542975 x143)) (= false x566) x43 (= false x29) (= x197 (+ x251 x289)) (= x75 x197) (= false x459) (= x275 0) x327 (= x327 (= x511 x235)) (= x535 (x388 x479)) (= x535 x387) (<= 1 x535) (<= 0 x197) (= true x137) (= x235 x544) (= x139 x378) (= x380 x39) (= x479 (x293 (+ x156 32))) (= x380 x352) (>= x302 1) (= x380 x514) (= (x561 x514) x341) (= x449 false) (= x378 x575) x327 (= x235 x365) (= x289 (x451 x569)) (= x57 x302) (<= (- 57896044618658097711785492504343953926975274699741220483192166611388334) x289) (= x240 false) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x358) (= x569 x380) (= (x293 (+ x156 32)) x84) (= x24 x384) (>= x341 0) (= x384 x235) (= x37 0) (= (- x341 x575) x358))) x328))
(assert (x59 x235))
(assert (x59 x492))
(assert (x65 4294967295))
(assert (x59 x395))
(assert (= 3 (x379 (x551 64 x440 3))))
(assert (> (x551 64 x437 2) 10000))
(assert (= (x282 (+ 1 x134)) (x282 x134)))
(assert (=> (<= x437 10000) (= (x282 x437) 0)))
(assert (= (x8 (x551 64 x440 3)) 64))
(assert (= 0 (x282 4294967295)))
(assert (= x129 (=> (and (or (and (and (not x127) (= x518 true)) (not x127)) (and (and (<= 0 x141) (<= x218 115792089237316195423570985008687907853610267032561502502920958615344897851390) (= x543 x375) (= x30 x141) (= (- x218 x135) x141) (<= x141 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x218 (x35 x571)) (= x543 x571) x127 (<= 0 x218) (= x150 x135)) x127)) (and (= x267 x417) (= (x538 1461501637330902918203684832716283019655932542975 x322) x382) (= x543 x382) (= (x293 (+ x486 32)) x54) (= x127 (= x235 x280)) (= x235 x367) (= x263 x280) (= x235 x263) (= x322 (x67 160)) (= x235 x191) (= x235 x153) (= x484 x150) (= x486 (x293 (+ x214 32))) (= x214 (x293 (+ x156 32))) (= (x293 (+ x54 32)) x28))) x361)))
(assert (x250 x306))
(assert (x59 x324))
(assert (x59 x84))
(assert (= x80 (x542 (x551 64 x80 x19))))
(assert (= (x282 (+ 2 x499)) (x282 x499)))
(assert (x59 x121))
(assert (x59 x411))
(assert (= (x282 (x551 64 x80 x476)) (x551 64 x80 x476)))
(assert (x59 x526))
(assert (=> (= 0 x145) (= (div x393 x145) 0)))
(assert (x59 x462))
(assert (x60 1461501637330902918203684832716283019655932542975))
(assert (= x317 (or x447 x482)))
(assert (x59 x25))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x551 64 x80 x429)))
(assert (x59 x546))
(assert (x59 x362))
(assert (x59 x318))
(assert (x59 x241))
(assert (x59 x523))
(assert (x65 340282366920938463463374607431768211454))
(assert (= x146 (x379 (x551 64 x80 x146))))
(assert (x59 x423))
(assert (x59 x77))
(assert (x59 x257))
(assert (= (=> (and (or (and (not x473) (= x444 x162)) (and (and (<= x432 4294967295) (= x444 1) (>= x432 32)) x473)) (and (= x536 x80) (= (x69 192) x391) (= x437 (x553 480)) (= x563 (x408 292)) (= (x331 x235) x99) (= (* x308 32) x303) (<= x94 x303) (= x160 x167) (= x353 x80) (= x49 x100) (= false x539) (= x149 (x551 64 x437 3)) (= x171 x279) (= x235 x273) (>= 127 x300) (= (x67 160) x178) (>= x567 0) (= x121 x398) (= x523 (x472 128)) (>= 1461501637330902918203684832716283019655932542975 x320) (= x374 x15) (<= x235 1461501637330902918203684832716283019655932542975) (>= 127 x453) (= 36 x98) (>= x235 1) (= x344 false) (= x264 x371) (= x268 false) (= (x174 160 x316 x389 x274 x217 x286) x558) (<= x453 127) (= 164 x13) (= x271 x179) (not (> x531 x202)) (>= x405 1) (= x353 x309) (= x477 x320) (= x4 (+ x303 324)) (= (+ x310 2) x3) (= x355 false) (>= 340282366920938463463374607431768211455 x199) (= x416 false) (<= x288 127) (= (= x167 x246) x96) (= x297 x417) (= x463 (+ 2 x499)) (= x287 0) (<= x165 127) (= x107 x81) (= 0 x513) (>= x528 1) (= x33 x286) (<= x147 1461501637330902918203684832716283019655932542975) (= x79 x296) (= x102 false) (= x175 x417) (= x26 3639262392) (<= x118 1461501637330902918203684832716283019655932542975) (= x254 false) (>= 4294967296 x563) (= x360 x34) (= (* 32 (- x308 1)) x335) (= x342 false) (>= 1461501637330902918203684832716283019655932542975 x175) (>= 4294967620 x202) (= x439 x550) (= false x2) (= x333 false) (= x42 x550) (<= 0 x279) (= (= 0 x52) x428) (= x175 x87) (<= 0 x439) (>= x193 0) x163 (>= 340282366920938463463374607431768211455 x95) (= x305 x229) (<= x52 340282366920938463463374607431768211455) (= x323 (x465 x235)) (= x33 x212) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x516) (= false x245) (<= x288 127) (= x487 false) (= x38 x108) (= x474 x217) (= x409 340282366920938463463374607431768211456) (= x306 (x69 192)) (= x389 x178) (= x389 x462) (= x531 (+ 324 x563)) (= 302132921 x443) (= x441 x401) (= x144 false) (= (x538 1461501637330902918203684832716283019655932542975 x306) x195) (= x224 x258) (<= 1 x581) (>= x332 0) (= x321 x99) (= x121 x374) (>= x199 1) (= x105 (x472 128)) (= x377 x279) (>= x359 1) (not x290) (<= x229 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x554 x235) x34) (= x253 68) (>= 1461501637330902918203684832716283019655932542975 x279) (= x95 x115) (= x414 (x551 64 x440 3)) (= (x465 x235) x581) (>= x224 0) (= x523 x549) (= x79 x193) (>= 340282366920938463463374607431768211455 x421) (= x441 x567) (= x216 x63) (= x7 false) (= x47 x61) (>= x431 0) (= x359 (x465 x235)) (>= x308 0) (= x147 x404) (= x274 x248) (>= x95 0) (>= x421 1) (= x93 false) (= (x390 x87) x204) (= (x475 x425) x52) (= x290 (and x125 x468)) (= (x67 160) x107) (= false x138) (= x159 x235) (= x468 (not x96)) (= (x69 192) x47) (= x21 x94) (= x508 0) (= x212 (x205 256)) (>= 4294967295 x21) (= x281 0) (<= x300 127) (= 2777397322 x261) (<= x432 57896044618658097711785492504343953926634992332820282019728792003956564819967) (= x56 x262) (<= x178 1461501637330902918203684832716283019655932542975) (= x274 x391) (= 181336955 x399) (= x295 false) (<= 0 x229) (<= x92 1461501637330902918203684832716283019655932542975) (= x262 x297) (< x335 x94) (>= x323 1) (= x70 x332) (<= x567 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x25 (x40 x56)) (= x100 x437) (<= 0 x38) (= x41 false) (= x202 x4) (= (x465 x235) x405) (= x534 (+ 2 x149)) (= x353 x14) (= x118 x217) (= x105 x316) (= true x334) (= x298 288) (>= 127 x244) (= x257 x471) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x332) (<= x14 1461501637330902918203684832716283019655932542975) (= x118 (x89 224)) (<= 0 x14) (<= x308 134217728) (= x440 x100) (= (x89 224) x257) (<= x193 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x72 x224) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x431) (= (x319 x463) x246) (= (x205 256) x63) (= false x112) (>= x432 32) (= x577 1) (= x188 false) (= x412 416) (= x223 false) (<= 0 x371) (<= x224 1461501637330902918203684832716283019655932542975) (<= x371 1461501637330902918203684832716283019655932542975) (= (+ 1 x414) x425) (= x374 x199) (= x369 128) (= x170 x92) (>= 127 x244) (= x38 x450) (= true x562) (>= x175 0) (<= 0 x320) (= x310 (x551 64 x271 3)) (= false x151) (= x5 x70) (not x290) (= x259 false) (= (< 0 (x465 x235)) x163) (= x271 x100) (= x167 x115) (= x12 x404) (<= 0 x147) (= 0 x502) (= x578 x305) (>= x202 324) (= x343 x49) (>= 127 x165) (= false x339) (= x44 x316) (= x499 (x551 64 x49 3)) (= x125 (not x428)) (= x196 false) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x439) (>= x92 0) (= x320 x276) (<= x105 1461501637330902918203684832716283019655932542975) (= (x465 x235) x528) (= 0 x48) (= x92 x420) (= x264 x119) (= 0 x354) (<= x38 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (< 0 x162) x473) (<= 0 x516) (= 36 x249) (>= 1461501637330902918203684832716283019655932542975 x391) (= x284 x440) (<= x246 340282366920938463463374607431768211455) (= (x319 x534) x421) (= false x495) (= x509 3546984100))) x238) x90))
(assert (= (x282 (+ x489 1)) (x282 x489)))
(assert (= x507 (x379 (x551 64 x80 x507))))
(assert (=> (= x142 0) (= (div (+ x552 x186) x142) 0)))
(assert (x59 x98))
(assert (= (x551 64 x80 x429) (x282 (x551 64 x80 x429))))
(assert (x59 x123))
(assert (x59 x45))
(assert (x59 x122))
(assert (= (and x182 x473) x299))
(assert (x59 x85))
(assert (= (x379 (x174 160 x316 x389 x274 x217 x286)) x389))
(assert (x59 x195))
(assert (x65 57896044618658097711785492504343953926634992332820282019728792003956564819967))
(assert (x59 x17))
(assert (= 0 (x282 340282366920938463463374607431768211455)))
(assert (x59 x405))
(assert (x65 1000000000000000000))
(assert (=> (>= 10000 x274) (= 0 (x282 x274))))
(assert (x59 x421))
(assert (not (x65 (x551 64 x271 3))))
(assert (x59 x189))
(assert (= (x174 160 x316 x389 x274 x217 x286) (x282 (x174 160 x316 x389 x274 x217 x286))))
(assert (= (x8 (x551 64 x437 2)) 64))
(assert (= (x551 64 x437 3) (x282 (x551 64 x437 3))))
(assert (x59 x442))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x551 64 x80 x507)))
(assert (x59 x111))
(assert (x59 x336))
(assert (x59 x120))
(assert (x59 x376))
(assert (x59 x178))
(assert (x59 x568))
(assert (= 0 (x282 4294967296)))
(assert (= (x282 57896044618658097711785492504343953926634999999999999999999) 0))
(assert (= 0 (x282 115792089237316195423570985008687907853269984665640564039457584007913129639903)))
(assert (=> (= 0 x45) (= 0 (div 1000000000000000000000000000000000000 x45))))
(assert (=> (>= 10000 x389) (= (x282 x389) 0)))
(assert (x65 3639262392))
(assert (= x80 (x542 (x551 64 x80 x400))))
(assert (x59 x488))
(assert (= (x542 (x551 64 x80 x429)) x80))
(assert (= (x282 (x551 64 x437 2)) (x551 64 x437 2)))
(assert (x59 x520))
(assert (= 0 (x282 3546984100)))
(assert (x59 x580))
(assert (x59 x143))
(assert (x59 x72))
(assert (x59 x152))
(check-sat)
(exit)
