(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Certora
Generated on: 2024-04-10
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x350 () Bool)
(declare-fun x160 (Int) Int)
(declare-fun x137 () Int)
(declare-fun x170 () Int)
(declare-fun x309 () Int)
(declare-fun x142 () Bool)
(declare-fun x346 () Int)
(declare-fun x254 () Bool)
(declare-fun x369 () Int)
(declare-fun x22 () Int)
(declare-fun x261 () Int)
(declare-fun x345 () Int)
(declare-fun x293 () Bool)
(declare-fun x84 () Int)
(declare-fun x28 () Int)
(declare-fun x1 () Int)
(declare-fun x282 () Bool)
(declare-fun x301 (Int) Int)
(declare-fun x59 () Int)
(declare-fun x55 () Int)
(declare-fun x165 () Int)
(declare-fun x354 () Int)
(declare-fun x27 () Int)
(declare-fun x232 () Int)
(declare-fun x71 () Int)
(declare-fun x38 (Int) Int)
(declare-fun x296 () Bool)
(declare-fun x324 () Int)
(declare-fun x231 () Int)
(declare-fun x330 () Bool)
(declare-fun x68 () Int)
(declare-fun x39 () Int)
(declare-fun x116 () Bool)
(declare-fun x155 () Int)
(declare-fun x150 () Int)
(declare-fun x139 () Int)
(declare-fun x45 () Int)
(declare-fun x219 () Int)
(declare-fun x20 () Int)
(declare-fun x86 () Int)
(declare-fun x114 (Int) Int)
(declare-fun x21 () Int)
(declare-fun x172 () Int)
(declare-fun x302 () Int)
(declare-fun x193 () Int)
(declare-fun x276 () Bool)
(declare-fun x250 (Int) Int)
(declare-fun x339 () Int)
(declare-fun x327 () Int)
(declare-fun x294 () Bool)
(declare-fun x363 () Int)
(declare-fun x353 () Bool)
(declare-fun x115 () Bool)
(declare-fun x365 () Int)
(declare-fun x286 () Int)
(declare-fun x360 () Int)
(declare-fun x49 () Int)
(declare-fun x37 () Int)
(declare-fun x214 () Bool)
(declare-fun x124 () Int)
(declare-fun x176 () Bool)
(declare-fun x98 () Int)
(declare-fun x253 (Int) Int)
(declare-fun x29 () Bool)
(declare-fun x213 () Int)
(declare-fun x91 () Int)
(declare-fun x48 () Bool)
(declare-fun x140 () Bool)
(declare-fun x351 () Int)
(declare-fun x83 () Bool)
(declare-fun x342 () Int)
(declare-fun x31 () Int)
(declare-fun x88 (Int) Int)
(declare-fun x274 () Int)
(declare-fun x358 () Int)
(declare-fun x303 (Int) Int)
(declare-fun x249 (Int Int) Int)
(declare-fun x157 (Int) Int)
(declare-fun x305 () Int)
(declare-fun x298 () Int)
(declare-fun x7 (Int) Int)
(declare-fun x201 () Int)
(declare-fun x19 () Bool)
(declare-fun x237 () Int)
(declare-fun x283 () Int)
(declare-fun x260 () Bool)
(declare-fun x112 () Int)
(declare-fun x189 () Bool)
(declare-fun x316 () Int)
(declare-fun x65 () Int)
(declare-fun x197 () Int)
(declare-fun x104 () Int)
(declare-fun x311 () Bool)
(declare-fun x72 () Bool)
(declare-fun x152 () Int)
(declare-fun x314 () Bool)
(declare-fun x6 () Int)
(declare-fun x244 () Int)
(declare-fun x195 () Bool)
(declare-fun x129 () Bool)
(declare-fun x168 () Int)
(declare-fun x228 () Int)
(declare-fun x153 () Int)
(declare-fun x94 (Int Int Int) Int)
(declare-fun x147 () Int)
(declare-fun x90 () Int)
(declare-fun x262 () Int)
(declare-fun x43 () Int)
(declare-fun x356 () Bool)
(declare-fun x40 (Int) Int)
(declare-fun x159 () Int)
(declare-fun x2 () Int)
(declare-fun x41 () Int)
(declare-fun x278 () Int)
(declare-fun x230 () Int)
(declare-fun x190 () Int)
(declare-fun x239 () Int)
(declare-fun x326 () Int)
(declare-fun x164 (Int) Int)
(declare-fun x259 () Int)
(declare-fun x370 () Int)
(declare-fun x73 () Int)
(declare-fun x8 () Int)
(declare-fun x310 () Int)
(declare-fun x183 () Bool)
(declare-fun x329 () Int)
(declare-fun x97 () Int)
(declare-fun x107 () Int)
(declare-fun x47 () Int)
(declare-fun x304 () Bool)
(declare-fun x62 () Bool)
(declare-fun x362 () Bool)
(declare-fun x95 () Int)
(declare-fun x134 () Int)
(declare-fun x257 (Int) Int)
(declare-fun x242 () Int)
(declare-fun x177 () Int)
(declare-fun x169 (Int) Int)
(declare-fun x222 () Int)
(declare-fun x332 (Int) Int)
(declare-fun x99 () Int)
(declare-fun x288 () Int)
(declare-fun x111 () Bool)
(declare-fun x368 (Int) Int)
(declare-fun x75 () Bool)
(declare-fun x80 () Int)
(declare-fun x148 () Int)
(declare-fun x238 () Int)
(declare-fun x269 () Int)
(declare-fun x58 () Int)
(declare-fun x233 () Int)
(declare-fun x208 () Bool)
(declare-fun x173 () Int)
(declare-fun x225 () Int)
(declare-fun x297 () Int)
(declare-fun x241 () Bool)
(declare-fun x30 () Int)
(declare-fun x89 () Int)
(declare-fun x10 (Int) Int)
(declare-fun x252 () Int)
(declare-fun x306 (Int) Bool)
(declare-fun x136 () Int)
(declare-fun x79 () Int)
(declare-fun x246 () Int)
(declare-fun x179 () Int)
(declare-fun x275 () Int)
(declare-fun x23 (Int) Int)
(declare-fun x77 () Int)
(declare-fun x120 () Int)
(declare-fun x248 () Int)
(declare-fun x11 () Int)
(declare-fun x325 () Int)
(declare-fun x349 () Int)
(declare-fun x295 (Int Int) Int)
(declare-fun x76 () Int)
(declare-fun x78 () Int)
(declare-fun x281 () Int)
(declare-fun x341 (Int) Int)
(declare-fun x96 () Int)
(declare-fun x125 () Bool)
(declare-fun x247 () Int)
(declare-fun x33 () Int)
(declare-fun x226 (Int) Int)
(declare-fun x235 () Int)
(declare-fun x24 () Int)
(declare-fun x206 () Int)
(declare-fun x367 () Int)
(declare-fun x25 () Int)
(declare-fun x224 () Int)
(declare-fun x60 () Bool)
(declare-fun x320 () Int)
(declare-fun x181 () Bool)
(declare-fun x67 () Int)
(declare-fun x100 () Int)
(declare-fun x162 (Int) Int)
(declare-fun x17 () Int)
(declare-fun x53 () Int)
(declare-fun x319 () Int)
(declare-fun x292 () Bool)
(declare-fun x312 () Bool)
(declare-fun x154 () Int)
(declare-fun x70 (Int) Int)
(declare-fun x234 () Int)
(declare-fun x203 () Int)
(declare-fun x272 () Int)
(declare-fun x343 () Int)
(declare-fun x199 () Int)
(declare-fun x121 (Int) Int)
(declare-fun x194 () Int)
(declare-fun x57 () Int)
(declare-fun x338 () Bool)
(declare-fun x328 () Int)
(declare-fun x188 (Int) Int)
(declare-fun x334 () Bool)
(declare-fun x210 () Int)
(declare-fun x321 () Int)
(declare-fun x36 () Int)
(declare-fun x82 () Int)
(declare-fun x318 () Int)
(declare-fun x175 () Bool)
(declare-fun x366 () Int)
(declare-fun x227 () Int)
(declare-fun x299 (Int) Int)
(declare-fun x218 () Int)
(declare-fun x205 () Int)
(declare-fun x156 () Int)
(declare-fun x51 () Int)
(declare-fun x85 () Int)
(declare-fun x63 () Int)
(declare-fun x229 () Int)
(declare-fun x323 () Int)
(declare-fun x12 () Int)
(declare-fun x372 () Bool)
(declare-fun x64 () Bool)
(declare-fun x102 () Int)
(declare-fun x127 () Bool)
(declare-fun x144 () Bool)
(declare-fun x374 () Int)
(declare-fun x74 () Int)
(declare-fun x119 () Int)
(declare-fun x255 (Int) Int)
(declare-fun x211 () Int)
(declare-fun x371 () Bool)
(declare-fun x184 () Int)
(declare-fun x221 () Int)
(declare-fun x258 () Int)
(declare-fun x87 () Bool)
(declare-fun x9 () Int)
(declare-fun x178 () Int)
(declare-fun x277 () Int)
(declare-fun x151 () Int)
(declare-fun x209 () Int)
(declare-fun x54 () Int)
(declare-fun x337 (Int Int) Int)
(declare-fun x182 () Int)
(declare-fun x198 () Int)
(declare-fun x130 () Int)
(declare-fun x110 () Int)
(declare-fun x361 () Int)
(declare-fun x166 () Int)
(declare-fun x313 () Bool)
(declare-fun x191 (Int) Int)
(declare-fun x42 () Bool)
(declare-fun x52 () Int)
(declare-fun x13 () Int)
(declare-fun x347 () Int)
(declare-fun x122 () Int)
(declare-fun x132 () Int)
(declare-fun x268 () Int)
(declare-fun x331 () Int)
(declare-fun x273 () Int)
(declare-fun x117 () Bool)
(declare-fun x180 () Int)
(declare-fun x200 () Int)
(declare-fun x14 () Int)
(declare-fun x44 () Int)
(declare-fun x285 () Int)
(declare-fun x135 () Bool)
(declare-fun x93 () Bool)
(declare-fun x264 () Int)
(declare-fun x192 () Int)
(declare-fun x359 () Int)
(declare-fun x118 () Int)
(declare-fun x289 (Int) Int)
(declare-fun x128 () Int)
(declare-fun x207 () Bool)
(declare-fun x317 () Int)
(declare-fun x46 () Int)
(declare-fun x34 () Int)
(declare-fun x123 () Int)
(declare-fun x291 () Int)
(declare-fun x263 () Bool)
(declare-fun x35 () Int)
(declare-fun x141 () Bool)
(declare-fun x92 () Int)
(declare-fun x315 () Int)
(declare-fun x32 (Int Int) Int)
(declare-fun x15 () Int)
(declare-fun x158 () Int)
(declare-fun x4 () Int)
(declare-fun x163 () Int)
(declare-fun x335 () Bool)
(declare-fun x290 () Int)
(declare-fun x16 () Int)
(declare-fun x212 () Int)
(declare-fun x344 () Int)
(declare-fun x174 () Int)
(declare-fun x161 () Int)
(declare-fun x56 () Bool)
(declare-fun x256 () Int)
(declare-fun x204 () Int)
(define-fun x223 ((x3 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x3) (>= x3 0)) x3 (- x3 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x105 ((x3 Int)) Int (ite (and (< x3 0) (>= x3 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x3 115792089237316195423570985008687907853269984665640564039457584007913129639936) x3))
(define-fun x287 ((x69 Int)) Bool (and (>= x69 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x69)))
(define-fun x266 ((x69 Int)) Bool (and (= (x32 x69 115792089237316195423570985008687907853269984665640564039457584007913129639935) x69) (= (x32 115792089237316195423570985008687907853269984665640564039457584007913129639935 x69) x69)))
(define-fun x131 ((x69 Int)) Bool (and (= 0 (x32 x69 0)) (= (x32 0 x69) 0)))
(define-fun x217 ((x69 Int)) Bool (= (x32 x69 x69) x69))
(define-fun x322 ((x69 Int)) Bool (and (x217 x69) (x266 x69) (x131 x69)))
(define-fun x348 ((x69 Int) (x61 Int)) Bool (= (x32 x69 x61) (x32 x61 x69)))
(define-fun x186 ((x69 Int) (x61 Int)) Bool (and (=> (>= x69 0) (>= x69 (x32 x69 x61))) (<= 0 (x32 x69 x61)) (=> (>= x61 0) (<= (x32 x69 x61) x61))))
(define-fun x133 ((x69 Int) (x61 Int)) Bool (and (x186 x69 x61) (x348 x69 x61)))
(define-fun x101 ((x69 Int)) Bool (and (= (x337 115792089237316195423570985008687907853269984665640564039457584007913129639935 x69) (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x69)) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x69) (x337 x69 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x333 ((x69 Int)) Bool (and (= (x337 x69 0) x69) (= (x337 0 x69) x69)))
(define-fun x26 ((x69 Int)) Bool (= (x337 x69 x69) 0))
(define-fun x307 ((x69 Int)) Bool (and (x101 x69) (x333 x69) (x26 x69)))
(define-fun x336 ((x69 Int) (x61 Int)) Bool (= (x337 x69 x61) (x337 x61 x69)))
(define-fun x251 ((x69 Int) (x61 Int)) Bool (and (>= (x337 x69 x61) 0) (<= (x337 x69 x61) (+ x61 x69))))
(define-fun x138 ((x69 Int) (x61 Int)) Bool (and (x336 x69 x61) (x251 x69 x61)))
(define-fun x300 ((x69 Int)) Bool (and (= (x249 115792089237316195423570985008687907853269984665640564039457584007913129639935 x69) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x249 x69 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x196 ((x69 Int)) Bool (and (= (x249 0 x69) x69) (= x69 (x249 x69 0))))
(define-fun x171 ((x69 Int)) Bool (= x69 (x249 x69 x69)))
(define-fun x216 ((x69 Int)) Bool (and (x196 x69) (x171 x69) (x300 x69)))
(define-fun x106 ((x69 Int) (x61 Int)) Bool (= (x249 x69 x61) (x249 x61 x69)))
(define-fun x267 ((x69 Int) (x61 Int)) Bool (and (<= (x249 x69 x61) (+ x61 x69)) (=> (<= 0 x61) (<= x61 (x249 x69 x61))) (=> (<= 0 x69) (<= x69 (x249 x69 x61)))))
(define-fun x236 ((x69 Int) (x61 Int)) Bool (and (x267 x69 x61) (x106 x69 x61)))
(define-fun x66 ((x167 Int)) Int 0)
(define-fun x126 ((x167 Int)) Int 0)
(define-fun x113 ((x167 Int)) Int 0)
(define-fun x143 ((x167 Int)) Int 0)
(define-fun x108 ((x167 Int)) Int (ite (> x329 x167) (x341 x167) 0))
(define-fun x243 ((x167 Int)) Int (ite (and (<= 0 x167) (< x167 x329)) (x70 x167) (x108 x167)))
(define-fun x245 ((x167 Int)) Int (ite (= x234 x167) x74 (x10 x167)))
(define-fun x109 ((x167 Int)) Int (ite (= x167 128) 50942633119752846454219349998365661925608737367104304655302372697894809501696 (x113 x167)))
(define-fun x340 ((x167 Int)) Int (ite (= 132 x167) x203 (x109 x167)))
(define-fun x284 ((x167 Int)) Int (ite (= 0 x167) x152 (x121 x167)))
(define-fun x279 ((x167 Int)) Int (ite (= 128 x167) x152 (x340 x167)))
(define-fun x352 ((x167 Int)) Int (ite (and (< x167 160) (<= 128 x167)) (x284 (- x167 128)) (x143 x167)))
(define-fun x18 ((x167 Int)) Int (ite (= x317 x167) x159 (x23 x167)))
(define-fun x215 ((x167 Int)) Int (ite (= x316 x167) x349 (x332 x167)))
(define-fun x364 ((x167 Int)) Int (ite (= x148 x167) x291 (x169 x167)))
(define-fun x103 ((x167 Int)) Int (ite x263 (x332 x167) (x215 x167)))
(define-fun x270 ((x167 Int)) Int (ite x263 (x23 x167) (x18 x167)))
(define-fun x149 ((x167 Int)) Int (ite x263 (x126 x167) (x279 x167)))
(define-fun x81 ((x167 Int)) Int (ite x263 (x169 x167) (x364 x167)))
(define-fun x271 ((x167 Int)) Int (ite x125 (x7 x167) (x40 x167)))
(define-fun x145 ((x167 Int)) Int (ite x125 (x160 x167) (x164 x167)))
(define-fun x50 ((x167 Int)) Int (ite x125 (x103 x167) (x299 x167)))
(define-fun x146 ((x167 Int)) Int (ite (= x290 x167) x102 (x303 x167)))
(define-fun x357 ((x167 Int)) Int (ite (= x167 x119) 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x149 x167)))
(define-fun x265 ((x167 Int)) Int (ite (= x167 x33) x247 (x357 x167)))
(define-fun x220 ((x167 Int)) Int (ite (= x269 x167) x192 (x265 x167)))
(define-fun x187 ((x167 Int)) Int (ite (= x167 x47) x278 (x257 x167)))
(define-fun x280 ((x167 Int)) Int (ite (= x167 x222) x328 (x187 x167)))
(define-fun x355 ((x167 Int)) Int (ite (= x167 128) x192 (x66 x167)))
(define-fun x240 ((x167 Int)) Int (ite (= x167 128) 1 (x355 x167)))
(define-fun x185 ((x167 Int)) Int (ite (= x167 0) x65 (x255 x167)))
(define-fun x373 ((x167 Int)) Int (ite x176 (x145 x167) (x191 x167)))
(define-fun x202 ((x167 Int)) Int (ite (= x242 x167) x285 (x250 x167)))
(define-fun x308 ((x167 Int)) Int (ite (= x259 x167) x288 (x301 x167)))
(define-fun x5 ((x167 Int)) Int (ite (= x167 x120) x132 (x373 x167)))
(assert (x287 x269))
(assert (x287 x43))
(assert (x287 x118))
(assert (= (x38 (x94 64 x212 3)) 64))
(assert (x287 x104))
(assert (x287 x261))
(assert (x287 x65))
(assert (x287 x134))
(assert (not x311))
(assert (not (x306 (x94 64 x1 2))))
(assert (x287 x35))
(assert (x287 x166))
(assert (=> (>= 10000 x298) (= (x188 x298) 0)))
(assert (x306 1461501637330902918203684832716283019655932542975))
(assert (x287 x361))
(assert (= x293 (or x93 x350)))
(assert (x287 x291))
(assert (= (x188 (x94 64 x2 1)) (x94 64 x2 1)))
(assert (x287 x63))
(assert (= 0 (x188 115792089237316195423570985008687907853269984665640564039457584007913129639934)))
(assert (x287 x132))
(assert (= x296 (and (not x214) x195)))
(assert (x287 x324))
(assert (x287 x159))
(assert (x287 x274))
(assert (x287 x264))
(assert (= x195 (or x115 x282)))
(assert (x322 x147))
(assert (x287 x90))
(assert (< 10000 (x94 64 x2 1)))
(assert (x287 x79))
(assert (= 0 (x188 4294967295)))
(assert (= 0 (x188 115792089237316195423570985008687907853269984665640564039457584007913129035135)))
(assert (= 0 (x188 604800)))
(assert (= x338 (and x125 x42)))
(assert (x287 x230))
(assert (x287 x1))
(assert (x287 x182))
(assert (= (not (and (= x21 (x373 x120)) (= false x87) (= x20 (x105 (- x91 x77))) (= x312 false) (= x72 false) (= true x135) (not (> x288 x354)) (= x285 (x105 (- x46 x134))) (= (x105 (- x21 x77)) x132) (not (< x46 x285)) (= (x105 (- x182 x134)) x235) (= x288 (x105 (- x354 x315))) (= (x105 (- x91 x77)) x79) (= x354 (x301 x259)) (not (< x21 x132)) (= x323 (x105 (- x182 x134))) (not (> x235 x182)) (= (x250 x242) x46) (not (> x20 x91)))) x371))
(assert (x287 x204))
(assert (x287 x68))
(assert (x287 x203))
(assert (= (x188 x17) (x188 (+ x17 5))))
(assert (= (x188 x242) (x188 (+ x242 1))))
(assert (> (x94 64 x247 0) 10000))
(assert (= 0 (x188 773316216)))
(assert (x306 4294967295))
(assert (< (x94 64 x203 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (=> (= 0 x261) (= (div x44 x261) 0)))
(assert (x287 x309))
(assert (x287 x21))
(assert (x287 x221))
(assert (= (x188 57896044618658097711785492504343953926634992332820282019728792003956564819967) 0))
(assert (x287 x168))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x94 64 x2 1)))
(assert (x287 x11))
(assert (x287 x218))
(assert (x287 x82))
(assert (= 3 (x88 (x94 64 x212 3))))
(assert (x287 x172))
(assert (=> (>= 10000 x1) (= 0 (x188 x1))))
(assert (x287 x262))
(assert (= (x157 (x94 64 x2 1)) x2))
(assert (= 0 (x188 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (< 10000 (x94 64 x212 3)))
(assert (x287 x91))
(assert (x287 x328))
(assert (x287 x163))
(assert (= x207 (or x56 x330)))
(assert (= (x188 x367) (x188 (+ 1 x367))))
(assert (x287 x363))
(assert (x307 x150))
(assert (x287 x9))
(assert (x287 x219))
(assert (x287 x128))
(assert (= (and x144 x207) x350))
(assert (= x314 (=> (and (or (not x42) (and x42 (and (<= x238 127) (not (< x54 x200)) (not (= x119 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (= x33 (x223 (+ x119 4))) (= x258 (x223 (+ 32 x119))) (= x129 false) (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 x363) (= x151 2835717307) (= x334 false) (<= x119 115792089237316195423570985008687907853269984665640564039457584007913129639934) (<= 1 x92) (= (x257 x122) x230) (= (x368 x98) x247) (= 68 x39) (= x328 (x223 (+ x192 x53))) (not (> x192 x230)) (= false x48) (<= x119 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= x232 x170) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x119)) (= (x187 x222) x53) (= x122 (x94 64 x203 0)) (<= x247 1461501637330902918203684832716283019655932542975) (< x119 x258) (= (x253 x124) x92) (= x9 68) (= (x94 64 x247 0) x222) (= x339 (x105 (- x54 x192))) (= x200 (x105 (- x54 x192))) (= (x94 64 x203 0) x47) (= x65 (x240 128)) (= 1 x82) (<= x119 115792089237316195423570985008687907853269984665640564039457584007913129639934) (not (= x119 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (= (x105 (- x8 x119)) x39) (= x41 x95) (<= 1 x247) (= x278 (x105 (- x230 x192))) (= x247 x232) (= (x223 (+ 64 x33)) x8) (= x269 (x223 (+ x33 32))) (= x95 x192) (>= 127 x238) (= x111 false)))) (and (= (+ x98 5) x365) (not (< x291 x156)) (= 0 x192) (= x298 (x303 x290)) (= x117 (< x298 x12)) (= x239 x233) (not x117) (not (> x134 x213)) (= (x114 x365) x156) (= x213 (x250 x242)) (= x242 (+ x98 1)) (= x102 x298) (= x42 (< 0 x192)) (= x120 (+ x98 3)) (= x98 (x94 64 x2 1)) (= (+ x365 1) x290) (= (x160 x120) x166) (= (x94 64 x298 2) x173))) x116)))
(assert (x287 x224))
(assert (x287 x102))
(assert (=> (<= x203 10000) (= (x188 x203) 0)))
(assert (x287 x177))
(assert (x287 x342))
(assert (x287 x351))
(assert (= 2 (x88 (x94 64 x309 2))))
(assert (= x62 (=> (and (= x214 (= x34 0)) (or (and x214 (and (= 128 x119) (= x54 x155) (= x1 x12))) (and (and (= (+ 1 x237) x27) (= 36 x15) (= (x352 128) x179) (not (< x179 x159)) (= x89 50942633119752846454219349998365661925608737367104304655302372697894809501696) (= x136 1889567281) (= x227 x54) (<= x244 127) (= (x94 64 x203 0) x97) (not (>= (+ x182 x233) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x349 (x223 (+ x233 x182))) (= (x253 x124) x90) (= x309 (+ 1 x1)) (= x283 (x18 x27)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x1) (= x152 (x257 x97)) (= (x105 (- x179 x155)) x159) (= 160 x119) (<= 1 x90) (not (>= (+ x283 x155) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x12 (+ x1 1)) (= x148 (x94 64 x309 2)) (= (x94 64 x1 2) x237) (= x25 x203) (= x141 false) (= (+ x1 1) x346) (= x370 x25) (= (x94 64 x1 2) x130) (= x316 (+ 2 x130)) (= false x372) (= x19 false) (= (x223 (+ x283 x155)) x22) (= 128 x366) (= x362 false) (= (+ 1 x367) x317) (= x227 (x223 (+ x155 x283))) (>= 127 x244) (= (x94 64 x1 2) x367)) (not x214)))) x314)))
(assert (x287 x213))
(assert (x287 x180))
(assert (x287 x52))
(assert (x287 x152))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x94 64 x298 2)))
(assert (x287 x37))
(assert (> (x94 64 x203 0) 10000))
(assert (=> (<= x247 10000) (= (x188 x247) 0)))
(assert (x306 1889567281))
(assert (x287 x170))
(assert (=> (<= x224 10000) (= 0 (x188 x224))))
(assert (=> (>= 10000 x234) (= (x188 x234) 0)))
(assert (x287 x31))
(assert (x287 x158))
(assert (x287 x44))
(assert (x287 x315))
(assert (=> (= 0 x261) (= 0 (div x205 x261))))
(assert (< 10000 (x94 64 x1 2)))
(assert (x287 x12))
(assert (= (and x64 x176) x330))
(assert (x287 x359))
(assert (x287 x273))
(assert (> (x94 64 x298 2) 10000))
(assert (x287 x344))
(assert (x287 x137))
(assert (x287 x275))
(assert (x287 x80))
(assert (x322 x153))
(assert (= (x157 (x94 64 x309 2)) x309))
(assert (x287 x258))
(assert (x287 x77))
(assert (x287 x59))
(assert (= (x188 76450787359836037641860180984291677749980919077056822294353438043884394381312) 0))
(assert (= (x88 (x94 64 x298 2)) 2))
(assert (= (x157 (x94 64 x212 3)) x212))
(assert (not (x306 (x94 64 x309 2))))
(assert (= x1 (x157 (x94 64 x1 2))))
(assert (= (x157 (x94 64 x298 2)) x298))
(assert (= (x188 (x94 64 x203 0)) (x94 64 x203 0)))
(assert (x287 x95))
(assert (x287 x297))
(assert (x287 x247))
(assert (=> (<= x124 10000) (= 0 (x188 x124))))
(assert (x307 x210))
(assert (not (x306 (x94 64 x247 0))))
(assert (= (x188 x98) (x188 (+ x98 3))))
(assert (= (x38 (x94 64 x203 0)) 64))
(assert (x287 x100))
(assert (x287 x193))
(assert (x306 115792089237316195423570985008687907853269984665640564039457584007913129639934))
(assert (x287 x156))
(assert (x287 x41))
(assert (x236 x24 x165))
(assert (x287 x374))
(assert (x287 x305))
(assert (x306 50942633119752846454219349998365661925608737367104304655302372697894809501696))
(assert (=> (>= 10000 x309) (= (x188 x309) 0)))
(assert (x287 x248))
(assert (x287 x329))
(assert (x287 x30))
(assert (= x29 (=> (and (or (and (and (= x274 (x105 (- 2 x275))) (= (mod (* x248 x43) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x275) (= (div x118 x11) x248) (= x31 (mod (* x248 x347) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x105 (- 2 x31)) x177) (= (x105 (- x277 x221)) x374) (= x71 (x337 2 x210)) (= (x105 (- 2 x28)) x180) (= x43 (mod (* x86 x359) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x105 (- 2 x199)) x359) (= (mod (* x347 x177) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x206) (= (mod (* 3 x248) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x210) (= x86 (mod (* x161 x305) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x153 (x223 (+ (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x118) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1))) (= x28 (mod (* x248 x71) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x105 (- 2 x100)) x161) (= x199 (mod (* x86 x248) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (div x14 x11) x225) (= x221 (mod (* x63 x134) x118)) (> x118 x174) (= x14 (x105 (- 0 x11))) (= x347 (mod (* x71 x180) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x11 (x32 x118 x153)) (= (mod (* x248 x206) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x281) (= x36 (div x374 x11)) (= x305 (mod (* x229 x206) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x274 x43) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x13) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x174) (= x229 (x105 (- 2 x281))) (= x100 (mod (* x305 x248) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x264 (x223 (+ 1 x225))) (= (mod (* x342 x264) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x137) (= x55 x315) (= (mod (* x13 (x249 x36 x137)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x55) (= (x105 (- x174 (mod (ite (> x221 x277) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x342)) (not x144)) (and x144 (and (= x231 x315) (= (div x277 x118) x231)))) (and (= (mod (* x63 x134) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x277) (= (= 0 x174) x144) (= (x250 x242) x118) (= x174 (x105 (- x219 (mod (ite (> x277 x302) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= x219 (x105 (- x302 x277))) (= (+ 1 x242) x259) (= (x301 x259) x63) (= (mod (* x134 x63) 115792089237316195423570985008687907853269984665640564039457584007913129639935) x302) (>= x118 1))) x371)))
(assert (x287 x55))
(assert (x287 x86))
(assert (not (x306 (x94 64 x2 1))))
(assert (x287 x4))
(assert (= (x88 (x94 64 x247 0)) 0))
(assert (x287 x13))
(assert (x138 x210 2))
(assert (x287 x151))
(assert (x287 x327))
(assert (x287 x225))
(assert (x287 x136))
(assert (= (x88 (x94 64 x1 2)) 2))
(assert (x306 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (= 0 (x88 (x94 64 x203 0))))
(assert (= (x88 (x94 64 x2 1)) 1))
(assert (x287 x161))
(assert (x287 x238))
(assert (= (x38 (x94 64 x1 2)) 64))
(assert (x287 x198))
(assert (x287 x320))
(assert (x287 x239))
(assert (=> (= 0 x11) (= 0 (div x374 x11))))
(assert (x287 x139))
(assert (x306 2835717307))
(assert (= (and x304 (not x75)) x282))
(assert (x287 x232))
(assert (x287 x178))
(assert (x287 x211))
(assert (x287 x360))
(assert (= (and x176 (not x64)) x56))
(assert (x287 x147))
(assert (= (=> (and (or (and (and (= (mod (* x51 x193) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x297) (= (x105 (- 0 x261)) x44) (= (mod (* x197 x194) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x361) (= (x105 (- 2 x96)) x193) (= (x105 (- x37 (mod (ite (> x262 x4) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x324) (= (mod (* x158 x197) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x201) (> x205 x37) (= (x337 2 x150) x319) (= (div x44 x261) x104) (= (mod (* x344 x49) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x68) (= (mod (* x51 x197) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x96) (= (mod (* x139 x319) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x158) (= (mod (* x324 x198) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x165) (= (x105 (- 2 x201)) x320) (= x73 (mod (* x344 x197) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x344 (mod (* x297 x369) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x150 (mod (* x197 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x262 (mod (* x360 x134) x205)) (= (x105 (- 2 x361)) x331) (= x59 (mod (* x319 x197) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x261 (x32 x205 x147)) (= x272 (mod (* x197 x297) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (div x205 x261) x197) (= (x105 (- 2 x59)) x139) (= (x105 (- 2 x272)) x369) (<= x37 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= x273 x77) (= x163 (x105 (- x4 x262))) (= (mod (* x158 x320) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x194) (= x273 (mod (* x68 (x249 x24 x165)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x49 (x105 (- 2 x73))) (= x198 (x223 (+ 1 x104))) (= x24 (div x163 x261)) (= (mod (* x331 x194) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x51) (= x147 (x223 (+ (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x205) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1)))) (not x64)) (and x64 (and (= x256 x77) (= x256 (div x4 x205))))) (and (= (x105 (- x172 x166)) x211) (= x16 (x105 (- x102 x12))) (= x205 (x250 x242)) (= (x145 x120) x172) (= x91 x239) (= x107 (mod (* x134 x360) 115792089237316195423570985008687907853269984665640564039457584007913129639935)) x294 (= (> x16 0) x294) (= (x105 (- x107 x4)) x58) (not (< x172 x211)) (= (= x37 0) x64) (<= 1 x205) (= x37 (x105 (- x58 (mod (ite (< x107 x4) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= x360 (x373 x120)) (= x4 (mod (* x360 x134) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) x29) x116))
(assert (= (and x207 (not x144)) x93))
(assert (=> (= 0 x261) (= (div x163 x261) 0)))
(assert (x287 x73))
(assert (x287 x53))
(assert (x287 x165))
(assert (x216 x36))
(assert (x138 x150 2))
(assert (= (x188 (x94 64 x247 0)) (x94 64 x247 0)))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x94 64 x1 2)))
(assert (< 10000 (x94 64 x309 2)))
(assert (x287 x179))
(assert (x287 x16))
(assert (= 0 (x188 2835717307)))
(assert (x287 x78))
(assert (x287 x325))
(assert (x287 x244))
(assert (x287 x153))
(assert (x306 604800))
(assert (x287 x22))
(assert (x306 57896044618658097711785492504343953926634992332820282019728792003956564819967))
(assert (x287 x278))
(assert (x287 x15))
(assert (x287 x212))
(assert (x287 x277))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x94 64 x212 3)))
(assert (x287 x285))
(assert (= 0 (x188 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (< (x94 64 x247 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x287 x71))
(assert (x287 x199))
(assert (=> (<= x212 10000) (= (x188 x212) 0)))
(assert (x306 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (x287 x155))
(assert (x133 x118 x153))
(assert (x322 x205))
(assert (= (x188 x98) (x188 (+ x98 1))))
(assert (x216 x165))
(assert (x287 x331))
(assert (x287 x89))
(assert (x287 x74))
(assert (x216 x24))
(assert (= (x94 64 x298 2) (x188 (x94 64 x298 2))))
(assert (x287 x20))
(assert (x287 x49))
(assert (x287 x288))
(assert (x287 x174))
(assert (x287 x33))
(assert (x287 x206))
(assert (x287 x227))
(assert (x287 x210))
(assert (x287 x319))
(assert (= true x304))
(assert (x287 x345))
(assert (x306 773316216))
(assert (x287 x51))
(assert (x287 x25))
(assert (x287 x39))
(assert (x287 x347))
(assert (= x247 (x157 (x94 64 x247 0))))
(assert (=> (<= x2 10000) (= 0 (x188 x2))))
(assert (x287 x349))
(assert (= x176 (or (and x125 (not x42)) x338)))
(assert (x287 x197))
(assert (x287 x119))
(assert (=> (= x11 0) (= (div x118 x11) 0)))
(assert (= (x188 x365) (x188 (+ 1 x365))))
(assert (x287 x326))
(assert (x287 x281))
(assert (=> (= x11 0) (= (div x14 x11) 0)))
(assert (x287 x256))
(assert (x287 x194))
(assert (x287 x2))
(assert (x307 2))
(assert (x287 x366))
(assert (= (x188 1889567281) 0))
(assert (= (x38 (x94 64 x298 2)) 64))
(assert (x287 x92))
(assert (x287 x346))
(assert (< (x94 64 x309 2) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= x125 (or x296 x263)))
(assert (x306 76450787359836037641860180984291677749980919077056822294353438043884394381312))
(assert (not (x306 (x94 64 x203 0))))
(assert (x287 x235))
(assert (= (x188 (x94 64 x1 2)) (x94 64 x1 2)))
(assert (x287 x192))
(assert (x287 x28))
(assert (x287 x252))
(assert (= (x188 50942633119752846454219349998365661925608737367104304655302372697894809501696) 0))
(assert (not (x306 (x94 64 x212 3))))
(assert (x287 x233))
(assert (x287 x24))
(assert (x287 x283))
(assert (x287 x54))
(assert (= (x188 1461501637330902918203684832716283019655932542975) 0))
(assert (x287 x76))
(assert (x287 x323))
(assert (x133 x205 x147))
(assert (= (x94 64 x309 2) (x188 (x94 64 x309 2))))
(assert (x287 x339))
(assert (= (=> (and (or (and (not x75) (= x34 (ite x75 1 0))) (and (= 1 x34) x75)) (and (= (< 0 (x253 x224)) x335) (<= 0 x246) (>= 1461501637330902918203684832716283019655932542975 x224) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x310) (= x326 x154) (= x327 x52) (= x74 (x10 x234)) (<= 1 x224) (<= 1 x168) (<= 0 x286) (>= 1461501637330902918203684832716283019655932542975 x203) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x318) (= (x94 64 x212 3) x123) (= (x70 4) x134) (>= 1461501637330902918203684832716283019655932542975 x110) (= x268 (x94 64 x1 2)) (<= x343 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x325) (= x80 (x169 x268)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x358) (>= 115792089237316195423570985008687907853269984665640564039457584007913129035135 x80) (= (x253 x203) x218) (>= 1461501637330902918203684832716283019655932542975 x124) (<= 0 x184) (= x178 x76) (= x17 (x94 64 x2 1)) (>= x190 0) (>= x345 1) (not (= x203 x224)) (= x30 (+ x80 604800)) (= x2 x112) (= x75 (not (> x30 x291))) (<= 1 x325) (>= 1461501637330902918203684832716283019655932542975 x112) (>= 4294967295 x190) (= x212 (x289 x2)) (<= x228 1461501637330902918203684832716283019655932542975) (= false x292) (>= x358 0) (<= x252 127) (<= 0 x310) (= x85 773316216) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x84) (<= 0 x110) (= x178 x134) (= false x276) (>= x218 1) (not (= x224 x124)) (= false x254) (= x60 (< 0 (x253 x203))) (<= 0 x112) (<= 1 x124) x208 (not (= x203 x124)) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x329) (= false x181) (= x203 x6) (= false x241) (<= x246 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= x252 127) (<= 0 x84) x60 (= (x70 0) x154) (>= x318 0) (= x168 (x162 x123)) (= x327 (x245 x203)) (= x67 1) (<= 1 x203) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x184) (>= x45 0) (= x203 x325) (= x209 773316216) (= x57 0) (= x175 false) (= 0 x321) (<= x45 115792089237316195423570985008687907853269984665640564039457584007913129639935) x335 (= x310 x291) (<= 0 x343) (>= 255 x168) (= x112 x234) (>= 1461501637330902918203684832716283019655932542975 x286) (= (+ x17 5) x99) (= x313 false) (= (< 0 (x253 x124)) x208) (>= x329 36) (= x345 (x114 x99)))) x62) x311))
(assert (x287 x154))
(assert (x322 x118))
(assert (x216 x137))
(assert (= (x38 (x94 64 x247 0)) 64))
(assert (x287 x201))
(assert (x287 x96))
(assert (= (x38 (x94 64 x2 1)) 64))
(assert (x287 x369))
(assert (x287 x234))
(assert (= (x188 (+ x130 2)) (x188 x130)))
(assert (x236 x36 x137))
(assert (x287 x124))
(assert (x287 x321))
(assert (= (and x214 x195) x263))
(assert (= (x94 64 x212 3) (x188 (x94 64 x212 3))))
(assert (x287 x298))
(assert (x287 x205))
(assert (=> (= x118 0) (= (div x277 x118) 0)))
(assert (x287 x370))
(assert (x287 x272))
(assert (x287 x231))
(assert (= (x188 (+ 5 x98)) (x188 x98)))
(assert (x287 x107))
(assert (x287 x14))
(assert (x287 x36))
(assert (x287 x200))
(assert (x287 x34))
(assert (= (x188 x237) (x188 (+ x237 1))))
(assert (x287 x302))
(assert (= x115 (and x75 x304)))
(assert (x287 x46))
(assert (=> (= 0 x205) (= (div x4 x205) 0)))
(assert (x287 x354))
(assert (x287 x8))
(assert (x306 115792089237316195423570985008687907853269984665640564039457584007913129035135))
(assert (x287 x209))
(assert (x287 x228))
(assert (= x203 (x157 (x94 64 x203 0))))
(assert (x287 x58))
(assert (x287 x229))
(assert (not (x306 (x94 64 x298 2))))
(assert (= 64 (x38 (x94 64 x309 2))))
(assert (x287 x150))
(check-sat)
(exit)
