(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Certora
Generated on: 2024-04-10
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x682 () Int)
(declare-fun x224 () Bool)
(declare-fun x617 () Int)
(declare-fun x800 () Int)
(declare-fun x651 () Int)
(declare-fun x685 () Bool)
(declare-fun x831 (Int) Int)
(declare-fun x100 () Bool)
(declare-fun x753 () Bool)
(declare-fun x21 () Int)
(declare-fun x47 () Bool)
(declare-fun x230 () Int)
(declare-fun x746 () Int)
(declare-fun x724 () Bool)
(declare-fun x202 () Bool)
(declare-fun x683 () Int)
(declare-fun x486 () Bool)
(declare-fun x68 () Int)
(declare-fun x536 () Int)
(declare-fun x794 () Bool)
(declare-fun x734 () Int)
(declare-fun x769 () Int)
(declare-fun x24 (Int) Bool)
(declare-fun x672 () Bool)
(declare-fun x92 (Int) Int)
(declare-fun x784 () Int)
(declare-fun x633 () Bool)
(declare-fun x451 () Bool)
(declare-fun x661 () Int)
(declare-fun x128 () Bool)
(declare-fun x173 () Int)
(declare-fun x564 () Int)
(declare-fun x397 (Int) Int)
(declare-fun x468 () Bool)
(declare-fun x776 (Int) Int)
(declare-fun x515 () Int)
(declare-fun x810 () Int)
(declare-fun x431 () Int)
(declare-fun x783 () Int)
(declare-fun x602 () Bool)
(declare-fun x395 () Int)
(declare-fun x226 () Int)
(declare-fun x94 () Bool)
(declare-fun x239 () Bool)
(declare-fun x655 () Int)
(declare-fun x729 () Bool)
(declare-fun x238 () Int)
(declare-fun x250 () Int)
(declare-fun x219 () Int)
(declare-fun x231 () Bool)
(declare-fun x17 () Bool)
(declare-fun x382 (Int) Int)
(declare-fun x727 () Int)
(declare-fun x767 () Bool)
(declare-fun x398 () Int)
(declare-fun x627 () Int)
(declare-fun x777 () Int)
(declare-fun x415 () Int)
(declare-fun x520 () Int)
(declare-fun x607 () Bool)
(declare-fun x670 () Int)
(declare-fun x352 () Int)
(declare-fun x316 () Int)
(declare-fun x163 () Bool)
(declare-fun x258 () Int)
(declare-fun x528 () Int)
(declare-fun x715 (Int) Int)
(declare-fun x583 () Bool)
(declare-fun x313 () Int)
(declare-fun x112 () Bool)
(declare-fun x126 () Bool)
(declare-fun x197 () Bool)
(declare-fun x833 () Bool)
(declare-fun x612 () Bool)
(declare-fun x339 () Bool)
(declare-fun x318 () Int)
(declare-fun x277 () Int)
(declare-fun x466 () Bool)
(declare-fun x702 () Bool)
(declare-fun x477 () Int)
(declare-fun x323 () Bool)
(declare-fun x177 () Int)
(declare-fun x14 () Int)
(declare-fun x797 () Bool)
(declare-fun x717 () Bool)
(declare-fun x255 () Int)
(declare-fun x500 () Bool)
(declare-fun x152 () Bool)
(declare-fun x27 () Bool)
(declare-fun x319 () Bool)
(declare-fun x41 () Int)
(declare-fun x497 () Int)
(declare-fun x403 () Int)
(declare-fun x526 () Int)
(declare-fun x733 () Int)
(declare-fun x91 () Int)
(declare-fun x31 () Int)
(declare-fun x124 () Int)
(declare-fun x603 () Bool)
(declare-fun x97 () Bool)
(declare-fun x718 (Int) Int)
(declare-fun x444 () Int)
(declare-fun x827 () Int)
(declare-fun x274 () Int)
(declare-fun x259 () Bool)
(declare-fun x281 () Bool)
(declare-fun x476 () Int)
(declare-fun x669 () Bool)
(declare-fun x591 () Int)
(declare-fun x396 () Int)
(declare-fun x781 () Int)
(declare-fun x291 () Bool)
(declare-fun x346 () Bool)
(declare-fun x297 () Int)
(declare-fun x697 () Int)
(declare-fun x818 () Int)
(declare-fun x196 () Int)
(declare-fun x84 () Bool)
(declare-fun x690 () Int)
(declare-fun x172 () Int)
(declare-fun x9 () Bool)
(declare-fun x390 () Int)
(declare-fun x32 () Int)
(declare-fun x438 () Int)
(declare-fun x552 () Int)
(declare-fun x26 () Int)
(declare-fun x837 () Int)
(declare-fun x480 () Int)
(declare-fun x593 () Int)
(declare-fun x201 (Int) Int)
(declare-fun x193 () Int)
(declare-fun x418 () Int)
(declare-fun x7 () Int)
(declare-fun x546 () Bool)
(declare-fun x210 () Bool)
(declare-fun x371 () Int)
(declare-fun x460 () Bool)
(declare-fun x206 () Bool)
(declare-fun x20 () Bool)
(declare-fun x803 () Int)
(declare-fun x464 () Int)
(declare-fun x706 () Int)
(declare-fun x599 () Int)
(declare-fun x647 () Int)
(declare-fun x33 () Int)
(declare-fun x841 () Int)
(declare-fun x116 () Int)
(declare-fun x653 () Int)
(declare-fun x739 () Int)
(declare-fun x688 () Int)
(declare-fun x336 () Bool)
(declare-fun x768 () Int)
(declare-fun x349 () Int)
(declare-fun x106 () Bool)
(declare-fun x391 () Int)
(declare-fun x780 (Int) Int)
(declare-fun x406 () Int)
(declare-fun x565 () Bool)
(declare-fun x185 () Int)
(declare-fun x524 () Int)
(declare-fun x389 () Bool)
(declare-fun x779 () Int)
(declare-fun x691 () Int)
(declare-fun x644 () Int)
(declare-fun x251 () Int)
(declare-fun x611 () Int)
(declare-fun x198 () Int)
(declare-fun x374 () Bool)
(declare-fun x10 () Bool)
(declare-fun x664 () Bool)
(declare-fun x674 () Bool)
(declare-fun x422 () Int)
(declare-fun x290 () Int)
(declare-fun x588 (Int Int) Int)
(declare-fun x574 () Int)
(declare-fun x410 () Int)
(declare-fun x675 () Int)
(declare-fun x408 () Bool)
(declare-fun x813 () Int)
(declare-fun x363 () Bool)
(declare-fun x601 () Int)
(declare-fun x132 () Int)
(declare-fun x377 () Int)
(declare-fun x351 () Int)
(declare-fun x286 () Int)
(declare-fun x275 () Int)
(declare-fun x455 () Bool)
(declare-fun x656 () Bool)
(declare-fun x815 () Int)
(declare-fun x452 () Int)
(declare-fun x59 () Bool)
(declare-fun x362 () Bool)
(declare-fun x598 () Int)
(declare-fun x146 () Int)
(declare-fun x709 (Int) Int)
(declare-fun x496 () Bool)
(declare-fun x195 () Bool)
(declare-fun x143 (Int) Int)
(declare-fun x623 () Int)
(declare-fun x649 () Bool)
(declare-fun x510 () Int)
(declare-fun x411 () Int)
(declare-fun x749 () Bool)
(declare-fun x103 () Bool)
(declare-fun x113 () Bool)
(declare-fun x180 () Int)
(declare-fun x660 () Bool)
(declare-fun x235 () Int)
(declare-fun x634 () Int)
(declare-fun x625 () Bool)
(declare-fun x735 () Bool)
(declare-fun x726 () Bool)
(declare-fun x442 () Int)
(declare-fun x358 () Int)
(declare-fun x384 () Int)
(declare-fun x74 () Int)
(declare-fun x232 () Int)
(declare-fun x446 () Int)
(declare-fun x337 () Int)
(declare-fun x465 (Int Int) Int)
(declare-fun x541 () Bool)
(declare-fun x681 (Int) Int)
(declare-fun x631 () Int)
(declare-fun x594 () Int)
(declare-fun x294 () Bool)
(declare-fun x499 () Int)
(declare-fun x698 () Bool)
(declare-fun x836 () Bool)
(declare-fun x295 () Int)
(declare-fun x138 () Bool)
(declare-fun x102 () Bool)
(declare-fun x622 () Int)
(declare-fun x320 () Int)
(declare-fun x191 (Int) Int)
(declare-fun x310 () Int)
(declare-fun x543 () Bool)
(declare-fun x221 (Int Int) Int)
(declare-fun x430 () Bool)
(declare-fun x217 (Int) Int)
(declare-fun x748 () Int)
(declare-fun x540 () Int)
(declare-fun x518 () Int)
(declare-fun x487 () Bool)
(declare-fun x73 () Bool)
(declare-fun x79 () Bool)
(declare-fun x572 () Bool)
(declare-fun x95 () Int)
(declare-fun x453 () Int)
(declare-fun x597 () Bool)
(declare-fun x269 () Int)
(declare-fun x42 (Int) Int)
(declare-fun x12 () Int)
(declare-fun x825 () Bool)
(declare-fun x474 () Int)
(declare-fun x285 () Bool)
(declare-fun x388 () Int)
(declare-fun x806 () Bool)
(declare-fun x458 () Bool)
(declare-fun x434 () Bool)
(declare-fun x619 () Bool)
(declare-fun x575 () Bool)
(declare-fun x689 () Int)
(declare-fun x829 () Int)
(declare-fun x547 () Int)
(declare-fun x638 () Int)
(declare-fun x161 () Int)
(declare-fun x335 () Int)
(declare-fun x554 () Int)
(declare-fun x828 () Int)
(declare-fun x692 () Bool)
(declare-fun x62 () Int)
(declare-fun x288 () Int)
(declare-fun x772 () Int)
(declare-fun x578 () Bool)
(declare-fun x508 () Bool)
(declare-fun x636 () Int)
(declare-fun x174 () Bool)
(declare-fun x760 () Int)
(declare-fun x200 () Int)
(declare-fun x719 () Bool)
(declare-fun x542 () Int)
(declare-fun x421 (Int) Int)
(declare-fun x39 () Bool)
(declare-fun x156 () Bool)
(declare-fun x170 () Int)
(declare-fun x556 () Int)
(declare-fun x293 () Bool)
(declare-fun x413 () Int)
(declare-fun x120 () Bool)
(declare-fun x245 () Int)
(declare-fun x618 () Int)
(declare-fun x270 () Bool)
(declare-fun x127 () Int)
(declare-fun x678 () Int)
(declare-fun x280 () Bool)
(declare-fun x650 () Bool)
(declare-fun x648 () Int)
(declare-fun x153 () Int)
(declare-fun x257 () Bool)
(declare-fun x303 () Bool)
(declare-fun x531 () Int)
(declare-fun x50 () Int)
(declare-fun x482 () Int)
(declare-fun x304 () Int)
(declare-fun x449 () Int)
(declare-fun x364 () Int)
(declare-fun x51 () Bool)
(declare-fun x347 () Int)
(declare-fun x298 () Int)
(declare-fun x216 () Bool)
(declare-fun x131 () Int)
(declare-fun x330 () Int)
(declare-fun x266 (Int) Int)
(declare-fun x677 () Bool)
(declare-fun x242 () Int)
(declare-fun x283 () Bool)
(declare-fun x176 () Bool)
(declare-fun x566 (Int Int) Int)
(declare-fun x45 () Int)
(declare-fun x432 () Int)
(declare-fun x731 () Bool)
(declare-fun x738 () Int)
(declare-fun x154 () Int)
(declare-fun x253 () Bool)
(declare-fun x53 () Bool)
(declare-fun x157 () Int)
(declare-fun x107 () Int)
(declare-fun x249 () Bool)
(declare-fun x168 () Int)
(declare-fun x367 () Int)
(declare-fun x383 () Bool)
(declare-fun x740 (Int) Int)
(declare-fun x236 () Bool)
(declare-fun x322 () Int)
(declare-fun x596 () Int)
(declare-fun x192 () Int)
(declare-fun x3 () Bool)
(declare-fun x134 () Int)
(declare-fun x145 () Bool)
(declare-fun x527 () Int)
(declare-fun x4 () Int)
(declare-fun x522 () Bool)
(declare-fun x165 () Bool)
(declare-fun x308 (Int) Int)
(declare-fun x609 () Bool)
(declare-fun x700 () Int)
(declare-fun x730 () Bool)
(declare-fun x447 () Bool)
(declare-fun x345 () Int)
(declare-fun x348 () Int)
(declare-fun x66 () Int)
(declare-fun x125 () Bool)
(declare-fun x427 () Int)
(declare-fun x99 () Int)
(declare-fun x420 () Bool)
(declare-fun x19 () Int)
(declare-fun x604 () Bool)
(declare-fun x811 () Int)
(declare-fun x630 () Int)
(declare-fun x141 () Int)
(declare-fun x693 () Int)
(declare-fun x561 () Bool)
(declare-fun x473 () Int)
(declare-fun x225 () Bool)
(declare-fun x265 () Bool)
(declare-fun x114 () Int)
(declare-fun x276 () Bool)
(declare-fun x663 () Int)
(declare-fun x722 () Int)
(declare-fun x404 () Bool)
(declare-fun x287 () Bool)
(declare-fun x521 () Bool)
(declare-fun x553 () Int)
(declare-fun x98 () Int)
(declare-fun x569 () Int)
(declare-fun x18 (Int) Int)
(declare-fun x679 () Int)
(declare-fun x799 () Bool)
(declare-fun x380 () Bool)
(declare-fun x562 () Bool)
(declare-fun x247 () Int)
(declare-fun x494 (Int) Int)
(declare-fun x759 () Bool)
(declare-fun x505 (Int) Int)
(declare-fun x509 (Int) Int)
(declare-fun x405 (Int Int) Int)
(declare-fun x484 () Int)
(declare-fun x721 () Bool)
(declare-fun x187 () Int)
(declare-fun x149 () Bool)
(declare-fun x381 () Int)
(declare-fun x712 () Bool)
(declare-fun x356 () Bool)
(declare-fun x256 () Int)
(declare-fun x56 () Bool)
(declare-fun x96 () Int)
(declare-fun x194 () Int)
(declare-fun x359 () Int)
(declare-fun x361 () Int)
(declare-fun x443 (Int) Int)
(declare-fun x643 () Int)
(declare-fun x137 () Bool)
(declare-fun x705 () Bool)
(declare-fun x614 (Int) Int)
(declare-fun x511 () Int)
(declare-fun x296 () Bool)
(declare-fun x820 () Bool)
(declare-fun x246 () Int)
(declare-fun x713 () Int)
(declare-fun x407 () Int)
(declare-fun x757 () Int)
(declare-fun x538 () Int)
(declare-fun x489 () Int)
(declare-fun x328 () Bool)
(declare-fun x775 () Int)
(declare-fun x213 () Bool)
(declare-fun x372 () Bool)
(declare-fun x355 () Int)
(declare-fun x626 () Bool)
(declare-fun x551 () Bool)
(declare-fun x535 () Int)
(declare-fun x824 () Int)
(declare-fun x93 () Bool)
(declare-fun x441 () Int)
(declare-fun x204 () Int)
(declare-fun x640 () Int)
(declare-fun x787 () Bool)
(declare-fun x472 () Int)
(declare-fun x34 () Int)
(declare-fun x563 () Int)
(declare-fun x537 () Bool)
(declare-fun x333 () Int)
(declare-fun x671 () Bool)
(declare-fun x379 () Int)
(declare-fun x503 () Int)
(declare-fun x657 () Bool)
(declare-fun x123 () Int)
(declare-fun x199 () Bool)
(declare-fun x401 () Int)
(declare-fun x462 () Bool)
(declare-fun x25 () Int)
(declare-fun x765 () Int)
(declare-fun x52 () Bool)
(declare-fun x456 () Int)
(declare-fun x46 () Int)
(declare-fun x130 () Bool)
(declare-fun x117 () Int)
(declare-fun x76 () Int)
(declare-fun x523 () Int)
(declare-fun x338 () Int)
(declare-fun x135 () Bool)
(declare-fun x606 (Int) Int)
(declare-fun x115 () Bool)
(declare-fun x167 (Int) Int)
(declare-fun x642 () Bool)
(declare-fun x237 () Bool)
(declare-fun x160 () Int)
(declare-fun x150 () Bool)
(declare-fun x268 () Bool)
(declare-fun x119 (Int) Int)
(declare-fun x752 () Int)
(declare-fun x385 () Int)
(declare-fun x184 () Int)
(declare-fun x502 () Bool)
(declare-fun x778 (Int) Int)
(declare-fun x373 () Int)
(declare-fun x54 () Int)
(declare-fun x416 () Int)
(declare-fun x440 () Int)
(declare-fun x804 () Int)
(declare-fun x639 () Bool)
(declare-fun x610 () Int)
(declare-fun x341 () Int)
(declare-fun x55 () Int)
(declare-fun x365 () Bool)
(declare-fun x327 () Int)
(declare-fun x70 () Int)
(declare-fun x315 () Bool)
(declare-fun x525 () Int)
(declare-fun x273 () Int)
(declare-fun x586 () Bool)
(declare-fun x790 () Int)
(declare-fun x514 (Int) Int)
(declare-fun x716 () Bool)
(declare-fun x493 () Int)
(declare-fun x821 () Int)
(declare-fun x701 () Int)
(declare-fun x834 () Int)
(declare-fun x658 () Int)
(declare-fun x798 () Int)
(declare-fun x289 () Bool)
(declare-fun x676 () Int)
(declare-fun x710 () Int)
(declare-fun x332 () Int)
(declare-fun x386 () Int)
(declare-fun x329 () Int)
(declare-fun x155 () Int)
(declare-fun x49 () Bool)
(declare-fun x325 () Int)
(declare-fun x260 () Int)
(declare-fun x762 () Int)
(declare-fun x344 () Int)
(declare-fun x801 () Int)
(declare-fun x708 () Int)
(declare-fun x445 () Bool)
(declare-fun x567 () Bool)
(declare-fun x139 () Int)
(declare-fun x766 () Int)
(declare-fun x807 () Int)
(declare-fun x409 () Int)
(declare-fun x817 () Bool)
(declare-fun x571 () Bool)
(declare-fun x189 () Int)
(declare-fun x212 () Bool)
(declare-fun x37 () Int)
(declare-fun x584 () Int)
(declare-fun x595 (Int) Int)
(declare-fun x393 () Int)
(declare-fun x646 () Bool)
(declare-fun x485 () Int)
(declare-fun x284 () Int)
(declare-fun x83 () Bool)
(declare-fun x35 () Bool)
(declare-fun x108 () Bool)
(declare-fun x28 () Int)
(declare-fun x29 () Int)
(declare-fun x479 () Int)
(declare-fun x81 () Bool)
(declare-fun x506 () Int)
(declare-fun x292 () Bool)
(declare-fun x534 () Int)
(declare-fun x796 () Bool)
(declare-fun x426 () Int)
(declare-fun x353 () Bool)
(declare-fun x162 () Int)
(declare-fun x793 () Bool)
(declare-fun x301 () Int)
(declare-fun x309 () Int)
(declare-fun x164 () Int)
(declare-fun x763 () Int)
(declare-fun x378 (Int Int) Int)
(declare-fun x190 () Int)
(declare-fun x478 () Int)
(declare-fun x592 () Int)
(declare-fun x504 () Int)
(declare-fun x635 () Bool)
(declare-fun x629 () Int)
(declare-fun x471 () Int)
(declare-fun x830 () Int)
(declare-fun x88 () Bool)
(declare-fun x732 () Bool)
(declare-fun x305 () Int)
(declare-fun x218 () Int)
(declare-fun x331 () Bool)
(declare-fun x110 () Bool)
(declare-fun x299 () Int)
(declare-fun x368 () Int)
(declare-fun x435 () Int)
(declare-fun x215 () Bool)
(declare-fun x461 () Int)
(declare-fun x233 () Int)
(declare-fun x628 () Int)
(declare-fun x209 () Int)
(declare-fun x782 () Int)
(declare-fun x714 (Int Int Int) Int)
(declare-fun x326 () Int)
(declare-fun x205 () Int)
(declare-fun x22 () Bool)
(declare-fun x86 () Bool)
(declare-fun x158 () Bool)
(declare-fun x369 () Int)
(declare-fun x687 () Int)
(declare-fun x559 () Bool)
(declare-fun x805 () Int)
(declare-fun x340 () Int)
(declare-fun x228 () Bool)
(declare-fun x437 () Int)
(declare-fun x263 () Int)
(declare-fun x600 () Bool)
(declare-fun x550 () Int)
(declare-fun x516 () Int)
(declare-fun x282 () Int)
(declare-fun x585 () Int)
(declare-fun x354 () Bool)
(declare-fun x448 () Int)
(declare-fun x608 () Int)
(declare-fun x105 () Bool)
(declare-fun x488 () Bool)
(declare-fun x573 () Int)
(declare-fun x317 () Bool)
(declare-fun x375 () Bool)
(declare-fun x262 () Int)
(declare-fun x207 () Bool)
(declare-fun x144 () Int)
(declare-fun x370 () Bool)
(declare-fun x109 () Int)
(declare-fun x838 () Int)
(declare-fun x645 () Int)
(declare-fun x680 () Int)
(declare-fun x101 () Int)
(declare-fun x459 () Bool)
(declare-fun x5 () Int)
(declare-fun x463 () Int)
(declare-fun x412 () Int)
(declare-fun x129 () Int)
(declare-fun x816 () Bool)
(declare-fun x696 (Int) Int)
(declare-fun x809 () Bool)
(declare-fun x169 () Int)
(declare-fun x457 () Int)
(declare-fun x306 () Int)
(declare-fun x183 () Bool)
(declare-fun x750 (Int Int) Int)
(declare-fun x400 () Bool)
(declare-fun x43 () Bool)
(declare-fun x699 () Bool)
(declare-fun x151 () Bool)
(declare-fun x399 () Bool)
(declare-fun x241 () Int)
(declare-fun x312 () Bool)
(declare-fun x417 () Bool)
(declare-fun x307 () Bool)
(declare-fun x121 () Int)
(declare-fun x376 () Bool)
(declare-fun x823 () Int)
(declare-fun x58 () Int)
(declare-fun x30 () Int)
(declare-fun x436 () Int)
(declare-fun x357 () Int)
(declare-fun x764 () Bool)
(declare-fun x179 () Bool)
(declare-fun x429 () Int)
(declare-fun x754 () Bool)
(declare-fun x728 () Int)
(declare-fun x264 () Int)
(declare-fun x85 (Int) Int)
(declare-fun x300 () Int)
(declare-fun x761 () Int)
(declare-fun x533 () Int)
(declare-fun x67 () Int)
(declare-fun x48 () Bool)
(declare-fun x254 () Int)
(declare-fun x590 () Int)
(declare-fun x394 () Bool)
(declare-fun x662 () Int)
(declare-fun x178 () Bool)
(declare-fun x36 () Int)
(declare-fun x104 () Bool)
(declare-fun x334 () Int)
(declare-fun x148 () Int)
(declare-fun x495 () Int)
(declare-fun x539 () Int)
(declare-fun x240 () Bool)
(declare-fun x243 () Int)
(declare-fun x589 () Int)
(declare-fun x414 () Int)
(declare-fun x261 () Int)
(declare-fun x704 () Bool)
(declare-fun x665 () Int)
(declare-fun x808 () Int)
(declare-fun x532 () Int)
(declare-fun x773 () Int)
(declare-fun x481 () Int)
(declare-fun x267 () Bool)
(declare-fun x785 () Int)
(declare-fun x63 () Int)
(declare-fun x513 () Bool)
(declare-fun x433 () Int)
(declare-fun x615 () Bool)
(declare-fun x742 () Bool)
(declare-fun x77 () Int)
(declare-fun x439 () Bool)
(declare-fun x758 () Int)
(declare-fun x470 () Bool)
(declare-fun x725 () Bool)
(declare-fun x659 () Bool)
(declare-fun x467 () Bool)
(declare-fun x71 () Bool)
(declare-fun x605 () Int)
(define-fun x302 ((x244 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x244) (>= x244 0)) x244 (- x244 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x490 ((x244 Int)) Int (ite (and (< x244 0) (>= x244 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x244 115792089237316195423570985008687907853269984665640564039457584007913129639936) x244))
(define-fun x1 ((x802 Int)) Bool (and (>= x802 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x802)))
(define-fun x576 ((x802 Int)) Bool (and (= (x221 x802 115792089237316195423570985008687907853269984665640564039457584007913129639935) x802) (= (x221 115792089237316195423570985008687907853269984665640564039457584007913129639935 x802) x802)))
(define-fun x111 ((x802 Int)) Bool (and (= 0 (x221 x802 0)) (= (x221 0 x802) 0)))
(define-fun x812 ((x802 Int)) Bool (= (x221 x802 x802) x802))
(define-fun x166 ((x802 Int)) Bool (and (x812 x802) (x576 x802) (x111 x802)))
(define-fun x234 ((x802 Int) (x360 Int)) Bool (= (x221 x802 x360) (x221 x360 x802)))
(define-fun x555 ((x802 Int) (x360 Int)) Bool (and (=> (>= x802 0) (>= x802 (x221 x802 x360))) (<= 0 (x221 x802 x360)) (=> (>= x360 0) (<= (x221 x802 x360) x360))))
(define-fun x579 ((x802 Int) (x360 Int)) Bool (and (x555 x802 x360) (x234 x802 x360)))
(define-fun x737 ((x802 Int)) Bool (= (mod x802 4294967296) (x221 x802 4294967295)))
(define-fun x60 ((x802 Int)) Bool (and (x737 x802) (x579 x802 4294967295)))
(define-fun x557 ((x802 Int)) Bool (= (x221 x802 79228162514264337593543950335) (mod x802 79228162514264337593543950336)))
(define-fun x227 ((x802 Int)) Bool (and (x557 x802) (x579 x802 79228162514264337593543950335)))
(define-fun x220 ((x802 Int)) Bool (= (mod x802 6277101735386680763835789423207666416102355444464034512896) (x221 x802 6277101735386680763835789423207666416102355444464034512895)))
(define-fun x90 ((x802 Int)) Bool (and (x220 x802) (x579 x802 6277101735386680763835789423207666416102355444464034512895)))
(define-fun x38 ((x802 Int)) Bool (= (mod x802 2) (x221 x802 1)))
(define-fun x616 ((x802 Int)) Bool (and (x579 x802 1) (x38 x802)))
(define-fun x819 ((x802 Int)) Bool (= (+ (mod x802 32) (x221 x802 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (mod x802 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x548 ((x802 Int)) Bool (and (x819 x802) (x579 x802 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(define-fun x279 ((x802 Int)) Bool (= (+ (x221 x802 4) (mod x802 4)) (mod x802 8)))
(define-fun x668 ((x802 Int)) Bool (and (x279 x802) (x579 x802 4)))
(define-fun x57 ((x802 Int)) Bool (= (+ (mod x802 2) (x221 x802 2)) (mod x802 4)))
(define-fun x637 ((x802 Int)) Bool (and (x579 x802 2) (x57 x802)))
(define-fun x843 ((x802 Int)) Bool (and (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x405 x802 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (x405 115792089237316195423570985008687907853269984665640564039457584007913129639935 x802) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(define-fun x11 ((x802 Int)) Bool (and (= x802 (x405 x802 0)) (= x802 (x405 0 x802))))
(define-fun x423 ((x802 Int)) Bool (= x802 (x405 x802 x802)))
(define-fun x314 ((x802 Int)) Bool (and (x423 x802) (x11 x802) (x843 x802)))
(define-fun x222 ((x802 Int) (x360 Int)) Bool (= (x405 x802 x360) (x405 x360 x802)))
(define-fun x69 ((x802 Int) (x360 Int)) Bool (and (>= (+ x802 x360) (x405 x802 x360)) (=> (<= 0 x360) (>= (x405 x802 x360) x360)) (=> (>= x802 0) (<= x802 (x405 x802 x360)))))
(define-fun x387 ((x802 Int) (x360 Int)) Bool (and (x222 x802 x360) (x69 x802 x360)))
(define-fun x570 ((x802 Int)) Bool (= (mod x802 256) (x221 x802 255)))
(define-fun x248 ((x802 Int)) Bool (and (x579 x802 255) (x570 x802)))
(define-fun x311 ((x802 Int)) Bool (= (+ (mod x802 32) (x221 x802 131040)) (mod x802 131072)))
(define-fun x122 ((x802 Int)) Bool (and (x579 x802 131040) (x311 x802)))
(define-fun x703 ((x755 Int)) Int (ite (< x755 x409) (x191 x755) 0))
(define-fun x641 ((x755 Int)) Int (ite (< x755 x205) (x681 x755) 0))
(define-fun x171 ((x755 Int)) Int (ite (< x755 x520) (x42 x755) 0))
(define-fun x530 ((x755 Int)) Int (ite (< x755 x264) (x514 x755) 0))
(define-fun x89 ((x755 Int)) Int 0)
(define-fun x745 ((x755 Int)) Int 0)
(define-fun x558 ((x755 Int)) Int 0)
(define-fun x118 ((x755 Int)) Int 0)
(define-fun x65 ((x755 Int)) Int 0)
(define-fun x78 ((x755 Int)) Int 0)
(define-fun x159 ((x755 Int)) Int 0)
(define-fun x44 ((x755 Int)) Int 0)
(define-fun x186 ((x755 Int)) Int 0)
(define-fun x13 ((x755 Int)) Int 0)
(define-fun x350 ((x755 Int)) Int 0)
(define-fun x770 ((x755 Int)) Int 0)
(define-fun x16 ((x755 Int)) Int 0)
(define-fun x747 ((x755 Int)) Int 0)
(define-fun x673 ((x755 Int)) Int 0)
(define-fun x498 ((x755 Int)) Int 0)
(define-fun x392 ((x755 Int)) Int 0)
(define-fun x842 ((x755 Int)) Int 0)
(define-fun x544 ((x755 Int)) Int 0)
(define-fun x175 ((x755 Int)) Int 0)
(define-fun x839 ((x755 Int)) Int 0)
(define-fun x826 ((x755 Int)) Int 0)
(define-fun x517 ((x755 Int)) Int 0)
(define-fun x2 ((x755 Int)) Int 0)
(define-fun x613 ((x755 Int)) Int 0)
(define-fun x214 ((x755 Int)) Int 0)
(define-fun x208 ((x755 Int)) Int 0)
(define-fun x786 ((x755 Int)) Int 0)
(define-fun x519 ((x755 Int)) Int 0)
(define-fun x229 ((x755 Int)) Int (ite (= x755 x738) x260 (x776 x755)))
(define-fun x188 ((x755 Int)) Int (ite (= x503 x755) x630 (x229 x755)))
(define-fun x621 ((x755 Int)) Int (ite (= x527 x755) x77 (x715 x755)))
(define-fun x620 ((x755 Int)) Int (ite (= x755 x322) x429 (x92 x755)))
(define-fun x278 ((x755 Int)) Int (ite (= x322 x755) 0 (x740 x755)))
(define-fun x469 ((x755 Int)) Int (ite (= x755 x322) x334 (x718 x755)))
(define-fun x366 ((x755 Int)) Int (ite (= x377 x755) x453 (x718 x755)))
(define-fun x582 ((x755 Int)) Int (ite (= x755 x377) x245 (x740 x755)))
(define-fun x707 ((x755 Int)) Int (ite (= x755 x369) x585 (x715 x755)))
(define-fun x507 ((x755 Int)) Int (ite (= x235 x755) x433 (x92 x755)))
(define-fun x324 ((x755 Int)) Int (ite (= x755 x235) 0 (x582 x755)))
(define-fun x475 ((x755 Int)) Int (ite (= x755 x235) x333 (x718 x755)))
(define-fun x425 ((x755 Int)) Int (ite x303 (ite x389 (x507 x755) (x92 x755)) (x620 x755)))
(define-fun x40 ((x755 Int)) Int (ite x363 (x92 x755) (ite x394 (x425 x755) (x92 x755))))
(define-fun x343 ((x755 Int)) Int (ite x303 (ite x389 (x475 x755) (x366 x755)) (x469 x755)))
(define-fun x512 ((x755 Int)) Int (ite x363 (x718 x755) (ite x394 (x343 x755) (x718 x755))))
(define-fun x835 ((x755 Int)) Int (ite (= x755 x7) x823 (x780 x755)))
(define-fun x632 ((x755 Int)) Int (ite (= x755 x326) 0 (x835 x755)))
(define-fun x711 ((x755 Int)) Int (ite x151 (x632 x755) (x780 x755)))
(define-fun x792 ((x755 Int)) Int (ite x363 (x780 x755) (ite x372 (x711 x755) (x780 x755))))
(define-fun x788 ((x755 Int)) Int (ite (= x755 x326) x645 (x606 x755)))
(define-fun x272 ((x755 Int)) Int (ite (= x755 x7) x838 (x606 x755)))
(define-fun x791 ((x755 Int)) Int (ite x151 (x788 x755) (x272 x755)))
(define-fun x181 ((x755 Int)) Int (ite x363 (x606 x755) (ite x372 (x791 x755) (x606 x755))))
(define-fun x568 ((x755 Int)) Int (ite x303 (ite x389 (x324 x755) (x740 x755)) (x278 x755)))
(define-fun x720 ((x755 Int)) Int (ite x363 (x740 x755) (ite x394 (x568 x755) (x740 x755))))
(define-fun x695 ((x755 Int)) Int (ite x303 (ite x389 (x707 x755) (x715 x755)) (x621 x755)))
(define-fun x402 ((x755 Int)) Int (ite x363 (x715 x755) (ite x394 (x695 x755) (x715 x755))))
(define-fun x581 ((x755 Int)) Int (ite (= x755 x474) x426 (x119 x755)))
(define-fun x491 ((x755 Int)) Int (ite x151 (x581 x755) (x119 x755)))
(define-fun x64 ((x755 Int)) Int (ite x363 (x119 x755) (ite x372 (x491 x755) (x119 x755))))
(define-fun x549 ((x755 Int)) Int (ite (= x755 x326) x477 (x143 x755)))
(define-fun x580 ((x755 Int)) Int (ite x151 (x549 x755) (x143 x755)))
(define-fun x686 ((x755 Int)) Int (ite x363 (x143 x755) (ite x372 (x580 x755) (x143 x755))))
(define-fun x483 ((x755 Int)) Int (ite (= x755 0) x32 (x509 x755)))
(define-fun x577 ((x755 Int)) Int (ite (> x805 x755) (x421 x755) 0))
(define-fun x61 ((x755 Int)) Int (ite (and (> x805 x755) (>= x755 0)) (x266 x755) (x577 x755)))
(define-fun x545 ((x755 Int)) Int (ite (and (<= x351 x755) (< x755 (+ x351 1))) (x61 (- (+ x50 x755) x351)) (x2 x755)))
(define-fun x75 ((x755 Int)) Int (ite (= x755 x254) 0 (x545 x755)))
(define-fun x147 ((x755 Int)) Int (ite (= x21 x755) 110026930297299635154336525195245038188021419673779079278965243793336073977856 (x118 x755)))
(define-fun x743 ((x755 Int)) Int (ite (= x755 x190) x441 (x147 x755)))
(define-fun x82 ((x755 Int)) Int (ite (= x755 x21) x680 (x743 x755)))
(define-fun x741 ((x755 Int)) Int (ite (= x755 x781) 46441568142033591978231907782937720737460700430992383298758718876245066514432 (x82 x755)))
(define-fun x271 ((x755 Int)) Int (ite (= x755 x34) x638 (x741 x755)))
(define-fun x424 ((x755 Int)) Int (ite (= x755 x634) x121 (x271 x755)))
(define-fun x321 ((x755 Int)) Int (ite (= x219 x755) 96 (x424 x755)))
(define-fun x744 ((x755 Int)) Int (ite (= x504 x755) x274 (x321 x755)))
(define-fun x23 ((x755 Int)) Int (ite (and (< x755 (+ x274 x273)) (<= x273 x755)) (x75 (- (+ x755 x351) x273)) (x744 x755)))
(define-fun x822 ((x755 Int)) Int (ite (= x755 x781) x32 (x23 x755)))
(define-fun x756 ((x755 Int)) Int (ite (and (>= x755 x781) (< x755 (+ x781 32))) (x483 (- x755 x781)) (x159 x755)))
(define-fun x136 ((x755 Int)) Int (ite x817 (x382 x755) (x167 x755)))
(define-fun x6 ((x755 Int)) Int (ite x817 (x217 x755) (x308 x755)))
(define-fun x529 ((x755 Int)) Int (ite x817 (x595 x755) (x831 x755)))
(define-fun x694 ((x755 Int)) Int (ite x817 (ite x817 (x595 x755) (x831 x755)) (x595 x755)))
(define-fun x587 ((x755 Int)) Int (ite x612 (x595 x755) (x694 x755)))
(define-fun x814 ((x755 Int)) Int (ite x817 (ite x817 (x217 x755) (x308 x755)) (x217 x755)))
(define-fun x140 ((x755 Int)) Int (ite x612 (x217 x755) (x814 x755)))
(define-fun x80 ((x755 Int)) Int (ite x817 (ite x817 (x382 x755) (x167 x755)) (x382 x755)))
(define-fun x501 ((x755 Int)) Int (ite x612 (x382 x755) (x80 x755)))
(define-fun x133 ((x755 Int)) Int (ite (= x629 x755) x364 (x18 x755)))
(define-fun x771 ((x755 Int)) Int (ite x294 (x595 x755) (ite x612 (x595 x755) (x694 x755))))
(define-fun x492 ((x755 Int)) Int (ite x294 (x217 x755) (ite x612 (x217 x755) (x814 x755))))
(define-fun x654 ((x755 Int)) Int (ite x294 (x382 x755) (ite x612 (x382 x755) (x80 x755))))
(define-fun x832 ((x755 Int)) Int 0)
(define-fun x652 ((x755 Int)) Int 0)
(define-fun x736 ((x755 Int)) Int 0)
(define-fun x450 ((x755 Int)) Int (ite (= x755 x25) x683 (x188 x755)))
(define-fun x667 ((x755 Int)) Int (ite (= x755 x503) x177 (x450 x755)))
(define-fun x203 ((x755 Int)) Int (ite (= x755 x37) x554 (x667 x755)))
(define-fun x454 ((x755 Int)) Int (ite (= x710 x755) 1 (x214 x755)))
(define-fun x211 ((x755 Int)) Int (ite (and (< x755 x416) (<= 132 x755)) (x23 (- (+ (x302 (+ 132 x781)) x755) 132)) (x530 x755)))
(define-fun x789 ((x755 Int)) Int (ite (= x755 128) x282 (x13 x755)))
(define-fun x87 ((x755 Int)) Int (ite (and (>= x755 160) (< x755 (+ x282 160))) (x61 (- (+ x50 x755) 160)) (x78 x755)))
(define-fun x774 ((x755 Int)) Int (ite (= x755 x169) 0 (x87 x755)))
(define-fun x342 ((x755 Int)) Int (ite (and (> (+ x298 x68) x755) (<= x298 x755)) (x61 (- (+ x805 x755) x298)) (x350 x755)))
(define-fun x15 ((x755 Int)) Int (ite x270 (x770 x755) (x342 x755)))
(define-fun x419 ((x755 Int)) Int (ite (= x701 x755) x68 (x175 x755)))
(define-fun x795 ((x755 Int)) Int (ite (= (x490 (- x539 (mod (mod x539 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x755) (x405 (x221 (x15 (x490 (- x539 (mod (mod x539 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x378 255 (mod (* 8 (x490 (- 31 (mod (mod x539 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x378 (x221 x539 255) (mod (* 8 (x490 (- 31 (mod (mod x539 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (x15 x755)))
(define-fun x840 ((x755 Int)) Int (ite x389 (x475 x755) (x366 x755)))
(define-fun x142 ((x755 Int)) Int (ite x389 (x707 x755) (x715 x755)))
(define-fun x223 ((x755 Int)) Int (ite x389 (x507 x755) (x92 x755)))
(define-fun x72 ((x755 Int)) Int (ite x389 (x324 x755) (x740 x755)))
(define-fun x8 ((x755 Int)) Int (ite x394 (x343 x755) (x718 x755)))
(define-fun x684 ((x755 Int)) Int (ite x394 (x695 x755) (x715 x755)))
(define-fun x624 ((x755 Int)) Int (ite x394 (x568 x755) (x740 x755)))
(define-fun x723 ((x755 Int)) Int (ite x394 (x425 x755) (x92 x755)))
(define-fun x182 ((x755 Int)) Int (ite x372 (x711 x755) (x780 x755)))
(define-fun x428 ((x755 Int)) Int (ite x372 (x791 x755) (x606 x755)))
(define-fun x666 ((x755 Int)) Int (ite x372 (x491 x755) (x119 x755)))
(define-fun x560 ((x755 Int)) Int (ite x372 (x580 x755) (x143 x755)))
(define-fun x252 ((x755 Int)) Int (ite (= 0 x755) x680 (x201 x755)))
(define-fun x751 ((x755 Int)) Int (ite (and (<= x21 x755) (> (+ x21 32) x755)) (x252 (- x755 x21)) (x89 x755)))
(assert (= (or x202 x730) x374))
(assert (x1 x700))
(assert (x1 x99))
(assert (x1 x74))
(assert (= (x494 115339776388732929035197660848497720713218148788040405586178452820382218977279) 0))
(assert (x314 x361))
(assert (=> (>= 10000 x503) (= (x494 x503) 0)))
(assert (x1 x810))
(assert (= (x778 (x588 32 x527)) 32))
(assert (< (x714 64 x687 x335) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (> (x588 32 x644) 10000))
(assert (= (x714 64 x638 153) (x494 (x714 64 x638 153))))
(assert (= 153 (x505 (x714 64 x269 153))))
(assert (x1 x313))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x714 64 x449 153)))
(assert (x1 x254))
(assert (= (x494 (x588 32 x255)) (x588 32 x255)))
(assert (x1 x499))
(assert (= (or x567 x767) x165))
(assert (x1 x298))
(assert (x1 x534))
(assert (x24 6277101735386680763835789423207666416102355444464034512895))
(assert (=> (<= x144 10000) (= (x494 x144) 0)))
(assert (x24 110026930297299635154336525195245038188021419673779079278965243793336073977856))
(assert (x166 x782))
(assert (= x759 (and x649 x659)))
(assert (x1 x441))
(assert (x1 x393))
(assert (> (x588 32 x813) 10000))
(assert (x1 x301))
(assert (= (div x437 452312848583266388373324160190187140051835877600158453279131187530910662656) (x566 x437 248)))
(assert (x1 x305))
(assert (= (x443 (x714 64 x810 152)) x810))
(assert (not (x24 (x714 64 x687 x335))))
(assert (x1 x129))
(assert (x1 x238))
(assert (x1 x675))
(assert (x1 x66))
(assert (x60 x364))
(assert (= (x443 (x588 32 x255)) x255))
(assert (> (x714 64 x121 2) 10000))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x714 64 x464 152)))
(assert (x1 x655))
(assert (x1 x734))
(assert (= (or x836 x9) x806))
(assert (x1 x385))
(assert (x1 x476))
(assert (x1 x592))
(assert (x1 x446))
(assert (= (x443 (x714 64 x687 x552)) x687))
(assert (= x685 (or x346 x307)))
(assert (=> (>= 10000 x441) (= 0 (x494 x441))))
(assert (x1 x54))
(assert (x1 x777))
(assert (x1 x438))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x714 64 x121 152)))
(assert (x1 x33))
(assert (x1 x426))
(assert (= x796 (and x565 (not x468))))
(assert (< (x714 64 x687 x658) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (x505 (x714 64 x638 153)) 153))
(assert (= x836 (and x125 x115)))
(assert (= (x494 (x714 64 x511 153)) (x714 64 x511 153)))
(assert (x1 x121))
(assert (x616 x834))
(assert (= x197 (and x312 x105)))
(assert (= (x494 (x714 64 x290 153)) (x714 64 x290 153)))
(assert (x1 x824))
(assert (< 10000 (x714 64 x511 153)))
(assert (= (x494 x815) (x494 (+ x815 1))))
(assert (= 152 (x505 (x714 64 x810 152))))
(assert (x1 x274))
(assert (= x115 (and (not x105) x312)))
(assert (not (x24 (x588 32 x768))))
(assert (= (x494 115792089237316195423570985008687907853269984665640564039457584007913129639935) 0))
(assert (x1 x528))
(assert (x1 x26))
(assert (x24 1722613502))
(assert (= 64 (x778 (x714 64 x810 152))))
(assert (x579 x168 x611))
(assert (= (or x434 x236) x339))
(assert (= (and (not x225) x212) x294))
(assert (x1 x510))
(assert (x1 x396))
(assert (= (x778 (x588 32 x474)) 32))
(assert (= x212 (or x49 (and x336 x513))))
(assert (< 10000 (x714 64 x687 1)))
(assert (x1 x482))
(assert (< (x588 32 x230) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x1 x610))
(assert (= 32 (x778 (x588 32 x369))))
(assert (< (x714 64 x511 153) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x166 x611))
(assert (x1 x4))
(assert (x1 x782))
(assert (= x578 (=> (and (or (and (= 0 x286) x383) (and (not x383) (and (= (x419 x701) x769) (>= x769 1) (= 1 x286) (= x539 (x302 (+ x701 32)))))) (and (= x383 (= 0 x341)) (= x174 (= x493 0)) (not x174) (= (x221 1 x168) x341))) x253)))
(assert (= (x714 64 x687 x552) (x494 (x714 64 x687 x552))))
(assert (x1 x32))
(assert (= x699 (and x374 x35)))
(assert (x1 x701))
(assert (x166 x539))
(assert (x1 x96))
(assert (= 0 (x494 79228162514264337593543950335)))
(assert (=> (>= 10000 x277) (= (x494 x277) 0)))
(assert (x1 x775))
(assert (x1 x532))
(assert (= (or x685 x699) x336))
(assert (x1 x320))
(assert (x1 x123))
(assert (x1 x432))
(assert (= (or x285 x460) x565))
(assert (x1 x823))
(assert (x166 x410))
(assert (x227 x4))
(assert (= x559 (and x796 x607)))
(assert (x1 x506))
(assert (= x20 (=> (and (= x148 x98) (= x734 (x221 79228162514264337593543950335 x4)) (= x427 x727) (= x148 (x490 (- x734 x800)))) x315)))
(assert (< 10000 (x714 64 x464 152)))
(assert (x1 x338))
(assert (x1 x187))
(assert (= (x494 (+ x563 x643)) (x494 x563)))
(assert (= (div x359 452312848583266388373324160190187140051835877600158453279131187530910662656) (x566 x359 248)))
(assert (x1 x589))
(assert (x387 (x221 (x15 (x490 (- x539 (mod (mod x539 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x378 255 (mod (* (x490 (- 31 (mod (mod x539 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 8) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (x378 (x221 255 x539) (mod (* 8 (x490 (- 31 (mod (mod x539 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (= (x443 (x714 64 x441 155)) x441))
(assert (= (x505 (x714 64 x687 x180)) x180))
(assert (= (or x197 x372) x615))
(assert (= (x494 (x588 32 x768)) (x588 32 x768)))
(assert (x1 x683))
(assert (x1 x553))
(assert (x668 x782))
(assert (x1 x828))
(assert (= x172 (x443 (x588 32 x172))))
(assert (x1 x429))
(assert (= (or x389 x370) x303))
(assert (= (x778 (x588 32 x255)) 32))
(assert (= x404 (or x817 x71)))
(assert (x1 x192))
(assert (= (or x466 x470) x635))
(assert (x1 x511))
(assert (x1 x299))
(assert (x24 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (x24 452312848583266388373324160190187140051835877600158453279131187530910662656))
(assert (x1 x275))
(assert (= (x494 4081125666) 0))
(assert (x1 x584))
(assert (x1 x373))
(assert (x1 x318))
(assert (x1 x772))
(assert (x1 x391))
(assert (< 10000 (x714 64 x810 152)))
(assert (= (x494 (x714 64 x464 152)) (x714 64 x464 152)))
(assert (= (x494 (x588 32 x527)) (x588 32 x527)))
(assert (= (x566 x739 x441) (ite (< x441 256) (div x739 (x465 2 x441)) 0)))
(assert (x1 x628))
(assert (x1 x297))
(assert (= (x494 (x588 32 x813)) (x588 32 x813)))
(assert (= x120 (=> (and (= (= x820 x328) x502) (= x742 false) (= false x43) (= x537 false) (= x328 (not x660)) (= x660 (= 0 x368)) (= false x249) (= x536 0)) x502)))
(assert (= (or x199 x639) x561))
(assert (= (x778 (x588 32 x768)) 32))
(assert (= (and x376 x794) x370))
(assert (x314 (x378 (x221 255 x539) (mod (* (x490 (- 31 (mod (mod x539 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 8) 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x1 x834))
(assert (x1 x617))
(assert (x1 x627))
(assert (x122 x232))
(assert (x1 x436))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x714 64 x810 152)))
(assert (= (x494 131040) 0))
(assert (x1 x493))
(assert (=> (<= x464 10000) (= (x494 x464) 0)))
(assert (x1 x329))
(assert (x1 x783))
(assert (= (x494 115792089237316195423570985008687907853269984665640564039457584007913129639872) 0))
(assert (= x658 (x505 (x714 64 x687 x658))))
(assert (x1 x415))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x714 64 x441 155)))
(assert (x1 x693))
(assert (x1 x36))
(assert (= (x778 (x714 64 x464 152)) 64))
(assert (= (x778 (x714 64 x449 153)) 64))
(assert (= 0 (x494 6277101735386680763835789423207666416102355444464034512895)))
(assert (not (x24 (x714 64 x638 153))))
(assert (not (x24 (x714 64 x687 x658))))
(assert (x1 x640))
(assert (> (x714 64 x449 153) 10000))
(assert (x1 x554))
(assert (= x724 (=> (and (= (x566 x739 x441) x834) (= (x302 (+ x351 1)) x254) (= (= 1 x96) x354) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639872 x710)) (= x351 (x302 (+ x710 32))) (< x710 x781) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639872 x710)) (= (x302 (+ 64 x710)) x781) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x710) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x710) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639872 x710)) (= (x221 1 x834) x775) (<= x710 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= 1 x665) (= 1 x775)) (and (=> (not x354) x210) (=> (and x354 (and (= x226 x332) (= (x302 (+ 96 x34)) x504) (= x130 (< 0 x525)) (= x803 (x709 x357)) (= x525 (x211 100)) (= x515 x416) (= (x302 (+ 32 x504)) x273) (<= x416 57896044618658097711785492504343953926634992332820282019728792003956564819967) (= x280 false) (= 46441568142033591978231907782937720737460700430992383298758718876245066514432 x584) (>= 127 x36) (= x457 1722613502) (>= x515 132) (= (x221 115792089237316195423570985008687907853269984665640564039457584007913129639904 x785) x828) (<= x808 1461501637330902918203684832716283019655932542975) (= x332 x121) (= 96 x510) (= x784 x638) (= x34 (x302 (+ 4 x781))) (= x274 (x454 x710)) (= (x302 (+ 32 x634)) x219) (not (< x515 x422)) (>= x803 1) (= (x302 (+ x34 32)) x634) (<= x525 18446744073709551615) x317 (= (x302 (+ 31 x274)) x785) (= x317 (= (x530 100) x274)) (= false x73) (= (x302 (+ x273 x828)) x101) (= (x490 (- x101 x781)) x416) (>= x416 132) (<= x36 127) (<= 1 x808) (= (+ 132 x525) x422) (<= x515 57896044618658097711785492504343953926634992332820282019728792003956564819967) (= x503 x808))) (and (=> (and (= 0 x444) (not x130)) x716) (=> (and (and (or (and (not x656) (and (= 0 x4) (= (x378 1 x687) x139) (= x246 0) (= x139 x760))) (and x656 (and (= x760 0) (= x4 x618)))) (and (= x598 1) (>= x476 1) (= (x566 x359 248) x687) (= (x714 64 x687 1) x31) (= x656 (< 0 x480)) (= (x211 132) x359) (<= 1 x525) (>= 18446744073709551615 x525) (= (x119 x31) x476))) x130) x650)))))))
(assert (x1 x710))
(assert (x1 x594))
(assert (x1 x70))
(assert (x1 x251))
(assert (= (and x268 x56) x767))
(assert (x90 x574))
(assert (= (or x145 x303) x394))
(assert (x24 4248375386))
(assert (x548 x785))
(assert (x579 x410 x708))
(assert (= (x494 x29) (x494 (+ x29 x393))))
(assert (x1 x540))
(assert (< (x714 64 x290 153) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (x505 (x714 64 x687 x335)) x335))
(assert (= (and x216 x130) x642))
(assert (= 152 (x505 (x714 64 x121 152))))
(assert (x1 x401))
(assert (not (x24 (x588 32 x474))))
(assert (= x9 (and (not x125) x115)))
(assert (x1 x593))
(assert (x1 x761))
(assert (= (x443 (x714 64 x687 x180)) x687))
(assert (x24 324282958))
(assert (= (x778 (x714 64 x121 2)) 64))
(assert (= (and x267 (not x319)) x719))
(assert (= x626 (and x659 (not x649))))
(assert (x1 x431))
(assert (x1 x189))
(assert (x1 x368))
(assert (= (mod (ite (> 256 x608) (x465 2 x608) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x378 1 x608)))
(assert (= (mod (ite (> 256 (x566 x124 248)) (x465 2 (x566 x124 248)) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x378 1 (x566 x124 248))))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x714 64 x687 1)))
(assert (x1 x520))
(assert (x1 x45))
(assert (= (=> (and (<= 1 x168) (>= 6277101735386680763835789423207666416102355444464034512895 x168) (= (not (< 0 x440)) x231) (= x611 (- x168 1)) (= x440 (x221 x168 x611))) (and x231 (=> (= 1 x68) x81))) x289))
(assert (= (and (not x656) x642) x460))
(assert (x1 x76))
(assert (x1 x618))
(assert (x1 x388))
(assert (= (and x106 x583) x730))
(assert (= (x494 (x588 32 x230)) (x588 32 x230)))
(assert (< (x588 32 x527) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x1 x98))
(assert (x1 x418))
(assert (x1 x141))
(assert (=> (>= 10000 x638) (= (x494 x638) 0)))
(assert (> (x714 64 x441 3) 10000))
(assert (x166 x596))
(assert (x166 255))
(assert (= (and (not x178) x635) x764))
(assert (x1 x435))
(assert (= (x778 (x714 64 x687 1)) 64))
(assert (x24 57896044618658097711785492504343953926634992332820282019728792003956564819967))
(assert (not (x24 (x714 64 x687 x552))))
(assert (= (x566 x109 248) (div x109 452312848583266388373324160190187140051835877600158453279131187530910662656)))
(assert (x1 x444))
(assert (=> (>= 10000 x233) (= 0 (x494 x233))))
(assert (x1 x395))
(assert (not (x24 (x588 32 x644))))
(assert (x1 x611))
(assert (= (x443 (x588 32 x527)) x527))
(assert (= (x443 (x588 32 x768)) x768))
(assert (x1 x574))
(assert (x1 x663))
(assert (x1 x760))
(assert (not (x24 (x588 32 x369))))
(assert (= 0 (x494 4248375386)))
(assert (x1 x525))
(assert (x1 x194))
(assert (< (x588 32 x172) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (> (x588 32 x474) 10000))
(assert (x1 x351))
(assert (= (x494 57896044618658097711785492504343953926634992332820282019728792003956564819967) 0))
(assert (= x753 (=> (= x107 x574) x293)))
(assert (x1 x631))
(assert (x1 x453))
(assert (x166 x834))
(assert (x166 4))
(assert (x1 x524))
(assert (= x121 (x443 (x714 64 x121 152))))
(assert (x1 x63))
(assert (= x731 (=> (and (and (= (x143 x7) x531) (= x189 (x221 4294967295 x364)) (>= 4294967295 x531) (= x110 (= x531 x189))) (or (and x110 (= (x221 79228162514264337593543950335 x596) x838)) (and (not x110) (and (= (x221 4294967295 x364) x477) (not (= x427 115792089237316195423570985008687907853269984665640564039457584007913129639840)) (= x161 (x588 32 x474)) (<= x427 115792089237316195423570985008687907853269984665640564039457584007913129639934) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639840 x427)) (<= x427 115792089237316195423570985008687907853269984665640564039457584007913129639934) (<= x427 115792089237316195423570985008687907853269984665640564039457584007913129639934) (> x435 x427) (= x474 (x714 64 x687 1)) (= x435 (x302 (+ x427 96))) (= x241 (x119 x474)) (= (x302 (+ 1 x241)) x426) (= x326 (+ x161 x241)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639840 x427)) (= (x221 79228162514264337593543950335 x596) x645) (= x823 (x221 4294967295 x364)))))) x672)))
(assert (x1 x282))
(assert (x1 x333))
(assert (x1 x766))
(assert (= (=> (and (and (= x700 (x419 x701)) (= x455 (> x700 x286))) (or (and (= x329 1) x455) (and (not x455) (= (ite x455 1 0) x329)))) x113) x253))
(assert (x166 x631))
(assert (x1 x688))
(assert (x1 x645))
(assert (= (x494 (x714 64 x687 x180)) (x714 64 x687 x180)))
(assert (= 0 (x494 115792089237316195423570985008687907853269984665640564039457584007913129639840)))
(assert (=> (>= 10000 x25) (= (x494 x25) 0)))
(assert (x1 x601))
(assert (x1 x781))
(assert (x1 x114))
(assert (x1 x364))
(assert (x1 x829))
(assert (= (and (not x35) x374) x150))
(assert (x1 x798))
(assert (= (x778 (x714 64 x638 153)) 64))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x714 64 x687 x552)))
(assert (= x609 (or x292 x809)))
(assert (= (and (not x705) x228) x612))
(assert (x166 x574))
(assert (x1 x233))
(assert (x1 x347))
(assert (x1 x539))
(assert (x1 x139))
(assert (x314 x247))
(assert (x1 x316))
(assert (= (x494 1363191112) 0))
(assert (x1 x12))
(assert (= 64 (x778 (x714 64 x441 3))))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x714 64 x441 3)))
(assert (x1 x591))
(assert (x1 x21))
(assert (= (x778 (x714 64 x687 x180)) 64))
(assert (x1 x190))
(assert (x1 x427))
(assert (x1 x739))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x714 64 x638 153)))
(assert (x1 x416))
(assert (= (or x559 x394) x312))
(assert (= (x494 x489) (x494 (+ x535 x489))))
(assert (x1 x535))
(assert (x1 x653))
(assert (x1 x247))
(assert (< 10000 (x714 64 x687 x552)))
(assert (x637 x168))
(assert (not (x24 (x714 64 x121 152))))
(assert (x24 115792089237316195423570985008687907853269984665640564039457584007913129639840))
(assert (not (x24 (x714 64 x121 2))))
(assert (not (x24 (x714 64 x290 153))))
(assert (x1 x687))
(assert (= (x505 (x714 64 x449 153)) 153))
(assert (x1 x200))
(assert (= (x494 (x714 64 x449 153)) (x714 64 x449 153)))
(assert (= x650 (=> (and (= (x714 64 x687 x335) x345) (= x452 (x715 x345)) (= (= 0 x452) x468) (= x335 (x714 64 x121 2))) (and (=> (and x468 (and (= (+ x563 x643) x322) (= x334 (x221 79228162514264337593543950335 x4)) (= (x302 (+ 1 x643)) x77) (= x727 224) (= 0 x800) (= x527 (x714 64 x687 x552)) (= x552 (x714 64 x121 2)) (= (x715 x527) x643) (= x563 (x588 32 x527)) (= x429 (x221 4294967295 x364)))) x20) (=> (and (not x468) (and (= (x714 64 x121 2) x180) (>= 79228162514264337593543950335 x395) (= x518 (x221 79228162514264337593543950335 x4)) (= x607 (= x395 x518)) (= (x588 32 x768) x390) (< x682 x256) (>= x256 1) (= (x714 64 x687 x180) x768) (= x377 (+ x390 x682)) (= (- x452 1) x682) (= x256 (x715 x768)) (= x395 (x718 x377)) (>= x452 1))) (and (=> (and (and (and (= (= x132 x524) x794) (= x132 (x92 x377)) (= x524 (x221 4294967295 x364)) (>= 4294967295 x132)) (or (and (and (= x585 (x302 (+ 1 x393))) (= x29 (x588 32 x369)) (= (x221 4294967295 x364) x245) (= x369 (x714 64 x687 x658)) (= x433 (x221 4294967295 x364)) (= (x221 79228162514264337593543950335 x4) x333) (= x658 (x714 64 x121 2)) (= (+ x393 x29) x235) (= (x715 x369) x393) (= x779 224)) (not x794)) (and x794 (and (= x779 128) (= x453 (x221 79228162514264337593543950335 x4)))))) (not x607)) x646) (=> (and x607 (and (= x427 128) (= x98 0))) x315)))))))
(assert (x1 x68))
(assert (x1 x827))
(assert (= (x505 (x714 64 x290 153)) 153))
(assert (x227 x98))
(assert (x1 x784))
(assert (x1 x25))
(assert (< 10000 (x588 32 x230)))
(assert (x166 79228162514264337593543950335))
(assert (= (x378 1 (x566 x12 248)) (mod (ite (> 256 (x566 x12 248)) (x465 2 (x566 x12 248)) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x166 x444))
(assert (x24 115339776388732929035197660848497720713218148788040405586178452820382218977279))
(assert (= (x778 (x588 32 x230)) 32))
(assert (< (x588 32 x813) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x1 x422))
(assert (x24 131040))
(assert (= (x505 (x714 64 x511 153)) 153))
(assert (= x644 (x443 (x588 32 x644))))
(assert (x1 x838))
(assert (= (x505 (x714 64 x441 3)) 3))
(assert (x1 x623))
(assert (x1 x682))
(assert (= x49 (and (not x513) x336)))
(assert (x1 x204))
(assert (x1 x515))
(assert (x1 x219))
(assert (x1 x590))
(assert (x1 x95))
(assert (= x51 (=> (and (and (and (< x304 x805) (not (> x55 x805)) (= x209 (+ 4 x62)) (= x683 (x188 x25)) (> x805 x54) (= x160 (x221 4 x782)) (= x55 (+ x601 x647)) (<= x160 3) (= false x749) (= x827 2) (= (+ x670 160) x21) (= x442 (x789 128)) (= (+ x352 4) x689) (= x601 (+ 32 x689)) (<= x406 127) (= false x207) (= x647 (* 32 x526)) (>= 18446744073709551615 x282) (= (+ 160 x282) x169) (>= 256 x442) (= x431 0) (= x25 x713) (= (x61 x209) x282) (<= x406 127) (= (+ x50 x282) x481) (= x495 x177) (not (> x481 x805)) (= x415 (x789 128)) (= x304 (+ x689 31)) (>= 255 x608) (= (* x299 32) x670) (<= x526 18446744073709551615) (= 128 x384) (= (x61 x689) x526) (= x54 (+ x209 31)) (= x495 (x450 x503)) (<= 1 x28) (= (+ 32 x209) x50) (= (div (+ x282 31) 32) x299) (= x28 (x709 x503)) (= x367 1363191112) (= x35 (= x415 0))) (= x364 x569)) (and (= (x266 4) x352) (= false x108) (= x603 (= 0 x358)) (>= 18446744073709551615 x62) (= false x677) (= x99 x352) (>= 18446744073709551615 x352) (= x62 x76) (= (x266 36) x62) (= 0 x288) (= false x103) (= x508 (= x240 x572)) (= false x27) (= (x266 0) x316) x508 (= x316 x200) (= false x156) (= x572 (not x603)))) (and (=> (and (and (= x361 (x378 1 (x566 x124 248))) (= x761 (x789 128)) (= x807 (x789 128)) (= x586 (> x761 1)) (>= x807 1) (= x124 (x774 160))) (not x35)) (and (=> x586 x126) (=> (and (= x107 x361) (not x586)) x753))) (=> (and x35 (= x574 0)) x293)))))
(assert (= (and x150 x586) x307))
(assert (> (x714 64 x687 x335) 10000))
(assert (x166 6277101735386680763835789423207666416102355444464034512895))
(assert (= (x494 (x714 64 x687 1)) (x714 64 x687 1)))
(assert (= (or x363 x615) x267))
(assert (x1 x198))
(assert (x1 x344))
(assert (not (x24 (x714 64 x687 1))))
(assert (= (x778 (x588 32 x172)) 32))
(assert (x1 x273))
(assert (= (and x635 x178) x270))
(assert (x1 x157))
(assert (= (=> (= (not (> x301 1)) x729) (and x135 x729)) x210))
(assert (and (= (x465 2 109) 649037107316853453566312041152512) (= (x465 2 214) 26328072917139296674479506920917608079723773850137277813577744384) (= 28269553036454149273332760011886696253239742350009903329945699220681916416 (x465 2 244)) (= (x465 2 110) 1298074214633706907132624082305024) (= (x465 2 116) 83076749736557242056487941267521536) (= 7237005577332262213973186563042994240829374041602535252466099000494570602496 (x465 2 252)) (= (x465 2 142) 5575186299632655785383929568162090376495104) (= (x465 2 12) 4096) (= 2305843009213693952 (x465 2 61)) (= (x465 2 64) 18446744073709551616) (= 37778931862957161709568 (x465 2 75)) (= 562949953421312 (x465 2 49)) (= 210624583337114373395836055367340864637790190801098222508621955072 (x465 2 217)) (= (x465 2 135) 43556142965880123323311949751266331066368) (= (x465 2 108) 324518553658426726783156020576256) (= (x465 2 71) 2361183241434822606848) (= 316912650057057350374175801344 (x465 2 98)) (= (x465 2 223) 13479973333575319897333507543509815336818572211270286240551805124608) (= 98079714615416886934934209737619787751599303819750539264 (x465 2 186)) (= (x465 2 247) 226156424291633194186662080095093570025917938800079226639565593765455331328) (= (x465 2 52) 4503599627370496) (= (x465 2 248) 452312848583266388373324160190187140051835877600158453279131187530910662656) (= 47890485652059026823698344598447161988085597568237568 (x465 2 175)) (= (x465 2 151) 2854495385411919762116571938898990272765493248) (= 2097152 (x465 2 21)) (= (x465 2 241) 3533694129556768659166595001485837031654967793751237916243212402585239552) (= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x465 2 256)) (= (x465 2 106) 81129638414606681695789005144064) (= (x465 2 45) 35184372088832) (= (x465 2 239) 883423532389192164791648750371459257913741948437809479060803100646309888) (= 1208925819614629174706176 (x465 2 80)) (= (x465 2 141) 2787593149816327892691964784081045188247552) (= 1 (x465 2 0)) (= 8589934592 (x465 2 33)) (= 1180591620717411303424 (x465 2 70)) (= 803469022129495137770981046170581301261101496891396417650688 (x465 2 199)) (= 17592186044416 (x465 2 44)) (= 12259964326927110866866776217202473468949912977468817408 (x465 2 183)) (= (x465 2 152) 5708990770823839524233143877797980545530986496) (= 348449143727040986586495598010130648530944 (x465 2 138)) (= 11150372599265311570767859136324180752990208 (x465 2 143)) (= 401734511064747568885490523085290650630550748445698208825344 (x465 2 198)) (= (x465 2 236) 110427941548649020598956093796432407239217743554726184882600387580788736) (= (x465 2 184) 24519928653854221733733552434404946937899825954937634816) (= 2722258935367507707706996859454145691648 (x465 2 131)) (= 748288838313422294120286634350736906063837462003712 (x465 2 169)) (= (x465 2 123) 10633823966279326983230456482242756608) (= 182687704666362864775460604089535377456991567872 (x465 2 157)) (= 633825300114114700748351602688 (x465 2 99)) (= (x465 2 181) 3064991081731777716716694054300618367237478244367204352) (= 2596148429267413814265248164610048 (x465 2 111)) (= (x465 2 159) 730750818665451459101842416358141509827966271488) (= 2993155353253689176481146537402947624255349848014848 (x465 2 171)) (= 4194304 (x465 2 22)) (= (x465 2 84) 19342813113834066795298816) (= 3369993333393829974333376885877453834204643052817571560137951281152 (x465 2 221)) (= 55213970774324510299478046898216203619608871777363092441300193790394368 (x465 2 235)) (= (x465 2 234) 27606985387162255149739023449108101809804435888681546220650096895197184) (= (x465 2 209) 822752278660603021077484591278675252491367932816789931674304512) (= (x465 2 66) 73786976294838206464) (= 2048 (x465 2 11)) (= 196159429230833773869868419475239575503198607639501078528 (x465 2 187)) (= (x465 2 19) 524288) (= (x465 2 146) 89202980794122492566142873090593446023921664) (= 8192 (x465 2 13)) (= (x465 2 218) 421249166674228746791672110734681729275580381602196445017243910144) (= 8796093022208 (x465 2 43)) (= (x465 2 46) 70368744177664) (= (x465 2 34) 17179869184) (= 274877906944 (x465 2 38)) (= (x465 2 92) 4951760157141521099596496896) (= 1461501637330902918203684832716283019655932542976 (x465 2 160)) (= (x465 2 222) 6739986666787659948666753771754907668409286105635143120275902562304) (= 904625697166532776746648320380374280103671755200316906558262375061821325312 (x465 2 249)) (= 22300745198530623141535718272648361505980416 (x465 2 144)) (= (x465 2 57) 144115188075855872) (= (x465 2 5) 32) (= 105312291668557186697918027683670432318895095400549111254310977536 (x465 2 216)) (= 4835703278458516698824704 (x465 2 82)) (= (x465 2 54) 18014398509481984) (= (x465 2 161) 2923003274661805836407369665432566039311865085952) (= 9007199254740992 (x465 2 53)) (= 2 (x465 2 1)) (= 14474011154664524427946373126085988481658748083205070504932198000989141204992 (x465 2 253)) (= (x465 2 145) 44601490397061246283071436545296723011960832) (= 26959946667150639794667015087019630673637144422540572481103610249216 (x465 2 224)) (= 162259276829213363391578010288128 (x465 2 107)) (= (x465 2 188) 392318858461667547739736838950479151006397215279002157056) (= (x465 2 97) 158456325028528675187087900672) (= 16777216 (x465 2 24)) (= (x465 2 121) 2658455991569831745807614120560689152) (= 25108406941546723055343157692830665664409421777856138051584 (x465 2 194)) (= 7067388259113537318333190002971674063309935587502475832486424805170479104 (x465 2 242)) (= 1809251394333065553493296640760748560207343510400633813116524750123642650624 (x465 2 250)) (= (x465 2 51) 2251799813685248) (= 576460752303423488 (x465 2 59)) (= 5316911983139663491615228241121378304 (x465 2 122)) (= (x465 2 105) 40564819207303340847894502572032) (= (x465 2 42) 4398046511104) (= (x465 2 114) 20769187434139310514121985316880384) (= 13164036458569648337239753460458804039861886925068638906788872192 (x465 2 213)) (= 215679573337205118357336120696157045389097155380324579848828881993728 (x465 2 227)) (= (x465 2 67) 147573952589676412928) (= 2535301200456458802993406410752 (x465 2 101)) (= 65536 (x465 2 16)) (= (x465 2 191) 3138550867693340381917894711603833208051177722232017256448) (= (x465 2 233) 13803492693581127574869511724554050904902217944340773110325048447598592) (= 53919893334301279589334030174039261347274288845081144962207220498432 (x465 2 225)) (= (x465 2 132) 5444517870735015415413993718908291383296) (= 1393796574908163946345982392040522594123776 (x465 2 140)) (= 9903520314283042199192993792 (x465 2 93)) (= 20282409603651670423947251286016 (x465 2 104)) (= (x465 2 197) 200867255532373784442745261542645325315275374222849104412672) (= 100433627766186892221372630771322662657637687111424552206336 (x465 2 196)) (= (x465 2 226) 107839786668602559178668060348078522694548577690162289924414440996864) (= (x465 2 83) 9671406556917033397649408) (= (x465 2 231) 3450873173395281893717377931138512726225554486085193277581262111899648) (= 166153499473114484112975882535043072 (x465 2 117)) (= (x465 2 47) 140737488355328) (= 8388608 (x465 2 23)) (= (x465 2 69) 590295810358705651712) (= (x465 2 26) 67108864) (= 18889465931478580854784 (x465 2 74)) (= 50216813883093446110686315385661331328818843555712276103168 (x465 2 195)) (= 1645504557321206042154969182557350504982735865633579863348609024 (x465 2 210)) (= 295147905179352825856 (x465 2 68)) (= 128 (x465 2 7)) (= (x465 2 202) 6427752177035961102167848369364650410088811975131171341205504) (= (x465 2 60) 1152921504606846976) (= 49039857307708443467467104868809893875799651909875269632 (x465 2 185)) (= (x465 2 173) 11972621413014756705924586149611790497021399392059392) (= (x465 2 166) 93536104789177786765035829293842113257979682750464) (= 1766847064778384329583297500742918515827483896875618958121606201292619776 (x465 2 240)) (= 766247770432944429179173513575154591809369561091801088 (x465 2 179)) (= 151115727451828646838272 (x465 2 77)) (= (x465 2 232) 6901746346790563787434755862277025452451108972170386555162524223799296) (= (x465 2 133) 10889035741470030830827987437816582766592) (= 302231454903657293676544 (x465 2 78)) (= (x465 2 3) 8) (= (x465 2 147) 178405961588244985132285746181186892047843328) (= 1237940039285380274899124224 (x465 2 90)) (= (x465 2 128) 340282366920938463463374607431768211456) (= 6582018229284824168619876730229402019930943462534319453394436096 (x465 2 212)) (= 1569275433846670190958947355801916604025588861116008628224 (x465 2 190)) (= (x465 2 153) 11417981541647679048466287755595961091061972992) (= 23945242826029513411849172299223580994042798784118784 (x465 2 174)) (= 2147483648 (x465 2 31)) (= 21778071482940061661655974875633165533184 (x465 2 134)) (= 512 (x465 2 9)) (= 28948022309329048855892746252171976963317496166410141009864396001978282409984 (x465 2 254)) (= (x465 2 205) 51422017416287688817342786954917203280710495801049370729644032) (= (x465 2 164) 23384026197294446691258957323460528314494920687616) (= 3291009114642412084309938365114701009965471731267159726697218048 (x465 2 211)) (= 102844034832575377634685573909834406561420991602098741459288064 (x465 2 206)) (= 154742504910672534362390528 (x465 2 87)) (= 9444732965739290427392 (x465 2 73)) (= (x465 2 112) 5192296858534827628530496329220096) (= 2199023255552 (x465 2 41)) (= (x465 2 154) 22835963083295358096932575511191922182123945984) (= (x465 2 15) 32768) (= 356811923176489970264571492362373784095686656 (x465 2 148)) (= (x465 2 158) 365375409332725729550921208179070754913983135744) (= 79228162514264337593543950336 (x465 2 96)) (= 784637716923335095479473677900958302012794430558004314112 (x465 2 189)) (= (x465 2 201) 3213876088517980551083924184682325205044405987565585670602752) (= (x465 2 91) 2475880078570760549798248448) (= 46768052394588893382517914646921056628989841375232 (x465 2 165)) (= 11692013098647223345629478661730264157247460343808 (x465 2 163)) (= (x465 2 72) 4722366482869645213696) (= 1048576 (x465 2 20)) (= (x465 2 245) 56539106072908298546665520023773392506479484700019806659891398441363832832) (= 205688069665150755269371147819668813122841983204197482918576128 (x465 2 207)) (= 57896044618658097711785492504343953926634992332820282019728792003956564819968 (x465 2 255)) (= 411376139330301510538742295639337626245683966408394965837152256 (x465 2 208)) (= (x465 2 89) 618970019642690137449562112) (= 1024 (x465 2 10)) (= 604462909807314587353088 (x465 2 79)) (= (x465 2 55) 36028797018963968) (= 441711766194596082395824375185729628956870974218904739530401550323154944 (x465 2 238)) (= 431359146674410236714672241392314090778194310760649159697657763987456 (x465 2 228)) (= (x465 2 120) 1329227995784915872903807060280344576) (= 713623846352979940529142984724747568191373312 (x465 2 149)) (= 77371252455336267181195264 (x465 2 86)) (= 842498333348457493583344221469363458551160763204392890034487820288 (x465 2 219)) (= (x465 2 14) 16384) (= 332306998946228968225951765070086144 (x465 2 118)) (= (x465 2 28) 268435456) (= 3618502788666131106986593281521497120414687020801267626233049500247285301248 (x465 2 251)) (= 87112285931760246646623899502532662132736 (x465 2 136)) (= 170141183460469231731687303715884105728 (x465 2 127)) (= 549755813888 (x465 2 39)) (= (x465 2 237) 220855883097298041197912187592864814478435487109452369765200775161577472) (= 68719476736 (x465 2 36)) (= (x465 2 182) 6129982163463555433433388108601236734474956488734408704) (= 113078212145816597093331040047546785012958969400039613319782796882727665664 (x465 2 246)) (= 14134776518227074636666380005943348126619871175004951664972849610340958208 (x465 2 243)) (= 1099511627776 (x465 2 40)) (= 131072 (x465 2 17)) (= 1073741824 (x465 2 30)) (= 75557863725914323419136 (x465 2 76)) (= 9223372036854775808 (x465 2 63)) (= (x465 2 102) 5070602400912917605986812821504) (= 1532495540865888858358347027150309183618739122183602176 (x465 2 180)) (= (x465 2 229) 862718293348820473429344482784628181556388621521298319395315527974912) (= 42535295865117307932921825928971026432 (x465 2 125)) (= 36893488147419103232 (x465 2 65)) (= (x465 2 58) 288230376151711744) (= 696898287454081973172991196020261297061888 (x465 2 139)) (= 1496577676626844588240573268701473812127674924007424 (x465 2 170)) (= (x465 2 94) 19807040628566084398385987584) (= (x465 2 204) 25711008708143844408671393477458601640355247900524685364822016) (= 38685626227668133590597632 (x465 2 85)) (= (x465 2 177) 191561942608236107294793378393788647952342390272950272) (= (x465 2 124) 21267647932558653966460912964485513216) (= 1606938044258990275541962092341162602522202993782792835301376 (x465 2 200)) (= (x465 2 62) 4611686018427387904) (= (x465 2 220) 1684996666696914987166688442938726917102321526408785780068975640576) (= 16 (x465 2 4)) (= 5846006549323611672814739330865132078623730171904 (x465 2 162)) (= (x465 2 137) 174224571863520493293247799005065324265472) (= (x465 2 25) 33554432) (= 10384593717069655257060992658440192 (x465 2 113)) (= (x465 2 230) 1725436586697640946858688965569256363112777243042596638790631055949824) (= 137438953472 (x465 2 37)) (= 6277101735386680763835789423207666416102355444464034512896 (x465 2 192)) (= (x465 2 103) 10141204801825835211973625643008) (= (x465 2 2) 4) (= (x465 2 8) 256) (= 1125899906842624 (x465 2 50)) (= 52656145834278593348959013841835216159447547700274555627155488768 (x465 2 215)) (= (x465 2 6) 64) (= (x465 2 35) 34359738368) (= 5986310706507378352962293074805895248510699696029696 (x465 2 172)) (= 134217728 (x465 2 27)) (= 12855504354071922204335696738729300820177623950262342682411008 (x465 2 203)) (= 664613997892457936451903530140172288 (x465 2 119)) (= (x465 2 156) 91343852333181432387730302044767688728495783936) (= 12554203470773361527671578846415332832204710888928069025792 (x465 2 193)) (= 680564733841876926926749214863536422912 (x465 2 129)) (= (x465 2 176) 95780971304118053647396689196894323976171195136475136) (= (x465 2 29) 536870912) (= 281474976710656 (x465 2 48)) (= (x465 2 100) 1267650600228229401496703205376) (= (x465 2 88) 309485009821345068724781056) (= (x465 2 155) 45671926166590716193865151022383844364247891968) (= (x465 2 168) 374144419156711147060143317175368453031918731001856) (= (x465 2 130) 1361129467683753853853498429727072845824) (= 85070591730234615865843651857942052864 (x465 2 126)) (= 4294967296 (x465 2 32)) (= 2417851639229258349412352 (x465 2 81)) (= 187072209578355573530071658587684226515959365500928 (x465 2 167)) (= (x465 2 56) 72057594037927936) (= 383123885216472214589586756787577295904684780545900544 (x465 2 178)) (= 39614081257132168796771975168 (x465 2 95)) (= (x465 2 115) 41538374868278621028243970633760768) (= (x465 2 150) 1427247692705959881058285969449495136382746624) (= 262144 (x465 2 18))))
(assert (x166 x232))
(assert (x1 x608))
(assert (x1 x800))
(assert (=> (<= x357 10000) (= (x494 x357) 0)))
(assert (x1 x193))
(assert (x1 x779))
(assert (x1 x358))
(assert (= x474 (x443 (x588 32 x474))))
(assert (x1 x585))
(assert (x1 x596))
(assert (= (and x522 x383) x236))
(assert (x24 18446744073709551615))
(assert (= (x778 (x714 64 x511 153)) 64))
(assert (x1 x160))
(assert (x90 x444))
(assert (x1 x134))
(assert (= x152 (or x612 x404)))
(assert (> (x588 32 x768) 10000))
(assert (= x562 (=> (and (or (and (not x674) (= x493 (ite x674 1 0))) (and x674 (= 1 x493))) (and (= x589 (x419 x701)) (= x674 (> x589 0)))) x578)))
(assert (x24 79228162514264337593543950335))
(assert (x1 x330))
(assert (x1 x769))
(assert (x1 x260))
(assert (= (or x400 x735) x522))
(assert (= (x714 64 x269 153) (x494 (x714 64 x269 153))))
(assert (= (x443 (x714 64 x269 153)) x269))
(assert (= x121 (x443 (x714 64 x121 2))))
(assert (x1 x258))
(assert (= (x714 64 x810 152) (x494 (x714 64 x810 152))))
(assert (x1 x758))
(assert (x1 x367))
(assert (x24 1461501637330902918203684832716283019655932542975))
(assert (= (x494 (+ x688 x262)) (x494 x262)))
(assert (= (=> (= x596 x187) x102) x672))
(assert (x1 x449))
(assert (x1 x19))
(assert (x1 x406))
(assert (x1 x37))
(assert (x1 x58))
(assert (= (x778 (x714 64 x687 x335)) 64))
(assert (= true x583))
(assert (= x687 (x443 (x714 64 x687 x658))))
(assert (x1 x386))
(assert (x166 (x15 (x490 (- x539 (mod (mod x539 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))
(assert (x1 x680))
(assert (not (x24 (x714 64 x269 153))))
(assert (x1 x403))
(assert (= (and x56 (not x268)) x567))
(assert (= (x778 (x588 32 x813)) 32))
(assert (x1 x599))
(assert (x1 x334))
(assert (= x813 (x443 (x588 32 x813))))
(assert (=> (>= 10000 x479) (= 0 (x494 x479))))
(assert (x1 x185))
(assert (x1 x264))
(assert (x24 115792089237316195423570985008687907853269984665640564039457584007913129639872))
(assert (= 64 (x778 (x714 64 x121 152))))
(assert (< 10000 (x588 32 x369)))
(assert (= 0 (x494 324282958)))
(assert (= (and (not x754) x609) x199))
(assert (= (x505 (x714 64 x441 155)) 155))
(assert (x1 x464))
(assert (= x552 (x505 (x714 64 x687 x552))))
(assert (= (and x165 x354) x216))
(assert (x1 x477))
(assert (= 0 (x494 1461501637330902918203684832716283019655932542975)))
(assert (x1 x738))
(assert (x1 x821))
(assert (=> (>= 10000 x290) (= 0 (x494 x290))))
(assert (x616 x168))
(assert (not (x24 (x714 64 x810 152))))
(assert (x1 x598))
(assert (x1 x480))
(assert (not (x24 (x588 32 x813))))
(assert (x1 x748))
(assert (x1 x564))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x588 32 x474)))
(assert (x1 x205))
(assert (x24 1363191112))
(assert (x579 (x15 (x490 (- x539 (mod (mod x539 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x378 255 (mod (* (x490 (- 31 (mod (mod x539 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 8) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(assert (x1 x689))
(assert (x1 x124))
(assert (< (x588 32 x644) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x1 x341))
(assert (x1 x516))
(assert (= (x494 452312848583266388373324160190187140051835877600158453279131187530910662656) 0))
(assert (=> (>= 10000 x37) (= (x494 x37) 0)))
(assert (x1 x661))
(assert (x1 x679))
(assert (x1 x728))
(assert (x166 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x378 255 (mod (* 8 (x490 (- 31 (mod (mod x539 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))))
(assert (= x365 (=> (and (and (and (and (= x112 false) (= x511 x127) (= x283 false) (>= 127 x66) (= x257 false) (= x464 x506) (= x464 (x696 x478)) (= false x546) (= (x709 x503) x722) (= x47 false) (= x496 false) (= x478 (x714 64 x511 153)) (= false x179) (>= x722 1) (>= 127 x66) (= 324282958 x758) (= x516 36)) (and (and (= (x203 x503) x373) (= false x447) (>= 127 x192) (= x728 x506) (<= x192 127) (= x649 (= 0 x661)) (= (x492 x412) x661) (= x679 2266951753) (= x162 x37) (= x485 x373) (>= x640 1) (= (x709 x503) x640) (= false x22) (= (x667 x37) x554) (= x412 (x714 64 x464 152))) (or (and (= 0 x368) x649) (and (not x649) (and (= x688 (- x661 1)) (= x678 (x492 x230)) (>= x661 1) (< x688 x678) (>= x678 1) (= (x654 x309) x499) (<= x499 6277101735386680763835789423207666416102355444464034512895) (= x368 x499) (= (+ x262 x688) x309) (= x230 (x714 64 x464 152)) (= (x588 32 x230) x262)))))) (and (>= 2 x766) (= (+ x573 1) x348) (= x655 36) (= x347 4248375386) (= false x353) (= x48 false) (= x127 x164) (= x486 false) (= x820 (= x766 1)) (= (x714 64 x269 153) x573) (= x239 false) (= false x669) (= x622 x269) (= x532 (x709 x503)) (<= 1 x532) (>= 127 x330) (>= 127 x330) (= x766 (x771 x348)) (= x276 false))) (and (= x164 x622) (= x362 false) (= false x633) (= 36 x773))) x120)))
(assert (x1 x757))
(assert (x1 x286))
(assert (= 64 (x778 (x714 64 x687 x552))))
(assert (x1 x485))
(assert (x1 x808))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x588 32 x768)))
(assert (x1 x34))
(assert (not (x24 (x588 32 x255))))
(assert (= x113 (=> (and (and (= x195 (= x329 0)) (not x195) (= x381 (x221 2 x168)) (= (= 0 x381) x754)) (or x754 (and (and (>= x482 1) (= x482 (x419 x701)) (< x286 x482)) (not x754)))) x732)))
(assert (x24 4081125666))
(assert (= (or x759 x626) x799))
(assert (x1 x209))
(assert (= (and (not x833) x719) x470))
(assert (x1 x414))
(assert (= (x443 (x714 64 x511 153)) x511))
(assert (= (=> (and (= (x378 1 (x566 x12 248)) x247) (= (not (> x114 2)) x451) (> x247 x361) (>= x238 2) (= x114 (x789 128)) (= (x774 161) x12) (= (x789 128) x238) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x361) (<= 452312848583266388373324160190187140051835877600158453279131187530910662656 x12) (>= x361 1)) (and x451 (=> (= x107 (x405 x361 x247)) x753))) x126))
(assert (x1 x484))
(assert (x24 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (= (and x339 (not x455)) x292))
(assert (x1 x379))
(assert (x1 x148))
(assert (= x290 (x443 (x714 64 x290 153))))
(assert (= (=> (and (= (not (< 1 x282)) x500) (= x629 (x714 64 x441 155))) (and x500 x365)) x135))
(assert (x1 x638))
(assert (> (x714 64 x638 153) 10000))
(assert (= 1 (x505 (x714 64 x687 1))))
(assert (x1 x332))
(assert (= (x494 x310) (x494 (+ x697 x310))))
(assert (not (x24 (x714 64 x441 3))))
(assert (= (x494 46441568142033591978231907782937720737460700430992383298758718876245066514432) 0))
(assert (= (x494 x161) (x494 (+ x161 x241))))
(assert (= x466 (and x719 x833)))
(assert (x1 x218))
(assert (= x346 (and x150 (not x586))))
(assert (x24 2266951753))
(assert (x166 x98))
(assert (=> (<= x121 10000) (= (x494 x121) 0)))
(assert (x1 x503))
(assert (x1 x643))
(assert (x166 x757))
(assert (= (x714 64 x441 155) (x494 (x714 64 x441 155))))
(assert (= x285 (and x656 x642)))
(assert (= (x494 (+ x573 1)) (x494 x573)))
(assert (= (or x764 x270) x488))
(assert (x1 x256))
(assert (= (x443 (x714 64 x449 153)) x449))
(assert (= x687 (x443 (x714 64 x687 1))))
(assert (x1 x495))
(assert (= x735 (and x488 (not x674))))
(assert (not (x24 (x714 64 x687 x180))))
(assert (x1 x277))
(assert (= (x778 (x714 64 x441 155)) 64))
(assert (x1 x146))
(assert (x166 2))
(assert (x1 x177))
(assert (= (x778 (x714 64 x290 153)) 64))
(assert (x1 x785))
(assert (x1 x472))
(assert (= 64 (x778 (x714 64 x269 153))))
(assert (x1 x648))
(assert (x1 x665))
(assert (x1 x670))
(assert (= (=> (= x287 (not (< 1 x525))) (and x287 (=> (= x760 x444) x716))) x102))
(assert (= x293 (=> (and (= (= x574 0) x513) (or (and (and (> x388 x675) (>= x349 1) (= (x789 128) x349) (<= 1 x608) (= (x774 x26) x109) (= x388 (x789 128)) (< x553 x608) (>= 255 x608) (= x675 (- x349 1)) (>= 115339776388732929035197660848497720713218148788040405586178452820382218977279 x109) (= x26 (x302 (+ x594 128))) (>= x388 1) (= x553 (x566 x109 248)) (= (x302 (+ x675 32)) x594)) (not x513)) x513)) x430)))
(assert (x1 x170))
(assert (x1 x803))
(assert (x1 x232))
(assert (x1 x440))
(assert (= x638 (x443 (x714 64 x638 153))))
(assert (= (x378 1 x687) (mod (ite (< x687 256) (x465 2 x687) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x166 x708))
(assert (= 64 (x778 (x714 64 x687 x658))))
(assert (x1 x243))
(assert (x1 x361))
(assert (x1 x398))
(assert (x166 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x1 x547))
(assert (= (and x468 x565) x145))
(assert (not (x24 (x588 32 x230))))
(assert (= (x494 18446744073709551615) 0))
(assert (x1 x184))
(assert (not (x24 (x714 64 x449 153))))
(assert (= x400 (and x674 x488)))
(assert (= (and x583 (not x106)) x202))
(assert (= (x494 (x714 64 x687 x658)) (x714 64 x687 x658)))
(assert (x1 x28))
(assert (x1 x504))
(assert (x1 x662))
(assert (not (x24 (x714 64 x464 152))))
(assert (x1 x651))
(assert (x1 x62))
(assert (x1 x690))
(assert (x1 x352))
(assert (x1 x304))
(assert (x1 x132))
(assert (x1 x226))
(assert (x1 x550))
(assert (= x83 (and x110 x806)))
(assert (= x372 (or x151 x83)))
(assert (> (x714 64 x441 155) 10000))
(assert (> (x714 64 x121 152) 10000))
(assert (x166 x4))
(assert (x1 x605))
(assert (x1 x481))
(assert (x1 x173))
(assert (x1 x433))
(assert (= (x494 x830) (x494 (+ x830 x401))))
(assert (=> (<= x269 10000) (= (x494 x269) 0)))
(assert (=> (<= x810 10000) (= 0 (x494 x810))))
(assert (= (mod (ite (< (mod (* 8 (x490 (- 31 (mod (mod x539 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 256) (* (x221 255 x539) (x465 2 (mod (* (x490 (- 31 (mod (mod x539 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 8) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x378 (x221 255 x539) (mod (* 8 (x490 (- 31 (mod (mod x539 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (x166 4294967295))
(assert (x1 x708))
(assert (= (x443 (x714 64 x464 152)) x464))
(assert (x1 x538))
(assert (= (x566 x12 248) (div x12 452312848583266388373324160190187140051835877600158453279131187530910662656)))
(assert (= (=> (and (>= x653 1) (= x105 (= x98 0)) (= x653 (x119 x172)) (= (x119 x473) x258) (> x653 x535) (= x489 (x588 32 x172)) (= (x714 64 x687 1) x172) (>= x258 1) (= x473 (x714 64 x687 1)) (= x7 (+ x535 x489)) (= x535 (- x258 1))) (and (=> (and (and (and (<= x170 79228162514264337593543950335) (= x125 (or (> x98 57896044618658097711785492504343953926634992332820282019728792003956564819967) (and (= true (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x98)) (< x98 0)))) (= (x606 x7) x170)) (or (and (not x125) (and (= x733 (+ x146 x170)) (= (x221 79228162514264337593543950335 x98) x146) (<= x733 79228162514264337593543950335) (<= 0 x155) (>= 79228162514264337593543950335 x155) (= x596 x733) (= (+ x146 x170) x155) (>= x733 0))) (and (and (= x757 (x490 (- 0 x98))) (not (< x170 x344)) (= x628 (x490 (- x170 x344))) (= x596 x628) (= (x221 79228162514264337593543950335 x757) x344)) x125))) (not x105)) x731) (=> (and x105 (and (= x772 x187) (>= 79228162514264337593543950335 x772) (= (x606 x7) x772))) x102))) x315))
(assert (= (x494 57896044618658097711785492504343953926634992332820282019728792003956564819899) 0))
(assert (= (x494 (+ x390 x682)) (x494 x390)))
(assert (x1 x634))
(assert (x1 x746))
(assert (x1 x241))
(assert (= (x778 (x588 32 x644)) 32))
(assert (x1 x752))
(assert (= (and x216 (not x130)) x363))
(assert (=> (>= 10000 x687) (= 0 (x494 x687))))
(assert (< 10000 (x714 64 x687 x180)))
(assert (x166 x785))
(assert (x1 x807))
(assert (x1 x452))
(assert (x1 x697))
(assert (x166 x364))
(assert (x314 (x221 (x15 (x490 (- x539 (mod (mod x539 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x378 255 (mod (* (x490 (- 31 (mod (mod x539 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 8) 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))
(assert (= (x494 1722613502) 0))
(assert (= 2 (x505 (x714 64 x121 2))))
(assert (not x265))
(assert (x1 x526))
(assert (= (x494 x263) (x494 (+ x263 x5))))
(assert (x1 x765))
(assert (x1 x371))
(assert (x1 x269))
(assert (= (=> (and (and (<= 0 x295) (>= 1461501637330902918203684832716283019655932542975 x162) (not (= x233 x144)) (>= x117 0) (= 36 x396) (>= 1461501637330902918203684832716283019655932542975 x461) (= x837 x503) (= false x100) x439 (>= x325 0) (not (= x829 x357)) (not (= x479 x503)) (not (= x233 x479)) x128 (not (= x233 x277)) (>= 4294967295 x463) x138 (>= x533 0) (>= x804 0) (= x59 false) (>= 1461501637330902918203684832716283019655932542975 x19) (>= 1461501637330902918203684832716283019655932542975 x407) (= x153 0) (= x375 (> (x709 x357) 0)) (not (= x479 x357)) (not (= x277 x829)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x636) (not (= x357 x503)) (not (= x503 x829)) (>= x463 0) (not (= x648 x357)) (<= x569 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (= x357 x233)) (>= 1461501637330902918203684832716283019655932542975 x648) (= 0 x337) (>= x144 1) (>= x196 0) (>= x648 1) (= x164 x14) (<= 0 x636) (<= 1 x503) (<= 0 x841) (<= 0 x407) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x804) (<= x706 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= 0 x41) (>= x497 0) (<= 0 x569) (<= 0 x154) (<= x593 1461501637330902918203684832716283019655932542975) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x117) (not (= x648 x829)) x97 (>= x713 0) (>= x277 1) (= (> (x709 x503) 0) x3) (>= x164 0) (= 1363191112 x763) (not (= x829 x233)) (= x487 (> (x709 x829) 0)) (not (= x277 x479)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x154) (not (= x144 x503)) (<= 1 x357) (not (= x648 x503)) x3 (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x325) (>= 1461501637330902918203684832716283019655932542975 x67) (>= x691 0) (not (= x479 x144)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x295) (<= 0 x706) (not (= x648 x277)) (= x158 (< 0 (x709 x277))) (>= 1461501637330902918203684832716283019655932542975 x713) (not (= x648 x233)) (<= 0 x306) (<= x164 1461501637330902918203684832716283019655932542975) (= 2 x456) (>= x448 0) (not (= x277 x357)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x533) (>= 1461501637330902918203684832716283019655932542975 x233) (>= 1461501637330902918203684832716283019655932542975 x479) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x448) (= x128 (< 0 (x709 x233))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x41) x158 (= x79 false) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x306) (>= 1461501637330902918203684832716283019655932542975 x748) (<= 132 x805) (= false x467) (<= 0 x790) (>= 1461501637330902918203684832716283019655932542975 x196) (>= 1461501637330902918203684832716283019655932542975 x691) (not (= x144 x829)) (= (> (x709 x144) 0) x138) (>= 1461501637330902918203684832716283019655932542975 x829) (not (= x277 x144)) (not (= x829 x479)) (<= x357 1461501637330902918203684832716283019655932542975) (= (> (x709 x648) 0) x97) (<= x497 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= x30 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x157) (<= x805 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= 1 x479) (>= 1461501637330902918203684832716283019655932542975 x808) (>= x829 1) (not (= x233 x503)) (>= x162 0) (= (< 0 (x709 x479)) x439) (not (= x648 x144)) (>= 1461501637330902918203684832716283019655932542975 x144) x487 (not (= x503 x277)) x375 (not (= x479 x648)) (>= 1461501637330902918203684832716283019655932542975 x277) (>= 1461501637330902918203684832716283019655932542975 x503) (>= x233 1) (<= x790 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x841) (not (= x357 x144))) (and (and (and (= false x104) (= 36 x386) (>= x261 1) (= false x259) (= (x696 x818) x810) (= x721 false) (= x355 x290) (= false x543) (= false x793) (= x261 (x709 x503)) (>= 127 x398) (>= 127 x398) (= 324282958 x777) (= (x714 64 x290 153) x818) (= x692 false) (= x810 x663) (= false x53)) (and (and (= x418 x663) (= false x458) (= (x709 x503) x58) (= x91 (x714 64 x810 152)) (= x327 x630) (= x824 2266951753) (= (x229 x503) x327) (>= 127 x752) (= x623 (x217 x91)) (>= x58 1) (= false x704) (<= x752 127) (= x738 x162) (= x106 (= 0 x623)) (= x260 (x776 x738))) (or (and (= 0 x358) x106) (and (and (< x697 x300) (= x697 (- x623 1)) (>= 6277101735386680763835789423207666416102355444464034512895 x218) (= x411 (+ x310 x697)) (= (x588 32 x813) x310) (>= x300 1) (= (x217 x813) x300) (= x218 (x382 x411)) (= x218 x358) (= (x714 64 x810 152) x813) (<= 1 x623)) (not x106))))) (and (= x521 false) (= (+ x815 1) x413) (<= x550 127) (= x417 false) (= false x399) (= x815 (x714 64 x449 153)) (= x204 (x595 x413)) (= x14 x449) (= 4248375386 x33) (= x355 x164) (= (= 1 x204) x240) (= 36 x528) (= false x597) (>= 127 x550) (= x408 false) (<= x204 2) (>= x438 1) (= false x712) (= x438 (x709 x503))))) x51) x265))
(assert (= (and x796 (not x607)) x376))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x588 32 x369)))
(assert (x1 x284))
(assert (= (x494 115792089237316195423570985008687907853269984665640564039457584007913129639904) 0))
(assert (x24 57896044618658097711785492504343953926634992332820282019728792003956564819899))
(assert (=> (>= 10000 x738) (= (x494 x738) 0)))
(assert (= (x494 (x714 64 x441 3)) (x714 64 x441 3)))
(assert (x1 x381))
(assert (= x430 (=> (and (= (x221 6277101735386680763835789423207666416102355444464034512895 x631) x708) (= x129 1) (= (x221 x410 x708) x305) (= (x221 6277101735386680763835789423207666416102355444464034512895 x574) x410) (= x631 (- (x378 1 x608) 1)) (= x410 x305) (= x590 1) (= x225 (> x282 0)) (= x282 x526)) (and (=> (not x225) x365) (=> (and (and (= (x714 64 x441 3) x242) (= (+ x5 x263) x116) (= x301 x605) (>= 4294967295 x680) (= x255 (x714 64 x441 3)) (<= 1 x282) (<= x605 4294967295) (= (x566 x437 248) x441) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x21)) (= x131 (x302 (+ 32 x446))) (= x173 (x302 (+ 32 x21))) (= x194 110026930297299635154336525195245038188021419673779079278965243793336073977856) (= x190 (x302 (+ 4 x21))) (= x591 (x61 x601)) (= x379 (x490 (- x798 31))) (= x385 (x614 x242)) (= x484 4081125666) (>= 18446744073709551615 x282) (= (x85 x116) x680) (= false x206) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x21) (<= 1 x662) (> x662 x5) (<= x21 115792089237316195423570985008687907853269984665640564039457584007913129639934) (<= x193 127) (= false x94) (< x21 x173) (= x52 false) (>= 18446744073709551615 x526) (<= x21 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= 36 x403) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x21)) (= x605 (x751 x21)) (or (and (> x591 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x379 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (> x379 x591) (= (<= x591 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x379 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) (= x46 36) (= x441 x538) (= x811 (x490 (- x805 x414))) (= x765 (x302 (+ 32 x190))) (>= x526 1) (>= x318 1) (= x284 x538) (= (x302 (+ x591 x601)) x446) (= (x61 x446) x301) (= (x614 x255) x662) (= (< 0 x301) x705) (or (>= 57896044618658097711785492504343953926634992332820282019728792003956564819899 x591) (>= x591 57896044618658097711785492504343953926634992332820282019728792003956564819968)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x21)) (<= 1 x385) (= x403 (x490 (- x765 x21))) (= x318 (x709 x144)) (= (x61 x50) x437) (= (x588 32 x255) x263) (>= 4294967295 x301) (= x356 false) (= (* x301 32) x414) (>= 127 x193) (not (or (and (> x811 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x131 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (< x811 x131) (= (<= x811 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x131))))) (= (x490 (- x805 x601)) x798) (= x5 (- x385 1))) x225) (and (=> (and (and (or (and (= x739 0) x268) (and (not x268) (and (>= x547 1) (= x184 x739) (> x547 x401) (= (- x275 1) x401) (<= 1 x275) (= (x217 x644) x547) (= (+ x401 x830) x542) (= x830 (x588 32 x644)) (>= 6277101735386680763835789423207666416102355444464034512895 x184) (= x184 (x382 x542)) (= x644 (x714 64 x121 152))))) (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x173) (<= x173 115792089237316195423570985008687907853269984665640564039457584007913129639934) (not (= x173 115792089237316195423570985008687907853269984665640564039457584007913129639872)) (= x801 (x714 64 x121 152)) (> x710 x173) (= x471 (x714 64 x638 153)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639872 x173)) (= (= x275 0) x268) (<= 1 x638) (<= x301 4294967295) (= x275 (x217 x801)) (>= x301 1) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x173) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639872 x173)) (= (x61 x131) x638) (= (x302 (+ x173 64)) x710) (= (x696 x471) x121) (= x96 (x595 x250)) (= (+ x471 1) x250) (>= 2 x96) (<= x638 1461501637330902918203684832716283019655932542975))) x705) x724) (=> (not x705) x135)))))))
(assert (x1 x67))
(assert (x1 x762))
(assert (< (x714 64 x121 2) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (x494 115792089237316195423570985008687907853269984665640564039457584007913129639934) 0))
(assert (= (x714 64 x121 2) (x494 (x714 64 x121 2))))
(assert (x1 x109))
(assert (> (x588 32 x255) 10000))
(assert (x1 x461))
(assert (= x716 (=> (and (= x168 (x756 x781)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x781) (= (ite (= x168 0) 1 0) x556) (not (= x781 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (not (= x781 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (<= x781 115792089237316195423570985008687907853269984665640564039457584007913129639934) (>= 6277101735386680763835789423207666416102355444464034512895 x168) (= (x221 6277101735386680763835789423207666416102355444464034512895 x444) x32) (<= x781 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= false x291) (= false x726) (= x701 (x302 (+ 32 x781))) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x781)) (> x701 x781) (= (> x556 0) x319)) (and (=> x319 x210) (=> (and (= x833 (> x168 0)) (not x319)) (and (=> x833 x289) (=> (and (not x833) (= 0 x68)) x81)))))))
(assert (x1 x46))
(assert (x1 x384))
(assert (x1 x245))
(assert (= (and x455 x339) x809))
(assert (x1 x349))
(assert (x227 x757))
(assert (x24 46441568142033591978231907782937720737460700430992383298758718876245066514432))
(assert (> (x588 32 x527) 10000))
(assert (x1 x168))
(assert (= x81 (=> (and (or x178 (and (= x298 (x302 (+ 32 x701))) (not x178))) (and (<= 1 x320) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x701) (= (= 0 x68) x178) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x701) (= x651 (x221 131040 x232)) (= (x302 (+ x701 (mod (+ 32 x651) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x320) (= (+ x68 31) x232) (< x701 x320) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x701))) x562)))
(assert (x1 x300))
(assert (x1 x437))
(assert (x1 x442))
(assert (=> (>= 10000 x648) (= (x494 x648) 0)))
(assert (=> (>= 10000 x511) (= 0 (x494 x511))))
(assert (x1 x169))
(assert (= false x732))
(assert (= (mod (ite (> 256 (mod (* 8 (x490 (- 31 (mod (mod x539 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (* (x465 2 (mod (* (x490 (- 31 (mod (mod x539 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 8) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 255) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x378 255 (mod (* 8 (x490 (- 31 (mod (mod x539 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) 115792089237316195423570985008687907853269984665640564039457584007913129639936))))
(assert (< 10000 (x714 64 x290 153)))
(assert (x1 x676))
(assert (x1 x518))
(assert (= (=> (and (= x395 x800) (= x779 x727)) x20) x646))
(assert (= (x494 (x714 64 x121 152)) (x714 64 x121 152)))
(assert (= (and x609 x754) x639))
(assert (= (and x319 x267) x817))
(assert (= x389 (and x376 (not x794))))
(assert (x387 x361 x247))
(assert (x1 x30))
(assert (x227 x596))
(assert (x1 x359))
(assert (= x228 (and x212 x225)))
(assert (= 0 (x494 110026930297299635154336525195245038188021419673779079278965243793336073977856)))
(assert (x1 x246))
(assert (x24 4294967295))
(assert (x1 x107))
(assert (= x659 (or x294 x152)))
(assert (x1 x357))
(assert (x1 x340))
(assert (= (and (not x110) x806) x151))
(assert (= (x588 32 x644) (x494 (x588 32 x644))))
(assert (x1 x556))
(assert (= x687 (x443 (x714 64 x687 x335))))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x714 64 x687 x180)))
(assert (x1 x457))
(assert (= (x443 (x714 64 x441 3)) x441))
(assert (x1 x131))
(assert (= 0 (x494 4294967295)))
(assert (< 10000 (x588 32 x172)))
(assert (x1 x805))
(assert (x1 x101))
(assert (x248 x539))
(assert (x1 x523))
(assert (x1 x727))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x714 64 x269 153)))
(assert (= x230 (x443 (x588 32 x230))))
(assert (= (x588 32 x369) (x494 (x588 32 x369))))
(assert (x90 x631))
(assert (> (x714 64 x687 x658) 10000))
(assert (not (x24 (x714 64 x441 155))))
(assert (x1 x678))
(assert (x1 x773))
(assert (x1 x327))
(assert (= (x494 (+ x471 1)) (x494 x471)))
(assert (x166 131040))
(assert (x24 115792089237316195423570985008687907853269984665640564039457584007913129639934))
(assert (x1 x410))
(assert (= (x494 (x588 32 x172)) (x588 32 x172)))
(assert (= (x505 (x714 64 x464 152)) 152))
(assert (=> (<= x829 10000) (= 0 (x494 x829))))
(assert (x1 x409))
(assert (= (x566 x124 248) (div x124 452312848583266388373324160190187140051835877600158453279131187530910662656)))
(assert (x1 x479))
(assert (= x56 (and x705 x228)))
(assert (x1 x290))
(assert (x1 x531))
(assert (= (x714 64 x687 x335) (x494 (x714 64 x687 x335))))
(assert (x1 x811))
(assert (= 0 (x494 2266951753)))
(assert (= (x588 32 x474) (x494 (x588 32 x474))))
(assert (x1 x261))
(assert (x166 1))
(assert (x1 x647))
(assert (x1 x722))
(assert (= x434 (and x522 (not x383))))
(assert (x166 x168))
(assert (=> (<= x449 10000) (= (x494 x449) 0)))
(assert (x1 x77))
(assert (not (x24 (x714 64 x511 153))))
(assert (= (and (not x354) x165) x71))
(assert (not (x24 (x588 32 x172))))
(assert (= (x443 (x588 32 x369)) x369))
(assert (x1 x5))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x588 32 x255)))
(assert (x1 x144))
(assert (= (x494 57896044618658097711785492504343953926634992332820282019728792003956564819968) 0))
(assert (x24 57896044618658097711785492504343953926634992332820282019728792003956564819968))
(assert (< 10000 (x714 64 x269 153)))
(assert (x1 x50))
(assert (x1 x630))
(assert (not (x24 (x588 32 x527))))
(assert (x1 x55))
(check-sat)
(exit)
