(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Certora
Generated on: 2024-04-10
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x519 () Int)
(declare-fun x1188 () Int)
(declare-fun x787 () Int)
(declare-fun x488 (Int) Bool)
(declare-fun x27 () Int)
(declare-fun x467 () Int)
(declare-fun x1149 () Int)
(declare-fun x210 () Int)
(declare-fun x336 () Int)
(declare-fun x148 () Int)
(declare-fun x1163 () Int)
(declare-fun x328 () Bool)
(declare-fun x515 () Int)
(declare-fun x154 () Bool)
(declare-fun x230 () Int)
(declare-fun x857 () Int)
(declare-fun x397 (Int) Int)
(declare-fun x681 () Bool)
(declare-fun x784 () Int)
(declare-fun x506 () Bool)
(declare-fun x353 () Int)
(declare-fun x414 () Int)
(declare-fun x926 () Int)
(declare-fun x153 () Int)
(declare-fun x1205 () Int)
(declare-fun x1204 () Int)
(declare-fun x672 () Bool)
(declare-fun x904 () Int)
(declare-fun x670 () Bool)
(declare-fun x536 () Bool)
(declare-fun x1192 () Int)
(declare-fun x400 () Bool)
(declare-fun x1140 () Int)
(declare-fun x518 () Int)
(declare-fun x1321 () Int)
(declare-fun x799 () Bool)
(declare-fun x118 () Int)
(declare-fun x394 (Int) Int)
(declare-fun x259 () Int)
(declare-fun x274 () Int)
(declare-fun x849 () Bool)
(declare-fun x458 () Int)
(declare-fun x204 () Int)
(declare-fun x971 () Int)
(declare-fun x852 () Int)
(declare-fun x404 () Int)
(declare-fun x1114 () Int)
(declare-fun x1178 () Int)
(declare-fun x369 (Int) Int)
(declare-fun x817 () Int)
(declare-fun x879 (Int) Int)
(declare-fun x215 () Bool)
(declare-fun x387 () Int)
(declare-fun x1168 () Bool)
(declare-fun x303 () Int)
(declare-fun x1301 (Int Int Int Int Int Int Int Int) Int)
(declare-fun x576 (Int) Int)
(declare-fun x891 () Int)
(declare-fun x725 () Int)
(declare-fun x469 () Bool)
(declare-fun x86 () Int)
(declare-fun x850 () Bool)
(declare-fun x6 () Bool)
(declare-fun x1109 () Int)
(declare-fun x569 () Int)
(declare-fun x1164 () Int)
(declare-fun x191 () Int)
(declare-fun x570 () Int)
(declare-fun x256 () Int)
(declare-fun x867 () Bool)
(declare-fun x673 () Int)
(declare-fun x2 () Bool)
(declare-fun x238 () Int)
(declare-fun x615 () Int)
(declare-fun x583 () Bool)
(declare-fun x101 () Bool)
(declare-fun x476 () Bool)
(declare-fun x20 () Bool)
(declare-fun x171 () Int)
(declare-fun x645 () Bool)
(declare-fun x498 () Int)
(declare-fun x295 () Bool)
(declare-fun x685 () Int)
(declare-fun x1169 () Int)
(declare-fun x1238 () Int)
(declare-fun x158 () Int)
(declare-fun x1002 () Int)
(declare-fun x922 () Bool)
(declare-fun x969 (Int Int Int Int Int Int) Int)
(declare-fun x866 () Bool)
(declare-fun x1135 () Int)
(declare-fun x920 () Int)
(declare-fun x54 () Bool)
(declare-fun x802 () Bool)
(declare-fun x300 () Int)
(declare-fun x806 () Int)
(declare-fun x18 () Int)
(declare-fun x1300 () Int)
(declare-fun x925 () Bool)
(declare-fun x941 () Int)
(declare-fun x324 () Bool)
(declare-fun x477 () Bool)
(declare-fun x613 () Int)
(declare-fun x1069 () Int)
(declare-fun x1288 () Bool)
(declare-fun x782 () Int)
(declare-fun x121 () Int)
(declare-fun x222 () Bool)
(declare-fun x251 () Int)
(declare-fun x731 () Bool)
(declare-fun x1222 () Int)
(declare-fun x1242 () Int)
(declare-fun x413 () Int)
(declare-fun x359 () Int)
(declare-fun x57 () Bool)
(declare-fun x1223 () Int)
(declare-fun x650 () Bool)
(declare-fun x1254 () Int)
(declare-fun x1038 () Int)
(declare-fun x468 () Int)
(declare-fun x997 () Int)
(declare-fun x935 () Bool)
(declare-fun x207 () Bool)
(declare-fun x617 () Int)
(declare-fun x186 () Bool)
(declare-fun x542 () Int)
(declare-fun x151 () Bool)
(declare-fun x322 () Int)
(declare-fun x1167 () Int)
(declare-fun x995 (Int) Int)
(declare-fun x530 () Bool)
(declare-fun x940 () Bool)
(declare-fun x1088 () Bool)
(declare-fun x1256 () Bool)
(declare-fun x49 () Bool)
(declare-fun x1090 () Bool)
(declare-fun x996 () Bool)
(declare-fun x422 () Int)
(declare-fun x872 () Int)
(declare-fun x1263 () Bool)
(declare-fun x632 () Int)
(declare-fun x329 () Int)
(declare-fun x827 () Int)
(declare-fun x631 () Int)
(declare-fun x1093 () Int)
(declare-fun x470 () Int)
(declare-fun x752 () Bool)
(declare-fun x89 () Int)
(declare-fun x19 (Int) Int)
(declare-fun x637 () Bool)
(declare-fun x919 () Int)
(declare-fun x1291 () Bool)
(declare-fun x248 () Bool)
(declare-fun x535 (Int) Int)
(declare-fun x96 () Int)
(declare-fun x814 () Int)
(declare-fun x263 () Int)
(declare-fun x1279 () Bool)
(declare-fun x1042 () Int)
(declare-fun x1161 () Int)
(declare-fun x58 () Int)
(declare-fun x1245 () Int)
(declare-fun x39 (Int) Int)
(declare-fun x626 () Int)
(declare-fun x23 () Int)
(declare-fun x851 () Bool)
(declare-fun x69 () Int)
(declare-fun x196 () Int)
(declare-fun x597 () Bool)
(declare-fun x438 () Bool)
(declare-fun x1076 () Int)
(declare-fun x813 () Int)
(declare-fun x1311 () Int)
(declare-fun x798 () Bool)
(declare-fun x240 () Int)
(declare-fun x735 () Int)
(declare-fun x1246 () Bool)
(declare-fun x773 () Int)
(declare-fun x331 () Int)
(declare-fun x1080 () Bool)
(declare-fun x183 () Bool)
(declare-fun x1122 () Bool)
(declare-fun x30 () Bool)
(declare-fun x727 () Bool)
(declare-fun x953 () Bool)
(declare-fun x116 () Bool)
(declare-fun x202 () Int)
(declare-fun x767 () Int)
(declare-fun x94 () Bool)
(declare-fun x292 () Bool)
(declare-fun x660 () Int)
(declare-fun x620 () Bool)
(declare-fun x479 () Int)
(declare-fun x247 () Int)
(declare-fun x365 () Int)
(declare-fun x280 () Bool)
(declare-fun x882 () Int)
(declare-fun x32 () Bool)
(declare-fun x1209 () Int)
(declare-fun x122 () Int)
(declare-fun x917 () Int)
(declare-fun x545 () Int)
(declare-fun x822 () Int)
(declare-fun x169 () Int)
(declare-fun x157 () Int)
(declare-fun x765 () Bool)
(declare-fun x649 () Int)
(declare-fun x131 () Bool)
(declare-fun x1170 () Bool)
(declare-fun x693 () Bool)
(declare-fun x959 () Int)
(declare-fun x644 () Int)
(declare-fun x172 () Bool)
(declare-fun x539 () Int)
(declare-fun x209 () Bool)
(declare-fun x88 () Bool)
(declare-fun x541 () Int)
(declare-fun x803 () Int)
(declare-fun x781 () Bool)
(declare-fun x1089 () Int)
(declare-fun x311 () Int)
(declare-fun x173 () Int)
(declare-fun x628 () Int)
(declare-fun x860 () Int)
(declare-fun x572 () Bool)
(declare-fun x563 () Int)
(declare-fun x1271 (Int Int) Int)
(declare-fun x403 () Int)
(declare-fun x513 () Int)
(declare-fun x396 () Bool)
(declare-fun x350 () Int)
(declare-fun x642 () Int)
(declare-fun x633 () Int)
(declare-fun x588 () Bool)
(declare-fun x434 () Int)
(declare-fun x748 (Int) Int)
(declare-fun x684 () Int)
(declare-fun x1154 () Bool)
(declare-fun x496 () Int)
(declare-fun x1283 () Int)
(declare-fun x170 () Int)
(declare-fun x699 () Bool)
(declare-fun x341 () Int)
(declare-fun x1158 () Int)
(declare-fun x286 () Int)
(declare-fun x1175 () Bool)
(declare-fun x678 (Int) Int)
(declare-fun x954 () Bool)
(declare-fun x366 () Int)
(declare-fun x120 () Int)
(declare-fun x390 () Bool)
(declare-fun x783 (Int Int Int Int Int Int Int) Int)
(declare-fun x165 () Int)
(declare-fun x655 () Int)
(declare-fun x73 () Int)
(declare-fun x26 () Bool)
(declare-fun x143 () Int)
(declare-fun x750 () Int)
(declare-fun x690 () Int)
(declare-fun x916 () Bool)
(declare-fun x332 () Int)
(declare-fun x1280 () Int)
(declare-fun x424 () Int)
(declare-fun x1107 () Int)
(declare-fun x1174 () Bool)
(declare-fun x278 () Bool)
(declare-fun x777 () Int)
(declare-fun x1120 () Int)
(declare-fun x738 () Int)
(declare-fun x906 () Bool)
(declare-fun x473 () Bool)
(declare-fun x824 () Int)
(declare-fun x220 () Int)
(declare-fun x566 () Int)
(declare-fun x1035 () Int)
(declare-fun x44 () Int)
(declare-fun x603 () Int)
(declare-fun x110 () Int)
(declare-fun x1302 () Int)
(declare-fun x1152 () Int)
(declare-fun x607 () Int)
(declare-fun x1237 () Bool)
(declare-fun x704 () Int)
(declare-fun x1179 () Bool)
(declare-fun x894 () Bool)
(declare-fun x428 () Int)
(declare-fun x187 () Bool)
(declare-fun x952 () Int)
(declare-fun x870 () Int)
(declare-fun x739 () Int)
(declare-fun x966 () Int)
(declare-fun x1084 () Int)
(declare-fun x1142 () Int)
(declare-fun x809 () Bool)
(declare-fun x811 () Int)
(declare-fun x770 () Bool)
(declare-fun x984 () Bool)
(declare-fun x9 () Int)
(declare-fun x810 () Int)
(declare-fun x379 () Bool)
(declare-fun x963 () Bool)
(declare-fun x1253 () Bool)
(declare-fun x1255 () Int)
(declare-fun x600 () Int)
(declare-fun x254 () Bool)
(declare-fun x1071 () Int)
(declare-fun x410 () Int)
(declare-fun x1212 () Int)
(declare-fun x10 () Bool)
(declare-fun x46 () Int)
(declare-fun x1272 () Int)
(declare-fun x95 () Bool)
(declare-fun x611 () Bool)
(declare-fun x268 () Int)
(declare-fun x1312 () Bool)
(declare-fun x99 () Int)
(declare-fun x1031 (Int) Int)
(declare-fun x1201 () Bool)
(declare-fun x1220 () Int)
(declare-fun x968 (Int) Int)
(declare-fun x776 () Bool)
(declare-fun x362 () Int)
(declare-fun x510 () Int)
(declare-fun x792 () Int)
(declare-fun x378 () Int)
(declare-fun x1235 () Int)
(declare-fun x1198 () Bool)
(declare-fun x1096 () Int)
(declare-fun x524 () Int)
(declare-fun x83 () Int)
(declare-fun x47 () Int)
(declare-fun x1009 () Int)
(declare-fun x211 () Int)
(declare-fun x880 () Int)
(declare-fun x1215 () Bool)
(declare-fun x1296 () Int)
(declare-fun x598 () Int)
(declare-fun x1153 () Bool)
(declare-fun x609 () Int)
(declare-fun x937 () Bool)
(declare-fun x346 () Bool)
(declare-fun x978 () Int)
(declare-fun x325 () Int)
(declare-fun x448 () Int)
(declare-fun x307 () Int)
(declare-fun x1087 () Int)
(declare-fun x80 (Int Int Int) Int)
(declare-fun x279 () Bool)
(declare-fun x599 () Int)
(declare-fun x145 () Int)
(declare-fun x1095 () Int)
(declare-fun x1105 () Int)
(declare-fun x457 () Bool)
(declare-fun x775 () Int)
(declare-fun x789 () Int)
(declare-fun x1155 () Int)
(declare-fun x31 () Int)
(declare-fun x616 () Bool)
(declare-fun x558 () Bool)
(declare-fun x836 () Int)
(declare-fun x7 () Int)
(declare-fun x139 () Int)
(declare-fun x897 () Bool)
(declare-fun x756 () Bool)
(declare-fun x127 () Bool)
(declare-fun x1145 () Int)
(declare-fun x746 () Int)
(declare-fun x1202 () Bool)
(declare-fun x1098 () Int)
(declare-fun x761 () Int)
(declare-fun x1286 () Int)
(declare-fun x1173 () Int)
(declare-fun x192 () Bool)
(declare-fun x878 () Int)
(declare-fun x839 () Bool)
(declare-fun x137 () Bool)
(declare-fun x1001 () Bool)
(declare-fun x239 () Int)
(declare-fun x289 () Bool)
(declare-fun x636 () Int)
(declare-fun x126 () Bool)
(declare-fun x195 () Int)
(declare-fun x1210 () Bool)
(declare-fun x1248 () Bool)
(declare-fun x77 () Bool)
(declare-fun x1308 () Int)
(declare-fun x265 () Int)
(declare-fun x707 () Int)
(declare-fun x932 () Int)
(declare-fun x622 () Bool)
(declare-fun x1250 () Int)
(declare-fun x593 () Int)
(declare-fun x128 () Bool)
(declare-fun x716 () Bool)
(declare-fun x820 () Int)
(declare-fun x464 () Bool)
(declare-fun x679 () Int)
(declare-fun x312 () Bool)
(declare-fun x8 () Int)
(declare-fun x928 () Bool)
(declare-fun x1234 () Bool)
(declare-fun x460 () Bool)
(declare-fun x938 () Int)
(declare-fun x327 () Int)
(declare-fun x760 () Int)
(declare-fun x1247 () Int)
(declare-fun x34 () Bool)
(declare-fun x59 () Bool)
(declare-fun x315 () Int)
(declare-fun x1318 () Bool)
(declare-fun x659 () Bool)
(declare-fun x92 () Int)
(declare-fun x522 () Bool)
(declare-fun x84 () Int)
(declare-fun x135 () Bool)
(declare-fun x614 () Int)
(declare-fun x495 () Bool)
(declare-fun x871 () Bool)
(declare-fun x245 () Int)
(declare-fun x745 () Int)
(declare-fun x606 () Int)
(declare-fun x174 () Int)
(declare-fun x1085 () Int)
(declare-fun x568 () Bool)
(declare-fun x1119 () Bool)
(declare-fun x1013 () Int)
(declare-fun x833 () Bool)
(declare-fun x1292 () Bool)
(declare-fun x671 () Bool)
(declare-fun x321 () Bool)
(declare-fun x602 () Bool)
(declare-fun x40 () Bool)
(declare-fun x1018 () Int)
(declare-fun x1015 () Int)
(declare-fun x1012 () Bool)
(declare-fun x561 () Bool)
(declare-fun x918 () Bool)
(declare-fun x791 () Int)
(declare-fun x714 () Bool)
(declare-fun x829 () Int)
(declare-fun x504 () Bool)
(declare-fun x1211 () Int)
(declare-fun x141 () Int)
(declare-fun x1132 () Int)
(declare-fun x401 () Bool)
(declare-fun x689 () Bool)
(declare-fun x676 () Bool)
(declare-fun x1165 () Int)
(declare-fun x342 () Int)
(declare-fun x1078 () Bool)
(declare-fun x226 () Int)
(declare-fun x627 () Int)
(declare-fun x1041 () Bool)
(declare-fun x1258 () Int)
(declare-fun x370 () Bool)
(declare-fun x1251 () Bool)
(declare-fun x72 () Int)
(declare-fun x1053 () Int)
(declare-fun x1094 () Int)
(declare-fun x408 () Bool)
(declare-fun x257 () Bool)
(declare-fun x330 () Int)
(declare-fun x658 () Bool)
(declare-fun x914 () Bool)
(declare-fun x398 () Bool)
(declare-fun x1077 () Int)
(declare-fun x755 () Int)
(declare-fun x416 () Bool)
(declare-fun x185 () Bool)
(declare-fun x643 () Int)
(declare-fun x294 () Bool)
(declare-fun x1124 () Int)
(declare-fun x638 () Bool)
(declare-fun x1079 () Int)
(declare-fun x113 () Bool)
(declare-fun x25 () Int)
(declare-fun x1070 () Int)
(declare-fun x1233 () Bool)
(declare-fun x11 () Int)
(declare-fun x1236 () Int)
(declare-fun x420 () Bool)
(declare-fun x1130 () Int)
(declare-fun x56 (Int) Int)
(declare-fun x217 () Int)
(declare-fun x492 () Bool)
(declare-fun x50 () Int)
(declare-fun x780 () Bool)
(declare-fun x832 () Int)
(declare-fun x82 () Bool)
(declare-fun x949 () Int)
(declare-fun x516 () Int)
(declare-fun x582 () Int)
(declare-fun x1266 () Bool)
(declare-fun x474 () Int)
(declare-fun x753 () Bool)
(declare-fun x459 () Int)
(declare-fun x608 () Int)
(declare-fun x702 () Int)
(declare-fun x842 () Int)
(declare-fun x573 () Bool)
(declare-fun x250 () Bool)
(declare-fun x974 () Bool)
(declare-fun x788 () Bool)
(declare-fun x93 () Int)
(declare-fun x1083 () Bool)
(declare-fun x155 () Bool)
(declare-fun x652 (Int) Int)
(declare-fun x1259 () Int)
(declare-fun x1017 () Bool)
(declare-fun x1219 () Int)
(declare-fun x625 () Bool)
(declare-fun x497 () Int)
(declare-fun x219 () Bool)
(declare-fun x147 () Bool)
(declare-fun x310 () Bool)
(declare-fun x103 () Bool)
(declare-fun x298 () Bool)
(declare-fun x445 () Bool)
(declare-fun x908 () Bool)
(declare-fun x385 () Int)
(declare-fun x743 (Int) Int)
(declare-fun x931 () Int)
(declare-fun x779 () Bool)
(declare-fun x1226 () Int)
(declare-fun x134 () Int)
(declare-fun x1319 () Int)
(declare-fun x150 () Bool)
(declare-fun x63 () Int)
(declare-fun x375 () Int)
(declare-fun x1054 () Int)
(declare-fun x71 () Bool)
(declare-fun x1217 () Int)
(declare-fun x893 (Int) Int)
(declare-fun x246 () Bool)
(declare-fun x159 () Bool)
(declare-fun x967 () Int)
(declare-fun x293 () Bool)
(declare-fun x164 () Int)
(declare-fun x554 () Int)
(declare-fun x930 () Bool)
(declare-fun x973 () Int)
(declare-fun x355 () Bool)
(declare-fun x323 () Int)
(declare-fun x692 () Bool)
(declare-fun x818 () Int)
(declare-fun x1172 () Int)
(declare-fun x654 () Int)
(declare-fun x214 () Bool)
(declare-fun x807 () Int)
(declare-fun x1014 () Int)
(declare-fun x68 () Bool)
(declare-fun x352 () Int)
(declare-fun x290 () Bool)
(declare-fun x1191 () Bool)
(declare-fun x826 () Int)
(declare-fun x66 () Int)
(declare-fun x982 () Int)
(declare-fun x1097 () Int)
(declare-fun x691 () Bool)
(declare-fun x546 () Bool)
(declare-fun x371 () Bool)
(declare-fun x853 () Int)
(declare-fun x877 () Bool)
(declare-fun x465 () Bool)
(declare-fun x288 () Int)
(declare-fun x1269 () Bool)
(declare-fun x666 () Bool)
(declare-fun x493 () Int)
(declare-fun x1195 () Int)
(declare-fun x1214 () Int)
(declare-fun x975 () Bool)
(declare-fun x605 () Bool)
(declare-fun x703 () Int)
(declare-fun x537 () Int)
(declare-fun x983 () Int)
(declare-fun x1004 () Int)
(declare-fun x564 () Bool)
(declare-fun x1310 () Int)
(declare-fun x74 () Bool)
(declare-fun x831 () Int)
(declare-fun x344 () Bool)
(declare-fun x525 () Int)
(declare-fun x70 () Bool)
(declare-fun x1046 () Bool)
(declare-fun x924 (Int) Int)
(declare-fun x701 () Bool)
(declare-fun x454 (Int) Int)
(declare-fun x1026 () Bool)
(declare-fun x618 () Int)
(declare-fun x1304 () Int)
(declare-fun x35 () Bool)
(declare-fun x696 (Int) Int)
(declare-fun x1305 () Int)
(declare-fun x1081 () Int)
(declare-fun x160 () Bool)
(declare-fun x146 (Int) Int)
(declare-fun x1136 () Int)
(declare-fun x590 () Bool)
(declare-fun x45 () Int)
(declare-fun x91 () Bool)
(declare-fun x520 () Int)
(declare-fun x812 () Int)
(declare-fun x60 () Bool)
(declare-fun x646 () Int)
(declare-fun x1207 () Int)
(declare-fun x391 () Int)
(declare-fun x514 () Int)
(declare-fun x544 () Int)
(declare-fun x890 () Bool)
(declare-fun x723 () Int)
(declare-fun x724 () Int)
(declare-fun x667 () Bool)
(declare-fun x364 () Bool)
(declare-fun x1150 () Int)
(declare-fun x317 (Int Int Int Int) Int)
(declare-fun x913 () Bool)
(declare-fun x427 () Bool)
(declare-fun x744 () Bool)
(declare-fun x502 () Bool)
(declare-fun x708 () Int)
(declare-fun x706 () Bool)
(declare-fun x656 () Bool)
(declare-fun x389 () Int)
(declare-fun x1075 () Int)
(declare-fun x270 () Bool)
(declare-fun x455 () Int)
(declare-fun x887 () Int)
(declare-fun x1297 () Int)
(declare-fun x1073 () Int)
(declare-fun x234 () Int)
(declare-fun x1270 () Int)
(declare-fun x815 () Int)
(declare-fun x943 () Int)
(declare-fun x61 () Int)
(declare-fun x619 () Int)
(declare-fun x977 () Int)
(declare-fun x526 () Int)
(declare-fun x337 (Int) Int)
(declare-fun x308 () Int)
(declare-fun x1131 () Bool)
(declare-fun x1186 () Int)
(declare-fun x1218 () Int)
(declare-fun x552 () Int)
(declare-fun x490 () Bool)
(declare-fun x208 () Int)
(declare-fun x1206 () Int)
(declare-fun x944 () Bool)
(declare-fun x383 () Bool)
(declare-fun x334 () Int)
(declare-fun x955 () Int)
(declare-fun x915 () Bool)
(declare-fun x855 () Int)
(declare-fun x1298 () Int)
(declare-fun x728 () Int)
(declare-fun x910 () Int)
(declare-fun x1021 () Int)
(declare-fun x534 () Int)
(declare-fun x1239 () Int)
(declare-fun x1282 () Bool)
(declare-fun x339 () Int)
(declare-fun x591 () Int)
(declare-fun x388 () Bool)
(declare-fun x1047 () Int)
(declare-fun x710 () Int)
(declare-fun x48 () Int)
(declare-fun x283 () Int)
(declare-fun x1273 () Int)
(declare-fun x198 () Int)
(declare-fun x1309 () Bool)
(declare-fun x1241 () Int)
(declare-fun x221 () Bool)
(declare-fun x1227 () Int)
(declare-fun x1034 () Int)
(declare-fun x1278 () Bool)
(declare-fun x1137 () Int)
(declare-fun x347 () Bool)
(declare-fun x107 () Int)
(declare-fun x559 () Bool)
(declare-fun x795 () Bool)
(declare-fun x991 () Bool)
(declare-fun x718 () Bool)
(declare-fun x1092 () Int)
(declare-fun x252 () Int)
(declare-fun x823 () Int)
(declare-fun x981 () Int)
(declare-fun x503 () Bool)
(declare-fun x491 () Bool)
(declare-fun x1229 () Int)
(declare-fun x1003 () Int)
(declare-fun x712 () Int)
(declare-fun x175 () Int)
(declare-fun x296 () Int)
(declare-fun x271 () Int)
(declare-fun x610 () Int)
(declare-fun x182 () Int)
(declare-fun x406 () Int)
(declare-fun x680 () Bool)
(declare-fun x547 () Int)
(declare-fun x868 () Int)
(declare-fun x51 () Bool)
(declare-fun x1190 () Int)
(declare-fun x281 () Bool)
(declare-fun x382 () Int)
(declare-fun x763 () Int)
(declare-fun x951 () Bool)
(declare-fun x132 () Bool)
(declare-fun x575 () Int)
(declare-fun x357 () Bool)
(declare-fun x560 () Int)
(declare-fun x1299 () Int)
(declare-fun x1144 () Bool)
(declare-fun x272 () Int)
(declare-fun x816 () Int)
(declare-fun x687 () Int)
(declare-fun x193 () Int)
(declare-fun x167 () Bool)
(declare-fun x117 () Int)
(declare-fun x640 () Bool)
(declare-fun x757 () Int)
(declare-fun x700 () Int)
(declare-fun x947 () Bool)
(declare-fun x436 (Int) Int)
(declare-fun x1193 () Int)
(declare-fun x156 () Bool)
(declare-fun x367 () Int)
(declare-fun x1285 () Int)
(declare-fun x821 () Int)
(declare-fun x106 () Int)
(declare-fun x980 () Bool)
(declare-fun x304 () Int)
(declare-fun x1055 () Int)
(declare-fun x443 () Int)
(declare-fun x494 () Int)
(declare-fun x766 () Bool)
(declare-fun x838 () Int)
(declare-fun x483 () Int)
(declare-fun x529 () Int)
(declare-fun x41 () Bool)
(declare-fun x543 () Int)
(declare-fun x899 () Int)
(declare-fun x114 (Int Int) Int)
(declare-fun x244 () Bool)
(declare-fun x843 () Int)
(declare-fun x1143 () Bool)
(declare-fun x719 () Int)
(declare-fun x482 () Int)
(declare-fun x586 () Bool)
(declare-fun x161 () Int)
(declare-fun x213 (Int) Int)
(declare-fun x407 () Int)
(declare-fun x1030 () Int)
(declare-fun x1010 () Int)
(declare-fun x235 () Int)
(declare-fun x425 () Int)
(declare-fun x236 () Int)
(declare-fun x1314 () Bool)
(declare-fun x892 () Bool)
(declare-fun x447 () Bool)
(declare-fun x297 () Bool)
(declare-fun x1064 () Int)
(declare-fun x624 () Int)
(declare-fun x1068 () Int)
(declare-fun x417 () Int)
(declare-fun x869 () Int)
(declare-fun x261 () Int)
(declare-fun x948 () Bool)
(declare-fun x216 () Int)
(declare-fun x1166 () Int)
(declare-fun x499 () Int)
(declare-fun x373 () Bool)
(declare-fun x1111 () Bool)
(declare-fun x550 () Bool)
(declare-fun x683 () Bool)
(declare-fun x845 () Int)
(declare-fun x487 () Int)
(declare-fun x1067 () Int)
(declare-fun x957 () Bool)
(declare-fun x801 () Bool)
(declare-fun x854 () Int)
(declare-fun x16 () Int)
(declare-fun x1221 () Bool)
(declare-fun x741 () Bool)
(declare-fun x264 () Bool)
(declare-fun x1196 () Bool)
(declare-fun x471 () Int)
(declare-fun x538 () Int)
(declare-fun x911 () Int)
(declare-fun x1276 () Bool)
(declare-fun x517 () Int)
(declare-fun x1177 () Bool)
(declare-fun x189 () Int)
(declare-fun x284 () Int)
(declare-fun x840 () Int)
(declare-fun x1123 () Int)
(declare-fun x1101 () Int)
(declare-fun x896 () Bool)
(declare-fun x105 () Bool)
(declare-fun x580 () Bool)
(declare-fun x360 () Bool)
(declare-fun x223 () Bool)
(declare-fun x1023 () Bool)
(declare-fun x306 () Int)
(declare-fun x988 () Bool)
(declare-fun x1267 () Bool)
(declare-fun x521 () Int)
(declare-fun x242 () Bool)
(declare-fun x452 () Bool)
(declare-fun x435 () Int)
(declare-fun x578 () Int)
(declare-fun x987 () Int)
(declare-fun x203 () Bool)
(declare-fun x1129 () Int)
(declare-fun x846 () Int)
(declare-fun x267 () Int)
(declare-fun x505 () Int)
(declare-fun x426 () Int)
(declare-fun x717 () Int)
(declare-fun x571 () Int)
(declare-fun x697 () Bool)
(declare-fun x1118 () Int)
(declare-fun x162 () Int)
(declare-fun x374 () Int)
(declare-fun x1225 () Int)
(declare-fun x421 () Bool)
(declare-fun x674 () Int)
(declare-fun x102 () Int)
(declare-fun x1316 () Int)
(declare-fun x726 () Int)
(declare-fun x115 () Bool)
(declare-fun x1019 () Bool)
(declare-fun x771 () Int)
(declare-fun x1157 () Int)
(declare-fun x1257 () Int)
(declare-fun x130 () Bool)
(declare-fun x785 () Int)
(declare-fun x883 () Bool)
(declare-fun x579 () Int)
(declare-fun x227 () Bool)
(declare-fun x992 () Bool)
(declare-fun x1065 () Bool)
(declare-fun x796 () Bool)
(declare-fun x722 () Bool)
(declare-fun x933 () Int)
(declare-fun x1058 (Int Int) Int)
(declare-fun x224 () Int)
(declare-fun x592 () Int)
(declare-fun x38 () Bool)
(declare-fun x841 () Int)
(declare-fun x900 () Int)
(declare-fun x415 () Int)
(declare-fun x14 () Int)
(declare-fun x648 () Int)
(declare-fun x1181 () Bool)
(declare-fun x540 () Bool)
(declare-fun x808 () Int)
(declare-fun x509 () Int)
(declare-fun x109 () Int)
(declare-fun x698 () Bool)
(declare-fun x639 () Bool)
(declare-fun x713 () Int)
(declare-fun x711 () Bool)
(declare-fun x3 () Int)
(declare-fun x942 () Int)
(declare-fun x531 () Int)
(declare-fun x243 () Int)
(declare-fun x1216 () Int)
(declare-fun x1102 () Bool)
(declare-fun x682 () Int)
(declare-fun x446 () Int)
(declare-fun x1180 () Int)
(declare-fun x1232 () Int)
(declare-fun x751 () Bool)
(declare-fun x241 () Int)
(declare-fun x138 () Int)
(declare-fun x651 () Int)
(declare-fun x377 () Int)
(declare-fun x372 () Int)
(declare-fun x1268 () Bool)
(declare-fun x1099 () Bool)
(declare-fun x797 () Bool)
(declare-fun x734 (Int) Int)
(declare-fun x585 () Bool)
(declare-fun x5 () Bool)
(declare-fun x368 () Int)
(declare-fun x1183 () Int)
(declare-fun x1293 () Int)
(declare-fun x1020 () Int)
(declare-fun x305 () Int)
(declare-fun x1049 () Bool)
(declare-fun x1027 () Bool)
(declare-fun x1147 () Int)
(declare-fun x774 () Int)
(declare-fun x1103 () Bool)
(declare-fun x623 () Int)
(declare-fun x1262 () Int)
(declare-fun x668 () Bool)
(declare-fun x326 (Int) Int)
(declare-fun x412 (Int) Int)
(declare-fun x747 () Bool)
(declare-fun x1039 () Int)
(declare-fun x556 () Int)
(declare-fun x635 () Int)
(declare-fun x1243 () Int)
(declare-fun x865 () Bool)
(declare-fun x343 () Int)
(declare-fun x237 () Int)
(declare-fun x828 () Bool)
(declare-fun x229 () Int)
(declare-fun x1006 () Bool)
(declare-fun x90 () Int)
(declare-fun x277 () Int)
(declare-fun x1062 (Int) Int)
(declare-fun x875 () Bool)
(declare-fun x1320 (Int) Int)
(declare-fun x1108 () Int)
(declare-fun x212 () Int)
(declare-fun x778 () Int)
(declare-fun x163 () Int)
(declare-fun x1287 (Int) Int)
(declare-fun x98 () Bool)
(declare-fun x581 () Bool)
(declare-fun x1104 () Bool)
(declare-fun x1171 () Bool)
(declare-fun x903 () Int)
(declare-fun x837 () Bool)
(declare-fun x36 () Bool)
(declare-fun x1121 () Int)
(declare-fun x912 () Bool)
(declare-fun x825 () Int)
(declare-fun x269 () Int)
(declare-fun x772 () Int)
(declare-fun x1044 () Int)
(declare-fun x873 () Int)
(declare-fun x1036 () Bool)
(declare-fun x661 () Bool)
(declare-fun x1000 () Int)
(declare-fun x363 () Bool)
(declare-fun x320 () Int)
(declare-fun x1200 () Int)
(declare-fun x112 () Int)
(declare-fun x111 () Int)
(declare-fun x1066 () Bool)
(declare-fun x549 () Int)
(declare-fun x675 () Int)
(declare-fun x859 () Bool)
(declare-fun x901 () Int)
(declare-fun x587 (Int Int) Int)
(declare-fun x694 () Int)
(declare-fun x42 () Int)
(declare-fun x431 () Bool)
(declare-fun x108 () Int)
(declare-fun x430 () Int)
(declare-fun x1306 () Int)
(declare-fun x986 () Bool)
(declare-fun x844 () Bool)
(declare-fun x282 () Int)
(declare-fun x709 () Bool)
(declare-fun x662 () Int)
(declare-fun x76 () Int)
(declare-fun x1313 () Bool)
(declare-fun x12 () Bool)
(declare-fun x133 (Int) Int)
(declare-fun x65 () Int)
(declare-fun x1060 () Int)
(declare-fun x1197 () Int)
(declare-fun x361 () Int)
(declare-fun x740 () Bool)
(declare-fun x152 () Bool)
(declare-fun x994 () Int)
(declare-fun x453 () Bool)
(declare-fun x1116 () Bool)
(declare-fun x124 () Int)
(declare-fun x1022 () Bool)
(declare-fun x961 () Bool)
(declare-fun x1208 () Int)
(declare-fun x1048 () Int)
(declare-fun x386 () Bool)
(declare-fun x647 () Bool)
(declare-fun x17 () Int)
(declare-fun x249 () Int)
(declare-fun x287 () Int)
(declare-fun x451 () Int)
(declare-fun x358 () Bool)
(declare-fun x501 () Int)
(declare-fun x1141 () Int)
(declare-fun x686 () Bool)
(declare-fun x302 () Int)
(declare-fun x1100 () Bool)
(declare-fun x15 () Bool)
(declare-fun x52 () Int)
(declare-fun x262 () Int)
(declare-fun x862 () Int)
(declare-fun x800 () Int)
(declare-fun x1086 () Bool)
(declare-fun x794 () Bool)
(declare-fun x225 () Bool)
(declare-fun x184 () Int)
(declare-fun x429 () Int)
(declare-fun x79 () Int)
(declare-fun x895 (Int Int Int Int Int) Int)
(declare-fun x200 () Bool)
(declare-fun x260 () Int)
(declare-fun x381 () Bool)
(declare-fun x705 () Int)
(declare-fun x87 () Int)
(declare-fun x921 () Int)
(declare-fun x962 () Int)
(declare-fun x1230 () Bool)
(declare-fun x956 () Int)
(declare-fun x255 () Int)
(declare-fun x486 () Int)
(declare-fun x144 () Int)
(declare-fun x28 () Int)
(declare-fun x527 (Int) Int)
(declare-fun x964 () Int)
(declare-fun x1176 () Int)
(declare-fun x758 () Int)
(declare-fun x946 () Int)
(declare-fun x22 () Int)
(declare-fun x1187 () Int)
(declare-fun x512 () Int)
(declare-fun x1028 () Int)
(declare-fun x905 () Int)
(declare-fun x507 () Bool)
(declare-fun x970 () Int)
(declare-fun x596 () Bool)
(declare-fun x441 () Bool)
(declare-fun x1252 () Int)
(declare-fun x78 () Int)
(declare-fun x729 () Int)
(declare-fun x1110 () Int)
(declare-fun x301 () Int)
(declare-fun x985 () Int)
(declare-fun x405 () Int)
(declare-fun x1037 () Bool)
(declare-fun x548 () Int)
(declare-fun x354 () Bool)
(declare-fun x634 () Bool)
(declare-fun x715 () Int)
(declare-fun x313 () Int)
(declare-fun x749 () Bool)
(declare-fun x333 () Int)
(declare-fun x629 () Int)
(declare-fun x1213 () Bool)
(declare-fun x291 () Bool)
(declare-fun x721 () Int)
(declare-fun x804 () Int)
(declare-fun x104 () Int)
(declare-fun x285 () Int)
(declare-fun x384 () Bool)
(declare-fun x484 () Int)
(declare-fun x551 () Bool)
(declare-fun x532 () Int)
(declare-fun x528 () Int)
(declare-fun x835 () Bool)
(declare-fun x720 () Bool)
(declare-fun x641 () Bool)
(declare-fun x1182 (Int) Int)
(declare-fun x1043 () Bool)
(declare-fun x950 () Int)
(declare-fun x351 () Int)
(declare-fun x449 (Int Int) Int)
(declare-fun x881 () Int)
(declare-fun x399 () Bool)
(declare-fun x958 () Int)
(declare-fun x1265 () Int)
(declare-fun x567 () Bool)
(declare-fun x206 () Int)
(declare-fun x33 () Int)
(declare-fun x1189 (Int) Int)
(declare-fun x461 () Bool)
(declare-fun x1281 () Int)
(declare-fun x472 () Bool)
(declare-fun x1061 () Bool)
(declare-fun x478 () Bool)
(declare-fun x863 () Bool)
(declare-fun x1052 () Bool)
(declare-fun x1228 () Int)
(declare-fun x43 () Bool)
(declare-fun x136 () Int)
(declare-fun x392 () Bool)
(declare-fun x1133 () Int)
(declare-fun x737 () Int)
(declare-fun x1082 () Int)
(declare-fun x1106 () Int)
(declare-fun x786 () Int)
(declare-fun x736 () Int)
(declare-fun x730 () Bool)
(declare-fun x218 () Int)
(declare-fun x409 () Bool)
(declare-fun x75 () Bool)
(declare-fun x759 () Bool)
(declare-fun x1056 () Int)
(declare-fun x577 () Bool)
(declare-fun x1151 () Int)
(declare-fun x85 () Bool)
(declare-fun x594 () Int)
(declare-fun x1231 () Bool)
(declare-fun x909 () Int)
(declare-fun x37 () Int)
(declare-fun x612 () Int)
(declare-fun x819 () Bool)
(declare-fun x677 () Bool)
(declare-fun x1112 () Bool)
(declare-fun x253 () Int)
(declare-fun x24 () Int)
(declare-fun x500 () Int)
(declare-fun x936 () Int)
(declare-fun x902 () Int)
(declare-fun x125 () Bool)
(declare-fun x998 () Int)
(declare-fun x140 () Bool)
(declare-fun x142 () Int)
(declare-fun x1295 () Int)
(declare-fun x889 (Int) Int)
(declare-fun x621 () Bool)
(declare-fun x960 () Int)
(declare-fun x64 () Int)
(declare-fun x166 () Int)
(declare-fun x1045 () Bool)
(declare-fun x276 () Int)
(declare-fun x258 () Bool)
(declare-fun x231 () Int)
(declare-fun x266 () Bool)
(declare-fun x884 () Int)
(declare-fun x1274 () Int)
(declare-fun x481 () Bool)
(declare-fun x508 () Bool)
(declare-fun x1289 () Bool)
(declare-fun x129 () Bool)
(declare-fun x1072 () Int)
(declare-fun x923 () Int)
(declare-fun x318 () Int)
(declare-fun x1284 () Bool)
(declare-fun x356 () Int)
(declare-fun x188 () Int)
(declare-fun x1194 () Bool)
(declare-fun x595 () Int)
(declare-fun x653 () Bool)
(declare-fun x834 () Bool)
(declare-fun x393 () Int)
(declare-fun x856 () Bool)
(declare-fun x319 () Bool)
(declare-fun x999 () Int)
(declare-fun x4 () Int)
(declare-fun x688 () Int)
(declare-fun x376 () Bool)
(declare-fun x657 () Bool)
(declare-fun x349 () Int)
(declare-fun x1261 () Bool)
(declare-fun x1244 () Int)
(declare-fun x553 () Bool)
(declare-fun x861 () Int)
(declare-fun x1032 () Int)
(declare-fun x601 () Int)
(define-fun x233 ((x769 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x769) (>= x769 0)) x769 (- x769 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x1040 ((x769 Int)) Int (ite (and (< x769 0) (>= x769 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x769 115792089237316195423570985008687907853269984665640564039457584007913129639936) x769))
(define-fun x1025 ((x989 Int)) Bool (and (>= x989 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x989)))
(define-fun x462 ((x989 Int)) Bool (and (= (x449 x989 115792089237316195423570985008687907853269984665640564039457584007913129639935) x989) (= (x449 115792089237316195423570985008687907853269984665640564039457584007913129639935 x989) x989)))
(define-fun x1294 ((x989 Int)) Bool (and (= 0 (x449 x989 0)) (= (x449 0 x989) 0)))
(define-fun x665 ((x989 Int)) Bool (= (x449 x989 x989) x989))
(define-fun x348 ((x989 Int)) Bool (and (x665 x989) (x462 x989) (x1294 x989)))
(define-fun x29 ((x989 Int) (x67 Int)) Bool (= (x449 x989 x67) (x449 x67 x989)))
(define-fun x97 ((x989 Int) (x67 Int)) Bool (and (=> (>= x989 0) (>= x989 (x449 x989 x67))) (<= 0 (x449 x989 x67)) (=> (>= x67 0) (<= (x449 x989 x67) x67))))
(define-fun x423 ((x989 Int) (x67 Int)) Bool (and (x97 x989 x67) (x29 x989 x67)))
(define-fun x178 ((x989 Int)) Bool (= (mod x989 2) (x449 x989 1)))
(define-fun x273 ((x989 Int)) Bool (and (x178 x989) (x423 x989 1)))
(define-fun x1185 ((x989 Int)) Bool (= (x449 x989 127) (mod x989 128)))
(define-fun x1113 ((x989 Int)) Bool (and (x1185 x989) (x423 x989 127)))
(define-fun x1115 ((x989 Int)) Bool (= (mod x989 115792089237316195423570985008687907853269984665640564039457584007913129639936) (+ (mod x989 32) (x449 x989 115792089237316195423570985008687907853269984665640564039457584007913129639904))))
(define-fun x790 ((x989 Int)) Bool (and (x423 x989 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x1115 x989)))
(define-fun x13 ((x989 Int)) Bool (= (mod x989 115792089237316195423570985008687907853269984665640564039457584007913129639936) (+ (x449 x989 115792089237316195423570985008687907853269984665640564039457584007913129639680) (mod x989 256))))
(define-fun x768 ((x989 Int)) Bool (and (x13 x989) (x423 x989 115792089237316195423570985008687907853269984665640564039457584007913129639680)))
(define-fun x190 ((x989 Int)) Bool (and (= (x587 115792089237316195423570985008687907853269984665640564039457584007913129639935 x989) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x587 x989 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x1008 ((x989 Int)) Bool (and (= (x587 0 x989) x989) (= (x587 x989 0) x989)))
(define-fun x194 ((x989 Int)) Bool (= (x587 x989 x989) x989))
(define-fun x1074 ((x989 Int)) Bool (and (x190 x989) (x1008 x989) (x194 x989)))
(define-fun x1029 ((x989 Int) (x67 Int)) Bool (= (x587 x67 x989) (x587 x989 x67)))
(define-fun x907 ((x989 Int) (x67 Int)) Bool (and (>= (+ x989 x67) (x587 x989 x67)) (=> (>= x989 0) (<= x989 (x587 x989 x67))) (=> (<= 0 x67) (>= (x587 x989 x67) x67))))
(define-fun x1127 ((x989 Int) (x67 Int)) Bool (and (x1029 x989 x67) (x907 x989 x67)))
(define-fun x1117 ((x989 Int)) Bool (= (mod x989 32) (x449 x989 31)))
(define-fun x1128 ((x989 Int)) Bool (and (x423 x989 31) (x1117 x989)))
(define-fun x439 ((x989 Int)) Bool (= (x449 x989 340282366920938463463374607431768211455) (mod x989 340282366920938463463374607431768211456)))
(define-fun x437 ((x989 Int)) Bool (and (x423 x989 340282366920938463463374607431768211455) (x439 x989)))
(define-fun x1290 ((x989 Int)) Bool (= (x1031 x989) (ite (> 170141183460469231731687303715884105728 (x449 x989 340282366920938463463374607431768211455)) (x449 x989 340282366920938463463374607431768211455) (+ (x449 x989 340282366920938463463374607431768211455) 115792089237316195423570985008687907852929702298719625575994209400481361428480))))
(define-fun x81 ((x888 Int)) Int 0)
(define-fun x1057 ((x888 Int)) Int (ite (> x1004 x888) (x56 x888) 0))
(define-fun x1005 ((x888 Int)) Int (ite (and (< x888 x1004) (>= x888 0)) (x743 x888) (x1057 x888)))
(define-fun x1024 ((x888 Int)) Int (ite (= x803 x888) x501 (x1320 x888)))
(define-fun x1 ((x888 Int)) Int (ite (= x888 x594) x262 (x1024 x888)))
(define-fun x338 ((x888 Int)) Int (ite (= 128 x888) x1192 (x81 x888)))
(define-fun x463 ((x888 Int)) Int (ite (= 160 x888) x735 (x338 x888)))
(define-fun x176 ((x888 Int)) Int (ite (= 160 x888) x175 (x338 x888)))
(define-fun x939 ((x888 Int)) Int (ite (= x888 192) x333 (x463 x888)))
(define-fun x1138 ((x888 Int)) Int (ite x802 (x338 x888) (ite x1181 (ite x431 (x463 x888) (x939 x888)) (x176 x888))))
(define-fun x433 ((x888 Int)) Int (ite (= x888 x910) x862 (x1138 x888)))
(define-fun x864 ((x888 Int)) Int (ite (= x524 x888) x325 (x433 x888)))
(define-fun x418 ((x888 Int)) Int (ite (= x888 x524) x1070 (x433 x888)))
(define-fun x1011 ((x888 Int)) Int (ite (= x888 x313) x25 (x39 x888)))
(define-fun x993 ((x888 Int)) Int (ite x1314 (x39 x888) (x1011 x888)))
(define-fun x1159 ((x888 Int)) Int (ite (= x854 x888) x820 (x864 x888)))
(define-fun x1016 ((x888 Int)) Int (ite x384 (x433 x888) (ite x611 (ite x278 (x864 x888) (x1159 x888)) (x418 x888))))
(define-fun x764 ((x888 Int)) Int (ite (= x888 x548) x1207 (x1016 x888)))
(define-fun x1307 ((x888 Int)) Int (ite (= x888 x1142) x142 (x764 x888)))
(define-fun x1277 ((x888 Int)) Int (ite (= x888 x212) x970 (x1307 x888)))
(define-fun x929 ((x888 Int)) Int (ite (= x888 x1142) x1077 (x764 x888)))
(define-fun x885 ((x888 Int)) Int (ite x1086 (x764 x888) (ite x1215 (ite x975 (x1307 x888) (x1277 x888)) (x929 x888))))
(define-fun x733 ((x888 Int)) Int (ite (= x134 x888) x486 (x885 x888)))
(define-fun x444 ((x888 Int)) Int (ite (= x208 x888) x1094 (x733 x888)))
(define-fun x21 ((x888 Int)) Int (ite (= x888 x673) x1068 (x444 x888)))
(define-fun x664 ((x888 Int)) Int (ite (= x888 x1055) x825 (x21 x888)))
(define-fun x480 ((x888 Int)) Int (ite x689 (x21 x888) (ite x564 (x444 x888) (ite x20 (x733 x888) (ite x248 (x885 x888) (x664 x888))))))
(define-fun x62 ((x888 Int)) Int (ite (= x888 x615) 0 (x480 x888)))
(define-fun x589 ((x888 Int)) Int (ite (= x888 x415) 24 (x62 x888)))
(define-fun x1126 ((x888 Int)) Int (ite (= x134 x888) 15621254588198505905128070491301349125963569839395559151037828136576825163776 (x589 x888)))
(define-fun x335 ((x888 Int)) Int (ite (= x888 x1030) 128 (x1126 x888)))
(define-fun x1162 ((x888 Int)) Int (ite (= x888 x1286) x1105 (x335 x888)))
(define-fun x432 ((x888 Int)) Int (ite (= x888 x1239) x675 (x1162 x888)))
(define-fun x523 ((x888 Int)) Int (ite (= x843 x888) x1209 (x432 x888)))
(define-fun x100 ((x888 Int)) Int (ite (= x607 x888) x1206 (x523 x888)))
(define-fun x1033 ((x888 Int)) Int (ite (= x888 x500) x901 (x100 x888)))
(define-fun x466 ((x888 Int)) Int (ite x242 (x100 x888) (ite x34 (x523 x888) (ite x227 (x432 x888) (ite x293 (x1162 x888) (x1033 x888))))))
(define-fun x181 ((x888 Int)) Int (ite (= x888 x424) 0 (x466 x888)))
(define-fun x485 ((x888 Int)) Int (ite (= x888 x1137) x336 (x181 x888)))
(define-fun x149 ((x888 Int)) Int (ite (= x888 x494) x708 (x485 x888)))
(define-fun x630 ((x888 Int)) Int (ite (= x888 x1235) x224 (x149 x888)))
(define-fun x990 ((x888 Int)) Int (ite (= x888 x1235) x531 (x149 x888)))
(define-fun x669 ((x888 Int)) Int (ite x281 (ite x561 (x149 x888) (x630 x888)) (x990 x888)))
(define-fun x475 ((x888 Int)) Int (ite (= x888 x618) x204 (x669 x888)))
(define-fun x604 ((x888 Int)) Int (ite (= x1169 x888) x702 (x475 x888)))
(define-fun x874 ((x888 Int)) Int (ite (= x655 x888) x1035 (x604 x888)))
(define-fun x456 ((x888 Int)) Int (ite (= x888 x343) x498 (x874 x888)))
(define-fun x232 ((x888 Int)) Int (ite (= x888 x72) x685 (x456 x888)))
(define-fun x380 ((x888 Int)) Int (ite (= x1295 x888) x283 (x232 x888)))
(define-fun x511 ((x888 Int)) Int (ite x264 (x232 x888) (ite x1111 (x456 x888) (ite x1144 (x874 x888) (ite x637 (x604 x888) (x380 x888))))))
(define-fun x848 ((x888 Int)) Int (ite (= x888 x829) 0 (x511 x888)))
(define-fun x411 ((x888 Int)) Int (ite (= x888 x148) x274 (x848 x888)))
(define-fun x119 ((x888 Int)) Int (ite (and (> x134 x888) (<= x134 x888)) (x146 (- x888 x134)) (x411 x888)))
(define-fun x898 ((x888 Int)) Int (ite (= x888 x134) 29289127993025145568725129057828671567744754166070328588094505464281371246592 (x119 x888)))
(define-fun x1199 ((x888 Int)) Int (ite (= x888 x1093) x1136 (x898 x888)))
(define-fun x742 ((x888 Int)) Int (ite (= x888 x1183) x1150 (x1199 x888)))
(define-fun x419 ((x888 Int)) Int (ite (= x134 x888) 10894474682274239493831243662817379401261526446360622092269559273883068006400 (x742 x888)))
(define-fun x53 ((x888 Int)) Int (ite (= x134 x888) x1106 (x419 x888)))
(define-fun x123 ((x888 Int)) Int (ite (= 0 x888) x1106 (x748 x888)))
(define-fun x1125 ((x888 Int)) Int (ite (and (> (+ x134 32) x888) (>= x888 x134)) (x123 (- x888 x134)) (x53 x888)))
(define-fun x732 ((x888 Int)) Int (ite (= x888 x710) x831 (x1125 x888)))
(define-fun x965 ((x888 Int)) Int (ite x1314 (x119 x888) (x732 x888)))
(define-fun x299 ((x888 Int)) Int (ite (= x1208 x888) x143 (x965 x888)))
(define-fun x201 ((x888 Int)) Int (ite (= x888 x353) x339 (x299 x888)))
(define-fun x972 ((x888 Int)) Int (ite (= x857 x888) x627 (x201 x888)))
(define-fun x934 ((x888 Int)) Int 0)
(define-fun x168 ((x888 Int)) Int 0)
(define-fun x1156 ((x888 Int)) Int (ite (= x888 x1187) 0 (x1062 x888)))
(define-fun x1051 ((x888 Int)) Int (ite (= x888 x891) 0 (x1287 x888)))
(define-fun x1139 ((x888 Int)) Int (ite x795 (ite x421 (x1287 x888) (x1051 x888)) (x1287 x888)))
(define-fun x830 ((x888 Int)) Int (ite (= x888 x1053) 0 (x369 x888)))
(define-fun x309 ((x888 Int)) Int (ite (= x888 x1107) 0 (x734 x888)))
(define-fun x1184 ((x888 Int)) Int (ite x215 (ite x747 (x734 x888) (x309 x888)) (x734 x888)))
(define-fun x858 ((x888 Int)) Int (ite (= x1042 x888) 0 (x133 x888)))
(define-fun x695 ((x888 Int)) Int (ite (= x888 x414) 0 (x889 x888)))
(define-fun x275 ((x888 Int)) Int (ite x421 (x1287 x888) (x1051 x888)))
(define-fun x1160 ((x888 Int)) Int (ite x747 (x734 x888) (x309 x888)))
(define-fun x489 ((x888 Int)) Int (ite (= x881 x888) x757 (x972 x888)))
(define-fun x1050 ((x888 Int)) Int (ite x940 (x972 x888) (ite x503 (x201 x888) (ite x128 (x299 x888) (ite x711 (x965 x888) (x489 x888))))))
(define-fun x179 ((x888 Int)) Int (ite (= x888 x717) 0 (x1050 x888)))
(define-fun x1007 ((x888 Int)) Int (ite (= x771 x888) 24 (x179 x888)))
(define-fun x55 ((x888 Int)) Int (ite (= x888 x516) 64 (x1007 x888)))
(define-fun x1203 ((x888 Int)) Int (ite (= x888 x104) x458 (x55 x888)))
(define-fun x197 ((x888 Int)) Int (ite (= x888 x791) x1048 (x1203 x888)))
(define-fun x533 ((x888 Int)) Int (ite (= x426 x888) x1158 (x197 x888)))
(define-fun x1264 ((x888 Int)) Int (ite (= x888 x99) x728 (x533 x888)))
(define-fun x314 ((x888 Int)) Int (ite (= x888 x598) x1054 (x1264 x888)))
(define-fun x793 ((x888 Int)) Int (ite x192 (x1264 x888) (ite x452 (x533 x888) (ite x54 (x197 x888) (ite x602 (x1203 x888) (x314 x888))))))
(define-fun x1146 ((x888 Int)) Int (ite (= x888 x971) 0 (x793 x888)))
(define-fun x565 ((x888 Int)) Int (ite (= x1039 x888) x1254 (x1146 x888)))
(define-fun x1260 ((x888 Int)) Int (ite (= x888 x784) x745 (x565 x888)))
(define-fun x562 ((x888 Int)) Int (ite (= x888 x320) x827 (x1260 x888)))
(define-fun x754 ((x888 Int)) Int (ite (= x1188 x888) x812 (x562 x888)))
(define-fun x177 ((x888 Int)) Int (ite (= x888 x964) x526 (x754 x888)))
(define-fun x1317 ((x888 Int)) Int (ite (= x1219 x888) x624 (x177 x888)))
(define-fun x345 ((x888 Int)) Int (ite x358 (x177 x888) (ite x551 (x754 x888) (ite x974 (x562 x888) (ite x131 (x1260 x888) (x1317 x888))))))
(define-fun x1275 ((x888 Int)) Int (ite (= x455 x888) 0 (x345 x888)))
(define-fun x1063 ((x888 Int)) Int (ite (= x516 x888) 32 (x1275 x888)))
(define-fun x340 ((x888 Int)) Int (ite (= x296 x888) x1087 (x1063 x888)))
(define-fun x1059 ((x888 Int)) Int (ite (= x888 x1034) x375 (x340 x888)))
(define-fun x574 ((x888 Int)) Int (ite (= x603 x888) x1147 (x1059 x888)))
(define-fun x979 ((x888 Int)) Int (ite (= x403 x888) x936 (x574 x888)))
(define-fun x316 ((x888 Int)) Int (ite (= x900 x888) x162 (x979 x888)))
(define-fun x440 ((x888 Int)) Int (ite (= x888 x594) x443 (x1 x888)))
(define-fun x1249 ((x888 Int)) Int (ite (= x888 x92) x27 (x440 x888)))
(define-fun x199 ((x888 Int)) Int (ite (= x888 x124) 1 (x436 x888)))
(define-fun x1303 ((x888 Int)) Int (ite x376 (x979 x888) (ite x1022 (x574 x888) (ite x583 (x1059 x888) (ite x657 (x340 x888) (x316 x888))))))
(define-fun x395 ((x888 Int)) Int (ite (= x997 x888) 0 (x1303 x888)))
(define-fun x584 ((x888 Int)) Int (ite (= x888 x977) 0 (x678 x888)))
(define-fun x402 ((x888 Int)) Int (ite (= x1003 x888) 0 (x394 x888)))
(define-fun x1224 ((x888 Int)) Int (ite x1045 (x678 x888) (x584 x888)))
(define-fun x976 ((x888 Int)) Int (ite x625 (x394 x888) (x402 x888)))
(define-fun x762 ((x888 Int)) Int (ite x837 (x678 x888) (ite x1045 (x678 x888) (x584 x888))))
(define-fun x927 ((x888 Int)) Int (ite x445 (x394 x888) (ite x625 (x394 x888) (x402 x888))))
(define-fun x180 ((x888 Int)) Int (ite (= x888 x1124) x243 (x397 x888)))
(define-fun x557 ((x888 Int)) Int (ite (= x888 x560) x911 (x924 x888)))
(define-fun x228 ((x888 Int)) Int (ite (= x888 x252) x1123 (x762 x888)))
(define-fun x1134 ((x888 Int)) Int (ite (= x888 x1186) x579 (x927 x888)))
(define-fun x805 ((x888 Int)) Int (ite x590 (x762 x888) (x228 x888)))
(define-fun x450 ((x888 Int)) Int (ite (= x888 x28) x1311 (x805 x888)))
(define-fun x886 ((x888 Int)) Int (ite x502 (x927 x888) (x1134 x888)))
(define-fun x663 ((x888 Int)) Int (ite (= x888 x17) x164 (x886 x888)))
(define-fun x1240 ((x888 Int)) Int (ite x1006 (x805 x888) (x450 x888)))
(define-fun x1148 ((x888 Int)) Int (ite (= x888 x1124) x31 (x397 x888)))
(define-fun x847 ((x888 Int)) Int (ite x937 (x886 x888) (x663 x888)))
(define-fun x1315 ((x888 Int)) Int (ite (= x888 x560) x315 (x924 x888)))
(define-fun x945 ((x888 Int)) Int (ite x328 (x1148 x888) (x180 x888)))
(define-fun x442 ((x888 Int)) Int (ite x328 (ite x1006 (x805 x888) (x450 x888)) (x762 x888)))
(define-fun x876 ((x888 Int)) Int (ite x1103 (x1315 x888) (x557 x888)))
(define-fun x555 ((x888 Int)) Int (ite x1103 (ite x937 (x886 x888) (x663 x888)) (x927 x888)))
(define-fun x205 ((x888 Int)) Int (ite (= x888 x163) x274 (x213 x888)))
(define-fun x1091 ((x888 Int)) Int (ite (= x888 x1021) x1136 (x412 x888)))
(assert (= (x527 (x80 64 71998914331801701415977457805802827292338598818749192222732755537001613711014 6)) (x80 64 71998914331801701415977457805802827292338598818749192222732755537001613711014 6)))
(assert (not (x488 (x1271 32 x560))))
(assert (x1025 x1075))
(assert (= x940 (and x298 (not x370))))
(assert (= x310 (and x1153 x209)))
(assert (=> (<= x952 10000) (= (x527 x952) 0)))
(assert (= 0 (x527 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (= x1122 (=> (and (and (= x759 (not (= x407 0))) (= x997 (x233 (+ x1087 x1034))) (= (x1040 (- x86 x471)) x407) (= x1002 16)) (or (and (= x349 (ite (not (> x758 x840)) 1 0)) x759) (and (= (ite x759 1 0) x349) (not x759)))) x1066)))
(assert (= x713 (x19 (x1271 x610 x713))))
(assert (x1025 x539))
(assert (x1025 x99))
(assert (= (or x1221 x388) x103))
(assert (< (x1301 x952 x789 x782 x1236 x933 x286 x832 x23) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x1025 x1130))
(assert (x1025 x382))
(assert (x1025 x774))
(assert (= x87 (x576 (x783 x952 x307 x570 x777 x1296 x806 x87))))
(assert (x1025 x606))
(assert (x1025 x519))
(assert (< 10000 (x1301 x952 x789 x782 x1236 x933 x286 x832 x23)))
(assert (= (or x625 x653) x647))
(assert (= (and x634 (not x172)) x1111))
(assert (= x109 (x879 (x1301 x334 x153 x109 x956 x824 x810 x1227 x9))))
(assert (x1290 x276))
(assert (= (and x922 (not x135)) x131))
(assert (x1025 x646))
(assert (= (x1182 (x969 x610 x726 x1300 x707 x608 x1220)) x707))
(assert (x1025 x1173))
(assert (= 64 (x696 (x80 64 x594 x649))))
(assert (x1025 x1152))
(assert (x1025 x654))
(assert (x1025 x164))
(assert (x768 x391))
(assert (x1025 x276))
(assert (= (x527 (x1271 32 x33)) (x1271 32 x33)))
(assert (x1025 x1166))
(assert (x1074 x739))
(assert (=> (<= x120 10000) (= 0 (x527 x120))))
(assert (x348 x259))
(assert (x1025 x1020))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x80 64 x174 17)))
(assert (x1025 x261))
(assert (= (and x692 x1279) x1194))
(assert (x1025 x946))
(assert (not (x488 (x80 64 x1136 3))))
(assert (= x649 (x879 (x80 64 x594 x649))))
(assert (= (and x1261 x699) x292))
(assert (x1025 x189))
(assert (= (x879 (x80 64 x174 17)) 17))
(assert (=> (>= 10000 x569) (= (x527 x569) 0)))
(assert (x1025 x171))
(assert (=> (<= x554 10000) (= 0 (x527 x554))))
(assert (x1025 x1222))
(assert (=> (<= x63 10000) (= 0 (x527 x63))))
(assert (= (x527 x1187) (x527 (+ 1 x1187))))
(assert (=> (>= 10000 x1216) (= 0 (x527 x1216))))
(assert (x1025 x1306))
(assert (= x920 (x879 (x1301 x700 x917 x920 x48 x614 x428 x272 x654))))
(assert (= x550 (and x683 x77)))
(assert (= (or x590 x522) x51))
(assert (x1025 x594))
(assert (=> (>= 10000 x368) (= 0 (x527 x368))))
(assert (x1025 x823))
(assert (x1025 x366))
(assert (= x922 (or x585 x192 x452 x602 x54)))
(assert (x1025 x1004))
(assert (< (x1271 32 x1124) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (=> (>= 10000 x470) (= (x527 x470) 0)))
(assert (x1025 x591))
(assert (= (and x310 (not x257)) x431))
(assert (x1025 x359))
(assert (x1025 x86))
(assert (< 10000 (x783 x610 x591 x1200 x22 x1225 x268 x725)))
(assert (x1025 x136))
(assert (< (x80 64 114221746417031484496905892821793293822878436923706878644384133060206014517163 1) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x1025 x884))
(assert (= (x1182 (x317 x334 x1283 x1321 x973)) x973))
(assert (=> (<= x803 10000) (= 0 (x527 x803))))
(assert (= (or x95 x937) x1103))
(assert (< 10000 (x1271 32 x560)))
(assert (x1025 x251))
(assert (x1025 x342))
(assert (x1025 x880))
(assert (=> (>= 10000 x933) (= (x527 x933) 0)))
(assert (x348 x1109))
(assert (= 0 (x527 1086394137)))
(assert (x1025 x1165))
(assert (= x427 (or x1198 x802 x1181)))
(assert (= (x19 (x783 x952 x307 x570 x777 x1296 x806 x87)) x307))
(assert (=> (<= x806 10000) (= 0 (x527 x806))))
(assert (x1025 x65))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x1189 0)))
(assert (=> (<= x359 10000) (= (x527 x359) 0)))
(assert (x1025 x599))
(assert (x273 x435))
(assert (= x747 (and (not x890) x390)))
(assert (x488 18446744073709551615))
(assert (= x552 (x879 (x969 x952 x404 x552 x1157 x815 x517))))
(assert (x1025 x303))
(assert (=> (<= x614 10000) (= (x527 x614) 0)))
(assert (= (x326 (x895 x334 x814 x406 x646 x1190)) x1190))
(assert (x1025 x484))
(assert (=> (>= 10000 x931) (= 0 (x527 x931))))
(assert (=> (>= 10000 x304) (= (x527 x304) 0)))
(assert (x488 4294967295))
(assert (x1025 x613))
(assert (x1025 x1262))
(assert (x1025 x217))
(assert (= x280 (and x1061 x867)))
(assert (x1025 x516))
(assert (= (x527 (x317 x952 x836 x251 x76)) (x317 x952 x836 x251 x76)))
(assert (x1025 x603))
(assert (= (=> (and (and (and (= (x589 x1252) x654) (= (x233 (+ x134 160)) x216) (= (x589 x694) x173) (= (x589 x959) x304) (= (x233 (+ x134 64)) x277) (= x79 (x783 x700 x767 x662 x173 x1257 x65 x378)) (= (x589 x134) x63) (= (x233 (+ 32 x910)) x872) (= (x80 x700 x534 x1319) x305) x691 (= x374 (x895 x700 x1161 x69 x592 x430)) (= (x589 x134) x623) (= (x589 x960) x1216) (= x24 (x233 (+ x134 128))) (= (x589 x519) x592) (= x519 (x233 (+ x134 64))) (= x240 (x1271 x700 x63)) (= x755 (x969 x700 x513 x304 x1216 x644 x1218)) (= (x589 x134) x513) (= x236 (x1189 0)) (= x1030 (x233 (+ x134 4))) (= (x589 x189) x69) (= (x589 x182) x428) (= 0 x985) (= x1161 (x589 x134)) (= x541 (x233 (+ x134 96))) (= (x233 (+ x134 128)) x938) (= x48 (x589 x238)) (= x775 (x233 (+ 96 x134))) (= (x589 x24) x65) (= (x233 (+ x134 64)) x694) (= x360 (> x1105 0)) (= x644 (x589 x1096)) (= (x233 (+ x134 96)) x1096) (= x931 (x589 x277)) (= x534 (x589 x134)) (= x230 (x589 x1229)) (= x662 (x589 x636)) (= x614 (x589 x541)) (= x284 (x317 x700 x623 x230 x931)) (= x430 (x589 x529)) (= (x589 x134) x767) (= (x233 (+ 32 x134)) x189) (= x238 (x233 (+ 64 x134))) (= x636 (x233 (+ 32 x134))) (= (x233 (+ x134 192)) x1252) (= (x233 (+ x134 128)) x182) (= (x436 x855) x985) (= x89 (x233 (+ 160 x134))) (= (x589 x775) x1257) (= x529 (x233 (+ 96 x134))) (= (x233 (+ x1030 128)) x1286) (= (x233 (+ x134 32)) x1229) (= x920 (x589 x332)) (= (x233 (+ 32 x134)) x332) (= (x233 (+ x134 32)) x118) (= x855 (ite (= 0 x700) x236 (ite (>= 32 x700) x240 (ite (>= 64 x700) x305 (ite (>= 96 x700) x284 (ite (>= 128 x700) x374 (ite (>= 160 x700) x755 (ite (>= 192 x700) x79 (ite (<= x700 224) x719 x359))))))))) (= x1319 (x589 x118)) (= x1239 (x233 (+ x1286 32))) (= x959 (x233 (+ 32 x134))) (= (x335 x910) x1105) (= (x589 x134) x917) (= (x233 (+ x134 64)) x960) (= (x589 x89) x272) (= (x589 x938) x1218) (= x719 (x1301 x700 x917 x920 x48 x614 x428 x272 x654)) (= x378 (x589 x216))) (and (= x1157 (x589 x578)) (= x45 (x589 x821)) (= x967 (x233 (+ 192 x134))) (= x251 (x589 x1297)) (= x778 (x1189 0)) (= (x1271 x952 x1178) x1247) (= x552 (x589 x165)) (= x815 (x589 x729)) (= x165 (x233 (+ x134 32))) (= x832 (x589 x816)) (= x777 (x589 x811)) (= (x233 (+ 32 x134)) x724) (= x570 (x589 x1272)) (= x1296 (x589 x1167)) (= (x895 x952 x761 x45 x8 x962) x712) (= (x233 (+ x134 128)) x1149) (= x23 (x589 x967)) (= x1013 (x233 (+ x134 128))) (= (x589 x134) x789) (= (x589 x1149) x806) (= (x233 (+ 32 x134)) x821) (= x691 (<= x700 224)) (= (x589 x134) x307) (= (x233 (+ x134 96)) x729) (= (x589 x134) x404) (= (x233 (+ 96 x134)) x1167) (= x836 (x589 x134)) (= (x589 x134) x1178) (= x1121 (x233 (+ x134 160))) (= (x969 x952 x404 x552 x1157 x815 x517) x609) (= (x589 x724) x782) (= x563 (x589 x884)) (= x322 (x233 (+ x134 96))) (= (x589 x704) x286) (= x46 (x80 x952 x303 x563)) x984 (= x8 (x589 x595)) (= (x589 x134) x761) (= (x233 (+ x134 96)) x117) (= x1118 (x783 x952 x307 x570 x777 x1296 x806 x87)) (= (x233 (+ 160 x134)) x816) (= x482 (x317 x952 x836 x251 x76)) (= (x233 (+ x134 32)) x1272) (= (x233 (+ x134 128)) x704) (= (x589 x1013) x517) (= (x589 x117) x962) (= x1236 (x589 x365)) (= (x233 (+ x134 64)) x595) (= x1193 (x233 (+ 64 x134))) (= x365 (x233 (+ x134 64))) (= x87 (x589 x1121)) (= x303 (x589 x134)) (= (x589 x322) x933) (= (x233 (+ x134 32)) x884) (= (x589 x1193) x76) (= x1133 (x1301 x952 x789 x782 x1236 x933 x286 x832 x23)) (= (x233 (+ 64 x134)) x578) (= (x233 (+ 64 x134)) x811) (= (x233 (+ x134 32)) x1297) (= (ite (= x952 0) x778 (ite (<= x952 32) x1247 (ite (<= x952 64) x46 (ite (<= x952 96) x482 (ite (>= 128 x952) x712 (ite (>= 160 x952) x609 (ite (<= x952 192) x1118 (ite (>= 224 x952) x1133 x823)))))))) x499))) (and (= x261 (x233 (+ x415 32))) (= x415 (x233 (+ x198 x134))) (= x952 (x1040 (- x700 32))) (= (x233 (+ x134 x198)) x615) (= (x1040 (- x261 x134)) x700) (= (>= 224 x952) x984))) (and (=> (and (and (= (x1162 x872) x675) (= x152 (< 32 x1105))) x360) (and (=> (and (and (= x1209 (x432 x1075)) (= x355 (< 64 x1105)) (= (x233 (+ 32 x872)) x1075) (= (x233 (+ x1239 32)) x843)) x152) (and (=> (and (and (= (x233 (+ 64 x1239)) x607) (= x640 (> x1105 96)) (= (x233 (+ x872 64)) x1038) (= x1206 (x523 x1038))) x355) (and (=> x640 x1174) (=> (not x640) x1168))) (=> (not x355) x1168))) (=> (not x152) x1168))) (=> (not x360) x1168))) x693))
(assert (=> (>= 10000 x329) (= 0 (x527 x329))))
(assert (x348 x202))
(assert (= (x527 115792089237316195423570985008687907853099843482180094807725896704197245534209) 0))
(assert (=> (<= x1225 10000) (= 0 (x527 x1225))))
(assert (x348 x690))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x783 x952 x307 x570 x777 x1296 x806 x87)))
(assert (= 71998914331801701415977457805802827292338598818749192222732755537001613711014 (x19 (x80 64 71998914331801701415977457805802827292338598818749192222732755537001613711014 6))))
(assert (x1025 x1142))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x895 x610 x1195 x1232 x1101 x635)))
(assert (not (x488 (x1189 0))))
(assert (x1025 x600))
(assert (=> (<= x153 10000) (= (x527 x153) 0)))
(assert (x1025 x1064))
(assert (=> (>= 10000 x174) (= (x527 x174) 0)))
(assert (=> (<= x255 10000) (= (x527 x255) 0)))
(assert (= x215 (or x344 x747)))
(assert (= (and x254 (not x506)) x641))
(assert (x1025 x1150))
(assert (=> (<= x563 10000) (= 0 (x527 x563))))
(assert (x1025 x1048))
(assert (= x1321 (x879 (x317 x334 x1283 x1321 x973))))
(assert (x1025 x959))
(assert (> (x1301 x610 x1244 x417 x255 x108 x1223 x1092 x329) 10000))
(assert (= (or x577 x1288) x1221))
(assert (x1025 x899))
(assert (=> (<= x173 10000) (= 0 (x527 x173))))
(assert (= (x1182 (x317 x610 x470 x1212 x356)) x356))
(assert (= x1178 (x19 (x1271 x952 x1178))))
(assert (= 0 (x527 4132204338)))
(assert (= x258 (and x550 x225)))
(assert (= x689 (and x292 (not x1078))))
(assert (not (x488 (x895 x700 x1161 x69 x592 x430))))
(assert (x1025 x1108))
(assert (=> (<= x8 10000) (= (x527 x8) 0)))
(assert (= x865 (and x1253 (not x1049))))
(assert (not (x488 (x317 x700 x623 x230 x931))))
(assert (x1025 x1178))
(assert (x1025 x1192))
(assert (= x561 (and x409 (not x1102))))
(assert (x1025 x981))
(assert (= (and x74 x752) x828))
(assert (= x564 (and x1261 (not x699))))
(assert (x1113 x112))
(assert (x488 4132204338))
(assert (x1113 x556))
(assert (x1025 x941))
(assert (x1025 x1214))
(assert (x1025 x237))
(assert (=> (<= x256 10000) (= (x527 x256) 0)))
(assert (= x1069 (x879 (x80 x334 x459 x1069))))
(assert (= true x254))
(assert (= (x527 (x1301 x700 x917 x920 x48 x614 x428 x272 x654)) (x1301 x700 x917 x920 x48 x614 x428 x272 x654)))
(assert (x1025 x184))
(assert (x1025 x173))
(assert (=> (>= 10000 x713) (= (x527 x713) 0)))
(assert (x1025 x274))
(assert (> (x1189 0) 10000))
(assert (= 0 (x527 170141183460469231731687303715884105727)))
(assert (= (x527 (x80 64 x174 17)) (x80 64 x174 17)))
(assert (x1025 x1092))
(assert (x1025 x806))
(assert (= (=> (and (and (= x757 (x972 x136)) (= x881 (x233 (+ x1208 96))) (= (not (> x723 128)) x43) (= (x233 (+ x648 96)) x136)) x43) x834) x279))
(assert (= x381 (=> (and x401 (and (= (not (< 128 x1087)) x401) (= x643 (x233 (+ x366 96))) (= x162 (x979 x643)) (= x900 (x233 (+ 96 x1034))))) x1122)))
(assert (= x610 (x696 (x1271 x610 x713))))
(assert (= (x527 (x1301 x952 x789 x782 x1236 x933 x286 x832 x23)) (x1301 x952 x789 x782 x1236 x933 x286 x832 x23)))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x1271 32 x1187)))
(assert (=> (<= x789 10000) (= (x527 x789) 0)))
(assert (= (x527 (x895 x610 x1195 x1232 x1101 x635)) (x895 x610 x1195 x1232 x1101 x635)))
(assert (x1025 x22))
(assert (x1025 x27))
(assert (< (x80 64 x256 x1245) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x1025 x1238))
(assert (x1025 x224))
(assert (= (x576 (x783 x334 x569 x600 x1014 x1067 x93 x1242)) x1242))
(assert (x1025 x1081))
(assert (not (x488 (x80 64 x496 19))))
(assert (x1025 x1259))
(assert (=> (>= 10000 x141) (= 0 (x527 x141))))
(assert (= (and (not x683) x77) x416))
(assert (x1025 x1093))
(assert (x1025 x458))
(assert (x1025 x1311))
(assert (x1025 x618))
(assert (> (x317 x334 x1283 x1321 x973) 10000))
(assert (x348 x112))
(assert (=> (>= 10000 x108) (= (x527 x108) 0)))
(assert (=> (<= x92 10000) (= (x527 x92) 0)))
(assert (x1025 x256))
(assert (= (x527 1000000) 0))
(assert (x1025 x554))
(assert (x1025 x1235))
(assert (x348 x515))
(assert (=> (>= 10000 x268) (= (x527 x268) 0)))
(assert (= (and x1194 (not x464)) x625))
(assert (x1025 x1055))
(assert (not (x488 (x317 x334 x1283 x1321 x973))))
(assert (= (x527 (+ x560 1)) (x527 x560)))
(assert (x1025 x350))
(assert (=> (<= x1321 10000) (= 0 (x527 x1321))))
(assert (> (x317 x700 x623 x230 x931) 10000))
(assert (x1025 x684))
(assert (x1025 x999))
(assert (x1025 x83))
(assert (=> (<= x109 10000) (= 0 (x527 x109))))
(assert (x1025 x775))
(assert (x273 x690))
(assert (=> (<= x22 10000) (= (x527 x22) 0)))
(assert (x1025 x1200))
(assert (x1025 x1206))
(assert (=> (>= 10000 x378) (= (x527 x378) 0)))
(assert (x1025 x142))
(assert (x1025 x878))
(assert (= x219 (and x370 x298)))
(assert (= (x454 (x969 x610 x726 x1300 x707 x608 x1220)) x1220))
(assert (x1025 x857))
(assert (x1025 x1255))
(assert (= (x1182 (x1301 x334 x153 x109 x956 x824 x810 x1227 x9)) x956))
(assert (x1025 x521))
(assert (= (x326 (x969 x700 x513 x304 x1216 x644 x1218)) x644))
(assert (x1025 x845))
(assert (= (x696 (x969 x700 x513 x304 x1216 x644 x1218)) x700))
(assert (= (x696 (x1271 x700 x63)) x700))
(assert (x1025 x405))
(assert (= (and x75 (not x319)) x192))
(assert (=> (>= 10000 x434) (= 0 (x527 x434))))
(assert (x488 114221746417031484496905892821793293822878436923706878644384133060206014517163))
(assert (= (=> (and (or (<= x86 170141183460469231731687303715884105727) (>= x86 115792089237316195423570985008687907853099843482180094807725896704197245534209)) (= x1204 (x449 1 x763)) (<= x633 115792089237316195423570985008687907853269984665640564039457584007913129639934) (or (>= 170141183460469231731687303715884105726 x174) (>= x174 115792089237316195423570985008687907853099843482180094807725896704197245534208)) (<= x910 115792089237316195423570985008687907853269984665640564039457584007913129639934) (< x633 x910) (<= x633 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= (x233 (+ x633 128)) x910) (= x249 (x1040 (- x1204 (mod (ite (> 32 x862) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= x111 (div x763 2)) (<= x910 115792089237316195423570985008687907853269984665640564039457584007913129639934) (< x910 x548) (<= 1 x548) (or (and (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x174) (<= x86 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> x86 x174)) (and (> x174 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x86))) (= x548 (x233 (+ x910 (mod (+ 32 x14) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (= 0 x862) x666) (not (= x633 115792089237316195423570985008687907853269984665640564039457584007913129639808)) (= (x80 64 x174 17) x33) (not (= x633 115792089237316195423570985008687907853269984665640564039457584007913129639808)) (= (ite (> x1204 0) x111 (x449 127 x111)) x862) (or (= x249 1) (= x249 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= 0 x520) (<= x910 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= (* x958 32) x14) (= x958 (div (+ 31 x862) 32)) (= x763 (x1062 x33)) (= (x233 (+ x910 32)) x524) (= 16 x1285) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x633) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639808 x633))) (and (=> (and (not x666) (= (< 31 x862) x1263)) (and (=> (and (not x1263) (and (= (div x1141 256) x838) (= (x1062 x33) x1141) (= (* 256 x838) x1070))) x203) (=> (and x1263 (and (= (x233 (+ x524 32)) x854) (= (+ 1 x1172) x170) (= (x233 (+ x862 x524)) x853) (= (> x853 x854) x222) (= (x1287 x1172) x325) (= (x1271 32 x33) x1172))) (and (=> x222 x906) (=> (not x222) x639))))) (=> x666 x203))) x1202))
(assert (x1025 x949))
(assert (= (or x41 x1314) x756))
(assert (x1025 x842))
(assert (= (and x1041 x36) x504))
(assert (x1025 x1243))
(assert (x1025 x1167))
(assert (x1113 x1109))
(assert (= (x326 (x969 x610 x726 x1300 x707 x608 x1220)) x608))
(assert (< 10000 (x969 x952 x404 x552 x1157 x815 x517)))
(assert (= (x326 (x895 x952 x761 x45 x8 x962)) x962))
(assert (= x952 (x696 (x969 x952 x404 x552 x1157 x815 x517))))
(assert (> (x895 x334 x814 x406 x646 x1190) 10000))
(assert (x1025 x703))
(assert (= (x454 (x1301 x610 x1244 x417 x255 x108 x1223 x1092 x329)) x1223))
(assert (= x251 (x879 (x317 x952 x836 x251 x76))))
(assert (< 10000 (x969 x610 x726 x1300 x707 x608 x1220)))
(assert (x1025 x818))
(assert (x1025 x365))
(assert (< 10000 (x783 x952 x307 x570 x777 x1296 x806 x87)))
(assert (=> (<= x725 10000) (= (x527 x725) 0)))
(assert (x1025 x735))
(assert (x1025 x784))
(assert (x1025 x327))
(assert (= x6 x82))
(assert (x1025 x138))
(assert (x1025 x1141))
(assert (not (x488 (x80 x952 x303 x563))))
(assert (= (x19 (x80 64 x594 x649)) x594))
(assert (= x128 (and x996 (not x495))))
(assert (x1025 x8))
(assert (x1025 x821))
(assert (= (=> (and (= (x233 (+ (mod (+ 32 x674) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x548)) x134) (<= x548 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= (div x868 2) x899) (<= 1 x134) (= (x449 1 x868) x18) (= (x1040 (- x18 (mod (ite (< x1207 32) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x169) (= x1207 (ite (> x18 0) x899 (x449 127 x899))) (= (x369 x571) x868) (= x948 (= x1207 0)) (= x1166 (div (+ x1207 31) 32)) (= x1142 (x233 (+ 32 x548))) (> x134 x548) (<= x548 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= x674 (* 32 x1166)) (<= x548 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= (+ x33 1) x571) (or (= 1 x169) (= x169 115792089237316195423570985008687907853269984665640564039457584007913129639935))) (and (=> x948 x833) (=> (and (= x683 (> x1207 31)) (not x948)) (and (=> (and (not x683) (and (= (div x1000 256) x234) (= (x369 x571) x1000) (= x1077 (* 256 x234)))) x833) (=> (and (and (= x619 (+ x451 1)) (= x479 (x233 (+ x1142 x1207))) (= (x233 (+ x1142 32)) x212) (= x225 (> x479 x212)) (= (x1271 32 x571) x451) (= x142 (x734 x451))) x683) (and (=> x225 x354) (=> (not x225) x1027))))))) x203))
(assert (= (and x98 x291) x765))
(assert (x1025 x541))
(assert (= (and x172 x634) x656))
(assert (x1025 x410))
(assert (not (x488 (x80 64 x594 x649))))
(assert (x1025 x704))
(assert (x1025 x1197))
(assert (= x551 (and (not x1268) x127)))
(assert (x1025 x997))
(assert (x1025 x1094))
(assert (=> (>= 10000 x1255) (= (x527 x1255) 0)))
(assert (x1025 x204))
(assert (=> (<= x45 10000) (= 0 (x527 x45))))
(assert (= (x527 (x783 x952 x307 x570 x777 x1296 x806 x87)) (x783 x952 x307 x570 x777 x1296 x806 x87)))
(assert (x1025 x470))
(assert (x1025 x1136))
(assert (x1025 x607))
(assert (= (x895 x334 x814 x406 x646 x1190) (x527 (x895 x334 x814 x406 x646 x1190))))
(assert (x1113 x923))
(assert (x1025 x1157))
(assert (= x60 (or x676 x1103)))
(assert (x1025 x644))
(assert (x1025 x330))
(assert (= x76 (x1182 (x317 x952 x836 x251 x76))))
(assert (=> (>= 10000 x629) (= 0 (x527 x629))))
(assert (= (x527 x891) (x527 (+ x891 1))))
(assert (=> (>= 10000 x307) (= 0 (x527 x307))))
(assert (x1025 x493))
(assert (= (and x765 x709) x659))
(assert (= x880 (x879 (x80 x610 x1044 x880))))
(assert (=> (<= x1236 10000) (= 0 (x527 x1236))))
(assert (= x209 (and (not x622) x865)))
(assert (x1025 x1135))
(assert (x1025 x807))
(assert (=> (<= x956 10000) (= (x527 x956) 0)))
(assert (x1025 x448))
(assert (= (and x504 x1090) x522))
(assert (x1025 x624))
(assert (= x1212 (x879 (x317 x610 x470 x1212 x356))))
(assert (= x952 (x696 (x1271 x952 x1178))))
(assert (= (x527 114221746417031484496905892821793293822878436923706878644384133060206014517163) 0))
(assert (= (x527 1605942358) 0))
(assert (=> (<= x552 10000) (= (x527 x552) 0)))
(assert (= x1052 (and x94 x355)))
(assert (=> (>= 10000 x832) (= (x527 x832) 0)))
(assert (= (or x892 x828) x159))
(assert (not (x488 (x1271 32 x1053))))
(assert (= (x326 (x969 x952 x404 x552 x1157 x815 x517)) x815))
(assert (not (x488 (x1271 x952 x1178))))
(assert (x1025 x1228))
(assert (< (x80 x334 x459 x1069) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (=> (>= 10000 x272) (= 0 (x527 x272))))
(assert (= (x19 (x1301 x610 x1244 x417 x255 x108 x1223 x1092 x329)) x1244))
(assert (> (x1301 x700 x917 x920 x48 x614 x428 x272 x654) 10000))
(assert (x1025 x1164))
(assert (= (x527 22334872) 0))
(assert (x1025 x870))
(assert (= (x326 (x783 x952 x307 x570 x777 x1296 x806 x87)) x1296))
(assert (x1025 x920))
(assert (x1025 x1216))
(assert (x1025 x368))
(assert (x1025 x582))
(assert (x1025 x435))
(assert (x1025 x308))
(assert (x1025 x210))
(assert (= (x326 (x1301 x334 x153 x109 x956 x824 x810 x1227 x9)) x824))
(assert (x1025 x1030))
(assert (= (x696 (x80 x952 x303 x563)) x952))
(assert (x273 x391))
(assert (x1025 x673))
(assert (= (x696 (x80 64 x174 17)) 64))
(assert (= 0 (x527 57896044618658097711785492504343953926634992332820282019728792003956564819967)))
(assert (x1025 x702))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x969 x700 x513 x304 x1216 x644 x1218)))
(assert (x1025 x931))
(assert (x1025 x1010))
(assert (x1025 x486))
(assert (x1025 x970))
(assert (= (x527 x451) (x527 (+ 1 x451))))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x783 x700 x767 x662 x173 x1257 x65 x378)))
(assert (x1025 x206))
(assert (x1025 x1044))
(assert (= x711 (and (not x605) x756)))
(assert (x348 x90))
(assert (not (x488 (x1271 32 x571))))
(assert (=> (>= 10000 x166) (= (x527 x166) 0)))
(assert (= (x879 (x1301 x952 x789 x782 x1236 x933 x286 x832 x23)) x782))
(assert (x1025 x1299))
(assert (= (and x844 (not x1026)) x583))
(assert (= x623 (x19 (x317 x700 x623 x230 x931))))
(assert (x1025 x994))
(assert (x1025 x1254))
(assert (= (x527 (x1271 32 4)) (x1271 32 4)))
(assert (x1025 x148))
(assert (< (x895 x700 x1161 x69 x592 x430) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x1025 x96))
(assert (not (x488 (x969 x700 x513 x304 x1216 x644 x1218))))
(assert (x1025 x161))
(assert (=> (<= x761 10000) (= (x527 x761) 0)))
(assert (= x700 (x696 (x783 x700 x767 x662 x173 x1257 x65 x378))))
(assert (= (x454 (x969 x334 x903 x434 x1164 x64 x629)) x629))
(assert (= x859 (and x292 x1078)))
(assert (=> (>= 10000 x1136) (= 0 (x527 x1136))))
(assert (x1025 x268))
(assert (= x470 (x19 (x317 x610 x470 x1212 x356))))
(assert (= (ite (> 256 x83) (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x114 2 x83)) 0) (x1058 115792089237316195423570985008687907853269984665640564039457584007913129639935 x83)))
(assert (x1025 x960))
(assert (x1025 x910))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x1271 x700 x63)))
(assert (x1025 x824))
(assert (= x438 (=> (and (and (= (not (> x458 128)) x1191) (= x1054 (x1264 x919)) (= (x233 (+ 96 x852)) x919) (= (x233 (+ 96 x791)) x598)) x1191) x749)))
(assert (=> (<= x623 10000) (= 0 (x527 x623))))
(assert (x1025 x241))
(assert (x1025 x483))
(assert (= (x19 (x80 64 x174 17)) x174))
(assert (= (x696 (x1271 32 x571)) 32))
(assert (x1025 x104))
(assert (= (x696 (x895 x610 x1195 x1232 x1101 x635)) x610))
(assert (x1025 x1310))
(assert (=> (<= x600 10000) (= (x527 x600) 0)))
(assert (= (x696 (x1301 x700 x917 x920 x48 x614 x428 x272 x654)) x700))
(assert (= (=> (= (= 1 (ite (< 31 x1306) 1 0)) x36) (and (=> (and (and (= (x449 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1306) x196) (= x1090 (< 0 x196)) (= (x1271 32 x1124) x252)) x36) (and (=> x1090 x740) (=> (and (and (= x28 x252) (= x869 32)) (not x1090)) x1019))) (=> (and (not x36) (and (= x752 (= x1306 0)) (or (and (not x752) (and (= x50 (x233 (+ 32 x910))) (= x703 x239) (= (x1007 x50) x703))) (and x752 (= 0 x239))))) x1154))) x186))
(assert (x1025 x1252))
(assert (x1025 x487))
(assert (=> (>= 10000 x303) (= (x527 x303) 0)))
(assert (= (and (not x1112) x1313) x54))
(assert (x1025 x1054))
(assert (x488 10894474682274239493831243662817379401261526446360622092269559273883068006400))
(assert (= (x527 404098525) 0))
(assert (x1025 x415))
(assert (x1025 x143))
(assert (= x358 (and (not x559) x290)))
(assert (= 0 (x527 15621254588198505905128070491301349125963569839395559151037828136576825163776)))
(assert (= (x326 (x783 x610 x591 x1200 x22 x1225 x268 x725)) x1225))
(assert (= x1232 (x879 (x895 x610 x1195 x1232 x1101 x635))))
(assert (x1025 x1300))
(assert (= (=> (and x346 (and (= x1280 (+ x1107 1)) (= (not (> x1145 x1280)) x346))) x71) x289))
(assert (x1025 x479))
(assert (x1025 x643))
(assert (x1025 x985))
(assert (= (and (not x759) x914) x1288))
(assert (x1025 x343))
(assert (= (x527 x1107) (x527 (+ 1 x1107))))
(assert (= x1019 (=> (and (= (< x196 x1306) x658) (or (not x658) (and (and (= (* 8 x582) x83) (= x582 (x449 31 x1306)) (= x342 (x1007 x327)) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x1058 115792089237316195423570985008687907853269984665640564039457584007913129639935 x83)) x538) (= x1311 (x449 x342 x538)) (= x327 (x233 (+ x910 x869)))) x658))) x324)))
(assert (=> (>= 10000 x1067) (= 0 (x527 x1067))))
(assert (x1025 x175))
(assert (x1025 x861))
(assert (=> (<= x1300 10000) (= 0 (x527 x1300))))
(assert (= (x696 (x1271 32 x33)) 32))
(assert (= x1044 (x19 (x80 x610 x1044 x880))))
(assert (=> (>= 10000 x356) (= (x527 x356) 0)))
(assert (x1025 x614))
(assert (x1025 x1205))
(assert (x348 31))
(assert (=> (<= x1092 10000) (= 0 (x527 x1092))))
(assert (=> (>= 10000 x1226) (= 0 (x527 x1226))))
(assert (x1025 x122))
(assert (x1025 x422))
(assert (= (or x657 x583 x376 x730 x1022) x914))
(assert (= (x527 x1186) (x527 (+ x1186 1))))
(assert (x1025 x846))
(assert (= x597 (and x1026 x844)))
(assert (= x74 (and x1041 (not x36))))
(assert (=> (<= x76 10000) (= 0 (x527 x76))))
(assert (= x903 (x19 (x969 x334 x903 x434 x1164 x64 x629))))
(assert (x1025 x723))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x1271 32 x1053)))
(assert (= x1171 (and x809 x360)))
(assert (= (x80 x610 x1044 x880) (x527 (x80 x610 x1044 x880))))
(assert (x1025 x267))
(assert (= (and x894 x1292) x461))
(assert (x1025 x608))
(assert (x1025 x1158))
(assert (x1025 x378))
(assert (= (x19 (x1301 x700 x917 x920 x48 x614 x428 x272 x654)) x917))
(assert (= (x1058 115792089237316195423570985008687907853269984665640564039457584007913129639935 x613) (ite (> 256 x613) (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x114 2 x613)) 0)))
(assert (x1025 x1132))
(assert (x1025 x881))
(assert (= x281 (or x1131 x561)))
(assert (= x290 (and x127 x1268)))
(assert (= (x879 (x783 x952 x307 x570 x777 x1296 x806 x87)) x570))
(assert (x1025 x141))
(assert (= (x879 (x80 64 114221746417031484496905892821793293822878436923706878644384133060206014517163 1)) 1))
(assert (x1025 x93))
(assert (x1025 x4))
(assert (x1025 x1286))
(assert (x348 x239))
(assert (x1025 x789))
(assert (not (x488 (x895 x610 x1195 x1232 x1101 x635))))
(assert (x1025 x933))
(assert (x1025 x188))
(assert (= x1195 (x19 (x895 x610 x1195 x1232 x1101 x635))))
(assert (not (x488 (x1271 x700 x63))))
(assert (x1025 x812))
(assert (= x155 (and x922 x135)))
(assert (x1025 x1035))
(assert (=> (<= x1283 10000) (= (x527 x1283) 0)))
(assert (x1025 x108))
(assert (=> (>= 10000 x646) (= 0 (x527 x646))))
(assert (= (and (not x680) x671) x409))
(assert (x1025 x973))
(assert (x1025 x216))
(assert (= (and (not x567) x781) x503))
(assert (x488 1605942358))
(assert (x348 x111))
(assert (x1025 x705))
(assert (= (or x383 x431) x1181))
(assert (x1025 x58))
(assert (= (and (not x666) x427) x751))
(assert (> (x1271 32 x33) 10000))
(assert (x1025 x78))
(assert (= x761 (x19 (x895 x952 x761 x45 x8 x962))))
(assert (x1025 x1018))
(assert (x488 170141183460469231731687303715884105726))
(assert (x1025 x1272))
(assert (x348 x1306))
(assert (=> (>= 10000 x824) (= (x527 x824) 0)))
(assert (x1025 x531))
(assert (= (x527 170141183460469231731687303715884105726) 0))
(assert (x1025 x106))
(assert (x1025 x838))
(assert (x1025 x1069))
(assert (x1025 x1095))
(assert (=> (>= 10000 x1010) (= 0 (x527 x1010))))
(assert (x1025 x92))
(assert (x1025 x467))
(assert (x1025 x803))
(assert (= (x696 (x895 x334 x814 x406 x646 x1190)) x334))
(assert (= x610 (x696 (x80 x610 x1044 x880))))
(assert (x1025 x1305))
(assert (not (x488 (x1271 32 x1187))))
(assert (= x334 (x696 (x1271 x334 x1010))))
(assert (x1025 x23))
(assert (= (x652 (x1301 x334 x153 x109 x956 x824 x810 x1227 x9)) x9))
(assert (x1025 x283))
(assert (x1025 x721))
(assert (x1025 x1109))
(assert (= x634 (and x1036 x364)))
(assert (= (x576 (x783 x700 x767 x662 x173 x1257 x65 x378)) x378))
(assert (x1025 x952))
(assert (= (=> (and (= (x924 x560) x435) (= (x1040 (- x52 (mod (ite (< x606 32) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x110) (or (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x110) (= x110 1)) (<= x1009 18446744073709551615) (= x692 (> x606 31)) (= (ite (< 0 x52) x90 (x449 127 x90)) x606) (= (x449 1 x435) x52) (= x90 (div x435 2)) (= x1009 (x1007 x548)) (= (+ 1 x1124) x560)) (and (=> (and (and (= x37 (div (+ x1009 31) 32)) (= (x1271 32 x560) x543) (= (+ x1110 x543) x1084) (= (+ x37 x543) x736) (= (ite (< x1009 32) x543 x736) x1003) (= x464 (< x1003 x1084)) (= (div (+ x606 31) 32) x1110)) x692) (and (=> x464 x883) (=> (not x464) x6))) (=> (not x692) x82))) x794))
(assert (x1025 x726))
(assert (x1025 x393))
(assert (= x272 (x576 (x1301 x700 x917 x920 x48 x614 x428 x272 x654))))
(assert (=> (>= 10000 x777) (= (x527 x777) 0)))
(assert (= x591 (x19 (x783 x610 x591 x1200 x22 x1225 x268 x725))))
(assert (= (x527 (x80 64 x256 x1245)) (x80 64 x256 x1245)))
(assert (= (x1182 (x969 x700 x513 x304 x1216 x644 x1218)) x1216))
(assert (= (and x75 x319) x585))
(assert (x1025 x862))
(assert (x1025 x336))
(assert (> (x80 x700 x534 x1319) 10000))
(assert (x1025 x674))
(assert (x1025 x598))
(assert (= (=> (and (and (= (x233 (+ 96 x134)) x1055) (= (x21 x1250) x825) (= x420 (not (< 128 x198))) (= x1250 (x233 (+ x721 96)))) x420) x693) x30))
(assert (= x657 (and (not x408) x1291)))
(assert (=> (<= x1164 10000) (= (x527 x1164) 0)))
(assert (= x957 (=> (and (= (> x723 0) x605) (= (x233 (+ 32 x910)) x648) (= x302 (x1040 (- x158 1))) (= (x965 x910) x723)) (and (=> (and (and (= (> x723 32) x495) (= (x965 x648) x143)) x605) (and (=> (not x495) x834) (=> (and (and (= (x299 x808) x339) (= x353 (x233 (+ 32 x1208))) (= (x233 (+ x648 32)) x808) (= x567 (> x723 64))) x495) (and (=> (and x567 (and (= (x233 (+ 64 x648)) x362) (= (x201 x362) x627) (= (x233 (+ x1208 64)) x857) (= (> x723 96) x370))) (and (=> (not x370) x834) (=> x370 x279))) (=> (not x567) x834))))) (=> (not x605) x834)))))
(assert (x1025 x90))
(assert (x1025 x304))
(assert (= (x527 x1107) (x527 (+ x826 x1107))))
(assert (x1025 x120))
(assert (=> (>= 10000 x782) (= (x527 x782) 0)))
(assert (x1025 x728))
(assert (x1025 x1151))
(assert (x1025 x9))
(assert (x1025 x52))
(assert (= (=> (and (= x655 (x233 (+ x1169 32))) (= (x1040 (- x1169 x1030)) x204) (= (x233 (+ x548 32)) x61) (= (x475 x548) x702) (= (< 0 x702) x399) (= (x233 (+ 32 x1137)) x618)) (and (=> (and (and (= (x604 x61) x1035) (= x364 (< 32 x702))) x399) (and (=> (not x364) x130) (=> (and (and (= (> x702 64) x172) (= x498 (x874 x1028)) (= (x233 (+ 32 x61)) x1028) (= (x233 (+ x655 32)) x343)) x364) (and (=> (not x172) x130) (=> (and (and (= (x233 (+ x655 64)) x72) (= (x233 (+ x61 64)) x632) (= x850 (> x702 96)) (= x685 (x456 x632))) x172) (and (=> x850 x10) (=> (not x850) x130))))))) (=> (not x399) x130))) x779))
(assert (x1025 x191))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x317 x334 x1283 x1321 x973)))
(assert (=> (<= x962 10000) (= (x527 x962) 0)))
(assert (= x1161 (x19 (x895 x700 x1161 x69 x592 x430))))
(assert (x348 x687))
(assert (= (x527 (+ x1073 1)) (x527 x1073)))
(assert (= (x527 (+ x1172 1)) (x527 x1172)))
(assert (= x293 (and (not x360) x809)))
(assert (= x892 (and (not x752) x74)))
(assert (=> (>= 10000 x810) (= 0 (x527 x810))))
(assert (x1025 x468))
(assert (= (x19 (x1271 32 x33)) x33))
(assert (not (x488 (x783 x952 x307 x570 x777 x1296 x806 x87))))
(assert (x1025 x1244))
(assert (=> (<= x404 10000) (= 0 (x527 x404))))
(assert (=> (<= x334 10000) (= (x527 x334) 0)))
(assert (= (and (not x152) x1171) x227))
(assert (x1025 x18))
(assert (= x69 (x879 (x895 x700 x1161 x69 x592 x430))))
(assert (not (x488 (x783 x700 x767 x662 x173 x1257 x65 x378))))
(assert (x1025 x1106))
(assert (= (and x727 x222) x588))
(assert (= x726 (x19 (x969 x610 x726 x1300 x707 x608 x1220))))
(assert (=> (<= x1212 10000) (= 0 (x527 x1212))))
(assert (not (x488 (x80 64 114221746417031484496905892821793293822878436923706878644384133060206014517163 1))))
(assert (x1025 x72))
(assert (= (x80 64 x496 19) (x527 (x80 64 x496 19))))
(assert (= (x969 x334 x903 x434 x1164 x64 x629) (x527 (x969 x334 x903 x434 x1164 x64 x629))))
(assert (x1025 x1028))
(assert (x1025 x1047))
(assert (x1025 x226))
(assert (x1025 x911))
(assert (x1025 x532))
(assert (x1025 x745))
(assert (not (x488 (x1271 x334 x1010))))
(assert (not (x488 (x80 64 x174 17))))
(assert (x1025 x737))
(assert (= x156 (or x1215 x1086 x416)))
(assert (x1025 x840))
(assert (= (and x706 x1278) x1061))
(assert (= (x527 10894474682274239493831243662817379401261526446360622092269559273883068006400) 0))
(assert (x1025 x193))
(assert (x1025 x139))
(assert (=> (>= 10000 x65) (= (x527 x65) 0)))
(assert (=> (<= x903 10000) (= (x527 x903) 0)))
(assert (x1025 x904))
(assert (= x400 (=> (and (and (= x797 (not (> x708 32))) (= x224 (x893 x882))) (and x797 (= x509 32))) x897)))
(assert (= (x1182 (x783 x334 x569 x600 x1014 x1067 x93 x1242)) x1014))
(assert (x1025 x306))
(assert (= (or x278 x588) x611))
(assert (=> (>= 10000 x9) (= 0 (x527 x9))))
(assert (x1025 x1009))
(assert (= x478 (=> (and x32 (and (= (x893 x1076) x333) (= x32 (not (> x7 224))))) x953)))
(assert (= (and x1049 x1253) x388))
(assert (= x1278 (or x940 x128 x219 x503 x711)))
(assert (= (and (not x658) x51) x1006))
(assert (= (or x421 x321) x795))
(assert (not (x488 (x80 x334 x459 x1069))))
(assert (x1025 x1121))
(assert (x1025 x14))
(assert (= x571 (x19 (x1271 32 x571))))
(assert (x1025 x1038))
(assert (x1025 x632))
(assert (x1127 x1241 x171))
(assert (= 0 (x527 29289127993025145568725129057828671567744754166070328588094505464281371246592)))
(assert (x1025 x1270))
(assert (x1025 x1096))
(assert (not (x488 (x895 x952 x761 x45 x8 x962))))
(assert (x1025 x813))
(assert true)
(assert (x1025 x500))
(assert (x1025 x424))
(assert (= x883 (=> (and x670 (and (= x47 (+ x1003 1)) (= (not (> x1084 x47)) x670))) x6)))
(assert (= (x527 115792089237316195423570985008687907853269984665640564039457584007913129639808) 0))
(assert (x1025 x157))
(assert (x1025 x245))
(assert (x423 x342 x538))
(assert (= (and (not x640) x1052) x242))
(assert (x790 x138))
(assert (x1025 x1298))
(assert (x1025 x1098))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x80 x610 x1044 x880)))
(assert (x1025 x814))
(assert (= x730 (and x951 x150)))
(assert (= x1154 (=> (and (>= x16 1) (= x16 (x1058 115792089237316195423570985008687907853269984665640564039457584007913129639935 x613)) (= x1241 (x449 x239 x599)) (= (* x1306 2) x171) (= x613 (* 8 x1306)) (= x955 (x233 (+ x171 x1241))) (= (ite (>= 1 x1241) x955 (x587 x1241 x171)) x243) (= x599 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x16))) x794)))
(assert (= (x527 (x1189 0)) (x1189 0)))
(assert (= (x1271 32 x571) (x527 (x1271 32 x571))))
(assert (= (and x751 x1263) x727))
(assert (= (=> (and (= (* 2 x1306) x688) (= x31 (+ x688 1))) x794) x324))
(assert (x488 1086394137))
(assert (x1025 x873))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x969 x610 x726 x1300 x707 x608 x1220)))
(assert (=> (>= 10000 x1014) (= (x527 x1014) 0)))
(assert (x1025 x356))
(assert (< 10000 (x80 64 71998914331801701415977457805802827292338598818749192222732755537001613711014 6)))
(assert (> (x80 64 114221746417031484496905892821793293822878436923706878644384133060206014517163 1) 10000))
(assert (x1025 x300))
(assert (< (x969 x334 x903 x434 x1164 x64 x629) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (x527 (+ x543 x37)) (x527 x543)))
(assert (< 10000 (x783 x700 x767 x662 x173 x1257 x65 x378)))
(assert (x1025 x1072))
(assert (= 32 (x696 (x1271 32 x1124))))
(assert (x348 x556))
(assert (=> (<= x707 10000) (= (x527 x707) 0)))
(assert (x1025 x595))
(assert (x1025 x1039))
(assert (= (x19 (x80 64 x256 x1245)) x256))
(assert (x1025 x724))
(assert (=> (<= x1244 10000) (= 0 (x527 x1244))))
(assert (x1025 x404))
(assert (x1025 x738))
(assert (= (and x765 (not x709)) x502))
(assert (x1025 x498))
(assert (= (x879 (x783 x334 x569 x600 x1014 x1067 x93 x1242)) x600))
(assert (x1025 x459))
(assert (x1025 x1218))
(assert (x1025 x782))
(assert (x1025 x196))
(assert (= x1010 (x19 (x1271 x334 x1010))))
(assert (< (x80 64 x496 19) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= x952 (x696 (x1301 x952 x789 x782 x1236 x933 x286 x832 x23))))
(assert (= x15 (=> (and (and (= x982 x17) x88 (= 64 x542)) (and (= x88 (not (< 32 x818))) (= x982 (+ 1 x1186)) (= x579 (x1007 x981)) (= x981 (x233 (+ x548 32))))) x473)))
(assert (= (x696 (x80 64 114221746417031484496905892821793293822878436923706878644384133060206014517163 1)) 64))
(assert (= x459 (x19 (x80 x334 x459 x1069))))
(assert (x1113 x111))
(assert (=> (<= x1069 10000) (= 0 (x527 x1069))))
(assert (x1025 x964))
(assert (x1025 x524))
(assert (x1025 x1002))
(assert (x1025 x11))
(assert (= x1227 (x576 (x1301 x334 x153 x109 x956 x824 x810 x1227 x9))))
(assert (= (and x409 x1102) x1131))
(assert (=> (<= x1218 10000) (= (x527 x1218) 0)))
(assert (x488 404098525))
(assert (= 32 (x696 (x1271 32 x560))))
(assert (x1025 x578))
(assert (= (x879 (x80 x952 x303 x563)) x563))
(assert (= (x527 (x783 x700 x767 x662 x173 x1257 x65 x378)) (x783 x700 x767 x662 x173 x1257 x65 x378)))
(assert (= (x879 (x80 64 71998914331801701415977457805802827292338598818749192222732755537001613711014 6)) 6))
(assert (= x297 (and (not x465) x1213)))
(assert (x1025 x1236))
(assert (= x298 (and x781 x567)))
(assert (x1025 x361))
(assert (= x328 (or x1210 x1006)))
(assert (=> (<= x700 10000) (= 0 (x527 x700))))
(assert (x1025 x69))
(assert (= (x527 (x895 x952 x761 x45 x8 x962)) (x895 x952 x761 x45 x8 x962)))
(assert (= (x317 x700 x623 x230 x931) (x527 (x317 x700 x623 x230 x931))))
(assert (x1025 x265))
(assert (= x614 (x326 (x1301 x700 x917 x920 x48 x614 x428 x272 x654))))
(assert (x1025 x446))
(assert (> (x1271 32 x1187) 10000))
(assert (x1025 x494))
(assert (x1025 x758))
(assert (=> (<= x1157 10000) (= (x527 x1157) 0)))
(assert (= x1066 (=> (and (= x471 x817) (= x269 x840) (= (= (ite (= x349 0) x349 (ite (< 0 x302) 1 0)) 0) x1289) x1289) x26)))
(assert (=> (>= 10000 x1220) (= 0 (x527 x1220))))
(assert (= x354 (=> (and (and (= x970 (x734 x619)) (= x1251 (not (> x479 x1302))) (= (x233 (+ 32 x212)) x1302)) x1251) x1027)))
(assert (x1025 x923))
(assert (x1025 x162))
(assert (=> (>= 10000 x591) (= (x527 x591) 0)))
(assert (x1025 x1232))
(assert (= (x527 18446744073709551615) 0))
(assert (= (or x248 x859 x20 x564 x689) x809))
(assert (=> (>= 10000 x1205) (= (x527 x1205) 0)))
(assert (x423 x515 x687))
(assert (x1025 x16))
(assert (= (x326 (x783 x334 x569 x600 x1014 x1067 x93 x1242)) x1067))
(assert (x1025 x351))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x317 x952 x836 x251 x76)))
(assert (= (and x916 x295) x95))
(assert (x1025 x238))
(assert (x1025 x174))
(assert (=> (<= x608 10000) (= (x527 x608) 0)))
(assert (=> (<= x662 10000) (= 0 (x527 x662))))
(assert (= x186 x667))
(assert (= x1136 (x19 (x80 64 x1136 3))))
(assert (x1025 x262))
(assert (= x286 (x454 (x1301 x952 x789 x782 x1236 x933 x286 x832 x23))))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x783 x334 x569 x600 x1014 x1067 x93 x1242)))
(assert (x1025 x623))
(assert (= (x879 (x1301 x610 x1244 x417 x255 x108 x1223 x1092 x329)) x417))
(assert (=> (<= x230 10000) (= (x527 x230) 0)))
(assert (= (x527 x1003) (x527 (+ x1003 1))))
(assert (= (x527 x1124) (x527 (+ x1124 1))))
(assert (= (x527 (+ x252 1)) (x527 x252)))
(assert (= x10 (=> (and (and (= (x233 (+ x61 96)) x1072) (= x283 (x232 x1072)) (= x507 (not (> x702 128))) (= (x233 (+ 96 x655)) x1295)) x507) x130)))
(assert (= x517 (x454 (x969 x952 x404 x552 x1157 x815 x517))))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x1301 x700 x917 x920 x48 x614 x428 x272 x654)))
(assert (= x1187 (x19 (x1271 32 x1187))))
(assert (= 32 (x696 (x1271 32 4))))
(assert (= x1198 (and (not x1153) x209)))
(assert (x1025 x810))
(assert (x1025 x593))
(assert (x1025 x526))
(assert (= (x1182 (x1301 x700 x917 x920 x48 x614 x428 x272 x654)) x48))
(assert (x1025 x707))
(assert (=> (>= 10000 x48) (= 0 (x527 x48))))
(assert (x1025 x471))
(assert (= x1027 x833))
(assert (x1025 x329))
(assert (=> (<= x920 10000) (= (x527 x920) 0)))
(assert (x1025 x921))
(assert (= (x527 (x1271 32 x1053)) (x1271 32 x1053)))
(assert (= x153 (x19 (x1301 x334 x153 x109 x956 x824 x810 x1227 x9))))
(assert (= 64 (x696 (x80 64 71998914331801701415977457805802827292338598818749192222732755537001613711014 6))))
(assert (x1025 x1105))
(assert (= (x454 (x1301 x700 x917 x920 x48 x614 x428 x272 x654)) x428))
(assert (x1025 x1302))
(assert (not (x488 (x80 64 x256 x1245))))
(assert (= (x527 x163) (x527 (+ 1 x163))))
(assert (x1025 x403))
(assert (< 10000 (x895 x700 x1161 x69 x592 x430)))
(assert (x1025 x249))
(assert (x1025 x1195))
(assert (=> (>= 10000 x306) (= 0 (x527 x306))))
(assert (x1025 x1123))
(assert (= x65 (x454 (x783 x700 x767 x662 x173 x1257 x65 x378))))
(assert (= x496 (x19 (x80 64 x496 19))))
(assert (=> (<= x1178 10000) (= 0 (x527 x1178))))
(assert (= (=> (and (and (= (x233 (+ 32 x854)) x1097) (= x820 (x1287 x170)) (= (not (< x1097 x853)) x912)) x912) x639) x906))
(assert (= (and x408 x1291) x844))
(assert (not (x488 (x783 x610 x591 x1200 x22 x1225 x268 x725))))
(assert (x1025 x757))
(assert (not (x488 (x317 x952 x836 x251 x76))))
(assert (x1025 x496))
(assert (x1025 x45))
(assert (= (x19 (x1301 x952 x789 x782 x1236 x933 x286 x832 x23)) x789))
(assert (= (x326 (x895 x610 x1195 x1232 x1101 x635)) x635))
(assert (x1025 x909))
(assert (x1025 x868))
(assert (< 10000 (x80 64 x1136 3)))
(assert (= (and x373 x270) x75))
(assert (< (x969 x952 x404 x552 x1157 x815 x517) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x1025 x1147))
(assert (x348 x1009))
(assert (x1025 x651))
(assert (= x1202 x953))
(assert (x1025 x786))
(assert (x1025 x528))
(assert (not (x488 (x969 x334 x903 x434 x1164 x64 x629))))
(assert (x1025 x455))
(assert (= (x652 (x1301 x700 x917 x920 x48 x614 x428 x272 x654)) x654))
(assert (x348 x763))
(assert (x1025 x417))
(assert (x1113 x259))
(assert (=> (>= 10000 x917) (= 0 (x527 x917))))
(assert (= x725 (x576 (x783 x610 x591 x1200 x22 x1225 x268 x725))))
(assert (x1025 x1219))
(assert (= x1234 x151))
(assert (= 19 (x879 (x80 64 x496 19))))
(assert (x1025 x1070))
(assert (x1025 x63))
(assert (x348 x899))
(assert (x1025 x434))
(assert (x1025 x556))
(assert (x1025 x633))
(assert (=> (<= x372 10000) (= (x527 x372) 0)))
(assert (x1025 x145))
(assert (= x1257 (x326 (x783 x700 x767 x662 x173 x1257 x65 x378))))
(assert (x1025 x211))
(assert (x1025 x272))
(assert (x1025 x387))
(assert (= x329 (x652 (x1301 x610 x1244 x417 x255 x108 x1223 x1092 x329))))
(assert (= (and x640 x1052) x1266))
(assert (= (and x1312 (not x399)) x637))
(assert (x437 x276))
(assert (=> (<= x1200 10000) (= 0 (x527 x1200))))
(assert (x1025 x655))
(assert (x1025 x24))
(assert (= (and (not x225) x550) x975))
(assert (x348 x191))
(assert (=> (>= 10000 x64) (= (x527 x64) 0)))
(assert (= x1083 (=> (and (= (x233 (+ 1 x174)) x245) (= x198 (x885 x910)) (= x471 (x233 (+ 1 x174))) (= (x233 (+ 32 x910)) x721) (= x1042 (+ x1053 1)) (= x393 128) (= x894 (> x198 0)) (= x414 (+ 1 x1042))) (and (=> (not x894) x693) (=> (and x894 (and (= x113 (< 32 x198)) (= x486 (x885 x721)))) (and (=> (not x113) x693) (=> (and x113 (and (= x208 (x233 (+ 32 x134))) (= x1094 (x733 x413)) (= (x233 (+ 32 x721)) x413) (= (< 64 x198) x699))) (and (=> (and x699 (and (= (x233 (+ 64 x721)) x1270) (= (< 96 x198) x1078) (= (x444 x1270) x1068) (= x673 (x233 (+ 64 x134))))) (and (=> (not x1078) x693) (=> x1078 x30))) (=> (not x699) x693)))))))))
(assert (x1025 x109))
(assert (= (and x1036 (not x364)) x1144))
(assert (= x334 (x696 (x80 x334 x459 x1069))))
(assert (=> (<= x767 10000) (= 0 (x527 x767))))
(assert (x1025 x932))
(assert (x790 x575))
(assert (x348 x138))
(assert (=> (>= 10000 x823) (= 0 (x527 x823))))
(assert (x1025 x579))
(assert (x1025 x1161))
(assert (x1025 x570))
(assert (= x1269 (and x156 (not x1119))))
(assert (> (x80 64 x594 x649) 10000))
(assert (x1025 x610))
(assert (= x278 (and (not x222) x727)))
(assert (= x952 (x696 (x895 x952 x761 x45 x8 x962))))
(assert (x488 57896044618658097711785492504343953926634992332820282019728792003956564819967))
(assert (= (=> (and (= (x233 (+ x1235 x509)) x1173) (= x1169 x1173)) x779) x897))
(assert (x1025 x263))
(assert (< (x80 64 x594 x649) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x1025 x832))
(assert (= (x696 (x1271 32 x1187)) 32))
(assert (not (x488 (x969 x610 x726 x1300 x707 x608 x1220))))
(assert (x348 x868))
(assert (= (x527 (x80 64 x594 x649)) (x80 64 x594 x649)))
(assert (x1025 x629))
(assert (x488 115792089237316195423570985008687907853099843482180094807725896704197245534209))
(assert (=> (<= x93 10000) (= 0 (x527 x93))))
(assert (= (x895 x700 x1161 x69 x592 x430) (x527 (x895 x700 x1161 x69 x592 x430))))
(assert (x1025 x512))
(assert (= (x879 (x783 x700 x767 x662 x173 x1257 x65 x378)) x662))
(assert (x1025 x31))
(assert (x1025 x938))
(assert (> (x1271 x700 x63) 10000))
(assert (=> (>= 10000 x594) (= (x527 x594) 0)))
(assert (= x836 (x19 (x317 x952 x836 x251 x76))))
(assert (> (x80 x334 x459 x1069) 10000))
(assert (x1025 x353))
(assert (= x863 (=> (and (= (x1031 x276) x106) (= (x1031 x276) x631) (= x276 (x233 (+ x496 1))) (= (x233 (+ 32 x104)) x791) (= (x233 (+ x516 64)) x104) (= x1021 (+ x163 1)) (= (x233 (+ 32 x910)) x852) (= x163 (+ x560 1)) (= (x55 x910) x458) (= (< 0 x458) x1001)) (and (=> (and (and (= (> x458 32) x1112) (= x1048 (x1203 x852))) x1001) (and (=> (and x1112 (and (= x426 (x233 (+ x791 32))) (= x373 (> x458 64)) (= x1158 (x197 x226)) (= x226 (x233 (+ x852 32))))) (and (=> (not x373) x749) (=> (and x373 (and (= x319 (< 96 x458)) (= x99 (x233 (+ x791 64))) (= (x533 x1085) x728) (= x1085 (x233 (+ x852 64))))) (and (=> x319 x438) (=> (not x319) x749))))) (=> (not x1112) x749))) (=> (not x1001) x749)))))
(assert (x1025 x529))
(assert (= 0 (x527 1461501637330902918203684832716283019655932542975)))
(assert (=> (<= x428 10000) (= 0 (x527 x428))))
(assert (= x602 (and x60 (not x1001))))
(assert (x1025 x407))
(assert (x1025 x239))
(assert (x1025 x1068))
(assert (= x770 (or x1269 x795)))
(assert (=> (>= 10000 x635) (= (x527 x635) 0)))
(assert (x1025 x260))
(assert (x488 15621254588198505905128070491301349125963569839395559151037828136576825163776))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x317 x700 x623 x230 x931)))
(assert (> (x969 x334 x903 x434 x1164 x64 x629) 10000))
(assert (= (x317 x334 x1283 x1321 x973) (x527 (x317 x334 x1283 x1321 x973))))
(assert (< 10000 (x1271 x610 x713)))
(assert (not (x488 (x969 x952 x404 x552 x1157 x815 x517))))
(assert (< 10000 (x1271 32 x1053)))
(assert (x1025 x1183))
(assert (= (x1271 x610 x713) (x527 (x1271 x610 x713))))
(assert (x1074 x78))
(assert (= x421 (and (not x871) x686)))
(assert (x1025 x552))
(assert (x1025 x525))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x1271 x610 x713)))
(assert (x1025 x112))
(assert (x1025 x1242))
(assert (x1025 x102))
(assert (x1025 x1163))
(assert (x488 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x1025 x1087))
(assert (= 64 (x696 (x80 64 x1136 3))))
(assert (= (x879 (x969 x610 x726 x1300 x707 x608 x1220)) x1300))
(assert (= (x527 x377) (x527 (+ x377 x1020))))
(assert (x1025 x1295))
(assert (= (x969 x952 x404 x552 x1157 x815 x517) (x527 (x969 x952 x404 x552 x1157 x815 x517))))
(assert (x1025 x111))
(assert (< 10000 (x80 x610 x1044 x880)))
(assert (=> (<= x836 10000) (= (x527 x836) 0)))
(assert (x1025 x50))
(assert (< 10000 (x317 x610 x470 x1212 x356)))
(assert (x1025 x777))
(assert (x1025 x601))
(assert (x1025 x1250))
(assert (x1025 x1274))
(assert (= x8 (x1182 (x895 x952 x761 x45 x8 x962))))
(assert (x1025 x1204))
(assert (= (and x155 (not x1179)) x974))
(assert (x790 x1009))
(assert (= (or x975 x258) x1215))
(assert (= (x527 71998914331801701415977457805802827292338598818749192222732755537001613711014) 0))
(assert (= (x19 (x1271 32 x560)) x560))
(assert (not (x488 (x1301 x952 x789 x782 x1236 x933 x286 x832 x23))))
(assert (x1025 x413))
(assert (x1025 x1169))
(assert (=> (<= x406 10000) (= 0 (x527 x406))))
(assert (not (x488 (x317 x610 x470 x1212 x356))))
(assert (x1025 x391))
(assert (x1025 x389))
(assert (=> (<= x1242 10000) (= (x527 x1242) 0)))
(assert (x1025 x243))
(assert (= 64 (x696 (x80 64 x256 x1245))))
(assert (x1025 x713))
(assert (x348 x391))
(assert (x1025 x307))
(assert (x1025 x791))
(assert (x1025 x428))
(assert (x1025 x182))
(assert (= (x696 (x783 x952 x307 x570 x777 x1296 x806 x87)) x952))
(assert (= 0 (x527 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x1025 x311))
(assert (= 0 (x527 115792089237316195423570985008687907853269984665640564039457584007913129639934)))
(assert (=> (<= x1227 10000) (= 0 (x527 x1227))))
(assert (x1025 x1285))
(assert (= (x1182 (x969 x952 x404 x552 x1157 x815 x517)) x1157))
(assert (= (x527 115792089237316195423570985008687907853099843482180094807725896704197245534208) 0))
(assert (= x1291 (or x131 x70 x974 x358 x551)))
(assert (=> (>= 10000 x23) (= (x527 x23) 0)))
(assert (< 10000 (x1271 32 x571)))
(assert (= (or x540 x641) x1253))
(assert (= x1210 (and x51 x658)))
(assert (x1025 x542))
(assert (x1025 x166))
(assert (= (and x1112 x1313) x270))
(assert (x1025 x288))
(assert (x1025 x277))
(assert (not (x488 (x1271 x610 x713))))
(assert (x1025 x869))
(assert (= (and x1017 x948) x1086))
(assert (= x140 (=> (= x1049 (= (ite (= x58 0) x58 (ite (> x158 0) 1 0)) 0)) (and (=> (and (and (= x1228 (* x804 32)) (= x122 128) (= (div x391 2) x556) (= x1192 (ite (> x1238 0) x556 (x449 127 x556))) (= x1032 (x1040 (- x1238 (mod (ite (< x1192 32) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (or (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1032) (= x1032 1)) (= x1238 (x449 1 x391)) (= (+ 160 x1228) x633) (= x804 (div (+ x1192 31) 32)) (= x622 (= 0 x1192))) (not x1049)) (and (=> (and (= (< 31 x1192) x1153) (not x622)) (and (=> (and (and (= x175 (* 256 x1197)) (= x1197 (div x391 256))) (not x1153)) x1202) (=> (and x1153 (and (= (x893 x1073) x735) (= x1073 (x1271 32 4)) (= (+ x1073 1) x1076) (= x7 (+ x1192 160)) (= x257 (> x7 192)))) (and (=> (not x257) x953) (=> x257 x478))))) (=> x622 x1202))) (=> (and (and (= x817 x174) (= x269 x217)) x1049) x26)))))
(assert (= x933 (x326 (x1301 x952 x789 x782 x1236 x933 x286 x832 x23))))
(assert (not (x488 (x1301 x334 x153 x109 x956 x824 x810 x1227 x9))))
(assert (= (and x1119 x156) x686))
(assert (= (x80 x334 x459 x1069) (x527 (x80 x334 x459 x1069))))
(assert (= x63 (x19 (x1271 x700 x63))))
(assert (x1025 x362))
(assert (= (x1058 115792089237316195423570985008687907853269984665640564039457584007913129639935 x448) (ite (< x448 256) (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x114 2 x448)) 0)))
(assert (x488 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (x1025 x690))
(assert (x1025 x872))
(assert (x1025 x785))
(assert (> (x80 64 x174 17) 10000))
(assert (x1025 x158))
(assert (x1025 x631))
(assert (x790 x1306))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x1271 32 x33)))
(assert (x1025 x76))
(assert (=> (>= 10000 x286) (= 0 (x527 x286))))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x1271 32 x571)))
(assert (x1025 x1015))
(assert (x1025 x761))
(assert (= x41 (and x731 (not x616))))
(assert (x273 x229))
(assert (= (or x611 x1043 x384) x1017))
(assert (= x592 (x1182 (x895 x700 x1161 x69 x592 x430))))
(assert (x1025 x1229))
(assert (x1025 x804))
(assert (= (and x398 x597) x150))
(assert (x1025 x773))
(assert (= x801 (=> (and x722 (and (= x722 (not (> x745 128))) (= x624 (x177 256)) (= x1219 (x233 (+ x320 96))))) x677)))
(assert (= x731 (or x637 x264 x1144 x1111 x207)))
(assert (= x383 (and x257 x310)))
(assert (= (x527 (x783 x334 x569 x600 x1014 x1067 x93 x1242)) (x783 x334 x569 x600 x1014 x1067 x93 x1242)))
(assert (= x1083 x71))
(assert (= (x317 x610 x470 x1212 x356) (x527 (x317 x610 x470 x1212 x356))))
(assert (=> (>= 10000 x496) (= (x527 x496) 0)))
(assert (= (x454 (x783 x952 x307 x570 x777 x1296 x806 x87)) x806))
(assert (< (x1301 x334 x153 x109 x956 x824 x810 x1227 x9) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= x434 (x879 (x969 x334 x903 x434 x1164 x64 x629))))
(assert (x1025 x843))
(assert (x1025 x700))
(assert (= x334 (x696 (x783 x334 x569 x600 x1014 x1067 x93 x1242))))
(assert (x1127 x78 x739))
(assert (x1025 x903))
(assert (=> (>= 10000 x1232) (= 0 (x527 x1232))))
(assert (= x1022 (and x597 (not x398))))
(assert (x348 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (=> (>= 10000 x814) (= (x527 x814) 0)))
(assert (= (x454 (x969 x700 x513 x304 x1216 x644 x1218)) x1218))
(assert (x1025 x926))
(assert (=> (<= x644 10000) (= (x527 x644) 0)))
(assert (x423 x239 x599))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x895 x334 x814 x406 x646 x1190)))
(assert (x1025 x517))
(assert (x1025 x1225))
(assert (=> (>= 10000 x610) (= 0 (x527 x610))))
(assert (= x268 (x454 (x783 x610 x591 x1200 x22 x1225 x268 x725))))
(assert (x1025 x66))
(assert (=> (>= 10000 x513) (= 0 (x527 x513))))
(assert (x1025 x1089))
(assert (x1025 x534))
(assert (x1025 x89))
(assert (x1025 x520))
(assert (x1025 x688))
(assert (x1025 x134))
(assert (x1025 x253))
(assert (= (x527 115792089237316195423570985008687907853269984665640564039457584007913129639680) 0))
(assert (= (x1271 x700 x63) (x527 (x1271 x700 x63))))
(assert (x1025 x7))
(assert (x1025 x854))
(assert (x1025 x1257))
(assert (x1025 x518))
(assert (= (x19 (x969 x952 x404 x552 x1157 x815 x517)) x404))
(assert (=> (>= 10000 x1195) (= 0 (x527 x1195))))
(assert (x1025 x901))
(assert (x1025 x198))
(assert (= x264 (and x656 (not x850))))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x1271 32 x560)))
(assert (x1025 x1188))
(assert (x1025 x474))
(assert (< 10000 (x1271 x334 x1010)))
(assert (x1025 x1067))
(assert (x1025 x1193))
(assert (= (x696 (x1189 0)) 0))
(assert (x1025 x202))
(assert (= x1312 (or x645 x281)))
(assert (not (x488 (x80 x700 x534 x1319))))
(assert (x1025 x315))
(assert (not (x488 (x1301 x700 x917 x920 x48 x614 x428 x272 x654))))
(assert (= x810 (x454 (x1301 x334 x153 x109 x956 x824 x810 x1227 x9))))
(assert (x1025 x1032))
(assert (= x1200 (x879 (x783 x610 x591 x1200 x22 x1225 x268 x725))))
(assert (= (x696 (x969 x334 x903 x434 x1164 x64 x629)) x334))
(assert (x1025 x545))
(assert (x1025 x61))
(assert (=> (<= x726 10000) (= 0 (x527 x726))))
(assert (x1025 x333))
(assert (x1025 x1227))
(assert (x1025 x635))
(assert (= (x19 (x80 x952 x303 x563)) x303))
(assert (x1025 x169))
(assert (and (= 766247770432944429179173513575154591809369561091801088 (x114 2 179)) (= 182687704666362864775460604089535377456991567872 (x114 2 157)) (= (x114 2 88) 309485009821345068724781056) (= (x114 2 95) 39614081257132168796771975168) (= 10141204801825835211973625643008 (x114 2 103)) (= (x114 2 99) 633825300114114700748351602688) (= 178405961588244985132285746181186892047843328 (x114 2 147)) (= (x114 2 82) 4835703278458516698824704) (= 11692013098647223345629478661730264157247460343808 (x114 2 163)) (= (x114 2 0) 1) (= (x114 2 93) 9903520314283042199192993792) (= (x114 2 66) 73786976294838206464) (= 1099511627776 (x114 2 40)) (= 524288 (x114 2 19)) (= 1073741824 (x114 2 30)) (= 5444517870735015415413993718908291383296 (x114 2 132)) (= 4 (x114 2 2)) (= 883423532389192164791648750371459257913741948437809479060803100646309888 (x114 2 239)) (= 8388608 (x114 2 23)) (= 83076749736557242056487941267521536 (x114 2 116)) (= 95780971304118053647396689196894323976171195136475136 (x114 2 176)) (= (x114 2 216) 105312291668557186697918027683670432318895095400549111254310977536) (= (x114 2 100) 1267650600228229401496703205376) (= (x114 2 156) 91343852333181432387730302044767688728495783936) (= 904625697166532776746648320380374280103671755200316906558262375061821325312 (x114 2 249)) (= (x114 2 230) 1725436586697640946858688965569256363112777243042596638790631055949824) (= (x114 2 70) 1180591620717411303424) (= 2199023255552 (x114 2 41)) (= (x114 2 6) 64) (= (x114 2 195) 50216813883093446110686315385661331328818843555712276103168) (= (x114 2 128) 340282366920938463463374607431768211456) (= (x114 2 178) 383123885216472214589586756787577295904684780545900544) (= 1024 (x114 2 10)) (= 137438953472 (x114 2 37)) (= (x114 2 218) 421249166674228746791672110734681729275580381602196445017243910144) (= (x114 2 142) 5575186299632655785383929568162090376495104) (= 2 (x114 2 1)) (= 604462909807314587353088 (x114 2 79)) (= 4611686018427387904 (x114 2 62)) (= (x114 2 18) 262144) (= (x114 2 35) 34359738368) (= 1606938044258990275541962092341162602522202993782792835301376 (x114 2 200)) (= (x114 2 158) 365375409332725729550921208179070754913983135744) (= 5846006549323611672814739330865132078623730171904 (x114 2 162)) (= 590295810358705651712 (x114 2 69)) (= 3213876088517980551083924184682325205044405987565585670602752 (x114 2 201)) (= 2361183241434822606848 (x114 2 71)) (= 452312848583266388373324160190187140051835877600158453279131187530910662656 (x114 2 248)) (= 549755813888 (x114 2 39)) (= (x114 2 43) 8796093022208) (= (x114 2 240) 1766847064778384329583297500742918515827483896875618958121606201292619776) (= (x114 2 86) 77371252455336267181195264) (= 401734511064747568885490523085290650630550748445698208825344 (x114 2 198)) (= (x114 2 83) 9671406556917033397649408) (= (x114 2 144) 22300745198530623141535718272648361505980416) (= 664613997892457936451903530140172288 (x114 2 119)) (= (x114 2 31) 2147483648) (= (x114 2 74) 18889465931478580854784) (= (x114 2 234) 27606985387162255149739023449108101809804435888681546220650096895197184) (= 37778931862957161709568 (x114 2 75)) (= (x114 2 57) 144115188075855872) (= (x114 2 185) 49039857307708443467467104868809893875799651909875269632) (= (x114 2 202) 6427752177035961102167848369364650410088811975131171341205504) (= 81129638414606681695789005144064 (x114 2 106)) (= 4951760157141521099596496896 (x114 2 92)) (= 44601490397061246283071436545296723011960832 (x114 2 145)) (= (x114 2 203) 12855504354071922204335696738729300820177623950262342682411008) (= (x114 2 238) 441711766194596082395824375185729628956870974218904739530401550323154944) (= 1809251394333065553493296640760748560207343510400633813116524750123642650624 (x114 2 250)) (= (x114 2 227) 215679573337205118357336120696157045389097155380324579848828881993728) (= (x114 2 7) 128) (= 274877906944 (x114 2 38)) (= (x114 2 191) 3138550867693340381917894711603833208051177722232017256448) (= 4503599627370496 (x114 2 52)) (= 36893488147419103232 (x114 2 65)) (= (x114 2 211) 3291009114642412084309938365114701009965471731267159726697218048) (= 24519928653854221733733552434404946937899825954937634816 (x114 2 184)) (= (x114 2 5) 32) (= (x114 2 255) 57896044618658097711785492504343953926634992332820282019728792003956564819968) (= (x114 2 214) 26328072917139296674479506920917608079723773850137277813577744384) (= (x114 2 112) 5192296858534827628530496329220096) (= 6901746346790563787434755862277025452451108972170386555162524223799296 (x114 2 232)) (= (x114 2 212) 6582018229284824168619876730229402019930943462534319453394436096) (= (x114 2 13) 8192) (= 2658455991569831745807614120560689152 (x114 2 121)) (= (x114 2 34) 17179869184) (= (x114 2 221) 3369993333393829974333376885877453834204643052817571560137951281152) (= 174224571863520493293247799005065324265472 (x114 2 137)) (= 72057594037927936 (x114 2 56)) (= 42535295865117307932921825928971026432 (x114 2 125)) (= (x114 2 189) 784637716923335095479473677900958302012794430558004314112) (= (x114 2 186) 98079714615416886934934209737619787751599303819750539264) (= 411376139330301510538742295639337626245683966408394965837152256 (x114 2 208)) (= 23945242826029513411849172299223580994042798784118784 (x114 2 174)) (= 2305843009213693952 (x114 2 61)) (= (x114 2 49) 562949953421312) (= 649037107316853453566312041152512 (x114 2 109)) (= 696898287454081973172991196020261297061888 (x114 2 139)) (= 28948022309329048855892746252171976963317496166410141009864396001978282409984 (x114 2 254)) (= (x114 2 166) 93536104789177786765035829293842113257979682750464) (= (x114 2 68) 295147905179352825856) (= 2722258935367507707706996859454145691648 (x114 2 131)) (= 3450873173395281893717377931138512726225554486085193277581262111899648 (x114 2 231)) (= (x114 2 63) 9223372036854775808) (= (x114 2 67) 147573952589676412928) (= 21778071482940061661655974875633165533184 (x114 2 134)) (= 12259964326927110866866776217202473468949912977468817408 (x114 2 183)) (= 6129982163463555433433388108601236734474956488734408704 (x114 2 182)) (= (x114 2 117) 166153499473114484112975882535043072) (= 842498333348457493583344221469363458551160763204392890034487820288 (x114 2 219)) (= (x114 2 160) 1461501637330902918203684832716283019655932542976) (= 170141183460469231731687303715884105728 (x114 2 127)) (= (x114 2 220) 1684996666696914987166688442938726917102321526408785780068975640576) (= (x114 2 171) 2993155353253689176481146537402947624255349848014848) (= 9444732965739290427392 (x114 2 73)) (= (x114 2 138) 348449143727040986586495598010130648530944) (= 1048576 (x114 2 20)) (= 55213970774324510299478046898216203619608871777363092441300193790394368 (x114 2 235)) (= (x114 2 141) 2787593149816327892691964784081045188247552) (= 2097152 (x114 2 21)) (= 89202980794122492566142873090593446023921664 (x114 2 146)) (= (x114 2 194) 25108406941546723055343157692830665664409421777856138051584) (= (x114 2 90) 1237940039285380274899124224) (= 316912650057057350374175801344 (x114 2 98)) (= 68719476736 (x114 2 36)) (= (x114 2 114) 20769187434139310514121985316880384) (= (x114 2 193) 12554203470773361527671578846415332832204710888928069025792) (= 7237005577332262213973186563042994240829374041602535252466099000494570602496 (x114 2 252)) (= 52656145834278593348959013841835216159447547700274555627155488768 (x114 2 215)) (= (x114 2 80) 1208925819614629174706176) (= (x114 2 48) 281474976710656) (= (x114 2 213) 13164036458569648337239753460458804039861886925068638906788872192) (= 65536 (x114 2 16)) (= (x114 2 225) 53919893334301279589334030174039261347274288845081144962207220498432) (= 2417851639229258349412352 (x114 2 81)) (= 85070591730234615865843651857942052864 (x114 2 126)) (= 512 (x114 2 9)) (= (x114 2 120) 1329227995784915872903807060280344576) (= (x114 2 241) 3533694129556768659166595001485837031654967793751237916243212402585239552) (= 22835963083295358096932575511191922182123945984 (x114 2 154)) (= (x114 2 251) 3618502788666131106986593281521497120414687020801267626233049500247285301248) (= 4294967296 (x114 2 32)) (= (x114 2 11) 2048) (= 17592186044416 (x114 2 44)) (= 100433627766186892221372630771322662657637687111424552206336 (x114 2 196)) (= 36028797018963968 (x114 2 55)) (= (x114 2 226) 107839786668602559178668060348078522694548577690162289924414440996864) (= 196159429230833773869868419475239575503198607639501078528 (x114 2 187)) (= (x114 2 242) 7067388259113537318333190002971674063309935587502475832486424805170479104) (= (x114 2 101) 2535301200456458802993406410752) (= (x114 2 151) 2854495385411919762116571938898990272765493248) (= 28269553036454149273332760011886696253239742350009903329945699220681916416 (x114 2 244)) (= 11417981541647679048466287755595961091061972992 (x114 2 153)) (= 23384026197294446691258957323460528314494920687616 (x114 2 164)) (= 87112285931760246646623899502532662132736 (x114 2 136)) (= (x114 2 245) 56539106072908298546665520023773392506479484700019806659891398441363832832) (= 392318858461667547739736838950479151006397215279002157056 (x114 2 188)) (= 38685626227668133590597632 (x114 2 85)) (= (x114 2 97) 158456325028528675187087900672) (= (x114 2 104) 20282409603651670423947251286016) (= 1645504557321206042154969182557350504982735865633579863348609024 (x114 2 210)) (= (x114 2 205) 51422017416287688817342786954917203280710495801049370729644032) (= 618970019642690137449562112 (x114 2 89)) (= (x114 2 108) 324518553658426726783156020576256) (= (x114 2 129) 680564733841876926926749214863536422912) (= (x114 2 222) 6739986666787659948666753771754907668409286105635143120275902562304) (= (x114 2 209) 822752278660603021077484591278675252491367932816789931674304512) (= 11972621413014756705924586149611790497021399392059392 (x114 2 173)) (= 162259276829213363391578010288128 (x114 2 107)) (= (x114 2 143) 11150372599265311570767859136324180752990208) (= 576460752303423488 (x114 2 59)) (= 13803492693581127574869511724554050904902217944340773110325048447598592 (x114 2 233)) (= (x114 2 149) 713623846352979940529142984724747568191373312) (= (x114 2 170) 1496577676626844588240573268701473812127674924007424) (= (x114 2 223) 13479973333575319897333507543509815336818572211270286240551805124608) (= 205688069665150755269371147819668813122841983204197482918576128 (x114 2 207)) (= 5986310706507378352962293074805895248510699696029696 (x114 2 172)) (= (x114 2 60) 1152921504606846976) (= 46768052394588893382517914646921056628989841375232 (x114 2 165)) (= 302231454903657293676544 (x114 2 78)) (= 1532495540865888858358347027150309183618739122183602176 (x114 2 180)) (= 154742504910672534362390528 (x114 2 87)) (= 140737488355328 (x114 2 47)) (= (x114 2 29) 536870912) (= 1569275433846670190958947355801916604025588861116008628224 (x114 2 190)) (= (x114 2 237) 220855883097298041197912187592864814478435487109452369765200775161577472) (= 5708990770823839524233143877797980545530986496 (x114 2 152)) (= 1393796574908163946345982392040522594123776 (x114 2 140)) (= (x114 2 253) 14474011154664524427946373126085988481658748083205070504932198000989141204992) (= (x114 2 50) 1125899906842624) (= (x114 2 14) 16384) (= 113078212145816597093331040047546785012958969400039613319782796882727665664 (x114 2 246)) (= (x114 2 77) 151115727451828646838272) (= (x114 2 25) 33554432) (= (x114 2 228) 431359146674410236714672241392314090778194310760649159697657763987456) (= 288230376151711744 (x114 2 58)) (= (x114 2 168) 374144419156711147060143317175368453031918731001856) (= (x114 2 27) 134217728) (= 41538374868278621028243970633760768 (x114 2 115)) (= (x114 2 102) 5070602400912917605986812821504) (= (x114 2 150) 1427247692705959881058285969449495136382746624) (= 1298074214633706907132624082305024 (x114 2 110)) (= (x114 2 42) 4398046511104) (= 10384593717069655257060992658440192 (x114 2 113)) (= 4194304 (x114 2 22)) (= 268435456 (x114 2 28)) (= (x114 2 15) 32768) (= 40564819207303340847894502572032 (x114 2 105)) (= (x114 2 46) 70368744177664) (= 75557863725914323419136 (x114 2 76)) (= (x114 2 4) 16) (= (x114 2 236) 110427941548649020598956093796432407239217743554726184882600387580788736) (= (x114 2 91) 2475880078570760549798248448) (= (x114 2 177) 191561942608236107294793378393788647952342390272950272) (= 18446744073709551616 (x114 2 64)) (= 4722366482869645213696 (x114 2 72)) (= 21267647932558653966460912964485513216 (x114 2 124)) (= (x114 2 161) 2923003274661805836407369665432566039311865085952) (= (x114 2 118) 332306998946228968225951765070086144) (= (x114 2 12) 4096) (= (x114 2 17) 131072) (= 3064991081731777716716694054300618367237478244367204352 (x114 2 181)) (= (x114 2 135) 43556142965880123323311949751266331066368) (= 19807040628566084398385987584 (x114 2 94)) (= 803469022129495137770981046170581301261101496891396417650688 (x114 2 199)) (= (x114 2 247) 226156424291633194186662080095093570025917938800079226639565593765455331328) (= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x114 2 256)) (= 8 (x114 2 3)) (= 35184372088832 (x114 2 45)) (= 79228162514264337593543950336 (x114 2 96)) (= 45671926166590716193865151022383844364247891968 (x114 2 155)) (= 187072209578355573530071658587684226515959365500928 (x114 2 167)) (= 1361129467683753853853498429727072845824 (x114 2 130)) (= (x114 2 122) 5316911983139663491615228241121378304) (= (x114 2 197) 200867255532373784442745261542645325315275374222849104412672) (= (x114 2 192) 6277101735386680763835789423207666416102355444464034512896) (= 26959946667150639794667015087019630673637144422540572481103610249216 (x114 2 224)) (= (x114 2 51) 2251799813685248) (= (x114 2 204) 25711008708143844408671393477458601640355247900524685364822016) (= (x114 2 84) 19342813113834066795298816) (= 9007199254740992 (x114 2 53)) (= (x114 2 175) 47890485652059026823698344598447161988085597568237568) (= 18014398509481984 (x114 2 54)) (= 102844034832575377634685573909834406561420991602098741459288064 (x114 2 206)) (= (x114 2 148) 356811923176489970264571492362373784095686656) (= (x114 2 33) 8589934592) (= (x114 2 123) 10633823966279326983230456482242756608) (= (x114 2 229) 862718293348820473429344482784628181556388621521298319395315527974912) (= (x114 2 243) 14134776518227074636666380005943348126619871175004951664972849610340958208) (= 730750818665451459101842416358141509827966271488 (x114 2 159)) (= 10889035741470030830827987437816582766592 (x114 2 133)) (= (x114 2 217) 210624583337114373395836055367340864637790190801098222508621955072) (= (x114 2 169) 748288838313422294120286634350736906063837462003712) (= (x114 2 111) 2596148429267413814265248164610048) (= 67108864 (x114 2 26)) (= 256 (x114 2 8)) (= (x114 2 24) 16777216)))
(assert (not (x488 (x1271 32 4))))
(assert (=> (<= x1101 10000) (= 0 (x527 x1101))))
(assert (x1025 x687))
(assert (= (=> (and (= x518 (x1040 (- x206 (mod (ite (> 32 x708) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x233 (+ x1239 x861)) x494) (= (x449 115792089237316195423570985008687907853269984665640564039457584007913129639904 x575) x861) (= x112 (div x391 2)) (= (= 0 x1214) x680) (= x1214 (x449 1 x391)) (= (x449 1 x391) x206) (or (= x518 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x518 1)) (= x708 (ite (> x206 0) x112 (x449 127 x112))) (= x1137 (x233 (+ x1030 32))) (= (x1040 (- x494 x1030)) x336) (= (x233 (+ x494 32)) x1235) (= (x233 (+ x1105 x1239)) x424) (= (x233 (+ 31 x1105)) x575)) (and (=> (and (and (or (= x263 0) (= 32 x263)) (= (* 32 (ite (not (= 0 x708)) 1 0)) x263) (= (x449 115792089237316195423570985008687907853269984665640564039457584007913129639680 x391) x531) (= (x233 (+ x1235 x263)) x870) (= x1169 x870)) x680) x779) (=> (and (not x680) (and (= (> x708 0) x1102) (= x882 (x1271 32 4)))) (and (=> x1102 x400) (=> (and (not x1102) (= 0 x509)) x897))))) x1168))
(assert (x348 x538))
(assert (= (=> (and (= x315 (+ x1151 1)) (= (* 2 x1009) x1151)) x863) x447))
(assert (= x334 (x696 (x1301 x334 x153 x109 x956 x824 x810 x1227 x9))))
(assert (= (=> (and (= (ite (> x237 0) x923 (x449 127 x923)) x253) (= x737 (x1040 (- x237 (mod (ite (> 32 x253) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x369 x1053) x229) (or (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x737) (= 1 x737)) (= (< 31 x253) x753) (= x1053 (+ 1 x1187)) (= (x449 1 x229) x237) (= x923 (div x229 2))) (and (=> (not x753) x1083) (=> (and (and (= x1145 (+ x826 x1107)) (= (div (+ x253 31) 32) x826) (= (x1271 32 x1053) x1107) (= x890 (> x1145 x1107))) x753) (and (=> (not x890) x71) (=> x890 x289))))) x1234))
(assert (x1113 x899))
(assert (= (x696 (x783 x610 x591 x1200 x22 x1225 x268 x725)) x610))
(assert (= (and x1279 (not x692)) x445))
(assert (x1025 x1258))
(assert (x1025 x320))
(assert (= x1231 (or x280 x1045)))
(assert (= x1124 (x19 (x1271 32 x1124))))
(assert (not (x488 (x1301 x610 x1244 x417 x255 x108 x1223 x1092 x329))))
(assert (x1025 x64))
(assert (x1025 x685))
(assert (=> (<= x1190 10000) (= (x527 x1190) 0)))
(assert (x1025 x1129))
(assert (= (=> (and (and x1170 (= x28 x628) (= 64 x869)) (and (= x1123 (x1007 x1114)) (= (x233 (+ x910 32)) x1114) (= x628 (+ 1 x252)) (= (not (> x196 32)) x1170))) x1019) x740))
(assert (x1025 x301))
(assert (x1025 x679))
(assert (x1025 x37))
(assert (x488 170141183460469231731687303715884105727))
(assert (= x1092 (x576 (x1301 x610 x1244 x417 x255 x108 x1223 x1092 x329))))
(assert (= (x1301 x334 x153 x109 x956 x824 x810 x1227 x9) (x527 (x1301 x334 x153 x109 x956 x824 x810 x1227 x9))))
(assert (x1025 x987))
(assert (x1025 x1034))
(assert (x1025 x110))
(assert (x1025 x25))
(assert (x1025 x73))
(assert (< (x1271 x334 x1010) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x1025 x900))
(assert (x1025 x767))
(assert (x1025 x269))
(assert (x1025 x675))
(assert (< 10000 (x783 x334 x569 x600 x1014 x1067 x93 x1242)))
(assert (x1025 x729))
(assert (x1025 x208))
(assert (=> (<= x873 10000) (= 0 (x527 x873))))
(assert (x488 29289127993025145568725129057828671567744754166070328588094505464281371246592))
(assert (= (=> (and (= (x233 (+ x651 x791)) x784) (= (x233 (+ x516 32)) x1039) (= x320 (x233 (+ 32 x784))) (= (> x745 0) x135) (= x138 (x233 (+ x458 31))) (= x1254 (x1040 (- x784 x516))) (= x971 (x233 (+ x458 x791))) (= (x565 128) x745) (= (x449 115792089237316195423570985008687907853269984665640564039457584007913129639904 x138) x651)) (and (=> (and (and (= (x1260 160) x827) (= x1179 (< 32 x745))) x135) (and (=> (not x1179) x677) (=> (and (and (= (x233 (+ x320 32)) x1188) (= (> x745 64) x1268) (= (x562 192) x812)) x1179) (and (=> (and (and (= x964 (x233 (+ x320 64))) (= (> x745 96) x559) (= (x754 224) x526)) x1268) (and (=> x559 x801) (=> (not x559) x677))) (=> (not x1268) x677))))) (=> (not x135) x677))) x749))
(assert (x273 x763))
(assert (x1025 x332))
(assert (x348 x435))
(assert (< (x1301 x610 x1244 x417 x255 x108 x1223 x1092 x329) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x1025 x1077))
(assert (= (x527 x571) (x527 (+ 1 x571))))
(assert (=> (>= 10000 x1257) (= 0 (x527 x1257))))
(assert (= x230 (x879 (x317 x700 x623 x230 x931))))
(assert (x1025 x212))
(assert (= (x527 (x80 64 x1136 3)) (x80 64 x1136 3)))
(assert (=> (>= 10000 x87) (= (x527 x87) 0)))
(assert (= (x527 (x80 x952 x303 x563)) (x80 x952 x303 x563)))
(assert (x1025 x302))
(assert (= x26 (=> (and (= x59 false) (= (x1040 (- x86 x817)) x785) (= x537 (x995 x594)) (= false x1246) (= x210 1) (= x766 false) (<= x800 127) (>= 127 x300) (= 4 x235) (= false x856) (= false x596) (>= x361 1) (= x160 false) (>= 127 x800) (= x944 false) (>= 127 x300) (= x875 (not x40)) (= x481 false) (= 4132204338 x265) (= x282 22334872) (= false x137) (= (= 0 x785) x40) (= x684 16) (>= x537 1) (= x468 4) (= x312 false) (= false x896) (= x105 false) (= x361 (x995 x594)) (= x963 false) (= x453 false)) x875)))
(assert (x423 x191 x792))
(assert (= (and x753 x770) x390))
(assert (x488 115792089237316195423570985008687907853269984665640564039457584007913129639808))
(assert (=> (<= x880 10000) (= (x527 x880) 0)))
(assert (x1025 x1239))
(assert (= (x527 x33) (x527 (+ 1 x33))))
(assert (= (x527 (x1271 32 x1187)) (x1271 32 x1187)))
(assert (x1025 x107))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x895 x952 x761 x45 x8 x962)))
(assert (= (and (not x291) x98) x1213))
(assert (x1025 x998))
(assert (x1025 x826))
(assert (x1025 x792))
(assert (= (x527 (+ x84 1)) (x527 x84)))
(assert (= x833 (=> (and (= x274 (x133 x84)) (= x1119 (> x422 31)) (= (x1062 x1187) x690) (= x1187 (x80 64 x174 17)) (= (+ 1 x84) x331) (= x1305 (x1040 (- x308 (mod (ite (< x422 32) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (or (= x1305 1) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1305)) (= (div x690 2) x1109) (= (ite (< 0 x308) x1109 (x449 127 x1109)) x422) (= (x449 1 x690) x308) (<= x1136 1461501637330902918203684832716283019655932542975) (= (x889 x331) x1136) (= (+ 1 x571) x84)) (and (=> (and (and (= x891 (x1271 32 x1187)) (= x549 (+ x891 x983)) (= (> x549 x891) x871) (= x983 (div (+ 31 x422) 32))) x1119) (and (=> (not x871) x151) (=> x871 x246))) (=> (not x1119) x1234)))))
(assert (x1025 x817))
(assert (= (and x399 x1312) x1036))
(assert (x1025 x983))
(assert (x1025 x509))
(assert (x488 115792089237316195423570985008687907853099843482180094807725896704197245534208))
(assert (x1025 x627))
(assert (= (and x671 x680) x645))
(assert (x1025 x544))
(assert (< (x1271 x952 x1178) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x1025 x827))
(assert (= (x1271 32 x1124) (x527 (x1271 32 x1124))))
(assert (= (x879 (x80 x700 x534 x1319)) x1319))
(assert (x1025 x800))
(assert (x1025 x1071))
(assert (x1025 x1209))
(assert (x1025 x955))
(assert (x1025 x617))
(assert (=> (>= 10000 x1161) (= 0 (x527 x1161))))
(assert (= (x527 (+ x977 1)) (x527 x977)))
(assert (x1025 x165))
(assert (x1025 x1220))
(assert (x1025 x1190))
(assert (> (x1271 32 4) 10000))
(assert (x1025 x978))
(assert (= x473 (=> (and (or (not x916) (and x916 (and (= x382 (x449 31 x1009)) (= x164 (x449 x515 x687)) (= x195 (* x382 8)) (= x493 (x233 (+ x548 x542))) (= x687 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x1058 115792089237316195423570985008687907853269984665640564039457584007913129639935 x195))) (= x515 (x1007 x493))))) (= x916 (> x1009 x818))) x447)))
(assert (= (x1271 x952 x1178) (x527 (x1271 x952 x1178))))
(assert (= x1053 (x19 (x1271 32 x1053))))
(assert (= (x879 (x895 x334 x814 x406 x646 x1190)) x406))
(assert (x348 x792))
(assert (x1025 x430))
(assert (x1025 x1321))
(assert (x1025 x717))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x80 x700 x534 x1319)))
(assert (x1025 x648))
(assert (= x57 (=> (and (and (= x256 x1217) (and (and (= x220 (x1024 x594)) (= x1282 false) (= (x1040 (- x86 x174)) x288) (= x682 16) (not (< x387 x758)) (= x220 x262) (= x1265 (x80 64 x256 x1245)) (or (>= 170141183460469231731687303715884105727 x174) (<= 115792089237316195423570985008687907853099843482180094807725896704197245534208 x174)) (= 2 x1304) (<= x904 127) (= (x535 x1265) x107) (<= 1 x107) (or (<= 115792089237316195423570985008687907853099843482180094807725896704197245534208 x86) (>= 170141183460469231731687303715884105727 x86)) (= x267 114221746417031484496905892821793293822878436923706878644384133060206014517163) (= x506 (not (= 0 x288))) (= x525 1605942358) (>= x1095 1) (>= 255 x107) (= x1135 1) (>= 127 x904) (= (x80 64 114221746417031484496905892821793293822878436923706878644384133060206014517163 1) x1245) (= x1217 x803) (= (x995 x594) x1095) (= false x580) (= (x1320 x803) x501) (= (x1040 (- x387 x1150)) x758) (not (= 2 x544))) (or (and x506 (= x58 (ite (not (< x217 x758)) 1 0))) (and (= x58 (ite x506 1 0)) (not x506))))) (and (= false x720) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x367) (not (= x1205 x873)) (not (= x1205 x594)) (not (= x873 x120)) (>= 1461501637330902918203684832716283019655932542975 x1255) (not (= x372 x350)) (= x1276 (> (x995 x873) 0)) (= x594 x145) (= (< 0 (x995 x1205)) x1116) (>= 1461501637330902918203684832716283019655932542975 x1130) (= x715 0) (not (= x594 x120)) (>= x145 1) (>= 1461501637330902918203684832716283019655932542975 x166) (>= x505 0) (>= x1259 1) (>= x1217 0) (not (= x1205 x372)) (not (= x1205 x141)) (not (= x166 x1205)) (>= 4294967295 x1079) (= false x1267) (>= 1461501637330902918203684832716283019655932542975 x92) (= x1155 x594) (<= x1259 1461501637330902918203684832716283019655932542975) (not (= x554 x368)) (= false x250) (not (= x141 x372)) x363 (not (= x350 x1205)) (= x1259 x873) (= x813 x1243) (>= x1079 0) (<= x352 1461501637330902918203684832716283019655932542975) (>= x787 0) (not (= x873 x350)) (= (< 0 (x995 x554)) x925) (= x553 (< 0 (x995 x594))) (= (> (x995 x120) 0) x363) (= 1605942358 x271) (= x841 0) (not (= x120 x554)) (= x141 x1255) (<= x1281 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x873) (<= 0 x942) (not (= x350 x368)) (<= x1222 255) (not (= x166 x368)) (<= 1 x887) (>= x429 0) (<= 1 x368) (not (= x372 x120)) (= false x701) (= x913 (> (x995 x141) 0)) (not (= x554 x141)) (= (< 0 (x995 x372)) x650) (not (= x350 x554)) (<= x145 1461501637330902918203684832716283019655932542975) (not (= x166 x594)) (not (= x554 x594)) (not (= x372 x166)) (not (= x141 x120)) (not (= x594 x873)) (>= 1461501637330902918203684832716283019655932542975 x1258) (not (= x141 x368)) x1116 (>= x166 1) (= x125 (< 0 (x995 x166))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x505) (not (= x350 x120)) (= x372 x1258) (>= x594 1) (<= x144 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x1130 x594) (>= x514 0) (>= 1461501637330902918203684832716283019655932542975 x1205) (not (= x350 x594)) x925 (not (= x372 x368)) x1276 (not (= x1205 x554)) (>= x510 0) (>= x1205 1) (>= x554 1) (>= 1461501637330902918203684832716283019655932542975 x1217) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1004) (<= x887 1461501637330902918203684832716283019655932542975) (not (= x594 x141)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x942) (not (= x120 x368)) (>= 255 x193) (<= x141 1461501637330902918203684832716283019655932542975) (= x930 (< 0 (x995 x350))) (not (= x372 x554)) (not (= x368 x873)) (= x1205 x887) (<= 1 x350) (>= x1255 1) (not (= x166 x873)) (<= x120 1461501637330902918203684832716283019655932542975) (>= x141 1) (not (= x873 x372)) (<= x679 255) (not (= x594 x372)) (<= x787 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= x429 1461501637330902918203684832716283019655932542975) (not (= x141 x873)) (<= 1 x120) (<= 0 x144) (<= x594 1461501637330902918203684832716283019655932542975) (<= x554 1461501637330902918203684832716283019655932542975) x930 (>= 1461501637330902918203684832716283019655932542975 x350) (not (= x594 x368)) (>= x1281 0) (<= 4 x1004) (not (= x166 x120)) (<= x1018 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x372) (<= 1 x372) (<= x368 1461501637330902918203684832716283019655932542975) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x514) (<= x510 115792089237316195423570985008687907853269984665640564039457584007913129639935) x1088 (not (= x166 x554)) (= x1088 (> (x995 x368) 0)) (= x813 (x743 0)) (<= 1 x1018) (<= 0 x367) x650 (<= 1 x873) x125 (<= 1 x1258) (not (= x554 x873)) (<= 0 x352) (not (= x166 x141)) x553 (not (= x350 x166)) x913 (<= 1 x1130) (not (= x141 x350)) (= false x441) (not (= x1205 x368)) (= x1018 x350) (not (= x120 x1205)))) x140)))
(assert (> (x895 x610 x1195 x1232 x1101 x635) 10000))
(assert (= x610 (x696 (x317 x610 x470 x1212 x356))))
(assert (x1025 x1296))
(assert (x348 x599))
(assert (x1025 x853))
(assert (x1025 x118))
(assert (x1025 x334))
(assert (x348 1))
(assert (= 32 (x696 (x1271 32 x1053))))
(assert (not (x488 (x80 x610 x1044 x880))))
(assert (= x671 (or x1266 x242 x227 x34 x293)))
(assert (x1074 x1241))
(assert (x1025 x636))
(assert (= (=> (and (and (and (= (x449 1 x202) x311) (= (x233 (+ x1208 128)) x516) (= (x1007 x1208) x814) (= (x1040 (- x311 (mod (ite (< x318 32) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x1165) (= (x233 (+ 96 x1208)) x1152) (= (x1007 x1208) x569) (= x532 (x233 (+ 32 x1208))) (= (x1007 x425) x434) (= x706 (> x318 31)) (= x497 (x80 x334 x459 x1069)) (= x406 (x1007 x926)) (= x1316 (x233 (+ x1208 64))) (= (div x202 2) x259) (= x1274 (x233 (+ x1208 128))) (= (x233 (+ 128 x1208)) x96) (= (x1007 x994) x1190) (or (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1165) (= 1 x1165)) (= (x1007 x601) x1321) (= x903 (x1007 x1208)) (= x926 (x233 (+ 32 x1208))) (= x341 (x317 x334 x1283 x1321 x973)) (= (x233 (+ x1208 32)) x1047) (= x1273 (x783 x334 x569 x600 x1014 x1067 x93 x1242)) (= x1010 (x1007 x1208)) (= x459 (x1007 x1208)) (= x1227 (x1007 x42)) (= x994 (x233 (+ 96 x1208))) (= x1283 (x1007 x1208)) (= (x1007 x487) x600) (= x1211 (x1189 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x1208) (or (>= 170141183460469231731687303715884105727 x496) (<= 115792089237316195423570985008687907853099843482180094807725896704197245534208 x496)) (= (x1007 x1274) x629) (= x323 (x1271 x334 x1010)) (<= x1306 18446744073709551615) (= x512 (x233 (+ 64 x1208))) (= (x233 (+ 64 x1208)) x998) (= x705 (x233 (+ x1208 96))) (= x425 (x233 (+ 32 x1208))) (= (x1007 x910) x1306) (= (x233 (+ 32 x1208)) x487) (= (x1007 x96) x810) (= (x233 (+ x1208 160)) x807) (= x902 (x895 x334 x814 x406 x646 x1190)) (= x124 (ite (= x334 0) x1211 (ite (>= 32 x334) x323 (ite (>= 64 x334) x497 (ite (<= x334 96) x341 (ite (<= x334 128) x902 (ite (<= x334 160) x1060 (ite (<= x334 192) x1273 (ite (<= x334 224) x1293 x1226))))))))) (= (x233 (+ 64 x1208)) x260) (= x1124 (x80 64 x496 19)) (= x109 (x1007 x1047)) (= (x1007 x1316) x973) (= x646 (x1007 x260)) (= (x397 x1124) x202) (= (x1301 x334 x153 x109 x956 x824 x810 x1227 x9) x1293) (= (x1007 x1152) x1067) (not (= x1208 115792089237316195423570985008687907853269984665640564039457584007913129639808)) (not (= x1208 115792089237316195423570985008687907853269984665640564039457584007913129639808)) (= 18 x157) (= (ite (> x311 0) x259 (x449 127 x259)) x318) (= x1242 (x1007 x807)) (= x943 (x233 (+ 192 x1208))) (= x9 (x1007 x943)) x697 (= (x1007 x998) x956) (<= x1208 115792089237316195423570985008687907853269984665640564039457584007913129639934) (not (= x1208 115792089237316195423570985008687907853269984665640564039457584007913129639808)) (= (x969 x334 x903 x434 x1164 x64 x629) x1060) (= x1015 (x233 (+ x1208 128))) (= x93 (x1007 x1015)) (< x1208 x516) (= x1069 (x1007 x532)) (= (x1007 x1208) x153) (= (x1007 x705) x64) (<= x1208 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= x824 (x1007 x528)) (= x42 (x233 (+ 160 x1208))) (= x1098 (x233 (+ 64 x1208))) (= x601 (x233 (+ 32 x1208))) (= (x233 (+ 96 x1208)) x528) (= (x1007 x512) x1164) (= (x1007 x1098) x1014)) (and (= (x1007 x786) x329) (= x545 (x233 (+ 32 x1208))) (= (x233 (+ x1208 32)) x1308) (= x3 (ite (= 0 x610) x760 (ite (>= 32 x610) x247 (ite (<= x610 64) x1056 (ite (>= 96 x610) x1082 (ite (>= 128 x610) x822 (ite (>= 160 x610) x660 (ite (<= x610 192) x642 (ite (<= x610 224) x547 x306))))))))) (= (x1007 x1208) x1244) (= x642 (x783 x610 x591 x1200 x22 x1225 x268 x725)) (= x1200 (x1007 x73)) (= (x233 (+ x1208 192)) x786) (= (x233 (+ 160 x1208)) x139) (= x241 (x233 (+ 32 x1208))) (= (x1007 x612) x22) (= x1101 (x1007 x946)) (= x188 (x233 (+ 96 x1208))) (= (x233 (+ x1208 128)) x11) (= x211 (x233 (+ x1208 64))) (= x73 (x233 (+ x1208 32))) (= (x1007 x593) x1223) (= (x233 (+ 96 x1208)) x483) (= (x233 (+ x1208 96)) x474) (= (x233 (+ x1208 64)) x738) (= (x1189 0) x760) (= x547 (x1301 x610 x1244 x417 x255 x108 x1223 x1092 x329)) (= x1082 (x317 x610 x470 x1212 x356)) (= x1300 (x1007 x1089)) (= (>= 224 x334) x697) (= (x1007 x241) x1232) (= x909 (x233 (+ 160 x1208))) (= (x1007 x474) x608) (= x946 (x233 (+ 64 x1208))) (= x713 (x1007 x1208)) (= x108 (x1007 x1176)) (= x1056 (x80 x610 x1044 x880)) (= x591 (x1007 x1208)) (= x1044 (x1007 x1208)) (= x1092 (x1007 x909)) x776 (= (x895 x610 x1195 x1232 x1101 x635) x822) (= x247 (x1271 x610 x713)) (= (x1007 x1208) x470) (= x660 (x969 x610 x726 x1300 x707 x608 x1220)) (= (x1007 x1163) x356) (= x725 (x1007 x139)) (= x1225 (x1007 x483)) (= (x233 (+ 64 x1208)) x612) (= x1163 (x233 (+ 64 x1208))) (= (x1007 x1208) x726) (= (x1007 x11) x268) (= x1089 (x233 (+ x1208 32))) (= (x233 (+ x1208 32)) x1108) (= x707 (x1007 x211)) (= (x1007 x738) x255) (= x1176 (x233 (+ 96 x1208))) (= x1195 (x1007 x1208)) (= (x1007 x545) x417) (= x1220 (x1007 x1180)) (= (x1007 x1108) x1212) (= x635 (x1007 x188)) (= (x1007 x1308) x880) (= x1180 (x233 (+ x1208 128))) (= x593 (x233 (+ 128 x1208))))) (and (= (<= x610 224) x776) (= (x233 (+ x771 32)) x772) (= x610 (x1040 (- x334 32))) (= (x233 (+ x1208 x723)) x717) (= (x233 (+ x723 x1208)) x771) (= x334 (x1040 (- x772 x1208))))) (and (=> (and x706 (and (= x287 (+ x377 x1020)) (= x977 (ite (< x1306 32) x377 x966)) (= (x1271 32 x1124) x377) (= (< x977 x287) x867) (= x1020 (div (+ 31 x318) 32)) (= (div (+ x1306 31) 32) x467) (= (+ x377 x467) x966))) (and (=> (not x867) x667) (=> x867 x1023))) (=> (not x706) x186))) x834))
(assert (= x173 (x1182 (x783 x700 x767 x662 x173 x1257 x65 x378))))
(assert (= (x19 (x783 x334 x569 x600 x1014 x1067 x93 x1242)) x569))
(assert (= (x326 (x895 x700 x1161 x69 x592 x430)) x430))
(assert (= (=> (and (and (= (not (< x1120 x287)) x918) (= (+ 1 x977) x1120)) x918) x667) x1023))
(assert (not (x488 (x895 x334 x814 x406 x646 x1190))))
(assert (= (and x559 x290) x70))
(assert (x1025 x763))
(assert (=> (<= x417 10000) (= (x527 x417) 0)))
(assert (x1025 x1180))
(assert (x1025 x1101))
(assert (= (x326 (x969 x334 x903 x434 x1164 x64 x629)) x64))
(assert (x1025 x936))
(assert (= (x19 (x80 x700 x534 x1319)) x534))
(assert (x1025 x958))
(assert (= (x696 (x317 x334 x1283 x1321 x973)) x334))
(assert (= (or x445 x647) x98))
(assert (x1025 x548))
(assert (=> (>= 10000 x459) (= (x527 x459) 0)))
(assert (x1025 x121))
(assert (=> (>= 10000 x1296) (= (x527 x1296) 0)))
(assert (x1025 x296))
(assert (x1025 x1014))
(assert (= (and (not x355) x94) x34))
(assert (= (ite (< x195 256) (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x114 2 x195)) 0) (x1058 115792089237316195423570985008687907853269984665640564039457584007913129639935 x195)))
(assert (x1025 x220))
(assert (= x384 (and x427 x666)))
(assert (x1025 x739))
(assert (= (and x506 x254) x540))
(assert (< 10000 (x80 64 x496 19)))
(assert (= (and x495 x996) x781))
(assert (x1025 x117))
(assert (x1025 x917))
(assert (x348 x342))
(assert (= x246 (=> (and x492 (and (= (not (< x385 x549)) x492) (= x385 (+ 1 x891)))) x151)))
(assert (< 10000 (x80 64 x256 x1245)))
(assert (= x20 (and (not x113) x461)))
(assert (x1025 x971))
(assert (= (x527 (x969 x610 x726 x1300 x707 x608 x1220)) (x969 x610 x726 x1300 x707 x608 x1220)))
(assert (x1025 x1283))
(assert (x1025 x153))
(assert (= (and x751 (not x1263)) x1043))
(assert (=> (<= x592 10000) (= (x527 x592) 0)))
(assert (= (and x270 (not x373)) x452))
(assert (< 10000 (x1271 x952 x1178)))
(assert (< (x80 64 71998914331801701415977457805802827292338598818749192222732755537001613711014 6) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (=> (and (<= 1 x446) (= x78 (x449 x191 x792)) (= x911 (ite (<= x78 1) x626 (x587 x78 x739))) (= x739 (* x1009 2)) (= (x233 (+ x78 x739)) x626) (= x446 (x1058 115792089237316195423570985008687907853269984665640564039457584007913129639935 x448)) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x446) x792) (= (* x1009 8) x448)) x863) x1175))
(assert (=> (>= 10000 x570) (= 0 (x527 x570))))
(assert (x1025 x286))
(assert (x1025 x538))
(assert (= (x527 x1053) (x527 (+ 1 x1053))))
(assert (x1025 x426))
(assert (x1025 x905))
(assert (= x376 (and (not x951) x150)))
(assert (x1025 x772))
(assert (x1025 x537))
(assert (= (x80 64 114221746417031484496905892821793293822878436923706878644384133060206014517163 1) (x527 (x80 64 114221746417031484496905892821793293822878436923706878644384133060206014517163 1))))
(assert (x1025 x515))
(assert (x1025 x962))
(assert (= (x1182 (x783 x610 x591 x1200 x22 x1225 x268 x725)) x22))
(assert (x1025 x501))
(assert (< 10000 (x80 x952 x303 x563)))
(assert (= x321 (and x871 x686)))
(assert (> (x1271 32 x1124) 10000))
(assert (< 10000 (x969 x700 x513 x304 x1216 x644 x1218)))
(assert (= x832 (x576 (x1301 x952 x789 x782 x1236 x933 x286 x832 x23))))
(assert (x1025 x825))
(assert (x1025 x1176))
(assert (=> (<= x654 10000) (= (x527 x654) 0)))
(assert (= x937 (and x295 (not x916))))
(assert (x1025 x513))
(assert (x1025 x255))
(assert (= (x879 (x969 x700 x513 x304 x1216 x644 x1218)) x304))
(assert (= (x696 (x317 x700 x623 x230 x931)) x700))
(assert (= (x527 (x969 x700 x513 x304 x1216 x644 x1218)) (x969 x700 x513 x304 x1216 x644 x1218)))
(assert (x1025 x231))
(assert (x1025 x349))
(assert (x1025 x816))
(assert (< 10000 (x895 x952 x761 x45 x8 x962)))
(assert (= (or x159 x328) x1279))
(assert (= (x19 (x1271 32 4)) 4))
(assert (= x127 (and x155 x1179)))
(assert (= (x1271 32 x560) (x527 (x1271 32 x560))))
(assert (x1025 x836))
(assert (x1025 x950))
(assert (x1025 x1226))
(assert (x1025 x235))
(assert (= (x19 (x895 x334 x814 x406 x646 x1190)) x814))
(assert (= (and x113 x461) x1261))
(assert (= (and (not x706) x1278) x837))
(assert (x1025 x569))
(assert (x1025 x694))
(assert (= x653 (and x1194 x464)))
(assert (= (x527 x377) (x527 (+ x377 x467))))
(assert (x1025 x1085))
(assert (= x513 (x19 (x969 x700 x513 x304 x1216 x644 x1218))))
(assert (x1025 x48))
(assert (x1025 x1097))
(assert (x1025 x87))
(assert (not (x488 (x80 64 71998914331801701415977457805802827292338598818749192222732755537001613711014 6))))
(assert (x1025 x682))
(assert (=> (>= 10000 x251) (= 0 (x527 x251))))
(assert (x1025 x887))
(assert (= x255 (x1182 (x1301 x610 x1244 x417 x255 x108 x1223 x1092 x329))))
(assert (= (and x914 x759) x577))
(assert (= (=> (= (= 1 (ite (< 31 x1009) 1 0)) x291) (and (=> (and (and (= (> x818 0) x709) (= x818 (x449 115792089237316195423570985008687907853269984665640564039457584007913129639904 x1009)) (= x1186 (x1271 32 x560))) x291) (and (=> x709 x15) (=> (and (and (= x542 32) (= x1186 x17)) (not x709)) x473))) (=> (and (not x291) (and (= (= 0 x1009) x465) (or (and (not x465) (and (= (x1007 x405) x987) (= (x233 (+ 32 x548)) x405) (= x987 x191))) (and (= 0 x191) x465)))) x1175))) x82))
(assert (x1025 x195))
(assert (x488 115792089237316195423570985008687907853269984665640564039457584007913129639680))
(assert (x1025 x1137))
(assert (x1025 x1304))
(assert (=> (<= x1223 10000) (= (x527 x1223) 0)))
(assert (x1025 x771))
(assert (= (and x865 x622) x802))
(assert (= (x527 (x1301 x610 x1244 x417 x255 x108 x1223 x1092 x329)) (x1301 x610 x1244 x417 x255 x108 x1223 x1092 x329)))
(assert (x1025 x829))
(assert (x1025 x1241))
(assert (x1025 x406))
(assert (x1025 x1223))
(assert (x1025 x259))
(assert (= 64 (x696 (x80 64 x496 19))))
(assert (= (x783 x610 x591 x1200 x22 x1225 x268 x725) (x527 (x783 x610 x591 x1200 x22 x1225 x268 x725))))
(assert (x488 1000000))
(assert (= (x527 x543) (x527 (+ x1110 x543))))
(assert (x790 x351))
(assert (= (and x756 x605) x996))
(assert (= x23 (x652 (x1301 x952 x789 x782 x1236 x933 x286 x832 x23))))
(assert (= x45 (x879 (x895 x952 x761 x45 x8 x962))))
(assert (= x207 (and x850 x656)))
(assert (x1025 x831))
(assert (x1025 x811))
(assert (= (=> (and (= x366 (x233 (+ x910 32))) (= x296 (x233 (+ x516 32))) (= (x1063 x910) x1087) (= (> x1087 0) x408) (= x1034 (x233 (+ 32 x296))) (= (x233 (+ x320 x745)) x455)) (and (=> (not x408) x1122) (=> (and (and (= x1026 (< 32 x1087)) (= (x340 x366) x375)) x408) (and (=> (and x1026 (and (= x1147 (x1059 x1071)) (= (x233 (+ x1034 32)) x603) (= (> x1087 64) x398) (= x1071 (x233 (+ 32 x366))))) (and (=> (not x398) x1122) (=> (and x398 (and (= (< 96 x1087) x951) (= (x233 (+ x1034 64)) x403) (= x750 (x233 (+ 64 x366))) (= (x574 x750) x936))) (and (=> (not x951) x1122) (=> x951 x381))))) (=> (not x1026) x1122))))) x677))
(assert (< (x80 64 x1136 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (not x57))
(assert (= (and x60 x1001) x1313))
(assert (x1025 x1308))
(assert (= (and x390 x890) x344))
(assert (x1025 x318))
(assert (x1128 x1306))
(assert (x348 x276))
(assert (= (or x215 x185) x1292))
(assert (= (x527 (+ x983 x891)) (x527 x891)))
(assert (= (x1182 (x1301 x952 x789 x782 x1236 x933 x286 x832 x23)) x1236))
(assert (x1025 x229))
(assert (x1025 x1319))
(assert (x1025 x1013))
(assert (x1025 x626))
(assert (x1025 x42))
(assert (= (and x504 (not x1090)) x590))
(assert (< 10000 (x1301 x334 x153 x109 x956 x824 x810 x1227 x9)))
(assert (x488 71998914331801701415977457805802827292338598818749192222732755537001613711014))
(assert (< 10000 (x317 x952 x836 x251 x76)))
(assert (= (and x1292 (not x894)) x248))
(assert (x1025 x1208))
(assert (x1025 x612))
(assert (x1025 x325))
(assert (= (x696 (x895 x700 x1161 x69 x592 x430)) x700))
(assert (x488 115792089237316195423570985008687907853269984665640564039457584007913129639934))
(assert (= x1041 (or x837 x1231)))
(assert (x1025 x967))
(assert (x1025 x372))
(assert (= x1101 (x1182 (x895 x610 x1195 x1232 x1101 x635))))
(assert (x1025 x662))
(assert (= 114221746417031484496905892821793293822878436923706878644384133060206014517163 (x19 (x80 64 114221746417031484496905892821793293822878436923706878644384133060206014517163 1))))
(assert (x1025 x919))
(assert (< (x317 x610 x470 x1212 x356) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x1025 x234))
(assert (x1025 x615))
(assert (x1025 x425))
(assert (= (x527 4294967295) 0))
(assert (x1025 x943))
(assert (x488 1461501637330902918203684832716283019655932542975))
(assert (= x1245 (x879 (x80 64 x256 x1245))))
(assert (x1025 x852))
(assert (= (or x659 x502) x295))
(assert (x1025 x1297))
(assert (=> (<= x1044 10000) (= (x527 x1044) 0)))
(assert (x1025 x1207))
(assert (x348 x351))
(assert (x273 x202))
(assert (= (=> (and (and (= (x233 (+ 96 x1239)) x500) (= x774 (x233 (+ x872 96))) (= (x100 x774) x901) (= (not (> x1105 128)) x1230)) x1230) x1168) x1174))
(assert (x1025 x575))
(assert (x1025 x820))
(assert (x1025 x710))
(assert (=> (<= x430 10000) (= 0 (x527 x430))))
(assert (x1025 x1140))
(assert (=> (>= 10000 x973) (= 0 (x527 x973))))
(assert (< (x783 x610 x591 x1200 x22 x1225 x268 x725) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= x610 (x696 (x969 x610 x726 x1300 x707 x608 x1220))))
(assert (x1025 x746))
(assert (x1025 x1110))
(assert (x1025 x375))
(assert (x1128 x1009))
(assert (x1025 x956))
(assert (=> (<= x517 10000) (= (x527 x517) 0)))
(assert (x1113 x90))
(assert (x1025 x563))
(assert (x1025 x322))
(assert (x1025 x808))
(assert (= (x879 (x80 64 x1136 3)) 3))
(assert (x488 22334872))
(assert (= x130 (=> (and (and (= x218 x27) (= (x449 115792089237316195423570985008687907853269984665640564039457584007913129639904 x351) x941) (= (x233 (+ x618 32)) x148) (= x840 (x1040 (- x217 x758))) (< (+ x758 x66) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x521 (x1040 (- x217 x758))) (>= x878 1) (= (+ x758 x66) x218) (= x66 (x440 x92)) (<= x758 x389) (= x878 (x995 x92)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x758 x921)) (= (x1 x594) x389) (<= 0 x218) (= x921 (x1 x92)) (= x829 (x233 (+ x655 x702))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x218) (<= x1081 4294967295) (= x616 (= x1150 0)) (= (x1040 (- x121 x134)) x932) (not (> x521 x217)) (= (x233 (+ 31 x702)) x351) (= (- x842 x758) x443) (= x121 (x233 (+ x941 x655))) (= x842 (x1 x594))) (or (and x616 (and (= x1208 x134) (= x1132 x1298))) (and (not x616) (and (<= x184 127) (= x1140 (x233 (+ x1150 x1132))) (= x294 false) (= 71998914331801701415977457805802827292338598818749192222732755537001613711014 x1299) (>= 127 x617) (= false x1309) (= (x1040 (- x330 x134)) x1064) (= x621 false) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x134)) (= (x233 (+ 64 x1093)) x330) (= (x233 (+ x999 x1150)) x25) (<= 1 x1136) (= (x80 64 x594 x649) x44) (= x845 x1150) (= x710 x1208) (= x1310 404098525) (= (* x231 x484) x285) (>= x746 1) (= (x233 (+ 32 x134)) x710) (>= x1150 1) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x134) (= x746 (x995 x141)) (>= 127 x617) (<= x134 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= (x80 64 71998914331801701415977457805802827292338598818749192222732755537001613711014 6) x649) (= (x233 (+ x134 4)) x1093) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x285) (= x285 x539) (= (x337 x44) x1129) (> x710 x134) (= 10894474682274239493831243662817379401261526446360622092269559273883068006400 x860) (= 1086394137 x4) (= x566 29289127993025145568725129057828671567744754166070328588094505464281371246592) (= x1064 68) (<= 1 x1129) (= x313 (x80 64 x1136 3)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x484 x231)) (= x1262 (x995 x141)) (>= x285 0) (<= x1136 1461501637330902918203684832716283019655932542975) (= false x1099) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x134) (= x1183 (x233 (+ x1093 32))) (not (= x134 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x134)) (>= 255 x1129) (= x845 x410) (= x949 4) (<= x184 127) (>= x978 1) (= x301 68) (= x460 false) (= false x183) (= x999 (x39 x313)) (= (x1125 x134) x231) (= x1106 (x233 (+ x1150 x1132))) (= x831 (div x539 1000000)) (= (x995 x1255) x978) (= x950 x1136) (>= x1262 1) (= x1298 x1106) (not (< x1140 x1132)) (= x773 (div x539 1000000)))))) x957)))
(assert (x1025 x860))
(assert (= (x527 (+ 1 x1042)) (x527 x1042)))
(assert (= x94 (and x1171 x152)))
(assert (x348 340282366920938463463374607431768211455))
(assert (x1025 x708))
(assert (= (x454 (x783 x334 x569 x600 x1014 x1067 x93 x1242)) x93))
(assert (= x203 x639))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x80 x952 x303 x563)))
(assert (=> (<= x534 10000) (= 0 (x527 x534))))
(assert (= x777 (x1182 (x783 x952 x307 x570 x777 x1296 x806 x87))))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x1271 32 4)))
(assert (x1025 x1114))
(assert (= (x1182 (x895 x334 x814 x406 x646 x1190)) x646))
(assert (x348 127))
(assert (= x1283 (x19 (x317 x334 x1283 x1321 x973))))
(assert (= (x696 (x80 x700 x534 x1319)) x700))
(assert (x348 x923))
(assert (not (x488 (x1271 32 x1124))))
(assert (x1025 x1212))
(assert (x1025 x750))
(assert (not (x488 (x1271 32 x33))))
(assert (x273 x868))
(assert (= (x19 (x783 x700 x767 x662 x173 x1257 x65 x378)) x767))
(assert (= (x696 (x317 x952 x836 x251 x76)) x952))
(assert (= x676 (or x297 x581)))
(assert (= x108 (x326 (x1301 x610 x1244 x417 x255 x108 x1223 x1092 x329))))
(assert (x1025 x339))
(assert (x348 115792089237316195423570985008687907853269984665640564039457584007913129639680))
(assert (x1025 x282))
(assert (= (x527 (x1271 x334 x1010)) (x1271 x334 x1010)))
(assert (=> (>= 10000 x1319) (= 0 (x527 x1319))))
(assert (x1025 x230))
(assert (= (x696 (x1301 x610 x1244 x417 x255 x108 x1223 x1092 x329)) x610))
(assert (x1025 x1149))
(assert (= (x1182 (x317 x700 x623 x230 x931)) x931))
(assert (= x185 (and (not x753) x770)))
(assert (=> (>= 10000 x350) (= 0 (x527 x350))))
(assert (= (x80 x700 x534 x1319) (x527 (x80 x700 x534 x1319))))
(assert (x1025 x592))
(assert (=> (>= 10000 x815) (= 0 (x527 x815))))
(assert (x1074 x171))
(assert (x1025 x1000))
(assert (not (x488 (x783 x334 x569 x600 x1014 x1067 x93 x1242))))
(assert (= x77 (and (not x948) x1017)))
(assert (x1025 x1316))
(assert (x1025 x566))
(assert (= (and x1213 x465) x581))
(assert (x348 x575))
(assert (=> (<= x69 10000) (= (x527 x69) 0)))
(assert (= x1314 (and x616 x731)))
(assert (x348 x229))
(assert (= (and x1061 (not x867)) x1045))
(assert (x1025 x725))
(assert (x1025 x815))
(assert (= x1164 (x1182 (x969 x334 x903 x434 x1164 x64 x629))))
(check-sat)
(exit)
