(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Certora
Generated on: 2024-04-10
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x190 () Bool)
(declare-fun x181 () Bool)
(declare-fun x149 () Bool)
(declare-fun x168 () Int)
(declare-fun x147 () Int)
(declare-fun x39 () Int)
(declare-fun x1 () Int)
(declare-fun x36 () Int)
(declare-fun x239 () Int)
(declare-fun x196 () Int)
(declare-fun x206 () Int)
(declare-fun x197 () Int)
(declare-fun x97 () Int)
(declare-fun x159 () Int)
(declare-fun x45 () Bool)
(declare-fun x130 () Int)
(declare-fun x79 () Bool)
(declare-fun x256 () Int)
(declare-fun x95 () Int)
(declare-fun x222 () Int)
(declare-fun x101 (Int) Int)
(declare-fun x137 () Int)
(declare-fun x233 () Int)
(declare-fun x150 () Int)
(declare-fun x250 (Int) Int)
(declare-fun x176 () Int)
(declare-fun x141 () Bool)
(declare-fun x245 () Bool)
(declare-fun x57 () Int)
(declare-fun x218 () Int)
(declare-fun x5 () Int)
(declare-fun x22 () Int)
(declare-fun x143 () Bool)
(declare-fun x30 () Int)
(declare-fun x10 () Int)
(declare-fun x8 () Int)
(declare-fun x191 () Int)
(declare-fun x199 (Int) Int)
(declare-fun x115 () Int)
(declare-fun x221 () Int)
(declare-fun x187 () Int)
(declare-fun x33 () Int)
(declare-fun x85 () Bool)
(declare-fun x165 () Int)
(declare-fun x6 () Int)
(declare-fun x90 () Int)
(declare-fun x100 () Int)
(declare-fun x265 () Bool)
(declare-fun x240 () Int)
(declare-fun x35 () Int)
(declare-fun x113 () Bool)
(declare-fun x106 () Int)
(declare-fun x43 () Int)
(declare-fun x18 () Int)
(declare-fun x179 (Int) Int)
(declare-fun x111 () Int)
(declare-fun x266 () Int)
(declare-fun x31 () Int)
(declare-fun x135 () Bool)
(declare-fun x198 () Int)
(declare-fun x27 () Int)
(declare-fun x96 (Int) Int)
(declare-fun x264 () Int)
(declare-fun x129 () Int)
(declare-fun x132 (Int) Int)
(declare-fun x267 () Int)
(declare-fun x112 () Int)
(declare-fun x102 (Int) Int)
(declare-fun x171 () Int)
(declare-fun x246 () Bool)
(declare-fun x144 () Bool)
(declare-fun x119 () Bool)
(declare-fun x227 () Int)
(declare-fun x61 () Int)
(declare-fun x216 (Int) Int)
(declare-fun x48 () Int)
(declare-fun x133 () Int)
(declare-fun x188 () Int)
(declare-fun x44 () Int)
(declare-fun x49 () Int)
(declare-fun x161 () Int)
(declare-fun x261 () Int)
(declare-fun x189 () Int)
(declare-fun x116 () Int)
(declare-fun x71 () Int)
(declare-fun x162 () Int)
(declare-fun x17 () Int)
(declare-fun x151 () Int)
(declare-fun x212 () Int)
(declare-fun x128 (Int) Int)
(declare-fun x207 () Int)
(declare-fun x127 () Bool)
(declare-fun x93 () Int)
(declare-fun x80 () Int)
(declare-fun x69 () Int)
(declare-fun x131 () Int)
(declare-fun x225 () Int)
(declare-fun x241 () Int)
(declare-fun x110 () Int)
(declare-fun x41 () Int)
(declare-fun x157 () Int)
(declare-fun x103 () Int)
(declare-fun x82 () Int)
(declare-fun x238 () Int)
(declare-fun x13 () Bool)
(declare-fun x65 () Int)
(declare-fun x178 () Int)
(declare-fun x38 () Bool)
(declare-fun x55 () Int)
(declare-fun x215 (Int) Int)
(declare-fun x107 () Int)
(declare-fun x121 () Int)
(declare-fun x58 () Int)
(declare-fun x26 () Int)
(declare-fun x77 () Bool)
(declare-fun x15 () Int)
(declare-fun x83 () Int)
(declare-fun x201 () Int)
(declare-fun x167 () Int)
(declare-fun x114 () Int)
(declare-fun x120 () Int)
(declare-fun x158 () Int)
(declare-fun x136 () Bool)
(declare-fun x231 () Int)
(declare-fun x124 () Int)
(declare-fun x145 (Int) Bool)
(declare-fun x109 (Int) Int)
(declare-fun x146 (Int) Int)
(declare-fun x23 () Int)
(declare-fun x104 () Int)
(declare-fun x126 () Int)
(declare-fun x154 (Int Int) Int)
(declare-fun x230 () Int)
(declare-fun x72 () Int)
(declare-fun x170 () Int)
(declare-fun x53 () Int)
(declare-fun x236 (Int) Int)
(declare-fun x40 () Int)
(declare-fun x248 () Int)
(declare-fun x217 () Int)
(declare-fun x234 () Int)
(declare-fun x184 () Int)
(declare-fun x251 () Int)
(declare-fun x177 (Int) Int)
(declare-fun x229 () Bool)
(declare-fun x242 (Int) Int)
(declare-fun x209 (Int) Int)
(declare-fun x203 () Int)
(declare-fun x37 () Int)
(declare-fun x78 () Int)
(declare-fun x237 (Int Int) Int)
(declare-fun x193 () Int)
(declare-fun x219 () Bool)
(declare-fun x98 () Int)
(declare-fun x81 () Bool)
(declare-fun x56 () Int)
(declare-fun x75 (Int Int) Int)
(declare-fun x156 () Int)
(declare-fun x220 () Int)
(declare-fun x63 () Int)
(declare-fun x70 () Int)
(declare-fun x14 () Int)
(declare-fun x186 () Bool)
(declare-fun x28 () Int)
(declare-fun x200 () Int)
(declare-fun x87 () Int)
(declare-fun x148 () Int)
(declare-fun x105 () Int)
(declare-fun x123 () Int)
(declare-fun x142 () Int)
(declare-fun x51 () Bool)
(declare-fun x169 () Int)
(declare-fun x228 (Int) Int)
(declare-fun x62 () Int)
(declare-fun x172 () Int)
(declare-fun x86 () Int)
(declare-fun x213 () Int)
(declare-fun x224 () Int)
(declare-fun x19 () Bool)
(declare-fun x24 () Bool)
(declare-fun x138 () Int)
(declare-fun x59 () Int)
(declare-fun x125 () Int)
(declare-fun x160 () Int)
(declare-fun x68 () Int)
(declare-fun x254 () Int)
(declare-fun x34 () Int)
(declare-fun x89 () Int)
(declare-fun x214 () Int)
(declare-fun x73 (Int Int) Int)
(declare-fun x243 (Int) Int)
(declare-fun x235 () Int)
(declare-fun x262 () Int)
(declare-fun x122 (Int) Int)
(declare-fun x252 () Int)
(declare-fun x211 () Int)
(declare-fun x185 () Bool)
(declare-fun x54 () Bool)
(declare-fun x91 () Int)
(declare-fun x210 () Int)
(declare-fun x64 () Int)
(declare-fun x153 () Int)
(declare-fun x202 () Int)
(declare-fun x152 (Int) Int)
(declare-fun x29 () Int)
(declare-fun x140 (Int) Int)
(declare-fun x52 () Int)
(declare-fun x47 () Int)
(declare-fun x173 (Int) Int)
(declare-fun x259 () Int)
(declare-fun x2 () Bool)
(declare-fun x163 () Int)
(declare-fun x223 () Int)
(declare-fun x192 () Int)
(declare-fun x118 () Int)
(declare-fun x9 () Int)
(declare-fun x108 () Int)
(declare-fun x180 () Int)
(declare-fun x164 () Bool)
(declare-fun x84 () Int)
(declare-fun x247 () Int)
(declare-fun x204 () Int)
(declare-fun x117 () Int)
(declare-fun x60 (Int) Int)
(declare-fun x4 () Int)
(declare-fun x166 (Int Int Int) Int)
(define-fun x183 ((x94 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x94) (>= x94 0)) x94 (- x94 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x205 ((x94 Int)) Int (ite (and (< x94 0) (>= x94 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x94 115792089237316195423570985008687907853269984665640564039457584007913129639936) x94))
(define-fun x175 ((x66 Int)) Bool (and (>= x66 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x66)))
(define-fun x76 ((x66 Int)) Bool (and (= (x154 x66 115792089237316195423570985008687907853269984665640564039457584007913129639935) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x154 115792089237316195423570985008687907853269984665640564039457584007913129639935 x66) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(define-fun x260 ((x66 Int)) Bool (and (= x66 (x154 x66 0)) (= (x154 0 x66) x66)))
(define-fun x249 ((x66 Int)) Bool (= (x154 x66 x66) x66))
(define-fun x11 ((x66 Int)) Bool (and (x249 x66) (x76 x66) (x260 x66)))
(define-fun x67 ((x66 Int) (x99 Int)) Bool (= (x154 x66 x99) (x154 x99 x66)))
(define-fun x7 ((x66 Int) (x99 Int)) Bool (and (<= (x154 x66 x99) (+ x66 x99)) (=> (>= x99 0) (>= (x154 x66 x99) x99)) (=> (>= x66 0) (<= x66 (x154 x66 x99)))))
(define-fun x92 ((x66 Int) (x99 Int)) Bool (and (x7 x66 x99) (x67 x66 x99)))
(define-fun x42 ((x66 Int)) Bool (and (= x66 (x237 x66 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (x237 115792089237316195423570985008687907853269984665640564039457584007913129639935 x66) x66)))
(define-fun x195 ((x66 Int)) Bool (and (= 0 (x237 x66 0)) (= (x237 0 x66) 0)))
(define-fun x46 ((x66 Int)) Bool (= x66 (x237 x66 x66)))
(define-fun x257 ((x66 Int)) Bool (and (x46 x66) (x195 x66) (x42 x66)))
(define-fun x174 ((x66 Int) (x99 Int)) Bool (= (x237 x99 x66) (x237 x66 x99)))
(define-fun x182 ((x66 Int) (x99 Int)) Bool (and (=> (>= x99 0) (>= x99 (x237 x66 x99))) (=> (<= 0 x66) (<= (x237 x66 x99) x66)) (<= 0 (x237 x66 x99))))
(define-fun x25 ((x66 Int) (x99 Int)) Bool (and (x182 x66 x99) (x174 x66 x99)))
(define-fun x232 ((x66 Int)) Bool (and (= (x73 115792089237316195423570985008687907853269984665640564039457584007913129639935 x66) (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x66)) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x66) (x73 x66 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x20 ((x66 Int)) Bool (and (= (x73 0 x66) x66) (= (x73 x66 0) x66)))
(define-fun x88 ((x66 Int)) Bool (= 0 (x73 x66 x66)))
(define-fun x194 ((x66 Int)) Bool (and (x20 x66) (x88 x66) (x232 x66)))
(define-fun x50 ((x66 Int) (x99 Int)) Bool (= (x73 x66 x99) (x73 x99 x66)))
(define-fun x74 ((x66 Int) (x99 Int)) Bool (and (>= (x73 x66 x99) 0) (<= (x73 x66 x99) (+ x99 x66))))
(define-fun x155 ((x66 Int) (x99 Int)) Bool (and (x74 x66 x99) (x50 x66 x99)))
(define-fun x258 ((x208 Int)) Int 0)
(define-fun x226 ((x208 Int)) Int 0)
(define-fun x134 ((x208 Int)) Int (ite (> x204 x208) (x199 x208) 0))
(define-fun x255 ((x208 Int)) Int (ite (and (<= 0 x208) (< x208 x204)) (x250 x208) (x134 x208)))
(define-fun x16 ((x208 Int)) Int (ite (= x17 x208) x207 (x101 x208)))
(define-fun x253 ((x208 Int)) Int (ite x185 (x128 x208) (x132 x208)))
(define-fun x263 ((x208 Int)) Int (ite x185 (x228 x208) (x209 x208)))
(define-fun x12 ((x208 Int)) Int (ite x185 (x216 x208) (x215 x208)))
(define-fun x139 ((x208 Int)) Int (ite (= x108 x208) x14 (x177 x208)))
(define-fun x244 ((x208 Int)) Int (ite (= x208 x266) x254 (x96 x208)))
(define-fun x3 ((x208 Int)) Int (ite (= x208 x171) x200 (x263 x208)))
(define-fun x32 ((x208 Int)) Int (ite (= x153 x208) x201 (x12 x208)))
(define-fun x21 ((x208 Int)) Int (ite (= x208 x171) x64 (x3 x208)))
(assert (x25 x168 x117))
(assert (x175 x115))
(assert (= (x140 (x166 64 x1 2)) 64))
(assert (x175 x63))
(assert (x145 115792089237316195423570985008687907853269984665640564039457584007913129639934))
(assert (x175 x225))
(assert (x175 x187))
(assert (x175 x56))
(assert (x175 x223))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x166 64 x59 2)))
(assert (= x28 (x60 (x166 64 x28 1))))
(assert (x175 x212))
(assert (=> (<= x28 10000) (= 0 (x109 x28))))
(assert (x145 4294967295))
(assert (x11 x191))
(assert (x175 x44))
(assert (x175 x83))
(assert (x11 x61))
(assert (= (x166 64 x106 3) (x109 (x166 64 x106 3))))
(assert (x175 x23))
(assert (x175 x28))
(assert (= (x109 4294967295) 0))
(assert (x175 x124))
(assert (x145 31536000))
(assert (x175 x168))
(assert (x175 x261))
(assert (= (x109 904625697166532776746648320380374280103671755200316906558262375061821325312) 0))
(assert (=> (= 0 x192) (= (div x168 x192) 0)))
(assert (x11 x8))
(assert (x175 x18))
(assert (x175 x48))
(assert (= x186 (and x38 x135)))
(assert (x175 x100))
(assert (x175 x188))
(assert (x175 x47))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x166 64 x28 1)))
(assert (= (x109 (+ x84 1)) (x109 x84)))
(assert (= (and x135 (not x38)) x119))
(assert (= (x109 x266) (x109 (+ x266 1))))
(assert (x175 x251))
(assert (x175 x14))
(assert (x155 x82 2))
(assert (x92 x115 x61))
(assert (=> (= 0 x211) (= (div x211 x211) 0)))
(assert (x175 x196))
(assert (x175 x178))
(assert (x175 x6))
(assert (x175 x4))
(assert (x257 x168))
(assert (x175 x192))
(assert (x175 x30))
(assert (x175 x59))
(assert (x175 x197))
(assert (x175 x95))
(assert (x175 x267))
(assert (x175 x35))
(assert (=> (= x192 0) (= (div x202 x192) 0)))
(assert (x175 x78))
(assert (x175 x235))
(assert (< 10000 (x166 64 x1 2)))
(assert (= (x109 (+ 1 x218)) (x109 x218)))
(assert (x175 x138))
(assert (x175 x89))
(assert (x257 x117))
(assert (= 64 (x140 (x166 64 x106 3))))
(assert (x175 x5))
(assert (x194 x82))
(assert (x175 x234))
(assert (= (x109 (x166 64 x1 2)) (x166 64 x1 2)))
(assert (x175 x15))
(assert (x145 604800))
(assert (= (x109 x256) (x109 (+ x256 1))))
(assert (=> (= x168 0) (= (div x78 x168) 0)))
(assert (x175 x1))
(assert (x175 x176))
(assert (x175 x91))
(assert (x175 x80))
(assert (x175 x191))
(assert (x175 x247))
(assert (x175 x126))
(assert (x175 x112))
(assert (= (x109 (+ x84 3)) (x109 x84)))
(assert (= (and x19 x185) x113))
(assert (x175 x87))
(assert (x175 x111))
(assert (x175 x170))
(assert (not (x145 (x166 64 x59 2))))
(assert (x175 x148))
(assert (x175 x248))
(assert (= (x109 (+ 1 x98)) (x109 x98)))
(assert (x175 x61))
(assert (not (x145 (x166 64 x106 3))))
(assert (x175 x206))
(assert (x145 1461501637330902918203684832716283019655932542975))
(assert (x175 x224))
(assert (x175 x43))
(assert (x175 x17))
(assert (= (x109 31535999) 0))
(assert (= 64 (x140 (x166 64 x28 1))))
(assert (x175 x150))
(assert (x11 x115))
(assert (x175 x116))
(assert (= (x236 (x166 64 x106 3)) 3))
(assert (x175 x125))
(assert (x175 x34))
(assert (< (x166 64 x106 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (not (x145 (x166 64 x1 2))))
(assert (x175 x142))
(assert (x175 x230))
(assert (x175 x165))
(assert (x175 x214))
(assert (x175 x33))
(assert (x175 x201))
(assert (= 0 (x109 31536000)))
(assert (x92 x170 x8))
(assert (x175 x31))
(assert (x175 x110))
(assert (=> (<= x1 10000) (= (x109 x1) 0)))
(assert (< 10000 (x166 64 x59 2)))
(assert (x145 773316216))
(assert (x175 x90))
(assert (x175 x189))
(assert (x175 x114))
(assert (= (x109 x84) (x109 (+ 5 x84))))
(assert (= x144 (or x186 x119)))
(assert (= 1 (x236 (x166 64 x28 1))))
(assert (x175 x64))
(assert (= x106 (x60 (x166 64 x106 3))))
(assert (= x1 (x60 (x166 64 x1 2))))
(assert (x175 x207))
(assert (=> (= 0 x192) (= (div x34 x192) 0)))
(assert (= true x185))
(assert (x175 x22))
(assert (x175 x217))
(assert (= (x140 (x166 64 x59 2)) 64))
(assert (x175 x200))
(assert (x175 x162))
(assert (x145 31535999))
(assert (= (x236 (x166 64 x1 2)) 2))
(assert (x194 2))
(assert (x175 x210))
(assert (x175 x129))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x166 64 x1 2)))
(assert (x175 x151))
(assert (x145 57896044618658097711785492504343953926634992332820282019728792003956564819967))
(assert (= (x109 604800) 0))
(assert (x175 x49))
(assert (x175 x82))
(assert (= (x109 115792089237316195423570985008687907853269984665640564039457584007913129639935) 0))
(assert (x175 x10))
(assert (= 2 (x236 (x166 64 x59 2))))
(assert (x175 x211))
(assert (x175 x72))
(assert (=> (>= 10000 x17) (= 0 (x109 x17))))
(assert (x145 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (=> (<= x59 10000) (= 0 (x109 x59))))
(assert (= x81 (=> (and (or (and (and (= x193 x10) (= x10 (div x78 x168))) x38) (and (and (= (div x34 x192) x191) (= x6 (mod (* x167 x131) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x156 x90) x168) x48) (= x251 (mod (* x214 x167) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x55 (mod (* x133 x147) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x58 (x205 (- 2 x6))) (= x53 (mod (* x167 x110) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x205 (- 2 x53)) x197) (= (x205 (- x78 x48)) x34) (= (x183 (+ 1 x234)) x147) (= (x205 (- 0 x192)) x202) (= x133 (x205 (- x187 (mod (ite (< x78 x48) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (mod (* x89 x167) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x138) (= x111 (mod (* x167 x104) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x89 (mod (* x197 x110) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x70 (x205 (- 2 x130))) (= (mod (* x89 x235) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x121) (= x110 (x73 2 x82)) (= (div x168 x192) x167) (= x222 (x205 (- 2 x111))) (= x235 (x205 (- 2 x138))) (= x192 (x237 x168 x117)) (= x117 (x183 (+ 1 (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x168) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (> x168 x187) (= x112 (x205 (- 2 x251))) (= (mod (* x30 (x154 x191 x55)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x162) (= x131 (mod (* x70 x121) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x104 (mod (* x214 x112) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x82 (mod (* x167 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x193 x162) (= (div x202 x192) x234) (= (mod (* x167 x121) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x130) (= (mod (* x131 x58) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x214) (= (mod (* x222 x104) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x30) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x187)) (not x38))) (and (>= x168 1) (= x87 (x205 (- x15 x78))) (= x18 (x183 (+ x103 x107))) (= x168 (x3 x171)) (= (x96 x266) x180) (= x200 (x183 (+ x220 x161))) (= x49 x161) (= x90 (x183 (+ x150 x230))) (= (x96 x266) x56) (= (x205 (- x87 (mod (ite (> x78 x15) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x187) (= x254 (x183 (+ x161 x180))) (= x93 (- x120 x56)) (= x220 (x263 x171)) (= (mod (* x90 x156) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x78) (= x264 (x183 (+ x211 x118))) (not (< x264 x211)) (= (x183 (+ x37 x161)) x224) (= x38 (= 0 x187)) (= x95 (div x211 x211)) (not (< x254 x180)) (= x153 (+ 1 x98)) (= (x154 x170 x8) x259) (= x170 (ite (= x211 0) 1 0)) (not (< x264 x49)) (= x8 (ite (= x95 1) 1 0)) (= (x205 (- x264 x103)) x49) (= x259 1) (= (x12 x153) x156) (= x267 (x183 (+ x161 x37))) (= x15 (mod (* x156 x90) 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (not (< x18 x107)) (= (x173 x218) x230) (= x171 (+ 2 x98)) (not (< x90 x230)) x45 (not (< x267 x37)) (not (> x220 x200)) (= (< x264 x18) x45) (= x150 (x244 x266)) (= (+ x93 x254) x40))) x219)))
(assert (x175 x259))
(assert (x175 x103))
(assert (= (=> (and (= x64 (x205 (- x225 x90))) (= (+ x105 x201) x137) (= (x12 x153) x217) (= (x3 x171) x225) (not (< x142 x201)) (= x201 (x205 (- x142 x193))) (= (x12 x153) x142) (= (not (< (+ 1 x1) x43)) x136) (not (> x64 x225)) (= x105 (- x57 x217))) x136) x219))
(assert (= (x60 (x166 64 x59 2)) x59))
(assert (x175 x53))
(assert (= (x109 (x166 64 x59 2)) (x166 64 x59 2)))
(assert (x175 x156))
(assert (x175 x169))
(assert (= (x109 (+ 5 x160)) (x109 x160)))
(assert (x145 904625697166532776746648320380374280103671755200316906558262375061821325312))
(assert (x11 x55))
(assert (x145 69185743945351922119161689019356421013382125510479073735908722411855439477079))
(assert (x175 x117))
(assert (x175 x8))
(assert (= 0 (x109 57896044618658097711785492504343953926634992332820282019728792003956564819967)))
(assert (=> (= x107 0) (= (div x107 x107) 0)))
(assert (x175 x159))
(assert (x175 x39))
(assert (=> (<= x188 10000) (= (x109 x188) 0)))
(assert (x175 x202))
(assert (x175 x172))
(assert (x175 x37))
(assert (x175 x203))
(assert (= 0 (x109 69185743945351922119161689019356421013382125510479073735908722411855439477079)))
(assert (not x85))
(assert (x175 x157))
(assert (= 0 (x109 126144000)))
(assert (> (x166 64 x106 3) 10000))
(assert (=> (<= x261 10000) (= 0 (x109 x261))))
(assert (= 0 (x109 115792089237316195423570985008687907853269984665640564039457584007913129639934)))
(assert (x175 x27))
(assert (x175 x264))
(assert (= (or x245 x113) x135))
(assert (= x245 (and (not x19) x185)))
(assert (x175 x58))
(assert (x175 x204))
(assert (= (x109 773316216) 0))
(assert (x175 x130))
(assert (not (x145 (x166 64 x28 1))))
(assert (x175 x123))
(assert (x175 x167))
(assert (x175 x106))
(assert (x175 x107))
(assert (x11 x170))
(assert (x175 x193))
(assert (x175 x161))
(assert (=> (<= x106 10000) (= (x109 x106) 0)))
(assert (x175 x121))
(assert (x175 x68))
(assert (x175 x55))
(assert (x175 x180))
(assert (x175 x239))
(assert (x175 x104))
(assert (= (x109 (x166 64 x28 1)) (x166 64 x28 1)))
(assert (x175 x131))
(assert (x175 x262))
(assert (x175 x133))
(assert (> (x166 64 x28 1) 10000))
(assert (= (x109 x98) (x109 (+ x98 2))))
(assert (= (=> (and (and (not (= x188 x261)) (= x246 true) (<= x36 1461501637330902918203684832716283019655932542975) (<= x9 1461501637330902918203684832716283019655932542975) (= x227 0) (<= 0 x65) (>= x71 0) (<= 0 x221) (= (< 0 (x243 x188)) x127) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x65) (= x79 (> (x243 x261) 0)) (>= x252 0) (<= 36 x204) (= x181 false) (<= 0 x233) (<= x233 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x261 x158) (= x129 x63) (<= 0 x41) (<= x27 1461501637330902918203684832716283019655932542975) (<= 1 x261) (= 773316216 x163) (<= 0 x9) (= 1 x184) (= x2 false) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x231) (= x125 (x250 0)) (= 0 x116) (>= x97 0) (= x143 false) (= x86 0) (<= x52 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= x71 1461501637330902918203684832716283019655932542975) (= x125 x176) x79 (>= 1461501637330902918203684832716283019655932542975 x188) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x41) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x204) (= x129 (x250 4)) (<= x261 1461501637330902918203684832716283019655932542975) (>= x36 0) (<= x221 4294967295) (>= 1461501637330902918203684832716283019655932542975 x62) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x97) (>= x188 1) x127 (<= x252 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x265 false) (>= x231 0) (>= x52 0) (= false x141) (>= x62 0)) (and (= x9 x28) (and (= x198 x41) (and (and (<= x172 127) (= x29 (x154 x115 x61)) (= (x179 x238) x44) (= x9 x17) (= (mod (* x33 x22) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x196) (= (x166 64 x1 2) x98) (= (x205 (- x239 x157)) x80) (= x59 x43) (= 31536000 x248) (= (not (> x151 x198)) x24) (= x23 (x243 x261)) (= x206 (x16 x261)) (= x84 (x166 64 x28 1)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x1) (= (x166 64 x106 3) x238) (= x178 (div x107 x107)) (= (x173 x218) x33) (= x5 31536000) (<= 1 x44) (= 126144000 x159) (= x47 773316216) (= x266 (+ x84 3)) (<= x44 255) (= x256 (+ 5 x84)) (= x203 (x173 x218)) (= (div x196 31536000) x189) (= (x146 x69) x165) (= x240 (x166 64 x59 2)) (= x118 (x122 x213)) (= x103 (x96 x266)) (not (> x22 x14)) (= x4 x206) (= x157 (mod (* 126144000 x72) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x1 (x242 x241)) (= x61 (ite (= 1 x178) 1 0)) (= x83 (x205 (- x212 (mod (ite (< x210 x196) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (<= 1 x23) (= x212 (x205 (- x210 x196))) (= x207 (x101 x17)) (= x151 (x183 (+ x91 604800))) (= x100 (x96 x266)) (= (+ x218 1) x213) x54 (= x106 (x102 x28)) (not x24) (= (x128 x240) x91) (= x69 (+ 5 x160)) (>= 127 x172) (= x57 x26) (= (= x68 0) x77) (= x14 (x183 (+ x35 604800))) (= false x164) x77 (<= 1 x43) (= (= 0 x148) x19) (= x169 (x146 x256)) (= (x205 (- x14 x31)) x22) (= x239 (mod (* 126144000 x72) 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (< x1 x43) (= x189 x107) (not (< x203 x129)) (= (x173 x218) x72) (= x54 (= x83 0)) (not (< x14 x35)) (= (+ x266 1) x108) (= x115 (ite (= 0 x107) 1 0)) (= (mod (* x22 x33) 115792089237316195423570985008687907853269984665640564039457584007913129639935) x210) (= x68 (ite x24 1 0)) (= x160 (x166 64 x28 1)) (= x229 false) (= 1 x29) (= (x205 (- x80 (mod (ite (< x239 x157) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x148) (= (x177 x108) x31) (= x241 (+ x256 1)) (>= x165 1) (= (x253 x98) x35) (= (+ 1 x84) x218) (not (< x198 x169)) (not (> x91 x151))) (or (and (and (= (mod (* x262 69185743945351922119161689019356421013382125510479073735908722411855439477079) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x124) (= x211 x124) (= (div x157 128) x39) (>= 31535999 x148) (= x123 (mod (* 904625697166532776746648320380374280103671755200316906558262375061821325312 x148) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x183 (+ x123 x39)) x262)) (not x19)) (and (and (= (div x157 31536000) x247) (= x247 x211)) x19)))))) x81) x85))
(assert (= 0 (x109 1461501637330902918203684832716283019655932542975)))
(assert (x175 x220))
(assert (x175 x147))
(assert (x175 x254))
(assert (x175 x222))
(assert (x175 x118))
(assert (x92 x191 x55))
(assert (x175 x70))
(assert (x175 x29))
(assert (x145 126144000))
(assert (x175 x198))
(check-sat)
(exit)
