(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Certora
Generated on: 2024-04-10
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x481 () Int)
(declare-fun x244 () Bool)
(declare-fun x323 () Bool)
(declare-fun x239 () Int)
(declare-fun x37 () Int)
(declare-fun x353 () Int)
(declare-fun x577 () Bool)
(declare-fun x349 () Int)
(declare-fun x366 () Bool)
(declare-fun x452 () Bool)
(declare-fun x18 () Int)
(declare-fun x99 () Bool)
(declare-fun x427 () Int)
(declare-fun x589 () Bool)
(declare-fun x535 (Int) Int)
(declare-fun x166 (Int) Int)
(declare-fun x278 () Bool)
(declare-fun x108 () Bool)
(declare-fun x165 () Int)
(declare-fun x542 () Int)
(declare-fun x590 () Int)
(declare-fun x547 () Bool)
(declare-fun x262 () Int)
(declare-fun x22 () Bool)
(declare-fun x403 () Int)
(declare-fun x461 () Int)
(declare-fun x389 () Int)
(declare-fun x346 () Int)
(declare-fun x109 () Int)
(declare-fun x173 () Int)
(declare-fun x198 () Int)
(declare-fun x538 () Int)
(declare-fun x368 (Int) Int)
(declare-fun x447 () Int)
(declare-fun x63 (Int) Int)
(declare-fun x496 () Bool)
(declare-fun x485 () Int)
(declare-fun x543 () Int)
(declare-fun x259 () Bool)
(declare-fun x150 () Bool)
(declare-fun x270 () Int)
(declare-fun x148 () Int)
(declare-fun x174 () Bool)
(declare-fun x501 (Int) Int)
(declare-fun x231 () Int)
(declare-fun x484 () Int)
(declare-fun x318 () Int)
(declare-fun x17 (Int) Int)
(declare-fun x256 () Bool)
(declare-fun x335 () Int)
(declare-fun x441 () Int)
(declare-fun x57 (Int) Int)
(declare-fun x327 (Int) Int)
(declare-fun x337 () Int)
(declare-fun x511 () Bool)
(declare-fun x249 () Int)
(declare-fun x306 () Int)
(declare-fun x140 () Bool)
(declare-fun x204 () Bool)
(declare-fun x52 () Int)
(declare-fun x492 () Int)
(declare-fun x322 () Int)
(declare-fun x26 () Int)
(declare-fun x342 () Bool)
(declare-fun x188 () Bool)
(declare-fun x221 () Int)
(declare-fun x396 () Int)
(declare-fun x11 () Int)
(declare-fun x422 () Int)
(declare-fun x470 (Int) Int)
(declare-fun x230 () Int)
(declare-fun x60 () Int)
(declare-fun x494 () Int)
(declare-fun x442 () Int)
(declare-fun x79 (Int) Int)
(declare-fun x292 () Int)
(declare-fun x267 () Int)
(declare-fun x373 () Int)
(declare-fun x121 () Int)
(declare-fun x576 () Int)
(declare-fun x369 () Int)
(declare-fun x125 () Int)
(declare-fun x68 () Int)
(declare-fun x272 (Int) Int)
(declare-fun x518 () Bool)
(declare-fun x572 () Int)
(declare-fun x313 () Int)
(declare-fun x454 () Bool)
(declare-fun x544 () Bool)
(declare-fun x264 () Int)
(declare-fun x119 () Bool)
(declare-fun x510 () Int)
(declare-fun x287 () Int)
(declare-fun x401 () Bool)
(declare-fun x30 () Int)
(declare-fun x382 () Int)
(declare-fun x325 () Int)
(declare-fun x446 () Int)
(declare-fun x65 () Bool)
(declare-fun x524 () Bool)
(declare-fun x252 () Int)
(declare-fun x218 () Int)
(declare-fun x476 () Int)
(declare-fun x164 () Bool)
(declare-fun x412 () Bool)
(declare-fun x116 () Int)
(declare-fun x294 () Int)
(declare-fun x295 () Int)
(declare-fun x248 () Bool)
(declare-fun x283 () Int)
(declare-fun x558 () Bool)
(declare-fun x550 () Int)
(declare-fun x404 () Int)
(declare-fun x78 () Bool)
(declare-fun x398 () Int)
(declare-fun x144 () Int)
(declare-fun x499 () Bool)
(declare-fun x35 (Int) Int)
(declare-fun x277 () Int)
(declare-fun x84 () Int)
(declare-fun x464 () Int)
(declare-fun x14 () Bool)
(declare-fun x503 (Int Int) Int)
(declare-fun x530 () Int)
(declare-fun x90 () Int)
(declare-fun x241 () Bool)
(declare-fun x58 () Bool)
(declare-fun x16 () Bool)
(declare-fun x237 () Bool)
(declare-fun x75 () Int)
(declare-fun x391 () Int)
(declare-fun x83 () Int)
(declare-fun x141 () Int)
(declare-fun x184 () Bool)
(declare-fun x179 (Int) Int)
(declare-fun x467 () Int)
(declare-fun x309 () Bool)
(declare-fun x135 () Bool)
(declare-fun x118 () Bool)
(declare-fun x371 () Int)
(declare-fun x131 () Int)
(declare-fun x284 () Bool)
(declare-fun x324 () Int)
(declare-fun x406 () Int)
(declare-fun x130 () Int)
(declare-fun x331 () Int)
(declare-fun x420 () Bool)
(declare-fun x360 () Int)
(declare-fun x552 () Int)
(declare-fun x240 () Bool)
(declare-fun x24 () Bool)
(declare-fun x258 () Bool)
(declare-fun x523 () Int)
(declare-fun x266 () Int)
(declare-fun x443 () Int)
(declare-fun x451 () Int)
(declare-fun x20 () Int)
(declare-fun x301 () Int)
(declare-fun x522 () Bool)
(declare-fun x138 () Bool)
(declare-fun x257 () Int)
(declare-fun x565 () Int)
(declare-fun x586 () Bool)
(declare-fun x449 () Int)
(declare-fun x156 () Bool)
(declare-fun x227 () Int)
(declare-fun x418 (Int Int) Int)
(declare-fun x168 () Int)
(declare-fun x421 () Int)
(declare-fun x548 () Bool)
(declare-fun x232 () Bool)
(declare-fun x103 () Bool)
(declare-fun x480 () Bool)
(declare-fun x397 () Int)
(declare-fun x274 () Int)
(declare-fun x48 () Int)
(declare-fun x111 () Bool)
(declare-fun x92 () Int)
(declare-fun x243 () Int)
(declare-fun x330 () Int)
(declare-fun x372 () Bool)
(declare-fun x271 () Bool)
(declare-fun x471 () Int)
(declare-fun x186 () Int)
(declare-fun x448 () Int)
(declare-fun x348 () Int)
(declare-fun x526 () Int)
(declare-fun x573 () Bool)
(declare-fun x59 () Bool)
(declare-fun x229 () Int)
(declare-fun x56 () Bool)
(declare-fun x562 () Int)
(declare-fun x491 () Int)
(declare-fun x453 () Int)
(declare-fun x136 () Int)
(declare-fun x253 () Int)
(declare-fun x338 () Int)
(declare-fun x146 () Int)
(declare-fun x123 () Bool)
(declare-fun x460 () Int)
(declare-fun x93 () Int)
(declare-fun x64 () Int)
(declare-fun x529 () Int)
(declare-fun x192 () Int)
(declare-fun x328 () Bool)
(declare-fun x288 () Int)
(declare-fun x4 () Int)
(declare-fun x559 () Int)
(declare-fun x582 () Int)
(declare-fun x51 () Int)
(declare-fun x80 () Bool)
(declare-fun x379 () Bool)
(declare-fun x439 () Int)
(declare-fun x157 () Bool)
(declare-fun x31 () Bool)
(declare-fun x226 () Bool)
(declare-fun x465 (Int Int) Int)
(declare-fun x82 () Bool)
(declare-fun x29 () Int)
(declare-fun x475 () Int)
(declare-fun x525 () Int)
(declare-fun x217 () Int)
(declare-fun x374 () Int)
(declare-fun x469 () Int)
(declare-fun x290 () Bool)
(declare-fun x214 () Bool)
(declare-fun x302 () Int)
(declare-fun x42 () Bool)
(declare-fun x27 () Int)
(declare-fun x286 () Int)
(declare-fun x182 () Int)
(declare-fun x265 (Int) Int)
(declare-fun x38 () Int)
(declare-fun x250 () Int)
(declare-fun x213 () Int)
(declare-fun x194 () Int)
(declare-fun x336 () Int)
(declare-fun x195 () Int)
(declare-fun x28 () Int)
(declare-fun x312 () Int)
(declare-fun x242 () Int)
(declare-fun x222 () Int)
(declare-fun x85 () Int)
(declare-fun x341 () Int)
(declare-fun x69 () Bool)
(declare-fun x32 () Int)
(declare-fun x181 () Int)
(declare-fun x579 () Int)
(declare-fun x516 () Int)
(declare-fun x185 () Int)
(declare-fun x359 () Bool)
(declare-fun x210 () Int)
(declare-fun x362 () Int)
(declare-fun x486 () Int)
(declare-fun x580 () Int)
(declare-fun x246 (Int) Int)
(declare-fun x546 () Bool)
(declare-fun x536 () Bool)
(declare-fun x73 () Int)
(declare-fun x128 () Int)
(declare-fun x430 () Int)
(declare-fun x13 () Int)
(declare-fun x326 () Bool)
(declare-fun x167 (Int Int) Int)
(declare-fun x483 () Int)
(declare-fun x473 () Bool)
(declare-fun x49 () Bool)
(declare-fun x211 () Int)
(declare-fun x505 () Int)
(declare-fun x474 () Bool)
(declare-fun x495 () Bool)
(declare-fun x578 () Int)
(declare-fun x254 () Bool)
(declare-fun x509 () Int)
(declare-fun x411 () Int)
(declare-fun x386 () Int)
(declare-fun x46 () Int)
(declare-fun x120 () Int)
(declare-fun x329 () Int)
(declare-fun x21 (Int) Bool)
(declare-fun x203 () Int)
(declare-fun x540 () Int)
(declare-fun x459 () Int)
(declare-fun x94 () Bool)
(declare-fun x478 () Int)
(declare-fun x584 () Bool)
(declare-fun x183 () Bool)
(declare-fun x343 () Int)
(declare-fun x300 (Int) Int)
(declare-fun x15 () Bool)
(declare-fun x25 () Int)
(declare-fun x384 () Int)
(declare-fun x426 () Int)
(declare-fun x588 (Int) Int)
(declare-fun x498 () Int)
(declare-fun x567 () Int)
(declare-fun x440 () Bool)
(declare-fun x6 () Int)
(declare-fun x555 () Int)
(declare-fun x107 () Int)
(declare-fun x117 () Int)
(declare-fun x101 () Int)
(declare-fun x77 () Int)
(declare-fun x395 () Bool)
(declare-fun x419 () Int)
(declare-fun x160 () Bool)
(declare-fun x463 () Int)
(declare-fun x347 () Int)
(declare-fun x554 () Int)
(declare-fun x528 () Bool)
(declare-fun x86 () Int)
(declare-fun x54 () Int)
(declare-fun x569 () Int)
(declare-fun x234 () Int)
(declare-fun x458 () Bool)
(declare-fun x162 () Int)
(declare-fun x106 () Int)
(declare-fun x10 () Int)
(declare-fun x40 () Int)
(declare-fun x33 (Int) Int)
(declare-fun x513 () Bool)
(declare-fun x339 () Int)
(declare-fun x19 () Int)
(declare-fun x551 () Int)
(declare-fun x255 () Int)
(declare-fun x512 () Int)
(declare-fun x1 (Int) Int)
(declare-fun x127 () Int)
(declare-fun x43 () Int)
(declare-fun x504 () Int)
(declare-fun x208 () Int)
(declare-fun x315 () Int)
(declare-fun x193 () Bool)
(declare-fun x47 () Int)
(declare-fun x61 () Int)
(declare-fun x316 () Int)
(declare-fun x273 () Int)
(declare-fun x557 () Int)
(declare-fun x456 () Int)
(declare-fun x438 () Int)
(declare-fun x142 () Int)
(declare-fun x196 () Bool)
(declare-fun x180 () Bool)
(declare-fun x367 (Int) Int)
(declare-fun x200 () Bool)
(declare-fun x413 () Int)
(declare-fun x293 () Int)
(declare-fun x201 () Int)
(declare-fun x225 () Int)
(declare-fun x399 () Int)
(declare-fun x228 (Int Int) Int)
(declare-fun x444 () Int)
(declare-fun x340 () Int)
(declare-fun x332 () Int)
(declare-fun x291 () Bool)
(declare-fun x414 () Bool)
(declare-fun x88 () Bool)
(declare-fun x70 () Int)
(declare-fun x114 (Int) Int)
(declare-fun x527 () Bool)
(declare-fun x132 () Int)
(declare-fun x497 () Int)
(declare-fun x238 () Int)
(declare-fun x3 () Bool)
(declare-fun x178 () Bool)
(declare-fun x175 (Int) Int)
(declare-fun x583 () Int)
(declare-fun x545 () Bool)
(declare-fun x435 () Int)
(declare-fun x95 () Bool)
(declare-fun x410 () Bool)
(declare-fun x450 () Bool)
(declare-fun x159 () Int)
(declare-fun x233 () Int)
(declare-fun x275 () Int)
(declare-fun x428 () Int)
(declare-fun x407 () Int)
(declare-fun x390 () Int)
(declare-fun x126 () Bool)
(declare-fun x479 (Int) Int)
(declare-fun x377 () Int)
(declare-fun x304 () Int)
(declare-fun x245 () Int)
(declare-fun x171 () Bool)
(declare-fun x355 () Int)
(declare-fun x468 () Int)
(declare-fun x161 (Int) Int)
(declare-fun x66 () Int)
(declare-fun x202 () Bool)
(declare-fun x378 () Bool)
(declare-fun x482 () Bool)
(declare-fun x500 () Int)
(declare-fun x155 () Bool)
(declare-fun x531 () Bool)
(declare-fun x424 () Int)
(declare-fun x472 () Bool)
(declare-fun x67 () Int)
(declare-fun x151 () Int)
(declare-fun x385 () Int)
(declare-fun x352 (Int) Int)
(declare-fun x561 (Int Int Int) Int)
(declare-fun x187 (Int) Int)
(declare-fun x102 () Int)
(declare-fun x236 () Bool)
(declare-fun x388 () Bool)
(declare-fun x224 () Int)
(declare-fun x76 (Int) Int)
(declare-fun x299 (Int) Int)
(declare-fun x515 () Int)
(declare-fun x356 () Int)
(declare-fun x305 () Int)
(declare-fun x445 () Bool)
(declare-fun x7 () Bool)
(declare-fun x436 () Int)
(declare-fun x105 () Bool)
(declare-fun x96 () Bool)
(declare-fun x2 () Int)
(declare-fun x145 () Int)
(declare-fun x319 () Int)
(declare-fun x394 () Int)
(declare-fun x5 () Int)
(declare-fun x370 () Bool)
(declare-fun x207 (Int) Int)
(declare-fun x568 () Int)
(declare-fun x416 () Int)
(declare-fun x197 (Int) Int)
(declare-fun x383 () Int)
(declare-fun x376 () Bool)
(declare-fun x429 () Int)
(declare-fun x570 () Int)
(declare-fun x539 () Int)
(declare-fun x507 () Bool)
(declare-fun x310 () Int)
(declare-fun x276 () Bool)
(declare-fun x354 () Bool)
(declare-fun x358 () Bool)
(declare-fun x260 (Int) Int)
(declare-fun x532 () Bool)
(declare-fun x55 () Int)
(declare-fun x281 () Int)
(declare-fun x89 () Int)
(declare-fun x158 () Int)
(declare-fun x153 () Int)
(declare-fun x585 () Bool)
(declare-fun x400 () Int)
(declare-fun x423 (Int Int) Int)
(declare-fun x122 () Int)
(declare-fun x408 () Bool)
(declare-fun x574 () Int)
(declare-fun x223 () Bool)
(declare-fun x100 () Int)
(declare-fun x417 () Bool)
(declare-fun x375 () Int)
(declare-fun x279 () Bool)
(declare-fun x345 () Int)
(declare-fun x112 () Bool)
(declare-fun x176 (Int) Int)
(declare-fun x72 () Int)
(declare-fun x591 () Bool)
(declare-fun x212 () Int)
(declare-fun x502 () Bool)
(declare-fun x261 () Int)
(declare-fun x533 () Int)
(declare-fun x53 () Bool)
(declare-fun x41 () Bool)
(declare-fun x147 () Int)
(declare-fun x209 () Int)
(declare-fun x455 () Int)
(declare-fun x320 () Int)
(declare-fun x317 () Int)
(declare-fun x44 () Int)
(declare-fun x39 () Int)
(declare-fun x219 () Int)
(declare-fun x415 () Bool)
(declare-fun x581 () Int)
(declare-fun x333 () Int)
(declare-fun x425 () Bool)
(define-fun x129 ((x87 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x87) (>= x87 0)) x87 (- x87 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x431 ((x87 Int)) Int (ite (and (< x87 0) (>= x87 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x87 115792089237316195423570985008687907853269984665640564039457584007913129639936) x87))
(define-fun x380 ((x269 Int)) Bool (and (>= x269 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x269)))
(define-fun x282 ((x269 Int)) Bool (and (= (x418 x269 115792089237316195423570985008687907853269984665640564039457584007913129639935) x269) (= (x418 115792089237316195423570985008687907853269984665640564039457584007913129639935 x269) x269)))
(define-fun x298 ((x269 Int)) Bool (and (= 0 (x418 x269 0)) (= (x418 0 x269) 0)))
(define-fun x553 ((x269 Int)) Bool (= (x418 x269 x269) x269))
(define-fun x314 ((x269 Int)) Bool (and (x553 x269) (x282 x269) (x298 x269)))
(define-fun x45 ((x269 Int) (x34 Int)) Bool (= (x418 x269 x34) (x418 x34 x269)))
(define-fun x537 ((x269 Int) (x34 Int)) Bool (and (=> (>= x269 0) (>= x269 (x418 x269 x34))) (<= 0 (x418 x269 x34)) (=> (>= x34 0) (<= (x418 x269 x34) x34))))
(define-fun x296 ((x269 Int) (x34 Int)) Bool (and (x537 x269 x34) (x45 x269 x34)))
(define-fun x534 ((x269 Int)) Bool (= (mod x269 2) (x418 x269 1)))
(define-fun x351 ((x269 Int)) Bool (and (x534 x269) (x296 x269 1)))
(define-fun x115 ((x269 Int)) Bool (= (+ (x418 x269 115792089237316195423570985008687907853269984665640564039457584007913129639904) (mod x269 32)) (mod x269 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x563 ((x269 Int)) Bool (and (x115 x269) (x296 x269 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(define-fun x357 ((x269 Int)) Bool (= (mod x269 6277101735386680763835789423207666416102355444464034512896) (x418 x269 6277101735386680763835789423207666416102355444464034512895)))
(define-fun x402 ((x269 Int)) Bool (and (x296 x269 6277101735386680763835789423207666416102355444464034512895) (x357 x269)))
(define-fun x311 ((x269 Int)) Bool (= (mod x269 8) (+ (x418 x269 4) (mod x269 4))))
(define-fun x189 ((x269 Int)) Bool (and (x311 x269) (x296 x269 4)))
(define-fun x303 ((x269 Int)) Bool (and (= (x423 115792089237316195423570985008687907853269984665640564039457584007913129639935 x269) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x423 x269 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x457 ((x269 Int)) Bool (and (= (x423 0 x269) x269) (= (x423 x269 0) x269)))
(define-fun x308 ((x269 Int)) Bool (= (x423 x269 x269) x269))
(define-fun x520 ((x269 Int)) Bool (and (x303 x269) (x457 x269) (x308 x269)))
(define-fun x344 ((x269 Int) (x34 Int)) Bool (= (x423 x34 x269) (x423 x269 x34)))
(define-fun x205 ((x269 Int) (x34 Int)) Bool (and (>= (+ x269 x34) (x423 x269 x34)) (=> (>= x269 0) (<= x269 (x423 x269 x34))) (=> (<= 0 x34) (>= (x423 x269 x34) x34))))
(define-fun x409 ((x269 Int) (x34 Int)) Bool (and (x344 x269 x34) (x205 x269 x34)))
(define-fun x97 ((x251 Int)) Int (ite (> x543 x251) (x588 x251) 0))
(define-fun x133 ((x251 Int)) Int (ite (> x6 x251) (x63 x251) 0))
(define-fun x517 ((x251 Int)) Int (ite (> x315 x251) (x272 x251) 0))
(define-fun x113 ((x251 Int)) Int (ite (> x504 x251) (x175 x251) 0))
(define-fun x172 ((x251 Int)) Int 0)
(define-fun x560 ((x251 Int)) Int 0)
(define-fun x490 ((x251 Int)) Int 0)
(define-fun x508 ((x251 Int)) Int 0)
(define-fun x50 ((x251 Int)) Int 0)
(define-fun x289 ((x251 Int)) Int 0)
(define-fun x321 ((x251 Int)) Int 0)
(define-fun x489 ((x251 Int)) Int 0)
(define-fun x521 ((x251 Int)) Int 0)
(define-fun x571 ((x251 Int)) Int 0)
(define-fun x285 ((x251 Int)) Int 0)
(define-fun x405 ((x251 Int)) Int 0)
(define-fun x152 ((x251 Int)) Int 0)
(define-fun x268 ((x251 Int)) Int 0)
(define-fun x134 ((x251 Int)) Int 0)
(define-fun x477 ((x251 Int)) Int 0)
(define-fun x462 ((x251 Int)) Int 0)
(define-fun x9 ((x251 Int)) Int 0)
(define-fun x506 ((x251 Int)) Int 0)
(define-fun x564 ((x251 Int)) Int 0)
(define-fun x263 ((x251 Int)) Int 0)
(define-fun x143 ((x251 Int)) Int 0)
(define-fun x493 ((x251 Int)) Int 0)
(define-fun x220 ((x251 Int)) Int 0)
(define-fun x350 ((x251 Int)) Int 0)
(define-fun x307 ((x251 Int)) Int 0)
(define-fun x98 ((x251 Int)) Int 0)
(define-fun x71 ((x251 Int)) Int 0)
(define-fun x364 ((x251 Int)) Int 0)
(define-fun x365 ((x251 Int)) Int (ite (= x153 x251) x529 (x352 x251)))
(define-fun x434 ((x251 Int)) Int (ite (= x251 x428) x264 (x365 x251)))
(define-fun x361 ((x251 Int)) Int (ite x156 (ite x156 (x327 x251) (x246 x251)) (x327 x251)))
(define-fun x437 ((x251 Int)) Int (ite x354 (x327 x251) (x361 x251)))
(define-fun x149 ((x251 Int)) Int (ite x156 (ite x156 (x300 x251) (x17 x251)) (x300 x251)))
(define-fun x541 ((x251 Int)) Int (ite x354 (x300 x251) (x149 x251)))
(define-fun x163 ((x251 Int)) Int (ite x156 (ite x156 (x166 x251) (x470 x251)) (x166 x251)))
(define-fun x393 ((x251 Int)) Int (ite x354 (x166 x251) (x163 x251)))
(define-fun x206 ((x251 Int)) Int (ite (= x251 x302) x360 (x265 x251)))
(define-fun x297 ((x251 Int)) Int (ite x507 (x327 x251) (ite x354 (x327 x251) (x361 x251))))
(define-fun x514 ((x251 Int)) Int (ite x507 (x300 x251) (ite x354 (x300 x251) (x149 x251))))
(define-fun x487 ((x251 Int)) Int (ite x507 (x166 x251) (ite x354 (x166 x251) (x163 x251))))
(define-fun x91 ((x251 Int)) Int 0)
(define-fun x81 ((x251 Int)) Int 0)
(define-fun x191 ((x251 Int)) Int 0)
(define-fun x466 ((x251 Int)) Int (ite (= x251 x384) x324 (x434 x251)))
(define-fun x363 ((x251 Int)) Int (ite (= x251 x428) x448 (x466 x251)))
(define-fun x36 ((x251 Int)) Int (ite (= x185 x251) x146 (x363 x251)))
(define-fun x216 ((x251 Int)) Int (ite (= x578 x251) 1 (x307 x251)))
(define-fun x169 ((x251 Int)) Int (ite (< x251 x505) (x197 x251) 0))
(define-fun x519 ((x251 Int)) Int (ite (and (>= x251 0) (> x505 x251)) (x368 x251) (x169 x251)))
(define-fun x566 ((x251 Int)) Int (ite (and (> (+ 1 x32) x251) (>= x251 x32)) (x519 (- (+ x468 x251) x32)) (x220 x251)))
(define-fun x110 ((x251 Int)) Int (ite (= x251 x142) 0 (x566 x251)))
(define-fun x488 ((x251 Int)) Int (ite (= x251 x173) 110026930297299635154336525195245038188021419673779079278965243793336073977856 (x508 x251)))
(define-fun x104 ((x251 Int)) Int (ite (= x426 x251) x322 (x488 x251)))
(define-fun x247 ((x251 Int)) Int (ite (= x173 x251) x194 (x104 x251)))
(define-fun x215 ((x251 Int)) Int (ite (= x251 x443) 46441568142033591978231907782937720737460700430992383298758718876245066514432 (x247 x251)))
(define-fun x381 ((x251 Int)) Int (ite (= x251 x55) x386 (x215 x251)))
(define-fun x170 ((x251 Int)) Int (ite (= x251 x231) x313 (x381 x251)))
(define-fun x74 ((x251 Int)) Int (ite (= x251 x68) 96 (x170 x251)))
(define-fun x432 ((x251 Int)) Int (ite (= x251 x343) x533 (x74 x251)))
(define-fun x124 ((x251 Int)) Int (ite (and (<= x435 x251) (> (+ x533 x435) x251)) (x110 (- (+ x32 x251) x435)) (x432 x251)))
(define-fun x154 ((x251 Int)) Int (ite (and (>= x251 132) (< x251 x116)) (x124 (- (+ (x129 (+ x443 132)) x251) 132)) (x113 x251)))
(define-fun x137 ((x251 Int)) Int (x187 x251))
(define-fun x139 ((x251 Int)) Int (x179 x251))
(define-fun x12 ((x251 Int)) Int (x299 x251))
(define-fun x334 ((x251 Int)) Int (x79 x251))
(define-fun x199 ((x251 Int)) Int (x35 x251))
(define-fun x235 ((x251 Int)) Int (x260 x251))
(define-fun x8 ((x251 Int)) Int (x176 x251))
(define-fun x387 ((x251 Int)) Int (x207 x251))
(define-fun x549 ((x251 Int)) Int (ite (= x251 0) x555 (x479 x251)))
(define-fun x433 ((x251 Int)) Int (ite (= x443 x251) x555 (x124 x251)))
(define-fun x23 ((x251 Int)) Int (ite (and (<= x443 x251) (< x251 (+ 32 x443))) (x549 (- x251 x443)) (x321 x251)))
(define-fun x392 ((x251 Int)) Int (ite x156 (x166 x251) (x470 x251)))
(define-fun x587 ((x251 Int)) Int (ite x156 (x300 x251) (x17 x251)))
(define-fun x177 ((x251 Int)) Int (ite x156 (x327 x251) (x246 x251)))
(define-fun x556 ((x251 Int)) Int (ite (= x251 128) x39 (x571 x251)))
(define-fun x62 ((x251 Int)) Int (ite (and (>= x251 160) (> (+ x39 160) x251)) (x519 (- (+ x468 x251) 160)) (x289 x251)))
(define-fun x280 ((x251 Int)) Int (ite (= x251 x60) 0 (x62 x251)))
(define-fun x575 ((x251 Int)) Int (ite (= 0 x251) x194 (x535 x251)))
(define-fun x190 ((x251 Int)) Int (ite (and (>= x251 x173) (> (+ x173 32) x251)) (x575 (- x251 x173)) (x172 x251)))
(assert (x380 x411))
(assert (x380 x515))
(assert (x380 x550))
(assert (x380 x120))
(assert (x380 x209))
(assert (x380 x569))
(assert (x380 x234))
(assert (x21 6277101735386680763835789423207666416102355444464034512895))
(assert (= x388 (and x96 x395)))
(assert (x380 x542))
(assert (= x378 (or x193 x82)))
(assert (x380 x44))
(assert (not (x21 (x561 64 x25 153))))
(assert (x380 x224))
(assert (x380 x46))
(assert (= (x1 (x561 64 x322 3)) 3))
(assert (= 32 (x57 (x167 32 x195))))
(assert (= (x367 x11) (x367 (+ x374 x11))))
(assert (= 0 (x367 1722613502)))
(assert (x380 x590))
(assert (= (div x444 452312848583266388373324160190187140051835877600158453279131187530910662656) (x465 x444 248)))
(assert (< (x561 64 x476 152) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x21 18446744073709551615))
(assert (x21 4248375386))
(assert (x380 x168))
(assert (x21 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (x380 x448))
(assert (x380 x523))
(assert (x380 x331))
(assert (= (=> (and (and (and (and (or (and (and (= x107 (+ x312 x75)) (<= 1 x407) (= (x561 64 x476 152) x181) (= (x167 32 x181) x312) (= (- x102 1) x75) (<= x46 6277101735386680763835789423207666416102355444464034512895) (= (x487 x107) x46) (= x225 x46) (<= 1 x102) (= x407 (x514 x181)) (< x75 x407)) (not x276)) (and (= x225 0) x276)) (and (= (x363 x185) x146) (= x399 (x36 x428)) (= (x561 64 x476 152) x266) (= x222 x185) (= x29 2266951753) (= (= 0 x102) x276) (= x577 false) (>= x90 1) (= x102 (x514 x266)) (= x429 x273) (<= x212 127) (= false x408) (= x399 x576) (<= x212 127) (= x90 (x501 x428)))) (and (= false x135) (= false x248) (= false x237) (= false x458) (= x459 (x501 x428)) (<= x18 127) (= (x114 x286) x476) (= x497 x5) (= 324282958 x208) (= x476 x273) (= x286 (x561 64 x497 153)) (<= x18 127) (= x591 false) (= x515 36) (<= 1 x459) (= false x105) (= false x342))) (and (= x5 x61) (= x481 (+ x229 1)) (= x441 (x297 x481)) (>= 127 x349) (= 36 x582) (= false x184) (>= x373 1) (= x101 x250) (>= 2 x441) (>= 127 x349) (= x474 false) (= false x94) (= false x511) (= x183 (= 1 x441)) (= (x501 x428) x373) (= false x585) (= 4248375386 x239) (= (x561 64 x101 153) x229) (= x472 false))) (and (= x138 false) (= x61 x250) (= x509 36) (= false x284))) x548) x112))
(assert (x380 x533))
(assert (x380 x444))
(assert (x380 x390))
(assert (= x497 (x161 (x561 64 x497 153))))
(assert (x380 x377))
(assert (x380 x92))
(assert (= (=> (and (= x532 (= 0 x127)) (or x532 (and (and (>= 115339776388732929035197660848497720713218148788040405586178452820382218977279 x332) (= x362 (x556 128)) (< x19 x130) (= x572 (x129 (+ x144 32))) (>= 255 x130) (>= x362 1) (= x210 (x556 128)) (= x19 (x465 x332 248)) (= x332 (x280 x570)) (= x570 (x129 (+ x572 128))) (>= x210 1) (= x144 (- x362 1)) (>= x130 1) (< x144 x210)) (not x532)))) x524) x291))
(assert (x21 1722613502))
(assert (= (x57 (x561 64 x70 153)) 64))
(assert (= 64 (x57 (x561 64 x318 152))))
(assert (x314 x436))
(assert (x380 x89))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x167 32 x397)))
(assert (=> (<= x54 10000) (= 0 (x367 x54))))
(assert (= (div x275 452312848583266388373324160190187140051835877600158453279131187530910662656) (x465 x275 248)))
(assert (x380 x243))
(assert (> (x561 64 x313 152) 10000))
(assert (x380 x102))
(assert (= x178 (and x379 x440)))
(assert (x380 x275))
(assert (= (x167 32 x195) (x367 (x167 32 x195))))
(assert (x380 x225))
(assert (x314 x127))
(assert (x380 x484))
(assert (x380 x439))
(assert (=> (>= 10000 x318) (= 0 (x367 x318))))
(assert (x380 x141))
(assert (= (and x88 x58) x544))
(assert (x380 x346))
(assert (x380 x48))
(assert (x380 x554))
(assert (= 153 (x1 (x561 64 x497 153))))
(assert (= x584 (and x164 x276)))
(assert (x380 x315))
(assert (< 10000 (x561 64 x101 153)))
(assert (=> (>= 10000 x70) (= 0 (x367 x70))))
(assert (x380 x399))
(assert (x314 6277101735386680763835789423207666416102355444464034512895))
(assert (= (x57 (x561 64 x322 155)) 64))
(assert (x380 x345))
(assert (= x156 (and x378 x155)))
(assert (x380 x27))
(assert (not (x21 (x167 32 x195))))
(assert (x380 x362))
(assert (= x82 (and x178 x202)))
(assert (x380 x277))
(assert (x402 x125))
(assert (x380 x581))
(assert (= (and x88 (not x58)) x204))
(assert (= (=> (and (and (= x460 x360) (and (= (+ 31 x346) x288) (= x339 (+ 32 x128)) (= x471 128) (= (+ x581 4) x346) (= (x519 x128) x375) (= x371 x384) (= x469 (+ x128 31)) (>= 18446744073709551615 x39) (= (+ x39 x468) x557) (not (< x505 x557)) (>= 127 x305) (>= 256 x347) (<= x305 127) (= x67 2) (= x562 (x418 4 x83)) (= (x556 128) x590) (= false x200) (= x424 (div (+ x39 31) 32)) (= x150 false) (not (< x505 x40)) (>= 18446744073709551615 x375) (= x324 (x434 x384)) (<= 1 x319) (= x449 (* 32 x424)) (= x347 (x556 128)) (= (+ x346 32) x468) (= x84 (x466 x428)) (= x60 (+ 160 x39)) (= x15 (= x590 0)) (= 0 x77) (< x288 x505) (= 1363191112 x338) (= (* x375 32) x464) (= x173 (+ x449 160)) (= x128 (+ x486 4)) (= (x501 x428) x319) (= (x519 x346) x39) (<= x562 3) (>= 255 x130) (> x505 x469) (= (+ x464 x339) x40) (= x84 x448))) (and (<= x486 18446744073709551615) (= x486 (x368 4)) (= (= x412 x99) x545) (= false x236) (= x414 false) (= 0 x301) (= x581 (x368 36)) (= x93 x581) x545 (= x412 (not x111)) (= (x368 0) x10) (= x52 x486) (= false x16) (= x111 (= 0 x158)) (>= 18446744073709551615 x581) (= x502 false) (= false x271) (= x10 x542))) (and (=> (and (and (= (x280 160) x100) (= (x556 128) x446) (= (> x446 1) x395) (= x27 (x503 1 (x465 x100 248))) (>= x295 1) (= (x556 128) x295)) (not x15)) (and (=> x395 x171) (=> (and (= x27 x317) (not x395)) x95))) (=> (and (= 0 x127) x15) x291))) x425))
(assert (= 153 (x1 (x561 64 x25 153))))
(assert (x314 x72))
(assert (x380 x306))
(assert (> (x561 64 x70 153) 10000))
(assert (=> (<= x569 10000) (= 0 (x367 x569))))
(assert (= (x367 18446744073709551615) 0))
(assert (= 64 (x57 (x561 64 x476 152))))
(assert (x380 x116))
(assert (x314 4))
(assert (= x25 (x161 (x561 64 x25 153))))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x167 32 x195)))
(assert (x380 x341))
(assert (= (or x584 x531) x527))
(assert (= x318 (x161 (x561 64 x318 152))))
(assert (and (= 113078212145816597093331040047546785012958969400039613319782796882727665664 (x228 2 246)) (= (x228 2 194) 25108406941546723055343157692830665664409421777856138051584) (= 39614081257132168796771975168 (x228 2 95)) (= (x228 2 141) 2787593149816327892691964784081045188247552) (= (x228 2 145) 44601490397061246283071436545296723011960832) (= 68719476736 (x228 2 36)) (= 766247770432944429179173513575154591809369561091801088 (x228 2 179)) (= (x228 2 14) 16384) (= (x228 2 250) 1809251394333065553493296640760748560207343510400633813116524750123642650624) (= 166153499473114484112975882535043072 (x228 2 117)) (= (x228 2 123) 10633823966279326983230456482242756608) (= (x228 2 101) 2535301200456458802993406410752) (= 1393796574908163946345982392040522594123776 (x228 2 140)) (= 56539106072908298546665520023773392506479484700019806659891398441363832832 (x228 2 245)) (= 5575186299632655785383929568162090376495104 (x228 2 142)) (= (x228 2 143) 11150372599265311570767859136324180752990208) (= (x228 2 29) 536870912) (= (x228 2 56) 72057594037927936) (= 158456325028528675187087900672 (x228 2 97)) (= (x228 2 157) 182687704666362864775460604089535377456991567872) (= 5708990770823839524233143877797980545530986496 (x228 2 152)) (= (x228 2 55) 36028797018963968) (= 46768052394588893382517914646921056628989841375232 (x228 2 165)) (= (x228 2 230) 1725436586697640946858688965569256363112777243042596638790631055949824) (= 16777216 (x228 2 24)) (= 649037107316853453566312041152512 (x228 2 109)) (= (x228 2 159) 730750818665451459101842416358141509827966271488) (= (x228 2 33) 8589934592) (= 3138550867693340381917894711603833208051177722232017256448 (x228 2 191)) (= (x228 2 53) 9007199254740992) (= 28948022309329048855892746252171976963317496166410141009864396001978282409984 (x228 2 254)) (= 1645504557321206042154969182557350504982735865633579863348609024 (x228 2 210)) (= (x228 2 226) 107839786668602559178668060348078522694548577690162289924414440996864) (= 89202980794122492566142873090593446023921664 (x228 2 146)) (= 3291009114642412084309938365114701009965471731267159726697218048 (x228 2 211)) (= 4835703278458516698824704 (x228 2 82)) (= 49039857307708443467467104868809893875799651909875269632 (x228 2 185)) (= (x228 2 86) 77371252455336267181195264) (= 664613997892457936451903530140172288 (x228 2 119)) (= (x228 2 205) 51422017416287688817342786954917203280710495801049370729644032) (= 604462909807314587353088 (x228 2 79)) (= 4194304 (x228 2 22)) (= 524288 (x228 2 19)) (= (x228 2 71) 2361183241434822606848) (= 81129638414606681695789005144064 (x228 2 106)) (= 3064991081731777716716694054300618367237478244367204352 (x228 2 181)) (= 38685626227668133590597632 (x228 2 85)) (= (x228 2 233) 13803492693581127574869511724554050904902217944340773110325048447598592) (= (x228 2 220) 1684996666696914987166688442938726917102321526408785780068975640576) (= 1024 (x228 2 10)) (= 383123885216472214589586756787577295904684780545900544 (x228 2 178)) (= 32768 (x228 2 15)) (= (x228 2 137) 174224571863520493293247799005065324265472) (= 6277101735386680763835789423207666416102355444464034512896 (x228 2 192)) (= 2993155353253689176481146537402947624255349848014848 (x228 2 171)) (= (x228 2 197) 200867255532373784442745261542645325315275374222849104412672) (= (x228 2 167) 187072209578355573530071658587684226515959365500928) (= 57896044618658097711785492504343953926634992332820282019728792003956564819968 (x228 2 255)) (= (x228 2 225) 53919893334301279589334030174039261347274288845081144962207220498432) (= 26328072917139296674479506920917608079723773850137277813577744384 (x228 2 214)) (= 8192 (x228 2 13)) (= 1298074214633706907132624082305024 (x228 2 110)) (= (x228 2 208) 411376139330301510538742295639337626245683966408394965837152256) (= 52656145834278593348959013841835216159447547700274555627155488768 (x228 2 215)) (= 137438953472 (x228 2 37)) (= (x228 2 115) 41538374868278621028243970633760768) (= 374144419156711147060143317175368453031918731001856 (x228 2 168)) (= 4722366482869645213696 (x228 2 72)) (= (x228 2 11) 2048) (= 16 (x228 2 4)) (= (x228 2 92) 4951760157141521099596496896) (= 5070602400912917605986812821504 (x228 2 102)) (= 12855504354071922204335696738729300820177623950262342682411008 (x228 2 203)) (= 4 (x228 2 2)) (= 6129982163463555433433388108601236734474956488734408704 (x228 2 182)) (= 205688069665150755269371147819668813122841983204197482918576128 (x228 2 207)) (= (x228 2 103) 10141204801825835211973625643008) (= (x228 2 247) 226156424291633194186662080095093570025917938800079226639565593765455331328) (= (x228 2 223) 13479973333575319897333507543509815336818572211270286240551805124608) (= (x228 2 18) 262144) (= 1237940039285380274899124224 (x228 2 90)) (= (x228 2 129) 680564733841876926926749214863536422912) (= 2923003274661805836407369665432566039311865085952 (x228 2 161)) (= 1606938044258990275541962092341162602522202993782792835301376 (x228 2 200)) (= (x228 2 111) 2596148429267413814265248164610048) (= (x228 2 248) 452312848583266388373324160190187140051835877600158453279131187530910662656) (= (x228 2 5) 32) (= (x228 2 134) 21778071482940061661655974875633165533184) (= (x228 2 253) 14474011154664524427946373126085988481658748083205070504932198000989141204992) (= (x228 2 35) 34359738368) (= (x228 2 20) 1048576) (= 23384026197294446691258957323460528314494920687616 (x228 2 164)) (= 11417981541647679048466287755595961091061972992 (x228 2 153)) (= (x228 2 242) 7067388259113537318333190002971674063309935587502475832486424805170479104) (= 22835963083295358096932575511191922182123945984 (x228 2 154)) (= 1766847064778384329583297500742918515827483896875618958121606201292619776 (x228 2 240)) (= (x228 2 6) 64) (= (x228 2 9) 512) (= 47890485652059026823698344598447161988085597568237568 (x228 2 175)) (= 309485009821345068724781056 (x228 2 88)) (= (x228 2 236) 110427941548649020598956093796432407239217743554726184882600387580788736) (= 2251799813685248 (x228 2 51)) (= 1361129467683753853853498429727072845824 (x228 2 130)) (= (x228 2 216) 105312291668557186697918027683670432318895095400549111254310977536) (= 25711008708143844408671393477458601640355247900524685364822016 (x228 2 204)) (= 1329227995784915872903807060280344576 (x228 2 120)) (= (x228 2 69) 590295810358705651712) (= 1532495540865888858358347027150309183618739122183602176 (x228 2 180)) (= 324518553658426726783156020576256 (x228 2 108)) (= (x228 2 113) 10384593717069655257060992658440192) (= (x228 2 52) 4503599627370496) (= (x228 2 219) 842498333348457493583344221469363458551160763204392890034487820288) (= (x228 2 38) 274877906944) (= 1267650600228229401496703205376 (x228 2 100)) (= 4096 (x228 2 12)) (= (x228 2 193) 12554203470773361527671578846415332832204710888928069025792) (= (x228 2 243) 14134776518227074636666380005943348126619871175004951664972849610340958208) (= 256 (x228 2 8)) (= (x228 2 212) 6582018229284824168619876730229402019930943462534319453394436096) (= (x228 2 84) 19342813113834066795298816) (= (x228 2 234) 27606985387162255149739023449108101809804435888681546220650096895197184) (= (x228 2 199) 803469022129495137770981046170581301261101496891396417650688) (= 9671406556917033397649408 (x228 2 83)) (= 332306998946228968225951765070086144 (x228 2 118)) (= (x228 2 25) 33554432) (= (x228 2 125) 42535295865117307932921825928971026432) (= (x228 2 201) 3213876088517980551083924184682325205044405987565585670602752) (= 170141183460469231731687303715884105728 (x228 2 127)) (= (x228 2 17) 131072) (= (x228 2 93) 9903520314283042199192993792) (= (x228 2 163) 11692013098647223345629478661730264157247460343808) (= (x228 2 47) 140737488355328) (= (x228 2 238) 441711766194596082395824375185729628956870974218904739530401550323154944) (= (x228 2 45) 35184372088832) (= (x228 2 151) 2854495385411919762116571938898990272765493248) (= (x228 2 62) 4611686018427387904) (= (x228 2 80) 1208925819614629174706176) (= 316912650057057350374175801344 (x228 2 98)) (= 215679573337205118357336120696157045389097155380324579848828881993728 (x228 2 227)) (= 65536 (x228 2 16)) (= (x228 2 222) 6739986666787659948666753771754907668409286105635143120275902562304) (= 5846006549323611672814739330865132078623730171904 (x228 2 162)) (= 22300745198530623141535718272648361505980416 (x228 2 144)) (= 20769187434139310514121985316880384 (x228 2 114)) (= (x228 2 148) 356811923176489970264571492362373784095686656) (= 8796093022208 (x228 2 43)) (= 18446744073709551616 (x228 2 64)) (= (x228 2 48) 281474976710656) (= 1 (x228 2 0)) (= (x228 2 34) 17179869184) (= (x228 2 186) 98079714615416886934934209737619787751599303819750539264) (= (x228 2 206) 102844034832575377634685573909834406561420991602098741459288064) (= 28269553036454149273332760011886696253239742350009903329945699220681916416 (x228 2 244)) (= (x228 2 73) 9444732965739290427392) (= 19807040628566084398385987584 (x228 2 94)) (= 633825300114114700748351602688 (x228 2 99)) (= (x228 2 160) 1461501637330902918203684832716283019655932542976) (= (x228 2 249) 904625697166532776746648320380374280103671755200316906558262375061821325312) (= (x228 2 124) 21267647932558653966460912964485513216) (= (x228 2 202) 6427752177035961102167848369364650410088811975131171341205504) (= 392318858461667547739736838950479151006397215279002157056 (x228 2 188)) (= (x228 2 172) 5986310706507378352962293074805895248510699696029696) (= (x228 2 189) 784637716923335095479473677900958302012794430558004314112) (= 5444517870735015415413993718908291383296 (x228 2 132)) (= (x228 2 256) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= 220855883097298041197912187592864814478435487109452369765200775161577472 (x228 2 237)) (= 85070591730234615865843651857942052864 (x228 2 126)) (= (x228 2 91) 2475880078570760549798248448) (= (x228 2 217) 210624583337114373395836055367340864637790190801098222508621955072) (= (x228 2 32) 4294967296) (= 87112285931760246646623899502532662132736 (x228 2 136)) (= 91343852333181432387730302044767688728495783936 (x228 2 156)) (= 1496577676626844588240573268701473812127674924007424 (x228 2 170)) (= (x228 2 77) 151115727451828646838272) (= 4398046511104 (x228 2 42)) (= 20282409603651670423947251286016 (x228 2 104)) (= (x228 2 61) 2305843009213693952) (= (x228 2 23) 8388608) (= 1125899906842624 (x228 2 50)) (= (x228 2 70) 1180591620717411303424) (= (x228 2 89) 618970019642690137449562112) (= 17592186044416 (x228 2 44)) (= 147573952589676412928 (x228 2 67)) (= 295147905179352825856 (x228 2 68)) (= (x228 2 54) 18014398509481984) (= 549755813888 (x228 2 39)) (= (x228 2 177) 191561942608236107294793378393788647952342390272950272) (= 883423532389192164791648750371459257913741948437809479060803100646309888 (x228 2 239)) (= 3533694129556768659166595001485837031654967793751237916243212402585239552 (x228 2 241)) (= 3450873173395281893717377931138512726225554486085193277581262111899648 (x228 2 231)) (= (x228 2 59) 576460752303423488) (= 2199023255552 (x228 2 41)) (= (x228 2 65) 36893488147419103232) (= 3618502788666131106986593281521497120414687020801267626233049500247285301248 (x228 2 251)) (= (x228 2 235) 55213970774324510299478046898216203619608871777363092441300193790394368) (= 2097152 (x228 2 21)) (= 95780971304118053647396689196894323976171195136475136 (x228 2 176)) (= (x228 2 131) 2722258935367507707706996859454145691648) (= (x228 2 196) 100433627766186892221372630771322662657637687111424552206336) (= 562949953421312 (x228 2 49)) (= 431359146674410236714672241392314090778194310760649159697657763987456 (x228 2 228)) (= (x228 2 28) 268435456) (= 23945242826029513411849172299223580994042798784118784 (x228 2 174)) (= (x228 2 232) 6901746346790563787434755862277025452451108972170386555162524223799296) (= 713623846352979940529142984724747568191373312 (x228 2 149)) (= 40564819207303340847894502572032 (x228 2 105)) (= (x228 2 150) 1427247692705959881058285969449495136382746624) (= (x228 2 218) 421249166674228746791672110734681729275580381602196445017243910144) (= 2147483648 (x228 2 31)) (= (x228 2 116) 83076749736557242056487941267521536) (= (x228 2 138) 348449143727040986586495598010130648530944) (= (x228 2 133) 10889035741470030830827987437816582766592) (= 401734511064747568885490523085290650630550748445698208825344 (x228 2 198)) (= 24519928653854221733733552434404946937899825954937634816 (x228 2 184)) (= 196159429230833773869868419475239575503198607639501078528 (x228 2 187)) (= 9223372036854775808 (x228 2 63)) (= (x228 2 229) 862718293348820473429344482784628181556388621521298319395315527974912) (= (x228 2 87) 154742504910672534362390528) (= (x228 2 60) 1152921504606846976) (= (x228 2 155) 45671926166590716193865151022383844364247891968) (= (x228 2 121) 2658455991569831745807614120560689152) (= 75557863725914323419136 (x228 2 76)) (= 13164036458569648337239753460458804039861886925068638906788872192 (x228 2 213)) (= (x228 2 81) 2417851639229258349412352) (= 365375409332725729550921208179070754913983135744 (x228 2 158)) (= (x228 2 58) 288230376151711744) (= 73786976294838206464 (x228 2 66)) (= (x228 2 173) 11972621413014756705924586149611790497021399392059392) (= (x228 2 169) 748288838313422294120286634350736906063837462003712) (= (x228 2 74) 18889465931478580854784) (= 26959946667150639794667015087019630673637144422540572481103610249216 (x228 2 224)) (= (x228 2 135) 43556142965880123323311949751266331066368) (= 12259964326927110866866776217202473468949912977468817408 (x228 2 183)) (= (x228 2 40) 1099511627776) (= 3369993333393829974333376885877453834204643052817571560137951281152 (x228 2 221)) (= (x228 2 26) 67108864) (= (x228 2 3) 8) (= 822752278660603021077484591278675252491367932816789931674304512 (x228 2 209)) (= 70368744177664 (x228 2 46)) (= (x228 2 7) 128) (= 302231454903657293676544 (x228 2 78)) (= (x228 2 30) 1073741824) (= (x228 2 1) 2) (= 134217728 (x228 2 27)) (= 5192296858534827628530496329220096 (x228 2 112)) (= (x228 2 147) 178405961588244985132285746181186892047843328) (= (x228 2 128) 340282366920938463463374607431768211456) (= 93536104789177786765035829293842113257979682750464 (x228 2 166)) (= (x228 2 57) 144115188075855872) (= (x228 2 122) 5316911983139663491615228241121378304) (= 696898287454081973172991196020261297061888 (x228 2 139)) (= (x228 2 190) 1569275433846670190958947355801916604025588861116008628224) (= (x228 2 107) 162259276829213363391578010288128) (= 79228162514264337593543950336 (x228 2 96)) (= 37778931862957161709568 (x228 2 75)) (= (x228 2 252) 7237005577332262213973186563042994240829374041602535252466099000494570602496) (= (x228 2 195) 50216813883093446110686315385661331328818843555712276103168)))
(assert (= 153 (x1 (x561 64 x386 153))))
(assert (= 32 (x57 (x167 32 x397))))
(assert (x380 x32))
(assert (x380 x144))
(assert (= (x57 (x561 64 x25 153)) 64))
(assert (x21 4081125666))
(assert (x380 x582))
(assert (=> (>= 10000 x182) (= (x367 x182) 0)))
(assert (x380 x464))
(assert (< (x561 64 x313 152) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x380 x356))
(assert (> (x561 64 x476 152) 10000))
(assert (=> (<= x451 10000) (= 0 (x367 x451))))
(assert (= (x503 1 (x465 x444 248)) (mod (ite (< (x465 x444 248) 256) (x228 2 (x465 x444 248)) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x380 x526))
(assert (x380 x374))
(assert (= 153 (x1 (x561 64 x101 153))))
(assert (> (x167 32 x181) 10000))
(assert (x380 x84))
(assert (= (and x42 (not x532)) x454))
(assert (x380 x375))
(assert (=> (>= 10000 x25) (= (x367 x25) 0)))
(assert (x380 x491))
(assert (x380 x274))
(assert (= (or x108 x507) x164))
(assert (x380 x435))
(assert (not (x21 (x561 64 x497 153))))
(assert (= (x503 1 x130) (mod (ite (> 256 x130) (x228 2 x130) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (= (x561 64 x101 153) (x367 (x561 64 x101 153))))
(assert (x380 x264))
(assert (x21 57896044618658097711785492504343953926634992332820282019728792003956564819967))
(assert (= (x367 4294967295) 0))
(assert (x21 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x380 x385))
(assert (= (=> (and (and (and (and (and (= x259 false) (= x529 (x352 x153)) (<= 1 x234) (= x492 x264) (= x348 (x300 x20)) (>= 127 x390) (= x222 x153) (= x574 2266951753) (= (x561 64 x318 152) x20) (= x325 x516) (= x492 (x365 x428)) (= (x501 x428) x234) (= false x69) (>= 127 x390) (= (= 0 x348) x58)) (or (and x58 (= x158 0)) (and (not x58) (and (< x538 x28) (= (x166 x579) x550) (= x158 x550) (>= x28 1) (= (+ x538 x500) x579) (<= x550 6277101735386680763835789423207666416102355444464034512895) (= x500 (x167 32 x195)) (= (x300 x195) x28) (= (- x348 1) x538) (>= x348 1) (= (x561 64 x318 152) x195))))) (and (= x318 (x114 x551)) (= x325 x318) (= x309 false) (>= x439 1) (= x439 (x501 x428)) (= 36 x4) (= x214 false) (= x241 false) (= x551 (x561 64 x70 153)) (= x249 x70) (= 324282958 x294) (= x547 false) (<= x219 127) (<= x219 127) (= false x359) (= x452 false) (= x376 false))) (and (= x49 false) (<= x340 127) (= false x546) (= x310 (x561 64 x25 153)) (>= x245 1) (= 4248375386 x453) (= 36 x283) (= (x327 x255) x427) (= false x126) (= x496 false) (= x290 false) (= x25 x442) (= x401 false) (= x99 (= 1 x427)) (>= 127 x340) (= (x501 x428) x245) (= (+ 1 x310) x255) (<= x427 2) (= x61 x249))) (and (not (= x182 x382)) (= (> (x501 x451) 0) x528) x528 (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x475) (>= x475 0) (= x428 x404) (= x65 false) (not (= x43 x182)) (<= x460 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (= x569 x428)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x391) (<= 0 x267) (>= 1461501637330902918203684832716283019655932542975 x526) (<= x211 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= x421 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x61 x442) (<= 0 x211) x180 (>= 1461501637330902918203684832716283019655932542975 x85) (not (= x43 x428)) (<= 1 x43) (<= 0 x460) (>= x371 0) (<= x43 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x182) (<= x382 1461501637330902918203684832716283019655932542975) (>= x238 0) (not (= x428 x451)) (= 36 x484) (not (= x451 x54)) (<= 0 x421) (>= x13 0) (not (= x428 x54)) (>= x66 0) (<= 0 x64) (= false x586) (not (= x54 x569)) (not (= x382 x217)) (>= x198 0) (not (= x569 x451)) (<= x141 1461501637330902918203684832716283019655932542975) (<= 132 x505) (not (= x43 x451)) (<= 1 x569) (>= x428 1) (<= x13 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (= x428 x382)) (>= 4294967295 x66) x119 (<= 1 x382) (>= x54 1) (>= 1461501637330902918203684832716283019655932542975 x221) x174 (not (= x182 x54)) (not (= x569 x182)) (<= x292 1461501637330902918203684832716283019655932542975) x420 (= 0 x461) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x505) (<= x430 1461501637330902918203684832716283019655932542975) (>= x478 0) (= x180 (> (x501 x182) 0)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x64) (= 1363191112 x252) (<= x428 1461501637330902918203684832716283019655932542975) (not (= x43 x382)) (<= 0 x512) x278 (>= x147 0) (not (= x43 x54)) (= (> (x501 x569) 0) x420) (<= 0 x270) (not (= x217 x54)) (<= x559 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= x222 1461501637330902918203684832716283019655932542975) (>= x451 1) (not (= x451 x217)) (>= 1461501637330902918203684832716283019655932542975 x451) (not (= x451 x182)) (not (= x428 x182)) (not (= x569 x43)) (<= x238 1461501637330902918203684832716283019655932542975) (<= 1 x217) (not (= x569 x382)) (<= x147 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 2 x159) (= x119 (> (x501 x382) 0)) (>= x391 0) x410 x140 (not (= x428 x217)) (= x174 (< 0 (x501 x54))) (<= 0 x456) (<= x569 1461501637330902918203684832716283019655932542975) (not (= x217 x569)) (not (= x217 x182)) (<= 0 x222) (<= x478 1461501637330902918203684832716283019655932542975) (= x140 (< 0 (x501 x428))) (<= 1 x182) (<= x270 1461501637330902918203684832716283019655932542975) (<= x371 1461501637330902918203684832716283019655932542975) (>= x337 0) (= x73 0) (>= 1461501637330902918203684832716283019655932542975 x447) (<= x565 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (= x217 x43)) (>= 1461501637330902918203684832716283019655932542975 x61) (not (= x54 x382)) (<= x198 1461501637330902918203684832716283019655932542975) (= x278 (< 0 (x501 x217))) (<= x54 1461501637330902918203684832716283019655932542975) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x267) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x337) (>= x61 0) (<= x512 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= 1461501637330902918203684832716283019655932542975 x438) (>= x565 0) (not (= x382 x451)) (>= 1461501637330902918203684832716283019655932542975 x456) (= x188 false) (>= 1461501637330902918203684832716283019655932542975 x217) (<= 0 x559) (= (> (x501 x43) 0) x410) (= x22 false))) x425) x372))
(assert (x380 x483))
(assert (x21 110026930297299635154336525195245038188021419673779079278965243793336073977856))
(assert (x380 x29))
(assert (x380 x37))
(assert (x380 x185))
(assert (x380 x332))
(assert (x380 x455))
(assert (=> (>= 10000 x43) (= 0 (x367 x43))))
(assert (= (x367 57896044618658097711785492504343953926634992332820282019728792003956564819967) 0))
(assert (x21 4294967295))
(assert (x380 x329))
(assert (x21 2266951753))
(assert (x380 x486))
(assert (=> (<= x101 10000) (= 0 (x367 x101))))
(assert (not (x21 (x561 64 x70 153))))
(assert (= (x367 2266951753) 0))
(assert (= (x367 1363191112) 0))
(assert (x380 x471))
(assert (x380 x406))
(assert (= x397 (x161 (x167 32 x397))))
(assert (x314 1))
(assert (x380 x562))
(assert (x380 x293))
(assert (x380 x219))
(assert (= x354 (and x440 (not x379))))
(assert (= x53 (or x204 x544)))
(assert (x380 x476))
(assert (= x88 true))
(assert (= x589 (or x388 x279)))
(assert (< 10000 (x561 64 x318 152)))
(assert (> (x561 64 x322 3) 10000))
(assert (= (ite (> 256 x322) (div x293 (x228 2 x322)) 0) (x465 x293 x322)))
(assert (= x233 (x161 (x167 32 x233))))
(assert (x314 x253))
(assert (=> (>= 10000 x217) (= 0 (x367 x217))))
(assert (x380 x70))
(assert (x380 x51))
(assert (x380 x383))
(assert (x380 x212))
(assert (x380 x127))
(assert (x380 x304))
(assert (= (x57 (x561 64 x497 153)) 64))
(assert (x380 x273))
(assert (x314 x227))
(assert (x296 x227 x253))
(assert (x380 x281))
(assert (x380 x580))
(assert (x409 x27 x455))
(assert (x380 x295))
(assert (x380 x4))
(assert (not (x21 (x561 64 x322 3))))
(assert (= 152 (x1 (x561 64 x318 152))))
(assert (x380 x43))
(assert (x380 x125))
(assert (x380 x153))
(assert (x380 x287))
(assert (x380 x413))
(assert (< 10000 (x167 32 x397)))
(assert (x380 x2))
(assert (not (x21 (x561 64 x322 155))))
(assert (x380 x60))
(assert (x380 x467))
(assert (= (x367 (x561 64 x318 152)) (x561 64 x318 152)))
(assert (x21 1363191112))
(assert (x380 x136))
(assert (x314 x125))
(assert (=> (<= x322 10000) (= (x367 x322) 0)))
(assert (x380 x25))
(assert (x380 x130))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x561 64 x318 152)))
(assert (x380 x386))
(assert (= (x57 (x561 64 x101 153)) 64))
(assert (= (x367 (x561 64 x497 153)) (x561 64 x497 153)))
(assert (x380 x230))
(assert (x380 x557))
(assert (= (x167 32 x397) (x367 (x167 32 x397))))
(assert (x380 x529))
(assert (x380 x218))
(assert (= 0 (x367 115792089237316195423570985008687907853269984665640564039457584007913129639872)))
(assert (x380 x424))
(assert (x380 x422))
(assert (x380 x203))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x167 32 x181)))
(assert (= x181 (x161 (x167 32 x181))))
(assert (x380 x6))
(assert (x380 x494))
(assert (= 0 (x367 46441568142033591978231907782937720737460700430992383298758718876245066514432)))
(assert (x380 x86))
(assert (x380 x574))
(assert (x380 x210))
(assert (x380 x38))
(assert (x380 x283))
(assert (= (mod (ite (< (x465 x100 248) 256) (x228 2 (x465 x100 248)) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x503 1 (x465 x100 248))))
(assert (x380 x504))
(assert (= (x57 (x167 32 x233)) 32))
(assert (x380 x253))
(assert (= 0 (x367 6277101735386680763835789423207666416102355444464034512895)))
(assert (x380 x394))
(assert (x380 x67))
(assert (x380 x106))
(assert (x380 x360))
(assert (x380 x510))
(assert (x380 x131))
(assert (x380 x343))
(assert (not (x21 (x561 64 x386 153))))
(assert (= 0 (x367 1461501637330902918203684832716283019655932542975)))
(assert (=> (<= x476 10000) (= (x367 x476) 0)))
(assert (x380 x348))
(assert (x380 x54))
(assert (=> (<= x185 10000) (= 0 (x367 x185))))
(assert (x380 x497))
(assert (x380 x567))
(assert (= x279 (and x96 (not x395))))
(assert (x380 x145))
(assert (x380 x498))
(assert (not (x21 (x167 32 x233))))
(assert (= 153 (x1 (x561 64 x70 153))))
(assert (= (=> (= (not (< 1 x122)) x223) (and x223 x160)) x59))
(assert (x380 x469))
(assert (=> (>= 10000 x384) (= 0 (x367 x384))))
(assert (x380 x305))
(assert (= x531 (and x164 (not x276))))
(assert (x21 115792089237316195423570985008687907853269984665640564039457584007913129639934))
(assert (= 0 (x367 324282958)))
(assert (= x524 (=> (and (= (x418 6277101735386680763835789423207666416102355444464034512895 x127) x227) (= (x418 6277101735386680763835789423207666416102355444464034512895 x436) x253) (= (- (x503 1 x130) 1) x436) (= (x418 x227 x253) x26) (= x39 x375) (= 1 x145) (= 1 x281) (= x26 x227) (= (< 0 x39) x445)) (and (=> (not x445) x112) (=> (and x445 (and (>= x567 1) (or (>= 57896044618658097711785492504343953926634992332820282019728792003956564819899 x530) (>= x530 57896044618658097711785492504343953926634992332820282019728792003956564819968)) (= 36 x467) (= x109 4081125666) (= (x129 (+ x173 32)) x304) (<= x173 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= x316 (x431 (- x230 31))) (<= x173 115792089237316195423570985008687907853269984665640564039457584007913129639934) (<= 1 x218) (>= 4294967295 x194) (= false x24) (= x136 36) (not (= x173 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (= (x190 x173) x491) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x173)) (= false x256) (= x233 (x561 64 x322 3)) (= (x129 (+ x51 32)) x38) (<= 1 x375) (= (* x122 32) x498) (= (x519 x339) x530) (> x218 x374) (< x173 x304) (= (x501 x217) x320) (= x230 (x431 (- x505 x339))) (>= 127 x148) (= (x561 64 x322 3) x132) (= (x465 x275 248) x322) (= (x33 x132) x567) (<= 1 x320) (= 110026930297299635154336525195245038188021419673779079278965243793336073977856 x330) (= x336 x356) (<= x173 115792089237316195423570985008687907853269984665640564039457584007913129639934) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x173)) (= x491 x122) (= x86 (x129 (+ x426 32))) (>= 18446744073709551615 x375) (= false x80) (= x51 (x129 (+ x530 x339))) (or (and (> x530 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x316)) (and (< x530 x316) (= (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x530) (<= x316 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) (= (- x567 1) x374) (<= 1 x39) (= x467 (x431 (- x86 x173))) (= x151 (+ x11 x374)) (>= 127 x148) (= x356 x322) (<= x122 4294967295) (= (< 0 x122) x379) (= (x431 (- x505 x498)) x209) (= (x519 x51) x122) (<= x491 4294967295) (= (x33 x233) x218) (= (x167 32 x233) x11) (= x275 (x519 x468)) (= x194 (x76 x151)) (not (or (and (= (<= x209 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x38 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (< x209 x38)) (and (> x209 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x38 57896044618658097711785492504343953926634992332820282019728792003956564819967)))) (= false x370) (= (x129 (+ 4 x173)) x426) (<= x39 18446744073709551615))) (and (=> (and x379 (and (and (= (x129 (+ 64 x304)) x578) (>= 1461501637330902918203684832716283019655932542975 x386) (<= x304 115792089237316195423570985008687907853269984665640564039457584007913129639934) (<= 1 x122) (= (x300 x353) x106) (= x213 (+ x525 1)) (= x525 (x561 64 x386 153)) (= x306 (x327 x213)) (= x202 (= 0 x106)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639872 x304)) (= x313 (x114 x525)) (<= x304 115792089237316195423570985008687907853269984665640564039457584007913129639934) (not (= x304 115792089237316195423570985008687907853269984665640564039457584007913129639872)) (<= x306 2) (= (x561 64 x313 152) x353) (= x386 (x519 x38)) (>= x386 1) (>= 4294967295 x122) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639872 x304)) (< x304 x578) (<= x304 115792089237316195423570985008687907853269984665640564039457584007913129639934)) (or (and (and (= x355 x293) (= (x167 32 x397) x261) (< x242 x224) (<= 1 x106) (= (x166 x192) x355) (= (x300 x397) x224) (= x192 (+ x242 x261)) (<= x355 6277101735386680763835789423207666416102355444464034512895) (>= x224 1) (= x397 (x561 64 x313 152)) (= (- x106 1) x242)) (not x202)) (and x202 (= 0 x293))))) x473) (=> (not x379) x160)))))))
(assert (x21 115792089237316195423570985008687907853269984665640564039457584007913129639872))
(assert (= (=> (and (= x302 (x561 64 x322 155)) (= x118 (not (> x39 1)))) (and x118 x112)) x160))
(assert (x380 x441))
(assert (= (x161 (x561 64 x101 153)) x101))
(assert (not (x21 (x561 64 x101 153))))
(assert (x380 x449))
(assert (x380 x93))
(assert (< (x167 32 x233) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (x167 32 x181) (x367 (x167 32 x181))))
(assert (= 152 (x1 (x561 64 x476 152))))
(assert (= (div x100 452312848583266388373324160190187140051835877600158453279131187530910662656) (x465 x100 248)))
(assert (= (x1 (x561 64 x313 152)) 152))
(assert (x380 x320))
(assert (x380 x39))
(assert (= (x367 57896044618658097711785492504343953926634992332820282019728792003956564819899) 0))
(assert (x520 x455))
(assert (x380 x262))
(assert (= x195 (x161 (x167 32 x195))))
(assert (x380 x419))
(assert (x380 x257))
(assert (x380 x239))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x561 64 x322 3)))
(assert (x380 x338))
(assert (x380 x55))
(assert (x380 x407))
(assert (x380 x339))
(assert (x380 x576))
(assert (= x322 (x161 (x561 64 x322 3))))
(assert (x380 x317))
(assert (= (x161 (x561 64 x70 153)) x70))
(assert (x402 x436))
(assert (> (x561 64 x386 153) 10000))
(assert (x380 x83))
(assert (< (x561 64 x25 153) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x380 x146))
(assert (x21 57896044618658097711785492504343953926634992332820282019728792003956564819899))
(assert (x380 x26))
(assert (= (x367 (x561 64 x386 153)) (x561 64 x386 153)))
(assert (x380 x158))
(assert (x380 x100))
(assert (x380 x516))
(assert (< (x561 64 x497 153) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x21 57896044618658097711785492504343953926634992332820282019728792003956564819968))
(assert (x380 x451))
(assert (x314 x377))
(assert (x380 x427))
(assert (x380 x162))
(assert (x380 x288))
(assert (= (=> (and (= (x280 161) x444) (>= x444 452312848583266388373324160190187140051835877600158453279131187530910662656) (<= 1 x27) (= (x556 128) x2) (= x44 (x556 128)) (<= 2 x2) (< x27 x455) (= x326 (not (> x44 2))) (<= x27 57896044618658097711785492504343953926634992332820282019728792003956564819967) (= (x503 1 (x465 x444 248)) x455)) (and (=> (= (x423 x27 x455) x317) x95) x326)) x171))
(assert (x380 x447))
(assert (x314 x83))
(assert (x21 115339776388732929035197660848497720713218148788040405586178452820382218977279))
(assert (= (div x332 452312848583266388373324160190187140051835877600158453279131187530910662656) (x465 x332 248)))
(assert (x380 x543))
(assert (x380 x217))
(assert (x380 x182))
(assert (x380 x446))
(assert (=> (<= x382 10000) (= (x367 x382) 0)))
(assert (= 0 (x367 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x380 x416))
(assert (= (x367 (+ 1 x525)) (x367 x525)))
(assert (x21 452312848583266388373324160190187140051835877600158453279131187530910662656))
(assert (= (x367 115792089237316195423570985008687907853269984665640564039457584007913129639904) 0))
(assert (= x14 (and x378 (not x155))))
(assert (x380 x349))
(assert (x380 x208))
(assert (= (x367 (x561 64 x322 155)) (x561 64 x322 155)))
(assert (= (x367 (x561 64 x476 152)) (x561 64 x476 152)))
(assert (< (x561 64 x101 153) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x380 x373))
(assert (< (x561 64 x386 153) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x380 x10))
(assert (= (=> (= x127 x317) x291) x95))
(assert (= x476 (x161 (x561 64 x476 152))))
(assert (x380 x492))
(assert (= x558 (and x15 x53)))
(assert (x380 x128))
(assert (x380 x382))
(assert (= x96 (and x53 (not x15))))
(assert (< (x561 64 x322 155) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (not (x21 (x167 32 x397))))
(assert (=> (>= 10000 x386) (= 0 (x367 x386))))
(assert (x380 x430))
(assert (x380 x485))
(assert (x402 x127))
(assert (x380 x18))
(assert (=> (>= 10000 x497) (= 0 (x367 x497))))
(assert (< (x561 64 x70 153) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x380 x292))
(assert (x380 x539))
(assert (x380 x330))
(assert (x351 x72))
(assert (x380 x572))
(assert (= x232 (or x454 (and x532 x42))))
(assert (x380 x194))
(assert (x21 324282958))
(assert (x380 x578))
(assert (= (or x14 x156) x3))
(assert (x380 x148))
(assert (x380 x384))
(assert (x520 x27))
(assert (x380 x459))
(assert (=> (<= x428 10000) (= 0 (x367 x428))))
(assert (= (x561 64 x313 152) (x367 (x561 64 x313 152))))
(assert (x380 x426))
(assert (x380 x438))
(assert (x380 x109))
(assert (x380 x322))
(assert (= 32 (x57 (x167 32 x181))))
(assert (x380 x325))
(assert (= x108 (or x3 x354)))
(assert (not (x21 (x561 64 x476 152))))
(assert (x380 x400))
(assert (= 0 (x367 115792089237316195423570985008687907853269984665640564039457584007913129639934)))
(assert (x380 x403))
(assert (x380 x245))
(assert (= 64 (x57 (x561 64 x313 152))))
(assert (x380 x28))
(assert (x189 x83))
(assert (not (x21 (x561 64 x318 152))))
(assert (x380 x396))
(assert (x380 x389))
(assert (x380 x369))
(assert (> (x561 64 x497 153) 10000))
(assert (x380 x52))
(assert (x380 x165))
(assert (= (x367 57896044618658097711785492504343953926634992332820282019728792003956564819968) 0))
(assert (x380 x333))
(assert (= (=> (and (= (not x254) x522) (= x417 false) (= x450 false) (= false x358) (= x47 0) (= (= x522 x183) x513) (= false x258) (= x254 (= 0 x225))) x513) x548))
(assert (x380 x201))
(assert (x380 x77))
(assert (x380 x555))
(assert (x380 x117))
(assert (x380 x221))
(assert (x380 x530))
(assert (x380 x453))
(assert (x380 x186))
(assert (= (x367 (x561 64 x70 153)) (x561 64 x70 153)))
(assert (= (x367 x229) (x367 (+ x229 1))))
(assert (x380 x347))
(assert (= 0 (x367 115339776388732929035197660848497720713218148788040405586178452820382218977279)))
(assert (x380 x335))
(assert (x380 x509))
(assert (= 64 (x57 (x561 64 x322 3))))
(assert (x380 x324))
(assert (> (x167 32 x233) 10000))
(assert (x563 x377))
(assert (= (and x232 (not x445)) x507))
(assert (= (x367 452312848583266388373324160190187140051835877600158453279131187530910662656) 0))
(assert (= 155 (x1 (x561 64 x322 155))))
(assert (x380 x173))
(assert (not x372))
(assert (> (x561 64 x322 155) 10000))
(assert (x380 x340))
(assert (= (x367 4081125666) 0))
(assert (x380 x68))
(assert (= (x561 64 x25 153) (x367 (x561 64 x25 153))))
(assert (= (=> (and (and (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639872 x578)) (= x583 (x418 1 x72)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x578) (= x142 (x129 (+ x32 1))) (< x578 x443) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x578) (= (x129 (+ 64 x578)) x443) (= (x129 (+ x578 32)) x32) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639872 x578)) (= x583 1) (not (= x578 115792089237316195423570985008687907853269984665640564039457584007913129639872)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x578) (= (= 1 x306) x155) (= x72 (x465 x293 x322)) (= x416 1)) (or (not x155) (and (and (<= x341 127) (= x328 (< 0 x485)) (= (x129 (+ x443 4)) x55) (not (< x406 x552)) (= false x536) (<= 1 x165) (= x552 (+ 132 x485)) (<= x116 57896044618658097711785492504343953926634992332820282019728792003956564819967) x244 (= x186 (x129 (+ x443 32))) (= x89 1722613502) (= x240 false) (= x533 (x216 x578)) (= x568 x383) (= x120 96) (= x244 (< 0 x389)) (= x385 x386) (= (x418 115792089237316195423570985008687907853269984665640564039457584007913129639904 x377) x329) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x443) (= x540 46441568142033591978231907782937720737460700430992383298758718876245066514432) (not x328) (>= x85 1) (>= x116 132) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x443)) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x443)) (>= 6277101735386680763835789423207666416102355444464034512895 x335) (= 0 x125) x323 (= x231 (x129 (+ x55 32))) (<= x85 1461501637330902918203684832716283019655932542975) (= x335 (x23 x443)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x443) (= x123 false) (<= x485 18446744073709551615) (= (x129 (+ x231 32)) x68) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x406) (> x186 x443) (= x389 (ite (= 0 x335) 1 0)) (= (x129 (+ x55 96)) x343) (= x428 x85) (= x568 x313) (= (x501 x54) x165) (<= 132 x406) (not (= x443 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (= false x480) (= (x431 (- x413 x443)) x116) (= x406 x116) (= (x418 6277101735386680763835789423207666416102355444464034512895 x125) x555) (= (x154 100) x485) (= (= x533 (x113 100)) x323) (= x435 (x129 (+ 32 x343))) (= (x129 (+ x533 31)) x377) (>= 127 x341) (<= x443 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= x413 (x129 (+ x329 x435)))) x155))) x59) x473))
(assert (< 10000 (x561 64 x25 153)))
(assert (x380 x355))
(assert (x380 x30))
(assert (= (x561 64 x322 3) (x367 (x561 64 x322 3))))
(assert (=> (>= 10000 x313) (= (x367 x313) 0)))
(assert (x380 x336))
(assert (x380 x583))
(assert (x380 x428))
(assert (= (x367 (x167 32 x233)) (x167 32 x233)))
(assert (x380 x101))
(assert (x380 x294))
(assert (x380 x122))
(assert (x380 x121))
(assert (not (x21 (x167 32 x181))))
(assert (not (x21 (x561 64 x313 152))))
(assert (= x440 (and x232 x445)))
(assert (x380 x318))
(assert (x380 x568))
(assert (x380 x72))
(assert (x380 x429))
(assert (x380 x436))
(assert (= (x367 x500) (x367 (+ x500 x538))))
(assert (x380 x75))
(assert (x380 x398))
(assert (x380 x319))
(assert (x380 x19))
(assert (= 0 (x367 4248375386)))
(assert (x380 x443))
(assert (x380 x538))
(assert (x380 x570))
(assert (x380 x142))
(assert (x380 x85))
(assert (x380 x231))
(assert (= (and (not x202) x178) x193))
(assert (< 10000 (x167 32 x195)))
(assert (= (x367 (+ x261 x242)) (x367 x261)))
(assert (x380 x468))
(assert (x21 1461501637330902918203684832716283019655932542975))
(assert (x380 x540))
(assert (x380 x40))
(assert (x314 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x380 x463))
(assert (= x313 (x161 (x561 64 x313 152))))
(assert (= x322 (x161 (x561 64 x322 155))))
(assert (= 0 (x367 110026930297299635154336525195245038188021419673779079278965243793336073977856)))
(assert (= (x367 (+ x75 x312)) (x367 x312)))
(assert (= (x57 (x561 64 x386 153)) 64))
(assert (= x42 (or x589 x558)))
(assert (x21 46441568142033591978231907782937720737460700430992383298758718876245066514432))
(assert (x380 x227))
(assert (x380 x552))
(assert (x380 x313))
(assert (= (x367 x310) (x367 (+ 1 x310))))
(assert (x380 x242))
(assert (=> (<= x153 10000) (= (x367 x153) 0)))
(assert (x380 x90))
(assert (= x386 (x161 (x561 64 x386 153))))
(assert (x380 x505))
(assert (x380 x316))
(check-sat)
(exit)
