(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Certora
Generated on: 2024-04-10
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x581 () Int)
(declare-fun x417 () Int)
(declare-fun x724 () Int)
(declare-fun x679 () Bool)
(declare-fun x580 () Bool)
(declare-fun x538 () Int)
(declare-fun x591 () Int)
(declare-fun x460 () Int)
(declare-fun x526 () Int)
(declare-fun x550 () Int)
(declare-fun x548 () Int)
(declare-fun x125 () Bool)
(declare-fun x449 () Int)
(declare-fun x199 () Int)
(declare-fun x423 () Int)
(declare-fun x392 () Int)
(declare-fun x383 (Int) Int)
(declare-fun x403 () Int)
(declare-fun x163 () Int)
(declare-fun x62 () Int)
(declare-fun x444 () Int)
(declare-fun x472 () Int)
(declare-fun x269 () Bool)
(declare-fun x366 () Int)
(declare-fun x136 () Bool)
(declare-fun x661 () Int)
(declare-fun x414 () Int)
(declare-fun x476 () Int)
(declare-fun x110 () Int)
(declare-fun x479 () Bool)
(declare-fun x507 () Int)
(declare-fun x98 () Int)
(declare-fun x639 () Int)
(declare-fun x253 () Int)
(declare-fun x727 (Int) Int)
(declare-fun x385 () Int)
(declare-fun x412 () Int)
(declare-fun x399 () Bool)
(declare-fun x374 () Bool)
(declare-fun x273 () Int)
(declare-fun x625 () Int)
(declare-fun x105 () Bool)
(declare-fun x384 () Int)
(declare-fun x263 () Int)
(declare-fun x496 () Bool)
(declare-fun x404 () Int)
(declare-fun x528 () Int)
(declare-fun x622 () Int)
(declare-fun x205 () Int)
(declare-fun x40 () Int)
(declare-fun x266 () Int)
(declare-fun x319 () Int)
(declare-fun x41 () Int)
(declare-fun x438 () Bool)
(declare-fun x371 () Int)
(declare-fun x573 () Bool)
(declare-fun x453 () Int)
(declare-fun x292 () Bool)
(declare-fun x497 () Int)
(declare-fun x369 (Int) Int)
(declare-fun x654 () Bool)
(declare-fun x155 () Int)
(declare-fun x741 () Int)
(declare-fun x67 () Int)
(declare-fun x740 () Int)
(declare-fun x56 () Bool)
(declare-fun x375 () Int)
(declare-fun x612 () Int)
(declare-fun x619 () Int)
(declare-fun x195 () Bool)
(declare-fun x545 () Bool)
(declare-fun x448 () Bool)
(declare-fun x176 () Int)
(declare-fun x592 () Bool)
(declare-fun x150 () Bool)
(declare-fun x618 () Int)
(declare-fun x167 () Int)
(declare-fun x3 () Int)
(declare-fun x291 () Int)
(declare-fun x381 () Int)
(declare-fun x341 () Int)
(declare-fun x18 () Bool)
(declare-fun x747 () Int)
(declare-fun x63 () Bool)
(declare-fun x162 () Int)
(declare-fun x746 () Bool)
(declare-fun x491 () Int)
(declare-fun x164 () Int)
(declare-fun x708 () Bool)
(declare-fun x68 () Int)
(declare-fun x674 () Bool)
(declare-fun x413 () Bool)
(declare-fun x745 () Bool)
(declare-fun x370 () Int)
(declare-fun x302 () Int)
(declare-fun x561 () Int)
(declare-fun x626 () Bool)
(declare-fun x629 () Int)
(declare-fun x610 () Int)
(declare-fun x389 () Int)
(declare-fun x590 () Bool)
(declare-fun x52 () Int)
(declare-fun x153 () Int)
(declare-fun x480 () Int)
(declare-fun x596 () Bool)
(declare-fun x685 () Bool)
(declare-fun x662 () Int)
(declare-fun x173 () Int)
(declare-fun x271 () Bool)
(declare-fun x294 () Bool)
(declare-fun x606 () Int)
(declare-fun x335 () Bool)
(declare-fun x751 () Bool)
(declare-fun x441 () Int)
(declare-fun x126 () Int)
(declare-fun x524 () Int)
(declare-fun x15 () Int)
(declare-fun x652 () Bool)
(declare-fun x490 () Bool)
(declare-fun x27 () Int)
(declare-fun x513 () Bool)
(declare-fun x186 () Int)
(declare-fun x473 () Bool)
(declare-fun x634 () Int)
(declare-fun x420 () Int)
(declare-fun x407 () Bool)
(declare-fun x270 () Bool)
(declare-fun x574 () Int)
(declare-fun x165 () Bool)
(declare-fun x508 () Bool)
(declare-fun x518 () Int)
(declare-fun x5 () Int)
(declare-fun x402 () Int)
(declare-fun x601 () Int)
(declare-fun x429 () Bool)
(declare-fun x443 () Bool)
(declare-fun x87 () Int)
(declare-fun x514 () Int)
(declare-fun x486 () Int)
(declare-fun x387 () Int)
(declare-fun x368 () Int)
(declare-fun x582 () Bool)
(declare-fun x19 () Bool)
(declare-fun x638 () Int)
(declare-fun x481 () Int)
(declare-fun x332 () Int)
(declare-fun x611 () Int)
(declare-fun x489 () Int)
(declare-fun x237 () Int)
(declare-fun x624 () Int)
(declare-fun x464 () Int)
(declare-fun x89 () Int)
(declare-fun x181 () Bool)
(declare-fun x477 () Int)
(declare-fun x723 () Bool)
(declare-fun x228 () Int)
(declare-fun x603 () Int)
(declare-fun x641 () Int)
(declare-fun x377 () Int)
(declare-fun x175 () Bool)
(declare-fun x158 () Int)
(declare-fun x74 () Int)
(declare-fun x431 () Int)
(declare-fun x663 () Int)
(declare-fun x330 () Int)
(declare-fun x123 () Int)
(declare-fun x23 () Bool)
(declare-fun x527 () Int)
(declare-fun x101 () Bool)
(declare-fun x351 () Int)
(declare-fun x306 () Bool)
(declare-fun x333 () Int)
(declare-fun x396 () Int)
(declare-fun x32 () Bool)
(declare-fun x531 () Int)
(declare-fun x411 () Int)
(declare-fun x482 () Bool)
(declare-fun x81 () Int)
(declare-fun x91 () Int)
(declare-fun x683 () Int)
(declare-fun x504 () Int)
(declare-fun x9 () Bool)
(declare-fun x463 () Int)
(declare-fun x426 () Bool)
(declare-fun x239 () Bool)
(declare-fun x290 () Int)
(declare-fun x505 () Bool)
(declare-fun x99 () Int)
(declare-fun x609 () Int)
(declare-fun x467 () Int)
(declare-fun x553 () Int)
(declare-fun x145 () Int)
(declare-fun x450 () Bool)
(declare-fun x120 () Int)
(declare-fun x692 () Int)
(declare-fun x651 () Bool)
(declare-fun x274 () Int)
(declare-fun x76 () Bool)
(declare-fun x97 () Int)
(declare-fun x474 () Int)
(declare-fun x355 () Bool)
(declare-fun x180 () Int)
(declare-fun x630 () Bool)
(declare-fun x483 () Int)
(declare-fun x137 () Bool)
(declare-fun x694 () Int)
(declare-fun x255 () Int)
(declare-fun x689 () Int)
(declare-fun x95 () Int)
(declare-fun x257 () Int)
(declare-fun x43 () Int)
(declare-fun x172 () Int)
(declare-fun x261 () Int)
(declare-fun x218 () Int)
(declare-fun x112 () Int)
(declare-fun x339 () Int)
(declare-fun x733 () Int)
(declare-fun x544 () Int)
(declare-fun x455 () Int)
(declare-fun x73 () Int)
(declare-fun x328 () Bool)
(declare-fun x608 () Int)
(declare-fun x356 () Int)
(declare-fun x372 () Int)
(declare-fun x329 () Int)
(declare-fun x454 () Int)
(declare-fun x344 () Int)
(declare-fun x628 () Int)
(declare-fun x484 () Int)
(declare-fun x554 () Int)
(declare-fun x422 () Int)
(declare-fun x598 () Bool)
(declare-fun x111 () Bool)
(declare-fun x35 () Bool)
(declare-fun x669 () Int)
(declare-fun x655 (Int) Int)
(declare-fun x300 () Int)
(declare-fun x245 () Bool)
(declare-fun x204 () Int)
(declare-fun x127 () Int)
(declare-fun x258 () Bool)
(declare-fun x466 () Int)
(declare-fun x304 () Bool)
(declare-fun x66 () Int)
(declare-fun x79 () Int)
(declare-fun x316 () Int)
(declare-fun x587 () Int)
(declare-fun x259 () Bool)
(declare-fun x2 () Int)
(declare-fun x196 () Bool)
(declare-fun x678 () Int)
(declare-fun x418 () Int)
(declare-fun x282 () Int)
(declare-fun x597 () Int)
(declare-fun x352 () Bool)
(declare-fun x124 () Int)
(declare-fun x342 () Int)
(declare-fun x648 () Int)
(declare-fun x107 () Int)
(declare-fun x506 () Int)
(declare-fun x435 () Int)
(declare-fun x46 () Int)
(declare-fun x198 () Int)
(declare-fun x699 () Int)
(declare-fun x501 () Int)
(declare-fun x690 () Int)
(declare-fun x682 () Bool)
(declare-fun x260 () Int)
(declare-fun x178 () Int)
(declare-fun x658 () Int)
(declare-fun x487 () Bool)
(declare-fun x565 () Int)
(declare-fun x37 () Int)
(declare-fun x116 () Int)
(declare-fun x146 () Int)
(declare-fun x664 () Int)
(declare-fun x696 () Int)
(declare-fun x115 () Int)
(declare-fun x275 () Int)
(declare-fun x133 () Bool)
(declare-fun x401 () Int)
(declare-fun x88 () Int)
(declare-fun x560 () Int)
(declare-fun x100 () Bool)
(declare-fun x171 () Int)
(declare-fun x119 () Int)
(declare-fun x552 () Int)
(declare-fun x92 () Int)
(declare-fun x141 () Int)
(declare-fun x197 () Int)
(declare-fun x280 () Int)
(declare-fun x736 () Bool)
(declare-fun x242 () Int)
(declare-fun x617 () Bool)
(declare-fun x566 () Int)
(declare-fun x103 () Bool)
(declare-fun x256 () Bool)
(declare-fun x394 () Int)
(declare-fun x656 () Int)
(declare-fun x428 () Int)
(declare-fun x247 () Bool)
(declare-fun x114 () Int)
(declare-fun x240 () Int)
(declare-fun x672 () Bool)
(declare-fun x156 () Bool)
(declare-fun x168 () Int)
(declare-fun x8 () Int)
(declare-fun x615 () Bool)
(declare-fun x311 () Int)
(declare-fun x160 () Bool)
(declare-fun x327 () Int)
(declare-fun x457 () Bool)
(declare-fun x21 () Bool)
(declare-fun x113 () Int)
(declare-fun x536 () Bool)
(declare-fun x427 () Int)
(declare-fun x600 () Int)
(declare-fun x246 () Int)
(declare-fun x221 () Int)
(declare-fun x340 (Int) Int)
(declare-fun x729 () Bool)
(declare-fun x132 (Int) Bool)
(declare-fun x337 () Int)
(declare-fun x13 () Int)
(declare-fun x203 () Int)
(declare-fun x38 (Int) Int)
(declare-fun x187 () Int)
(declare-fun x211 () Int)
(declare-fun x637 () Int)
(declare-fun x222 () Int)
(declare-fun x436 (Int) Int)
(declare-fun x117 () Int)
(declare-fun x735 () Int)
(declare-fun x562 () Int)
(declare-fun x226 () Bool)
(declare-fun x744 () Int)
(declare-fun x233 () Int)
(declare-fun x293 () Bool)
(declare-fun x676 () Bool)
(declare-fun x69 () Int)
(declare-fun x217 () Bool)
(declare-fun x55 () Int)
(declare-fun x542 () Bool)
(declare-fun x575 () Bool)
(declare-fun x686 (Int) Int)
(declare-fun x298 () Int)
(declare-fun x177 () Int)
(declare-fun x698 () Int)
(declare-fun x646 () Int)
(declare-fun x465 () Int)
(declare-fun x667 () Bool)
(declare-fun x408 () Int)
(declare-fun x647 () Int)
(declare-fun x687 () Int)
(declare-fun x492 () Int)
(declare-fun x209 () Int)
(declare-fun x517 () Int)
(declare-fun x193 () Bool)
(declare-fun x442 () Bool)
(declare-fun x706 () Bool)
(declare-fun x367 () Int)
(declare-fun x65 () Int)
(declare-fun x373 () Int)
(declare-fun x452 () Bool)
(declare-fun x251 () Int)
(declare-fun x447 () Int)
(declare-fun x363 () Bool)
(declare-fun x502 () Bool)
(declare-fun x80 () Int)
(declare-fun x659 () Int)
(declare-fun x705 () Int)
(declare-fun x695 (Int) Int)
(declare-fun x707 () Int)
(declare-fun x354 () Bool)
(declare-fun x677 () Int)
(declare-fun x563 () Int)
(declare-fun x90 () Bool)
(declare-fun x616 () Int)
(declare-fun x547 () Int)
(declare-fun x437 () Int)
(declare-fun x317 () Int)
(declare-fun x130 () Bool)
(declare-fun x631 () Int)
(declare-fun x379 () Bool)
(declare-fun x16 () Bool)
(declare-fun x555 () Bool)
(declare-fun x202 () Int)
(declare-fun x704 () Int)
(declare-fun x599 () Int)
(declare-fun x365 () Bool)
(declare-fun x421 () Int)
(declare-fun x122 () Int)
(declare-fun x607 () Int)
(declare-fun x673 () Int)
(declare-fun x200 () Int)
(declare-fun x321 () Int)
(declare-fun x668 () Int)
(declare-fun x30 () Int)
(declare-fun x295 () Int)
(declare-fun x284 () Bool)
(declare-fun x732 () Int)
(declare-fun x135 () Bool)
(declare-fun x471 () Bool)
(declare-fun x310 () Int)
(declare-fun x157 () Int)
(declare-fun x564 () Int)
(declare-fun x469 () Int)
(declare-fun x232 () Int)
(declare-fun x398 () Bool)
(declare-fun x194 () Bool)
(declare-fun x361 () Int)
(declare-fun x108 () Int)
(declare-fun x691 () Int)
(declare-fun x250 () Int)
(declare-fun x716 () Int)
(declare-fun x72 () Int)
(declare-fun x6 () Int)
(declare-fun x353 () Bool)
(declare-fun x357 () Int)
(declare-fun x303 () Int)
(declare-fun x1 () Int)
(declare-fun x440 () Bool)
(declare-fun x577 () Int)
(declare-fun x313 () Int)
(declare-fun x215 () Int)
(declare-fun x77 () Bool)
(declare-fun x61 () Bool)
(declare-fun x185 () Int)
(declare-fun x393 () Int)
(declare-fun x210 () Bool)
(declare-fun x456 () Int)
(declare-fun x681 () Int)
(declare-fun x430 () Int)
(declare-fun x51 () Bool)
(declare-fun x459 () Bool)
(declare-fun x525 () Int)
(declare-fun x11 () Int)
(declare-fun x551 () Int)
(declare-fun x169 () Int)
(declare-fun x546 () Int)
(declare-fun x297 () Int)
(declare-fun x50 () Int)
(declare-fun x519 () Bool)
(declare-fun x589 () Bool)
(declare-fun x700 () Int)
(declare-fun x336 () Int)
(declare-fun x279 () Int)
(declare-fun x439 () Bool)
(declare-fun x710 () Bool)
(declare-fun x224 () Int)
(declare-fun x498 () Bool)
(declare-fun x702 () Bool)
(declare-fun x182 (Int) Int)
(declare-fun x312 () Bool)
(declare-fun x684 () Bool)
(declare-fun x397 () Int)
(declare-fun x85 () Int)
(declare-fun x510 () Int)
(declare-fun x139 () Int)
(declare-fun x415 () Bool)
(declare-fun x309 () Int)
(declare-fun x433 () Bool)
(declare-fun x623 () Int)
(declare-fun x183 () Int)
(declare-fun x500 () Int)
(declare-fun x223 () Int)
(declare-fun x265 (Int) Int)
(declare-fun x349 () Int)
(declare-fun x532 () Bool)
(declare-fun x493 () Bool)
(declare-fun x458 () Int)
(declare-fun x161 () Int)
(declare-fun x461 () Int)
(declare-fun x540 () Int)
(declare-fun x364 () Int)
(declare-fun x189 () Bool)
(declare-fun x485 () Int)
(declare-fun x406 () Int)
(declare-fun x22 () Int)
(declare-fun x45 () Int)
(declare-fun x64 () Int)
(declare-fun x34 () Int)
(declare-fun x54 () Bool)
(declare-fun x712 () Bool)
(declare-fun x14 () Int)
(declare-fun x75 () Bool)
(declare-fun x731 () Int)
(declare-fun x511 () Int)
(declare-fun x738 () Bool)
(declare-fun x184 () Int)
(declare-fun x633 () Int)
(declare-fun x530 () Bool)
(declare-fun x358 () Int)
(declare-fun x445 () Int)
(declare-fun x636 () Int)
(declare-fun x31 () Int)
(declare-fun x541 () Int)
(declare-fun x709 () Int)
(declare-fun x644 () Int)
(declare-fun x556 () Int)
(declare-fun x286 () Int)
(declare-fun x86 () Int)
(declare-fun x750 () Bool)
(declare-fun x657 () Bool)
(declare-fun x434 () Int)
(declare-fun x299 () Int)
(declare-fun x288 () Int)
(declare-fun x640 () Int)
(declare-fun x360 () Int)
(declare-fun x583 () Int)
(declare-fun x58 () Int)
(declare-fun x151 () Int)
(declare-fun x49 () Int)
(declare-fun x613 () Int)
(declare-fun x533 (Int) Int)
(declare-fun x478 () Bool)
(declare-fun x170 () Int)
(declare-fun x59 () Int)
(declare-fun x725 () Int)
(declare-fun x71 () Int)
(declare-fun x680 () Bool)
(declare-fun x604 () Int)
(declare-fun x212 () Int)
(declare-fun x191 () Bool)
(declare-fun x362 () Int)
(declare-fun x334 () Int)
(declare-fun x244 () Int)
(declare-fun x416 () Int)
(declare-fun x717 () Bool)
(declare-fun x688 () Int)
(declare-fun x488 () Bool)
(declare-fun x20 () Int)
(declare-fun x715 () Int)
(declare-fun x718 () Bool)
(declare-fun x347 () Bool)
(declare-fun x326 () Int)
(declare-fun x305 () Int)
(declare-fun x188 () Int)
(declare-fun x539 () Int)
(declare-fun x475 () Int)
(declare-fun x621 () Int)
(declare-fun x734 () Int)
(declare-fun x653 () Bool)
(declare-fun x131 () Int)
(declare-fun x24 () Bool)
(declare-fun x318 () Bool)
(declare-fun x559 () Bool)
(declare-fun x424 () Bool)
(declare-fun x48 () Int)
(declare-fun x241 () Int)
(declare-fun x568 () Int)
(declare-fun x102 () Int)
(declare-fun x283 () Int)
(declare-fun x324 () Bool)
(declare-fun x44 () Int)
(declare-fun x579 () Bool)
(declare-fun x118 () Int)
(declare-fun x152 () Int)
(declare-fun x543 () Int)
(declare-fun x446 () Int)
(declare-fun x419 (Int Int) Int)
(declare-fun x595 () Bool)
(declare-fun x593 () Int)
(declare-fun x128 () Int)
(declare-fun x53 () Bool)
(declare-fun x701 () Int)
(declare-fun x432 () Int)
(declare-fun x697 () Int)
(declare-fun x314 () Int)
(declare-fun x278 () Bool)
(declare-fun x225 () Int)
(declare-fun x588 () Int)
(declare-fun x28 () Int)
(declare-fun x425 (Int) Int)
(declare-fun x614 () Int)
(declare-fun x166 () Bool)
(declare-fun x276 () Int)
(declare-fun x322 () Int)
(declare-fun x529 () Int)
(declare-fun x140 () Int)
(declare-fun x409 () Int)
(declare-fun x721 () Int)
(declare-fun x537 () Int)
(declare-fun x521 (Int Int Int) Int)
(declare-fun x301 () Int)
(declare-fun x719 () Int)
(declare-fun x25 () Int)
(declare-fun x252 () Bool)
(declare-fun x714 () Int)
(declare-fun x345 () Int)
(declare-fun x503 () Int)
(declare-fun x93 () Bool)
(declare-fun x737 () Int)
(declare-fun x405 () Int)
(declare-fun x605 () Int)
(declare-fun x666 () Int)
(declare-fun x264 () Int)
(declare-fun x395 () Int)
(declare-fun x571 () Bool)
(declare-fun x234 () Int)
(declare-fun x281 () Int)
(declare-fun x470 () Bool)
(declare-fun x154 () Int)
(declare-fun x642 () Int)
(declare-fun x671 () Int)
(declare-fun x730 () Bool)
(declare-fun x584 () Int)
(declare-fun x308 () Int)
(declare-fun x567 () Int)
(declare-fun x650 () Int)
(declare-fun x388 () Int)
(declare-fun x578 () Bool)
(declare-fun x220 () Bool)
(declare-fun x468 () Bool)
(declare-fun x134 () Bool)
(declare-fun x462 () Bool)
(declare-fun x494 () Bool)
(declare-fun x277 () Bool)
(declare-fun x713 (Int) Int)
(declare-fun x572 () Bool)
(declare-fun x7 () Int)
(declare-fun x635 () Int)
(declare-fun x660 () Int)
(declare-fun x268 (Int) Int)
(declare-fun x214 () Bool)
(declare-fun x138 () Int)
(declare-fun x201 () Bool)
(declare-fun x549 () Int)
(declare-fun x267 () Int)
(declare-fun x703 () Int)
(declare-fun x192 () Bool)
(declare-fun x557 () Int)
(declare-fun x722 () Int)
(declare-fun x522 (Int) Int)
(declare-fun x400 () Int)
(declare-fun x594 () Int)
(declare-fun x509 () Bool)
(declare-fun x627 () Int)
(declare-fun x576 () Bool)
(declare-fun x159 () Int)
(declare-fun x229 () Int)
(declare-fun x315 () Int)
(declare-fun x243 () Int)
(declare-fun x350 () Int)
(declare-fun x227 () Bool)
(declare-fun x254 () Bool)
(declare-fun x249 () Int)
(declare-fun x26 () Bool)
(declare-fun x144 () Bool)
(declare-fun x620 () Int)
(declare-fun x179 () Int)
(declare-fun x382 () Int)
(declare-fun x520 () Int)
(declare-fun x499 (Int) Int)
(declare-fun x60 () Bool)
(declare-fun x29 () Int)
(declare-fun x235 () Int)
(declare-fun x12 () Int)
(declare-fun x121 () Int)
(declare-fun x602 () Bool)
(declare-fun x129 () Int)
(declare-fun x104 () Int)
(define-fun x728 ((x748 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x748) (>= x748 0)) x748 (- x748 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x190 ((x748 Int)) Int (ite (and (< x748 0) (>= x748 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x748 115792089237316195423570985008687907853269984665640564039457584007913129639936) x748))
(define-fun x558 ((x262 Int)) Bool (and (>= x262 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x262)))
(define-fun x515 ((x380 Int)) Int 0)
(define-fun x410 ((x380 Int)) Int 0)
(define-fun x693 ((x380 Int)) Int 0)
(define-fun x78 ((x380 Int)) Int 0)
(define-fun x386 ((x380 Int)) Int 0)
(define-fun x174 ((x380 Int)) Int 0)
(define-fun x84 ((x380 Int)) Int 0)
(define-fun x148 ((x380 Int)) Int 0)
(define-fun x96 ((x380 Int)) Int 0)
(define-fun x346 ((x380 Int)) Int 0)
(define-fun x742 ((x380 Int)) Int 0)
(define-fun x47 ((x380 Int)) Int 0)
(define-fun x451 ((x380 Int)) Int 0)
(define-fun x665 ((x380 Int)) Int 0)
(define-fun x33 ((x380 Int)) Int 0)
(define-fun x238 ((x380 Int)) Int 0)
(define-fun x70 ((x380 Int)) Int 0)
(define-fun x331 ((x380 Int)) Int 0)
(define-fun x534 ((x380 Int)) Int 0)
(define-fun x36 ((x380 Int)) Int 0)
(define-fun x325 ((x380 Int)) Int 0)
(define-fun x739 ((x380 Int)) Int 0)
(define-fun x289 ((x380 Int)) Int 0)
(define-fun x236 ((x380 Int)) Int 0)
(define-fun x670 ((x380 Int)) Int 0)
(define-fun x495 ((x380 Int)) Int 0)
(define-fun x42 ((x380 Int)) Int 0)
(define-fun x586 ((x380 Int)) Int 0)
(define-fun x726 ((x380 Int)) Int 0)
(define-fun x219 ((x380 Int)) Int 0)
(define-fun x207 ((x380 Int)) Int 0)
(define-fun x711 ((x380 Int)) Int 0)
(define-fun x213 ((x380 Int)) Int 0)
(define-fun x569 ((x380 Int)) Int 0)
(define-fun x391 ((x380 Int)) Int 0)
(define-fun x143 ((x380 Int)) Int 0)
(define-fun x320 ((x380 Int)) Int 0)
(define-fun x348 ((x380 Int)) Int 0)
(define-fun x675 ((x380 Int)) Int 0)
(define-fun x512 ((x380 Int)) Int 0)
(define-fun x570 ((x380 Int)) Int 0)
(define-fun x285 ((x380 Int)) Int 0)
(define-fun x10 ((x380 Int)) Int 0)
(define-fun x287 ((x380 Int)) Int (ite (= x380 x108) x232 (x182 x380)))
(define-fun x307 ((x380 Int)) Int (ite (= x380 x716) x537 (x287 x380)))
(define-fun x82 ((x380 Int)) Int 0)
(define-fun x109 ((x380 Int)) Int (ite (= x281 x380) x298 (x307 x380)))
(define-fun x230 ((x380 Int)) Int (ite (= x380 224) 73911253449526342377211119353630508932289385467876046976689682728070827474944 (x693 x380)))
(define-fun x216 ((x380 Int)) Int (ite (= 0 x380) x503 (x369 x380)))
(define-fun x720 ((x380 Int)) Int (ite (= 224 x380) x503 (x230 x380)))
(define-fun x83 ((x380 Int)) Int (ite (and (> 256 x380) (>= x380 224)) (x216 (- x380 224)) (x570 x380)))
(define-fun x535 ((x380 Int)) Int (ite (= 256 x380) 69765223551147701335118770550544272781148754634833107235959950171031635755008 (x720 x380)))
(define-fun x296 ((x380 Int)) Int (ite (= 260 x380) x393 (x535 x380)))
(define-fun x390 ((x380 Int)) Int (ite (= x380 292) x240 (x296 x380)))
(define-fun x4 ((x380 Int)) Int (ite (= 128 x380) x388 (x675 x380)))
(define-fun x106 ((x380 Int)) Int (ite (= 160 x380) x744 (x4 x380)))
(define-fun x39 ((x380 Int)) Int (ite (= x380 256) x623 (x390 x380)))
(define-fun x585 ((x380 Int)) Int (ite (= x380 288) x699 (x39 x380)))
(define-fun x743 ((x380 Int)) Int (ite (= x380 0) x288 (x713 x380)))
(define-fun x94 ((x380 Int)) Int (ite (= 32 x380) x222 (x743 x380)))
(define-fun x378 ((x380 Int)) Int (ite (and (> 320 x380) (<= 256 x380)) (x94 (- x380 256)) (x391 x380)))
(define-fun x206 ((x380 Int)) Int (ite (= 320 x380) 27147089433500079299458733913583343397174134070558226512927488251900645605376 (x585 x380)))
(define-fun x649 ((x380 Int)) Int (ite (= x380 324) x393 (x206 x380)))
(define-fun x338 ((x380 Int)) Int (ite (= x380 224) 73911253449526342377211119353630508932289385467876046976689682728070827474944 (x78 x380)))
(define-fun x149 ((x380 Int)) Int (ite (= 0 x380) x503 (x686 x380)))
(define-fun x272 ((x380 Int)) Int (ite (= x380 224) x503 (x338 x380)))
(define-fun x523 ((x380 Int)) Int (ite (and (<= 224 x380) (< x380 256)) (x149 (- x380 224)) (x285 x380)))
(define-fun x208 ((x380 Int)) Int (ite (= x380 256) 69765223551147701335118770550544272781148754634833107235959950171031635755008 (x272 x380)))
(define-fun x323 ((x380 Int)) Int (ite (= 260 x380) x700 (x208 x380)))
(define-fun x142 ((x380 Int)) Int (ite (= x380 292) x597 (x323 x380)))
(define-fun x147 ((x380 Int)) Int (ite (= x380 128) x153 (x512 x380)))
(define-fun x343 ((x380 Int)) Int (ite (= x380 160) x85 (x147 x380)))
(define-fun x57 ((x380 Int)) Int (ite (= 256 x380) x159 (x142 x380)))
(define-fun x632 ((x380 Int)) Int (ite (= x380 288) x618 (x57 x380)))
(define-fun x17 ((x380 Int)) Int (ite (= x380 0) x669 (x499 x380)))
(define-fun x643 ((x380 Int)) Int (ite (= x380 32) x120 (x17 x380)))
(define-fun x248 ((x380 Int)) Int (ite (and (< x380 320) (<= 256 x380)) (x643 (- x380 256)) (x143 x380)))
(define-fun x645 ((x380 Int)) Int (ite (= x380 320) 27147089433500079299458733913583343397174134070558226512927488251900645605376 (x632 x380)))
(define-fun x231 ((x380 Int)) Int (ite (= x380 324) x700 (x645 x380)))
(define-fun x376 ((x380 Int)) Int (ite (= 0 x380) x235 (x340 x380)))
(define-fun x749 ((x380 Int)) Int (ite (and (>= x380 320) (> 352 x380)) (x376 (- x380 320)) (x515 x380)))
(define-fun x359 ((x380 Int)) Int (ite (= x380 0) x68 (x522 x380)))
(define-fun x516 ((x380 Int)) Int (ite (and (> 352 x380) (>= x380 320)) (x359 (- x380 320)) (x410 x380)))
(assert (= (=> (and (<= x714 1461501637330902918203684832716283019655932542975) (= x600 x622) (>= 127 x492) (= (x106 128) x623) (= 36 x266) (= x487 false) (<= 1 x167) (= 320 x102) (= x517 (* x62 1000000000)) (<= 1 x344) (= 18 x319) (= false x582) (= x58 1006941511) (= x663 69765223551147701335118770550544272781148754634833107235959950171031635755008) (= x220 false) (= (x106 128) x288) (= (x83 224) x62) (= x267 2587735963) (= x97 27147089433500079299458733913583343397174134070558226512927488251900645605376) (= x638 (x378 256)) (= false x751) (= x714 x614) (= (x425 x614) x209) (= x388 (x655 x696)) (= false x440) (= x672 false) (<= x59 127) (= x389 (+ 1 x449)) (= x699 (x106 160)) (= (x378 288) x326) (= x710 false) (= 4 x619) (= x212 x126) (= 224 x372) (<= 1 x209) (= x161 x517) (= x387 2741520759) (= x111 (= x40 0)) (= x564 x187) (<= 1 x714) (= (x106 160) x222) (>= 57896044618658097711785492504343953926634992332820282019728792003956 x62) (<= x59 127) (<= x492 127) (= x158 (x521 64 x393 93505503590744673808321018039237703620848625446120597023077546950189643103747)) (= x620 68) (= x449 (x521 64 x240 x158)) (= x200 128) (= false x181) (= x455 256) (= x344 (x425 x25)) (= 93505503590744673808321018039237703620848625446120597023077546950189643103744 x202) (= 99159083378869749887603094490482246568362853213590331502974839740719474624768 x225) (= x555 false) (= x279 73911253449526342377211119353630508932289385467876046976689682728070827474944) (= x696 (x521 64 x240 x1)) (= x600 x212) (= x467 93505503590744673808321018039237703620848625446120597023077546950189643103744) (= 27 x688) (<= x178 127) (= (x425 x25) x167) (= (x436 x389) x744) (>= 127 x178) (= (x521 64 x393 93505503590744673808321018039237703620848625446120597023077546950189643103747) x1) (= false x259)) (and (=> (and (= x249 0) x111) x559) (=> (not x111) x490))) x479))
(assert (x558 x102))
(assert (x558 x628))
(assert (x132 73911253449526342377211119353630508932289385467876046976689682728070827474944))
(assert (x558 x204))
(assert (= (x265 x707) (x265 (+ x707 x5))))
(assert (x558 x639))
(assert (x558 x198))
(assert (=> (>= 10000 x52) (= 0 (x265 x52))))
(assert (=> (= x44 0) (= (div x237 x44) 0)))
(assert (x558 x310))
(assert (x558 x566))
(assert (x558 x185))
(assert (= 0 (x265 115792089237316195423570985008687907853269984665640564039457584007913129639934)))
(assert (= (=> (and (and (= x653 false) (= (* x2 1000000000000000000000000000) x560) (not (< x370 x366)) (= x716 x186) (= x627 x461) (= x465 x224) (= x627 x366) (= x311 0) (>= x366 1) (= x16 true) (= 1000000000000000000000000000 x577) (= x504 x627) (= x576 false) (= x366 (x190 (- x370 x377))) (= 1000000000000000000000000000 x314) (= x115 1000000000000000000000000000) (= x465 x2) (= x421 1)) (and (and (or (and (not x306) (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x611) (= x6 (+ 1 x611)))) (and (= x611 x6) x306)) (and (= x611 x7) (= x327 1) (= x306 (= (ite (< 0 (mod (* x224 1000000000000000000000000000) x366)) 1 0) 0)))) (and (<= x7 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x7 0) (= (div x560 x504) x7)))) x192) x580))
(assert (= (and x493 x602) x245))
(assert (= (and x306 x738) x712))
(assert (not (x132 (x521 64 x393 93505503590744673808321018039237703620848625446120597023077546950189643103747))))
(assert (= x498 (or x654 x667)))
(assert (x558 x622))
(assert (x558 x469))
(assert (x558 x298))
(assert (= (x265 281474976710655) 0))
(assert (= (or x63 x702) x452))
(assert (x558 x366))
(assert (x558 x98))
(assert (x558 x621))
(assert (> (x521 64 x597 x87) 10000))
(assert (x558 x689))
(assert (x132 2741520759))
(assert (x558 x642))
(assert (x132 1000000000))
(assert (< (x419 32 93505503590744673808321018039237703620848625446120597023077546950189643103744) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (=> (and (or (and (= x69 (+ x427 1)) x433) (and (not x433) (= x427 x69))) (and (= (< 0 (mod x6 1000000000000000000000000000)) x433) (= (div x6 1000000000000000000000000000) x427))) x674) x192))
(assert (x132 20282409603651670423947251286015))
(assert (x558 x371))
(assert (x558 x552))
(assert (= (and x452 x312) x667))
(assert (< (x521 64 x700 93505503590744673808321018039237703620848625446120597023077546950189643103747) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x132 57896044618658097711785492504343953926634992332820282019728792003956))
(assert (x558 x483))
(assert (= (x265 (x521 64 x240 x1)) (x521 64 x240 x1)))
(assert (= (x265 99159083378869749887603094490482246568362853213590331502974839740719474624768) 0))
(assert (x558 x286))
(assert (x558 x330))
(assert (x132 57896044618658097711785492504343953926634992332820282019728792003956564819967))
(assert (x558 x455))
(assert (x558 x606))
(assert (x558 x393))
(assert (= x708 (and (not x111) x363)))
(assert (x132 2587735963))
(assert (= (=> (and (and (= (div x375 1000000000000000000000000000) x41) (and (= x606 x41) (= x704 x606))) (and (= 0 x411) (= x278 false) (<= x375 115792089237316195423570985008687907853269984665640564039457584007913129639935999999999999999999999999999) (= 1000000000000000000000000000 x692) (= x351 x547) (= x450 false) (>= x375 0) (= x169 x25) (= (* x671 x445) x375) (= 1000000000000000000000000000 x99) (= x81 1000000000000000000000000000) (= x351 x671) (= x424 true) (= x40 x735) (= x735 x445))) x682) x9))
(assert (x132 1461501637330902918203684832716283019655932542975))
(assert (x558 x288))
(assert (x558 x444))
(assert (x558 x497))
(assert (= x156 (or x292 x189)))
(assert (x558 x553))
(assert (x558 x72))
(assert (= x592 (and (not x595) x498)))
(assert (x558 x229))
(assert (x558 x232))
(assert (x558 x344))
(assert (not (x132 (x521 64 x597 x172))))
(assert (x558 x666))
(assert (x558 x577))
(assert (x558 x257))
(assert (x132 57896044618658097711785492504343953926634992332820282019728792003956000000000))
(assert (< 10000 (x521 64 x393 93505503590744673808321018039237703620848625446120597023077546950189643103747)))
(assert (x558 x382))
(assert (= (x265 2741520759) 0))
(assert (x132 1006941511))
(assert (= (x727 (x521 64 x597 x172)) x597))
(assert (= x160 (and x354 x433)))
(assert (= (=> (and (and (< (* x161 x638) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819966999999999999999999999999999 x336) (= x379 true) (= x454 x520) (= x701 0) (= x228 (+ x313 x403)) (= false x462) (<= 1 x161) (= x641 x168) (= x403 (* x393 4)) (= 0 x565) (>= 281474976710655 x261) (= 0 x14) (= 0 x141) (= x168 x15) (= (* x339 x641) x336) (= (* x161 x638) x223) (= x605 x223) (= x313 (x419 32 93505503590744673808321018039237703620848625446120597023077546950189643103744)) (= x362 1000000000000000000000000000) (<= x223 57896044618658097711785492504343953926634992332820282019728792003956564819967) (= x624 x339) (not x482) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x638) (<= 0 x223) (= x482 (= 0 x122)) (not (> x520 x428)) (= x155 x716) (= x548 (x749 320)) (= (+ x282 x621) x235) (<= x161 57896044618658097711785492504343953926634992332820282019728792003956000000000) (<= 0 x336) (= x605 x624) (= x530 false) (= x194 false) (< x393 x299) (= (x190 (- x428 x261)) x520) (<= x621 20282409603651670423947251286015) (= false x284) (= x518 1000000000000000000000000000) (= 0 x282) (= x561 1000000000000000000000000000) (= (x695 x228) x621) (= x261 (x38 x594))) (and (= x221 (div x336 1000000000000000000000000000)) (and (and (and (= x422 (div x392 x342)) (<= 0 x422) (<= x422 999999999999999999999999999)) (and (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x326 x548)) (= x95 x422) (= x183 1000000000000000000000000000) (= x162 x733) (<= x332 999999999999999999999999999) (= x716 x127) (= 1000000000000000000000000000 x634) (<= 1 x370) (= x494 false) (= x394 (* x326 x548)) (<= 0 x394) (= x107 x370) (= 1 x673) (= x527 (* x705 x733)) (not (> x552 x476)) (= x75 true) (<= x394 57896044618658097711785492504343953926634992332820282019728792003956564819967) (= false x217) (= x333 1000000000000000000000000000) (= x476 (x728 (+ (mod (- 1000000000000000000000000000 x95) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x552))) (<= 0 x527) (= (ite (> x476 x432) x432 x476) x332) (= 0 x691) (= 1000000000000000000000000000 x385) (= x107 x705) (= x394 x587) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935999999999999999999999999999 x527) (= x162 x587)) (and (and (and (= (= 0 (ite (> (mod (* x587 x370) 1000000000000000000000000000) 0) 1 0)) x239) (= x431 1) (= x27 x420)) (or (and (and (= (+ 1 x420) x176) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x420)) (not x239)) (and (= x420 x176) x239))) (= (div x527 1000000000000000000000000000) x27)))) (and (= x574 x342) (= x574 x593) (<= 1 x242) (= x221 x603) (= x716 x3) (<= x242 57896044618658097711785492504343953926634992332820282019728792003956564819967) (= x392 (* 1000000000000000000000000000 x117)) (= x250 0) (< (* x326 x548) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x242 (* x326 x548)) (= false x572) (= x574 x678) (= x593 x242) (= x117 x360) (= 1000000000000000000000000000 x381) (= false x473) (= true x125) (= x50 1000000000000000000000000000) (= x360 x603))))) x324) x439))
(assert (x558 x613))
(assert (< 10000 (x419 32 93505503590744673808321018039237703620848625446120597023077546950189643103744)))
(assert (x558 x209))
(assert (x558 x591))
(assert (x558 x714))
(assert (x558 x116))
(assert (= x101 (and x226 x166)))
(assert (x558 x564))
(assert (x558 x454))
(assert (x558 x427))
(assert (= (and x239 x573) x545))
(assert (x558 x180))
(assert (x558 x74))
(assert (x558 x52))
(assert (x558 x417))
(assert (x558 x604))
(assert (x558 x62))
(assert (x558 x260))
(assert (x558 x550))
(assert (x558 x565))
(assert (= 0 (x265 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (x132 115792089237316195423570985008687907853269984665640564039457584007913129639934))
(assert (x558 x507))
(assert (= 0 (x265 73911253449526342377211119353630508932289385467876046976689682728070827474944)))
(assert (x558 x253))
(assert (=> (<= x716 10000) (= 0 (x265 x716))))
(assert (x558 x197))
(assert (x558 x240))
(assert (= x700 (x727 (x521 64 x700 93505503590744673808321018039237703620848625446120597023077546950189643103747))))
(assert (= x597 (x727 (x521 64 x597 x87))))
(assert (x558 x637))
(assert (x558 x644))
(assert (x558 x620))
(assert (x558 x605))
(assert (x558 x404))
(assert (x558 x547))
(assert (x558 x668))
(assert (x558 x543))
(assert (= (x727 (x419 32 93505503590744673808321018039237703620848625446120597023077546950189643103744)) 93505503590744673808321018039237703620848625446120597023077546950189643103744))
(assert (= x90 (and x442 x457)))
(assert (x558 x423))
(assert (= (x265 x113) (x265 (+ x257 x113))))
(assert (x558 x744))
(assert (= x702 (and (not x60) x156)))
(assert (=> (>= 10000 x25) (= 0 (x265 x25))))
(assert (x558 x140))
(assert (x558 x725))
(assert (x132 281474976710655))
(assert (x558 x71))
(assert (= (x383 (x521 64 x597 x87)) x87))
(assert (x558 x234))
(assert (= (and (not x442) x457) x468))
(assert (x558 x731))
(assert (x558 x68))
(assert (x558 x405))
(assert (x558 x387))
(assert (x558 x261))
(assert (x558 x164))
(assert (x558 x734))
(assert (x558 x225))
(assert (= 0 (x265 1461501637330902918203684832716283019655932542975)))
(assert (x558 x603))
(assert (= 64 (x268 (x521 64 x393 93505503590744673808321018039237703620848625446120597023077546950189643103747))))
(assert (x558 x500))
(assert (x558 x650))
(assert (= (x265 93505503590744673808321018039237703620848625446120597023077546950189643103747) 0))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x521 64 x393 93505503590744673808321018039237703620848625446120597023077546950189643103747)))
(assert (= x513 (and x602 (not x493))))
(assert (x558 x612))
(assert (x558 x546))
(assert (x558 x373))
(assert (x558 x319))
(assert (x558 x416))
(assert (x558 x583))
(assert (x558 x658))
(assert (= (x265 20282409603651670423947251286015) 0))
(assert (x558 x357))
(assert (x558 x741))
(assert (= (and (not x306) x738) x196))
(assert (x558 x43))
(assert (x558 x124))
(assert (x558 x401))
(assert (x558 x322))
(assert (x558 x698))
(assert (x558 x176))
(assert (= x674 (=> (and (and (= x700 x350) (and (and (= x597 x173) (= x706 false)) (and (and (or (and x542 (and (= x290 x437) (>= 1461501637330902918203684832716283019655932542975 x373) (= x373 x110) (>= x373 1) (= x417 x317))) (and (not x542) (and (= x437 x29) x717 (= x341 x317) (= x717 (= x700 1)) (= x497 x29) (= x345 x110) (<= 1 x71) (= x345 x71) (<= x71 1461501637330902918203684832716283019655932542975) (= x553 x341)))) (and (= false x443) (= x281 x45) (= x298 (x307 x281)) (= x597 x31) (= x66 x700) (= x540 x466) (>= 127 x405) (= 2698376601 x164) (= x542 (= x700 0)) (>= 127 x405) (= x540 (x109 x716)) (= (x425 x716) x264) (= false x335) (<= 1 x264))) (= x241 x489)))) (and (= x198 68) (= x173 x660) (= x13 x350) (= x349 x69) (= x398 false) (= x130 false) (= false x100) (= x598 false))) x355)))
(assert (x558 x503))
(assert (x132 1000000000000000000000000000))
(assert (x558 x716))
(assert (= x63 (and x156 x60)))
(assert (= 0 (x265 2587735963)))
(assert (x558 x58))
(assert (x558 x29))
(assert (x558 x476))
(assert (x558 x361))
(assert (= (or x101 x590) x363))
(assert (x558 x202))
(assert (x558 x464))
(assert (x558 x623))
(assert (x558 x747))
(assert (x558 x403))
(assert (= x165 (and x76 x54)))
(assert (not (x132 (x521 64 x240 x1))))
(assert (= (or x328 x592) x76))
(assert (x558 x69))
(assert (= x657 (and x77 x374)))
(assert (x558 x327))
(assert (x558 x673))
(assert (= (or x165 x134) x602))
(assert (x558 x222))
(assert (x558 x704))
(assert (=> (>= 10000 x240) (= (x265 x240) 0)))
(assert (x558 x263))
(assert (not (x132 (x521 64 x700 93505503590744673808321018039237703620848625446120597023077546950189643103747))))
(assert (= (x727 (x521 64 x393 93505503590744673808321018039237703620848625446120597023077546950189643103747)) x393))
(assert (= (x265 x656) (x265 (+ x656 1))))
(assert (x558 x97))
(assert (x558 x633))
(assert (x132 99159083378869749887603094490482246568362853213590331502974839740719474624768))
(assert (=> (<= x614 10000) (= (x265 x614) 0)))
(assert (x558 x421))
(assert (x558 x537))
(assert (x558 x12))
(assert (=> (>= 10000 x597) (= (x265 x597) 0)))
(assert (x558 x266))
(assert (= true x166))
(assert (= (or x657 x723) x738))
(assert (= (=> (and (and (= x395 x716) (= 0 x709) (= (x190 (- x176 x603)) x224) (= x11 x371) (= x44 x11) (= x703 1000000000000000000000000000) (= true x750) (= 1000000000000000000000000000 x616) (not (< x176 x224)) (= x676 false) (= x15 x303) (= x316 x303) (= x11 x300) (= 1000000000000000000000000000 x203) (= (- 1000000000000000000000000000 x332) x371) (= false x496) (= 1 x131) (= x237 (* x316 1000000000000000000000000000))) (and (and (= x491 (div x237 x44)) (<= 0 x491) (<= x491 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (and (or (and x77 (= x377 x460)) (and (not x77) (and (= x377 (+ x460 1)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x460)))) (and (= x563 1) (= x77 (= 0 (ite (< 0 (mod (* 1000000000000000000000000000 x15) x371)) 1 0))) (= x460 x491))))) x580) x324))
(assert (x558 x49))
(assert (x558 x95))
(assert (= 0 (x265 57896044618658097711785492504343953926634992332820282019728792003956)))
(assert (x558 x88))
(assert (x558 x466))
(assert (= (or x160 x508) x617))
(assert true)
(assert (x558 x224))
(assert (x558 x249))
(assert (x558 x719))
(assert (x558 x299))
(assert (= 64 (x268 (x521 64 x700 93505503590744673808321018039237703620848625446120597023077546950189643103747))))
(assert (x558 x548))
(assert (= (x265 93505503590744673808321018039237703620848625446120597023077546950189643103744) 0))
(assert (= x374 (or x545 x651)))
(assert (=> (= x342 0) (= (div x392 x342) 0)))
(assert (x558 x122))
(assert (x558 x563))
(assert (x558 x368))
(assert (x558 x659))
(assert (x558 x402))
(assert (= (=> (and (and (and (= (div x246 x302) x609) (<= x609 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x609 0)) (and (or (and (and (<= x119 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= x204 (+ 1 x119))) (not x493)) (and x493 (= x204 x119))) (and (= 1 x12) (= x493 (= (ite (> (mod (* 1000000000000000000000000000 x91) x613) 0) 1 0) 0)) (= x609 x119)))) (and (= x35 true) (= (x190 (- x370 x129)) x613) (= x589 false) (= x716 x163) (= x539 0) (= x246 (* 1000000000000000000000000000 x157)) (= x86 x255) (= x302 x255) (= x644 1000000000000000000000000000) (= x157 x472) (<= 1 x613) (= x613 x255) (= false x488) (= 1 x588) (= x472 x91) (= x89 1000000000000000000000000000) (= x151 1000000000000000000000000000) (not (< x370 x613)))) x680) x294))
(assert (x558 x384))
(assert (x558 x14))
(assert (x558 x145))
(assert (x558 x664))
(assert (x558 x205))
(assert (= x240 (x727 (x521 64 x240 x1))))
(assert (x558 x110))
(assert (not (x132 (x521 64 x240 x158))))
(assert (x558 x432))
(assert (x558 x661))
(assert (x558 x153))
(assert (x558 x159))
(assert (x558 x607))
(assert (=> (<= x393 10000) (= (x265 x393) 0)))
(assert (x558 x601))
(assert (= 64 (x268 (x521 64 x597 x172))))
(assert (= x328 (and x595 x498)))
(assert (x558 x65))
(assert (= x426 (=> (and (and (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x367) (= x367 (div x629 x244)) (<= 0 x367)) (and (and (= (= 0 (ite (< 0 (mod (* 1000000000000000000000000000 x317) x305)) 1 0)) x54) (= x367 x218) (= x546 1)) (or (and (= x218 x129) x54) (and (and (= (+ 1 x218) x129) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x218)) (not x54))))) (and (= x305 (- 1000000000000000000000000000 x681)) (= x448 true) (= x716 x358) (= x171 x305) (= x139 1000000000000000000000000000) (= x118 x434) (= x536 false) (= x740 1000000000000000000000000000) (= (* x434 1000000000000000000000000000) x629) (= x171 x244) (= false x365) (= x687 x171) (not (< x384 x91)) (= x506 1000000000000000000000000000) (= 1 x562) (= x118 x317) (= (x190 (- x384 x734)) x91) (= 0 x408))) x294)))
(assert (= (and (not x54) x76) x134))
(assert (x558 x458))
(assert (x558 x489))
(assert (=> (= 0 x308) (= (div x447 x308) 0)))
(assert (= x1 (x383 (x521 64 x240 x1))))
(assert (x558 x290))
(assert (< 10000 (x521 64 x240 x158)))
(assert (x558 x264))
(assert (x558 x356))
(assert (= x18 (or x32 x61)))
(assert (= (x265 (+ x403 x313)) (x265 x313)))
(assert (x558 x700))
(assert (= (=> (and (and (and (= x20 x474) (= x249 x20)) (= (div x170 1000000000000000000000000000) x474)) (and (= x48 1000000000000000000000000000) (= x146 0) (= x170 (* x551 x211)) (= true x277) (= x547 x697) (= x397 x211) (= x697 x551) (= 1000000000000000000000000000 x538) (>= x170 0) (= x397 x40) (= x25 x441) (= x275 1000000000000000000000000000) (= x150 false) (= false x509) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935999999999999999999999999999 x170))) x559) x490))
(assert (= (x265 (x521 64 x597 x172)) (x521 64 x597 x172)))
(assert (= (x265 69765223551147701335118770550544272781148754634833107235959950171031635755008) 0))
(assert (= (x265 (+ 1 x449)) (x265 x449)))
(assert (x558 x524))
(assert (> (x521 64 x597 x172) 10000))
(assert (x558 x420))
(assert (x558 x200))
(assert (=> (= 0 x302) (= (div x246 x302) 0)))
(assert (< (x521 64 x240 x158) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (and (not x746) x579) x32))
(assert (= (x265 57896044618658097711785492504343953926634992332820282019728792003956564819967) 0))
(assert (= 0 (x265 2698376601)))
(assert (x132 93505503590744673808321018039237703620848625446120597023077546950189643103744))
(assert (x558 x128))
(assert (> (x521 64 x240 x1) 10000))
(assert (x558 x85))
(assert (x132 27147089433500079299458733913583343397174134070558226512927488251900645605376))
(assert (= (x521 64 x700 93505503590744673808321018039237703620848625446120597023077546950189643103747) (x265 (x521 64 x700 93505503590744673808321018039237703620848625446120597023077546950189643103747))))
(assert (x558 x484))
(assert (= (and (not x226) x166) x590))
(assert (x558 x486))
(assert (= (and x374 (not x77)) x723))
(assert (x558 x119))
(assert (=> (>= 10000 x463) (= 0 (x265 x463))))
(assert (= 64 (x268 (x521 64 x597 x87))))
(assert (x558 x6))
(assert (= (x265 1000000000) 0))
(assert (x132 999999999999999999999999999))
(assert (x558 x15))
(assert (x558 x332))
(assert (x558 x141))
(assert (x558 x154))
(assert (x558 x301))
(assert (=> (>= 10000 x281) (= (x265 x281) 0)))
(assert (x558 x280))
(assert (x558 x520))
(assert (x558 x694))
(assert (x558 x20))
(assert (= (x268 (x419 32 93505503590744673808321018039237703620848625446120597023077546950189643103744)) 32))
(assert (x558 x540))
(assert (x558 x203))
(assert (x558 x638))
(assert (x558 x345))
(assert (x558 x677))
(assert (= (and (not x433) x354) x508))
(assert (x558 x648))
(assert (x558 x699))
(assert (= (x265 57896044618658097711785492504343953926634992332820282019728792003956000000000) 0))
(assert (= (x265 1006941511) 0))
(assert (x558 x647))
(assert (= x596 (=> (and (and (>= 1461501637330902918203684832716283019655932542975 x361) (= x636 x13) (<= 1 x25) (<= 0 x45) (= x505 (> (x425 x52) 0)) (>= x716 1) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x396) (not (= x260 x614)) (>= x80 0) (= x626 (> (x425 x463) 0)) (<= 0 x418) (<= x295 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (= x463 x614)) (= x510 x660) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x241) (>= 1461501637330902918203684832716283019655932542975 x260) (<= x80 1461501637330902918203684832716283019655932542975) (not (= x400 x716)) (not (= x260 x716)) (not (= x716 x25)) (>= 1461501637330902918203684832716283019655932542975 x330) (>= 1461501637330902918203684832716283019655932542975 x658) (not (= x260 x400)) (not (= x463 x716)) (= x271 (> (x425 x260) 0)) (= x135 (> (x425 x614) 0)) x269 (>= 1461501637330902918203684832716283019655932542975 x229) (<= x45 1461501637330902918203684832716283019655932542975) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x418) (<= x463 1461501637330902918203684832716283019655932542975) (not (= x716 x52)) (<= x373 1461501637330902918203684832716283019655932542975) (>= x660 0) (not (= x614 x52)) (>= x112 0) (>= 1461501637330902918203684832716283019655932542975 x614) (>= 1461501637330902918203684832716283019655932542975 x205) (>= 1461501637330902918203684832716283019655932542975 x25) (>= 1461501637330902918203684832716283019655932542975 x608) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x112) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x453) (not (= x260 x463)) (>= 255 x13) (>= x52 1) (>= x453 0) (<= x145 1461501637330902918203684832716283019655932542975) (not (= x614 x716)) x505 (>= 1461501637330902918203684832716283019655932542975 x732) (>= 1461501637330902918203684832716283019655932542975 x138) x201 x353 (= (< 0 (x425 x25)) x269) (<= 1 x614) (not (= x25 x52)) (>= 1461501637330902918203684832716283019655932542975 x71) x271 (>= x640 0) (>= x400 1) (= 68 x500) (<= x334 1461501637330902918203684832716283019655932542975) (<= x280 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x660) (not (= x52 x400)) (>= 1461501637330902918203684832716283019655932542975 x716) (not (= x400 x463)) (<= x689 255) (<= 1 x463) (>= 1461501637330902918203684832716283019655932542975 x315) (= x353 (> (x425 x716) 0)) (<= 0 x13) (not (= x463 x52)) (>= 1461501637330902918203684832716283019655932542975 x640) (not (= x25 x614)) (not (= x260 x25)) (>= x260 1) (>= x295 0) (>= 1461501637330902918203684832716283019655932542975 x52) (= (> (x425 x400) 0) x201) (>= x241 0) (not (= x400 x614)) (>= x396 0) x626 x135 (not (= x400 x25)) (not (= x463 x25)) (not (= x260 x52)) (<= x400 1461501637330902918203684832716283019655932542975) (<= x659 255) (= x34 0)) (and (= x393 x636) (and (and (= x241 x428) (and (and (>= 127 x507) (= x232 (x182 x108)) (= x600 x393) (<= 1 x177) (= false x136) (= 2698376601 x469) (= x240 x187) (= x197 x537) (<= x507 127) (= x197 (x287 x716)) (= x177 (x425 x716)) (= x108 x45) (= (= x393 0) x226) (= false x252)) (or (and (and (>= x71 1) (= (= 1 x393) x685) x685 (= x550 x553) (= x15 x550) (= x497 x549) (= x357 x714) (= x357 x71) (= x549 x432) (<= x71 1461501637330902918203684832716283019655932542975)) (not x226)) (and x226 (and (<= x373 1461501637330902918203684832716283019655932542975) (= x432 x290) (= x417 x15) (<= 1 x373) (= x714 x373)))))) (and (= false x571) (= x510 x240))))) x479)))
(assert (x558 x108))
(assert (x558 x91))
(assert (x558 x587))
(assert (= x158 (x383 (x521 64 x240 x158))))
(assert (x558 x329))
(assert (x558 x274))
(assert (x558 x610))
(assert (x558 x669))
(assert (= (=> (and (and (< x700 x299) (>= 20282409603651670423947251286015 x554) (= x113 (x419 32 93505503590744673808321018039237703620848625446120597023077546950189643103744)) (= (+ x113 x257) x30) (= x312 (= x554 0)) (= (* 4 x700) x257) (= x179 93505503590744673808321018039237703620848625446120597023077546950189643103744) (= (x533 x30) x554)) (or (and (= (ite x312 1 0) x416) x312) (and (not x312) (and (<= x567 281474976710655) (= (ite (= x489 x567) 1 0) x416) (= x567 (x38 x30)))))) x247) x682))
(assert (= (and x542 x617) x292))
(assert (= (=> (and (= (x436 x690) x85) (= (x521 64 x700 93505503590744673808321018039237703620848625446120597023077546950189643103747) x172) (= x329 (x248 288)) (= x215 (x425 x614)) (= false x193) (= x74 68) (= x459 false) (= x591 x199) (= x283 x31) (= x120 (x343 160)) (= x153 (x655 x114)) (= (x343 160) x618) (= x690 (+ 1 x656)) (= x110 x614) (= false x429) (= (x248 256) x43) (= x270 false) (= 93505503590744673808321018039237703620848625446120597023077546950189643103744 x263) (= false x630) (= 36 x648) (= x656 (x521 64 x597 x87)) (= (x343 128) x159) (= 27147089433500079299458733913583343397174134070558226512927488251900645605376 x625) (<= x637 127) (= (= x40 0) x60) (>= x215 1) (= 320 x604) (= x601 256) (= 69765223551147701335118770550544272781148754634833107235959950171031635755008 x642) (= x66 x722) (>= x88 1) (= x128 4) (= 2741520759 x458) (<= x185 57896044618658097711785492504343953926634992332820282019728792003956) (= x610 73911253449526342377211119353630508932289385467876046976689682728070827474944) (= (x521 64 x700 93505503590744673808321018039237703620848625446120597023077546950189643103747) x87) (<= x444 127) (>= 127 x67) (>= 127 x67) (= (* x185 1000000000) x199) (>= 1461501637330902918203684832716283019655932542975 x110) (= x243 27) (= x256 false) (= false x413) (= x446 128) (= false x684) (<= 1 x110) (= x566 x66) (= 93505503590744673808321018039237703620848625446120597023077546950189643103744 x98) (= (x523 224) x185) (= x556 1006941511) (= x747 224) (= x578 false) (<= x637 127) (= 18 x525) (= false x415) (<= x444 127) (= (x521 64 x597 x172) x114) (= x423 (x425 x25)) (= x725 2587735963) (>= x423 1) (= (x425 x25) x88) (= x291 99159083378869749887603094490482246568362853213590331502974839740719474624768) (= (x343 128) x669)) (and (=> (and (= x704 0) x60) x682) (=> (not x60) x9))) x355))
(assert (x558 x31))
(assert (x558 x317))
(assert (x558 x279))
(assert (x558 x600))
(assert (x558 x291))
(assert (=> (<= x700 10000) (= 0 (x265 x700))))
(assert (x558 x531))
(assert (x558 x460))
(assert (x558 x40))
(assert (=> (= x244 0) (= (div x629 x244) 0)))
(assert (x558 x121))
(assert (x132 69765223551147701335118770550544272781148754634833107235959950171031635755008))
(assert (x558 x511))
(assert (x558 x267))
(assert (x558 x167))
(assert (= (=> (and (or (and (= x122 (ite x442 1 0)) x442) (and (and (= x180 (x38 x594)) (<= x180 281474976710655) (= x122 (ite (= x180 x428) 1 0))) (not x442))) (and (= (= x661 0) x442) (= (x419 32 93505503590744673808321018039237703620848625446120597023077546950189643103744) x707) (= (x533 x594) x661) (= 93505503590744673808321018039237703620848625446120597023077546950189643103744 x583) (= (* 4 x393) x5) (= (+ x5 x707) x594) (<= x661 20282409603651670423947251286015) (>= x299 1) (> x299 x393))) x439) x559))
(assert (x558 x215))
(assert (x558 x46))
(assert (x558 x437))
(assert (x558 x161))
(assert (x558 x619))
(assert (x558 x525))
(assert (x558 x282))
(assert (x558 x549))
(assert (x558 x467))
(assert (= 64 (x268 (x521 64 x240 x1))))
(assert (x558 x184))
(assert (= (x265 (x521 64 x240 x158)) (x521 64 x240 x158)))
(assert (x558 x129))
(assert (x558 x178))
(assert (= 93505503590744673808321018039237703620848625446120597023077546950189643103747 (x383 (x521 64 x393 93505503590744673808321018039237703620848625446120597023077546950189643103747))))
(assert (x558 x104))
(assert (x558 x212))
(assert (< (x521 64 x597 x87) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (x521 64 x597 x87) (x265 (x521 64 x597 x87))))
(assert (x558 x123))
(assert (x558 x567))
(assert (x558 x588))
(assert (=> (>= 10000 x108) (= 0 (x265 x108))))
(assert (x132 2698376601))
(assert (x558 x25))
(assert (x558 x305))
(assert (x558 x428))
(assert (x558 x614))
(assert (= (or x513 x245) x579))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x521 64 x597 x172)))
(assert (not (x132 (x521 64 x597 x87))))
(assert (x558 x131))
(assert (x558 x66))
(assert (x558 x463))
(assert (< (x521 64 x240 x1) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x558 x506))
(assert (= x61 (and x746 x579)))
(assert (= (or x708 x24) x457))
(assert (= (x265 x477) (x265 (+ x477 x154))))
(assert (x132 93505503590744673808321018039237703620848625446120597023077546950189643103747))
(assert (x558 x400))
(assert (x558 x688))
(assert (x558 x28))
(assert (x558 x611))
(assert (x558 x608))
(assert (x558 x492))
(assert (= x172 (x383 (x521 64 x597 x172))))
(assert (= (=> (and (and (= x435 1000000000000000000000000000) (= 0 x528) (= x19 false) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819966999999999999999999999999999 x635) (= x175 false) (= x478 false) (<= x677 281474976710655) (= x321 x297) (= x233 (+ x154 x477)) (= 0 x650) (<= 1 x591) (= (x419 32 93505503590744673808321018039237703620848625446120597023077546950189643103744) x477) (= x49 x123) (= 0 x741) (>= x635 0) (= x123 (x190 (- x489 x677))) (>= 20282409603651670423947251286015 x301) (= x103 (= x416 0)) (= (* x297 x73) x635) (not (> x123 x489)) (= x715 x524) (= true x652) (= x68 (+ x301 x741)) (= x251 x524) (= x37 x716) (= (x38 x30) x677) (<= x251 57896044618658097711785492504343953926634992332820282019728792003956564819967) (= x698 (x516 320)) (= x543 0) (>= x251 0) (= 0 x464) (= x321 x317) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x43 x591)) (= 1000000000000000000000000000 x414) (< x700 x299) (= x715 x73) (= x301 (x695 x233)) (= (* x591 x43) x251) (= x679 false) (<= x43 57896044618658097711785492504343953926634992332820282019728792003956564819967) (not x103) (= x154 (* x700 4)) (<= x591 57896044618658097711785492504343953926634992332820282019728792003956000000000) (= 1000000000000000000000000000 x276)) (and (= (div x635 1000000000000000000000000000) x646) (and (and (= x406 x501) (= x475 x337) (<= 1 x475) (= x481 x557) (= x308 x406) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x475) (= x22 1000000000000000000000000000) (= false x195) (= (* x698 x329) x475) (= false x304) (= x584 1000000000000000000000000000) (< (* x329 x698) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x734 x557) (= x514 0) (= x716 x364) (= x337 x406) (= x447 (* 1000000000000000000000000000 x481)) (= x734 x646) (= true x399)) (and (and (= x721 (div x447 x308)) (>= x721 0) (>= 999999999999999999999999999 x721)) (and (and (and (and (= x544 x568) (= x595 (= (ite (< 0 (mod (* x370 x309) 1000000000000000000000000000)) 1 0) 0)) (= x683 1)) (or (and (not x595) (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x568) (= x384 (+ 1 x568)))) (and (= x384 x568) x595))) (= (div x8 1000000000000000000000000000) x544)) (and (= x681 (ite (> x72 x437) x437 x72)) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x456) (= x23 false) (= x456 (* x329 x698)) (= x485 1000000000000000000000000000) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935999999999999999999999999999 x8) (= x309 x526) (= x92 x273) (= x121 x721) (= x724 1000000000000000000000000000) (= 1000000000000000000000000000 x662) (<= 0 x8) (= (* x92 x55) x8) (<= x681 999999999999999999999999999) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x329 x698)) (= x456 x309) (= x72 (x728 (+ (mod (- 1000000000000000000000000000 x121) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x552))) (= x188 1) (= x737 1000000000000000000000000000) (= x430 0) (= x79 x716) (= x575 false) (= x370 x273) (not (< x72 x552)) (= x56 true) (>= x456 0) (= x55 x526))))))) x426) x247))
(assert (x558 x243))
(assert (x558 x631))
(assert (x558 x5))
(assert (x558 x152))
(assert (x558 x388))
(assert (x558 x188))
(assert (x132 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (x558 x581))
(assert (x558 x138))
(assert (x558 x446))
(assert (x558 x187))
(assert (x558 x281))
(assert (x558 x737))
(assert (= (x727 (x521 64 x240 x158)) x240))
(assert (x558 x283))
(assert (x558 x681))
(assert (not (x132 (x419 32 93505503590744673808321018039237703620848625446120597023077546950189643103744))))
(assert (= 93505503590744673808321018039237703620848625446120597023077546950189643103747 (x383 (x521 64 x700 93505503590744673808321018039237703620848625446120597023077546950189643103747))))
(assert (= (and x452 (not x312)) x654))
(assert (x558 x218))
(assert (x558 x177))
(assert (x558 x59))
(assert (x558 x625))
(assert (x558 x326))
(assert (x558 x593))
(assert (> (x521 64 x700 93505503590744673808321018039237703620848625446120597023077546950189643103747) 10000))
(assert (x558 x235))
(assert (x558 x618))
(assert (x558 x683))
(assert (=> (= x504 0) (= (div x560 x504) 0)))
(assert (x558 x372))
(assert (= x189 (and x617 (not x542))))
(assert (= x573 (or x90 x468)))
(assert (=> (<= x400 10000) (= 0 (x265 x400))))
(assert (= 0 (x265 999999999999999999999999999)))
(assert (x558 x337))
(assert (x558 x597))
(assert (x558 x409))
(assert (x558 x315))
(assert (= x254 (=> (and (= x607 x599) (= x736 false) (= x210 false) (= x347 (= x349 x599)) (= false x26) (= x144 false)) x347)))
(assert (= x354 (or x196 x712)))
(assert (x558 x732))
(assert (= (x265 (x419 32 93505503590744673808321018039237703620848625446120597023077546950189643103744)) (x419 32 93505503590744673808321018039237703620848625446120597023077546950189643103744)))
(assert (not x596))
(assert (x558 x554))
(assert (= 0 (x265 27147089433500079299458733913583343397174134070558226512927488251900645605376)))
(assert (x558 x377))
(assert (= x680 (=> (and (or (and (= x402 x607) (not x746)) (and x746 (= (+ x402 1) x607))) (and (= (< 0 (mod x204 1000000000000000000000000000)) x746) (= x402 (div x204 1000000000000000000000000000)))) x254)))
(assert (x558 x341))
(assert (x558 x634))
(assert (x558 x179))
(assert (x558 x663))
(assert (x558 x562))
(assert (x558 x529))
(assert (x558 x370))
(assert (x558 x120))
(assert (x558 x334))
(assert (= (x265 1000000000000000000000000000) 0))
(assert (= (x268 (x521 64 x240 x158)) 64))
(assert (x558 x480))
(assert (x558 x541))
(assert (x558 x67))
(assert (x558 x722))
(assert (x558 x556))
(assert (= (and x363 x111) x24))
(assert (x558 x64))
(assert (= x651 (and (not x239) x573)))
(assert (x558 x309))
(assert (x558 x126))
(assert (x558 x568))
(assert (x558 x431))
(assert (= (x265 (x521 64 x393 93505503590744673808321018039237703620848625446120597023077546950189643103747)) (x521 64 x393 93505503590744673808321018039237703620848625446120597023077546950189643103747)))
(assert (x558 x412))
(assert (=> (<= x260 10000) (= (x265 x260) 0)))
(check-sat)
(exit)
