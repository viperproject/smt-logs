(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Certora
Generated on: 2024-04-10
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x568 () Bool)
(declare-fun x125 () Bool)
(declare-fun x76 () Bool)
(declare-fun x111 () Int)
(declare-fun x307 () Int)
(declare-fun x738 () Int)
(declare-fun x667 () Int)
(declare-fun x874 () Bool)
(declare-fun x34 () Int)
(declare-fun x879 () Int)
(declare-fun x638 () Int)
(declare-fun x546 () Int)
(declare-fun x613 () Int)
(declare-fun x772 () Int)
(declare-fun x14 () Int)
(declare-fun x347 () Int)
(declare-fun x969 () Bool)
(declare-fun x598 () Int)
(declare-fun x821 () Int)
(declare-fun x467 () Int)
(declare-fun x718 () Int)
(declare-fun x497 () Int)
(declare-fun x184 () Int)
(declare-fun x294 () Int)
(declare-fun x410 () Int)
(declare-fun x349 () Bool)
(declare-fun x92 () Int)
(declare-fun x211 () Bool)
(declare-fun x755 (Int) Int)
(declare-fun x10 () Int)
(declare-fun x328 () Int)
(declare-fun x112 () Int)
(declare-fun x658 () Bool)
(declare-fun x424 () Bool)
(declare-fun x558 () Int)
(declare-fun x417 () Bool)
(declare-fun x823 () Bool)
(declare-fun x763 () Int)
(declare-fun x55 () Bool)
(declare-fun x973 () Int)
(declare-fun x304 () Int)
(declare-fun x882 () Int)
(declare-fun x465 () Int)
(declare-fun x893 () Int)
(declare-fun x165 () Bool)
(declare-fun x244 () Int)
(declare-fun x958 () Int)
(declare-fun x397 () Int)
(declare-fun x901 () Bool)
(declare-fun x646 () Int)
(declare-fun x662 () Int)
(declare-fun x210 () Bool)
(declare-fun x323 () Int)
(declare-fun x752 () Bool)
(declare-fun x928 () Int)
(declare-fun x487 () Int)
(declare-fun x697 () Int)
(declare-fun x169 () Bool)
(declare-fun x340 () Int)
(declare-fun x167 () Bool)
(declare-fun x756 () Bool)
(declare-fun x995 () Int)
(declare-fun x89 () Bool)
(declare-fun x442 () Bool)
(declare-fun x308 () Bool)
(declare-fun x596 () Int)
(declare-fun x854 () Int)
(declare-fun x129 () Int)
(declare-fun x850 () Bool)
(declare-fun x435 () Int)
(declare-fun x641 () Bool)
(declare-fun x974 () Int)
(declare-fun x181 () Int)
(declare-fun x862 () Bool)
(declare-fun x690 () Int)
(declare-fun x542 () Int)
(declare-fun x168 () Bool)
(declare-fun x106 () Bool)
(declare-fun x498 () Bool)
(declare-fun x566 () Int)
(declare-fun x571 () Bool)
(declare-fun x136 () Bool)
(declare-fun x832 () Int)
(declare-fun x355 () Int)
(declare-fun x174 () Bool)
(declare-fun x880 () Int)
(declare-fun x218 () Bool)
(declare-fun x359 () Bool)
(declare-fun x915 () Int)
(declare-fun x760 () Int)
(declare-fun x674 () Int)
(declare-fun x689 () Int)
(declare-fun x483 () Int)
(declare-fun x40 () Int)
(declare-fun x520 () Int)
(declare-fun x833 () Int)
(declare-fun x1005 () Int)
(declare-fun x311 () Int)
(declare-fun x144 () Int)
(declare-fun x587 () Int)
(declare-fun x681 () Int)
(declare-fun x87 () Int)
(declare-fun x687 () Int)
(declare-fun x639 () Int)
(declare-fun x522 (Int) Int)
(declare-fun x930 () Int)
(declare-fun x365 () Int)
(declare-fun x98 () Int)
(declare-fun x549 () Int)
(declare-fun x842 () Bool)
(declare-fun x802 () Bool)
(declare-fun x142 () Int)
(declare-fun x272 () Bool)
(declare-fun x953 () Int)
(declare-fun x792 () Int)
(declare-fun x983 () Int)
(declare-fun x921 () Int)
(declare-fun x449 () Int)
(declare-fun x649 () Bool)
(declare-fun x275 () Int)
(declare-fun x902 () Int)
(declare-fun x778 () Bool)
(declare-fun x500 () Int)
(declare-fun x539 () Bool)
(declare-fun x186 () Int)
(declare-fun x209 () Int)
(declare-fun x336 () Int)
(declare-fun x286 () Int)
(declare-fun x80 () Int)
(declare-fun x283 () Bool)
(declare-fun x875 () Bool)
(declare-fun x194 () Bool)
(declare-fun x748 () Int)
(declare-fun x358 () Bool)
(declare-fun x409 () Int)
(declare-fun x846 () Int)
(declare-fun x346 () Bool)
(declare-fun x506 () Int)
(declare-fun x239 () Int)
(declare-fun x330 () Int)
(declare-fun x826 () Int)
(declare-fun x753 () Int)
(declare-fun x119 () Int)
(declare-fun x916 () Bool)
(declare-fun x230 () Int)
(declare-fun x377 () Int)
(declare-fun x819 () Bool)
(declare-fun x796 () Int)
(declare-fun x7 () Int)
(declare-fun x384 () Bool)
(declare-fun x298 () Int)
(declare-fun x293 () Int)
(declare-fun x479 () Int)
(declare-fun x94 () Int)
(declare-fun x537 () Int)
(declare-fun x158 () Int)
(declare-fun x100 () Int)
(declare-fun x489 () Bool)
(declare-fun x273 () Bool)
(declare-fun x170 () Int)
(declare-fun x559 () Int)
(declare-fun x624 () Int)
(declare-fun x508 () Int)
(declare-fun x350 () Int)
(declare-fun x492 () Int)
(declare-fun x280 () Int)
(declare-fun x680 () Int)
(declare-fun x402 () Int)
(declare-fun x113 () Bool)
(declare-fun x486 () Bool)
(declare-fun x77 () Int)
(declare-fun x945 () Int)
(declare-fun x473 () Int)
(declare-fun x46 () Int)
(declare-fun x889 () Int)
(declare-fun x920 () Int)
(declare-fun x513 () Int)
(declare-fun x703 () Int)
(declare-fun x761 () Bool)
(declare-fun x827 () Bool)
(declare-fun x868 () Int)
(declare-fun x563 () Int)
(declare-fun x270 (Int Int) Int)
(declare-fun x135 () Bool)
(declare-fun x192 () Int)
(declare-fun x68 () Int)
(declare-fun x121 () Bool)
(declare-fun x621 () Int)
(declare-fun x501 () Int)
(declare-fun x189 () Int)
(declare-fun x203 () Int)
(declare-fun x989 () Int)
(declare-fun x635 () Int)
(declare-fun x956 () Bool)
(declare-fun x342 () Int)
(declare-fun x724 () Bool)
(declare-fun x364 () Int)
(declare-fun x400 () Int)
(declare-fun x632 () Bool)
(declare-fun x291 () Int)
(declare-fun x35 () Int)
(declare-fun x401 () Bool)
(declare-fun x963 () Int)
(declare-fun x948 () Int)
(declare-fun x804 () Bool)
(declare-fun x130 () Bool)
(declare-fun x496 () Int)
(declare-fun x527 () Int)
(declare-fun x221 () Bool)
(declare-fun x229 () Int)
(declare-fun x387 () Int)
(declare-fun x653 () Int)
(declare-fun x813 () Int)
(declare-fun x185 () Int)
(declare-fun x457 () Int)
(declare-fun x223 () Int)
(declare-fun x601 () Int)
(declare-fun x362 () Int)
(declare-fun x215 () Bool)
(declare-fun x374 () Int)
(declare-fun x440 () Int)
(declare-fun x843 () Int)
(declare-fun x762 () Bool)
(declare-fun x795 () Int)
(declare-fun x245 () Int)
(declare-fun x6 () Bool)
(declare-fun x705 () Bool)
(declare-fun x655 () Bool)
(declare-fun x934 () Int)
(declare-fun x959 (Int) Int)
(declare-fun x694 () Int)
(declare-fun x252 () Int)
(declare-fun x727 () Int)
(declare-fun x771 () Int)
(declare-fun x897 () Int)
(declare-fun x507 () Bool)
(declare-fun x451 () Int)
(declare-fun x940 () Bool)
(declare-fun x899 () Int)
(declare-fun x861 () Int)
(declare-fun x52 () Int)
(declare-fun x835 () Bool)
(declare-fun x731 () Int)
(declare-fun x102 () Int)
(declare-fun x990 () Int)
(declare-fun x145 () Bool)
(declare-fun x538 () Bool)
(declare-fun x656 () Int)
(declare-fun x279 () Int)
(declare-fun x627 () Int)
(declare-fun x968 () Int)
(declare-fun x597 () Int)
(declare-fun x421 () Int)
(declare-fun x979 () Bool)
(declare-fun x1008 () Bool)
(declare-fun x791 () Int)
(declare-fun x830 () Int)
(declare-fun x957 () Int)
(declare-fun x166 () Int)
(declare-fun x706 () Int)
(declare-fun x555 () Int)
(declare-fun x514 (Int) Bool)
(declare-fun x385 () Int)
(declare-fun x246 () Int)
(declare-fun x60 () Bool)
(declare-fun x23 () Int)
(declare-fun x863 () Bool)
(declare-fun x740 () Int)
(declare-fun x90 () Int)
(declare-fun x855 () Bool)
(declare-fun x187 () Int)
(declare-fun x393 () Int)
(declare-fun x954 () Bool)
(declare-fun x793 () Int)
(declare-fun x66 () Int)
(declare-fun x429 () Int)
(declare-fun x614 () Int)
(declare-fun x471 () Int)
(declare-fun x588 () Int)
(declare-fun x678 () Int)
(declare-fun x134 () Bool)
(declare-fun x717 () Int)
(declare-fun x217 () Int)
(declare-fun x235 () Bool)
(declare-fun x107 () Bool)
(declare-fun x73 (Int Int) Int)
(declare-fun x138 () Int)
(declare-fun x938 () Int)
(declare-fun x381 () Int)
(declare-fun x32 () Int)
(declare-fun x33 () Int)
(declare-fun x757 () Int)
(declare-fun x51 () Int)
(declare-fun x891 () Int)
(declare-fun x256 () Int)
(declare-fun x468 () Int)
(declare-fun x612 () Int)
(declare-fun x86 () Int)
(declare-fun x345 () Int)
(declare-fun x237 () Int)
(declare-fun x904 () Int)
(declare-fun x570 () Int)
(declare-fun x78 () Bool)
(declare-fun x458 () Int)
(declare-fun x16 () Int)
(declare-fun x779 () Int)
(declare-fun x716 () Int)
(declare-fun x906 () Int)
(declare-fun x207 () Bool)
(declare-fun x943 () Int)
(declare-fun x177 () Int)
(declare-fun x787 () Int)
(declare-fun x219 () Int)
(declare-fun x231 () Int)
(declare-fun x339 () Int)
(declare-fun x456 () Int)
(declare-fun x464 () Int)
(declare-fun x204 () Bool)
(declare-fun x99 () Int)
(declare-fun x747 () Bool)
(declare-fun x12 () Int)
(declare-fun x482 () Int)
(declare-fun x659 () Int)
(declare-fun x224 () Int)
(declare-fun x222 () Bool)
(declare-fun x480 () Bool)
(declare-fun x551 () Int)
(declare-fun x331 () Int)
(declare-fun x564 () Int)
(declare-fun x150 () Bool)
(declare-fun x941 () Int)
(declare-fun x202 () Int)
(declare-fun x234 () Int)
(declare-fun x436 () Bool)
(declare-fun x484 () Int)
(declare-fun x257 () Bool)
(declare-fun x789 () Bool)
(declare-fun x110 () Int)
(declare-fun x610 () Int)
(declare-fun x972 () Int)
(declare-fun x847 () Int)
(declare-fun x72 () Int)
(declare-fun x178 () Int)
(declare-fun x723 () Bool)
(declare-fun x155 () Bool)
(declare-fun x74 () Int)
(declare-fun x368 () Int)
(declare-fun x808 () Int)
(declare-fun x50 () Int)
(declare-fun x735 () Int)
(declare-fun x161 () Int)
(declare-fun x376 () Int)
(declare-fun x378 () Bool)
(declare-fun x929 () Bool)
(declare-fun x54 () Int)
(declare-fun x260 () Int)
(declare-fun x247 () Bool)
(declare-fun x888 () Bool)
(declare-fun x529 () Int)
(declare-fun x26 () Bool)
(declare-fun x876 () Int)
(declare-fun x636 () Bool)
(declare-fun x434 () Bool)
(declare-fun x248 () Int)
(declare-fun x582 () Bool)
(declare-fun x569 () Int)
(declare-fun x966 () Int)
(declare-fun x182 () Bool)
(declare-fun x431 () Int)
(declare-fun x159 () Int)
(declare-fun x541 () Int)
(declare-fun x284 () Int)
(declare-fun x58 () Int)
(declare-fun x225 () Bool)
(declare-fun x61 (Int) Int)
(declare-fun x886 () Int)
(declare-fun x309 () Bool)
(declare-fun x285 () Int)
(declare-fun x326 () Int)
(declare-fun x839 () Int)
(declare-fun x608 () Int)
(declare-fun x172 () Int)
(declare-fun x548 () Int)
(declare-fun x394 () Bool)
(declare-fun x829 () Int)
(declare-fun x343 () Int)
(declare-fun x766 () Bool)
(declare-fun x565 () Bool)
(declare-fun x491 () Int)
(declare-fun x373 () Bool)
(declare-fun x390 () Int)
(declare-fun x83 () Int)
(declare-fun x553 () Int)
(declare-fun x175 () Int)
(declare-fun x648 () Bool)
(declare-fun x732 () Int)
(declare-fun x743 () Bool)
(declare-fun x784 () Int)
(declare-fun x630 () Int)
(declare-fun x171 () Int)
(declare-fun x523 () Int)
(declare-fun x657 (Int) Int)
(declare-fun x518 () Int)
(declare-fun x691 () Int)
(declare-fun x64 () Int)
(declare-fun x297 () Int)
(declare-fun x611 () Int)
(declare-fun x361 () Int)
(declare-fun x604 () Int)
(declare-fun x650 () Int)
(declare-fun x79 () Int)
(declare-fun x53 () Int)
(declare-fun x137 () Bool)
(declare-fun x619 () Int)
(declare-fun x682 () Bool)
(declare-fun x15 () Int)
(declare-fun x985 () Int)
(declare-fun x710 () Int)
(declare-fun x403 () Int)
(declare-fun x250 () Int)
(declare-fun x386 (Int Int) Int)
(declare-fun x933 () Int)
(declare-fun x806 () Int)
(declare-fun x975 () Int)
(declare-fun x955 () Int)
(declare-fun x25 () Int)
(declare-fun x746 () Int)
(declare-fun x462 () Int)
(declare-fun x93 () Int)
(declare-fun x206 () Int)
(declare-fun x504 () Int)
(declare-fun x665 () Int)
(declare-fun x21 () Int)
(declare-fun x372 () Bool)
(declare-fun x629 () Int)
(declare-fun x881 () Int)
(declare-fun x188 () Int)
(declare-fun x132 () Bool)
(declare-fun x668 () Bool)
(declare-fun x698 () Int)
(declare-fun x967 () Bool)
(declare-fun x728 () Bool)
(declare-fun x917 () Int)
(declare-fun x70 () Bool)
(declare-fun x423 () Int)
(declare-fun x593 () Int)
(declare-fun x1000 () Int)
(declare-fun x878 () Bool)
(declare-fun x591 () Int)
(declare-fun x764 () Int)
(declare-fun x838 () Int)
(declare-fun x332 () Bool)
(declare-fun x965 () Int)
(declare-fun x466 () Bool)
(declare-fun x561 () Bool)
(declare-fun x900 () Bool)
(declare-fun x781 () Int)
(declare-fun x101 () Int)
(declare-fun x574 () Bool)
(declare-fun x532 () Int)
(declare-fun x584 () Bool)
(declare-fun x642 () Bool)
(declare-fun x39 () Int)
(declare-fun x205 () Int)
(declare-fun x528 () Int)
(declare-fun x623 () Int)
(declare-fun x589 () Int)
(declare-fun x290 () Int)
(declare-fun x939 () Int)
(declare-fun x42 () Bool)
(declare-fun x834 (Int) Int)
(declare-fun x422 () Bool)
(declare-fun x446 () Int)
(declare-fun x742 (Int Int) Int)
(declare-fun x57 () Int)
(declare-fun x980 () Bool)
(declare-fun x775 () Int)
(declare-fun x896 () Int)
(declare-fun x335 () Int)
(declare-fun x676 () Int)
(declare-fun x156 () Int)
(declare-fun x24 () Int)
(declare-fun x994 () Bool)
(declare-fun x176 () Int)
(declare-fun x88 () Int)
(declare-fun x103 () Int)
(declare-fun x258 () Int)
(declare-fun x277 () Bool)
(declare-fun x412 () Bool)
(declare-fun x282 () Int)
(declare-fun x49 () Int)
(declare-fun x578 () Int)
(declare-fun x576 () Int)
(declare-fun x922 () Int)
(declare-fun x29 () Int)
(declare-fun x536 () Int)
(declare-fun x960 () Bool)
(declare-fun x765 () Bool)
(declare-fun x1009 () Bool)
(declare-fun x987 () Int)
(declare-fun x1003 () Int)
(declare-fun x844 () Int)
(declare-fun x626 () Int)
(declare-fun x797 () Int)
(declare-fun x890 () Int)
(declare-fun x163 () Int)
(declare-fun x683 () Int)
(declare-fun x17 () Int)
(declare-fun x414 () Int)
(declare-fun x264 () Int)
(declare-fun x151 () Int)
(declare-fun x810 () Int)
(declare-fun x708 () Bool)
(declare-fun x912 () Int)
(declare-fun x773 () Int)
(declare-fun x301 () Int)
(declare-fun x981 () Int)
(declare-fun x351 () Int)
(declare-fun x615 () Int)
(declare-fun x749 () Int)
(declare-fun x759 () Int)
(declare-fun x122 () Bool)
(declare-fun x903 () Int)
(declare-fun x392 () Int)
(declare-fun x670 () Int)
(declare-fun x404 () Int)
(declare-fun x777 () Bool)
(declare-fun x918 () Int)
(declare-fun x63 () Int)
(declare-fun x645 () Int)
(declare-fun x992 () Bool)
(declare-fun x116 () Bool)
(declare-fun x238 () Bool)
(declare-fun x344 () Bool)
(declare-fun x803 () Int)
(declare-fun x278 () Bool)
(declare-fun x964 () Int)
(declare-fun x201 () Int)
(declare-fun x469 () Int)
(declare-fun x711 () Int)
(declare-fun x108 () Int)
(declare-fun x474 () Bool)
(declare-fun x857 () Int)
(declare-fun x814 () Int)
(declare-fun x146 () Int)
(declare-fun x837 () Int)
(declare-fun x337 () Int)
(declare-fun x59 () Bool)
(declare-fun x437 () Int)
(declare-fun x999 () Int)
(declare-fun x785 () Int)
(declare-fun x871 () Bool)
(declare-fun x65 () Bool)
(declare-fun x859 () Int)
(declare-fun x609 () Int)
(declare-fun x413 () Int)
(declare-fun x617 () Int)
(declare-fun x447 () Int)
(declare-fun x241 () Bool)
(declare-fun x22 () Int)
(declare-fun x993 () Int)
(declare-fun x341 () Int)
(declare-fun x481 () Int)
(declare-fun x552 () Bool)
(declare-fun x164 () Int)
(declare-fun x228 () Int)
(declare-fun x389 () Int)
(declare-fun x303 () Int)
(declare-fun x292 () Int)
(declare-fun x894 () Int)
(declare-fun x577 () Int)
(declare-fun x545 () Bool)
(declare-fun x696 () Int)
(declare-fun x594 () Int)
(declare-fun x550 () Bool)
(declare-fun x126 () Int)
(declare-fun x28 () Int)
(declare-fun x353 () Int)
(declare-fun x348 () Int)
(declare-fun x675 () Bool)
(declare-fun x790 () Int)
(declare-fun x533 () Int)
(declare-fun x455 () Bool)
(declare-fun x460 () Int)
(declare-fun x199 () Int)
(declare-fun x864 () Int)
(declare-fun x131 () Int)
(declare-fun x817 () Int)
(declare-fun x31 () Int)
(declare-fun x702 () Int)
(declare-fun x141 () Int)
(declare-fun x300 () Bool)
(declare-fun x242 () Int)
(declare-fun x887 () Bool)
(declare-fun x962 () Int)
(declare-fun x180 () Bool)
(declare-fun x892 () Int)
(declare-fun x432 () Int)
(declare-fun x157 () Bool)
(declare-fun x800 () Int)
(declare-fun x661 () Int)
(declare-fun x315 () Bool)
(declare-fun x595 () Int)
(declare-fun x363 () Int)
(declare-fun x996 () Bool)
(declare-fun x147 () Int)
(declare-fun x516 () Int)
(declare-fun x36 (Int Int) Int)
(declare-fun x534 () Int)
(declare-fun x325 () Int)
(declare-fun x951 () Bool)
(declare-fun x371 (Int Int) Int)
(declare-fun x699 () Bool)
(declare-fun x454 () Int)
(declare-fun x160 () Bool)
(declare-fun x314 () Int)
(declare-fun x430 () Bool)
(declare-fun x736 () Int)
(declare-fun x19 () Bool)
(declare-fun x379 () Int)
(declare-fun x360 () Int)
(declare-fun x971 () Int)
(declare-fun x525 () Bool)
(declare-fun x925 () Int)
(declare-fun x737 () Int)
(declare-fun x811 () Int)
(declare-fun x898 () Int)
(declare-fun x227 () Int)
(declare-fun x240 () Int)
(declare-fun x750 () Int)
(declare-fun x179 () Int)
(declare-fun x628 () Int)
(declare-fun x605 () Int)
(declare-fun x607 () Int)
(declare-fun x296 () Int)
(declare-fun x788 () Int)
(declare-fun x13 () Int)
(declare-fun x18 () Int)
(declare-fun x883 () Int)
(declare-fun x961 (Int) Int)
(declare-fun x288 () Int)
(declare-fun x281 () Int)
(declare-fun x807 () Int)
(declare-fun x193 () Int)
(declare-fun x67 () Int)
(declare-fun x535 () Int)
(declare-fun x908 () Int)
(declare-fun x647 () Bool)
(declare-fun x183 () Int)
(declare-fun x818 () Int)
(declare-fun x127 () Bool)
(declare-fun x405 () Int)
(declare-fun x38 () Int)
(declare-fun x196 () Int)
(declare-fun x707 () Int)
(declare-fun x852 () Int)
(declare-fun x416 () Int)
(declare-fun x418 () Int)
(declare-fun x334 () Bool)
(declare-fun x75 () Int)
(declare-fun x923 () Int)
(declare-fun x573 () Int)
(declare-fun x544 () Int)
(declare-fun x419 () Int)
(declare-fun x153 () Int)
(declare-fun x1004 () Int)
(declare-fun x620 () Bool)
(declare-fun x828 () Int)
(declare-fun x733 () Bool)
(declare-fun x499 () Int)
(declare-fun x226 () Bool)
(declare-fun x428 () Int)
(declare-fun x37 () Int)
(declare-fun x946 () Bool)
(declare-fun x729 () Int)
(declare-fun x82 () Int)
(declare-fun x190 () Int)
(declare-fun x396 () Bool)
(declare-fun x11 () Bool)
(declare-fun x452 () Bool)
(declare-fun x769 () Int)
(declare-fun x726 () Bool)
(declare-fun x931 () Int)
(declare-fun x867 () Int)
(declare-fun x56 () Int)
(declare-fun x411 () Int)
(declare-fun x236 () Bool)
(declare-fun x952 () Int)
(declare-fun x937 () Int)
(declare-fun x919 () Bool)
(declare-fun x321 () Int)
(declare-fun x262 () Bool)
(declare-fun x853 () Bool)
(declare-fun x162 () Int)
(declare-fun x505 () Int)
(declare-fun x152 () Bool)
(declare-fun x30 () Bool)
(declare-fun x243 () Bool)
(declare-fun x663 () Int)
(declare-fun x287 () Int)
(declare-fun x214 () Int)
(declare-fun x438 () Int)
(declare-fun x124 () Int)
(declare-fun x470 () Int)
(declare-fun x494 () Bool)
(declare-fun x472 () Bool)
(declare-fun x794 () Int)
(declare-fun x173 () Int)
(declare-fun x354 () Int)
(declare-fun x824 () Int)
(declare-fun x319 () Int)
(declare-fun x526 () Int)
(declare-fun x43 () Int)
(declare-fun x265 () Bool)
(declare-fun x997 () Int)
(declare-fun x543 () Bool)
(declare-fun x356 () Int)
(declare-fun x643 () Bool)
(declare-fun x988 () Int)
(declare-fun x105 () Int)
(declare-fun x799 () Int)
(declare-fun x739 () Int)
(declare-fun x48 () Int)
(declare-fun x712 () Int)
(declare-fun x633 () Bool)
(declare-fun x977 () Bool)
(declare-fun x744 () Int)
(declare-fun x592 () Int)
(declare-fun x758 () Int)
(declare-fun x530 () Int)
(declare-fun x149 () Bool)
(declare-fun x722 () Bool)
(declare-fun x801 () Bool)
(declare-fun x942 () Bool)
(declare-fun x380 () Int)
(declare-fun x503 () Int)
(declare-fun x741 () Bool)
(declare-fun x798 () Int)
(declare-fun x1006 () Int)
(declare-fun x836 () Bool)
(declare-fun x388 () Int)
(declare-fun x562 () Int)
(declare-fun x213 () Int)
(declare-fun x220 () Int)
(declare-fun x369 () Int)
(declare-fun x815 () Bool)
(declare-fun x856 () Int)
(declare-fun x978 () Int)
(declare-fun x865 () Int)
(declare-fun x517 () Bool)
(declare-fun x695 () Bool)
(declare-fun x877 () Bool)
(declare-fun x104 () Bool)
(declare-fun x618 () Int)
(declare-fun x20 () Int)
(declare-fun x511 () Int)
(declare-fun x45 () Bool)
(declare-fun x398 () Bool)
(declare-fun x870 () Int)
(declare-fun x622 () Int)
(declare-fun x625 () Int)
(declare-fun x644 () Int)
(declare-fun x519 () Int)
(declare-fun x8 () Int)
(declare-fun x433 () Int)
(declare-fun x91 () Int)
(declare-fun x367 () Int)
(declare-fun x295 () Int)
(declare-fun x269 () Bool)
(declare-fun x195 () Bool)
(declare-fun x109 () Int)
(declare-fun x249 () Bool)
(declare-fun x408 () Bool)
(declare-fun x261 () Int)
(declare-fun x140 (Int) Int)
(declare-fun x490 () Bool)
(declare-fun x488 () Int)
(declare-fun x684 () Int)
(declare-fun x476 () Int)
(declare-fun x197 () Int)
(declare-fun x420 () Bool)
(declare-fun x603 () Int)
(declare-fun x924 () Int)
(declare-fun x845 () Int)
(declare-fun x41 () Bool)
(declare-fun x664 () Int)
(declare-fun x3 () Int)
(declare-fun x816 () Int)
(declare-fun x509 () Int)
(declare-fun x289 () Int)
(declare-fun x704 () Int)
(declare-fun x616 () Bool)
(declare-fun x316 () Int)
(declare-fun x333 () Bool)
(declare-fun x911 () Int)
(declare-fun x259 () Bool)
(declare-fun x128 () Bool)
(declare-fun x679 () Int)
(declare-fun x984 () Bool)
(declare-fun x495 () Int)
(declare-fun x860 () Int)
(declare-fun x599 () Int)
(declare-fun x720 () Bool)
(declare-fun x118 () Int)
(declare-fun x567 () Int)
(declare-fun x302 () Bool)
(declare-fun x825 () Int)
(declare-fun x580 () Int)
(declare-fun x590 () Int)
(declare-fun x62 () Bool)
(declare-fun x730 () Bool)
(declare-fun x426 () Int)
(declare-fun x947 () Int)
(declare-fun x754 () Int)
(declare-fun x783 () Int)
(declare-fun x579 () Bool)
(declare-fun x701 () Int)
(declare-fun x441 () Int)
(declare-fun x148 () Int)
(declare-fun x271 () Bool)
(declare-fun x425 () Int)
(declare-fun x812 () Int)
(declare-fun x383 () Int)
(declare-fun x450 (Int) Int)
(declare-fun x841 () Int)
(declare-fun x767 () Int)
(declare-fun x266 () Int)
(declare-fun x263 () Int)
(declare-fun x320 () Bool)
(declare-fun x849 () Int)
(declare-fun x774 () Bool)
(declare-fun x267 () Int)
(declare-fun x914 () Bool)
(declare-fun x191 () Int)
(declare-fun x776 () Int)
(declare-fun x600 () Int)
(declare-fun x251 () Bool)
(declare-fun x81 () Bool)
(declare-fun x982 () Int)
(declare-fun x44 () Int)
(declare-fun x139 () Bool)
(declare-fun x407 () Int)
(declare-fun x677 () Int)
(declare-fun x688 () Int)
(declare-fun x233 () Int)
(declare-fun x631 () Int)
(declare-fun x693 () Bool)
(declare-fun x721 () Int)
(declare-fun x274 () Int)
(declare-fun x47 () Bool)
(declare-fun x382 () Int)
(declare-fun x581 () Int)
(declare-fun x932 () Int)
(declare-fun x709 () Int)
(declare-fun x950 () Bool)
(declare-fun x306 () Int)
(declare-fun x719 () Int)
(declare-fun x560 () Int)
(declare-fun x998 () Bool)
(declare-fun x895 () Int)
(declare-fun x913 () Int)
(declare-fun x96 () Int)
(declare-fun x585 () Int)
(declare-fun x652 () Int)
(declare-fun x375 () Int)
(declare-fun x366 () Int)
(declare-fun x840 () Int)
(declare-fun x357 () Int)
(declare-fun x557 () Int)
(declare-fun x512 () Bool)
(declare-fun x540 () Int)
(declare-fun x660 () Int)
(declare-fun x327 () Bool)
(declare-fun x547 () Int)
(declare-fun x872 () Bool)
(define-fun x831 ((x318 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x318) (>= x318 0)) x318 (- x318 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x700 ((x318 Int)) Int (ite (and (< x318 0) (>= x318 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x318 115792089237316195423570985008687907853269984665640564039457584007913129639936) x318))
(define-fun x268 ((x666 Int)) Bool (and (>= x666 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x666)))
(define-fun x212 ((x666 Int)) Bool (and (= (x742 x666 115792089237316195423570985008687907853269984665640564039457584007913129639935) x666) (= (x742 115792089237316195423570985008687907853269984665640564039457584007913129639935 x666) x666)))
(define-fun x123 ((x666 Int)) Bool (and (= 0 (x742 x666 0)) (= (x742 0 x666) 0)))
(define-fun x312 ((x666 Int)) Bool (= (x742 x666 x666) x666))
(define-fun x475 ((x666 Int)) Bool (and (x312 x666) (x212 x666) (x123 x666)))
(define-fun x317 ((x666 Int) (x324 Int)) Bool (= (x742 x666 x324) (x742 x324 x666)))
(define-fun x329 ((x666 Int) (x324 Int)) Bool (and (=> (>= x666 0) (>= x666 (x742 x666 x324))) (<= 0 (x742 x666 x324)) (=> (>= x324 0) (<= (x742 x666 x324) x324))))
(define-fun x866 ((x666 Int) (x324 Int)) Bool (and (x329 x666 x324) (x317 x666 x324)))
(define-fun x805 ((x666 Int)) Bool (and (= (x386 115792089237316195423570985008687907853269984665640564039457584007913129639935 x666) (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x666)) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x666) (x386 x666 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x299 ((x666 Int)) Bool (and (= (x386 x666 0) x666) (= (x386 0 x666) x666)))
(define-fun x714 ((x666 Int)) Bool (= (x386 x666 x666) 0))
(define-fun x521 ((x666 Int)) Bool (and (x805 x666) (x299 x666) (x714 x666)))
(define-fun x208 ((x666 Int) (x324 Int)) Bool (= (x386 x666 x324) (x386 x324 x666)))
(define-fun x745 ((x666 Int) (x324 Int)) Bool (and (>= (x386 x666 x324) 0) (<= (x386 x666 x324) (+ x324 x666))))
(define-fun x391 ((x666 Int) (x324 Int)) Bool (and (x208 x666 x324) (x745 x666 x324)))
(define-fun x515 ((x666 Int)) Bool (and (= (x371 115792089237316195423570985008687907853269984665640564039457584007913129639935 x666) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x371 x666 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x2 ((x666 Int)) Bool (and (= (x371 0 x666) x666) (= x666 (x371 x666 0))))
(define-fun x531 ((x666 Int)) Bool (= x666 (x371 x666 x666)))
(define-fun x448 ((x666 Int)) Bool (and (x2 x666) (x531 x666) (x515 x666)))
(define-fun x510 ((x666 Int) (x324 Int)) Bool (= (x371 x666 x324) (x371 x324 x666)))
(define-fun x120 ((x666 Int) (x324 Int)) Bool (and (<= (x371 x666 x324) (+ x324 x666)) (=> (<= 0 x324) (<= x324 (x371 x666 x324))) (=> (<= 0 x666) (<= x666 (x371 x666 x324)))))
(define-fun x459 ((x666 Int) (x324 Int)) Bool (and (x120 x666 x324) (x510 x666 x324)))
(define-fun x654 ((x666 Int)) Bool (= (mod x666 79228162514264337593543950336) (x742 x666 79228162514264337593543950335)))
(define-fun x313 ((x666 Int)) Bool (and (x654 x666) (x866 x666 79228162514264337593543950335)))
(define-fun x586 ((x666 Int)) Bool (= (+ (mod x666 79228162514264337593543950336) (x742 x666 6277101735386680763835789423128438253588091106870490562560)) (mod x666 6277101735386680763835789423207666416102355444464034512896)))
(define-fun x84 ((x666 Int)) Bool (and (x586 x666) (x866 x666 6277101735386680763835789423128438253588091106870490562560)))
(define-fun x443 ((x666 Int)) Bool (= (x742 x666 65535) (mod x666 65536)))
(define-fun x768 ((x666 Int)) Bool (and (x866 x666 65535) (x443 x666)))
(define-fun x556 ((x666 Int)) Bool (= (+ (mod x666 65536) (x742 x666 5192296858534827628530496329154560)) (mod x666 5192296858534827628530496329220096)))
(define-fun x478 ((x666 Int)) Bool (and (x556 x666) (x866 x666 5192296858534827628530496329154560)))
(define-fun x673 ((x666 Int)) Bool (= (mod x666 411376139330301510538742295639337626245683966408394965837152256) (+ (mod x666 5192296858534827628530496329220096) (x742 x666 411376139330301510538742295634145329387149138779864469507932160))))
(define-fun x502 ((x666 Int)) Bool (and (x866 x666 411376139330301510538742295634145329387149138779864469507932160) (x673 x666)))
(define-fun x770 ((x666 Int)) Bool (= (mod x666 26959946667150639794667015087019630673637144422540572481103610249216) (+ (mod x666 411376139330301510538742295639337626245683966408394965837152256) (x742 x666 26959535291011309493156476344723991336010898738574164086137773096960))))
(define-fun x71 ((x666 Int)) Bool (and (x770 x666) (x866 x666 26959535291011309493156476344723991336010898738574164086137773096960)))
(define-fun x780 ((x666 Int)) Bool (= (mod x666 1766847064778384329583297500742918515827483896875618958121606201292619776) (+ (mod x666 26959946667150639794667015087019630673637144422540572481103610249216) (x742 x666 1766820104831717178943502833727831496196810259731196417549125097682370560))))
(define-fun x909 ((x666 Int)) Bool (and (x780 x666) (x866 x666 1766820104831717178943502833727831496196810259731196417549125097682370560)))
(define-fun x154 ((x640 Int)) Int 0)
(define-fun x352 ((x640 Int)) Int 0)
(define-fun x439 ((x640 Int)) Int 0)
(define-fun x884 ((x640 Int)) Int 0)
(define-fun x114 ((x640 Int)) Int 0)
(define-fun x1002 ((x640 Int)) Int 0)
(define-fun x276 ((x640 Int)) Int 0)
(define-fun x445 ((x640 Int)) Int 0)
(define-fun x255 ((x640 Int)) Int 0)
(define-fun x69 ((x640 Int)) Int 0)
(define-fun x848 ((x640 Int)) Int 0)
(define-fun x725 ((x640 Int)) Int 0)
(define-fun x415 ((x640 Int)) Int 0)
(define-fun x143 ((x640 Int)) Int 0)
(define-fun x926 ((x640 Int)) Int 0)
(define-fun x583 ((x640 Int)) Int 0)
(define-fun x97 ((x640 Int)) Int 0)
(define-fun x885 ((x640 Int)) Int 0)
(define-fun x524 ((x640 Int)) Int 0)
(define-fun x305 ((x640 Int)) Int 0)
(define-fun x949 ((x640 Int)) Int 0)
(define-fun x822 ((x640 Int)) Int 0)
(define-fun x427 ((x640 Int)) Int 0)
(define-fun x820 ((x640 Int)) Int 0)
(define-fun x572 ((x640 Int)) Int 0)
(define-fun x477 ((x640 Int)) Int 0)
(define-fun x1 ((x640 Int)) Int 0)
(define-fun x461 ((x640 Int)) Int 0)
(define-fun x927 ((x640 Int)) Int 0)
(define-fun x905 ((x640 Int)) Int 0)
(define-fun x133 ((x640 Int)) Int 0)
(define-fun x95 ((x640 Int)) Int 0)
(define-fun x453 ((x640 Int)) Int 0)
(define-fun x253 ((x640 Int)) Int 0)
(define-fun x685 ((x640 Int)) Int 0)
(define-fun x9 ((x640 Int)) Int 0)
(define-fun x322 ((x640 Int)) Int 0)
(define-fun x575 ((x640 Int)) Int 0)
(define-fun x986 ((x640 Int)) Int 0)
(define-fun x751 ((x640 Int)) Int 0)
(define-fun x4 ((x640 Int)) Int 0)
(define-fun x5 ((x640 Int)) Int 0)
(define-fun x254 ((x640 Int)) Int 0)
(define-fun x370 ((x640 Int)) Int 0)
(define-fun x27 ((x640 Int)) Int 0)
(define-fun x651 ((x640 Int)) Int 0)
(define-fun x634 ((x640 Int)) Int 0)
(define-fun x686 ((x640 Int)) Int (ite (= x640 128) 58712522155081554758111416936196854083347032101528093538124555458258380259328 (x439 x640)))
(define-fun x198 ((x640 Int)) Int (ite (= 132 x640) x242 (x686 x640)))
(define-fun x671 ((x640 Int)) Int (ite (= x640 0) x846 (x140 x640)))
(define-fun x310 ((x640 Int)) Int (ite (and (> 160 x640) (>= x640 128)) (x671 (- x640 128)) (x154 x640)))
(define-fun x910 ((x640 Int)) Int 0)
(define-fun x444 ((x640 Int)) Int (ite (= 704 x640) 58712522155081554758111416936196854083347032101528093538124555458258380259328 (x427 x640)))
(define-fun x713 ((x640 Int)) Int (ite (= 708 x640) x21 (x444 x640)))
(define-fun x232 ((x640 Int)) Int (ite (= x640 704) x244 (x713 x640)))
(define-fun x485 ((x640 Int)) Int (ite (= 736 x640) x629 (x232 x640)))
(define-fun x991 ((x640 Int)) Int (ite (= x640 768) x687 (x485 x640)))
(define-fun x734 ((x640 Int)) Int 0)
(define-fun x873 ((x640 Int)) Int (ite (= x640 128) 58712522155081554758111416936196854083347032101528093538124555458258380259328 (x884 x640)))
(define-fun x935 ((x640 Int)) Int (ite (= 132 x640) x285 (x873 x640)))
(define-fun x395 ((x640 Int)) Int (ite (= x640 0) x639 (x755 x640)))
(define-fun x936 ((x640 Int)) Int (ite (and (< x640 160) (<= 128 x640)) (x395 (- x640 128)) (x352 x640)))
(define-fun x907 ((x640 Int)) Int 0)
(define-fun x672 ((x640 Int)) Int (ite (= x640 704) 58712522155081554758111416936196854083347032101528093538124555458258380259328 (x820 x640)))
(define-fun x944 ((x640 Int)) Int (ite (= x640 708) x468 (x672 x640)))
(define-fun x338 ((x640 Int)) Int (ite (= x640 704) x460 (x944 x640)))
(define-fun x809 ((x640 Int)) Int (ite (= x640 736) x799 (x338 x640)))
(define-fun x606 ((x640 Int)) Int (ite (= x640 768) x660 (x809 x640)))
(define-fun x692 ((x640 Int)) Int (ite (= x640 0) x244 (x450 x640)))
(define-fun x786 ((x640 Int)) Int (ite (and (<= 704 x640) (> 736 x640)) (x692 (- x640 704)) (x949 x640)))
(define-fun x200 ((x640 Int)) Int (ite (= 0 x640) x460 (x61 x640)))
(define-fun x463 ((x640 Int)) Int (ite (and (> 736 x640) (<= 704 x640)) (x200 (- x640 704)) (x822 x640)))
(define-fun x117 ((x640 Int)) Int (ite (= 992 x640) x738 (x27 x640)))
(define-fun x669 ((x640 Int)) Int (ite (= 1024 x640) x23 (x117 x640)))
(define-fun x976 ((x640 Int)) Int (ite (= x640 1056) x281 (x669 x640)))
(define-fun x493 ((x640 Int)) Int (ite (= 1088 x640) x186 (x976 x640)))
(define-fun x715 ((x640 Int)) Int (ite (= 1120 x640) x933 (x493 x640)))
(define-fun x216 ((x640 Int)) Int (ite (= 1152 x640) x454 (x715 x640)))
(define-fun x115 ((x640 Int)) Int (ite (= x640 1184) x341 (x216 x640)))
(define-fun x637 ((x640 Int)) Int (ite (= x640 1216) x530 (x115 x640)))
(define-fun x1007 ((x640 Int)) Int (ite (= x640 1248) x781 (x637 x640)))
(define-fun x602 ((x640 Int)) Int 0)
(define-fun x851 ((x640 Int)) Int (ite (= x640 992) x610 (x651 x640)))
(define-fun x1001 ((x640 Int)) Int (ite (= x640 1024) x719 (x851 x640)))
(define-fun x869 ((x640 Int)) Int (ite (= 1056 x640) x807 (x1001 x640)))
(define-fun x970 ((x640 Int)) Int (ite (= x640 1088) x229 (x869 x640)))
(define-fun x554 ((x640 Int)) Int (ite (= 1120 x640) x330 (x970 x640)))
(define-fun x85 ((x640 Int)) Int (ite (= x640 1152) x590 (x554 x640)))
(define-fun x782 ((x640 Int)) Int (ite (= 1184 x640) x91 (x85 x640)))
(define-fun x406 ((x640 Int)) Int (ite (= 1216 x640) x803 (x782 x640)))
(define-fun x858 ((x640 Int)) Int (ite (= x640 1248) x183 (x406 x640)))
(define-fun x399 ((x640 Int)) Int 0)
(assert (x268 x617))
(assert (x475 x952))
(assert (x268 x879))
(assert (= (and x251 x302) x136))
(assert (x268 x298))
(assert (x268 x380))
(assert (= (=> (and (= x438 x557) (= x193 x857) (= x784 x175)) x412) x225))
(assert (x268 x790))
(assert (x268 x670))
(assert (x268 x196))
(assert (x514 4294967295))
(assert (= true x992))
(assert (x268 x351))
(assert (x84 x784))
(assert (= (and x582 (not x269)) x486))
(assert (x268 x423))
(assert (= x401 (and x241 x705)))
(assert (x268 x414))
(assert (x514 371172950))
(assert (x268 x702))
(assert (= (=> (and (or (and x269 (and (= x697 x82) (= (div x982 1000000000000000000000000000) x82))) (and (and (= (x700 (- x881 (mod (ite (< x982 x8) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x288) (= x981 (mod (* x288 862718293348820473429344482784628181556388621521298319395315527974912) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x831 (+ x981 x601)) x626) (= (mod (* x821 x678) 1000000000000000000000000000) x8) (= (x700 (- x982 x8)) x772) (= x601 (div x772 134217728)) (= x202 (mod (* 15501966263465142598656971426345627788199674109747006013765225610400761231029 x626) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (>= 999999999999999999999999999 x881) (= x202 x697)) (not x269))) (and (= (x700 (- x593 (mod (ite (< x661 x982) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x881) (= x593 (x700 (- x661 x982))) (= (x831 (+ x361 x587)) x930) (= x982 (mod (* x678 x821) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x661 (mod (* x678 x821) 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (= x881 0) x269) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x587 x361))) (= x619 1000000000000000000000000000))) x359) x113))
(assert (x268 x280))
(assert (x268 x965))
(assert (x268 x618))
(assert (= x1009 (=> (and (= x627 x890) (= x63 x644) (= x1003 x597)) x887)))
(assert (x268 x813))
(assert (x268 x142))
(assert (x514 1000000000000000000))
(assert (x268 x440))
(assert (= (and x489 (not x888)) x480))
(assert (= (or x283 x853 x643) x174))
(assert (x268 x72))
(assert (=> (<= x248 10000) (= 0 (x522 x248))))
(assert (= x236 (=> (and (and (<= 1 x144) (= x562 1000000000000000000000000000) (= (x700 (- x464 x161)) x676) (<= x144 6553500000000000000000000000) (= x594 (x700 (- x409 (mod (ite (< x414 x806) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= x409 (x700 (- x414 x806))) (= (x700 (- x199 x908)) x464) (= x776 (ite (> x676 x199) 0 x676)) (= x806 (ite (>= (* 1000000000000000000000000000 (ite (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x776) x776 (- x776 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 0) (* 1000000000000000000000000000 (ite (<= x776 57896044618658097711785492504343953926634992332820282019728792003956564819967) x776 (- x776 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ (* 1000000000000000000000000000 (ite (<= x776 57896044618658097711785492504343953926634992332820282019728792003956564819967) x776 (- x776 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (or (>= 1361925195015220700152000000000000000000000000000 x806) (and (>= x806 115792089237316195423412528683659379178082896764970564039457584007913129639936) (>= 115792089237316195423570985008687907853269984665639564039457584007913129639936 x806))) (= (= x594 0) x333) (= (mod (* 1000000000000000000000000000 x776) 115792089237316195423570985008687907853269984665640564039457584007913129639935) x414)) (or (and (and (= (div x806 x144) x567) (= x567 x966)) x333) (and (not x333) (and (= (x700 (- 2 x403)) x118) (= (mod (* x109 x754) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x178) (= (mod (* x753 x377) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x691) (= x964 (mod (* x787 x377) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x867 (x700 (- x594 (mod (ite (< x806 x368) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= x753 (mod (* x228 x314) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x377 x74) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x423) (= (mod (* x118 x351) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x228) (= (x700 (- 2 x615)) x314) (= (mod (* x74 x516) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x351) (= x51 (x700 (- 2 x691))) (= x856 (mod (* x377 x754) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (div x280 x731) x880) (> x144 x594) (= x731 (x742 x144 x771)) (= (mod (* x667 x867) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x437) (= x899 x966) (= x368 (mod (* x776 1000000000000000000000000000) x144)) (= x667 (x831 (+ x111 1))) (= (mod (* x377 x351) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x403) (>= 6553499999999999999999999999 x594) (= x899 (mod (* (x371 x880 x437) x178) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x771 (x700 (- 0 x144))) (= x787 (mod (* x51 x753) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x700 (- 2 x964)) x451) (= (mod (* x228 x377) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x615) (= (mod (* x451 x787) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x754) (= (mod (* x377 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x973) (= (x700 (- x806 x368)) x280) (= (x386 2 x973) x74) (= (div x621 x731) x111) (= x109 (x700 (- 2 x856))) (= x621 (x700 (- 0 x731))) (= (x700 (- 2 x423)) x516) (= x377 (div x144 x731)))))) x996)))
(assert (x268 x58))
(assert (= (div x894 79228162514264337593543950336) (x36 x894 96)))
(assert (x268 x118))
(assert (x268 x856))
(assert (x268 x144))
(assert (x448 x284))
(assert (x268 x677))
(assert (x268 x479))
(assert (x268 x379))
(assert (x268 x227))
(assert (= (x522 78156646155174841979727994598816262306175212592076161876661508869554232690281) 0))
(assert (x268 x707))
(assert (x478 x663))
(assert (= 0 (x522 262144)))
(assert (x268 x881))
(assert (x502 x193))
(assert (x268 x612))
(assert (x514 4294967294))
(assert (x475 x153))
(assert (x268 x508))
(assert (x448 x375))
(assert (= (div x785 26959946667150639794667015087019630673637144422540572481103610249216) (x36 x785 224)))
(assert (x268 x161))
(assert (x268 x181))
(assert (x448 x38))
(assert (x268 x893))
(assert (=> (= 0 x153) (= 0 (div x297 x153))))
(assert (x268 x403))
(assert (x268 x652))
(assert (x448 x437))
(assert (x521 x598))
(assert (x268 x886))
(assert (x268 x876))
(assert (x268 x917))
(assert (x313 x293))
(assert (x268 x295))
(assert (x268 x86))
(assert (x313 x245))
(assert (x268 x468))
(assert (x268 x147))
(assert (x268 x187))
(assert (x268 x465))
(assert (x448 x880))
(assert (x268 x532))
(assert (x268 x771))
(assert (x475 x293))
(assert (=> (= x347 0) (= (div x105 x347) 0)))
(assert (x268 x68))
(assert (x268 x393))
(assert (= (x36 x509 16) (div x509 65536)))
(assert (x268 x645))
(assert (x514 57896044618658097711785492504343953926634992332820282019728792003956564819967))
(assert (x268 x661))
(assert (x268 x812))
(assert (x268 x362))
(assert (x475 x627))
(assert (x514 1000000000000000000000000000))
(assert (x268 x203))
(assert (x268 x624))
(assert (= x649 (or x401 x539)))
(assert (x268 x335))
(assert (x268 x918))
(assert (x268 x546))
(assert (x268 x103))
(assert (x268 x483))
(assert (= (x36 x703 112) (div x703 5192296858534827628530496329220096)))
(assert (x268 x214))
(assert (x268 x148))
(assert (x268 x234))
(assert (x514 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (x268 x213))
(assert (= (or x218 x877) x241))
(assert (x268 x937))
(assert (= (and x979 x552) x743))
(assert (= 2 (x961 (x73 32 2))))
(assert (x459 x796 x922))
(assert (=> (= x129 0) (= (div x882 x129) 0)))
(assert (= x636 (and x26 x733)))
(assert (x268 x626))
(assert (x268 x428))
(assert (x268 x760))
(assert (x268 x628))
(assert (x268 x536))
(assert (x268 x159))
(assert (= 0 (x522 115792089237316195423570985008687907853269984665639564039457584007913129639936)))
(assert (x268 x467))
(assert (= (x522 4008608923) 0))
(assert (= 0 (x522 1000000000000000000)))
(assert (x268 x495))
(assert (x268 x627))
(assert (x268 x563))
(assert (x268 x447))
(assert (x268 x953))
(assert (= x998 (or x442 x636)))
(assert (x268 x889))
(assert (x268 x982))
(assert (x268 x256))
(assert (x268 x678))
(assert (= (=> (and (and (= x396 false) (= x696 x252) (= 36 x426) (= x696 (x991 736)) (= x997 (x991 768)) (= x778 false) (= x585 x898) (= x950 false) (= x50 x997) (= false x616)) (and (and (= x211 false) (>= 127 x354) (= x224 (+ x285 x410)) (>= 127 x595) (= false x150) (= x898 x33) (= x1005 x797) (= x285 x797) (= (x657 x248) x31) (= false x765) (= x45 false) (= (x959 x224) x639) (= x541 128) (>= x718 1) (= 58712522155081554758111416936196854083347032101528093538124555458258380259328 x758) (= (x73 32 2) x410) (= x711 4008608923) (= 2177768483 x190) (= x988 x158) (= x646 36) (<= 1 x31) (>= x988 1) (= false x571) (>= 127 x354) (<= x988 4294967295) (<= x595 127) (= false x128) (= x988 (x936 128)) (= false x195) (>= 4294967295 x639) (= 36 x296) (= false x327) (= x285 x585) (= (x657 x570) x718) (= false x512) (= false x169)) (and (= x33 x230) (not (< x694 x684)) (>= 127 x119) (not (< x684 x230)) (= x17 x230) (>= x617 1) (= 371172950 x331) (= false x658) (= x617 (x657 x248)) (<= x119 127) (= x466 false) (= (= x230 0) x693) (= x684 (x700 (- x694 1)))))) (and (=> (and (not x693) (and (= x766 (= x230 1)) (or (and x766 (and (= x102 x631) (= x64 x852) (= x205 x537))) (and (and (= x64 x499) (= x67 x631) (= x537 x707) (= 2 x230)) (not x766))))) x210) (=> (and x693 (and (= x263 x156) (= x663 x87) (= x25 x549))) x574))) x315))
(assert (x268 x592))
(assert (= (=> (and (= x366 (div x828 x588)) (= x678 x366)) x474) x507))
(assert (x268 x798))
(assert (x448 x796))
(assert (x514 1461501637330902918203684832716283019655932542975))
(assert (x268 x845))
(assert (x268 x10))
(assert (x268 x82))
(assert (x268 x825))
(assert (= (and (not x693) x777) x720))
(assert (x268 x233))
(assert (x268 x288))
(assert (x268 x356))
(assert (x268 x476))
(assert (x268 x500))
(assert (x268 x990))
(assert (= (x522 26959535291011309493156476344723991336010898738574164086137773096960) 0))
(assert (x268 x983))
(assert (x268 x231))
(assert (x268 x22))
(assert (x268 x978))
(assert (x268 x83))
(assert (x268 x896))
(assert (x268 x635))
(assert (x268 x717))
(assert (x502 x63))
(assert (x475 79228162514264337593543950335))
(assert (= (div x12 65536) (x36 x12 16)))
(assert (x268 x562))
(assert (x268 x75))
(assert (x268 x462))
(assert (x268 x229))
(assert (x514 26959535291011309493156476344723991336010898738574164086137773096960))
(assert (x268 x727))
(assert (x268 x377))
(assert (x268 x18))
(assert (= x517 (or x373 x802)))
(assert (x313 x549))
(assert (x514 79228162514264337593543950335))
(assert (x268 x520))
(assert (= 0 (x522 115792089237316195423412528683659379178082896764970564039457584007913129639936)))
(assert (x268 x138))
(assert (x268 x796))
(assert (x475 x540))
(assert (x268 x729))
(assert (x268 x837))
(assert (x268 x783))
(assert (x268 x718))
(assert (x475 x784))
(assert (x268 x141))
(assert (x268 x870))
(assert (x84 x557))
(assert (x268 x867))
(assert (x268 x709))
(assert (x268 x529))
(assert (x268 x183))
(assert (x268 x973))
(assert (x268 x209))
(assert (x268 x460))
(assert (x268 x784))
(assert (x502 x540))
(assert (x268 x781))
(assert (x268 x129))
(assert (x268 x96))
(assert (x268 x706))
(assert (x268 x711))
(assert (x268 x23))
(assert (x268 x703))
(assert (= (x522 6553500000000000000000000000) 0))
(assert (x268 x294))
(assert (x268 x915))
(assert (x268 x52))
(assert (x268 x684))
(assert (x268 x32))
(assert (x71 x63))
(assert (x268 x593))
(assert (x268 x541))
(assert (x268 x897))
(assert (x268 x985))
(assert (x268 x1003))
(assert (x268 x731))
(assert (x268 x830))
(assert (x514 10000000000000000000))
(assert (=> (= 0 x260) (= (div x440 x260) 0)))
(assert (x268 x397))
(assert (= x420 (and x130 x823)))
(assert (x268 x573))
(assert (x268 x382))
(assert (x268 x913))
(assert (x475 x663))
(assert (x268 x206))
(assert (x475 x263))
(assert (x268 x810))
(assert (x268 x710))
(assert (x268 x426))
(assert (x478 x63))
(assert (x268 x691))
(assert (= (div x362 5192296858534827628530496329220096) (x36 x362 112)))
(assert (x268 x576))
(assert (x268 x890))
(assert (x268 x972))
(assert (x268 x79))
(assert (x268 x186))
(assert (x475 1766820104831717178943502833727831496196810259731196417549125097682370560))
(assert (x514 1766820104831717178943502833727831496196810259731196417549125097682370560))
(assert (x268 x170))
(assert (x313 x263))
(assert (x268 x860))
(assert (x268 x102))
(assert (= (=> (and (or (and (and (= (x831 (+ 1 x578)) x677) (= (div x153 x347) x425) (= x375 (div x367 x347)) (= (mod (* x870 x234) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x603) (= (x700 (- 2 x938)) x99) (< x177 x153) (= (x700 (- 2 x814)) x481) (= (x700 (- 2 x289)) x710) (= (x700 (- 0 x347)) x105) (= x213 (mod (* (x371 x375 x38) x146) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x800 x710) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x234) (= x347 (x742 x153 x817)) (= (x700 (- 2 x689)) x870) (<= x177 6553499999999999999999999999) (= x957 (mod (* x425 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x90 (x700 (- x177 (mod (ite (< x941 x645) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (x700 (- 0 x153)) x817) (= x449 (mod (* x656 x688) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x367 (x700 (- x941 x645))) (= x577 (mod (* x99 x449) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x481 x577) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x800) (= x38 (mod (* x677 x90) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x386 2 x957) x688) (= (mod (* x3 1000000000000000000000000000) x153) x645) (= x656 (x700 (- 2 x883))) (= x146 (mod (* x544 x603) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x289 (mod (* x425 x800) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x544 (x700 (- 2 x995))) (= x213 x336) (= x689 (mod (* x425 x234) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (div x105 x347) x578) (= (mod (* x577 x425) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x814) (= x883 (mod (* x425 x688) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x603 x425) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x995) (= (mod (* x425 x449) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x938)) (not x145)) (and x145 (and (= x953 (div x941 x153)) (= x336 x953)))) (and (= (x700 (- x390 x941)) x818) (= (x700 (- x818 (mod (ite (< x390 x941) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x177) (= (x700 (- x891 x15)) x917) (= x390 (mod (* 1000000000000000000000000000 x3) 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (<= 1 x153) (= x605 (x700 (- x917 x361))) (= 1000000000000000000000000000 x495) (or (and (>= 115792089237316195423570985008687907853269984665639564039457584007913129639936 x941) (>= x941 115792089237316195423412528683659379178082896764970564039457584007913129639936)) (>= 1361925195015220700152000000000000000000000000000 x941)) (= x941 (ite (<= 0 (* (ite (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x3) x3 (- x3 115792089237316195423570985008687907853269984665640564039457584007913129639936)) 1000000000000000000000000000)) (* 1000000000000000000000000000 (ite (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x3) x3 (- x3 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ (* 1000000000000000000000000000 (ite (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x3) x3 (- x3 115792089237316195423570985008687907853269984665640564039457584007913129639936))) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (= (= x177 0) x145) (>= 6553500000000000000000000000 x153) (= (ite (< x891 x605) 0 x605) x3))) x561) x474))
(assert (x268 x701))
(assert (x268 x171))
(assert (x866 x144 x902))
(assert (= (x522 65535) 0))
(assert (= (or x249 x149) x539))
(assert (x268 x264))
(assert (x268 x361))
(assert (x514 58712522155081554758111416936196854083347032101528093538124555458258380259328))
(assert (x514 4008608923))
(assert (= (x36 x80 208) (div x80 411376139330301510538742295639337626245683966408394965837152256)))
(assert (= x434 (and x222 x194)))
(assert (x268 x859))
(assert (x514 4266371907))
(assert (x268 x260))
(assert (x866 x153 x952))
(assert (= 0 (x522 31536000)))
(assert (x268 x179))
(assert (x268 x847))
(assert (= x827 (or x633 x226)))
(assert (x268 x416))
(assert (x268 x598))
(assert (=> (= x731 0) (= (div x144 x731) 0)))
(assert (x268 x653))
(assert (x268 x250))
(assert (x268 x899))
(assert (x268 x883))
(assert (x514 65535))
(assert (= x359 (=> (and (and (= x251 (< x930 x411)) (= x411 (x831 (+ x88 x697))) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x88 x697)))) (or (and (and (= x294 x112) (= (* 100000000000000000000000 x217) x112) (= x662 27) (= x411 x629) (= x294 x687) (= x467 4)) x251) (and (and (= x506 x687) (= x307 x506) (= 27 x291) (= x307 (* 100000000000000000000000 x217)) (= x930 x629) (= x246 4)) (not x251)))) x315)))
(assert (x268 x962))
(assert (= (div x337 26959946667150639794667015087019630673637144422540572481103610249216) (x36 x337 224)))
(assert (x268 x387))
(assert (x268 x296))
(assert (x268 x44))
(assert (x268 x849))
(assert (x268 x1005))
(assert (x268 x759))
(assert (x268 x274))
(assert (x268 x201))
(assert (= 0 (x522 1461501637330902918203684832716283019655932542975)))
(assert (= (=> (and (or (and x552 (and (= x604 x369) (= x369 (div x783 1000000000000000000000000000)))) (and (and (= x323 (mod (* x172 x142) 1000000000000000000000000000)) (= x604 x405) (= x66 (x831 (+ x526 x304))) (= x405 (mod (* x66 15501966263465142598656971426345627788199674109747006013765225610400761231029) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (>= 999999999999999999999999999 x763) (= x101 (x700 (- x763 (mod (ite (> x323 x783) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= x108 (x700 (- x783 x323))) (= x526 (div x108 134217728)) (= x304 (mod (* 862718293348820473429344482784628181556388621521298319395315527974912 x101) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (not x552))) (and (not (>= (+ x920 x161) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x518 (x700 (- x790 x783))) (= 1000000000000000000000000000 x729) (= x552 (= x763 0)) (= x482 (x831 (+ x161 x920))) (= x763 (x700 (- x518 (mod (ite (> x783 x790) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (mod (* x172 x142) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x783) (= x790 (mod (* x142 x172) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))) x271) x490))
(assert (=> (= 0 x129) (= 0 (div x519 x129))))
(assert (x866 x153 x817))
(assert (x268 x795))
(assert (= x956 (or x584 x107)))
(assert (x268 x814))
(assert (x268 x15))
(assert (x391 x598 2))
(assert (= (x36 x767 96) (div x767 79228162514264337593543950336)))
(assert (= 0 (x522 57896044618658097711785492504343953926634992332820282019728792003956564819967)))
(assert (x268 x581))
(assert (x268 x589))
(assert (= x149 (and x168 x265)))
(assert (= (x522 79228162514264337593543950335) 0))
(assert (x268 x923))
(assert (= 0 (x522 100000000000000)))
(assert (= x835 (and x747 x132)))
(assert (x268 x688))
(assert (x268 x325))
(assert (x268 x91))
(assert (x268 x331))
(assert (x475 x1003))
(assert (x268 x697))
(assert (x268 x54))
(assert (x268 x773))
(assert (x268 x763))
(assert (x268 x674))
(assert (x268 x638))
(assert (x268 x21))
(assert (x514 134217728))
(assert (x268 x803))
(assert (x268 x163))
(assert (= 0 (x522 5192296858534827628530496329154560)))
(assert (x268 x435))
(assert (x268 x749))
(assert (x268 x488))
(assert (x268 x267))
(assert (x268 x712))
(assert (x268 x413))
(assert (x268 x454))
(assert (x391 x400 2))
(assert (x521 x400))
(assert (= (and x1008 x134) x761))
(assert (x268 x77))
(assert (x268 x548))
(assert (x268 x758))
(assert (= x747 (or x420 x60)))
(assert (x268 x266))
(assert (x268 x594))
(assert (= (and (not x251) x302) x180))
(assert (= (or x417 x486) x302))
(assert (x268 x189))
(assert (x268 x989))
(assert (x268 x31))
(assert (x448 x721))
(assert (x268 x421))
(assert (x268 x656))
(assert (x268 x375))
(assert (x268 x681))
(assert (x475 x902))
(assert (x268 x821))
(assert (x268 x337))
(assert (= (=> (and (and (= (> x144 x142) x272) (= (x700 (- x532 x34)) x151) (= x553 1000000000000000000000000000) (= (x700 (- x151 (mod (ite (> x34 x532) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x840) (= (mod (* x966 x142) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x34) (= x532 (mod (* x142 x966) 115792089237316195423570985008687907853269984665640564039457584007913129639935)) x272 (= x132 (= 0 x840))) (or (and (not x132) (and (= x614 (mod (* 15501966263465142598656971426345627788199674109747006013765225610400761231029 x915) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x700 (- x34 x126)) x233) (>= 999999999999999999999999999 x840) (= x920 x614) (= x915 (x831 (+ x925 x706))) (= (div x233 134217728) x706) (= (mod (* x966 x142) 1000000000000000000000000000) x126) (= (mod (* x892 862718293348820473429344482784628181556388621521298319395315527974912) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x925) (= (x700 (- x840 (mod (ite (> x126 x34) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x892))) (and (and (= x920 x965) (= (div x34 1000000000000000000000000000) x965)) x132))) x490) x929))
(assert (x268 x470))
(assert (x475 x771))
(assert (x268 x920))
(assert (x514 115792089237316195423412528683659379178082896764970564039457584007913129639936))
(assert (x268 x429))
(assert (x768 x663))
(assert (= (=> (and (and (= x492 x35) (= x712 x503) (= (x742 5192296858534827628530496329154560 x63) x348) (= x1006 (x1007 1216)) (= (x1007 1056) x159) (= (x742 6277101735386680763835789423128438253588091106870490562560 x1003) x985) (= x186 (x36 x348 16)) (= x592 (x1007 1088)) (= 704 x947) (= false x122) (= x78 false) (= (x36 x92 224) x341) (= (x36 x767 96) x781) (= (x36 x80 208) x454) (= x748 x897) (= x418 x16) (>= x854 0) (= x110 (x1007 1184)) (= x592 x793) (= (x1007 1248) x523) (= (x1007 1120) x712) (= x404 (x1007 1152)) (= false x850) (= x316 x559) (= x80 (x742 26959535291011309493156476344723991336010898738574164086137773096960 x63)) (= x1006 x53) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x844) (>= x844 0) (= (x1007 1024) x897) (= (x742 79228162514264337593543950335 x1003) x738) (<= x854 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x555 x404) (= (x742 79228162514264337593543950335 x627) x530) (= x279 704) (= x292 x864) (= x81 false) (= x92 (x742 1766820104831717178943502833727831496196810259731196417549125097682370560 x63)) (= x703 (x742 411376139330301510538742295634145329387149138779864469507932160 x63)) (= x523 x924) (= x933 (x36 x703 112)) (= x96 100) (= (x742 65535 x63) x281) (= x159 x100) (= (x742 6277101735386680763835789423128438253588091106870490562560 x627) x767) (= x184 x110) (= (x1007 992) x16) (= (x36 x985 96) x23)) (and (and (and (= x825 x306) (= x306 x864) (not (< x286 x21)) (>= x326 1) (>= 127 x10) (= x648 false) (= x695 false) (= (x700 (- x694 1)) x286) (= x705 (= x21 0)) (>= 127 x10) (= x419 4266371907) (not (< x694 x286)) (= (x657 x248) x326) (= x303 x21)) (= x35 x828)) (= x21 x316))) (and (=> (and x705 (and (= x193 x87) (= x156 x784) (= x25 x557))) x412) (=> (and (not x705) (and (= (= 1 x21) x168) (or (and x168 (and (= x205 x175) (= x857 x102) (= x852 x438))) (and (not x168) (and (= x21 2) (= x707 x175) (= x438 x499) (= x857 x67)))))) x225))) x887))
(assert (x475 x549))
(assert (x268 x258))
(assert (x268 x609))
(assert (x268 x610))
(assert (x268 x63))
(assert (x514 2177768483))
(assert (x84 x263))
(assert (= (x522 4294967294) 0))
(assert (x268 x433))
(assert (= (x522 15501966263465142598656971426345627788199674109747006013765225610400761231029) 0))
(assert (= x699 (and (not x134) x1008)))
(assert (x521 x957))
(assert (x478 x193))
(assert (=> (= 0 x347) (= 0 (div x153 x347))))
(assert (x268 x282))
(assert (x268 x504))
(assert (x268 x570))
(assert (x268 x945))
(assert (x268 x275))
(assert (x268 x930))
(assert (x268 x719))
(assert (x268 x523))
(assert (x268 x696))
(assert (x268 x131))
(assert (x268 x190))
(assert (x268 x932))
(assert (=> (= x153 0) (= (div x941 x153) 0)))
(assert (x268 x197))
(assert (= x872 (and x517 (not x145))))
(assert (x268 x431))
(assert (= (x834 (x73 32 2)) 32))
(assert (x268 x947))
(assert (=> (= 0 x347) (= (div x367 x347) 0)))
(assert (x268 x519))
(assert (x268 x816))
(assert (x268 x694))
(assert (x514 78156646155174841979727994598816262306175212592076161876661508869554232690281))
(assert (x268 x667))
(assert (= (x522 (+ x608 x21)) (x522 x608)))
(assert (x268 x438))
(assert (x268 x240))
(assert (x268 x175))
(assert (x268 x629))
(assert (x268 x680))
(assert (= x452 (and (not x728) x334)))
(assert (x268 x491))
(assert (x268 x286))
(assert (x268 x29))
(assert (= (x36 x357 16) (div x357 65536)))
(assert (x268 x698))
(assert (x268 x28))
(assert (x268 x369))
(assert (x909 x63))
(assert (=> (= 0 x144) (= (div x529 x144) 0)))
(assert (x268 x880))
(assert (x475 5192296858534827628530496329154560))
(assert (x268 x683))
(assert (x268 x588))
(assert (=> (<= x570 10000) (= (x522 x570) 0)))
(assert (x268 x966))
(assert (= (x36 x792 208) (div x792 411376139330301510538742295639337626245683966408394965837152256)))
(assert (x268 x964))
(assert (= x62 (=> (and (= x148 (x742 411376139330301510538742295634145329387149138779864469507932160 x540)) (= x460 (x959 x971)) (= x860 x876) (= x139 (= 0 x388)) (= x505 (x742 26959535291011309493156476344723991336010898738574164086137773096960 x540)) (= x83 (x36 x894 96)) (= x829 (* 100000000000000000000000 x103)) (= 8 x704) (= 36 x841) (= (x657 x570) x421) (= false x247) (= x161 (x36 x509 16)) (= (x742 65535 x540) x124) (= x886 704) (<= x460 4294967295) (= (+ x911 x468) x971) (= false x243) (<= x528 4294967295) (= 416 x298) (>= 127 x356) (= x199 (div x847 31536000)) (= x987 x847) (= x182 false) (= (x36 x148 112) x849) (= (x742 1766820104831717178943502833727831496196810259731196417549125097682370560 x540) x337) (= 27 x623) (= false x160) (= x832 (x742 79228162514264337593543950335 x293)) (= x231 (x36 x709 96)) (= x164 2177768483) (= x144 x829) (= x266 4) (= x624 58712522155081554758111416936196854083347032101528093538124555458258380259328) (= (x742 5192296858534827628530496329154560 x540) x509) (= 27 x945) (= x709 (x742 6277101735386680763835789423128438253588091106870490562560 x293)) (= (x463 704) x528) (= (x742 6277101735386680763835789423128438253588091106870490562560 x245) x894) (<= x356 127) (>= x421 1) (= (x73 32 2) x911) (= (x36 x337 224) x388) (= x987 (* x528 10000000000000000000)) (= x908 (x742 79228162514264337593543950335 x245)) (= x103 (x36 x505 208))) (and (=> (and (and (= x7 x660) (= x948 (* x124 100000000000000000000000)) (= 4 x319) (= x83 x799) (= x7 x948) (= 27 x635)) x139) x42) (=> (and (= (= 0 x220) x888) (not x139)) (and (=> (and (= 0 x142) x888) x236) (=> (and (not x888) (and (or (and (and (= x535 (mod (* x937 441711766194596082395824375185729628956870974218904739530401550323154944) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (div x674 262144) x749) (= x903 (mod (* x77 x220) 1000000000000000000)) (= (x700 (- x798 x903)) x674) (<= 1 x98) (= (x700 (- x328 (mod (ite (< x798 x903) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x937) (= x843 x98) (= x98 (mod (* 78156646155174841979727994598816262306175212592076161876661508869554232690281 x690) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x690 (x831 (+ x749 x535))) (<= x328 999999999999999999)) (not x967)) (and x967 (and (<= 1000000000000000000 x798) (= x393 x843) (= x393 (div x798 1000000000000000000))))) (and (= x967 (= x328 0)) (= (mod (* x220 x77) 115792089237316195423570985008687907853269984665640564039457584007913129639935) x659) (= x670 18) (= 1000000000000000000 x350) (= x921 x77) (= (mod (* x77 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x798) (= 4 x906) (= x921 (* 100000000000000 x388)) (= (x700 (- x659 x798)) x392) (= x328 (x700 (- x392 (mod (ite (< x659 x798) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))))))) x106)))))))
(assert (= x643 (and x139 x942)))
(assert (x268 x838))
(assert (= x238 (and x649 (not x104))))
(assert (= (div x932 5192296858534827628530496329220096) (x36 x932 112)))
(assert (= x489 (and (not x139) x942)))
(assert (= (=> (and (or (and (and (= x576 x821) (= x576 (div x297 x153))) x728) (and (and (= x546 (mod (* (x371 x721 x284) x889) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x374 x402) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x40) (= (mod (* x958 x968) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x284) (= x968 (x700 (- x24 (mod (ite (< x297 x483) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (mod (* x56 x188) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x889) (= x821 x546) (= x683 (div x882 x129)) (= x913 (mod (* x479 x374) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (<= x24 6553499999999999999999999999) (= (div x153 x129) x374) (= x129 (x742 x153 x952)) (= (mod (* x250 x542) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x702) (= x400 (mod (* 3 x374) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x542 (mod (* x491 x223) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x700 (- 2 x219)) x188) (= (x700 (- 2 x913)) x275) (= x39 (x700 (- 2 x40))) (= x141 (mod (* x374 x702) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x519 (x700 (- x297 x483))) (= x223 (mod (* x275 x479) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x831 (+ 1 x683)) x958) (= (x386 2 x400) x479) (= x491 (x700 (- 2 x788))) (< x24 x153) (= (mod (* x39 x402) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x56) (= x972 (x700 (- 2 x141))) (= (mod (* 1000000000000000000000000000 x54) x153) x483) (= x861 (mod (* x542 x374) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x700 (- 0 x129)) x882) (= (x700 (- 0 x153)) x952) (= (x700 (- 2 x861)) x250) (= x721 (div x519 x129)) (= (mod (* x972 x702) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x402) (= (mod (* x56 x374) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x219) (= x788 (mod (* x223 x374) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (not x728))) (and (= x297 (* x54 1000000000000000000000000000)) (= (x700 (- x737 x297)) x613) (= x54 (x700 (- x256 x88))) (= (= x24 0) x728) (= x737 (* x54 1000000000000000000000000000)) (= 1000000000000000000000000000 x581) (= x24 (x700 (- x613 (mod (ite (< x737 x297) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (<= x54 79228162514264337593543950335))) x127) x561))
(assert (x268 x596))
(assert (x268 x843))
(assert (x268 x506))
(assert (x268 x67))
(assert (= (x36 x348 16) (div x348 65536)))
(assert (x475 x557))
(assert (x268 x644))
(assert (x909 x193))
(assert (= (x522 115792089237316195423570985008687907853269984665640564039457584007913129639935) 0))
(assert (x268 x223))
(assert (x268 x544))
(assert (x268 x604))
(assert (x268 x739))
(assert (x268 x457))
(assert (=> (>= 10000 x547) (= (x522 x547) 0)))
(assert (x268 x806))
(assert (x268 x623))
(assert (x268 x828))
(assert (not (x514 (x73 32 2))))
(assert (x268 x289))
(assert (x268 x248))
(assert (x268 x43))
(assert (x268 x934))
(assert (x268 x963))
(assert (=> (= 0 x843) (= 0 (div x573 x843))))
(assert (x514 6553500000000000000000000000))
(assert (x268 x328))
(assert (x268 x376))
(assert (= x804 (and (not x408) x992)))
(assert (x268 x518))
(assert (x268 x244))
(assert (x268 x409))
(assert (= (and x582 x269) x417))
(assert (x268 x753))
(assert (x268 x348))
(assert (x268 x826))
(assert (x71 x663))
(assert (x268 x99))
(assert (= (x522 6277101735386680763835789423128438253588091106870490562560) 0))
(assert (x268 x24))
(assert (x909 x540))
(assert (x514 1361925195015220700152000000000000000000000000000))
(assert (x268 x49))
(assert (=> (= x731 0) (= (div x621 x731) 0)))
(assert (x268 x364))
(assert (= (x522 441711766194596082395824375185729628956870974218904739530401550323154944) 0))
(assert (x268 x558))
(assert (x268 x388))
(assert (x268 x367))
(assert (x268 x690))
(assert (= (x522 999999999999999999999999999) 0))
(assert (x268 x619))
(assert (x475 x193))
(assert (x268 x799))
(assert (x268 x14))
(assert (x268 x600))
(assert (x268 x1006))
(assert (= x6 (and x827 x333)))
(assert (x268 x124))
(assert (x268 x385))
(assert (x268 x51))
(assert (x268 x306))
(assert (x268 x595))
(assert (x268 x205))
(assert (x268 x902))
(assert (x268 x56))
(assert (x391 x957 2))
(assert (x268 x343))
(assert (x268 x287))
(assert (x268 x341))
(assert (x313 x557))
(assert (= (div x49 79228162514264337593543950336) (x36 x49 96)))
(assert (x475 x144))
(assert (x268 x577))
(assert (x475 411376139330301510538742295634145329387149138779864469507932160))
(assert (x268 x497))
(assert (x268 x551))
(assert (x268 x501))
(assert (x268 x587))
(assert (x268 x108))
(assert (=> (= x129 0) (= (div x153 x129) 0)))
(assert (= (and x241 (not x705)) x265))
(assert (x268 x857))
(assert (x268 x304))
(assert (x514 862718293348820473429344482784628181556388621521298319395315527974912))
(assert (x268 x925))
(assert (x514 999999999999999999))
(assert (x268 x566))
(assert (x268 x319))
(assert (x268 x737))
(assert (x268 x405))
(assert (x268 x191))
(assert (x268 x776))
(assert (= 0 (x522 1000000000000000000000000000)))
(assert (x514 100000000000000000000000))
(assert (= (x522 4294967295) 0))
(assert (x84 x1003))
(assert (x268 x354))
(assert (x268 x242))
(assert (x268 x599))
(assert (x268 x285))
(assert (x268 x37))
(assert (x268 x952))
(assert (x478 x540))
(assert (= x655 (and x956 x116)))
(assert (x268 x567))
(assert (= (x522 10000000000000000000) 0))
(assert (x268 x839))
(assert (x268 x350))
(assert (= 0 (x522 371172950)))
(assert (x268 x560))
(assert (x268 x578))
(assert (= (x522 (+ x468 x911)) (x522 x911)))
(assert (x268 x38))
(assert (x268 x939))
(assert (x268 x342))
(assert (= (=> (and (or (and x823 (and (= x990 x172) (= x990 (div x529 x144)))) (and (not x823) (and (= x779 (mod (* x618 (x371 x796 x922)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x779 x172) (= (mod (* x750 x679) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x813) (= x131 (x700 (- 2 x382))) (= (mod (* x830 x282) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x922) (= (x700 (- 2 x558)) x838) (< x465 x144) (<= x465 6553499999999999999999999999) (= x698 (mod (* x428 x838) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (div x342 x260) x796) (= (x742 x144 x902) x260) (= x902 (x700 (- 0 x144))) (= (mod (* x534 x837) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x750) (= x837 (x700 (- 2 x652))) (= (x386 2 x598) x534) (= (mod (* x48 x698) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x274) (= x618 (mod (* x131 x274) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x382 (mod (* x274 x679) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x48 (x700 (- 2 x983))) (= x94 (mod (* x664 x750) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x700 (- x529 x147)) x342) (= x983 (mod (* x679 x698) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (div x440 x260) x759) (= x652 (mod (* x534 x679) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* x428 x679) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x558) (= (x700 (- x465 (mod (ite (< x529 x147) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x830) (= (mod (* x94 x679) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x811) (= x598 (mod (* x679 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x831 (+ x759 1)) x282) (= x440 (x700 (- 0 x260))) (= (x700 (- 2 x813)) x664) (= x428 (mod (* x816 x94) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (div x144 x260) x679) (= x816 (x700 (- 2 x811))) (= x147 (mod (* 1000000000000000000000000000 x185) x144))))) (and (= (= 0 x465) x823) (>= 79228162514264337593543950335 x185) (= 1000000000000000000000000000 x44) (= x465 (x700 (- x1004 (mod (ite (> x529 x701) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= x529 (* 1000000000000000000000000000 x185)) (= x1004 (x700 (- x701 x529))) (= x701 (* x185 1000000000000000000000000000)) (= x185 (x700 (- x83 x849))))) x929) x996))
(assert (x268 x446))
(assert (= (=> (and (and (>= x365 0) (= (x36 x49 96) x183) (= x918 x736) (= x330 (x36 x932 112)) (= x785 (x742 1766820104831717178943502833727831496196810259731196417549125097682370560 x663)) (= x732 x58) (= x548 704) (= x543 false) (= x309 false) (= (x742 411376139330301510538742295634145329387149138779864469507932160 x663) x932) (= x476 (x742 6277101735386680763835789423128438253588091106870490562560 x263)) (= (x742 5192296858534827628530496329154560 x663) x12) (= (x742 6277101735386680763835789423128438253588091106870490562560 x549) x49) (= (x36 x476 96) x719) (= x923 (x858 1120)) (= (x858 1184) x52) (= x501 x607) (= x91 (x36 x785 224)) (= false x977) (= x610 (x742 79228162514264337593543950335 x263)) (= x214 x808) (= x229 (x36 x12 16)) (= (x858 1056) x609) (= (x858 992) x214) (= x923 x622) (= x792 (x742 26959535291011309493156476344723991336010898738574164086137773096960 x663)) (<= x955 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x955 0) (= 100 x290) (= x744 x740) (= (x742 79228162514264337593543950335 x549) x803) (= x52 x746) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x365) (= x273 false) (= (x858 1152) x918) (= x912 x898) (= x441 x239) (= x744 (x858 1248)) (= (x858 1216) x501) (= (x36 x792 208) x590) (= x58 (x858 1024)) (= (x858 1088) x206) (= x46 x471) (= (x742 65535 x663) x807) (= x355 x206) (= x527 x609) (= x29 704)) (and (and (= x441 x573) (and (= (= x468 0) x116) (= false x455) (= x325 x220) (not (> x735 x694)) (= (x657 x248) x978) (not (> x468 x735)) (>= 127 x773) (>= 127 x773) (= x46 x220) (= x468 x876) (= (x700 (- x694 1)) x735) (>= x978 1) (= false x152) (= 4266371907 x364))) (= x912 x468))) (and (=> (and x116 (and (= x25 x293) (= x87 x540) (= x245 x156))) x62) (=> (and (and (or (and (and (= x176 x852) (= x171 x205) (= x473 x102)) x733) (and (and (= x473 x67) (= x707 x171) (= 2 x468) (= x176 x499)) (not x733))) (= (= 1 x468) x733)) (not x116)) x76))) x574))
(assert (x268 x817))
(assert (x268 x687))
(assert (x268 x540))
(assert (x84 x245))
(assert (x268 x400))
(assert (x71 x193))
(assert (x268 x807))
(assert (x268 x263))
(assert (x268 x833))
(assert (x313 x784))
(assert (x268 x336))
(assert (x268 x564))
(assert (= x42 (=> (and (= x730 false) (= x257 (= x808 x418)) (= x914 false) (= false x862) x30 (= x407 x520) (= (= x527 x100) x422) (= (= x740 x924) x47) x47 x422 x215 (= x30 (= x355 x793)) (= (= x622 x503) x215) (= (= x736 x555) x204) (= (> x988 x173) x349) x550 (= (x606 736) x203) (= x520 (x606 768)) x89 (= x89 (= x732 x748)) (= (= x53 x607) x65) (= x550 (= x184 x746)) x257 x204 x349 (= x203 x580) (= x875 false) x65 (= (<= x252 x580) x262)) x262)))
(assert (= (x522 1766820104831717178943502833727831496196810259731196417549125097682370560) 0))
(assert (= x60 (and (not x823) x130)))
(assert (= x412 (=> (and (= x496 (x742 6277101735386680763835789423128438253588091106870490562560 x557)) (= x589 (x786 704)) (= x179 (x36 x295 224)) (= (x36 x457 208) x75) (= x361 (x36 x357 16)) (= x187 4) (= x653 27) (<= x600 127) (= x896 x904) (= (= 0 x179) x104) (= 27 x865) (= x88 (x36 x362 112)) (= x357 (x742 5192296858534827628530496329154560 x193)) (= false x722) (= x488 8) (= x379 58712522155081554758111416936196854083347032101528093538124555458258380259328) (= 2177768483 x989) (= false x900) (= x153 x794) (= x795 (x742 79228162514264337593543950335 x557)) (= x362 (x742 411376139330301510538742295634145329387149138779864469507932160 x193)) (= (x959 x591) x244) (= x295 (x742 1766820104831717178943502833727831496196810259731196417549125097682370560 x193)) (= x980 false) (= (x742 6277101735386680763835789423128438253588091106870490562560 x784) x339) (= x15 (x742 79228162514264337593543950335 x784)) (= (x657 x570) x456) (= x385 (x36 x496 96)) (>= 4294967295 x589) (= x591 (+ x608 x21)) (= x303 x201) (= false x874) (= x345 36) (>= x456 1) (= x904 (* 10000000000000000000 x589)) (<= x600 127) (= (x742 65535 x193) x217) (= x608 (x73 32 2)) (= x68 704) (= (x742 26959535291011309493156476344723991336010898738574164086137773096960 x193) x457) (= x891 (div x896 31536000)) (= x794 (* x75 100000000000000000000000)) (= x717 416) (>= 4294967295 x244) (= (x36 x339 96) x256)) (and (=> (and (= x815 (= 0 x306)) (not x104)) (and (=> (and (not x815) (and (and (= (mod (* x376 x306) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x939) (= (x700 (- x962 x939)) x181) (= x962 (mod (* x376 x306) 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (* x179 100000000000000) x775) (= 18 x599) (= 1000000000000000000 x380) (= x376 x775) (= (x700 (- x181 (mod (ite (> x939 x962) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x612) (= 4 x859) (= x134 (= 0 x612))) (or (and (and (= (x700 (- x939 x311)) x665) (= x311 (mod (* x306 x376) 1000000000000000000)) (<= 1 x839) (= (x700 (- x612 (mod (ite (< x939 x311) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x431) (= x839 (mod (* 78156646155174841979727994598816262306175212592076161876661508869554232690281 x435) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x831 (+ x57 x381)) x435) (>= 999999999999999999 x612) (= x839 x588) (= x57 (div x665 262144)) (= x381 (mod (* x431 441711766194596082395824375185729628956870974218904739530401550323154944) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (not x134)) (and x134 (and (= x429 (div x939 1000000000000000000)) (= x588 x429) (<= 1000000000000000000 x939)))))) x507) (=> (and x815 (= 0 x678)) x474))) (=> (and (and (= x812 4) (= x237 x931) (= x256 x629) (= 27 x513) (= (* 100000000000000000000000 x217) x931) (= x687 x237)) x104) x315)))))
(assert (x268 x1004))
(assert (x313 x1003))
(assert (x268 x639))
(assert (x268 x109))
(assert (= (and x693 x777) x584))
(assert (x268 x621))
(assert (x268 x614))
(assert (x268 x34))
(assert (x268 x754))
(assert (x268 x509))
(assert (x268 x173))
(assert (x514 31536000))
(assert (x514 6277101735386680763835789423128438253588091106870490562560))
(assert (x514 6553499999999999999999999999))
(assert (x514 441711766194596082395824375185729628956870974218904739530401550323154944))
(assert (= (and (not x967) x480) x55))
(assert (x268 x347))
(assert (x475 x817))
(assert (x268 x66))
(assert (x268 x261))
(assert (= (x522 862718293348820473429344482784628181556388621521298319395315527974912) 0))
(assert (= (x36 x476 96) (div x476 79228162514264337593543950336)))
(assert (= (and x26 (not x733)) x442))
(assert (x268 x74))
(assert (x268 x535))
(assert (x268 x974))
(assert (x268 x290))
(assert (= (or x872 x344) x334))
(assert (x514 100000000000000))
(assert (x514 115792089237316195423570985008687907853269984665639564039457584007913129639936))
(assert (x268 x549))
(assert (x313 x627))
(assert (x514 411376139330301510538742295634145329387149138779864469507932160))
(assert (x268 x613))
(assert (= (x522 411376139330301510538742295634145329387149138779864469507932160) 0))
(assert (= x372 (and x480 x967)))
(assert (= x855 (and (not x766) x720)))
(assert (x268 x557))
(assert (x268 x153))
(assert (x268 x968))
(assert (x268 x105))
(assert (= x871 (and x827 (not x333))))
(assert (x268 x603))
(assert (x268 x735))
(assert (x268 x48))
(assert (x268 x16))
(assert (= x271 (=> (and (or (and (and (= x799 x757) (= x383 (* x124 100000000000000000000000)) (= x564 4) (= 27 x739) (= x383 x43) (= x660 x43)) x378) (and (and (= x301 (* x124 100000000000000000000000)) (= x810 x660) (= x301 x810) (= x799 x482) (= x197 4) (= 27 x446)) (not x378))) (and (not (>= (+ x604 x849) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x831 (+ x604 x849)) x757) (= x378 (> x757 x482)))) x42)))
(assert (=> (= x588 0) (= 0 (div x828 x588))))
(assert (x268 x279))
(assert (x268 x57))
(assert (x268 x757))
(assert (x268 x496))
(assert (x268 x738))
(assert (= (or x452 x19) x194))
(assert (x268 x975))
(assert (= (=> (and (and x320 (= x222 (= 0 x14)) (= (x700 (- x470 (mod (ite (> x343 x413) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x14) (= 1000000000000000000000000000 x192) (= (mod (* x336 x678) 115792089237316195423570985008687907853269984665640564039457584007913129639935) x413) (= (> x153 x678) x320) (= x470 (x700 (- x413 x343))) (= (mod (* x336 x678) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x343)) (or (and (not x222) (and (= (x700 (- x14 (mod (ite (< x343 x826) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x625) (= (mod (* x336 x678) 1000000000000000000000000000) x826) (= (x831 (+ x340 x447)) x487) (= x340 (mod (* 862718293348820473429344482784628181556388621521298319395315527974912 x625) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (mod (* 15501966263465142598656971426345627788199674109747006013765225610400761231029 x487) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x508) (= x447 (div x72 134217728)) (= (x700 (- x343 x826)) x72) (= x508 x587) (<= x14 999999999999999999999999999))) (and x222 (and (= x258 x587) (= (div x343 1000000000000000000000000000) x258))))) x113) x127))
(assert (x84 x627))
(assert (x268 x469))
(assert (x268 x451))
(assert (x268 x404))
(assert (x268 x800))
(assert (x268 x437))
(assert (= (div x92 26959946667150639794667015087019630673637144422540572481103610249216) (x36 x92 224)))
(assert (x268 x389))
(assert (x268 x537))
(assert (x268 x90))
(assert (x268 x156))
(assert (=> (= x144 0) (= (div x806 x144) 0)))
(assert (x268 x281))
(assert (x268 x660))
(assert (x768 x193))
(assert (x268 x323))
(assert (x268 x605))
(assert (= (and x145 x517) x344))
(assert (x268 x402))
(assert (x268 x464))
(assert (x268 x199))
(assert (x268 x94))
(assert (x268 x547))
(assert (x268 x516))
(assert (x71 x540))
(assert (x268 x311))
(assert (x268 x892))
(assert (x268 x716))
(assert (x268 x841))
(assert (x268 x177))
(assert (=> (= x731 0) (= (div x280 x731) 0)))
(assert (x268 x997))
(assert (x268 x958))
(assert (x268 x219))
(assert (x268 x787))
(assert (= x777 (or x430 x136 x180)))
(assert (x514 15501966263465142598656971426345627788199674109747006013765225610400761231029))
(assert (x268 x172))
(assert (x268 x419))
(assert (x268 x449))
(assert (x448 x922))
(assert (x268 x744))
(assert (x268 x162))
(assert (x268 x481))
(assert (x268 x601))
(assert (= x226 (or x372 x55)))
(assert (x268 x791))
(assert (x268 x297))
(assert (x909 x663))
(assert (x268 x903))
(assert (= x308 (=> (and (and (<= x196 1461501637330902918203684832716283019655932542975) (>= x898 0) (<= x492 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (< 0 (x657 x547)) x708) (<= x570 1461501637330902918203684832716283019655932542975) (>= 2 x559) (not (= x248 x570)) (>= x471 0) (<= x239 115792089237316195423570985008687907853269984665640564039457584007913129639935) x836 (>= 1461501637330902918203684832716283019655932542975 x547) (<= 1 x570) (= x416 36) (<= 1 x547) (<= x292 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= x32 1461501637330902918203684832716283019655932542975) (<= 0 x239) (<= x18 1461501637330902918203684832716283019655932542975) (<= 1 x248) (<= 0 x492) (>= 2 x898) x620 (<= 0 x292) (not (= x248 x547)) (= x321 x559) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x471) (<= x86 1461501637330902918203684832716283019655932542975) x708 (= (< 0 (x657 x248)) x620) (not (= x570 x547)) (<= 0 x559) (= (< 0 (x657 x570)) x836) (<= x248 1461501637330902918203684832716283019655932542975)) (and (and (not (> x943 x727)) (= (= 0 x943) x408) (= x893 x943) (= x741 false) (<= 1 x680) (= false x752) (= 371172950 x170) (not (< x694 x727)) (>= 127 x261) (= x993 x943) (= (x700 (- x694 1)) x727) (= x680 (x657 x248)) (>= 127 x261)) (and (<= 1 x22) (= x436 false) (= x138 2177768483) (= x928 36) (= x551 x791) (= x1000 128) (= false x919) (<= x458 127) (= x22 (x657 x570)) (= x628 (x657 x248)) (= x173 (x310 128)) (= false x167) (= x630 4008608923) (= x278 false) (= x155 false) (= (x73 32 2) x868) (= false x819) (<= x846 4294967295) (= x569 (+ x242 x868)) (= x173 x611) (>= 127 x533) (= x559 x993) (<= x173 4294967294) (= false x994) (= x242 x551) (= x321 x242) (= x846 (x959 x569)) (= x277 false) (<= 1 x628) (= false x137) (= 58712522155081554758111416936196854083347032101528093538124555458258380259328 x566) (= false x565) (= 36 x209) (<= x458 127) (<= x533 127)))) (and (=> (and (and (= x627 x25) (= x87 x63) (= x156 x1003)) x408) x887) (=> (and (not x408) (and (or (and (and (= x597 x707) (= x890 x499) (= 2 x943) (= x644 x67)) (not x954)) (and x954 (and (= x205 x597) (= x102 x644) (= x890 x852)))) (= (= x943 1) x954))) x1009)))))
(assert (x268 x933))
(assert (= (or x761 x699) x802))
(assert (x475 6277101735386680763835789423128438253588091106870490562560))
(assert (= (x522 100000000000000000000000) 0))
(assert (= 0 (x522 134217728)))
(assert (= (and x888 x489) x633))
(assert (= (=> (and (= x473 x540) (= x245 x171) (= x293 x176)) x62) x76))
(assert (x268 x185))
(assert (x268 x80))
(assert (x268 x3))
(assert (= (and (not x116) x956) x26))
(assert (x268 x202))
(assert (x268 x339))
(assert (= (x36 x709 96) (div x709 79228162514264337593543950336)))
(assert (x268 x818))
(assert (x268 x530))
(assert (x268 x291))
(assert (=> (= 0 x260) (= (div x144 x260) 0)))
(assert (x268 x110))
(assert (= x942 (or x655 x998)))
(assert (x502 x663))
(assert (x268 x88))
(assert (= (x522 58712522155081554758111416936196854083347032101528093538124555458258380259328) 0))
(assert (x268 x374))
(assert (x268 x928))
(assert (= (and (not x132) x747) x545))
(assert (x268 x811))
(assert (x268 x284))
(assert (x268 x228))
(assert (x475 x63))
(assert (= (x522 (x73 32 2)) (x73 32 2)))
(assert (x268 x217))
(assert (x268 x772))
(assert (x268 x13))
(assert (x268 x922))
(assert (x268 x676))
(assert (x268 x505))
(assert (x268 x93))
(assert (x268 x704))
(assert (x268 x411))
(assert (x268 x390))
(assert (= (x36 x295 224) (div x295 26959946667150639794667015087019630673637144422540572481103610249216)))
(assert (= (x36 x148 112) (div x148 5192296858534827628530496329220096)))
(assert (x268 x665))
(assert (x268 x20))
(assert (x268 x392))
(assert (x268 x345))
(assert (x268 x721))
(assert (x459 x721 x284))
(assert (x268 x995))
(assert (x268 x988))
(assert (x268 x126))
(assert (x268 x999))
(assert (x268 x1000))
(assert (x768 x540))
(assert (x268 x650))
(assert (x268 x64))
(assert (x268 x797))
(assert (x268 x882))
(assert (= (and x265 (not x168)) x249))
(assert (x268 x646))
(assert (x268 x360))
(assert (x268 x832))
(assert (x268 x779))
(assert (x268 x659))
(assert (= (and x954 x804) x960))
(assert (x268 x381))
(assert (x268 x764))
(assert (x521 2))
(assert (x514 999999999999999999999999999))
(assert (x268 x943))
(assert (x391 x973 2))
(assert (x268 x679))
(assert (= (x36 x496 96) (div x496 79228162514264337593543950336)))
(assert (x84 x293))
(assert (x268 x176))
(assert (x268 x785))
(assert (= (x522 x868) (x522 (+ x868 x242))))
(assert (x268 x861))
(assert (x475 26959535291011309493156476344723991336010898738574164086137773096960))
(assert (x268 x631))
(assert (= x106 (=> (and (= (div x573 x843) x879) (= x879 x142)) x236)))
(assert (x268 x458))
(assert (x268 x895))
(assert (x268 x456))
(assert (x268 x193))
(assert (= (and x815 x238) x373))
(assert (x268 x664))
(assert (x268 x846))
(assert (x268 x12))
(assert (= x430 (and x649 x104)))
(assert (x268 x499))
(assert (x268 x432))
(assert (x459 x375 x38))
(assert (x268 x164))
(assert (x514 262144))
(assert (= 0 (x522 6553499999999999999999999999)))
(assert (x268 x330))
(assert (x268 x824))
(assert (x268 x941))
(assert (x268 x178))
(assert (= (and (not x222) x194) x641))
(assert (x268 x326))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x73 32 2)))
(assert (= x283 (and (not x378) x538)))
(assert (x268 x533))
(assert (= (x522 2177768483) 0))
(assert (x268 x293))
(assert (= x125 (and x979 (not x552))))
(assert (x268 x542))
(assert (x268 x25))
(assert (x268 x553))
(assert (x268 x425))
(assert (x268 x894))
(assert (x268 x353))
(assert (x268 x39))
(assert (x268 x245))
(assert (x268 x511))
(assert (= (x36 x339 96) (div x339 79228162514264337593543950336)))
(assert (x268 x303))
(assert (x268 x852))
(assert (x268 x513))
(assert (= x579 (and x720 x766)))
(assert (x268 x482))
(assert (x475 65535))
(assert (x268 x101))
(assert (= (x36 x985 96) (div x985 79228162514264337593543950336)))
(assert (= (x522 999999999999999999) 0))
(assert (x268 x534))
(assert (x268 x938))
(assert (= x951 (and x804 (not x954))))
(assert (x268 x8))
(assert (x268 x767))
(assert (x268 x368))
(assert (x268 x314))
(assert (x268 x220))
(assert (x268 x630))
(assert (= (or x871 x6) x130))
(assert (x268 x625))
(assert (x268 x957))
(assert (x768 x63))
(assert (= x1008 (and (not x815) x238)))
(assert (x268 x192))
(assert (x268 x597))
(assert (x268 x188))
(assert (x268 x473))
(assert (x268 x7))
(assert (= (or x960 x951) x218))
(assert (x475 x245))
(assert (x268 x366))
(assert (x268 x840))
(assert (= (div x457 411376139330301510538742295639337626245683966408394965837152256) (x36 x457 208)))
(assert (x459 x880 x437))
(assert (> (x73 32 2) 10000))
(assert (x268 x357))
(assert (not x308))
(assert (x84 x549))
(assert (x268 x246))
(assert (x268 x98))
(assert (= (and x408 x992) x877))
(assert (x268 x340))
(assert (x268 x615))
(assert (x268 x111))
(assert (=> (= 0 x260) (= 0 (div x342 x260))))
(assert (x268 x689))
(assert (= (and x378 x538) x853))
(assert (x268 x363))
(assert (x268 x865))
(assert (x268 x528))
(assert (x268 x981))
(assert (x268 x526))
(assert (= (or x125 x743) x538))
(assert (= (x36 x505 208) (div x505 411376139330301510538742295639337626245683966408394965837152256)))
(assert (x268 x792))
(assert (x866 x144 x771))
(assert (= x979 (or x545 x835)))
(assert (= (=> (and (= x537 x263) (= x64 x549) (= x631 x663)) x574) x210))
(assert (= (x522 x410) (x522 (+ x410 x285))))
(assert (x268 x166))
(assert (x268 x487))
(assert (x268 x908))
(assert (x268 x146))
(assert (x268 x17))
(assert (x268 x92))
(assert (= 0 (x522 1361925195015220700152000000000000000000000000000)))
(assert (x268 x590))
(assert (x268 x750))
(assert (x268 x119))
(assert (x268 x151))
(assert (x521 x973))
(assert (x268 x484))
(assert (x268 x40))
(assert (x268 x663))
(assert (= x107 (or x855 x579)))
(assert (x268 x230))
(assert (= x19 (and x728 x334)))
(assert (x268 x662))
(assert (x268 x769))
(assert (= 0 (x522 4266371907)))
(assert (x514 5192296858534827628530496329154560))
(assert (= x582 (or x641 x434)))
(assert (x268 x788))
(assert (x268 x237))
(assert (x268 x891))
(assert (x268 x906))
(assert (x268 x87))
(check-sat)
(exit)
