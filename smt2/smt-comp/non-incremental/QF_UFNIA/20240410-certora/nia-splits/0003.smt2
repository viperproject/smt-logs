(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Certora
Generated on: 2024-04-10
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x729 () Int)
(declare-fun x1047 () Bool)
(declare-fun x502 () Bool)
(declare-fun x383 () Int)
(declare-fun x391 () Bool)
(declare-fun x384 () Int)
(declare-fun x701 (Int) Int)
(declare-fun x41 () Int)
(declare-fun x667 () Int)
(declare-fun x867 () Bool)
(declare-fun x771 () Int)
(declare-fun x819 () Int)
(declare-fun x860 () Int)
(declare-fun x55 () Bool)
(declare-fun x177 () Int)
(declare-fun x588 () Int)
(declare-fun x1115 () Int)
(declare-fun x522 () Int)
(declare-fun x221 () Int)
(declare-fun x689 () Bool)
(declare-fun x217 () Int)
(declare-fun x743 () Int)
(declare-fun x947 () Int)
(declare-fun x183 () Int)
(declare-fun x962 () Int)
(declare-fun x232 () Int)
(declare-fun x292 () Int)
(declare-fun x719 () Bool)
(declare-fun x671 () Int)
(declare-fun x569 () Bool)
(declare-fun x319 (Int Int Int) Int)
(declare-fun x1006 () Bool)
(declare-fun x793 () Int)
(declare-fun x840 () Bool)
(declare-fun x359 () Bool)
(declare-fun x49 () Int)
(declare-fun x452 () Int)
(declare-fun x78 () Int)
(declare-fun x251 () Int)
(declare-fun x301 (Int) Int)
(declare-fun x27 () Int)
(declare-fun x878 () Bool)
(declare-fun x214 () Int)
(declare-fun x982 () Int)
(declare-fun x912 () Int)
(declare-fun x466 () Int)
(declare-fun x143 () Bool)
(declare-fun x1057 () Bool)
(declare-fun x786 () Bool)
(declare-fun x879 () Int)
(declare-fun x563 () Bool)
(declare-fun x506 () Int)
(declare-fun x593 () Bool)
(declare-fun x277 () Int)
(declare-fun x289 () Bool)
(declare-fun x675 () Int)
(declare-fun x238 () Bool)
(declare-fun x288 (Int) Int)
(declare-fun x583 () Bool)
(declare-fun x711 () Bool)
(declare-fun x351 () Bool)
(declare-fun x283 () Int)
(declare-fun x726 () Int)
(declare-fun x486 () Int)
(declare-fun x1090 () Int)
(declare-fun x964 () Int)
(declare-fun x306 () Bool)
(declare-fun x71 (Int Int) Int)
(declare-fun x2 () Int)
(declare-fun x1093 () Bool)
(declare-fun x139 () Int)
(declare-fun x257 () Int)
(declare-fun x25 () Bool)
(declare-fun x409 () Int)
(declare-fun x814 () Bool)
(declare-fun x448 () Int)
(declare-fun x966 () Int)
(declare-fun x932 () Int)
(declare-fun x210 () Int)
(declare-fun x939 () Int)
(declare-fun x282 () Int)
(declare-fun x822 () Bool)
(declare-fun x1105 (Int) Int)
(declare-fun x774 () Bool)
(declare-fun x1066 () Bool)
(declare-fun x927 () Bool)
(declare-fun x1109 (Int) Int)
(declare-fun x843 () Bool)
(declare-fun x930 () Int)
(declare-fun x756 () Int)
(declare-fun x601 () Int)
(declare-fun x681 () Bool)
(declare-fun x310 () Int)
(declare-fun x1137 () Bool)
(declare-fun x406 () Int)
(declare-fun x223 () Int)
(declare-fun x159 () Int)
(declare-fun x530 () Int)
(declare-fun x493 () Int)
(declare-fun x1067 () Int)
(declare-fun x645 () Int)
(declare-fun x721 () Bool)
(declare-fun x1127 () Int)
(declare-fun x354 () Int)
(declare-fun x405 () Bool)
(declare-fun x854 () Int)
(declare-fun x811 () Int)
(declare-fun x1075 () Bool)
(declare-fun x258 () Int)
(declare-fun x801 () Int)
(declare-fun x26 () Int)
(declare-fun x648 () Int)
(declare-fun x732 () Bool)
(declare-fun x1024 () Int)
(declare-fun x132 () Int)
(declare-fun x81 () Int)
(declare-fun x664 () Int)
(declare-fun x906 () Bool)
(declare-fun x1059 () Int)
(declare-fun x810 () Bool)
(declare-fun x917 () Int)
(declare-fun x15 () Int)
(declare-fun x150 () Int)
(declare-fun x579 () Int)
(declare-fun x462 () Bool)
(declare-fun x209 () Bool)
(declare-fun x1065 () Int)
(declare-fun x162 () Int)
(declare-fun x806 () Int)
(declare-fun x144 () Int)
(declare-fun x477 () Bool)
(declare-fun x265 () Int)
(declare-fun x913 () Bool)
(declare-fun x122 () Int)
(declare-fun x1030 () Int)
(declare-fun x965 (Int) Int)
(declare-fun x720 () Bool)
(declare-fun x1116 () Bool)
(declare-fun x148 () Bool)
(declare-fun x861 () Int)
(declare-fun x908 () Int)
(declare-fun x407 () Int)
(declare-fun x320 () Bool)
(declare-fun x412 () Int)
(declare-fun x170 () Int)
(declare-fun x212 () Int)
(declare-fun x871 () Int)
(declare-fun x998 () Bool)
(declare-fun x465 () Int)
(declare-fun x233 () Int)
(declare-fun x444 () Bool)
(declare-fun x976 (Int) Int)
(declare-fun x1103 () Int)
(declare-fun x1015 () Int)
(declare-fun x620 () Int)
(declare-fun x923 () Int)
(declare-fun x137 () Int)
(declare-fun x461 () Bool)
(declare-fun x752 (Int) Int)
(declare-fun x651 () Int)
(declare-fun x371 () Bool)
(declare-fun x468 () Int)
(declare-fun x398 () Int)
(declare-fun x102 () Int)
(declare-fun x862 () Bool)
(declare-fun x3 (Int) Int)
(declare-fun x702 () Int)
(declare-fun x308 () Int)
(declare-fun x603 () Int)
(declare-fun x1071 () Bool)
(declare-fun x175 (Int) Int)
(declare-fun x1039 () Int)
(declare-fun x821 (Int) Int)
(declare-fun x219 () Int)
(declare-fun x535 () Int)
(declare-fun x586 () Int)
(declare-fun x507 () Bool)
(declare-fun x1058 () Int)
(declare-fun x194 () Int)
(declare-fun x178 () Bool)
(declare-fun x550 () Int)
(declare-fun x1104 () Int)
(declare-fun x296 () Int)
(declare-fun x665 () Int)
(declare-fun x649 () Int)
(declare-fun x42 () Bool)
(declare-fun x1078 () Int)
(declare-fun x419 () Bool)
(declare-fun x785 () Bool)
(declare-fun x960 () Int)
(declare-fun x570 () Bool)
(declare-fun x920 () Int)
(declare-fun x573 () Int)
(declare-fun x429 () Int)
(declare-fun x988 () Bool)
(declare-fun x874 () Int)
(declare-fun x740 () Bool)
(declare-fun x865 () Bool)
(declare-fun x392 () Int)
(declare-fun x718 () Bool)
(declare-fun x972 () Int)
(declare-fun x528 () Int)
(declare-fun x1124 () Int)
(declare-fun x577 () Bool)
(declare-fun x1129 () Int)
(declare-fun x974 () Int)
(declare-fun x685 () Bool)
(declare-fun x1072 () Int)
(declare-fun x782 () Int)
(declare-fun x780 () Int)
(declare-fun x1052 () Int)
(declare-fun x473 (Int) Int)
(declare-fun x883 () Int)
(declare-fun x605 () Int)
(declare-fun x474 () Bool)
(declare-fun x555 () Int)
(declare-fun x1133 () Int)
(declare-fun x907 () Int)
(declare-fun x286 () Int)
(declare-fun x239 () Bool)
(declare-fun x174 () Int)
(declare-fun x694 () Int)
(declare-fun x118 () Int)
(declare-fun x622 () Int)
(declare-fun x969 () Int)
(declare-fun x858 () Bool)
(declare-fun x508 () Int)
(declare-fun x905 () Bool)
(declare-fun x300 () Int)
(declare-fun x956 () Int)
(declare-fun x943 () Int)
(declare-fun x312 () Int)
(declare-fun x641 () Bool)
(declare-fun x745 () Int)
(declare-fun x640 () Int)
(declare-fun x560 () Bool)
(declare-fun x331 () Int)
(declare-fun x844 () Bool)
(declare-fun x29 () Int)
(declare-fun x804 (Int) Int)
(declare-fun x1046 () Int)
(declare-fun x488 () Int)
(declare-fun x291 () Int)
(declare-fun x161 () Int)
(declare-fun x1120 () Int)
(declare-fun x179 () Bool)
(declare-fun x753 () Bool)
(declare-fun x687 () Int)
(declare-fun x146 () Int)
(declare-fun x104 () Int)
(declare-fun x724 () Bool)
(declare-fun x642 () Bool)
(declare-fun x297 () Bool)
(declare-fun x503 () Bool)
(declare-fun x1091 () Int)
(declare-fun x727 () Bool)
(declare-fun x887 () Int)
(declare-fun x157 () Bool)
(declare-fun x428 () Int)
(declare-fun x812 () Int)
(declare-fun x79 () Int)
(declare-fun x1012 () Int)
(declare-fun x10 () Bool)
(declare-fun x1069 () Int)
(declare-fun x1004 () Int)
(declare-fun x582 () Int)
(declare-fun x558 () Bool)
(declare-fun x949 () Int)
(declare-fun x147 () Int)
(declare-fun x713 () Int)
(declare-fun x546 () Bool)
(declare-fun x501 () Int)
(declare-fun x171 () Bool)
(declare-fun x547 (Int Int) Int)
(declare-fun x725 (Int) Int)
(declare-fun x624 () Int)
(declare-fun x76 () Bool)
(declare-fun x807 () Bool)
(declare-fun x1094 () Int)
(declare-fun x859 () Bool)
(declare-fun x186 () Int)
(declare-fun x778 () Int)
(declare-fun x1113 () Bool)
(declare-fun x700 () Bool)
(declare-fun x827 () Int)
(declare-fun x433 () Int)
(declare-fun x940 () Int)
(declare-fun x165 () Int)
(declare-fun x495 () Int)
(declare-fun x1054 () Int)
(declare-fun x978 () Int)
(declare-fun x417 () Int)
(declare-fun x206 () Int)
(declare-fun x796 () Int)
(declare-fun x1114 () Int)
(declare-fun x759 () Int)
(declare-fun x364 () Int)
(declare-fun x848 () Int)
(declare-fun x1079 () Int)
(declare-fun x971 () Int)
(declare-fun x130 () Bool)
(declare-fun x505 () Bool)
(declare-fun x17 () Int)
(declare-fun x72 () Bool)
(declare-fun x338 () Int)
(declare-fun x201 (Int) Int)
(declare-fun x543 () Int)
(declare-fun x881 () Bool)
(declare-fun x360 () Int)
(declare-fun x344 () Bool)
(declare-fun x458 () Int)
(declare-fun x469 () Int)
(declare-fun x234 () Int)
(declare-fun x309 () Int)
(declare-fun x314 () Int)
(declare-fun x348 () Int)
(declare-fun x1096 () Int)
(declare-fun x802 () Int)
(declare-fun x441 () Int)
(declare-fun x36 () Int)
(declare-fun x198 () Int)
(declare-fun x789 () Int)
(declare-fun x1080 () Int)
(declare-fun x636 () Int)
(declare-fun x1045 () Bool)
(declare-fun x58 () Bool)
(declare-fun x515 () Bool)
(declare-fun x231 () Int)
(declare-fun x975 () Int)
(declare-fun x551 () Int)
(declare-fun x332 () Bool)
(declare-fun x1002 () Int)
(declare-fun x82 () Int)
(declare-fun x33 () Int)
(declare-fun x750 () Int)
(declare-fun x445 () Int)
(declare-fun x931 () Bool)
(declare-fun x1082 () Int)
(declare-fun x938 () Bool)
(declare-fun x1073 () Int)
(declare-fun x167 () Bool)
(declare-fun x606 () Int)
(declare-fun x261 () Int)
(declare-fun x824 () Int)
(declare-fun x152 () Int)
(declare-fun x542 () Bool)
(declare-fun x604 () Int)
(declare-fun x375 () Bool)
(declare-fun x200 () Int)
(declare-fun x660 () Int)
(declare-fun x839 (Int) Int)
(declare-fun x880 () Int)
(declare-fun x572 () Int)
(declare-fun x50 () Bool)
(declare-fun x479 () Bool)
(declare-fun x526 () Int)
(declare-fun x738 () Bool)
(declare-fun x911 () Int)
(declare-fun x1041 () Int)
(declare-fun x307 () Int)
(declare-fun x464 () Int)
(declare-fun x1013 (Int) Int)
(declare-fun x340 () Int)
(declare-fun x882 () Bool)
(declare-fun x180 () Int)
(declare-fun x533 () Int)
(declare-fun x271 (Int) Bool)
(declare-fun x135 () Int)
(declare-fun x829 () Int)
(declare-fun x915 () Int)
(declare-fun x247 () Bool)
(declare-fun x504 () Int)
(declare-fun x373 () Bool)
(declare-fun x204 () Int)
(declare-fun x245 () Bool)
(declare-fun x590 () Bool)
(declare-fun x434 () Bool)
(declare-fun x898 (Int) Int)
(declare-fun x899 () Int)
(declare-fun x476 () Int)
(declare-fun x394 () Int)
(declare-fun x173 () Int)
(declare-fun x1085 () Bool)
(declare-fun x329 () Int)
(declare-fun x414 () Int)
(declare-fun x891 () Int)
(declare-fun x1125 () Int)
(declare-fun x388 () Int)
(declare-fun x66 () Bool)
(declare-fun x95 () Int)
(declare-fun x562 () Bool)
(declare-fun x32 () Int)
(declare-fun x382 () Int)
(declare-fun x1053 () Int)
(declare-fun x454 () Bool)
(declare-fun x22 () Int)
(declare-fun x45 () Int)
(declare-fun x1102 () Int)
(declare-fun x1134 () Int)
(declare-fun x460 () Int)
(declare-fun x1131 () Int)
(declare-fun x519 () Bool)
(declare-fun x256 () Bool)
(declare-fun x957 () Int)
(declare-fun x65 () Bool)
(declare-fun x963 () Int)
(declare-fun x538 () Int)
(declare-fun x630 (Int) Int)
(declare-fun x644 () Int)
(declare-fun x691 () Int)
(declare-fun x64 () Int)
(declare-fun x1050 () Int)
(declare-fun x184 () Int)
(declare-fun x531 (Int) Int)
(declare-fun x372 () Int)
(declare-fun x580 () Int)
(declare-fun x491 () Bool)
(declare-fun x926 () Int)
(declare-fun x438 () Int)
(declare-fun x240 () Int)
(declare-fun x330 () Bool)
(declare-fun x266 () Int)
(declare-fun x746 () Bool)
(declare-fun x591 () Bool)
(declare-fun x191 () Bool)
(declare-fun x626 () Int)
(declare-fun x831 () Int)
(declare-fun x140 () Int)
(declare-fun x1119 () Int)
(declare-fun x1068 () Int)
(declare-fun x342 () Int)
(declare-fun x1098 () Bool)
(declare-fun x1062 () Int)
(declare-fun x872 () Bool)
(declare-fun x518 () Int)
(declare-fun x835 () Int)
(declare-fun x571 () Int)
(declare-fun x192 () Bool)
(declare-fun x597 () Int)
(declare-fun x841 () Int)
(declare-fun x987 () Int)
(declare-fun x61 () Int)
(declare-fun x705 () Int)
(declare-fun x552 () Bool)
(declare-fun x437 () Bool)
(declare-fun x1037 () Int)
(declare-fun x94 () Int)
(declare-fun x599 (Int) Int)
(declare-fun x1141 () Int)
(declare-fun x797 () Int)
(declare-fun x93 () Int)
(declare-fun x864 () Int)
(declare-fun x655 () Int)
(declare-fun x1008 () Bool)
(declare-fun x1043 () Bool)
(declare-fun x587 () Int)
(declare-fun x88 () Int)
(declare-fun x730 () Int)
(declare-fun x108 () Int)
(declare-fun x294 () Int)
(declare-fun x1014 () Bool)
(declare-fun x313 () Int)
(declare-fun x959 (Int) Int)
(declare-fun x85 () Bool)
(declare-fun x158 () Int)
(declare-fun x23 () Int)
(declare-fun x38 () Bool)
(declare-fun x427 () Int)
(declare-fun x311 () Bool)
(declare-fun x126 () Bool)
(declare-fun x825 () Bool)
(declare-fun x129 () Int)
(declare-fun x138 () Int)
(declare-fun x803 () Bool)
(declare-fun x901 () Int)
(declare-fun x863 () Bool)
(declare-fun x1028 () Int)
(declare-fun x517 () Bool)
(declare-fun x378 () Int)
(declare-fun x666 () Bool)
(declare-fun x800 () Int)
(declare-fun x612 () Bool)
(declare-fun x293 () Int)
(declare-fun x197 () Int)
(declare-fun x950 () Bool)
(declare-fun x228 () Int)
(declare-fun x299 () Int)
(declare-fun x679 () Int)
(declare-fun x999 () Int)
(declare-fun x83 () Bool)
(declare-fun x777 () Int)
(declare-fun x431 () Int)
(declare-fun x69 () Bool)
(declare-fun x222 () Int)
(declare-fun x755 () Bool)
(declare-fun x904 () Bool)
(declare-fun x698 () Int)
(declare-fun x775 () Bool)
(declare-fun x914 () Bool)
(declare-fun x39 () Bool)
(declare-fun x119 () Int)
(declare-fun x492 () Bool)
(declare-fun x285 () Bool)
(declare-fun x787 () Int)
(declare-fun x253 () Int)
(declare-fun x100 (Int) Int)
(declare-fun x1036 () Bool)
(declare-fun x712 () Int)
(declare-fun x1142 () Bool)
(declare-fun x24 () Int)
(declare-fun x381 () Int)
(declare-fun x176 () Bool)
(declare-fun x366 () Bool)
(declare-fun x576 () Int)
(declare-fun x48 () Int)
(declare-fun x983 () Int)
(declare-fun x886 () Int)
(declare-fun x668 (Int) Int)
(declare-fun x709 () Bool)
(declare-fun x279 () Int)
(declare-fun x472 () Int)
(declare-fun x1032 () Bool)
(declare-fun x250 () Int)
(declare-fun x1005 () Int)
(declare-fun x267 () Int)
(declare-fun x990 () Int)
(declare-fun x638 () Int)
(declare-fun x529 () Bool)
(declare-fun x205 () Int)
(declare-fun x830 () Int)
(declare-fun x699 () Bool)
(declare-fun x14 () Int)
(declare-fun x134 () Int)
(declare-fun x989 () Int)
(declare-fun x68 () Int)
(declare-fun x190 (Int Int) Int)
(declare-fun x615 () Int)
(declare-fun x1025 () Int)
(declare-fun x565 () Int)
(declare-fun x224 () Int)
(declare-fun x195 () Int)
(declare-fun x302 () Int)
(declare-fun x611 () Int)
(declare-fun x356 () Int)
(declare-fun x218 () Int)
(declare-fun x826 () Int)
(declare-fun x1056 () Bool)
(declare-fun x275 () Bool)
(declare-fun x263 () Int)
(declare-fun x368 () Bool)
(declare-fun x243 () Bool)
(declare-fun x455 () Int)
(declare-fun x1081 () Int)
(declare-fun x1023 () Bool)
(declare-fun x274 () Int)
(declare-fun x463 () Int)
(declare-fun x317 () Int)
(declare-fun x799 () Bool)
(declare-fun x467 (Int Int) Int)
(declare-fun x346 () Int)
(declare-fun x393 (Int) Int)
(declare-fun x124 () Bool)
(declare-fun x1031 () Int)
(declare-fun x54 () Int)
(declare-fun x1074 () Bool)
(declare-fun x1139 () Int)
(declare-fun x227 () Int)
(declare-fun x99 () Bool)
(declare-fun x424 () Int)
(declare-fun x31 () Int)
(declare-fun x873 () Int)
(declare-fun x674 (Int) Int)
(declare-fun x117 () Int)
(declare-fun x211 () Int)
(declare-fun x561 () Int)
(declare-fun x1061 () Int)
(declare-fun x823 () Bool)
(declare-fun x142 () Int)
(declare-fun x328 () Int)
(declare-fun x399 () Int)
(declare-fun x818 () Bool)
(declare-fun x765 () Bool)
(declare-fun x1044 () Int)
(declare-fun x677 () Int)
(declare-fun x298 () Int)
(declare-fun x248 () Int)
(declare-fun x44 () Bool)
(declare-fun x415 () Int)
(declare-fun x628 () Bool)
(declare-fun x888 () Int)
(declare-fun x643 () Int)
(declare-fun x110 () Bool)
(declare-fun x318 () Int)
(declare-fun x520 () Int)
(declare-fun x353 () Bool)
(declare-fun x657 () Bool)
(declare-fun x1022 () Int)
(declare-fun x970 (Int) Int)
(declare-fun x838 () Bool)
(declare-fun x400 () Int)
(declare-fun x877 () Bool)
(declare-fun x280 () Int)
(declare-fun x815 () Int)
(declare-fun x741 () Bool)
(declare-fun x345 () Bool)
(declare-fun x244 () Bool)
(declare-fun x516 () Int)
(declare-fun x556 () Int)
(declare-fun x1118 () Int)
(declare-fun x903 () Bool)
(declare-fun x607 () Int)
(declare-fun x259 () Int)
(declare-fun x934 (Int) Int)
(declare-fun x111 () Bool)
(declare-fun x1112 () Int)
(declare-fun x284 () Bool)
(declare-fun x524 () Int)
(declare-fun x457 () Bool)
(declare-fun x1089 () Bool)
(declare-fun x136 () Bool)
(declare-fun x922 (Int) Int)
(declare-fun x498 () Bool)
(declare-fun x410 () Int)
(declare-fun x321 () Bool)
(declare-fun x1106 () Int)
(declare-fun x379 () Int)
(declare-fun x1108 () Bool)
(declare-fun x101 () Int)
(declare-fun x86 (Int) Int)
(declare-fun x30 () Int)
(declare-fun x798 () Int)
(declare-fun x385 () Int)
(declare-fun x751 () Bool)
(declare-fun x549 () Int)
(declare-fun x541 () Int)
(declare-fun x747 () Bool)
(declare-fun x961 () Int)
(declare-fun x255 () Int)
(declare-fun x1136 () Int)
(declare-fun x1 () Int)
(declare-fun x188 () Int)
(declare-fun x229 () Int)
(declare-fun x851 () Bool)
(declare-fun x16 () Int)
(declare-fun x828 () Int)
(declare-fun x449 () Bool)
(declare-fun x514 () Int)
(declare-fun x333 () Int)
(declare-fun x637 () Bool)
(declare-fun x1048 () Int)
(declare-fun x757 () Bool)
(declare-fun x895 () Int)
(declare-fun x889 () Int)
(declare-fun x869 () Int)
(declare-fun x816 () Int)
(declare-fun x1126 () Int)
(declare-fun x367 () Int)
(declare-fun x418 () Bool)
(declare-fun x1111 () Int)
(declare-fun x697 () Bool)
(declare-fun x1011 (Int) Int)
(declare-fun x760 () Bool)
(declare-fun x28 () Int)
(declare-fun x116 () Int)
(declare-fun x598 () Int)
(declare-fun x813 () Int)
(declare-fun x984 () Bool)
(declare-fun x337 () Int)
(declare-fun x4 () Int)
(declare-fun x397 () Int)
(declare-fun x900 () Int)
(declare-fun x34 () Int)
(declare-fun x585 () Bool)
(declare-fun x656 () Int)
(declare-fun x1099 () Bool)
(declare-fun x935 () Int)
(declare-fun x478 () Int)
(declare-fun x992 () Int)
(declare-fun x820 () Int)
(declare-fun x602 () Int)
(declare-fun x377 () Bool)
(declare-fun x422 () Bool)
(declare-fun x40 () Int)
(declare-fun x723 () Int)
(declare-fun x220 () Int)
(declare-fun x596 () Int)
(declare-fun x341 () Bool)
(declare-fun x783 () Int)
(declare-fun x77 () Int)
(declare-fun x991 () Int)
(declare-fun x534 (Int) Int)
(declare-fun x1110 () Int)
(declare-fun x951 () Bool)
(declare-fun x185 () Int)
(declare-fun x1063 () Int)
(declare-fun x387 () Int)
(declare-fun x74 () Int)
(declare-fun x985 () Int)
(declare-fun x1088 () Bool)
(declare-fun x532 () Bool)
(declare-fun x1009 () Int)
(declare-fun x63 () Int)
(declare-fun x659 (Int) Int)
(declare-fun x704 () Int)
(declare-fun x287 () Int)
(declare-fun x909 () Int)
(declare-fun x89 () Int)
(declare-fun x942 () Int)
(declare-fun x578 (Int) Int)
(declare-fun x842 () Int)
(declare-fun x658 () Int)
(declare-fun x855 () Int)
(declare-fun x97 () Bool)
(declare-fun x447 () Bool)
(declare-fun x1042 () Int)
(declare-fun x202 () Bool)
(declare-fun x994 () Bool)
(declare-fun x973 () Int)
(declare-fun x748 () Bool)
(declare-fun x19 () Int)
(declare-fun x995 () Int)
(declare-fun x809 () Bool)
(declare-fun x131 () Int)
(declare-fun x56 () Int)
(declare-fun x156 () Int)
(declare-fun x350 () Int)
(declare-fun x654 () Int)
(declare-fun x35 () Int)
(declare-fun x426 () Int)
(declare-fun x355 () Bool)
(declare-fun x446 () Int)
(declare-fun x781 () Int)
(declare-fun x249 () Int)
(declare-fun x471 () Bool)
(declare-fun x728 () Int)
(declare-fun x1055 () Int)
(declare-fun x374 () Bool)
(declare-fun x788 () Int)
(declare-fun x981 () Int)
(declare-fun x376 () Int)
(declare-fun x977 () Bool)
(declare-fun x357 () Int)
(declare-fun x295 () Int)
(declare-fun x768 () Bool)
(declare-fun x215 () Int)
(declare-fun x1049 () Int)
(declare-fun x876 () Int)
(declare-fun x435 () Int)
(declare-fun x919 () Bool)
(declare-fun x334 () Bool)
(declare-fun x443 () Int)
(declare-fun x389 () Int)
(declare-fun x1021 () Bool)
(declare-fun x736 () Int)
(declare-fun x1020 () Int)
(declare-fun x734 () Int)
(declare-fun x885 () Int)
(declare-fun x1101 () Bool)
(declare-fun x523 () Int)
(declare-fun x581 () Bool)
(declare-fun x339 () Int)
(declare-fun x1138 () Bool)
(declare-fun x1076 () Bool)
(declare-fun x1077 () Int)
(declare-fun x1097 (Int Int) Int)
(declare-fun x845 () Bool)
(declare-fun x763 () Int)
(declare-fun x715 () Int)
(declare-fun x1130 () Int)
(declare-fun x386 () Bool)
(declare-fun x625 () Bool)
(declare-fun x1060 () Int)
(declare-fun x278 () Int)
(declare-fun x1135 () Int)
(declare-fun x1095 () Bool)
(declare-fun x199 () Bool)
(declare-fun x226 () Int)
(declare-fun x766 () Int)
(declare-fun x281 () Int)
(declare-fun x145 () Int)
(declare-fun x264 () Bool)
(declare-fun x369 () Int)
(declare-fun x396 (Int Int) Int)
(declare-fun x779 () Int)
(declare-fun x955 () Int)
(declare-fun x440 () Bool)
(declare-fun x633 () Int)
(declare-fun x70 () Int)
(declare-fun x986 () Int)
(declare-fun x564 () Bool)
(declare-fun x47 () Int)
(declare-fun x902 () Int)
(declare-fun x836 () Bool)
(declare-fun x133 () Bool)
(declare-fun x683 () Int)
(declare-fun x693 () Int)
(declare-fun x1000 () Int)
(declare-fun x548 () Bool)
(declare-fun x230 () Int)
(declare-fun x968 () Int)
(declare-fun x650 () Bool)
(declare-fun x5 () Bool)
(declare-fun x742 () Int)
(declare-fun x51 () Int)
(declare-fun x362 () Int)
(declare-fun x792 () Bool)
(declare-fun x834 () Int)
(declare-fun x236 () Bool)
(declare-fun x323 () Int)
(declare-fun x1143 () Int)
(declare-fun x37 () Int)
(declare-fun x459 () Bool)
(declare-fun x1035 () Bool)
(declare-fun x1144 () Bool)
(declare-fun x1026 () Bool)
(declare-fun x714 () Int)
(declare-fun x1001 () Int)
(declare-fun x722 () Int)
(declare-fun x635 () Int)
(declare-fun x795 () Int)
(declare-fun x442 () Int)
(declare-fun x1128 () Int)
(declare-fun x716 () Int)
(declare-fun x164 () Bool)
(declare-fun x784 () Int)
(declare-fun x456 () Int)
(declare-fun x80 () Int)
(declare-fun x494 () Int)
(declare-fun x1027 () Int)
(declare-fun x936 () Bool)
(declare-fun x566 () Bool)
(declare-fun x327 () Int)
(declare-fun x18 () Bool)
(declare-fun x921 () Bool)
(declare-fun x595 () Int)
(declare-fun x241 (Int) Int)
(declare-fun x1064 () Bool)
(declare-fun x794 () Bool)
(declare-fun x554 () Int)
(declare-fun x1107 () Bool)
(declare-fun x536 () Int)
(declare-fun x416 (Int) Int)
(declare-fun x1029 () Int)
(declare-fun x553 () Bool)
(declare-fun x717 () Int)
(declare-fun x352 () Int)
(declare-fun x6 () Int)
(declare-fun x1038 () Bool)
(declare-fun x653 () Int)
(declare-fun x9 () Int)
(declare-fun x616 () Int)
(declare-fun x850 () Bool)
(declare-fun x896 () Int)
(declare-fun x617 (Int) Int)
(declare-fun x613 () Int)
(declare-fun x1019 () Int)
(declare-fun x670 () Int)
(declare-fun x325 () Int)
(declare-fun x731 () Int)
(declare-fun x1092 () Int)
(declare-fun x696 () Int)
(declare-fun x946 () Int)
(declare-fun x832 () Int)
(declare-fun x216 () Bool)
(declare-fun x735 () Int)
(declare-fun x933 () Int)
(declare-fun x688 () Int)
(declare-fun x676 () Int)
(declare-fun x237 () Int)
(declare-fun x925 () Int)
(declare-fun x500 () Int)
(declare-fun x678 () Int)
(declare-fun x402 (Int) Int)
(declare-fun x837 () Int)
(declare-fun x7 () Bool)
(declare-fun x315 () Int)
(declare-fun x890 () Bool)
(declare-fun x1016 () Bool)
(declare-fun x623 () Bool)
(declare-fun x639 (Int) Int)
(declare-fun x59 () Int)
(declare-fun x575 () Int)
(declare-fun x75 () Int)
(declare-fun x773 () Int)
(declare-fun x439 () Bool)
(declare-fun x114 () Int)
(declare-fun x1070 () Bool)
(declare-fun x57 () Int)
(declare-fun x584 (Int) Int)
(declare-fun x490 () Int)
(declare-fun x875 () Int)
(declare-fun x739 () Int)
(declare-fun x128 () Bool)
(declare-fun x629 () Bool)
(declare-fun x153 (Int) Int)
(declare-fun x669 () Bool)
(declare-fun x326 () Bool)
(declare-fun x706 () Int)
(declare-fun x322 () Bool)
(declare-fun x1122 () Int)
(declare-fun x937 () Int)
(define-fun x475 ((x680 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x680) (>= x680 0)) x680 (- x680 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x1087 ((x680 Int)) Int (ite (and (< x680 0) (>= x680 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x680 115792089237316195423570985008687907853269984665640564039457584007913129639936) x680))
(define-fun x272 ((x764 Int)) Bool (and (>= x764 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x764)))
(define-fun x897 ((x764 Int)) Bool (and (<= 0 x764) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x764)))
(define-fun x91 ((x764 Int)) Bool (and (= (x396 x764 115792089237316195423570985008687907853269984665640564039457584007913129639935) x764) (= x764 (x396 115792089237316195423570985008687907853269984665640564039457584007913129639935 x764))))
(define-fun x53 ((x764 Int)) Bool (and (= (x396 0 x764) 0) (= (x396 x764 0) 0)))
(define-fun x481 ((x764 Int)) Bool (= (x396 x764 x764) x764))
(define-fun x115 ((x764 Int)) Bool (and (x91 x764) (x481 x764) (x53 x764)))
(define-fun x483 ((x764 Int) (x1084 Int)) Bool (= (x396 x764 x1084) (x396 x1084 x764)))
(define-fun x592 ((x764 Int) (x1084 Int)) Bool (and (=> (>= x1084 0) (>= x1084 (x396 x764 x1084))) (<= 0 (x396 x764 x1084)) (=> (<= 0 x764) (<= (x396 x764 x1084) x764))))
(define-fun x411 ((x764 Int) (x1084 Int)) Bool (and (x592 x764 x1084) (x483 x764 x1084)))
(define-fun x316 ((x764 Int)) Bool (= (x396 x764 1461501637330902918203684832716283019655932542975) (mod x764 1461501637330902918203684832716283019655932542976)))
(define-fun x336 ((x764 Int)) Bool (and (x316 x764) (x411 x764 1461501637330902918203684832716283019655932542975)))
(define-fun x52 ((x764 Int)) Bool (= (+ (x396 x764 115792089237316195423570985008687907853269984665640564039457584007913129639904) (mod x764 32)) (mod x764 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x952 ((x764 Int)) Bool (and (x411 x764 115792089237316195423570985008687907853269984665640564039457584007913129639904) (x52 x764)))
(define-fun x847 ((x764 Int)) Bool (= (mod x764 340282366920938463463374607431768211456) (x396 x764 340282366920938463463374607431768211455)))
(define-fun x67 ((x764 Int)) Bool (and (x847 x764) (x411 x764 340282366920938463463374607431768211455)))
(define-fun x489 ((x764 Int)) Bool (and (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x190 x764 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x190 115792089237316195423570985008687907853269984665640564039457584007913129639935 x764))))
(define-fun x213 ((x764 Int)) Bool (and (= (x190 0 x764) x764) (= x764 (x190 x764 0))))
(define-fun x207 ((x764 Int)) Bool (= (x190 x764 x764) x764))
(define-fun x235 ((x764 Int)) Bool (and (x207 x764) (x213 x764) (x489 x764)))
(define-fun x770 ((x764 Int) (x1084 Int)) Bool (= (x190 x1084 x764) (x190 x764 x1084)))
(define-fun x609 ((x764 Int) (x1084 Int)) Bool (and (>= (+ x764 x1084) (x190 x764 x1084)) (=> (>= x1084 0) (>= (x190 x764 x1084) x1084)) (=> (<= 0 x764) (>= (x190 x764 x1084) x764))))
(define-fun x401 ((x764 Int) (x1084 Int)) Bool (and (x770 x764 x1084) (x609 x764 x1084)))
(define-fun x618 ((x764 Int)) Bool (= (mod x764 2) (x396 x764 1)))
(define-fun x631 ((x764 Int)) Bool (and (x618 x764) (x411 x764 1)))
(define-fun x252 ((x242 Int)) Int 0)
(define-fun x46 ((x242 Int)) Int 0)
(define-fun x894 ((x242 Int)) Int 0)
(define-fun x421 ((x242 Int)) Int 0)
(define-fun x684 ((x242 Int)) Int 0)
(define-fun x600 ((x242 Int)) Int 0)
(define-fun x172 ((x242 Int)) Int 0)
(define-fun x510 ((x242 Int)) Int 0)
(define-fun x833 ((x242 Int)) Int 0)
(define-fun x1051 ((x242 Int)) Int 0)
(define-fun x62 ((x242 Int)) Int 0)
(define-fun x918 ((x242 Int)) Int 0)
(define-fun x892 ((x242 Int)) Int 0)
(define-fun x893 ((x242 Int)) Int 0)
(define-fun x540 ((x242 Int)) Int 0)
(define-fun x646 ((x242 Int)) Int 0)
(define-fun x958 ((x242 Int)) Int 0)
(define-fun x868 ((x242 Int)) Int 0)
(define-fun x106 ((x242 Int)) Int 0)
(define-fun x1117 ((x242 Int)) Int 0)
(define-fun x690 ((x242 Int)) Int 0)
(define-fun x993 ((x242 Int)) Int 0)
(define-fun x254 ((x242 Int)) Int 0)
(define-fun x808 ((x242 Int)) Int 0)
(define-fun x884 ((x242 Int)) Int 0)
(define-fun x420 ((x242 Int)) Int 0)
(define-fun x632 ((x242 Int)) Int 0)
(define-fun x776 ((x242 Int)) Int 0)
(define-fun x193 ((x242 Int)) Int 0)
(define-fun x485 ((x242 Int)) Int 0)
(define-fun x335 ((x242 Int)) Int 0)
(define-fun x349 ((x242 Int)) Int 0)
(define-fun x470 ((x242 Int)) Int 0)
(define-fun x149 ((x242 Int)) Int 0)
(define-fun x127 ((x242 Int)) Int 0)
(define-fun x482 ((x242 Int)) Int 0)
(define-fun x652 ((x242 Int)) Int 0)
(define-fun x98 ((x242 Int)) Int 0)
(define-fun x916 ((x242 Int)) Int 0)
(define-fun x109 ((x242 Int)) Int 0)
(define-fun x737 ((x242 Int)) Int 0)
(define-fun x511 ((x242 Int)) Int 0)
(define-fun x769 ((x242 Int)) Int 0)
(define-fun x849 ((x242 Int)) Int 0)
(define-fun x181 ((x242 Int)) Int 0)
(define-fun x73 ((x242 Int)) Int 0)
(define-fun x225 ((x242 Int)) Int 0)
(define-fun x852 ((x242 Int)) Int 0)
(define-fun x944 ((x242 Int)) Int 0)
(define-fun x141 ((x242 Int)) Int 0)
(define-fun x857 ((x242 Int)) Int 0)
(define-fun x290 ((x242 Int)) Int 0)
(define-fun x805 ((x242 Int)) Int 0)
(define-fun x1083 ((x242 Int)) Int 0)
(define-fun x525 ((x242 Int)) Int 0)
(define-fun x125 ((x242 Int)) Int 0)
(define-fun x521 ((x242 Int)) Int 0)
(define-fun x87 ((x242 Int)) Int 0)
(define-fun x513 ((x242 Int)) Int 0)
(define-fun x1018 ((x242 Int)) Int 0)
(define-fun x1121 ((x242 Int)) Int 0)
(define-fun x761 ((x242 Int)) Int 0)
(define-fun x589 ((x242 Int)) Int 0)
(define-fun x1007 ((x242 Int)) Int 0)
(define-fun x484 ((x242 Int)) Int 0)
(define-fun x363 ((x242 Int)) Int 0)
(define-fun x924 ((x242 Int)) Int 0)
(define-fun x856 ((x242 Int)) Int 0)
(define-fun x1010 ((x242 Int)) Int 0)
(define-fun x870 ((x242 Int)) Int 0)
(define-fun x996 ((x242 Int)) Int 0)
(define-fun x672 ((x242 Int)) Int 0)
(define-fun x90 ((x242 Int)) Int 0)
(define-fun x21 ((x242 Int)) Int 0)
(define-fun x11 ((x242 Int)) Int 0)
(define-fun x953 ((x242 Int)) Int 0)
(define-fun x1034 ((x242 Int)) Int 0)
(define-fun x187 ((x242 Int)) Int 0)
(define-fun x537 ((x242 Int)) Int 0)
(define-fun x12 ((x242 Int)) Int 0)
(define-fun x512 ((x242 Int)) Int 0)
(define-fun x627 ((x242 Int)) Int 0)
(define-fun x661 ((x242 Int)) Int 0)
(define-fun x155 ((x242 Int)) Int (ite (> x211 x242) (x922 x242) 0))
(define-fun x1040 ((x242 Int)) Int (ite (and (>= x242 0) (< x242 x211)) (x584 x242) (x155 x242)))
(define-fun x13 ((x242 Int)) Int (ite (= x369 x242) x354 (x639 x242)))
(define-fun x544 ((x242 Int)) Int (ite (= x242 x788) x102 (x13 x242)))
(define-fun x594 ((x242 Int)) Int (ite (= x242 128) 84255073108320296753781074859986568468416020394006387453872774439866376126464 (x149 x242)))
(define-fun x358 ((x242 Int)) Int (ite (= x242 132) x1078 (x594 x242)))
(define-fun x614 ((x242 Int)) Int (ite (= 320 x242) x991 (x808 x242)))
(define-fun x948 ((x242 Int)) Int (ite (= 352 x242) x779 (x614 x242)))
(define-fun x365 ((x242 Int)) Int (ite (= 384 x242) x381 (x948 x242)))
(define-fun x663 ((x242 Int)) Int (ite (= x242 128) x318 (x358 x242)))
(define-fun x430 ((x242 Int)) Int (ite (= 160 x242) x576 (x663 x242)))
(define-fun x96 ((x242 Int)) Int (ite (= 192 x242) x385 (x430 x242)))
(define-fun x945 ((x242 Int)) Int (ite (= 0 x242) x1081 (x821 x242)))
(define-fun x910 ((x242 Int)) Int (ite (= 32 x242) x63 (x945 x242)))
(define-fun x270 ((x242 Int)) Int (ite (= x242 64) x1001 (x910 x242)))
(define-fun x112 ((x242 Int)) Int (ite (and (> 224 x242) (>= x242 128)) (x270 (- x242 128)) (x646 x242)))
(define-fun x60 ((x242 Int)) Int (ite (= x242 320) 50942633119752846454219349998365661925608737367104304655302372697894809501696 (x96 x242)))
(define-fun x276 ((x242 Int)) Int (ite (= 324 x242) x788 (x60 x242)))
(define-fun x269 ((x242 Int)) Int (ite (= 0 x242) x1037 (x617 x242)))
(define-fun x103 ((x242 Int)) Int (ite (= x242 320) x1037 (x276 x242)))
(define-fun x304 ((x242 Int)) Int (ite (= 0 x242) x59 (x617 x242)))
(define-fun x395 ((x242 Int)) Int (ite (= 320 x242) x59 (x276 x242)))
(define-fun x695 ((x242 Int)) Int (ite (= 0 x242) x891 (x617 x242)))
(define-fun x1132 ((x242 Int)) Int (ite (= x242 320) x891 (x276 x242)))
(define-fun x305 ((x242 Int)) Int (ite (= 160 x242) x312 (x12 x242)))
(define-fun x196 ((x242 Int)) Int (ite (= x242 192) x392 (x305 x242)))
(define-fun x154 ((x242 Int)) Int (ite x110 (x225 x242) (ite x951 (x305 x242) (x196 x242))))
(define-fun x499 ((x242 Int)) Int (ite (= x942 x242) 32 (x894 x242)))
(define-fun x273 ((x242 Int)) Int (ite (= 128 x242) x177 (x62 x242)))
(define-fun x686 ((x242 Int)) Int (ite (= x789 x242) x933 (x499 x242)))
(define-fun x436 ((x242 Int)) Int (ite (= x242 x611) x219 (x686 x242)))
(define-fun x113 ((x242 Int)) Int (ite (= x665 x242) x48 (x436 x242)))
(define-fun x708 ((x242 Int)) Int (ite (= x242 x731) x150 (x113 x242)))
(define-fun x1033 ((x242 Int)) Int (ite (= x242 x956) x278 (x708 x242)))
(define-fun x707 ((x242 Int)) Int (ite x977 (x708 x242) (ite x709 (x113 x242) (ite x502 (x436 x242) (ite x1113 (x686 x242) (x1033 x242))))))
(define-fun x772 ((x242 Int)) Int (ite (and (> x138 x242) (<= 0 x242)) (x707 (+ x242 x942)) (x534 x242)))
(define-fun x979 ((x242 Int)) Int (ite (and (<= x412 x242) (> (+ x138 x412) x242)) (x772 (- x242 x412)) (x21 x242)))
(define-fun x608 ((x242 Int)) Int (ite (= x242 x879) x118 (x1010 x242)))
(define-fun x967 ((x242 Int)) Int (ite (= x242 x1082) x57 (x482 x242)))
(define-fun x203 ((x242 Int)) Int (ite (= x242 128) 27227514297441576384645560158297793745907797203376573435669607978121727836160 (x1007 x242)))
(define-fun x166 ((x242 Int)) Int (ite (= 132 x242) x415 (x203 x242)))
(define-fun x423 ((x242 Int)) Int (ite (= x242 164) x204 (x166 x242)))
(define-fun x559 ((x242 Int)) Int (ite x191 (x525 x242) (x393 x242)))
(define-fun x20 ((x242 Int)) Int (ite (= x242 x74) 1 (x473 x242)))
(define-fun x997 ((x242 Int)) Int (ite x807 (x473 x242) (x20 x242)))
(define-fun x1140 ((x242 Int)) Int (x578 x242))
(define-fun x980 ((x242 Int)) Int (ite x760 (x1140 x242) (x701 x242)))
(define-fun x497 ((x242 Int)) Int (ite (= x242 x486) x694 (x1013 x242)))
(define-fun x425 ((x242 Int)) Int (ite (= x242 128) 48003237179740346375273247037369238442517605007531723370986625598222673903616 (x423 x242)))
(define-fun x347 ((x242 Int)) Int (ite (= 132 x242) x1061 (x425 x242)))
(define-fun x682 ((x242 Int)) Int (ite (= x242 164) x204 (x347 x242)))
(define-fun x169 ((x242 Int)) Int (ite (= x346 x242) x131 (x980 x242)))
(define-fun x634 ((x242 Int)) Int (ite (= x242 x962) 1 (x934 x242)))
(define-fun x450 ((x242 Int)) Int (ite x247 (x103 x242) (ite x236 (x395 x242) (x1132 x242))))
(define-fun x567 ((x242 Int)) Int (ite (= x242 352) 50942633119752846454219349998365661925608737367104304655302372697894809501696 (x450 x242)))
(define-fun x123 ((x242 Int)) Int (ite (= 356 x242) x788 (x567 x242)))
(define-fun x84 ((x242 Int)) Int (ite (= x242 352) x299 (x123 x242)))
(define-fun x853 ((x242 Int)) Int (ite (= 384 x242) 87574796089400210963483481994855297801658048744582212763804713015135770247168 (x84 x242)))
(define-fun x1100 ((x242 Int)) Int (ite (= x242 384) x730 (x853 x242)))
(define-fun x343 ((x242 Int)) Int (ite (= x242 416) 38708093259629484031895142510376203906402151220248653826213023215758465826816 (x1100 x242)))
(define-fun x509 ((x242 Int)) Int (ite (= x242 420) x555 (x343 x242)))
(define-fun x545 ((x242 Int)) Int (x509 x242))
(define-fun x432 ((x242 Int)) Int (ite (= x242 x382) 50942633119752846454219349998365661925608737367104304655302372697894809501696 (x545 x242)))
(define-fun x487 ((x242 Int)) Int (ite (= x389 x242) x788 (x432 x242)))
(define-fun x43 ((x242 Int)) Int (ite (= x242 x382) x64 (x487 x242)))
(define-fun x754 ((x242 Int)) Int (ite x552 (x43 x242) (x301 x242)))
(define-fun x246 ((x242 Int)) Int (ite (= x242 x1129) 43125368017184674342631469786930412259358796246078251365432886109726937448448 (x754 x242)))
(define-fun x168 ((x242 Int)) Int (ite (= x79 x242) 50942633119752846454219349998365661925608737367104304655302372697894809501696 (x246 x242)))
(define-fun x954 ((x242 Int)) Int (ite (= x523 x242) x788 (x168 x242)))
(define-fun x121 ((x242 Int)) Int (ite (= x79 x242) x205 (x954 x242)))
(define-fun x941 ((x242 Int)) Int (ite x320 (x121 x242) (x153 x242)))
(define-fun x928 ((x242 Int)) Int (ite (= x1053 x242) 108426767173742856395030365509996896678797929141504625213834505309054379753472 (x941 x242)))
(define-fun x496 ((x242 Int)) Int (ite (= x986 x242) x622 (x928 x242)))
(define-fun x268 ((x242 Int)) Int (ite (= x1053 x242) x812 (x496 x242)))
(define-fun x1003 ((x242 Int)) Int (ite x838 (x246 x242) (x268 x242)))
(define-fun x324 ((x242 Int)) Int (ite (= x258 x242) 89636891990589868803906418308618022056609234381241109476909007520468331134976 (x1003 x242)))
(define-fun x568 ((x242 Int)) Int (ite (= x242 x1039) x415 (x324 x242)))
(define-fun x574 ((x242 Int)) Int (ite (= x74 x242) x1058 (x997 x242)))
(define-fun x791 ((x242 Int)) Int (ite (= x242 x74) x518 (x86 x242)))
(define-fun x619 ((x242 Int)) Int (ite x642 (x852 x242) (x967 x242)))
(define-fun x189 ((x242 Int)) Int (x804 x242))
(define-fun x303 ((x242 Int)) Int (ite (= x242 0) x205 (x970 x242)))
(define-fun x107 ((x242 Int)) Int (ite x320 (x303 x242) (x725 x242)))
(define-fun x758 ((x242 Int)) Int (ite (and (> (+ x79 32) x242) (<= x79 x242)) (x107 (- x242 x79)) (x349 x242)))
(define-fun x92 ((x242 Int)) Int (ite (= 0 x242) x812 (x100 x242)))
(define-fun x151 ((x242 Int)) Int (ite (and (<= x1053 x242) (> (+ x1053 32) x242)) (x92 (- x242 x1053)) (x993 x242)))
(define-fun x790 ((x242 Int)) Int (ite (= x242 x660) x729 (x976 x242)))
(define-fun x262 ((x242 Int)) Int (ite x44 (x976 x242) (x790 x242)))
(define-fun x408 ((x242 Int)) Int (ite (= 128 x242) x555 (x421 x242)))
(define-fun x610 ((x242 Int)) Int (ite (= 128 x242) 26970434976082401409518253779899979181617001501746706707637651430022083248128 (x408 x242)))
(define-fun x361 ((x242 Int)) Int (ite (= 128 x242) x781 (x610 x242)))
(define-fun x846 ((x242 Int)) Int (ite (= 160 x242) 22270923681254677845691103109158760375340177724800803888364822332811285364736 (x361 x242)))
(define-fun x744 ((x242 Int)) Int (ite (= 160 x242) 18 (x846 x242)))
(define-fun x8 ((x242 Int)) Int (ite (= 192 x242) 50942633119752846454219349998365661925608737367104304655302372697894809501696 (x744 x242)))
(define-fun x1086 ((x242 Int)) Int (ite (= x242 196) x658 (x8 x242)))
(define-fun x710 ((x242 Int)) Int (ite (= 192 x242) x397 (x1086 x242)))
(define-fun x692 ((x242 Int)) Int (ite (= x242 224) 29289127993025145568725129057828671567744754166070328588094505464281371246592 (x710 x242)))
(define-fun x380 ((x242 Int)) Int (ite (= x242 228) x658 (x692 x242)))
(define-fun x453 ((x242 Int)) Int (ite (= x242 260) x1028 (x380 x242)))
(define-fun x413 ((x242 Int)) Int (ite x44 (x710 x242) (x453 x242)))
(define-fun x527 ((x242 Int)) Int (ite (= 224 x242) 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x413 x242)))
(define-fun x182 ((x242 Int)) Int (ite (= x242 228) x788 (x527 x242)))
(define-fun x105 ((x242 Int)) Int (ite (= 260 x242) x119 (x182 x242)))
(define-fun x662 ((x242 Int)) Int (ite (= x889 x242) x4 (x262 x242)))
(define-fun x647 ((x242 Int)) Int (ite (= x242 x307) x596 (x662 x242)))
(define-fun x673 ((x242 Int)) Int (ite (= x242 128) x119 (x1117 x242)))
(define-fun x621 ((x242 Int)) Int (ite (= 128 x242) 1 (x673 x242)))
(define-fun x480 ((x242 Int)) Int (ite (= 0 x242) x698 (x402 x242)))
(define-fun x160 ((x242 Int)) Int (x839 x242))
(define-fun x767 ((x242 Int)) Int (ite (= x242 x974) x233 (x630 x242)))
(define-fun x370 ((x242 Int)) Int (x767 x242))
(define-fun x260 ((x242 Int)) Int (x544 x242))
(define-fun x703 ((x242 Int)) Int (x898 x242))
(define-fun x404 ((x242 Int)) Int (x647 x242))
(define-fun x557 ((x242 Int)) Int (x965 x242))
(define-fun x762 ((x242 Int)) Int (ite (= x242 0) x64 (x241 x242)))
(define-fun x208 ((x242 Int)) Int (ite (and (> (+ x382 32) x242) (<= x382 x242)) (x762 (- x242 x382)) (x600 x242)))
(define-fun x929 ((x242 Int)) Int (ite x552 (x703 x242) (x1109 x242)))
(define-fun x403 ((x242 Int)) Int (ite (= x242 0) x397 (x416 x242)))
(define-fun x817 ((x242 Int)) Int (ite (and (> 224 x242) (>= x242 192)) (x403 (- x242 192)) (x833 x242)))
(define-fun x733 ((x242 Int)) Int (ite x247 (x269 x242) (ite x236 (x304 x242) (x695 x242))))
(define-fun x1017 ((x242 Int)) Int (ite (and (< x242 352) (>= x242 320)) (x733 (- x242 320)) (x510 x242)))
(define-fun x749 ((x242 Int)) Int (ite (= 0 x242) x299 (x1011 x242)))
(define-fun x120 ((x242 Int)) Int (ite (and (>= x242 352) (< x242 384)) (x749 (- x242 352)) (x661 x242)))
(define-fun x539 ((x242 Int)) Int (ite (= 0 x242) x730 (x668 x242)))
(define-fun x1123 ((x242 Int)) Int (ite (and (>= x242 384) (> 416 x242)) (x539 (- x242 384)) (x537 x242)))
(define-fun x163 ((x242 Int)) Int (ite (= 0 x242) x781 (x599 x242)))
(define-fun x390 ((x242 Int)) Int (ite (and (<= 128 x242) (> 160 x242)) (x163 (- x242 128)) (x884 x242)))
(define-fun x451 ((x242 Int)) Int (ite (= x242 0) 18 (x288 x242)))
(define-fun x866 ((x242 Int)) Int (ite (and (>= x242 160) (< x242 192)) (x451 (- x242 160)) (x958 x242)))
(assert (x272 x312))
(assert (= (x959 38708093259629484031895142510376203906402151220248653826213023215758465826816) 0))
(assert (x272 x1078))
(assert (= (and x191 x564) x454))
(assert (x271 1599608803))
(assert (= (not (and (= true x355) (= x685 false) (= x748 false) (= x543 1) (= false x803) (= x820 1) (= 1 x206))) x39))
(assert (x272 x861))
(assert (x272 x731))
(assert (x272 x1082))
(assert (x272 x1042))
(assert (x272 x194))
(assert (x272 x616))
(assert (x272 x575))
(assert (= (x959 57896044618658097711785492504343953926634992332820282019728792003956564819907) 0))
(assert (x272 x888))
(assert (= x998 (=> (and (and (= (x630 x424) x923) (= x424 (x319 64 x788 0)) (>= x165 1) (= 384 x362) (not (< x923 x555)) (= false x1057) (= x1098 false) (= x50 false) (>= 127 x960) (= 22270923681254677845691103109158760375340177724800803888364822332811285364736 x705) (= x134 1889567281) (= (x976 x957) x299) (= x387 4) (= x595 0) (= false x904) (= x45 (x866 160)) (= (x1017 320) x555) (= false x1047) (>= 127 x960) (= false x216) (= (x120 352) x426) (= (x1087 (- x745 x555)) x1062) (= (x319 64 x788 0) x974) (= x6 416) (= 87574796089400210963483481994855297801658048744582212763804713015135770247168 x240) (= x587 (x1123 384)) (<= 1 x248) (<= 1 x896) (= x913 (= x587 7)) (= x165 (x752 x658)) (= x441 26970434976082401409518253779899979181617001501746706707637651430022083248128) (= false x391) (= x221 4) (<= x655 127) (= x896 (x752 x1078)) (>= 127 x549) (= 36 x1122) (>= 127 x1004) (>= 8 x587) (= x920 x788) (= x38 false) (<= x730 8) (= x248 (x752 x253)) (<= x549 127) (= (x1087 (- x745 x555)) x848) (= false x569) (= x295 (x390 128)) (= x800 352) (not x913) (= x957 (x319 64 x788 0)) (<= x1004 127) (<= 1 x743) (= x471 false) (>= x173 1) (= x1144 false) (= false x326) (= x832 x920) (= 160 x33) (= 128 x162) (= x180 36) (= 18 x197) (= 1000389033 x947) (= x1066 false) (= x1078 x658) (= x575 3248329723) (= x1006 false) (<= x675 127) (= x1019 (x752 x658)) (= false x906) (= (x1087 (- x923 x555)) x233) (>= 255 x45) (= x245 (> x45 0)) (= x477 false) (= false x814) (<= x675 127) (= 1435762976 x466) (= false x936) (= 0 x1094) (= x137 x314) (= x1078 x658) (= x842 38708093259629484031895142510376203906402151220248653826213023215758465826816) (<= x655 127) (= x137 x555) (= x743 (x752 x342)) (= (x752 x333) x173) (= x653 826074471) (= 4 x886) (= 50942633119752846454219349998365661925608737367104304655302372697894809501696 x964) (>= x1019 1)) (or (and x245 (and (= (= (x190 (ite (< x45 78) 1 0) (ite (< x45 32) 1 0)) 0) x927) (or (and x927 (and (<= x45 3) (= x95 (* (ite (= 0 x9) 1 10) 100)) (= x95 x212) (= (x396 1 x45) x9) (<= x45 255) (<= 2 x45))) (and (not x927) (and (= x212 x1025) (<= 1 x1025) (= x1025 (x71 10 x45))))))) (and (not x245) (= x212 1)))) x457)))
(assert (x336 x528))
(assert (= (and (not x927) x297) x1071))
(assert (= (and x447 (not x245)) x238))
(assert (x897 x348))
(assert (or (= 2 x77) (= 1 x77)))
(assert (x272 x683))
(assert (x272 x613))
(assert (x272 x392))
(assert (x271 57896044618658097711785492504343953926634992332820282019728792003956564819971))
(assert (x272 x488))
(assert (= (=> (and (or (not x529) (and x529 (and (>= 1461501637330902918203684832716283019655932542975 x57) (= x57 (x979 x296)) (= (x475 (+ x296 32)) x1135) (not (< x1135 x735))))) (and (= x51 (x475 (+ x611 x1065))) (not (< x79 x879)) (< x1129 x879) (= x79 (+ x879 x824)) (or (<= 57896044618658097711785492504343953926634992332820282019728792003956564819907 x1129) (<= x1129 18446744073709551582)) (= (x396 115792089237316195423570985008687907853269984665640564039457584007913129639904 x670) x633) (< x879 x79) (= x831 (+ 160 x1054)) (= x264 false) (= x442 (x475 (+ x412 x750))) (>= 18446744073709551615 x750) (= (* x118 32) x188) (<= x79 18446744073709551615) (<= x118 18446744073709551615) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x138) (= (* x118 32) x140) (= (x475 (+ x412 x633)) x879) (= x138 (x1087 (- x463 x942))) (<= x879 18446744073709551614) (= x118 (x979 x442)) (= x933 x1134) (= (x979 x412) x750) (or (<= x1104 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= 57896044618658097711785492504343953926634992332820282019728792003956564819971 x1104)) (= (> x735 x296) x529) (not (> x735 x1104)) (= x735 (x475 (+ x188 x296))) (>= x79 2) (<= x1129 18446744073709551613) (>= x879 1) (>= 18446744073709551613 x1129) (or (and (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1104) (> x1052 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (and (= (<= x1104 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= x1052 57896044618658097711785492504343953926634992332820282019728792003956564819967)) (> x1104 x1052))) (= x972 x831) (= (* 32 x933) x1065) (= x30 (+ 63 x140)) (<= x1129 18446744073709551613) (= x51 x463) (or (<= 57896044618658097711785492504343953926634992332820282019728792003956564819907 x1129) (>= 18446744073709551582 x1129)) (>= x138 32) (<= x824 18446744073709551614) (= (x475 (+ x1129 32)) x412) (= x1054 (* x933 32)) (= x1082 (+ 32 x879)) (= (x475 (+ x442 32)) x296) (or (<= 57896044618658097711785492504343953926634992332820282019728792003956564819907 x1129) (<= x1129 18446744073709551582)) (= (+ 31 x138) x670) (= x824 (x396 115792089237316195423570985008687907853269984665640564039457584007913129639904 x30)) (or (= 96 x1054) (= 128 x1054) (= x1054 64) (= x1054 0) (= x1054 32)) (= (x475 (+ x138 x412)) x1104) (= x1052 (x475 (+ 31 x442))) (= x1064 false))) x938) x244))
(assert (= (and x865 (not x515)) x1113))
(assert (x272 x137))
(assert (x272 x40))
(assert (x272 x1120))
(assert (= (or x1043 x751) x351))
(assert (=> (= 0 x282) (= (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 x282) 0)))
(assert (x272 x493))
(assert (= (x959 4021772317) 0))
(assert (x271 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (= x143 (=> (and (and (= x933 (x273 128)) (<= x933 4) (= x1080 32) (= x789 (x475 (+ 32 x942))) (= (> x933 0) x515) (= (x475 (+ x789 32)) x611)) (or (and (and (= x972 160) (= 0 x1134) (= x611 x463)) (not x515)) (and (and (and (= (x154 160) x185) (= (> x933 1) x178) (= (x475 (+ x611 32)) x665) (= (x396 1461501637330902918203684832716283019655932542975 x185) x219)) (or (and (not x178) (and (= 192 x972) (= x1134 1) (= x463 x665))) (and x178 (and (or (and (not x1089) (and (= x731 x463) (= 224 x972) (= x1134 2))) (and x1089 (and (and (= (x154 224) x987) (= (x396 1461501637330902918203684832716283019655932542975 x987) x150) (= x256 (< 3 x933)) (= (x475 (+ 32 x731)) x956)) (or (and (not x256) (and (= x463 x956) (= 256 x972) (= x1134 3))) (and x256 (and (= x1134 4) (= (x475 (+ 32 x956)) x982) (= 288 x972) (= (x396 1461501637330902918203684832716283019655932542975 x170) x278) (= x982 x463) (= x170 (x154 256)))))))) (and (= (< 2 x933) x1089) (= (x154 192) x317) (= (x396 1461501637330902918203684832716283019655932542975 x317) x48) (= (x475 (+ 32 x665)) x731)))))) x515))) x244)))
(assert (=> (= 0 x494) (= 0 (div 1000000000000000000 x494))))
(assert (not (x271 (x319 64 x658 0))))
(assert (x272 x210))
(assert (x272 x597))
(assert (x272 x310))
(assert (x272 x949))
(assert (x272 x318))
(assert (x272 x891))
(assert (x272 x253))
(assert (x272 x494))
(assert (=> (>= 10000 x342) (= (x959 x342) 0)))
(assert (= 0 (x959 22270923681254677845691103109158760375340177724800803888364822332811285364736)))
(assert (x272 x587))
(assert (x272 x869))
(assert (x272 x158))
(assert (x272 x670))
(assert (= x143 x591))
(assert (x272 x394))
(assert (x272 x339))
(assert (x271 826074471))
(assert (x272 x1094))
(assert (x272 x280))
(assert (x272 x267))
(assert (= (x531 (x319 64 x415 6)) 64))
(assert (= x628 (or x838 x320)))
(assert (= x457 (=> (and (or (not x65) (and (and (= x1028 (x1087 (- x119 x237))) (= x729 (x475 (+ x572 x1028))) (not (= 57896044618658097711785492504343953926634992332820282019728792003956564819968 x237)) (= x590 false) (= 1086394137 x93) (= x660 (x319 64 x658 0)) (= x364 (x475 (+ x1041 x1028))) (= x338 0) (= x572 (x976 x660)) (not (< x119 x1028)) (= 29289127993025145568725129057828671567744754166070328588094505464281371246592 x696) (= x597 x1028) (= x372 224) (= (x752 x253) x649) (>= x649 1) (<= x394 127) (not (> x1041 x364)) (= x597 x310) (= x658 x536) (= x624 68) (= x536 x739) (= (x752 x253) x54) (= false x479) (>= x54 1) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x1028) (= 0 x104) (= (x475 (+ x1028 x1041)) x490) (>= 127 x394)) x65)) (and (= (x752 x253) x932) (= x681 false) (= x565 192) (= false x375) (= x397 (x976 x427)) (= x65 (> x119 x237)) (<= 0 x135) (= x806 x286) (= x658 x286) (= (x817 192) x237) (<= 1 x932) (= 36 x56) (= x76 false) (= 50942633119752846454219349998365661925608737367104304655302372697894809501696 x1141) (>= 127 x184) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x135) (= x108 1889567281) (= (x319 64 x658 0) x427) (= (div x135 x212) x119) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x295 x555)) (>= 127 x184) (= (* x295 x555) x135) (= x1099 false))) x83)))
(assert (= 3 (x175 (x467 32 3))))
(assert (x272 x734))
(assert (= x1056 (and x927 x297)))
(assert (x272 x162))
(assert (= (x959 (x319 64 x1078 21)) (x319 64 x1078 21)))
(assert (x272 x1001))
(assert (x272 x800))
(assert (= x44 (and x148 (not x65))))
(assert (not (x271 (x319 64 x1078 21))))
(assert (= (x959 (+ 1 x677)) (x959 x677)))
(assert (x272 x1053))
(assert (=> (= x1050 0) (= 0 (div 1000000000000000000 x1050))))
(assert (x272 x441))
(assert (= (=> (and (= (x475 (+ x204 x815)) x61) (= 1 x955) (= x946 (+ x204 x82)) (= true x377) (<= 1 x819) (= 1780539026 x1072) x377 (= x562 (= x573 x348)) (<= x204 10000000000000000000000000) (not (> x815 x61)) (= 2 x506) (= x741 false) (>= 127 x837) (= x616 48003237179740346375273247037369238442517605007531723370986625598222673903616) (not (> x82 x946)) (= (x475 (+ x204 x888)) x694) (= x131 (x475 (+ x367 x204))) (= x26 x384) (= (x319 64 x1061 7) x346) (= (x319 64 x415 6) x486) (>= x900 1) (>= 127 x837) (= x16 x1061) (= x819 (+ x204 x82)) (= x1139 68) (>= x717 1) (= false x330) (not (> x82 x819)) (= 0 x787) (>= 1000000000000000000000000000 x819) (= x989 2) (<= x82 999999999999999999999999999) (= x615 (x475 (+ x815 x204))) (= x966 0) (not (> x888 x694)) (= x367 (x980 x346)) (= x1127 1) (or (and (<= 0 x348) (<= x348 1)) (and (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x348) (>= x348 3))) (= (+ x82 x204) x339) (= 128 x19) x562 (not (= x573 2)) (= x717 (x752 x255)) (= 2 x778) (= (x1013 x486) x888) (= x204 x26) (= 1 x793) (= (x752 x255) x900)) x1085) x1095))
(assert (x272 x875))
(assert (x272 x827))
(assert (x272 x782))
(assert (x272 x222))
(assert (x272 x896))
(assert (x272 x722))
(assert (x272 x89))
(assert (x272 x414))
(assert (= (x959 1000000000000000000000000000) 0))
(assert (x272 x28))
(assert (x272 x314))
(assert (x897 x77))
(assert (x272 x139))
(assert (x272 x871))
(assert (= (and x529 x1038) x192))
(assert (x272 x229))
(assert (x272 x739))
(assert (x271 18446744073709551614))
(assert (x272 x122))
(assert (x235 (ite (> 32 x45) 1 0)))
(assert (x272 x611))
(assert (x272 x675))
(assert (x272 x281))
(assert (= 0 (x959 1000000000000000000)))
(assert (not x863))
(assert (x272 x32))
(assert (x272 x327))
(assert (x271 1889567281))
(assert (x272 x1019))
(assert (x272 x1059))
(assert (x272 x671))
(assert (= 0 (x959 89636891990589868803906418308618022056609234381241109476909007520468331134976)))
(assert (x272 x116))
(assert (x115 x30))
(assert (x272 x224))
(assert (x272 x989))
(assert (x271 57896044618658097711785492504343953926634992332820282019728792003956564819967))
(assert (x272 x333))
(assert (x271 84255073108320296753781074859986568468416020394006387453872774439866376126464))
(assert (x272 x35))
(assert (= 0 (x959 115792089237316195423570985008687907853269984665640564039457584007913129639934)))
(assert (x336 x170))
(assert (x272 x742))
(assert (x272 x26))
(assert (x272 x826))
(assert (= (and x25 x344) x650))
(assert (x271 115792089237316195423570985008687907853269984665640564039457584007913129639905))
(assert (x272 x140))
(assert (x271 1461501637330902918203684832716283019655932542975))
(assert (x272 x41))
(assert (x272 x1124))
(assert (x272 x549))
(assert (x897 x506))
(assert (x272 x431))
(assert (x272 x6))
(assert (x272 x198))
(assert (x272 x364))
(assert (x272 x966))
(assert (= x447 (or x236 x984 x247)))
(assert (x272 x653))
(assert (x272 x964))
(assert (x272 x598))
(assert (not (x271 (x319 64 x415 1))))
(assert (x272 x648))
(assert (x272 x24))
(assert (x272 x816))
(assert (=> (= x999 0) (= 0 (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 x999))))
(assert (x272 x184))
(assert (= (x531 (x319 64 x1078 21)) 64))
(assert (x115 x987))
(assert (x272 x1110))
(assert (x272 x1133))
(assert (= (or x199 x353) x7))
(assert (x272 x735))
(assert (x272 x756))
(assert (x272 x1005))
(assert (= (x959 18446744073709551613) 0))
(assert (x272 x1048))
(assert (x272 x45))
(assert (x272 x219))
(assert (x272 x415))
(assert (x272 x95))
(assert (x952 x670))
(assert (= x10 (=> (and (= x734 x410) (= (div x472 1000000000000000000) x734) (= (* 10000000000000000000000000 (- 1000000000000000000 x1009)) x472) (= x1009 (div 1000000000000000000 x1050))) x719)))
(assert (= (or x881 x110) x865))
(assert (x272 x771))
(assert (=> (<= x333 10000) (= (x959 x333) 0)))
(assert (x272 x572))
(assert (x272 x972))
(assert (= (x175 (x319 64 x415 1)) x415))
(assert (= (x959 1461501637330902918203684832716283019655932542975) 0))
(assert (x272 x118))
(assert (x272 x463))
(assert (x271 48003237179740346375273247037369238442517605007531723370986625598222673903616))
(assert (not (x271 (x319 64 x415 6))))
(assert (x272 x759))
(assert (x272 x991))
(assert (x272 x442))
(assert (x272 x217))
(assert (= (x959 x1125) (x959 (+ x1125 1))))
(assert (= 0 (x959 31449600)))
(assert (x272 x283))
(assert (= 0 (x959 1009924635)))
(assert (x272 x173))
(assert (x272 x655))
(assert (x272 x702))
(assert (x272 x1067))
(assert (x272 x1136))
(assert (x272 x819))
(assert (x272 x999))
(assert (x272 x533))
(assert (= (x3 (x319 64 x415 1)) 1))
(assert (x272 x63))
(assert (x272 x508))
(assert (x271 3324817111))
(assert (x272 x687))
(assert (x272 x36))
(assert (= (x959 65535) 0))
(assert (x272 x144))
(assert (x272 x923))
(assert (= x341 (and x865 x515)))
(assert (x272 x68))
(assert (x272 x664))
(assert (= (x959 (x319 64 x415 1)) (x319 64 x415 1)))
(assert (x272 x397))
(assert (x272 x990))
(assert (x272 x909))
(assert (= (=> (and (<= x456 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= x623 (= x177 0)) (= (* x70 x902) x1077) (= x728 76450787359836037641860180984291677749980919077056822294353438043884394381312) (= 1599608803 x901) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x902 x49)) (= x585 false) (= x439 false) (= 36 x613) (<= x796 57896044618658097711785492504343953926634992332820282019728792003956564819967) (= (x475 (+ 32 x382)) x1129) (= x937 x526) (= x398 x788) (= x328 x782) (= x889 (x319 64 x658 0)) (<= 1 x667) (not x792) (not (= x382 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (not (> x119 x329)) (= (x475 (+ x382 4)) x389) (= x1119 1) (= x398 x961) (= x4 (x1087 (- x329 x119))) (= x307 (x319 64 x788 0)) (= x378 x514) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x331 x1049)) (>= 127 x626) (= 1889567281 x455) (= x644 (x319 64 x788 0)) (= false x243) (= x119 x514) (>= x1077 0) (= x613 (x1087 (- x14 x382))) (= (x262 x409) x329) (= x1063 x277) (= x792 (> x1126 0)) (= x1031 x607) (= 224 x640) (= x583 false) (= (x319 64 x658 0) x409) (<= x382 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= x715 36) (= (x404 x644) x64) (= false x823) (= 43125368017184674342631469786930412259358796246078251365432886109726937448448 x142) (= false x1093) (= x937 x788) (= (x475 (+ x119 x400)) x596) (= (x752 x656) x667) (= x1069 (mod (* x177 32) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x603 50942633119752846454219349998365661925608737367104304655302372697894809501696) (= x1077 x1049) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x382)) (= (x621 128) x698) (= x1015 2835717307) (= x794 false) (= x449 false) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x70 x902)) (<= x626 127) (= x68 4) (>= 127 x551) (<= 1 x376) (= x718 false) (not (<= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x687 x456))) (= (* x1049 x331) x796) (<= 1 x687) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x382)) (= x912 x348) (= x985 x915) (>= 127 x551) (= x328 (* x49 x902)) (or (<= 115792089237316195423570985008687907853269984665640564039457584007913129639905 x1069) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639775 x1069)) (= (+ 128 x1090) x942) (= (x475 (+ x456 x687)) x49) (not (< x1115 x687)) (= (x662 x307) x400) (= (x1087 (- x687 x156)) x70) (= x287 (x752 x253)) (= 416 x382) (not (> x70 x687)) (< x382 x1129) (= x1115 (x208 x382)) (= x122 x573) (<= x1077 57896044618658097711785492504343953926634992332820282019728792003956564819967) (= (x1087 (- x1115 x426)) x687) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x382) (= (x475 (+ 32 x1069)) x1090) (= (div x796 10000) x1126) (= x156 x555) (= x124 false) (>= x328 0) (>= x1115 1) (>= x796 0) (= x940 (x475 (+ x456 x687))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x382) (>= x287 1) (<= x995 127) (<= x995 127) (= x14 (x475 (+ 32 x389))) (= 68 x604) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x328) (= x114 x871) (= x376 (x752 x253))) (and (=> x623 x143) (=> (and (not x623) (and (or (not x612) (and x612 (and (= (x467 32 3) x147) (= (- x2 x147) x943) (<= x234 224) (= (x674 x2) x392) (>= 1461501637330902918203684832716283019655932542975 x392)))) (and (= (mod (* 32 x177) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x899) (= (x467 32 3) x291) (= x129 (- x586 x291)) (>= 1461501637330902918203684832716283019655932542975 x312) (= (x475 (+ x899 160)) x234) (= (x467 32 3) x586) (= (+ 1 x586) x2) (= x312 (x674 x586)) (= x612 (< 192 x234))))) x591))) x83))
(assert (x272 x278))
(assert (x897 x802))
(assert (x272 x464))
(assert (= (and x345 x289) x459))
(assert (x272 x468))
(assert (x272 x23))
(assert (x272 x981))
(assert (x271 1000000000000000000))
(assert (x272 x937))
(assert (x272 x841))
(assert (x272 x323))
(assert (x271 76450787359836037641860180984291677749980919077056822294353438043884394381312))
(assert (= (and x351 x440) x191))
(assert (x272 x728))
(assert (= 0 (x959 1780539026)))
(assert (x272 x376))
(assert (x272 x824))
(assert (x272 x602))
(assert (=> (<= x417 10000) (= 0 (x959 x417))))
(assert (= 21 (x3 (x319 64 x1078 21))))
(assert (x272 x658))
(assert (x272 x240))
(assert (= (x3 (x319 64 x788 14)) 14))
(assert (= (x959 18446744073709551614) 0))
(assert (x271 26970434976082401409518253779899979181617001501746706707637651430022083248128))
(assert (x272 x1002))
(assert (x272 x16))
(assert (= (and (not x858) x359) x838))
(assert (x272 x793))
(assert (x272 x82))
(assert (x272 x778))
(assert (x272 x789))
(assert (= (and x628 x1138) x822))
(assert (= x719 (=> (= x133 (= (ite (> x777 1) (ite (not (= (mod x678 31449600) 0)) 1 0) (ite (< 1 x777) 1 0)) 0)) (and (=> (and (not x133) (and (or (and (= 1 x494) x867) (and (and (<= x813 255) (= (x547 1 x813) x494)) (not x867))) (and (>= x777 1) (not (< x777 x813)) (<= x777 3681830269298057699416558080506203826225770269435559245251373117874731) (= x813 (- x777 1)) (= (= 1 x777) x867)))) x422) (=> (and (and (= x227 x23) (= x602 0) (= 0 x500)) x133) x738)))))
(assert (x272 x47))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x319 64 x622 4)))
(assert (x897 x383))
(assert (= 0 (x959 27227514297441576384645560158297793745907797203376573435669607978121727836160)))
(assert (=> (>= 10000 x658) (= (x959 x658) 0)))
(assert (x272 x78))
(assert (=> (<= x1118 10000) (= 0 (x959 x1118))))
(assert (> (x319 64 x658 0) 10000))
(assert (= (x959 3681830269298057699416558080506203826225770269435559245251373117874731) 0))
(assert (x272 x1072))
(assert (x272 x218))
(assert (x272 x932))
(assert (x272 x152))
(assert (x272 x573))
(assert (x272 x448))
(assert (= (mod (ite (< x813 256) (x71 2 x813) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (x547 1 x813)))
(assert (x115 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x115 1))
(assert (x272 x694))
(assert (x272 x901))
(assert (x272 x1141))
(assert (x272 x712))
(assert (x272 x688))
(assert (= (and (not x505) x374) x345))
(assert (x272 x417))
(assert (x897 x912))
(assert (x272 x49))
(assert (x272 x829))
(assert (= (and x755 x444) x405))
(assert (x272 x61))
(assert (x272 x1135))
(assert (= (x959 56073674) 0))
(assert (x272 x1027))
(assert (x272 x266))
(assert (= (x531 (x319 64 x658 0)) 64))
(assert (= (x959 1889567281) 0))
(assert (x272 x287))
(assert (x271 1000389033))
(assert (x272 x331))
(assert (= x1043 (or x593 x405)))
(assert (x272 x104))
(assert (x272 x295))
(assert (x271 9999999999999999999999999))
(assert (x272 x961))
(assert (x272 x667))
(assert (x272 x426))
(assert (x272 x1104))
(assert (x272 x64))
(assert (x272 x197))
(assert (x272 x874))
(assert (x272 x1020))
(assert (x271 89636891990589868803906418308618022056609234381241109476909007520468331134976))
(assert (x272 x736))
(assert (x272 x367))
(assert (= (x959 1000389033) 0))
(assert (x271 50942633119752846454219349998365661925608737367104304655302372697894809501696))
(assert (= (and (not x1088) x306) x1107))
(assert (x272 x526))
(assert (x271 1780539026))
(assert (x272 x129))
(assert (x272 x636))
(assert (x272 x907))
(assert (= (x3 (x319 64 x415 6)) 6))
(assert (x272 x186))
(assert (x271 115792089237316195423570985008687907853269984665640564039457584007913129639775))
(assert (x272 x381))
(assert (x272 x879))
(assert (x272 x469))
(assert (x272 x17))
(assert (= x727 (or (and x1088 x306) x657)))
(assert (x272 x387))
(assert (x272 x258))
(assert (or (= 1 x802) (= x802 2)))
(assert (x272 x234))
(assert (= x39 x1070))
(assert (x272 x992))
(assert (x272 x885))
(assert (= x1142 (and x374 x505)))
(assert (=> (<= x1061 10000) (= (x959 x1061) 0)))
(assert (x272 x541))
(assert (x271 3125194354))
(assert (x272 x296))
(assert (x272 x369))
(assert (x272 x294))
(assert (and (= (x71 2 226) 107839786668602559178668060348078522694548577690162289924414440996864) (= (x71 2 213) 13164036458569648337239753460458804039861886925068638906788872192) (= (x71 2 63) 9223372036854775808) (= (x71 2 22) 4194304) (= 19807040628566084398385987584 (x71 2 94)) (= 13479973333575319897333507543509815336818572211270286240551805124608 (x71 2 223)) (= (x71 2 222) 6739986666787659948666753771754907668409286105635143120275902562304) (= (x71 2 113) 10384593717069655257060992658440192) (= 12855504354071922204335696738729300820177623950262342682411008 (x71 2 203)) (= (x71 2 105) 40564819207303340847894502572032) (= (x71 2 60) 1152921504606846976) (= 43556142965880123323311949751266331066368 (x71 2 135)) (= 1048576 (x71 2 20)) (= (x71 2 221) 3369993333393829974333376885877453834204643052817571560137951281152) (= (x71 2 40) 1099511627776) (= (x71 2 79) 604462909807314587353088) (= (x71 2 82) 4835703278458516698824704) (= 401734511064747568885490523085290650630550748445698208825344 (x71 2 198)) (= (x71 2 68) 295147905179352825856) (= 8192 (x71 2 13)) (= (x71 2 107) 162259276829213363391578010288128) (= 8 (x71 2 3)) (= 47890485652059026823698344598447161988085597568237568 (x71 2 175)) (= (x71 2 174) 23945242826029513411849172299223580994042798784118784) (= (x71 2 128) 340282366920938463463374607431768211456) (= 696898287454081973172991196020261297061888 (x71 2 139)) (= 1766847064778384329583297500742918515827483896875618958121606201292619776 (x71 2 240)) (= 8589934592 (x71 2 33)) (= 9007199254740992 (x71 2 53)) (= 32768 (x71 2 15)) (= (x71 2 166) 93536104789177786765035829293842113257979682750464) (= 87112285931760246646623899502532662132736 (x71 2 136)) (= 20282409603651670423947251286016 (x71 2 104)) (= (x71 2 72) 4722366482869645213696) (= 65536 (x71 2 16)) (= 5575186299632655785383929568162090376495104 (x71 2 142)) (= 512 (x71 2 9)) (= (x71 2 131) 2722258935367507707706996859454145691648) (= (x71 2 242) 7067388259113537318333190002971674063309935587502475832486424805170479104) (= 274877906944 (x71 2 38)) (= 4294967296 (x71 2 32)) (= (x71 2 169) 748288838313422294120286634350736906063837462003712) (= 1180591620717411303424 (x71 2 70)) (= 784637716923335095479473677900958302012794430558004314112 (x71 2 189)) (= 32 (x71 2 5)) (= (x71 2 146) 89202980794122492566142873090593446023921664) (= (x71 2 43) 8796093022208) (= 2305843009213693952 (x71 2 61)) (= (x71 2 36) 68719476736) (= 842498333348457493583344221469363458551160763204392890034487820288 (x71 2 219)) (= (x71 2 244) 28269553036454149273332760011886696253239742350009903329945699220681916416) (= (x71 2 192) 6277101735386680763835789423207666416102355444464034512896) (= (x71 2 149) 713623846352979940529142984724747568191373312) (= 131072 (x71 2 17)) (= (x71 2 246) 113078212145816597093331040047546785012958969400039613319782796882727665664) (= (x71 2 92) 4951760157141521099596496896) (= 205688069665150755269371147819668813122841983204197482918576128 (x71 2 207)) (= 452312848583266388373324160190187140051835877600158453279131187530910662656 (x71 2 248)) (= (x71 2 178) 383123885216472214589586756787577295904684780545900544) (= (x71 2 126) 85070591730234615865843651857942052864) (= 28948022309329048855892746252171976963317496166410141009864396001978282409984 (x71 2 254)) (= (x71 2 145) 44601490397061246283071436545296723011960832) (= 649037107316853453566312041152512 (x71 2 109)) (= (x71 2 154) 22835963083295358096932575511191922182123945984) (= 1 (x71 2 0)) (= 220855883097298041197912187592864814478435487109452369765200775161577472 (x71 2 237)) (= (x71 2 202) 6427752177035961102167848369364650410088811975131171341205504) (= (x71 2 67) 147573952589676412928) (= 1569275433846670190958947355801916604025588861116008628224 (x71 2 190)) (= (x71 2 73) 9444732965739290427392) (= (x71 2 197) 200867255532373784442745261542645325315275374222849104412672) (= (x71 2 106) 81129638414606681695789005144064) (= 883423532389192164791648750371459257913741948437809479060803100646309888 (x71 2 239)) (= 3618502788666131106986593281521497120414687020801267626233049500247285301248 (x71 2 251)) (= (x71 2 215) 52656145834278593348959013841835216159447547700274555627155488768) (= 55213970774324510299478046898216203619608871777363092441300193790394368 (x71 2 235)) (= (x71 2 157) 182687704666362864775460604089535377456991567872) (= 2097152 (x71 2 21)) (= 18889465931478580854784 (x71 2 74)) (= (x71 2 212) 6582018229284824168619876730229402019930943462534319453394436096) (= 5846006549323611672814739330865132078623730171904 (x71 2 162)) (= 1024 (x71 2 10)) (= 11417981541647679048466287755595961091061972992 (x71 2 153)) (= (x71 2 48) 281474976710656) (= 144115188075855872 (x71 2 57)) (= (x71 2 250) 1809251394333065553493296640760748560207343510400633813116524750123642650624) (= 5192296858534827628530496329220096 (x71 2 112)) (= 39614081257132168796771975168 (x71 2 95)) (= 37778931862957161709568 (x71 2 75)) (= 137438953472 (x71 2 37)) (= (x71 2 28) 268435456) (= 1329227995784915872903807060280344576 (x71 2 120)) (= 356811923176489970264571492362373784095686656 (x71 2 148)) (= (x71 2 200) 1606938044258990275541962092341162602522202993782792835301376) (= (x71 2 161) 2923003274661805836407369665432566039311865085952) (= 2251799813685248 (x71 2 51)) (= (x71 2 35) 34359738368) (= 100433627766186892221372630771322662657637687111424552206336 (x71 2 196)) (= (x71 2 23) 8388608) (= 46768052394588893382517914646921056628989841375232 (x71 2 165)) (= 70368744177664 (x71 2 46)) (= 2535301200456458802993406410752 (x71 2 101)) (= 6901746346790563787434755862277025452451108972170386555162524223799296 (x71 2 232)) (= 166153499473114484112975882535043072 (x71 2 117)) (= (x71 2 111) 2596148429267413814265248164610048) (= (x71 2 24) 16777216) (= (x71 2 141) 2787593149816327892691964784081045188247552) (= 151115727451828646838272 (x71 2 77)) (= 2361183241434822606848 (x71 2 71)) (= 64 (x71 2 6)) (= 3064991081731777716716694054300618367237478244367204352 (x71 2 181)) (= (x71 2 241) 3533694129556768659166595001485837031654967793751237916243212402585239552) (= (x71 2 31) 2147483648) (= 4096 (x71 2 12)) (= 1532495540865888858358347027150309183618739122183602176 (x71 2 180)) (= 288230376151711744 (x71 2 58)) (= (x71 2 102) 5070602400912917605986812821504) (= (x71 2 133) 10889035741470030830827987437816582766592) (= 590295810358705651712 (x71 2 69)) (= (x71 2 103) 10141204801825835211973625643008) (= 392318858461667547739736838950479151006397215279002157056 (x71 2 188)) (= (x71 2 253) 14474011154664524427946373126085988481658748083205070504932198000989141204992) (= 25711008708143844408671393477458601640355247900524685364822016 (x71 2 204)) (= 2 (x71 2 1)) (= 411376139330301510538742295639337626245683966408394965837152256 (x71 2 208)) (= (x71 2 137) 174224571863520493293247799005065324265472) (= (x71 2 214) 26328072917139296674479506920917608079723773850137277813577744384) (= 3213876088517980551083924184682325205044405987565585670602752 (x71 2 201)) (= (x71 2 225) 53919893334301279589334030174039261347274288845081144962207220498432) (= 14134776518227074636666380005943348126619871175004951664972849610340958208 (x71 2 243)) (= (x71 2 152) 5708990770823839524233143877797980545530986496) (= (x71 2 129) 680564733841876926926749214863536422912) (= (x71 2 11) 2048) (= (x71 2 151) 2854495385411919762116571938898990272765493248) (= (x71 2 30) 1073741824) (= (x71 2 227) 215679573337205118357336120696157045389097155380324579848828881993728) (= 75557863725914323419136 (x71 2 76)) (= 1298074214633706907132624082305024 (x71 2 110)) (= 5444517870735015415413993718908291383296 (x71 2 132)) (= (x71 2 127) 170141183460469231731687303715884105728) (= (x71 2 233) 13803492693581127574869511724554050904902217944340773110325048447598592) (= 3138550867693340381917894711603833208051177722232017256448 (x71 2 191)) (= (x71 2 158) 365375409332725729550921208179070754913983135744) (= (x71 2 39) 549755813888) (= 1725436586697640946858688965569256363112777243042596638790631055949824 (x71 2 230)) (= 524288 (x71 2 19)) (= 57896044618658097711785492504343953926634992332820282019728792003956564819968 (x71 2 255)) (= (x71 2 234) 27606985387162255149739023449108101809804435888681546220650096895197184) (= 178405961588244985132285746181186892047843328 (x71 2 147)) (= 2658455991569831745807614120560689152 (x71 2 121)) (= 20769187434139310514121985316880384 (x71 2 114)) (= 73786976294838206464 (x71 2 66)) (= 332306998946228968225951765070086144 (x71 2 118)) (= (x71 2 27) 134217728) (= (x71 2 170) 1496577676626844588240573268701473812127674924007424) (= 6129982163463555433433388108601236734474956488734408704 (x71 2 182)) (= 42535295865117307932921825928971026432 (x71 2 125)) (= (x71 2 97) 158456325028528675187087900672) (= 766247770432944429179173513575154591809369561091801088 (x71 2 179)) (= 11692013098647223345629478661730264157247460343808 (x71 2 163)) (= 421249166674228746791672110734681729275580381602196445017243910144 (x71 2 218)) (= (x71 2 167) 187072209578355573530071658587684226515959365500928) (= (x71 2 156) 91343852333181432387730302044767688728495783936) (= 1237940039285380274899124224 (x71 2 90)) (= 4503599627370496 (x71 2 52)) (= 1267650600228229401496703205376 (x71 2 100)) (= 35184372088832 (x71 2 45)) (= 77371252455336267181195264 (x71 2 86)) (= (x71 2 98) 316912650057057350374175801344) (= 110427941548649020598956093796432407239217743554726184882600387580788736 (x71 2 236)) (= 21778071482940061661655974875633165533184 (x71 2 134)) (= (x71 2 18) 262144) (= (x71 2 108) 324518553658426726783156020576256) (= 98079714615416886934934209737619787751599303819750539264 (x71 2 186)) (= (x71 2 50) 1125899906842624) (= 41538374868278621028243970633760768 (x71 2 115)) (= 18446744073709551616 (x71 2 64)) (= 536870912 (x71 2 29)) (= (x71 2 25) 33554432) (= 822752278660603021077484591278675252491367932816789931674304512 (x71 2 209)) (= 12554203470773361527671578846415332832204710888928069025792 (x71 2 193)) (= 22300745198530623141535718272648361505980416 (x71 2 144)) (= 2199023255552 (x71 2 41)) (= (x71 2 99) 633825300114114700748351602688) (= 4 (x71 2 2)) (= 664613997892457936451903530140172288 (x71 2 119)) (= (x71 2 7) 128) (= (x71 2 78) 302231454903657293676544) (= 79228162514264337593543950336 (x71 2 96)) (= (x71 2 49) 562949953421312) (= (x71 2 199) 803469022129495137770981046170581301261101496891396417650688) (= (x71 2 205) 51422017416287688817342786954917203280710495801049370729644032) (= (x71 2 155) 45671926166590716193865151022383844364247891968) (= (x71 2 177) 191561942608236107294793378393788647952342390272950272) (= 16 (x71 2 4)) (= (x71 2 245) 56539106072908298546665520023773392506479484700019806659891398441363832832) (= 38685626227668133590597632 (x71 2 85)) (= 72057594037927936 (x71 2 56)) (= 9903520314283042199192993792 (x71 2 93)) (= (x71 2 123) 10633823966279326983230456482242756608) (= (x71 2 231) 3450873173395281893717377931138512726225554486085193277581262111899648) (= 1393796574908163946345982392040522594123776 (x71 2 140)) (= 1427247692705959881058285969449495136382746624 (x71 2 150)) (= (x71 2 42) 4398046511104) (= 7237005577332262213973186563042994240829374041602535252466099000494570602496 (x71 2 252)) (= 2475880078570760549798248448 (x71 2 91)) (= (x71 2 87) 154742504910672534362390528) (= 24519928653854221733733552434404946937899825954937634816 (x71 2 184)) (= 1208925819614629174706176 (x71 2 80)) (= (x71 2 238) 441711766194596082395824375185729628956870974218904739530401550323154944) (= (x71 2 168) 374144419156711147060143317175368453031918731001856) (= (x71 2 59) 576460752303423488) (= 11972621413014756705924586149611790497021399392059392 (x71 2 173)) (= 16384 (x71 2 14)) (= 618970019642690137449562112 (x71 2 89)) (= (x71 2 194) 25108406941546723055343157692830665664409421777856138051584) (= 36028797018963968 (x71 2 55)) (= (x71 2 47) 140737488355328) (= (x71 2 247) 226156424291633194186662080095093570025917938800079226639565593765455331328) (= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x71 2 256)) (= 26959946667150639794667015087019630673637144422540572481103610249216 (x71 2 224)) (= 67108864 (x71 2 26)) (= (x71 2 228) 431359146674410236714672241392314090778194310760649159697657763987456) (= (x71 2 176) 95780971304118053647396689196894323976171195136475136) (= (x71 2 183) 12259964326927110866866776217202473468949912977468817408) (= 196159429230833773869868419475239575503198607639501078528 (x71 2 187)) (= (x71 2 84) 19342813113834066795298816) (= (x71 2 83) 9671406556917033397649408) (= 50216813883093446110686315385661331328818843555712276103168 (x71 2 195)) (= 904625697166532776746648320380374280103671755200316906558262375061821325312 (x71 2 249)) (= 5986310706507378352962293074805895248510699696029696 (x71 2 172)) (= (x71 2 138) 348449143727040986586495598010130648530944) (= 4611686018427387904 (x71 2 62)) (= 23384026197294446691258957323460528314494920687616 (x71 2 164)) (= (x71 2 88) 309485009821345068724781056) (= (x71 2 44) 17592186044416) (= (x71 2 206) 102844034832575377634685573909834406561420991602098741459288064) (= 1461501637330902918203684832716283019655932542976 (x71 2 160)) (= (x71 2 116) 83076749736557242056487941267521536) (= (x71 2 220) 1684996666696914987166688442938726917102321526408785780068975640576) (= (x71 2 122) 5316911983139663491615228241121378304) (= (x71 2 211) 3291009114642412084309938365114701009965471731267159726697218048) (= (x71 2 65) 36893488147419103232) (= 862718293348820473429344482784628181556388621521298319395315527974912 (x71 2 229)) (= (x71 2 217) 210624583337114373395836055367340864637790190801098222508621955072) (= (x71 2 143) 11150372599265311570767859136324180752990208) (= (x71 2 185) 49039857307708443467467104868809893875799651909875269632) (= 256 (x71 2 8)) (= 17179869184 (x71 2 34)) (= 105312291668557186697918027683670432318895095400549111254310977536 (x71 2 216)) (= 1361129467683753853853498429727072845824 (x71 2 130)) (= (x71 2 54) 18014398509481984) (= (x71 2 81) 2417851639229258349412352) (= 2993155353253689176481146537402947624255349848014848 (x71 2 171)) (= (x71 2 124) 21267647932558653966460912964485513216) (= 1645504557321206042154969182557350504982735865633579863348609024 (x71 2 210)) (= (x71 2 159) 730750818665451459101842416358141509827966271488)))
(assert (x272 x638))
(assert (x272 x622))
(assert (x272 x458))
(assert (x272 x605))
(assert (x272 x915))
(assert (x272 x293))
(assert (x272 x536))
(assert (= 0 (x959 3248329723)))
(assert (x272 x1079))
(assert (= (=> (= (< 5 x777) x505) (and (=> (and (= x410 10000000000000000000000000) x505) x719) (=> (and (not x505) (and (= x289 (> x777 0)) (or (and (= x1050 1) (not x289)) (and x289 (and (<= x777 255) (= (x547 1 x777) x1050)))))) x10))) x724))
(assert (x272 x854))
(assert (x272 x883))
(assert (x272 x22))
(assert (x272 x766))
(assert (x271 1000000000000000000000000000))
(assert (x272 x960))
(assert (x272 x298))
(assert (x271 4294967295))
(assert (x897 x955))
(assert (x272 x446))
(assert (x272 x806))
(assert (x272 x1052))
(assert (x272 x926))
(assert (x272 x1037))
(assert (x272 x350))
(assert (x272 x887))
(assert (= x1070 x1085))
(assert (x272 x406))
(assert (x272 x815))
(assert (x272 x1073))
(assert (x272 x70))
(assert (x272 x1069))
(assert (= x872 (and (not x1138) x628)))
(assert (x272 x443))
(assert (x272 x908))
(assert (= 0 (x959 115792089237316195423570985008687907853269984665640564039457584007913129639904)))
(assert (=> (<= x622 10000) (= 0 (x959 x622))))
(assert (x272 x848))
(assert (x272 x693))
(assert (x272 x615))
(assert (x272 x145))
(assert (= 0 (x959 50942633119752846454219349998365661925608737367104304655302372697894809501696)))
(assert (= 0 (x959 2835717307)))
(assert (= x921 (and x867 x851)))
(assert (x272 x698))
(assert (x272 x1050))
(assert (= (x319 64 x658 0) (x959 (x319 64 x658 0))))
(assert (= x332 (and x341 x178)))
(assert (= x851 (and (not x133) x988)))
(assert (x272 x317))
(assert (= (and (not x566) x845) x984))
(assert (x115 x170))
(assert (= 0 (x959 57896044618658097711785492504343953926634992332820282019728792003956564819971)))
(assert (x272 x279))
(assert (or (= x955 1) (= 2 x955)))
(assert (x272 x1000))
(assert (x272 x233))
(assert (x271 1009924635))
(assert (x272 x342))
(assert (= (x175 (x319 64 x1061 7)) x1061))
(assert (x271 57896044618658097711785492504343953926634992332820282019728792003956564819907))
(assert (x272 x1030))
(assert (< (x319 64 x1078 21) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (not (x271 (x319 64 x1061 7))))
(assert (x272 x1096))
(assert (= (and (not x178) x341) x502))
(assert (= (and x1038 (not x529)) x642))
(assert (x272 x29))
(assert (= 7 (x3 (x319 64 x1061 7))))
(assert (x272 x282))
(assert (= (x175 (x319 64 x622 4)) x622))
(assert (x272 x917))
(assert (x272 x108))
(assert (x272 x382))
(assert (x272 x159))
(assert (= (x959 826074471) 0))
(assert (x272 x978))
(assert (x272 x556))
(assert (= (x959 57896044618658097711785492504343953926634992332820282019728792003956564819967) 0))
(assert (>= x801 0))
(assert (= (or x18 x7) x760))
(assert (x272 x1102))
(assert (x272 x261))
(assert (or (= 2 x80) (= 1 x80)))
(assert (x272 x150))
(assert (x115 x670))
(assert (x272 x362))
(assert (= x306 (and (not x850) x85)))
(assert (x272 x286))
(assert (x271 56073674))
(assert (x897 x975))
(assert (x115 340282366920938463463374607431768211455))
(assert (= (and x1107 (not x721)) x747))
(assert (=> (<= x930 10000) (= (x959 x930) 0)))
(assert (x272 x384))
(assert (x272 x263))
(assert (= x85 (or x872 x822)))
(assert (x272 x963))
(assert (= (and (not x5) x650) x199))
(assert (x272 x726))
(assert (x272 x445))
(assert (x271 1435762976))
(assert (x271 999999999999999999999999999))
(assert (x272 x249))
(assert (x272 x730))
(assert (x272 x555))
(assert (= x359 (or x642 x192)))
(assert (x272 x500))
(assert (x272 x987))
(assert (x272 x1031))
(assert (not (x271 (x319 64 x788 0))))
(assert (= x877 (=> (and (>= 340282366920938463463374607431768211455 x518) (>= 340282366920938463463374607431768211455 x309) (= x561 x1096) (= x308 (x86 x74)) (= (x791 x74) x309) (= x518 (+ x308 x554)) (= x145 x309) (>= 340282366920938463463374607431768211455 x308) (= x554 (x396 340282366920938463463374607431768211455 x654))) x1095)))
(assert (x272 x372))
(assert (x272 x248))
(assert (> (x467 32 3) 10000))
(assert (x272 x920))
(assert (x272 x1092))
(assert (x272 x388))
(assert (= x977 (and (not x256) x570)))
(assert (x272 x114))
(assert (= (and x65 x148) x462))
(assert (= (and x566 x845) x236))
(assert (x272 x460))
(assert (x272 x624))
(assert (= (and x191 (not x564)) x807))
(assert (x272 x933))
(assert (= (x319 64 x1061 7) (x959 (x319 64 x1061 7))))
(assert (x271 115792089237316195423570985008687907853269984665640564039457584007913129639840))
(assert (x272 x94))
(assert (x272 x973))
(assert (= (x175 (x319 64 x658 0)) x658))
(assert (x272 x607))
(assert (x272 x645))
(assert (x272 x812))
(assert (x272 x523))
(assert (= x788 (x175 (x319 64 x788 0))))
(assert (= (x175 (x319 64 x1078 21)) x1078))
(assert (x272 x195))
(assert (x272 x561))
(assert (< (x319 64 x1061 7) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x272 x1122))
(assert (x272 x379))
(assert (x272 x828))
(assert (x272 x1049))
(assert (= (x959 (x319 64 x788 0)) (x319 64 x788 0)))
(assert (x272 x54))
(assert (x272 x1044))
(assert (x272 x329))
(assert (= (or x44 x462) x552))
(assert (x272 x14))
(assert (x272 x1029))
(assert (x272 x79))
(assert (= 0 (x959 108426767173742856395030365509996896678797929141504625213834505309054379753472)))
(assert (= x836 (=> (and (and (= x1030 (+ x883 x782)) (= x1138 (> x70 0)) (= (+ x883 x782) x337)) (or (and (= x35 (ite x1138 1 0)) (not x1138)) (and (and (= (ite (= 0 x971) 1 0) x35) (<= x971 255) (= (x319 64 x1078 21) x1091) (= (x934 x1091) x971)) x1138))) x553)))
(assert (= 0 (x959 1435762976)))
(assert (x272 x1126))
(assert (x272 x860))
(assert (x272 x1054))
(assert (x272 x643))
(assert (x272 x940))
(assert (= (x959 115792089237316195423570985008687907853269984665640564039457584007913129639935) 0))
(assert (x115 x45))
(assert (x401 (ite (< x45 78) 1 0) (ite (> 32 x45) 1 0)))
(assert (x272 x146))
(assert (x272 x1080))
(assert (not (x271 (x319 64 x788 14))))
(assert (x272 x1112))
(assert (= (and (not x612) x711) x951))
(assert (x272 x582))
(assert (or (= x1128 1) (= x1128 2)))
(assert (x272 x142))
(assert (or (= x506 2) (= x506 1)))
(assert (x272 x212))
(assert (x272 x745))
(assert (x272 x1063))
(assert (x272 x925))
(assert (x272 x30))
(assert (x272 x227))
(assert (x272 x835))
(assert (x272 x654))
(assert (= (x959 x586) (x959 (+ 1 x586))))
(assert (x272 x338))
(assert (x272 x9))
(assert (x272 x603))
(assert (= (=> (and (= (div x161 31449600) x887) (= x493 (x1087 (- x222 x227))) (<= x283 10000000000000000000000000) (not (> x887 x222)) (not (< x410 x283)) (>= 20000000000000000000000000 x493) (not (> x493 x222)) (= (+ x887 x500) x222) (= (x1087 (- x410 x602)) x283) (= x440 (> x493 0)) (= x161 (* (ite (= 0 (mod x678 31449600)) 31449600 (mod x678 31449600)) x283))) (and (=> (and x440 (and (and (= x677 (x319 64 x415 6)) (<= x495 9999999999999999999999999) (<= x204 10000000000000000000000000) (= x204 (ite (< x493 x1048) x493 x1048)) (= x298 x217) (= x265 (x1087 (- x1048 x204))) (>= 1461501637330902918203684832716283019655932542975 x415) (= (x1087 (- x1048 x204)) x495) (>= x323 1) (= x1106 x985) (= 1009924635 x829) (= x323 (x752 x1061)) (= x1103 x723) (= (+ 1 x677) x74) x532 (= x564 (= x869 0)) (>= 340282366920938463463374607431768211455 x985) (= x357 128) (= x679 128) (= x869 (x473 x74)) (not (< x1048 x495)) (<= 1 x415) (= x327 (x752 x1061)) (<= x116 127) (= (= x648 x114) x532) (>= x204 1) (= x985 x1058) (<= 1 x327) (= x117 27227514297441576384645560158297793745907797203376573435669607978121727836160) (= x217 x204) (>= 340282366920938463463374607431768211455 x869) (= x366 false) (= x635 x723) (= x139 68) (>= 127 x116) (= x434 false)) (or (not x564) x564))) x669) (=> (not x440) x1085))) x738))
(assert (x272 x787))
(assert (x272 x942))
(assert (x272 x228))
(assert (x272 x1041))
(assert (x272 x1134))
(assert (= (x959 999999999999999999999999999) 0))
(assert (x272 x956))
(assert (= (=> (= (= 0 x35) x850) (and (=> x850 x39) (=> (and (and (= x28 (x1087 (- x228 x258))) (<= 1 x226) (<= x636 127) (= false x275) (= (x475 (+ 32 x1039)) x228) (= x1045 false) (>= x406 1) (= x302 (x752 x1118)) (= x28 36) (= (x475 (+ 4 x258)) x1039) (<= 1 x302) (= (x752 x1118) x226) (= x962 (x319 64 x1078 21)) (= x415 x292) (= 36 x1059) (<= x636 127) (= 89636891990589868803906418308618022056609234381241109476909007520468331134976 x835) (= x1103 x292) (= (= x1048 0) x1088) (= x300 3324817111)) (not x850)) (and (=> x1088 x1070) (=> (and (and (or (and x721 (= x777 0)) (and (and (= (x1087 (- x678 1)) x198) (= x1092 (div x198 31449600)) (not (> x1092 x101)) (= (+ 1 x1092) x101) (= x101 x777) (not (< x678 x198))) (not x721))) (and (= x721 (= 0 x678)) (= 10000000000000000000000000 x414) (= x257 0) (<= 1 x1048) (= x23 (- 10000000000000000000000000 x1048)) (>= 10000000000000000000000000 x1048) (= 31449600 x47) (= (= x1048 10000000000000000000000000) x444) (not (> x678 x88)) (= x678 (x1087 (- x88 x406))))) (not x1088)) x724))))) x553))
(assert (> (x319 64 x1061 7) 10000))
(assert (x271 1086394137))
(assert (x272 x340))
(assert (x272 x117))
(assert (x272 x490))
(assert (x272 x251))
(assert (x272 x1025))
(assert (x272 x604))
(assert (= 64 (x531 (x319 64 x1061 7))))
(assert (x272 x520))
(assert (x272 x795))
(assert (= x863 (=> (and (or (and (not x862) (and (= (= x658 x1078) x566) (or (and (not x566) (and (= (x319 64 x788 0) x522) (= x333 x1078) (= (x752 x333) x144) (= x891 (x839 x522)) (>= 127 x249) (= x360 x1046) (= 1889567281 x465) (= false x786) (= x788 x1046) (>= x144 1) (<= x249 127) (= x503 false) (= x230 36) (= false x334) (= x1112 50942633119752846454219349998365661925608737367104304655302372697894809501696) (= x700 false))) (and (and (= x81 (x319 64 x788 0)) (= (x752 x658) x508) (= false x697) (= x911 x75) (= x517 false) (>= 127 x830) (= 50942633119752846454219349998365661925608737367104304655302372697894809501696 x78) (= x75 x788) (= x59 (x630 x81)) (= x386 false) (= 36 x1024) (>= 127 x830) (>= x508 1) (= x809 false) (= 1889567281 x89)) x566)))) (and x862 (and (>= 127 x873) (>= x1111 1) (= x1137 false) (= x1068 x788) (= x1012 36) (= x152 50942633119752846454219349998365661925608737367104304655302372697894809501696) (= x167 false) (= (x319 64 x788 14) x763) (<= x873 127) (= x1021 false) (= (x752 x469) x1111) (= x702 x1068) (= x1037 (x1105 x763)) (= x992 1889567281) (= x491 false)))) (and (not (= x656 x658)) (>= x464 1) (not (= x1061 x656)) (not (= x417 x656)) (= (x584 4) x1078) (= x876 x736) (not (= x1118 x253)) (not (= x417 x788)) (<= x417 1461501637330902918203684832716283019655932542975) x1035 (<= x399 1) (not (= x469 x342)) (<= x930 1461501637330902918203684832716283019655932542975) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x1130) (not (= x333 x469)) (= false x1032) (not (= x930 x1061)) (= (ite (not (= 0 (ite (not (= x676 0)) 1 0))) 1 0) x779) (not (= x1124 x1118)) x859 (not (= x930 x658)) (not (= x1061 x417)) (<= x469 1461501637330902918203684832716283019655932542975) (<= x643 1461501637330902918203684832716283019655932542975) (= (= x80 x263) x732) (= x417 x834) (>= 1461501637330902918203684832716283019655932542975 x550) (not (= x788 x1118)) (<= x210 127) (= 0 x716) (not (= x1118 x930)) (<= 0 x356) (not (= x658 x788)) (not (= x342 x1124)) (>= 1461501637330902918203684832716283019655932542975 x1118) (not (= x417 x255)) (= false x558) x371 (<= x834 1461501637330902918203684832716283019655932542975) (<= 1 x255) (= (< 0 (x752 x253)) x757) (= (ite (not (= (ite (not (= 0 x766)) 1 0) 0)) 1 0) x991) (not (= x788 x930)) (>= 1461501637330902918203684832716283019655932542975 x656) (>= x834 1) (= 56073674 x579) (<= x939 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= 1461501637330902918203684832716283019655932542975 x658) (>= 127 x443) (= x753 (= x1078 x253)) (not (= x255 x253)) (<= x676 255) (= (x365 352) x63) (>= 255 x766) (or (and (>= x80 0) (<= x80 1)) (and (>= x80 3) (<= x80 115792089237316195423570985008687907853269984665640564039457584007913129639935))) (= x311 false) (>= x433 0) (not (= x658 x1118)) x625 (not (= x1061 x1118)) (= x658 x990) (not (= x788 x255)) (= x949 128) (not (= x1124 x930)) (not (= x253 x417)) x732 (not (= x255 x656)) (= x1036 (= x255 x1078)) x368 (not (= x253 x1124)) (not (= x1118 x255)) (not (= x417 x342)) (= (> (x752 x656) 0) x1035) (<= x255 1461501637330902918203684832716283019655932542975) (<= x816 65535) (not (= x930 x253)) (not (= x255 x658)) (= x37 x88) (>= 1461501637330902918203684832716283019655932542975 x27) (>= x27 0) (not (= x333 x656)) (<= x333 1461501637330902918203684832716283019655932542975) (not (= x469 x658)) (<= 0 x580) (not (= x656 x788)) (not (= x469 x1124)) (not (= x656 x930)) x757 (not (= x255 x930)) x322 (= 2 x1) (= (< 0 (x752 x342)) x859) (= false x373) (<= 1 x333) (<= x784 65535) (>= x643 1) (= x42 false) (not (= x253 x788)) (<= x211 57896044618658097711785492504343953926634992332820282019728792003956564819967) (<= 1 x1118) (<= 0 x939) (not (= x1061 x788)) (not x1036) (not (= x417 x1118)) (= (> (x752 x1124) 0) x368) (<= 1 x1078) (<= 1 x253) (not (= x1061 x342)) (not (= x788 x333)) (not (= x333 x658)) (= x418 (> (x752 x417) 0)) (<= 0 x550) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x530) (= (< 0 (x752 x930)) x746) (not x753) (not (= x333 x253)) (not (= x333 x1124)) (= x704 (x752 x788)) (<= 1 x990) (= x1027 (x112 192)) (= 2 x383) (= (x365 320) x318) (= (x365 352) x576) (= false x126) (not x507) (= (x112 160) x1055) (<= x433 4294967295) (<= 1 x788) (>= x407 0) (= x981 (ite (not (= x399 0)) 1 0)) (not (= x930 x342)) (not (= x656 x1124)) (not (= x469 x788)) (= (= x788 x1078) x507) (>= x342 1) (not (= x930 x417)) (not (= x656 x469)) (not (= x342 x788)) (>= x656 1) x746 (>= 1461501637330902918203684832716283019655932542975 x253) (= x232 x788) (not (= x255 x333)) (= (< 0 (x752 x1118)) x322) (= 36 x693) (>= x211 36) (= x581 false) (= x862 (= x469 x1078)) (= (x365 384) x1001) (>= 1461501637330902918203684832716283019655932542975 x580) (<= x210 127) (<= 1 x1061) (<= 0 x15) (not (= x658 x417)) (= x919 false) (<= x342 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x1002) (not (= x333 x417)) (= x917 x1067) (= x768 (> (x752 x1061) 0)) (= x530 x648) (not (= x658 x253)) x418 (>= 1461501637330902918203684832716283019655932542975 x788) (<= 1 x658) (not (= x930 x469)) (>= x274 0) (<= x274 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x369 x27) (= x464 (x752 x656)) (= x519 (> (x752 x333) 0)) (= x1078 x895) (= x399 x981) (<= x34 1461501637330902918203684832716283019655932542975) (not (= x255 x1061)) (= 3125194354 x266) (not (= x656 x342)) (<= 1 x417) (= x102 x468) (not (= x658 x1061)) (not (= x1124 x255)) (not (= x253 x342)) (= x1005 320) (<= x1061 1461501637330902918203684832716283019655932542975) (<= x968 1461501637330902918203684832716283019655932542975) (not (= x342 x658)) (not (= x1118 x656)) (<= 1 x704) (= (x13 x788) x468) x519 (<= 0 x1130) (>= x469 1) (not x914) (= 2 x651) (not (= x417 x1124)) (>= x1124 1) (not (= x253 x656)) (= (x584 0) x736) (not (= x253 x1061)) (<= 0 x530) (not (= x253 x469)) (= x882 (< 0 (x752 x658))) (<= x443 127) (not (= x333 x930)) (= x415 x27) (= x293 84255073108320296753781074859986568468416020394006387453872774439866376126464) (<= x331 65535) (>= x930 1) (not (= x255 x342)) (not (= x255 x469)) (= x1067 x895) (= x385 (x365 384)) (not (= x342 x1118)) (not (= x1124 x1061)) (= (x365 320) x1081) (not (= x469 x1061)) (= (x639 x369) x354) (= (> (x752 x255) 0) x130) (= x1055 1) (not (= x342 x333)) (= x914 (= x1078 x930)) (>= 1461501637330902918203684832716283019655932542975 x407) (= false x1116) (= (< 0 (x752 x788)) x371) x882 (= false x58) (= x399 (x112 128)) (= (> (x752 x469) 0) x625) (<= x1078 1461501637330902918203684832716283019655932542975) (<= x1124 1461501637330902918203684832716283019655932542975) (= 56073674 x1136) (not (= x1118 x469)) (= false x157) (<= 0 x37) (not (= x333 x1118)) (= x643 x658) x130 (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x37) (not (= x658 x1124)) (<= x15 115792089237316195423570985008687907853269984665640564039457584007913129639935) (<= x356 115792089237316195423570985008687907853269984665640564039457584007913129639935) (not (= x788 x1124)) (not (= x1061 x333)) (not (= x417 x469)) x768 (not (= x263 2)) (>= 1461501637330902918203684832716283019655932542975 x990) (= x601 1))) x998)))
(assert (x272 x237))
(assert (x272 x780))
(assert (x271 18446744073709551613))
(assert (x272 x551))
(assert (x272 x412))
(assert (x272 x308))
(assert (= x988 (or x1142 x164)))
(assert (x272 x478))
(assert (x272 x188))
(assert (x272 x635))
(assert (= x110 (and x552 x623)))
(assert (x272 x1081))
(assert (x272 x315))
(assert (x272 x830))
(assert (= (and x612 x711) x437))
(assert (x115 x654))
(assert (x272 x250))
(assert (x115 x528))
(assert (x272 x19))
(assert (x272 x255))
(assert (= true x666))
(assert (= 0 (x959 84255073108320296753781074859986568468416020394006387453872774439866376126464)))
(assert (= (x175 (x319 64 x415 6)) x415))
(assert (x272 x309))
(assert (x272 x313))
(assert (= (=> (and (and (= x435 (div 1000000000000000000 x494)) (= x31 (* 10000000000000000000000000 (- 1000000000000000000 x435))) (= x533 (div x31 1000000000000000000))) (or (and x444 (and (= x1120 0) (= x1143 x23))) (and (and (>= 9999999999999999999999999 x688) (= x861 (x1087 (- x533 x41))) (= x688 x1143) (= (ite (> x533 x23) x23 x533) x41) (= x861 x1120) (not (< x533 x861)) (>= 9999999999999999999999999 x41) (>= 10000000000000000000000000 x861) (not (< x23 x688)) (= x688 (x1087 (- x23 x41)))) (not x444)))) x171) x422))
(assert (x272 x257))
(assert (x272 x1028))
(assert (= 0 (x959 340282366920938463463374607431768211455)))
(assert (x272 x429))
(assert (x336 x185))
(assert (x271 20000000000000000000000000))
(assert (x272 x538))
(assert (= x641 (and x570 x256)))
(assert (x272 x1090))
(assert (> (x319 64 x622 4) 10000))
(assert (x272 x226))
(assert (x272 x1119))
(assert (x272 x1046))
(assert (x272 x640))
(assert (= 0 (x959 29289127993025145568725129057828671567744754166070328588094505464281371246592)))
(assert (= x570 (and x1089 x332)))
(assert (x271 340282366920938463463374607431768211455))
(assert (x272 x571))
(assert (x272 x982))
(assert (x272 x873))
(assert (= (x959 115792089237316195423570985008687907853269984665640564039457584007913129639905) 0))
(assert (x272 x1015))
(assert (= (x959 76450787359836037641860180984291677749980919077056822294353438043884394381312) 0))
(assert (x272 x535))
(assert (x272 x1061))
(assert (x272 x704))
(assert (x271 18446744073709551615))
(assert (x272 x696))
(assert (x272 x389))
(assert (x271 29289127993025145568725129057828671567744754166070328588094505464281371246592))
(assert (= x938 (=> (and (or (and x858 (and (= x352 (x319 64 x788 0)) (= (x475 (+ 32 x986)) x907) (= (x475 (+ 4 x79)) x523) (= (x319 64 x622 4) x606) (>= 127 x771) (= false x903) (= (x396 1461501637330902918203684832716283019655932542975 x528) x229) (>= x935 1) (= 36 x875) (<= x535 127) (>= 127 x535) (not (= x1053 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (= x315 (x752 x656)) (<= 1 x315) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x1053) (= (x752 x930) x223) (= x492 false) (= x638 36) (= (x608 x879) x714) (= x55 false) (= x431 x622) (= x520 (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 x282)) (= (x475 (+ x1053 4)) x986) (= x1020 108426767173742856395030365509996896678797929141504625213834505309054379753472) (= x1042 (mod (* x282 x691) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x1053) (= x883 x798) (= false x844) (= x638 (x1087 (- x231 x79))) (= false x699) (= (= x930 x229) x202) (<= 1 x223) (= x841 x598) x202 (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x79) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x1053) (< x79 x1053) (= x195 (x475 (+ 32 x1053))) (= 1889567281 x683) (= x827 (x1087 (- x907 x1053))) (= 36 x827) (= x742 0) (not (= x79 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (>= x714 1) (= (x475 (+ x523 32)) x231) (< x1053 x195) (= (div x1042 1000000000000000000) x798) (= x282 (x151 x1053)) (= x812 (x201 x606)) (= x239 false) (= x448 (x758 x79)) (= x350 (x619 x1102)) (= 4021772317 x22) (= x598 x788) (= x563 false) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x79) (<= x826 1) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639904 x79)) (not (= x79 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (= (x189 x352) x205) (= x742 (* (ite (> x691 x520) 1 0) x282)) (= false x498) (= (x475 (+ x79 32)) x1053) (= x1102 (+ 32 x879)) (= 36 x261) (not (= x1053 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (= (x619 x1102) x528) (<= x771 127) (= x556 50942633119752846454219349998365661925608737367104304655302372697894809501696) (= x691 (mod (* x448 x902) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (<= x79 115792089237316195423570985008687907853269984665640564039457584007913129639934) (not (= x1053 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (= (x396 1461501637330902918203684832716283019655932542975 x350) x622) (= x195 x258) (= (x608 x879) x935))) (and (and (= 0 x883) (= x258 x79)) (not x858))) (and (= (> x826 0) x858) (= x826 (x608 x879)))) x836)))
(assert (x272 x165))
(assert (= (and (not x344) x25) x18))
(assert (x272 x177))
(assert (x272 x676))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x319 64 x788 0)))
(assert (x272 x215))
(assert (x271 65535))
(assert (x272 x34))
(assert (x272 x880))
(assert (x272 x995))
(assert (x271 57896044618658097711785492504343953926634992332820282019728792003956564819968))
(assert (x271 10000000000000000000000000))
(assert (x271 2835717307))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x319 64 x415 6)))
(assert (< 10000 (x319 64 x415 6)))
(assert (= x25 (or x807 x454)))
(assert (x272 x230))
(assert (x271 87574796089400210963483481994855297801658048744582212763804713015135770247168))
(assert (=> (>= 10000 x1078) (= (x959 x1078) 0)))
(assert (x272 x565))
(assert (x272 x378))
(assert (x272 x1024))
(assert (=> (<= x788 10000) (= (x959 x788) 0)))
(assert (= (or x1071 x238 x1056) x148))
(assert (= 64 (x531 (x319 64 x415 1))))
(assert (x272 x259))
(assert (x272 x300))
(assert (x271 27227514297441576384645560158297793745907797203376573435669607978121727836160))
(assert (x272 x576))
(assert (x272 x277))
(assert (or (= x975 2) (= 1 x975)))
(assert (= (x531 (x319 64 x622 4)) 64))
(assert (<= 0 x516))
(assert (x272 x466))
(assert (x272 x59))
(assert (= x1038 (or x641 x709 x977 x502 x1113)))
(assert (x272 x1106))
(assert (x272 x831))
(assert (= (x531 (x319 64 x788 14)) 64))
(assert (=> (<= x469 10000) (= (x959 x469) 0)))
(assert (x272 x337))
(assert (x272 x679))
(assert (or (= 2 x543) (= 1 x543)))
(assert (x272 x678))
(assert (x272 x554))
(assert (x272 x713))
(assert (x272 x715))
(assert (x272 x325))
(assert (x272 x4))
(assert (= 0 (x959 20000000000000000000000000)))
(assert (= (x959 1086394137) 0))
(assert (x272 x1039))
(assert (x272 x452))
(assert (=> (<= x255 10000) (= (x959 x255) 0)))
(assert (x272 x399))
(assert (not (x271 (x467 32 3))))
(assert (x272 x832))
(assert (= x320 (and x858 x359)))
(assert (= x1076 (and x345 (not x289))))
(assert (or (= 2 x383) (= 1 x383)))
(assert (=> (>= 10000 x369) (= 0 (x959 x369))))
(assert (x272 x211))
(assert (x272 x777))
(assert (=> (>= 10000 x415) (= 0 (x959 x415))))
(assert (x272 x183))
(assert (x272 x691))
(assert (x115 x185))
(assert (x272 x1062))
(assert (x272 x779))
(assert (x336 x350))
(assert (x272 x119))
(assert (= (x959 18446744073709551615) 0))
(assert (= (and x447 x245) x297))
(assert (x272 x902))
(assert (x272 x895))
(assert (x272 x1139))
(assert (= x881 (or x951 x437)))
(assert (x272 x705))
(assert (x272 x438))
(assert (x336 x987))
(assert (x272 x265))
(assert (x272 x1))
(assert (x272 x51))
(assert (x271 4021772317))
(assert (x272 x357))
(assert (= x247 (and x666 x862)))
(assert (x272 x717))
(assert (x272 x88))
(assert (x631 x45))
(assert (x271 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x272 x651))
(assert (= 4 (x3 (x319 64 x622 4))))
(assert (x272 x57))
(assert (< (x319 64 x658 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x271 115792089237316195423570985008687907853269984665640564039457584007913129639934))
(assert (x67 x654))
(assert (x272 x706))
(assert (x272 x398))
(assert (x272 x729))
(assert (x272 x1118))
(assert (x272 x750))
(assert (= x657 (or x760 (and x351 (not x440)))))
(assert (x272 x75))
(assert (x272 x514))
(assert (= x128 (or (and x850 x85) x727)))
(assert (= (and (not x444) x755) x593))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x319 64 x415 1)))
(assert (x272 x985))
(assert (x272 x633))
(assert (= (x959 (x319 64 x622 4)) (x319 64 x622 4)))
(assert (x272 x620))
(assert (and (= (x71 10 57) 1000000000000000000000000000000000000000000000000000000000) (= 10000000000000000000000000000000000000000000000000 (x71 10 49)) (= 1000000000000000000000000000000000000000000000000000 (x71 10 51)) (= (x71 10 17) 100000000000000000) (= 10000000000000000000000000000000000000000000000000000000000 (x71 10 58)) (= (x71 10 61) 10000000000000000000000000000000000000000000000000000000000000) (= 1000000000000000000000000000000000000000000000000 (x71 10 48)) (= (x71 10 77) 100000000000000000000000000000000000000000000000000000000000000000000000000000) (= (x71 10 40) 10000000000000000000000000000000000000000) (= (x71 10 2) 100) (= 10000000000000000000000000 (x71 10 25)) (= (x71 10 66) 1000000000000000000000000000000000000000000000000000000000000000000) (= 1000000000000000000000000000000000000000000000 (x71 10 45)) (= (x71 10 10) 10000000000) (= (x71 10 8) 100000000) (= (x71 10 42) 1000000000000000000000000000000000000000000) (= 1000000000000000000000000000000000000000000000000000000000000000000000000 (x71 10 72)) (= 1000000000000000000000000000000000000000000000000000000 (x71 10 54)) (= (x71 10 41) 100000000000000000000000000000000000000000) (= 10000000000000000000000000000000000000 (x71 10 37)) (= (x71 10 36) 1000000000000000000000000000000000000) (= 100000000000000000000000 (x71 10 23)) (= (x71 10 30) 1000000000000000000000000000000) (= 100000000000000000000000000000 (x71 10 29)) (= 1 (x71 10 0)) (= (x71 10 73) 10000000000000000000000000000000000000000000000000000000000000000000000000) (= 1000000000000000 (x71 10 15)) (= (x71 10 64) 10000000000000000000000000000000000000000000000000000000000000000) (= (x71 10 52) 10000000000000000000000000000000000000000000000000000) (= (x71 10 65) 100000000000000000000000000000000000000000000000000000000000000000) (= 1000000000000000000000000000000000000000000000000000000000000000 (x71 10 63)) (= (x71 10 18) 1000000000000000000) (= (x71 10 60) 1000000000000000000000000000000000000000000000000000000000000) (= (x71 10 39) 1000000000000000000000000000000000000000) (= 100000000000000000000000000000000000000000000 (x71 10 44)) (= 10000000000000 (x71 10 13)) (= (x71 10 33) 1000000000000000000000000000000000) (= 100000000000000000000000000000000000000000000000000000000000000000000 (x71 10 68)) (= 100000000000000000000000000000000000000000000000000000000000000 (x71 10 62)) (= 10000000 (x71 10 7)) (= 100000000000000000000000000000000000000000000000000 (x71 10 50)) (= 10000000000000000000000000000000000000000000000000000000000000000000000 (x71 10 70)) (= (x71 10 55) 10000000000000000000000000000000000000000000000000000000) (= 10000000000000000000000000000 (x71 10 28)) (= (x71 10 31) 10000000000000000000000000000000) (= (x71 10 53) 100000000000000000000000000000000000000000000000000000) (= 10000000000000000000000000000000000 (x71 10 34)) (= 100000000000 (x71 10 11)) (= (x71 10 24) 1000000000000000000000000) (= 1000000000000000000000000000000000000000000000000000000000000000000000000000 (x71 10 75)) (= (x71 10 16) 10000000000000000) (= 1000000000000000000000000000000000000000000000000000000000000000000000 (x71 10 69)) (= 100000000000000000000000000000000000000000000000 (x71 10 47)) (= 100000000000000000000000000000000000 (x71 10 35)) (= 10 (x71 10 1)) (= 100000000000000000000000000 (x71 10 26)) (= (x71 10 76) 10000000000000000000000000000000000000000000000000000000000000000000000000000) (= (x71 10 46) 10000000000000000000000000000000000000000000000) (= (x71 10 19) 10000000000000000000) (= 10000000000000000000000000000000000000000000000000000000000000000000 (x71 10 67)) (= 1000 (x71 10 3)) (= 100000000000000000000000000000000000000000000000000000000000000000000000000 (x71 10 74)) (= 100000000000000000000000000000000000000 (x71 10 38)) (= 10000 (x71 10 4)) (= 10000000000000000000000000000000000000000000 (x71 10 43)) (= (x71 10 22) 10000000000000000000000) (= (x71 10 71) 100000000000000000000000000000000000000000000000000000000000000000000000) (= (x71 10 5) 100000) (= 100000000000000 (x71 10 14)) (= (x71 10 56) 100000000000000000000000000000000000000000000000000000000) (= (x71 10 12) 1000000000000) (= 1000000000000000000000000000 (x71 10 27)) (= 100000000000000000000 (x71 10 20)) (= (x71 10 9) 1000000000) (= (x71 10 21) 1000000000000000000000) (= 100000000000000000000000000000000 (x71 10 32)) (= (x71 10 6) 1000000) (= (x71 10 59) 100000000000000000000000000000000000000000000000000000000000)))
(assert (= (and (not x862) x666) x845))
(assert (x272 x596))
(assert (=> (<= x656 10000) (= (x959 x656) 0)))
(assert (or (= 2 x912) (= 1 x912)))
(assert (x272 x134))
(assert (x272 x299))
(assert (x272 x1009))
(assert (=> (>= 10000 x253) (= 0 (x959 x253))))
(assert (x272 x185))
(assert (= (and (not x1089) x332) x709))
(assert (x272 x911))
(assert (x272 x820))
(assert (x272 x626))
(assert (x272 x385))
(assert (x271 3248329723))
(assert (x272 x200))
(assert (x272 x1103))
(assert (= x788 (x175 (x319 64 x788 14))))
(assert (x115 x350))
(assert (= 0 (x959 115792089237316195423570985008687907853269984665640564039457584007913129639840)))
(assert (x272 x455))
(assert (= (x547 1 x777) (mod (ite (< x777 256) (x71 2 x777) 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(assert (x272 x855))
(assert (x272 x528))
(assert (=> (>= 10000 x1124) (= (x959 x1124) 0)))
(assert (x272 x435))
(assert (< (x319 64 x788 14) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x272 x180))
(assert (= x164 (or x1076 x459)))
(assert (x272 x723))
(assert (x272 x456))
(assert (x272 x935))
(assert (= 32 (x531 (x467 32 3))))
(assert (x272 x946))
(assert (x272 x33))
(assert (x272 x428))
(assert (x271 108426767173742856395030365509996896678797929141504625213834505309054379753472))
(assert (= x171 (=> (and (= x500 x1120) (= x602 x533) (= x227 x1143)) x738)))
(assert (> (x319 64 x415 1) 10000))
(assert (x272 x656))
(assert (x272 x813))
(assert (x272 x495))
(assert (< 10000 (x319 64 x788 0)))
(assert (x272 x56))
(assert (x952 x30))
(assert (x272 x1068))
(assert (x272 x864))
(assert (x271 38708093259629484031895142510376203906402151220248653826213023215758465826816))
(assert (x272 x102))
(assert (= (and (not x867) x851) x548))
(assert (= 0 (x959 57896044618658097711785492504343953926634992332820282019728792003956564819968)))
(assert (x272 x170))
(assert (= 64 (x531 (x319 64 x788 0))))
(assert (x271 43125368017184674342631469786930412259358796246078251365432886109726937448448))
(assert (x272 x986))
(assert (x272 x205))
(assert (x272 x138))
(assert (x271 31449600))
(assert (= (and x133 x988) x751))
(assert (x271 22270923681254677845691103109158760375340177724800803888364822332811285364736))
(assert (x272 x969))
(assert (x272 x476))
(assert (x272 x231))
(assert (= (x959 (x467 32 3)) (x467 32 3)))
(assert (x272 x465))
(assert (x272 x971))
(assert (not (x271 (x319 64 x622 4))))
(assert (x272 x773))
(assert (= 0 (x3 (x319 64 x658 0))))
(assert (= (x959 (x319 64 x788 14)) (x319 64 x788 14)))
(assert (x272 x206))
(assert (= (x959 3125194354) 0))
(assert (x272 x1127))
(assert (x115 x317))
(assert (x272 x947))
(assert (x272 x781))
(assert (= x637 (and x721 x1107)))
(assert (= 0 (x959 115792089237316195423570985008687907853269984665640564039457584007913129639775)))
(assert (x272 x292))
(assert (= 0 (x959 9999999999999999999999999)))
(assert (x272 x842))
(assert (x272 x1131))
(assert (x272 x788))
(assert (x272 x595))
(assert (x272 x797))
(assert (x272 x1115))
(assert (x272 x524))
(assert (= (or x921 x548) x755))
(assert (= 0 (x959 18446744073709551582)))
(assert (x271 18446744073709551582))
(assert (x272 x1058))
(assert (x272 x900))
(assert (x272 x743))
(assert (x897 x80))
(assert (x272 x798))
(assert (x272 x665))
(assert (x272 x501))
(assert (x272 x214))
(assert (x272 x302))
(assert (x272 x930))
(assert (=> (= x212 0) (= 0 (div x135 x212))))
(assert (= (x959 10000000000000000000000000) 0))
(assert (x272 x899))
(assert (x272 x649))
(assert (x272 x48))
(assert (= x374 (or x747 x637)))
(assert (x272 x1055))
(assert (= (x959 43125368017184674342631469786930412259358796246078251365432886109726937448448) 0))
(assert (= 0 (x959 4294967295)))
(assert (x272 x156))
(assert (x272 x968))
(assert (x272 x360))
(assert (x272 x1129))
(assert (x272 x588))
(assert (x272 x1114))
(assert (= 0 (x3 (x319 64 x788 0))))
(assert (x272 x886))
(assert (= (and x650 x5) x353))
(assert (x272 x93))
(assert (x272 x784))
(assert (x897 x543))
(assert (x272 x834))
(assert (x272 x518))
(assert (= x711 (and x552 (not x623))))
(assert (x336 x317))
(assert (x272 x1022))
(assert (x271 3681830269298057699416558080506203826225770269435559245251373117874731))
(assert (x272 x410))
(assert (x272 x1065))
(assert (x272 x354))
(assert (x272 x1012))
(assert (x272 x811))
(assert (x272 x783))
(assert (x272 x943))
(assert (x272 x221))
(assert (x272 x101))
(assert (> (x319 64 x788 14) 10000))
(assert (< 10000 (x319 64 x1078 21)))
(assert (x272 x223))
(assert (x115 1461501637330902918203684832716283019655932542975))
(assert (x272 x1004))
(assert (x272 x132))
(assert (= 0 (x959 87574796089400210963483481994855297801658048744582212763804713015135770247168)))
(assert (= x669 (=> (and (= (> x259 0) x344) (= (x997 x74) x429) (= (x1087 (- x1058 x429)) x259) (>= 340282366920938463463374607431768211455 x429)) (and (=> (and (and (or (and (and (= x999 (x1087 (- x1058 x186))) (= (* (ite (> x183 x759) 1 0) x999) x218) (= (x659 x174) x94) (= x1125 (x319 64 x415 1)) (= x183 (x475 (+ x94 x1029))) (= (div x1022 1000000000000000000) x780) (not (> x999 x1058)) (= x1022 (mod (* x999 x183) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (>= 340282366920938463463374607431768211455 x999) (= x780 x654) (= (+ x1125 1) x174) (= x759 (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 x999)) (not (< x183 x1029)) (= x218 0)) x5) (and (not x5) (= x654 0))) (and (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639840 x357)) (>= 340282366920938463463374607431768211455 x664) (= x885 (x86 x74)) (= x664 (x997 x74)) (< x357 x1096) (= (x1013 x677) x1029) (= (ite (= x664 0) 1 x664) x186) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639840 x357)) (<= x357 115792089237316195423570985008687907853269984665640564039457584007913129639934) (<= x885 340282366920938463463374607431768211455) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x357) (= x1096 (x475 (+ 96 x357))) (= (= 0 (ite (= x186 x1058) (ite (= x186 x1058) 1 0) (ite (= x1058 0) 1 0))) x5) (not (= 115792089237316195423570985008687907853269984665640564039457584007913129639840 x357)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x357))) x344) x877) (=> (and (and (= x357 x561) (= x145 0)) (not x344)) x1095)))))
(assert (x272 x131))
(assert (x272 x204))
(assert (= (x319 64 x415 6) (x959 (x319 64 x415 6))))
(assert (x272 x983))
(assert (x272 x1111))
(assert (x235 (ite (< x45 78) 1 0)))
(assert (x272 x220))
(assert (= (x959 26970434976082401409518253779899979181617001501746706707637651430022083248128) 0))
(assert (x897 x1128))
(assert (x272 x876))
(assert (x272 x714))
(assert (= 0 (x959 48003237179740346375273247037369238442517605007531723370986625598222673903616)))
(assert (= 0 (x959 3324817111)))
(assert (x272 x400))
(assert (< (x467 32 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x272 x837))
(assert (x272 x1143))
(assert (= (x959 1599608803) 0))
(check-sat)
(exit)
