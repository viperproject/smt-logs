(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Certora
Generated on: 2024-04-10
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x254 () Int)
(declare-fun x173 () Int)
(declare-fun x324 () Int)
(declare-fun x132 () Int)
(declare-fun x376 () Int)
(declare-fun x16 (Int) Int)
(declare-fun x346 () Int)
(declare-fun x99 () Int)
(declare-fun x392 () Bool)
(declare-fun x371 () Int)
(declare-fun x296 () Bool)
(declare-fun x401 () Bool)
(declare-fun x134 () Int)
(declare-fun x41 (Int Int) Int)
(declare-fun x200 (Int) Int)
(declare-fun x5 () Int)
(declare-fun x227 () Int)
(declare-fun x289 () Bool)
(declare-fun x350 () Bool)
(declare-fun x229 () Int)
(declare-fun x23 () Int)
(declare-fun x338 () Int)
(declare-fun x121 () Int)
(declare-fun x416 () Bool)
(declare-fun x362 () Int)
(declare-fun x58 () Int)
(declare-fun x137 () Bool)
(declare-fun x80 () Int)
(declare-fun x239 () Int)
(declare-fun x60 () Int)
(declare-fun x162 () Bool)
(declare-fun x261 () Int)
(declare-fun x43 (Int) Int)
(declare-fun x155 () Int)
(declare-fun x278 () Bool)
(declare-fun x94 () Int)
(declare-fun x381 () Int)
(declare-fun x353 () Int)
(declare-fun x33 () Int)
(declare-fun x280 () Int)
(declare-fun x187 () Int)
(declare-fun x306 () Int)
(declare-fun x337 () Int)
(declare-fun x269 () Bool)
(declare-fun x232 () Bool)
(declare-fun x81 () Int)
(declare-fun x415 () Int)
(declare-fun x27 () Int)
(declare-fun x357 () Bool)
(declare-fun x38 (Int) Int)
(declare-fun x114 () Int)
(declare-fun x396 () Bool)
(declare-fun x20 () Int)
(declare-fun x372 () Int)
(declare-fun x298 () Int)
(declare-fun x244 () Int)
(declare-fun x210 () Int)
(declare-fun x329 () Int)
(declare-fun x383 (Int) Int)
(declare-fun x90 (Int) Int)
(declare-fun x255 () Bool)
(declare-fun x193 () Int)
(declare-fun x84 () Int)
(declare-fun x102 () Int)
(declare-fun x73 () Int)
(declare-fun x271 () Int)
(declare-fun x275 () Int)
(declare-fun x36 () Int)
(declare-fun x216 () Int)
(declare-fun x166 () Int)
(declare-fun x181 () Int)
(declare-fun x235 () Bool)
(declare-fun x339 () Bool)
(declare-fun x276 () Int)
(declare-fun x236 () Int)
(declare-fun x389 () Int)
(declare-fun x286 () Int)
(declare-fun x398 () Int)
(declare-fun x32 () Bool)
(declare-fun x83 () Int)
(declare-fun x407 () Int)
(declare-fun x233 () Int)
(declare-fun x196 () Int)
(declare-fun x313 () Int)
(declare-fun x384 (Int) Int)
(declare-fun x35 () Int)
(declare-fun x231 () Int)
(declare-fun x317 () Bool)
(declare-fun x164 () Bool)
(declare-fun x402 () Int)
(declare-fun x314 () Int)
(declare-fun x221 () Int)
(declare-fun x209 () Int)
(declare-fun x98 () Int)
(declare-fun x405 () Bool)
(declare-fun x356 () Int)
(declare-fun x345 () Int)
(declare-fun x220 () Int)
(declare-fun x143 () Int)
(declare-fun x106 () Int)
(declare-fun x118 () Bool)
(declare-fun x9 () Int)
(declare-fun x322 () Bool)
(declare-fun x328 () Int)
(declare-fun x127 () Int)
(declare-fun x218 (Int Int) Int)
(declare-fun x149 () Int)
(declare-fun x246 () Int)
(declare-fun x93 () Int)
(declare-fun x69 () Bool)
(declare-fun x62 () Int)
(declare-fun x315 () Int)
(declare-fun x272 (Int) Int)
(declare-fun x37 () Int)
(declare-fun x327 () Int)
(declare-fun x75 () Bool)
(declare-fun x51 () Bool)
(declare-fun x76 () Int)
(declare-fun x40 () Int)
(declare-fun x139 () Int)
(declare-fun x385 () Int)
(declare-fun x71 () Int)
(declare-fun x199 () Int)
(declare-fun x17 () Bool)
(declare-fun x169 () Int)
(declare-fun x171 () Bool)
(declare-fun x204 () Int)
(declare-fun x108 () Int)
(declare-fun x144 () Int)
(declare-fun x163 () Int)
(declare-fun x7 () Int)
(declare-fun x299 () Int)
(declare-fun x116 () Int)
(declare-fun x141 () Int)
(declare-fun x417 (Int) Int)
(declare-fun x303 () Int)
(declare-fun x404 () Int)
(declare-fun x124 () Int)
(declare-fun x89 () Bool)
(declare-fun x241 () Int)
(declare-fun x63 () Int)
(declare-fun x373 () Bool)
(declare-fun x297 () Int)
(declare-fun x348 () Int)
(declare-fun x126 () Int)
(declare-fun x29 () Int)
(declare-fun x248 () Bool)
(declare-fun x223 () Bool)
(declare-fun x406 () Int)
(declare-fun x26 () Int)
(declare-fun x176 () Bool)
(declare-fun x354 () Int)
(declare-fun x107 (Int) Int)
(declare-fun x214 () Bool)
(declare-fun x368 () Int)
(declare-fun x207 () Bool)
(declare-fun x378 () Int)
(declare-fun x377 () Int)
(declare-fun x230 () Int)
(declare-fun x56 () Int)
(declare-fun x44 () Int)
(declare-fun x262 () Int)
(declare-fun x369 () Bool)
(declare-fun x237 () Bool)
(declare-fun x408 () Int)
(declare-fun x154 () Int)
(declare-fun x287 () Int)
(declare-fun x355 () Int)
(declare-fun x25 () Int)
(declare-fun x349 () Int)
(declare-fun x100 () Int)
(declare-fun x24 () Int)
(declare-fun x153 () Bool)
(declare-fun x198 () Int)
(declare-fun x351 () Int)
(declare-fun x6 () Int)
(declare-fun x403 () Int)
(declare-fun x249 () Int)
(declare-fun x288 () Int)
(declare-fun x386 () Int)
(declare-fun x226 () Bool)
(declare-fun x250 () Bool)
(declare-fun x91 () Int)
(declare-fun x15 () Bool)
(declare-fun x135 (Int) Int)
(declare-fun x266 () Int)
(declare-fun x292 () Bool)
(declare-fun x34 () Int)
(declare-fun x311 () Bool)
(declare-fun x342 () Int)
(declare-fun x13 () Int)
(declare-fun x270 () Int)
(declare-fun x136 () Int)
(declare-fun x304 () Int)
(declare-fun x399 () Int)
(declare-fun x174 () Int)
(declare-fun x115 () Bool)
(declare-fun x268 () Int)
(declare-fun x96 () Int)
(declare-fun x333 () Bool)
(declare-fun x74 () Int)
(declare-fun x120 () Int)
(declare-fun x347 () Int)
(declare-fun x152 () Int)
(declare-fun x66 () Int)
(declare-fun x183 () Int)
(declare-fun x364 () Int)
(declare-fun x309 (Int) Int)
(declare-fun x201 () Bool)
(declare-fun x67 () Int)
(declare-fun x259 () Int)
(declare-fun x277 (Int) Int)
(declare-fun x409 () Bool)
(declare-fun x3 () Bool)
(declare-fun x358 () Bool)
(declare-fun x53 () Int)
(declare-fun x274 () Bool)
(declare-fun x257 (Int) Int)
(declare-fun x370 (Int) Int)
(declare-fun x49 () Int)
(declare-fun x390 () Int)
(declare-fun x413 () Int)
(declare-fun x122 () Bool)
(declare-fun x65 () Bool)
(declare-fun x172 () Int)
(declare-fun x133 () Int)
(declare-fun x295 () Int)
(declare-fun x394 () Int)
(declare-fun x109 (Int) Int)
(declare-fun x159 () Int)
(declare-fun x326 () Bool)
(declare-fun x310 () Int)
(declare-fun x101 () Int)
(declare-fun x82 () Int)
(declare-fun x263 () Int)
(declare-fun x86 () Int)
(declare-fun x160 () Bool)
(declare-fun x180 () Int)
(declare-fun x302 () Bool)
(declare-fun x382 () Int)
(declare-fun x68 () Int)
(declare-fun x46 () Bool)
(declare-fun x267 () Int)
(declare-fun x179 (Int) Int)
(declare-fun x335 () Int)
(declare-fun x380 () Int)
(declare-fun x30 () Int)
(declare-fun x21 () Int)
(declare-fun x97 () Int)
(declare-fun x54 () Bool)
(declare-fun x211 () Int)
(declare-fun x10 () Bool)
(declare-fun x374 () Int)
(declare-fun x290 (Int) Bool)
(declare-fun x252 () Int)
(declare-fun x178 () Int)
(declare-fun x50 () Int)
(declare-fun x150 () Bool)
(declare-fun x279 () Bool)
(declare-fun x39 () Int)
(declare-fun x59 () Bool)
(declare-fun x212 () Int)
(declare-fun x256 () Int)
(declare-fun x365 (Int) Int)
(declare-fun x330 () Bool)
(declare-fun x197 () Int)
(declare-fun x305 () Int)
(declare-fun x148 () Int)
(declare-fun x165 () Int)
(declare-fun x387 () Int)
(declare-fun x379 () Int)
(declare-fun x273 () Int)
(declare-fun x192 (Int) Int)
(declare-fun x284 (Int) Int)
(declare-fun x225 (Int) Int)
(declare-fun x361 () Int)
(declare-fun x11 () Int)
(declare-fun x72 (Int) Int)
(declare-fun x301 () Int)
(declare-fun x251 () Int)
(declare-fun x191 () Int)
(declare-fun x260 (Int) Int)
(declare-fun x363 () Int)
(declare-fun x190 () Int)
(declare-fun x45 () Bool)
(declare-fun x4 () Int)
(declare-fun x87 () Int)
(declare-fun x112 () Int)
(declare-fun x55 () Bool)
(declare-fun x170 () Int)
(declare-fun x95 () Int)
(declare-fun x195 (Int) Int)
(declare-fun x123 () Bool)
(declare-fun x300 () Int)
(declare-fun x110 () Int)
(declare-fun x308 () Int)
(declare-fun x242 () Int)
(declare-fun x140 () Int)
(declare-fun x161 () Int)
(declare-fun x105 () Bool)
(declare-fun x157 () Int)
(declare-fun x344 () Bool)
(declare-fun x343 () Int)
(declare-fun x245 () Int)
(declare-fun x208 (Int Int Int) Int)
(declare-fun x104 () Bool)
(declare-fun x22 () Bool)
(declare-fun x168 () Int)
(declare-fun x291 () Int)
(declare-fun x147 (Int) Int)
(declare-fun x61 () Int)
(declare-fun x31 () Int)
(declare-fun x57 (Int Int) Int)
(declare-fun x294 () Bool)
(declare-fun x323 () Int)
(declare-fun x282 () Int)
(declare-fun x138 () Bool)
(declare-fun x312 () Int)
(declare-fun x321 () Int)
(declare-fun x219 () Bool)
(declare-fun x393 () Int)
(declare-fun x388 () Int)
(declare-fun x14 () Int)
(declare-fun x188 () Int)
(declare-fun x142 () Int)
(declare-fun x131 () Int)
(declare-fun x145 () Bool)
(declare-fun x125 () Int)
(declare-fun x224 () Bool)
(declare-fun x395 () Bool)
(declare-fun x215 () Int)
(declare-fun x243 (Int Int) Int)
(declare-fun x78 () Bool)
(declare-fun x222 () Int)
(declare-fun x48 () Int)
(declare-fun x92 () Int)
(declare-fun x206 () Int)
(declare-fun x47 () Int)
(declare-fun x12 () Int)
(declare-fun x228 () Int)
(declare-fun x375 () Int)
(declare-fun x111 () Int)
(declare-fun x202 () Bool)
(declare-fun x397 () Int)
(declare-fun x318 (Int) Int)
(declare-fun x205 () Int)
(declare-fun x19 (Int) Int)
(declare-fun x129 () Int)
(declare-fun x332 (Int) Int)
(declare-fun x203 () Int)
(declare-fun x341 () Int)
(declare-fun x367 () Int)
(declare-fun x307 () Int)
(declare-fun x391 () Bool)
(declare-fun x186 () Int)
(define-fun x189 ((x265 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x265) (>= x265 0)) x265 (- x265 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x285 ((x265 Int)) Int (ite (and (< x265 0) (>= x265 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x265 115792089237316195423570985008687907853269984665640564039457584007913129639936) x265))
(define-fun x185 ((x352 Int)) Bool (and (>= x352 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x352)))
(define-fun x238 ((x352 Int)) Bool (and (= (x218 x352 115792089237316195423570985008687907853269984665640564039457584007913129639935) x352) (= (x218 115792089237316195423570985008687907853269984665640564039457584007913129639935 x352) x352)))
(define-fun x293 ((x352 Int)) Bool (and (= 0 (x218 x352 0)) (= (x218 0 x352) 0)))
(define-fun x281 ((x352 Int)) Bool (= (x218 x352 x352) x352))
(define-fun x334 ((x352 Int)) Bool (and (x281 x352) (x238 x352) (x293 x352)))
(define-fun x2 ((x352 Int) (x42 Int)) Bool (= (x218 x352 x42) (x218 x42 x352)))
(define-fun x28 ((x352 Int) (x42 Int)) Bool (and (=> (>= x352 0) (>= x352 (x218 x352 x42))) (<= 0 (x218 x352 x42)) (=> (>= x42 0) (<= (x218 x352 x42) x42))))
(define-fun x156 ((x352 Int) (x42 Int)) Bool (and (x28 x352 x42) (x2 x352 x42)))
(define-fun x52 ((x352 Int)) Bool (and (= (x57 115792089237316195423570985008687907853269984665640564039457584007913129639935 x352) (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x352)) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x352) (x57 x352 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x331 ((x352 Int)) Bool (and (= (x57 x352 0) x352) (= (x57 0 x352) x352)))
(define-fun x253 ((x352 Int)) Bool (= (x57 x352 x352) 0))
(define-fun x146 ((x352 Int)) Bool (and (x52 x352) (x331 x352) (x253 x352)))
(define-fun x360 ((x352 Int) (x42 Int)) Bool (= (x57 x352 x42) (x57 x42 x352)))
(define-fun x113 ((x352 Int) (x42 Int)) Bool (and (>= (x57 x352 x42) 0) (<= (x57 x352 x42) (+ x42 x352))))
(define-fun x366 ((x352 Int) (x42 Int)) Bool (and (x360 x352 x42) (x113 x352 x42)))
(define-fun x167 ((x352 Int)) Bool (and (= (x41 115792089237316195423570985008687907853269984665640564039457584007913129639935 x352) 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x41 x352 115792089237316195423570985008687907853269984665640564039457584007913129639935))))
(define-fun x130 ((x352 Int)) Bool (and (= (x41 0 x352) x352) (= x352 (x41 x352 0))))
(define-fun x258 ((x352 Int)) Bool (= x352 (x41 x352 x352)))
(define-fun x400 ((x352 Int)) Bool (and (x130 x352) (x258 x352) (x167 x352)))
(define-fun x1 ((x352 Int) (x42 Int)) Bool (= (x41 x352 x42) (x41 x42 x352)))
(define-fun x410 ((x352 Int) (x42 Int)) Bool (and (<= (x41 x352 x42) (+ x42 x352)) (=> (<= 0 x42) (<= x42 (x41 x352 x42))) (=> (<= 0 x352) (<= x352 (x41 x352 x42)))))
(define-fun x316 ((x352 Int) (x42 Int)) Bool (and (x410 x352 x42) (x1 x352 x42)))
(define-fun x340 ((x128 Int)) Int 0)
(define-fun x283 ((x128 Int)) Int 0)
(define-fun x414 ((x128 Int)) Int 0)
(define-fun x8 ((x128 Int)) Int 0)
(define-fun x85 ((x128 Int)) Int (ite (> x187 x128) (x192 x128) 0))
(define-fun x184 ((x128 Int)) Int (ite (and (<= 0 x128) (< x128 x187)) (x179 x128) (x85 x128)))
(define-fun x264 ((x128 Int)) Int (ite (= x222 x128) x111 (x72 x128)))
(define-fun x325 ((x128 Int)) Int (ite (= x128 128) 50942633119752846454219349998365661925608737367104304655302372697894809501696 (x414 x128)))
(define-fun x240 ((x128 Int)) Int (ite (= 132 x128) x363 (x325 x128)))
(define-fun x77 ((x128 Int)) Int (ite (= 0 x128) x315 (x318 x128)))
(define-fun x18 ((x128 Int)) Int (ite (= 128 x128) x315 (x240 x128)))
(define-fun x151 ((x128 Int)) Int (ite (and (< x128 160) (<= 128 x128)) (x77 (- x128 128)) (x340 x128)))
(define-fun x119 ((x128 Int)) Int (ite (= x239 x128) x206 (x277 x128)))
(define-fun x175 ((x128 Int)) Int (ite (= x198 x128) x267 (x19 x128)))
(define-fun x217 ((x128 Int)) Int (ite (= x205 x128) x256 (x417 x128)))
(define-fun x79 ((x128 Int)) Int (ite x302 (x417 x128) (x217 x128)))
(define-fun x88 ((x128 Int)) Int (ite x302 (x277 x128) (x119 x128)))
(define-fun x418 ((x128 Int)) Int (ite x302 (x19 x128) (x175 x128)))
(define-fun x64 ((x128 Int)) Int (ite x302 (x8 x128) (x18 x128)))
(define-fun x319 ((x128 Int)) Int (ite x105 (x418 x128) (x332 x128)))
(define-fun x247 ((x128 Int)) Int (ite x105 (x43 x128) (x309 x128)))
(define-fun x158 ((x128 Int)) Int (ite x105 (x365 x128) (x195 x128)))
(define-fun x411 ((x128 Int)) Int (ite (= x402 x128) x13 (x200 x128)))
(define-fun x117 ((x128 Int)) Int (ite (= x128 x193) 76450787359836037641860180984291677749980919077056822294353438043884394381312 (x64 x128)))
(define-fun x103 ((x128 Int)) Int (ite (= x128 x345) x379 (x117 x128)))
(define-fun x336 ((x128 Int)) Int (ite (= x270 x128) x387 (x103 x128)))
(define-fun x194 ((x128 Int)) Int (ite (= x128 x73) x140 (x383 x128)))
(define-fun x182 ((x128 Int)) Int (ite (= x128 x244) x361 (x194 x128)))
(define-fun x70 ((x128 Int)) Int (ite (= x128 128) x387 (x283 x128)))
(define-fun x213 ((x128 Int)) Int (ite (= x128 128) 1 (x70 x128)))
(define-fun x177 ((x128 Int)) Int (ite (= x128 0) x139 (x90 x128)))
(define-fun x359 ((x128 Int)) Int (ite x202 (x247 x128) (x147 x128)))
(define-fun x320 ((x128 Int)) Int (ite (= x169 x128) x354 (x38 x128)))
(define-fun x234 ((x128 Int)) Int (ite (= x173 x128) x245 (x260 x128)))
(define-fun x412 ((x128 Int)) Int (ite (= x128 x368) x155 (x359 x128)))
(assert (x185 x25))
(assert (> (x208 64 x63 1) 10000))
(assert (x185 x275))
(assert (x290 50942633119752846454219349998365661925608737367104304655302372697894809501696))
(assert (= (and (not x122) x202) x214))
(assert (= 0 (x225 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(assert (= x250 (not (and (= x245 (x285 (- x295 x404))) (= x110 773316216) (= x305 (x359 x368)) (= x71 (x359 x368)) (= x10 false) (not (> x155 x71)) (not (< x76 x372)) (= x178 3536776372) (= x224 false) (= x254 3536776372) (not (> x245 x295)) (= x97 773316216) (= false x51) (= false x294) (= x278 false) (= false x369) (= false x392) (= false x15) (= 1499272391 x403) (= x357 false) (= (x285 (- x76 x35)) x329) (= false x391) (= false x138) (= false x344) (= x295 (x260 x173)) (not (> x84 x338)) (= x66 (x38 x169)) (= x17 true) (= false x395) (= x223 true) (= x210 (x285 (- x338 x186))) (= 1 x134) (= x296 false) (= false x201) (= false x171) (= x235 false) (= x394 1499272391) (= 3 x50) (not (< x157 x354)) (= x354 (x285 (- x157 x186))) (= (+ x354 x276) x36) (= (+ x155 x211) x231) (= (x285 (- x71 x35)) x155) (= x164 false) (= x61 274184521717934524641157099916833587217) (= (x285 (- x338 x186)) x84) (= x236 274184521717934524641157099916833587217) (= (- x380 x305) x211) (= x137 false) (= (x38 x169) x157) (= false x55) (= (- x136 x66) x276) (= x372 (x285 (- x76 x35))) (= 1 x362) (= x349 773316216)))))
(assert (x185 x227))
(assert (x290 1499272391))
(assert (x185 x220))
(assert (x185 x270))
(assert (= (x225 x313) (x225 (+ 2 x313))))
(assert (x185 x129))
(assert (x185 x408))
(assert (x185 x83))
(assert (x185 x209))
(assert (x185 x338))
(assert (x146 2))
(assert (x185 x271))
(assert (x366 x408 2))
(assert (= (x284 (x208 64 x291 2)) 64))
(assert (x185 x377))
(assert (= 0 (x225 274184521717934524641157099916833587217)))
(assert (x185 x386))
(assert (x185 x371))
(assert (x185 x7))
(assert (x185 x120))
(assert (= 1 (x370 (x208 64 x63 1))))
(assert (= x141 (x107 (x208 64 x141 2))))
(assert (x185 x376))
(assert (= 2 (x370 (x208 64 x303 2))))
(assert (= (x225 (x208 64 x291 2)) (x208 64 x291 2)))
(assert (x400 x14))
(assert (= 0 (x225 4294967295)))
(assert (x185 x230))
(assert (x185 x116))
(assert (not (x290 (x208 64 x63 1))))
(assert (x185 x100))
(assert (x185 x324))
(assert (> (x208 64 x303 2) 10000))
(assert (x185 x181))
(assert (x185 x315))
(assert (not x396))
(assert (x185 x399))
(assert (x185 x37))
(assert (x185 x121))
(assert (x185 x273))
(assert (x290 1461501637330902918203684832716283019655932542975))
(assert (x185 x63))
(assert (x185 x222))
(assert (x185 x98))
(assert (x185 x180))
(assert (x185 x91))
(assert (x185 x390))
(assert (x185 x62))
(assert (x185 x154))
(assert (x185 x286))
(assert (x185 x374))
(assert (x185 x82))
(assert (x185 x372))
(assert (x185 x6))
(assert (< (x208 64 x291 2) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (=> (= 0 x371) (= 0 (div x47 x371))))
(assert (x185 x378))
(assert (x185 x382))
(assert (x185 x327))
(assert (x185 x304))
(assert (= (x284 (x208 64 x141 2)) 64))
(assert (= (x225 (+ x49 1)) (x225 x49)))
(assert (x185 x355))
(assert (not (x290 (x208 64 x291 2))))
(assert (x185 x58))
(assert (< 10000 (x208 64 x363 0)))
(assert (not (x290 (x208 64 x303 2))))
(assert (= (x107 (x208 64 x379 0)) x379))
(assert (x185 x148))
(assert (x185 x407))
(assert (= x226 (and x333 (not x207))))
(assert (= 64 (x284 (x208 64 x11 3))))
(assert (x185 x191))
(assert (not (x290 (x208 64 x363 0))))
(assert (x316 x266 x321))
(assert (x185 x216))
(assert (x185 x60))
(assert (x185 x9))
(assert (= (x225 1461501637330902918203684832716283019655932542975) 0))
(assert (x185 x66))
(assert (x185 x268))
(assert (x185 x245))
(assert (= 0 (x225 57896044618658097711785492504343953926634992332820282019728792003956564819967)))
(assert (x185 x186))
(assert (=> (<= x291 10000) (= 0 (x225 x291))))
(assert (x185 x298))
(assert (x185 x229))
(assert (x185 x361))
(assert (= (x225 (+ x262 1)) (x225 x262)))
(assert (= x333 (or x416 x145)))
(assert (x185 x241))
(assert (= 64 (x284 (x208 64 x303 2))))
(assert (x185 x111))
(assert (x185 x133))
(assert (x185 x307))
(assert (= 0 (x225 604800)))
(assert (x185 x56))
(assert (x185 x303))
(assert (x400 x266))
(assert (x185 x34))
(assert (x185 x367))
(assert (x400 x321))
(assert (x185 x221))
(assert (= (x225 x262) (x225 (+ x262 5))))
(assert (x185 x152))
(assert (x185 x342))
(assert (x290 57896044618658097711785492504343953926634992332820282019728792003956564819967))
(assert (x185 x406))
(assert (x290 115792089237316195423570985008687907853269984665640564039457584007913129639934))
(assert (x185 x398))
(assert (x185 x249))
(assert (x185 x341))
(assert (x185 x20))
(assert (x185 x354))
(assert (x185 x144))
(assert (=> (>= 10000 x63) (= 0 (x225 x63))))
(assert (= 2 (x370 (x208 64 x141 2))))
(assert (= (x284 (x208 64 x63 1)) 64))
(assert (x185 x93))
(assert (< (x208 64 x303 2) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= x409 (and x105 x162)))
(assert (x185 x246))
(assert (= (=> (and (or (and x75 (= x306 1)) (and (= x306 (ite x75 1 0)) (not x75))) (and x104 (not (= x143 x363)) (<= 0 x356) (<= 0 x308) (= x75 (not (< x256 x56))) (= (x208 64 x11 3) x228) (= x94 (+ 5 x300)) (<= 36 x187) (<= x131 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x251 x186) (>= 1461501637330902918203684832716283019655932542975 x23) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x68) (<= 1 x363) (= false x322) (= x376 0) (<= 0 x212) (= false x69) (<= 0 x261) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x26) (= (x264 x363) x5) x115 (= 0 x215) (= x144 x127) (>= 1461501637330902918203684832716283019655932542975 x288) (= x56 (x189 (+ x312 604800))) (<= x67 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x251 x129) (>= 1461501637330902918203684832716283019655932542975 x143) (= x222 x288) (= x172 773316216) (= x373 false) (>= x323 0) (= (x257 x363) x314) (= false x89) (>= 127 x159) (>= x67 0) (= false x123) (= x127 (x179 0)) (>= 1461501637330902918203684832716283019655932542975 x87) (= x413 x363) (= 1 x163) (>= x116 1) (<= 1 x143) (<= 0 x26) (>= 255 x116) (= x120 773316216) (<= 1 x314) (= (x272 x63) x11) (<= 1 x287) (= x160 false) (= (x16 x228) x116) (>= x68 0) (= x165 (x208 64 x291 2)) (<= 0 x131) (= x312 (x417 x165)) (>= 1461501637330902918203684832716283019655932542975 x363) (= x199 0) (= (x384 x94) x287) (= x256 x67) (= x115 (< 0 (x257 x363))) (<= 0 x23) (not (< x56 x312)) (= x176 true) (<= x261 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= (x208 64 x63 1) x300) (<= x323 1461501637330902918203684832716283019655932542975) (>= 127 x159) (>= 1461501637330902918203684832716283019655932542975 x308) (= x142 x5) (= false x289) (>= 4294967295 x299) (<= x187 57896044618658097711785492504343953926634992332820282019728792003956564819967) (>= x288 0) (= (< 0 (x257 x143)) x104) (= x186 (x179 4)) (= x111 (x72 x222)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x356) (<= x212 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x299 0) (= x288 x63))) x292) x396))
(assert (= x291 (x107 (x208 64 x291 2))))
(assert (x185 x321))
(assert (= (=> (and (or (and (and (= (mod (* x282 x27) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x252) (= (x285 (- 0 x301)) x275) (= (mod (* x280 x328) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x335) (= (x285 (- 2 x40)) x27) (= (x285 (- x304 (mod (ite (> x342 x25) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x407) (= (mod (* x31 x280) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x93) (> x96 x304) (= (x57 2 x408) x74) (= (div x275 x301) x233) (= (mod (* x378 x229) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x183) (= (mod (* x282 x280) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x40) (= (mod (* x98 x74) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x31) (= (mod (* x407 x406) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x132) (= (x285 (- 2 x93)) x271) (= x397 (mod (* x378 x280) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x378 (mod (* x252 x324) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x408 (mod (* x280 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x342 (mod (* x221 x186) x96)) (= (x285 (- 2 x335)) x148) (= x263 (mod (* x74 x280) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x301 (x218 x96 x6)) (= x382 (mod (* x280 x252) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (div x96 x301) x280) (= (x285 (- 2 x263)) x98) (= (x285 (- 2 x382)) x324) (<= x304 115792089237316195423570985008687907853269984665640564039457584007913129639934) (= x310 x35) (= x364 (x285 (- x25 x342))) (= (mod (* x31 x271) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x328) (= x310 (mod (* x183 (x41 x14 x132)) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x229 (x285 (- 2 x397))) (= x406 (x189 (+ 1 x233))) (= x14 (div x364 x301)) (= (mod (* x148 x328) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x282) (= x6 (x189 (+ (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x96) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1)))) (not x122)) (and x122 (and (= x216 x35) (= x216 (div x25 x96))))) (and (= (x285 (- x152 x353)) x337) (= (x285 (- x13 x126)) x100) (= x221 (x359 x368)) (= x152 (x247 x368)) (= x122 (= x304 0)) (<= 1 x96) x232 (= x232 (> x100 0)) (= (mod (* x186 x221) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x25) (not (> x337 x152)) (= (x285 (- x390 (mod (ite (< x121 x25) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x304) (= (x38 x169) x96) (= x390 (x285 (- x121 x25))) (= x30 x76) (= (mod (* x186 x221) 115792089237316195423570985008687907853269984665640564039457584007913129639935) x121) (= x124 x380))) x153) x317))
(assert (= (x208 64 x379 0) (x225 (x208 64 x379 0))))
(assert (x334 x96))
(assert (= (x225 50942633119752846454219349998365661925608737367104304655302372697894809501696) 0))
(assert (x185 x404))
(assert (= (x370 (x208 64 x363 0)) 0))
(assert (x146 x408))
(assert (x185 x337))
(assert (x290 773316216))
(assert (= (x225 (x208 64 x141 2)) (x208 64 x141 2)))
(assert (= x118 (and (not x3) x22)))
(assert (x185 x259))
(assert (x185 x140))
(assert (x185 x132))
(assert (x185 x39))
(assert (= (x225 (+ 5 x300)) (x225 x300)))
(assert (= (and x54 x75) x145))
(assert (x185 x329))
(assert (= x54 true))
(assert (x185 x142))
(assert (x185 x375))
(assert (> (x208 64 x291 2) 10000))
(assert (x185 x251))
(assert (= 64 (x284 (x208 64 x363 0))))
(assert (x185 x86))
(assert (x185 x287))
(assert (x185 x127))
(assert (x185 x74))
(assert (x185 x204))
(assert (= x153 (=> (and (or (and (and (= x125 (mod (* x60 x39) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x9 (mod (* x99 x174) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x285 (- 2 x9)) x399) (= x58 (mod (* x125 x80) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x189 (+ (mod (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x47) 115792089237316195423570985008687907853269984665640564039457584007913129639936) 1)) x188) (= x83 (mod (* x58 x174) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x259) (= (mod (* x307 (x41 x266 x321)) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x190) (= x298 (mod (* x108 x58) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x285 (- 2 x386)) x80) (= (mod (* x34 x174) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x375) (= (x57 2 x102) x99) (= x393 (x285 (- x149 x180))) (= (mod (* x186 x220) x47) x180) (= x62 (mod (* x174 x39) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x102 (mod (* 3 x174) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x266 (div x393 x371)) (= x174 (div x47 x371)) (= (mod (* x388 x34) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x39) (= x404 x190) (= x60 (x285 (- 2 x62))) (= x388 (x285 (- 2 x375))) (= (mod (* x125 x174) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x386) (= x307 (mod (* x298 x204) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= (x218 x47 x188) x371) (= (x285 (- 2 x83)) x108) (= (x285 (- 0 x371)) x92) (= (div x92 x371) x374) (= (x285 (- x259 (mod (ite (< x149 x180) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x385) (= x321 (mod (* x385 x268) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (< x259 x47) (= (x285 (- 2 x161)) x204) (= (mod (* x399 x99) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x34) (= (x189 (+ 1 x374)) x268) (= (mod (* x174 x298) 115792089237316195423570985008687907853269984665640564039457584007913129639936) x161)) (not x3)) (and x3 (and (= x230 x404) (= (div x149 x47) x230)))) (and (= (x285 (- x37 (mod (ite (> x149 x44) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x259) (= (= x259 0) x3) (= (x285 (- x44 x149)) x37) (= x149 (mod (* x186 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639936)) (= x173 (+ 1 x169)) (>= x47 1) (= x220 (x260 x173)) (= x44 (mod (* x186 x220) 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= x47 (x38 x169)))) x250)))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x208 64 x63 1)))
(assert (=> (<= x11 10000) (= (x225 x11) 0)))
(assert (x185 x27))
(assert (= (or x46 x214) x22))
(assert (x185 x125))
(assert (x185 x385))
(assert (= (x225 2835717307) 0))
(assert (x290 1889567281))
(assert (x185 x415))
(assert (x185 x295))
(assert (x185 x71))
(assert (x185 x328))
(assert (x185 x363))
(assert (x185 x174))
(assert (= (and x202 x122) x46))
(assert (not (x290 (x208 64 x379 0))))
(assert (x185 x203))
(assert (x185 x5))
(assert (=> (= x371 0) (= (div x393 x371) 0)))
(assert (x185 x310))
(assert (x185 x114))
(assert (= (x225 76450787359836037641860180984291677749980919077056822294353438043884394381312) 0))
(assert (= (x225 1499272391) 0))
(assert (x185 x141))
(assert (= (x370 (x208 64 x291 2)) 2))
(assert (x185 x183))
(assert (x185 x102))
(assert (=> (>= 10000 x303) (= (x225 x303) 0)))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x208 64 x363 0)))
(assert (=> (= x371 0) (= (div x92 x371) 0)))
(assert (x185 x197))
(assert (= (x225 (x208 64 x363 0)) (x208 64 x363 0)))
(assert (x185 x305))
(assert (=> (= 0 x301) (= 0 (div x364 x301))))
(assert (x334 x47))
(assert (x185 x312))
(assert (= 64 (x284 (x208 64 x379 0))))
(assert (x185 x282))
(assert (x185 x40))
(assert (x185 x297))
(assert (x185 x47))
(assert (x185 x343))
(assert (x185 x166))
(assert (x185 x53))
(assert (x185 x256))
(assert (= x202 (or (and (not x162) x105) x409)))
(assert (= 0 (x225 1889567281)))
(assert (=> (= x47 0) (= 0 (div x149 x47))))
(assert (x185 x44))
(assert (x185 x267))
(assert (= 3 (x370 (x208 64 x11 3))))
(assert (= (x225 (+ x351 1)) (x225 x351)))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x208 64 x11 3)))
(assert (< (x208 64 x379 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (and x207 x333) x302))
(assert (x156 x96 x6))
(assert (x185 x388))
(assert (= x255 (or x118 x405)))
(assert (x316 x14 x132))
(assert (=> (= 0 x301) (= (div x275 x301) 0)))
(assert (x290 604800))
(assert (x334 x6))
(assert (= 0 (x370 (x208 64 x379 0))))
(assert (x366 x102 2))
(assert (x185 x13))
(assert (= x11 (x107 (x208 64 x11 3))))
(assert (x290 115792089237316195423570985008687907853269984665640564039457584007913129639904))
(assert (x185 x389))
(assert (x185 x11))
(assert (x185 x196))
(assert (= x105 (or x302 x226)))
(assert (x185 x126))
(assert (x185 x4))
(assert (x185 x364))
(assert (=> (>= 10000 x143) (= 0 (x225 x143))))
(assert (x146 x102))
(assert (< (x208 64 x141 2) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x185 x149))
(assert (= (and x22 x3) x405))
(assert (x185 x99))
(assert (x185 x24))
(assert (= 0 (x225 773316216)))
(assert (x400 x132))
(assert (= 0 (x225 3536776372)))
(assert (< 10000 (x208 64 x379 0)))
(assert (x185 x280))
(assert (=> (<= x141 10000) (= 0 (x225 x141))))
(assert (> (x208 64 x141 2) 10000))
(assert (x185 x206))
(assert (x290 274184521717934524641157099916833587217))
(assert (x185 x170))
(assert (= (=> (and (and (= x262 (x208 64 x63 1)) (= (+ 1 x49) x402) (= x347 (x38 x169)) (= x141 (x200 x402)) (= x124 x95) (= 0 x387) (= x162 (> x387 0)) (= x49 (+ 5 x262)) (= x141 x13) (= x86 (x384 x49)) (= (> x126 x141) x339) (= x112 (x208 64 x141 2)) (= x169 (+ 1 x262)) (not (> x186 x347)) (not (> x86 x256)) (= (+ x262 3) x368) (= x353 (x43 x368)) (not x339) (= x166 x30)) (or (and x162 (and (= (x189 (+ 4 x193)) x345) (= false x274) (<= x203 127) (= x12 x389) (= (x285 (- x367 x387)) x140) (<= 1 x415) (= (x208 64 x379 0) x244) (= 1 x246) (= (x189 (+ x345 32)) x270) (not (> x20 x106)) (not (= x193 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (= x139 (x213 128)) (= false x32) (= x73 (x208 64 x363 0)) (>= 127 x203) (= x367 (x383 x348)) (>= x379 1) (= x348 (x208 64 x363 0)) (= 68 x297) (= x133 x379) (= x311 false) (= x269 false) (= (x257 x143) x415) (= (x194 x244) x209) (= x196 (x189 (+ x345 64))) (= x346 (x285 (- x106 x387))) (<= x379 1461501637330902918203684832716283019655932542975) (= x133 x7) (= x387 x389) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x193) (> x341 x193) (= 76450787359836037641860180984291677749980919077056822294353438043884394381312 x355) (= x114 2835717307) (= x379 (x109 x262)) (= x343 (x285 (- x196 x193))) (= x341 (x189 (+ x193 32))) (<= x193 115792089237316195423570985008687907853269984665640564039457584007913129639934) (not (= x193 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (= x20 (x285 (- x106 x387))) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x193) (not (= x193 115792089237316195423570985008687907853269984665640564039457584007913129639904)) (= 68 x343) (= (x189 (+ x387 x209)) x361) (not (> x387 x367)))) (not x162))) x317) x65))
(assert (x185 x187))
(assert (= (x225 (+ 3 x262)) (x225 x262)))
(assert (x185 x81))
(assert (x334 x188))
(assert (x185 x157))
(assert (x185 x143))
(assert (x185 x92))
(assert (= (x208 64 x63 1) (x225 (x208 64 x63 1))))
(assert (x185 x76))
(assert (x185 x233))
(assert (x185 x80))
(assert (=> (<= x222 10000) (= 0 (x225 x222))))
(assert (x185 x161))
(assert (=> (= x301 0) (= 0 (div x96 x301))))
(assert (=> (>= 10000 x363) (= 0 (x225 x363))))
(assert (= (x208 64 x303 2) (x225 (x208 64 x303 2))))
(assert (= (x225 115792089237316195423570985008687907853269984665640564039457584007913129639934) 0))
(assert (x290 76450787359836037641860180984291677749980919077056822294353438043884394381312))
(assert (x290 4294967295))
(assert (x185 x35))
(assert (= (x225 (+ x381 1)) (x225 x381)))
(assert (x185 x345))
(assert (x185 x379))
(assert (x185 x14))
(assert (x185 x263))
(assert (x185 x190))
(assert (x185 x84))
(assert (x185 x155))
(assert (x185 x188))
(assert (x185 x210))
(assert (x185 x30))
(assert (x185 x346))
(assert (= (x225 x169) (x225 (+ 1 x169))))
(assert (x185 x291))
(assert (x290 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (x185 x387))
(assert (x185 x159))
(assert (=> (= 0 x96) (= 0 (div x25 x96))))
(assert (> (x208 64 x11 3) 10000))
(assert (= x416 (and (not x75) x54)))
(assert (x185 x266))
(assert (x185 x193))
(assert (x185 x335))
(assert (= (x107 (x208 64 x63 1)) x63))
(assert (x185 x87))
(assert (x185 x31))
(assert (= (x225 (x208 64 x11 3)) (x208 64 x11 3)))
(assert (x185 x108))
(assert (x156 x47 x188))
(assert (x185 x393))
(assert (=> (>= 10000 x379) (= 0 (x225 x379))))
(assert (x290 3536776372))
(assert (x185 x252))
(assert (= x363 (x107 (x208 64 x363 0))))
(assert (= (x225 115792089237316195423570985008687907853269984665640564039457584007913129639904) 0))
(assert (x185 x242))
(assert (x290 2835717307))
(assert (x185 x301))
(assert (x185 x12))
(assert (= (=> (and (= x207 (= 0 x306)) (or (and (not x207) (and (= x150 false) (= x21 x168) (>= x170 1) (= 128 x273) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639934 x291) (= x197 (x277 x239)) (= (+ 2 x313) x198) (= (- x29 x197) x48) (= x126 (+ 1 x291)) (= 36 x377) (= (x208 64 x363 0) x101) (= (x208 64 x291 2) x351) (= x239 (+ 1 x381)) (= x227 (+ x291 1)) (= x82 (x189 (+ x398 x91))) (= x330 false) (not (> x398 x242)) (= x363 x327) (= x286 1889567281) (= x242 (x189 (+ x91 x398))) (= x154 50942633119752846454219349998365661925608737367104304655302372697894809501696) (= false x248) (= (x208 64 x291 2) x313) (= x205 (x208 64 x303 2)) (= (+ x351 1) x33) (>= 127 x81) (not (< x267 x166)) (= x206 (x285 (- x53 x398))) (= (+ 1 x291) x303) (= (+ x206 x48) x21) (>= 127 x81) (= (x119 x33) x91) (= x327 x241) (= x326 false) (not (< x53 x206)) (= x170 (x257 x143)) (= x267 (x189 (+ x338 x166))) (= 160 x193) (= x381 (x208 64 x291 2)) (= (x151 128) x53) (= x315 (x383 x101)) (= x106 x82))) (and x207 (and (= x168 x29) (= 128 x193) (= x291 x126) (= x106 x398))))) x65) x292))
(assert (x185 x306))
(assert (x185 x347))
(assert (x185 x139))
(assert (x185 x314))
(assert (x185 x106))
(assert (not (x290 (x208 64 x141 2))))
(assert (= x303 (x107 (x208 64 x303 2))))
(assert (x185 x397))
(assert (not (x290 (x208 64 x11 3))))
(assert (x185 x353))
(assert (x185 x96))
(check-sat)
(exit)
