(set-info :smt-lib-version 2.6)
(set-logic QF_UFNIA)
(set-info :source |
Generated by: Certora
Generated on: 2024-04-10
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x444 () Int)
(declare-fun x309 () Int)
(declare-fun x447 () Int)
(declare-fun x315 () Bool)
(declare-fun x259 () Bool)
(declare-fun x464 () Int)
(declare-fun x324 () Bool)
(declare-fun x176 () Bool)
(declare-fun x109 () Bool)
(declare-fun x411 (Int) Int)
(declare-fun x406 () Int)
(declare-fun x220 () Int)
(declare-fun x368 (Int Int) Int)
(declare-fun x313 () Bool)
(declare-fun x107 () Int)
(declare-fun x425 () Bool)
(declare-fun x122 () Int)
(declare-fun x322 () Bool)
(declare-fun x205 () Int)
(declare-fun x306 () Int)
(declare-fun x382 () Int)
(declare-fun x152 () Bool)
(declare-fun x154 () Int)
(declare-fun x81 () Int)
(declare-fun x293 () Bool)
(declare-fun x214 () Bool)
(declare-fun x133 () Bool)
(declare-fun x184 () Int)
(declare-fun x465 () Int)
(declare-fun x195 () Int)
(declare-fun x15 () Bool)
(declare-fun x421 () Int)
(declare-fun x3 () Int)
(declare-fun x311 () Int)
(declare-fun x355 () Int)
(declare-fun x186 () Bool)
(declare-fun x166 () Bool)
(declare-fun x60 () Bool)
(declare-fun x408 () Bool)
(declare-fun x351 () Bool)
(declare-fun x333 () Int)
(declare-fun x85 () Int)
(declare-fun x431 () Bool)
(declare-fun x332 () Int)
(declare-fun x256 () Int)
(declare-fun x22 () Int)
(declare-fun x138 () Bool)
(declare-fun x183 () Int)
(declare-fun x144 () Int)
(declare-fun x117 () Int)
(declare-fun x416 () Int)
(declare-fun x318 () Int)
(declare-fun x48 () Bool)
(declare-fun x305 () Int)
(declare-fun x252 () Int)
(declare-fun x433 (Int) Int)
(declare-fun x77 () Bool)
(declare-fun x343 () Bool)
(declare-fun x123 () Bool)
(declare-fun x74 () Int)
(declare-fun x146 () Int)
(declare-fun x177 () Bool)
(declare-fun x51 () Int)
(declare-fun x265 () Int)
(declare-fun x83 () Int)
(declare-fun x364 () Bool)
(declare-fun x469 () Bool)
(declare-fun x196 () Int)
(declare-fun x288 () Bool)
(declare-fun x84 () Int)
(declare-fun x157 () Int)
(declare-fun x204 () Int)
(declare-fun x232 () Int)
(declare-fun x283 () Bool)
(declare-fun x248 () Int)
(declare-fun x321 () Bool)
(declare-fun x299 () Bool)
(declare-fun x178 () Bool)
(declare-fun x459 () Int)
(declare-fun x407 () Bool)
(declare-fun x115 () Bool)
(declare-fun x168 () Bool)
(declare-fun x458 () Int)
(declare-fun x381 () Bool)
(declare-fun x375 () Int)
(declare-fun x335 () Int)
(declare-fun x369 () Int)
(declare-fun x473 () Int)
(declare-fun x376 () Int)
(declare-fun x25 () Bool)
(declare-fun x73 () Int)
(declare-fun x240 () Int)
(declare-fun x483 () Int)
(declare-fun x463 () Int)
(declare-fun x185 () Int)
(declare-fun x285 () Int)
(declare-fun x279 () Int)
(declare-fun x121 () Int)
(declare-fun x426 () Int)
(declare-fun x418 () Int)
(declare-fun x211 () Bool)
(declare-fun x142 () Int)
(declare-fun x127 (Int Int) Int)
(declare-fun x67 () Int)
(declare-fun x326 () Int)
(declare-fun x143 () Bool)
(declare-fun x389 () Int)
(declare-fun x419 () Int)
(declare-fun x423 () Int)
(declare-fun x19 () Int)
(declare-fun x301 () Int)
(declare-fun x330 () Int)
(declare-fun x280 () Int)
(declare-fun x262 () Bool)
(declare-fun x428 () Bool)
(declare-fun x363 () Int)
(declare-fun x112 () Int)
(declare-fun x424 () Bool)
(declare-fun x128 () Int)
(declare-fun x174 () Bool)
(declare-fun x52 () Bool)
(declare-fun x347 () Bool)
(declare-fun x399 () Int)
(declare-fun x12 (Int) Int)
(declare-fun x331 () Int)
(declare-fun x296 () Int)
(declare-fun x247 () Int)
(declare-fun x400 () Int)
(declare-fun x147 () Int)
(declare-fun x221 () Bool)
(declare-fun x386 () Bool)
(declare-fun x438 (Int) Int)
(declare-fun x58 () Bool)
(declare-fun x54 () Int)
(declare-fun x354 (Int Int Int) Int)
(declare-fun x116 () Bool)
(declare-fun x291 () Bool)
(declare-fun x302 () Int)
(declare-fun x245 () Int)
(declare-fun x30 () Bool)
(declare-fun x155 () Int)
(declare-fun x140 () Int)
(declare-fun x404 () Int)
(declare-fun x239 () Int)
(declare-fun x312 () Bool)
(declare-fun x440 (Int) Int)
(declare-fun x246 () Bool)
(declare-fun x59 () Int)
(declare-fun x200 () Bool)
(declare-fun x359 () Bool)
(declare-fun x476 () Int)
(declare-fun x304 () Int)
(declare-fun x432 () Int)
(declare-fun x340 () Bool)
(declare-fun x297 () Int)
(declare-fun x62 () Bool)
(declare-fun x251 () Int)
(declare-fun x75 () Int)
(declare-fun x63 () Int)
(declare-fun x294 () Int)
(declare-fun x197 () Int)
(declare-fun x396 () Bool)
(declare-fun x17 () Int)
(declare-fun x263 (Int) Int)
(declare-fun x181 () Int)
(declare-fun x342 () Bool)
(declare-fun x289 () Int)
(declare-fun x316 () Int)
(declare-fun x159 () Bool)
(declare-fun x238 (Int) Int)
(declare-fun x223 () Int)
(declare-fun x103 () Bool)
(declare-fun x215 () Int)
(declare-fun x89 () Int)
(declare-fun x31 () Int)
(declare-fun x284 () Int)
(declare-fun x5 () Int)
(declare-fun x61 () Bool)
(declare-fun x114 () Bool)
(declare-fun x161 () Bool)
(declare-fun x91 () Bool)
(declare-fun x290 () Int)
(declare-fun x56 () Int)
(declare-fun x269 () Int)
(declare-fun x467 () Int)
(declare-fun x271 () Int)
(declare-fun x129 () Int)
(declare-fun x149 () Bool)
(declare-fun x274 (Int) Int)
(declare-fun x124 () Bool)
(declare-fun x413 (Int) Int)
(declare-fun x224 () Bool)
(declare-fun x367 () Bool)
(declare-fun x201 () Bool)
(declare-fun x410 () Int)
(declare-fun x435 () Int)
(declare-fun x443 () Int)
(declare-fun x250 () Int)
(declare-fun x308 () Int)
(declare-fun x398 () Bool)
(declare-fun x412 () Int)
(declare-fun x372 () Bool)
(declare-fun x267 () Int)
(declare-fun x230 () Bool)
(declare-fun x64 () Int)
(declare-fun x37 () Bool)
(declare-fun x44 () Int)
(declare-fun x486 () Bool)
(declare-fun x415 () Int)
(declare-fun x441 () Int)
(declare-fun x402 () Int)
(declare-fun x287 () Bool)
(declare-fun x105 () Int)
(declare-fun x104 () Int)
(declare-fun x169 () Bool)
(declare-fun x482 () Int)
(declare-fun x401 () Bool)
(declare-fun x137 (Int Int) Int)
(declare-fun x170 () Bool)
(declare-fun x188 () Int)
(declare-fun x436 () Bool)
(declare-fun x395 () Int)
(declare-fun x219 () Int)
(declare-fun x392 () Bool)
(declare-fun x92 () Bool)
(declare-fun x484 () Bool)
(declare-fun x134 () Int)
(declare-fun x471 () Bool)
(declare-fun x212 () Int)
(declare-fun x487 () Int)
(declare-fun x430 (Int) Int)
(declare-fun x344 () Int)
(declare-fun x87 () Int)
(declare-fun x268 () Bool)
(declare-fun x36 () Int)
(declare-fun x80 () Int)
(declare-fun x272 () Int)
(declare-fun x1 (Int) Int)
(declare-fun x71 () Int)
(declare-fun x278 () Bool)
(declare-fun x132 () Int)
(declare-fun x50 () Int)
(declare-fun x93 () Bool)
(declare-fun x341 () Int)
(declare-fun x126 () Int)
(declare-fun x165 () Int)
(declare-fun x2 () Int)
(declare-fun x337 () Bool)
(declare-fun x439 () Bool)
(declare-fun x346 () Int)
(declare-fun x164 () Int)
(declare-fun x266 () Int)
(declare-fun x182 () Bool)
(declare-fun x11 () Int)
(declare-fun x26 () Bool)
(declare-fun x281 () Int)
(declare-fun x125 () Int)
(declare-fun x323 () Bool)
(declare-fun x209 () Int)
(declare-fun x258 () Bool)
(declare-fun x227 (Int) Int)
(declare-fun x475 () Int)
(declare-fun x233 () Bool)
(declare-fun x101 () Int)
(declare-fun x237 () Int)
(declare-fun x190 () Int)
(declare-fun x360 () Int)
(declare-fun x217 () Bool)
(declare-fun x286 () Bool)
(declare-fun x65 () Int)
(declare-fun x477 () Bool)
(declare-fun x449 () Bool)
(declare-fun x100 () Int)
(declare-fun x357 () Int)
(declare-fun x34 () Bool)
(declare-fun x191 () Int)
(declare-fun x199 () Int)
(declare-fun x16 (Int Int) Int)
(declare-fun x429 () Bool)
(declare-fun x148 () Int)
(declare-fun x292 () Int)
(declare-fun x175 () Int)
(declare-fun x18 () Bool)
(declare-fun x243 () Bool)
(declare-fun x339 () Bool)
(declare-fun x307 () Bool)
(declare-fun x150 () Bool)
(declare-fun x163 () Int)
(declare-fun x485 () Int)
(declare-fun x320 () Int)
(declare-fun x356 () Bool)
(declare-fun x241 () Int)
(declare-fun x336 () Bool)
(declare-fun x90 () Bool)
(declare-fun x378 () Int)
(declare-fun x466 () Bool)
(declare-fun x468 () Bool)
(declare-fun x102 () Bool)
(declare-fun x244 () Int)
(declare-fun x226 () Bool)
(declare-fun x383 () Int)
(declare-fun x111 (Int) Int)
(declare-fun x462 () Bool)
(declare-fun x99 () Bool)
(declare-fun x24 (Int) Int)
(declare-fun x86 () Int)
(declare-fun x373 () Bool)
(declare-fun x277 () Bool)
(declare-fun x474 () Bool)
(declare-fun x113 () Int)
(declare-fun x108 () Bool)
(declare-fun x203 () Bool)
(declare-fun x377 (Int) Int)
(declare-fun x40 () Int)
(declare-fun x96 () Bool)
(declare-fun x41 () Int)
(declare-fun x255 () Int)
(declare-fun x370 () Bool)
(declare-fun x393 () Int)
(declare-fun x198 () Bool)
(declare-fun x409 () Int)
(declare-fun x39 () Bool)
(declare-fun x151 () Int)
(declare-fun x162 () Bool)
(declare-fun x145 () Int)
(declare-fun x79 () Int)
(declare-fun x427 () Int)
(declare-fun x300 () Int)
(declare-fun x173 () Int)
(declare-fun x414 () Bool)
(declare-fun x390 () Int)
(declare-fun x442 () Bool)
(declare-fun x179 (Int) Int)
(declare-fun x167 () Bool)
(declare-fun x327 () Bool)
(declare-fun x452 () Bool)
(declare-fun x353 () Int)
(declare-fun x384 () Bool)
(declare-fun x189 () Bool)
(declare-fun x76 () Bool)
(declare-fun x394 () Int)
(declare-fun x319 () Int)
(declare-fun x385 () Bool)
(declare-fun x20 () Bool)
(declare-fun x388 () Int)
(declare-fun x88 (Int) Bool)
(declare-fun x348 () Bool)
(declare-fun x98 () Int)
(declare-fun x208 () Int)
(declare-fun x33 () Int)
(declare-fun x14 () Bool)
(declare-fun x57 () Bool)
(declare-fun x171 () Bool)
(declare-fun x417 () Bool)
(declare-fun x403 () Bool)
(declare-fun x72 () Int)
(declare-fun x21 () Int)
(declare-fun x295 () Int)
(declare-fun x254 () Bool)
(declare-fun x310 () Int)
(declare-fun x454 () Bool)
(declare-fun x207 () Bool)
(declare-fun x345 () Int)
(declare-fun x448 () Int)
(declare-fun x23 () Int)
(declare-fun x260 () Bool)
(declare-fun x451 () Int)
(declare-fun x194 () Bool)
(declare-fun x218 () Int)
(declare-fun x270 () Int)
(declare-fun x329 () Bool)
(declare-fun x379 () Int)
(declare-fun x457 () Int)
(declare-fun x275 () Bool)
(declare-fun x68 () Int)
(declare-fun x338 () Int)
(declare-fun x453 () Bool)
(declare-fun x350 () Int)
(declare-fun x156 () Int)
(declare-fun x118 () Int)
(declare-fun x314 () Bool)
(declare-fun x8 () Int)
(declare-fun x446 () Bool)
(declare-fun x180 () Int)
(declare-fun x136 () Int)
(declare-fun x47 () Int)
(declare-fun x456 () Bool)
(declare-fun x371 (Int Int) Int)
(declare-fun x434 () Int)
(declare-fun x160 () Int)
(declare-fun x28 () Bool)
(declare-fun x187 () Int)
(declare-fun x95 () Int)
(declare-fun x69 (Int) Int)
(declare-fun x358 () Int)
(declare-fun x391 () Bool)
(declare-fun x43 () Int)
(declare-fun x478 () Int)
(declare-fun x328 () Int)
(declare-fun x110 () Int)
(declare-fun x422 () Int)
(declare-fun x106 () Int)
(declare-fun x45 () Bool)
(declare-fun x420 () Int)
(declare-fun x481 (Int) Int)
(declare-fun x234 () Bool)
(declare-fun x231 () Int)
(declare-fun x282 () Int)
(declare-fun x213 () Int)
(declare-fun x352 () Int)
(declare-fun x325 () Int)
(declare-fun x470 (Int) Int)
(declare-fun x206 () Int)
(declare-fun x405 (Int) Int)
(declare-fun x172 () Int)
(declare-fun x158 () Bool)
(define-fun x225 ((x10 Int)) Int (ite (and (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x10) (>= x10 0)) x10 (- x10 115792089237316195423570985008687907853269984665640564039457584007913129639936)))
(define-fun x32 ((x10 Int)) Int (ite (and (< x10 0) (>= x10 (- 115792089237316195423570985008687907853269984665640564039457584007913129639936))) (+ x10 115792089237316195423570985008687907853269984665640564039457584007913129639936) x10))
(define-fun x334 ((x229 Int)) Bool (and (>= x229 0) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 x229)))
(define-fun x6 ((x229 Int)) Bool (and (= (x137 x229 115792089237316195423570985008687907853269984665640564039457584007913129639935) x229) (= (x137 115792089237316195423570985008687907853269984665640564039457584007913129639935 x229) x229)))
(define-fun x82 ((x229 Int)) Bool (and (= 0 (x137 x229 0)) (= (x137 0 x229) 0)))
(define-fun x374 ((x229 Int)) Bool (= (x137 x229 x229) x229))
(define-fun x29 ((x229 Int)) Bool (and (x374 x229) (x6 x229) (x82 x229)))
(define-fun x380 ((x229 Int) (x13 Int)) Bool (= (x137 x229 x13) (x137 x13 x229)))
(define-fun x303 ((x229 Int) (x13 Int)) Bool (and (=> (>= x229 0) (>= x229 (x137 x229 x13))) (<= 0 (x137 x229 x13)) (=> (>= x13 0) (<= (x137 x229 x13) x13))))
(define-fun x349 ((x229 Int) (x13 Int)) Bool (and (x303 x229 x13) (x380 x229 x13)))
(define-fun x317 ((x229 Int)) Bool (= (mod x229 32) (x137 x229 31)))
(define-fun x365 ((x229 Int)) Bool (and (x317 x229) (x349 x229 31)))
(define-fun x222 ((x229 Int)) Bool (and (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x127 x229 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (x127 115792089237316195423570985008687907853269984665640564039457584007913129639935 x229) 115792089237316195423570985008687907853269984665640564039457584007913129639935)))
(define-fun x264 ((x229 Int)) Bool (and (= x229 (x127 0 x229)) (= x229 (x127 x229 0))))
(define-fun x472 ((x229 Int)) Bool (= (x127 x229 x229) x229))
(define-fun x202 ((x229 Int)) Bool (and (x222 x229) (x264 x229) (x472 x229)))
(define-fun x78 ((x229 Int) (x13 Int)) Bool (= (x127 x13 x229) (x127 x229 x13)))
(define-fun x460 ((x229 Int) (x13 Int)) Bool (and (>= (+ x13 x229) (x127 x229 x13)) (=> (>= x229 0) (<= x229 (x127 x229 x13))) (=> (<= 0 x13) (>= (x127 x229 x13) x13))))
(define-fun x450 ((x229 Int) (x13 Int)) Bool (and (x78 x229 x13) (x460 x229 x13)))
(define-fun x228 ((x229 Int)) Bool (= (x137 x229 1) (mod x229 2)))
(define-fun x276 ((x229 Int)) Bool (and (x349 x229 1) (x228 x229)))
(define-fun x397 ((x229 Int)) Bool (= (x137 x229 127) (mod x229 128)))
(define-fun x120 ((x229 Int)) Bool (and (x397 x229) (x349 x229 127)))
(define-fun x445 ((x480 Int)) Int 0)
(define-fun x236 ((x480 Int)) Int 0)
(define-fun x119 ((x480 Int)) Int 0)
(define-fun x46 ((x480 Int)) Int 0)
(define-fun x53 ((x480 Int)) Int 0)
(define-fun x242 ((x480 Int)) Int 0)
(define-fun x49 ((x480 Int)) Int 0)
(define-fun x42 ((x480 Int)) Int 0)
(define-fun x70 ((x480 Int)) Int 0)
(define-fun x489 ((x480 Int)) Int 0)
(define-fun x192 ((x480 Int)) Int 0)
(define-fun x27 ((x480 Int)) Int (ite (< x480 x363) (x1 x480) 0))
(define-fun x94 ((x480 Int)) Int (ite (and (> x363 x480) (<= 0 x480)) (x430 x480) (x27 x480)))
(define-fun x479 ((x480 Int)) Int (ite (= x480 x241) x83 (x405 x480)))
(define-fun x461 ((x480 Int)) Int (ite (= x87 x480) x245 (x479 x480)))
(define-fun x141 ((x480 Int)) Int (ite (= 128 x480) 13 (x53 x480)))
(define-fun x387 ((x480 Int)) Int (ite (= x480 160) 39553310892875263560936207548857176834471854732421237974622739861269930573824 (x119 x480)))
(define-fun x455 ((x480 Int)) Int (ite (= 192 x480) 4 (x236 x480)))
(define-fun x257 ((x480 Int)) Int (ite (= x480 224) 39473711962023174749424659199615060097653232135126263878786656434573155500032 (x445 x480)))
(define-fun x139 ((x480 Int)) Int (ite (= x480 256) 72464927124685711895252664195178772226123872012682517813167109100718830649344 (x70 x480)))
(define-fun x130 ((x480 Int)) Int (ite (and (< x480 288) (<= 256 x480)) (x411 (- x480 256)) (x139 x480)))
(define-fun x66 ((x480 Int)) Int 0)
(define-fun x437 ((x480 Int)) Int 0)
(define-fun x9 ((x480 Int)) Int (ite (= x480 x33) 0 (x111 x480)))
(define-fun x273 ((x480 Int)) Int (ite (= x480 x22) 0 (x179 x480)))
(define-fun x361 ((x480 Int)) Int (ite (= x215 x480) 0 (x470 x480)))
(define-fun x153 ((x480 Int)) Int (ite x275 (x111 x480) (x9 x480)))
(define-fun x193 ((x480 Int)) Int (ite x108 (x179 x480) (x273 x480)))
(define-fun x235 ((x480 Int)) Int (ite x453 (x470 x480) (x361 x480)))
(define-fun x35 ((x480 Int)) Int (ite x372 (x111 x480) (ite x275 (x111 x480) (x9 x480))))
(define-fun x488 ((x480 Int)) Int (ite (= x480 320) 22163329580580053030292883849319169862539958002407764210677428189014622470144 (x242 x480)))
(define-fun x4 ((x480 Int)) Int (ite (= x352 x480) x212 (x35 x480)))
(define-fun x362 ((x480 Int)) Int (ite x417 (x179 x480) (ite x108 (x179 x480) (x273 x480))))
(define-fun x38 ((x480 Int)) Int (ite (= x480 x318) x122 (x362 x480)))
(define-fun x210 ((x480 Int)) Int (ite x424 (x470 x480) (ite x453 (x470 x480) (x361 x480))))
(define-fun x249 ((x480 Int)) Int (ite (= x434 x480) x11 (x210 x480)))
(define-fun x261 ((x480 Int)) Int (ite (= 288 x480) 1 (x49 x480)))
(define-fun x97 ((x480 Int)) Int (ite (and (>= x480 256) (> 288 x480)) (x411 (- x480 256)) (x42 x480)))
(define-fun x366 ((x480 Int)) Int (ite x468 (x130 x480) (x139 x480)))
(define-fun x253 ((x480 Int)) Int (ite (= x480 352) 34602258808455191227493136189427688107261027562213901346293687426555358216192 (x366 x480)))
(define-fun x55 ((x480 Int)) Int (ite (= x480 356) x87 (x253 x480)))
(define-fun x298 ((x480 Int)) Int (ite (= 388 x480) 0 (x55 x480)))
(define-fun x135 ((x480 Int)) Int (ite (= 420 x480) 0 (x298 x480)))
(define-fun x216 ((x480 Int)) Int (ite (= 452 x480) 57005 (x135 x480)))
(define-fun x131 ((x480 Int)) Int (ite x336 (x438 x480) (x69 x480)))
(define-fun x7 ((x480 Int)) Int (ite (= x325 x480) x54 (x131 x480)))
(assert (x29 1))
(assert (= (x481 x33) (x481 (+ x33 1))))
(assert (x334 x83))
(assert (x334 x218))
(assert (not (x88 (x368 32 154))))
(assert true)
(assert (= x165 (x227 (x354 64 x165 159))))
(assert (= x271 (x227 (x354 64 x271 156))))
(assert (x334 x282))
(assert (x334 x295))
(assert (= true x214))
(assert (x334 x205))
(assert (x334 x272))
(assert (x334 x156))
(assert (x334 x416))
(assert (x334 x265))
(assert (= x152 (or x233 x351)))
(assert (x334 x459))
(assert (x29 x458))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x368 32 155)))
(assert (= (=> (and (and (= x484 (> x145 0)) x484 (= 1 x145) (= 1 x467)) (or (and x96 (and (= x181 1) (= x157 1))) (and (not x96) (= x181 x316)))) x401) x90))
(assert (x202 x358))
(assert (x365 x355))
(assert (x334 x285))
(assert (x334 x458))
(assert (=> (<= x173 10000) (= 0 (x481 x173))))
(assert (= (x227 (x354 64 x165 161)) x165))
(assert (x29 x197))
(assert (x334 x426))
(assert (x334 x383))
(assert (= x291 (and x48 (not x109))))
(assert (= (=> (and (and (or (and (and (>= 255 x117) (= x145 (ite (> 1 x117) 1 0))) x96) (and (= x145 (ite x96 1 0)) (not x96))) (and (= false x102) (= (x405 x241) x83) (<= x451 127) (= x166 false) (>= x344 1) (= (= x316 0) x96) (>= 127 x451) (= x250 2167012380) (= x199 (x479 x87)) (= (x12 x87) x344) (>= 255 x316) (= x245 x199) (= x330 x241))) (and (= false x234) (= x147 (x430 0)) (= false x396) x200 (= false x370) (= x391 false) (= x133 false) (= x147 x294) (= (>= x270 x357) x200))) x90) x392))
(assert (= x299 (or x323 x34)))
(assert (x334 x209))
(assert (x334 x338))
(assert (x334 x117))
(assert (= 158 (x440 (x354 64 x271 158))))
(assert (x334 x463))
(assert (x334 x350))
(assert (= 161 (x440 (x354 64 x271 161))))
(assert (x334 x148))
(assert (x334 x204))
(assert (= (ite (< x404 256) (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x16 2 x404)) 0) (x371 115792089237316195423570985008687907853269984665640564039457584007913129639935 x404)))
(assert (= 0 (x481 57896044618658097711785492504343953926634992332820282019728792003956564819967)))
(assert (x334 x305))
(assert (not (x88 (x354 64 x271 161))))
(assert (= 0 (x481 382502381645197248123620639812464696550576095234)))
(assert (x334 x487))
(assert (x334 x302))
(assert (x334 x251))
(assert (x202 x71))
(assert (x88 2167012380))
(assert (x120 x142))
(assert (x334 x360))
(assert (x88 4294967295))
(assert (x334 x232))
(assert (x334 x296))
(assert (x334 x447))
(assert (x450 x422 x110))
(assert (x334 x256))
(assert (not (x88 (x368 32 155))))
(assert (= (and x299 x96) x18))
(assert (=> (<= x165 10000) (= 0 (x481 x165))))
(assert (x334 x19))
(assert (x334 x185))
(assert (x334 x406))
(assert (x334 x344))
(assert (= x203 (or x149 x424)))
(assert (x202 x251))
(assert (x120 x406))
(assert (= (x368 32 155) (x481 (x368 32 155))))
(assert (x334 x241))
(assert (= (x440 (x354 64 x165 158)) 158))
(assert (x334 x206))
(assert (x334 x432))
(assert (= (x481 115792089237316195423570985008687907853269984665640564039457584007913129639935) 0))
(assert (< (x368 32 3) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x334 x252))
(assert (x334 x311))
(assert (x349 x328 x416))
(assert (x334 x75))
(assert (= (and x214 (not x221)) x466))
(assert (x334 x106))
(assert (= x259 (and x114 (not x96))))
(assert (x334 x467))
(assert (= x138 (and (not x96) x398)))
(assert (=> (<= x241 10000) (= (x481 x241) 0)))
(assert (x334 x105))
(assert (x334 x290))
(assert (= 64 (x433 (x354 64 x271 158))))
(assert (x334 x292))
(assert (= (x481 18446744073709551615) 0))
(assert (x202 x435))
(assert (< (x354 64 x271 158) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x365 x74))
(assert (= x372 (and x152 (not x62))))
(assert (x334 x421))
(assert (x334 x84))
(assert (x334 x40))
(assert (= (and x203 x198) x34))
(assert (= x336 (or x288 x468)))
(assert (x29 x389))
(assert (x334 x165))
(assert (x120 x419))
(assert (x334 x301))
(assert (= 64 (x433 (x354 64 x271 159))))
(assert (x334 x172))
(assert (x334 x270))
(assert (= (=> (and (= x485 (+ x33 1)) (= x99 (not (> x346 x485)))) (and x99 x168)) x403))
(assert (x334 x231))
(assert (= x271 (x227 (x354 64 x271 158))))
(assert (x334 x11))
(assert (x29 x423))
(assert (x334 x341))
(assert (x334 x213))
(assert (x29 x8))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x354 64 x271 159)))
(assert (x88 382502381645197248123620639812464696550576095234))
(assert (not (x88 (x354 64 x165 159))))
(assert (x334 x333))
(assert (= (x227 (x354 64 x165 158)) x165))
(assert (x334 x121))
(assert (x334 x320))
(assert (x88 115792089237316195423570985008687907853269984665640564039457584007913129639935))
(assert (= (=> (and (= (= 1 (ite (< 31 x389) 1 0)) x116) (or (and (and (>= x126 1) (= x265 (x225 (+ x19 x435))) (= (ite (<= x435 1) x265 (x127 x435 x19)) x206) (= (x371 115792089237316195423570985008687907853269984665640564039457584007913129639935 x404) x126) (= x416 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x126)) (= (* x389 2) x19) (= (x137 x328 x416) x435) (= (x488 320) x328) (= x404 (* 8 x389))) (not x116)) (and x116 (and (= (* x118 8) x353) (= x204 (* 2 x389)) (= x240 (x488 320)) (= (x137 x240 x279) x212) (= (x137 31 x389) x118) (= (+ x204 1) x237) (= x279 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x371 115792089237316195423570985008687907853269984665640564039457584007913129639935 x353))) (= x352 (x368 32 4)))))) x15) x77))
(assert (x334 x379))
(assert (= (=> (and (>= 18446744073709551615 x389) (or (= 1 x272) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x272)) (= (div x487 2) x197) (= (ite (> x136 0) x197 (x137 127 x197)) x280) (= x62 (< 31 x280)) (= (x137 1 x487) x136) (= x389 (x261 288)) (= (x32 (- x136 (mod (ite (< x280 32) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936))) x272)) (and (=> (and x62 (and (= x444 (div (+ x280 31) 32)) (= (+ x444 x33) x346) (= (> x346 x33) x254) (= (x368 32 4) x33))) (and (=> (not x254) x168) (=> x254 x403))) (=> (not x62) x77))) x277))
(assert (= (and (not x198) x203) x323))
(assert (= (x481 2167012380) 0))
(assert (= 64 (x433 (x354 64 x165 158))))
(assert (x88 1889567281))
(assert (= (x433 (x354 64 x165 159)) 64))
(assert (x334 x144))
(assert (x29 x244))
(assert (= (ite (< x155 256) (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x16 2 x155)) 0) (x371 115792089237316195423570985008687907853269984665640564039457584007913129639935 x155)))
(assert (x349 x240 x279))
(assert (x334 x184))
(assert (not (x88 (x354 64 x165 161))))
(assert (x334 x23))
(assert (x334 x98))
(assert (= (=> (and (= (= 1 (ite (< 31 x121) 1 0)) x198) (or (and x198 (and (= x180 (* x80 8)) (= x11 (x137 x209 x112)) (= x112 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x371 115792089237316195423570985008687907853269984665640564039457584007913129639935 x180))) (= (x368 32 155) x434) (= x80 (x137 31 x121)) (= x73 (* x121 2)) (= (x257 224) x209) (= x191 (+ x73 1)))) (and (and (= (ite (<= x358 1) x252 (x127 x358 x251)) x441) (= x252 (x225 (+ x251 x358))) (= x426 (x371 115792089237316195423570985008687907853269984665640564039457584007913129639935 x75)) (= x8 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x426)) (= (x257 224) x458) (= (* x121 2) x251) (= (* x121 8) x75) (>= x426 1) (= x358 (x137 x458 x8))) (not x198)))) x115) x429))
(assert (x334 x107))
(assert (x365 x389))
(assert (x334 x126))
(assert (x334 x378))
(assert (= (or x167 x275) x321))
(assert (x334 x132))
(assert (= (x227 (x368 32 3)) 3))
(assert (= (and x425 (not x307)) x424))
(assert (= (or x291 x14) x439))
(assert (x334 x173))
(assert (x334 x43))
(assert (x334 x248))
(assert (< 10000 (x354 64 x165 158)))
(assert (not (x88 (x368 32 3))))
(assert (x276 x333))
(assert (x334 x47))
(assert (x334 x393))
(assert (x334 x87))
(assert (x29 x240))
(assert (> (x354 64 x165 156) 10000))
(assert (= 32 (x433 (x368 32 155))))
(assert (= (ite (< x353 256) (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x16 2 x353)) 0) (x371 115792089237316195423570985008687907853269984665640564039457584007913129639935 x353)))
(assert (= (or x287 x466) x398))
(assert (x334 x86))
(assert (x202 x422))
(assert (x334 x297))
(assert (x334 x404))
(assert (= 0 (x481 404098525)))
(assert (= 0 (x481 39553310892875263560936207548857176834471854732421237974622739861269930573824)))
(assert (x334 x112))
(assert (x334 x390))
(assert (< 10000 (x354 64 x271 156)))
(assert (x334 x410))
(assert (< (x354 64 x271 161) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x334 x67))
(assert (= x429 x312))
(assert (= x15 (=> (and (= x355 (x141 128)) (= 0 x412) (= x421 (x137 1 x333)) (= (x97 256) x427) (= x40 (x32 (- x421 (mod (ite (< x175 32) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= x142 (div x333 2)) (= 0 x247) (<= x355 18446744073709551615) (= 0 x79) (= x175 (ite (< 0 x421) x142 (x137 127 x142))) (or (= x40 1) (= x40 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (< 31 x175) x436)) (and (=> (and x436 (and (= (< x22 x332) x93) (= x332 (+ x3 x22)) (= x22 (x368 32 154)) (= x3 (div (+ 31 x175) 32)))) (and (=> (not x93) x124) (=> x93 x428))) (=> (not x436) x201)))))
(assert (x334 x473))
(assert (< (x368 32 4) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x334 x244))
(assert (x334 x335))
(assert (= (and x337 (not x26)) x453))
(assert (x88 22163329580580053030292883849319169862539958002407764210677428189014622470144))
(assert (=> (>= 10000 x271) (= (x481 x271) 0)))
(assert (x365 x121))
(assert (x334 x427))
(assert (= (x440 (x354 64 x165 161)) 161))
(assert (= (=> (and (or (and (not x486) (and (= x483 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x195)) (= x308 (x387 160)) (>= x195 1) (= x376 (x225 (+ x422 x110))) (= x155 (* 8 x74)) (= (x371 115792089237316195423570985008687907853269984665640564039457584007913129639935 x155) x195) (= (* 2 x74) x110) (= (x137 x308 x483) x422) (= (ite (<= x422 1) x376 (x127 x422 x110)) x47))) (and x486 (and (= x325 (x368 32 3)) (= x320 (* 2 x74)) (= x84 (+ x320 1)) (= (x137 31 x74) x310) (= x44 (x387 160)) (= x172 (* x310 8)) (= (x137 x44 x305) x54) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x371 115792089237316195423570985008687907853269984665640564039457584007913129639935 x172)) x305)))) (and (= (< 31 x463) x315) (= x486 (= (ite (> x74 31) 1 0) 1)) (= 288 x256) (>= x415 1) (= (x141 128) x74) (= x218 (x32 (- x67 (mod (ite (> 32 x463) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (<= 1 x181) (or (= x218 1) (= x218 115792089237316195423570985008687907853269984665640564039457584007913129639935)) (= (div x290 2) x406) (not x315) (= (ite (> x67 0) x406 (x137 127 x406)) x463) (<= x181 255) (= x67 (x137 1 x290)) (= x459 (x97 256)) (>= 18446744073709551615 x74))) x277) x170))
(assert (= (=> (and (and (or (and (not x109) (and (= (x354 64 x271 159) x72) (= x309 x86) (= (x263 x72) x309))) (and x109 (and (>= x128 0) (= x5 (* x409 x427)) (= (+ x187 x297) x128) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x5) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x409 x427)) (= x128 x183) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x297 x187)) (= x183 x86) (= x187 x5) (<= 0 x5) (= x482 (x354 64 x271 156)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x128) (= (x274 x482) x409) (= (x354 64 x271 158) x81) (= (x377 x81) x297)))) (and (= (x413 x163) x282) (>= 127 x335) (= x109 (= 0 x282)) (<= 1 x107) (= x68 x271) (>= 127 x335) (= (x354 64 x271 161) x163) (= x271 x345) (>= 2 x282) (= 1889567281 x383) (= false x28) (= (x12 x87) x107) (= false x324))) (and (= false x91) (<= x190 127) (= (* x427 x292) x160) (= x89 36) (= false x373) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x160) (= false x258) (< (* x427 x292) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x367 false) (= x319 x213) (= x345 x164) (= false x230) (= (x12 x87) x220) (= x319 (+ x464 x41)) (<= x190 127) (< (+ x464 x41) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= x386 false) (<= 0 x160) (= x295 404098525) (= x457 4) (= x160 x464) (= false x189) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x319) (= false x268) (<= 0 x319) (<= 1 x220))) x384) x60))
(assert (= (ite (> 256 x180) (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x16 2 x180)) 0) (x371 115792089237316195423570985008687907853269984665640564039457584007913129639935 x180)))
(assert (< 10000 (x354 64 x165 159)))
(assert (x334 x255))
(assert (x334 x199))
(assert (x334 x419))
(assert (x29 x209))
(assert (x334 x239))
(assert (x334 x326))
(assert (x450 x144 x71))
(assert (x334 x85))
(assert (x29 x290))
(assert (x88 57005))
(assert (x334 x289))
(assert (x29 x74))
(assert (= 64 (x433 (x354 64 x165 161))))
(assert (=> (<= x478 10000) (= (x481 x478) 0)))
(assert (= x417 (and (not x436) x158)))
(assert (= (or x321 x372) x217))
(assert (= (and x336 (not x486)) x351))
(assert (x334 x180))
(assert (x334 x122))
(assert (x88 57896044618658097711785492504343953926634992332820282019728792003956564819967))
(assert (x29 x305))
(assert (x334 x8))
(assert (x29 x44))
(assert (x88 39553310892875263560936207548857176834471854732421237974622739861269930573824))
(assert (= (x227 (x368 32 155)) 155))
(assert (x334 x79))
(assert (not (x88 (x354 64 x165 158))))
(assert (x334 x145))
(assert (= (x481 (x368 32 154)) (x368 32 154)))
(assert (x334 x465))
(assert (x29 x360))
(assert (x349 x378 x423))
(assert (x334 x280))
(assert (=> (<= x87 10000) (= 0 (x481 x87))))
(assert (x334 x21))
(assert (< (x354 64 x165 161) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (x334 x175))
(assert (and (= (x16 2 196) 100433627766186892221372630771322662657637687111424552206336) (= (x16 2 151) 2854495385411919762116571938898990272765493248) (= (x16 2 102) 5070602400912917605986812821504) (= 11972621413014756705924586149611790497021399392059392 (x16 2 173)) (= (x16 2 49) 562949953421312) (= (x16 2 246) 113078212145816597093331040047546785012958969400039613319782796882727665664) (= (x16 2 96) 79228162514264337593543950336) (= 452312848583266388373324160190187140051835877600158453279131187530910662656 (x16 2 248)) (= 16384 (x16 2 14)) (= (x16 2 113) 10384593717069655257060992658440192) (= 21267647932558653966460912964485513216 (x16 2 124)) (= 162259276829213363391578010288128 (x16 2 107)) (= (x16 2 186) 98079714615416886934934209737619787751599303819750539264) (= 842498333348457493583344221469363458551160763204392890034487820288 (x16 2 219)) (= (x16 2 42) 4398046511104) (= 680564733841876926926749214863536422912 (x16 2 129)) (= 1180591620717411303424 (x16 2 70)) (= (x16 2 71) 2361183241434822606848) (= 91343852333181432387730302044767688728495783936 (x16 2 156)) (= (x16 2 212) 6582018229284824168619876730229402019930943462534319453394436096) (= (x16 2 174) 23945242826029513411849172299223580994042798784118784) (= (x16 2 144) 22300745198530623141535718272648361505980416) (= 134217728 (x16 2 27)) (= 45671926166590716193865151022383844364247891968 (x16 2 155)) (= (x16 2 169) 748288838313422294120286634350736906063837462003712) (= 5316911983139663491615228241121378304 (x16 2 122)) (= 137438953472 (x16 2 37)) (= (x16 2 10) 1024) (= 6427752177035961102167848369364650410088811975131171341205504 (x16 2 202)) (= 862718293348820473429344482784628181556388621521298319395315527974912 (x16 2 229)) (= (x16 2 226) 107839786668602559178668060348078522694548577690162289924414440996864) (= (x16 2 235) 55213970774324510299478046898216203619608871777363092441300193790394368) (= (x16 2 185) 49039857307708443467467104868809893875799651909875269632) (= 8192 (x16 2 13)) (= (x16 2 211) 3291009114642412084309938365114701009965471731267159726697218048) (= (x16 2 167) 187072209578355573530071658587684226515959365500928) (= 664613997892457936451903530140172288 (x16 2 119)) (= 19807040628566084398385987584 (x16 2 94)) (= 618970019642690137449562112 (x16 2 89)) (= (x16 2 197) 200867255532373784442745261542645325315275374222849104412672) (= (x16 2 161) 2923003274661805836407369665432566039311865085952) (= 3064991081731777716716694054300618367237478244367204352 (x16 2 181)) (= 158456325028528675187087900672 (x16 2 97)) (= (x16 2 95) 39614081257132168796771975168) (= 36028797018963968 (x16 2 55)) (= (x16 2 11) 2048) (= 9223372036854775808 (x16 2 63)) (= (x16 2 108) 324518553658426726783156020576256) (= (x16 2 8) 256) (= (x16 2 148) 356811923176489970264571492362373784095686656) (= 28269553036454149273332760011886696253239742350009903329945699220681916416 (x16 2 244)) (= (x16 2 189) 784637716923335095479473677900958302012794430558004314112) (= (x16 2 1) 2) (= (x16 2 25) 33554432) (= 1267650600228229401496703205376 (x16 2 100)) (= (x16 2 170) 1496577676626844588240573268701473812127674924007424) (= 392318858461667547739736838950479151006397215279002157056 (x16 2 188)) (= (x16 2 247) 226156424291633194186662080095093570025917938800079226639565593765455331328) (= (x16 2 223) 13479973333575319897333507543509815336818572211270286240551805124608) (= 2097152 (x16 2 21)) (= 2535301200456458802993406410752 (x16 2 101)) (= 576460752303423488 (x16 2 59)) (= (x16 2 128) 340282366920938463463374607431768211456) (= (x16 2 228) 431359146674410236714672241392314090778194310760649159697657763987456) (= 1393796574908163946345982392040522594123776 (x16 2 140)) (= 40564819207303340847894502572032 (x16 2 105)) (= 2251799813685248 (x16 2 51)) (= 332306998946228968225951765070086144 (x16 2 118)) (= (x16 2 240) 1766847064778384329583297500742918515827483896875618958121606201292619776) (= (x16 2 194) 25108406941546723055343157692830665664409421777856138051584) (= (x16 2 39) 549755813888) (= (x16 2 249) 904625697166532776746648320380374280103671755200316906558262375061821325312) (= 22835963083295358096932575511191922182123945984 (x16 2 154)) (= (x16 2 172) 5986310706507378352962293074805895248510699696029696) (= 68719476736 (x16 2 36)) (= 1645504557321206042154969182557350504982735865633579863348609024 (x16 2 210)) (= 4194304 (x16 2 22)) (= 38685626227668133590597632 (x16 2 85)) (= (x16 2 130) 1361129467683753853853498429727072845824) (= 401734511064747568885490523085290650630550748445698208825344 (x16 2 198)) (= 6277101735386680763835789423207666416102355444464034512896 (x16 2 192)) (= 5444517870735015415413993718908291383296 (x16 2 132)) (= (x16 2 78) 302231454903657293676544) (= 47890485652059026823698344598447161988085597568237568 (x16 2 175)) (= 1427247692705959881058285969449495136382746624 (x16 2 150)) (= 144115188075855872 (x16 2 57)) (= 102844034832575377634685573909834406561420991602098741459288064 (x16 2 206)) (= 140737488355328 (x16 2 47)) (= 110427941548649020598956093796432407239217743554726184882600387580788736 (x16 2 236)) (= (x16 2 138) 348449143727040986586495598010130648530944) (= (x16 2 32) 4294967296) (= 182687704666362864775460604089535377456991567872 (x16 2 157)) (= (x16 2 160) 1461501637330902918203684832716283019655932542976) (= 2305843009213693952 (x16 2 61)) (= 12855504354071922204335696738729300820177623950262342682411008 (x16 2 203)) (= 4951760157141521099596496896 (x16 2 92)) (= (x16 2 224) 26959946667150639794667015087019630673637144422540572481103610249216) (= 41538374868278621028243970633760768 (x16 2 115)) (= 205688069665150755269371147819668813122841983204197482918576128 (x16 2 207)) (= 70368744177664 (x16 2 46)) (= (x16 2 187) 196159429230833773869868419475239575503198607639501078528) (= 65536 (x16 2 16)) (= 262144 (x16 2 18)) (= (x16 2 231) 3450873173395281893717377931138512726225554486085193277581262111899648) (= (x16 2 182) 6129982163463555433433388108601236734474956488734408704) (= (x16 2 67) 147573952589676412928) (= (x16 2 64) 18446744073709551616) (= (x16 2 34) 17179869184) (= (x16 2 141) 2787593149816327892691964784081045188247552) (= 36893488147419103232 (x16 2 65)) (= 215679573337205118357336120696157045389097155380324579848828881993728 (x16 2 227)) (= 383123885216472214589586756787577295904684780545900544 (x16 2 178)) (= 1532495540865888858358347027150309183618739122183602176 (x16 2 180)) (= 25711008708143844408671393477458601640355247900524685364822016 (x16 2 204)) (= 32 (x16 2 5)) (= (x16 2 38) 274877906944) (= (x16 2 15) 32768) (= (x16 2 250) 1809251394333065553493296640760748560207343510400633813116524750123642650624) (= 1606938044258990275541962092341162602522202993782792835301376 (x16 2 200)) (= (x16 2 114) 20769187434139310514121985316880384) (= 590295810358705651712 (x16 2 69)) (= (x16 2 184) 24519928653854221733733552434404946937899825954937634816) (= 154742504910672534362390528 (x16 2 87)) (= 4835703278458516698824704 (x16 2 82)) (= 6901746346790563787434755862277025452451108972170386555162524223799296 (x16 2 232)) (= 16777216 (x16 2 24)) (= (x16 2 88) 309485009821345068724781056) (= 5708990770823839524233143877797980545530986496 (x16 2 152)) (= (x16 2 6) 64) (= 37778931862957161709568 (x16 2 75)) (= 105312291668557186697918027683670432318895095400549111254310977536 (x16 2 216)) (= (x16 2 191) 3138550867693340381917894711603833208051177722232017256448) (= (x16 2 220) 1684996666696914987166688442938726917102321526408785780068975640576) (= (x16 2 218) 421249166674228746791672110734681729275580381602196445017243910144) (= (x16 2 19) 524288) (= 14474011154664524427946373126085988481658748083205070504932198000989141204992 (x16 2 253)) (= (x16 2 159) 730750818665451459101842416358141509827966271488) (= (x16 2 201) 3213876088517980551083924184682325205044405987565585670602752) (= 13164036458569648337239753460458804039861886925068638906788872192 (x16 2 213)) (= (x16 2 164) 23384026197294446691258957323460528314494920687616) (= 73786976294838206464 (x16 2 66)) (= 17592186044416 (x16 2 44)) (= (x16 2 143) 11150372599265311570767859136324180752990208) (= 1 (x16 2 0)) (= 288230376151711744 (x16 2 58)) (= (x16 2 110) 1298074214633706907132624082305024) (= (x16 2 171) 2993155353253689176481146537402947624255349848014848) (= (x16 2 120) 1329227995784915872903807060280344576) (= 53919893334301279589334030174039261347274288845081144962207220498432 (x16 2 225)) (= 11417981541647679048466287755595961091061972992 (x16 2 153)) (= 83076749736557242056487941267521536 (x16 2 116)) (= (x16 2 31) 2147483648) (= (x16 2 176) 95780971304118053647396689196894323976171195136475136) (= (x16 2 133) 10889035741470030830827987437816582766592) (= (x16 2 41) 2199023255552) (= 1152921504606846976 (x16 2 60)) (= (x16 2 98) 316912650057057350374175801344) (= (x16 2 81) 2417851639229258349412352) (= 191561942608236107294793378393788647952342390272950272 (x16 2 177)) (= 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x16 2 256)) (= (x16 2 28) 268435456) (= (x16 2 245) 56539106072908298546665520023773392506479484700019806659891398441363832832) (= (x16 2 208) 411376139330301510538742295639337626245683966408394965837152256) (= 9903520314283042199192993792 (x16 2 93)) (= (x16 2 72) 4722366482869645213696) (= (x16 2 54) 18014398509481984) (= 633825300114114700748351602688 (x16 2 99)) (= 2658455991569831745807614120560689152 (x16 2 121)) (= (x16 2 251) 3618502788666131106986593281521497120414687020801267626233049500247285301248) (= 75557863725914323419136 (x16 2 76)) (= 46768052394588893382517914646921056628989841375232 (x16 2 165)) (= 281474976710656 (x16 2 48)) (= 1725436586697640946858688965569256363112777243042596638790631055949824 (x16 2 230)) (= (x16 2 83) 9671406556917033397649408) (= (x16 2 242) 7067388259113537318333190002971674063309935587502475832486424805170479104) (= 174224571863520493293247799005065324265472 (x16 2 137)) (= (x16 2 234) 27606985387162255149739023449108101809804435888681546220650096895197184) (= (x16 2 190) 1569275433846670190958947355801916604025588861116008628224) (= (x16 2 243) 14134776518227074636666380005943348126619871175004951664972849610340958208) (= (x16 2 86) 77371252455336267181195264) (= 67108864 (x16 2 26)) (= (x16 2 147) 178405961588244985132285746181186892047843328) (= (x16 2 12) 4096) (= (x16 2 30) 1073741824) (= 8 (x16 2 3)) (= 16 (x16 2 4)) (= (x16 2 183) 12259964326927110866866776217202473468949912977468817408) (= 10633823966279326983230456482242756608 (x16 2 123)) (= (x16 2 146) 89202980794122492566142873090593446023921664) (= 151115727451828646838272 (x16 2 77)) (= 803469022129495137770981046170581301261101496891396417650688 (x16 2 199)) (= 19342813113834066795298816 (x16 2 84)) (= (x16 2 80) 1208925819614629174706176) (= (x16 2 139) 696898287454081973172991196020261297061888) (= 50216813883093446110686315385661331328818843555712276103168 (x16 2 195)) (= (x16 2 222) 6739986666787659948666753771754907668409286105635143120275902562304) (= (x16 2 255) 57896044618658097711785492504343953926634992332820282019728792003956564819968) (= (x16 2 79) 604462909807314587353088) (= (x16 2 33) 8589934592) (= (x16 2 142) 5575186299632655785383929568162090376495104) (= 9444732965739290427392 (x16 2 73)) (= 5192296858534827628530496329220096 (x16 2 112)) (= (x16 2 126) 85070591730234615865843651857942052864) (= 1099511627776 (x16 2 40)) (= 883423532389192164791648750371459257913741948437809479060803100646309888 (x16 2 239)) (= 131072 (x16 2 17)) (= 3533694129556768659166595001485837031654967793751237916243212402585239552 (x16 2 241)) (= (x16 2 209) 822752278660603021077484591278675252491367932816789931674304512) (= (x16 2 163) 11692013098647223345629478661730264157247460343808) (= (x16 2 62) 4611686018427387904) (= (x16 2 193) 12554203470773361527671578846415332832204710888928069025792) (= 2475880078570760549798248448 (x16 2 91)) (= 1125899906842624 (x16 2 50)) (= (x16 2 149) 713623846352979940529142984724747568191373312) (= 35184372088832 (x16 2 45)) (= 170141183460469231731687303715884105728 (x16 2 127)) (= (x16 2 179) 766247770432944429179173513575154591809369561091801088) (= (x16 2 131) 2722258935367507707706996859454145691648) (= (x16 2 103) 10141204801825835211973625643008) (= 52656145834278593348959013841835216159447547700274555627155488768 (x16 2 215)) (= 13803492693581127574869511724554050904902217944340773110325048447598592 (x16 2 233)) (= 8796093022208 (x16 2 43)) (= (x16 2 145) 44601490397061246283071436545296723011960832) (= (x16 2 109) 649037107316853453566312041152512) (= (x16 2 134) 21778071482940061661655974875633165533184) (= 51422017416287688817342786954917203280710495801049370729644032 (x16 2 205)) (= 374144419156711147060143317175368453031918731001856 (x16 2 168)) (= 9007199254740992 (x16 2 53)) (= 87112285931760246646623899502532662132736 (x16 2 136)) (= 2596148429267413814265248164610048 (x16 2 111)) (= (x16 2 7) 128) (= (x16 2 9) 512) (= (x16 2 125) 42535295865117307932921825928971026432) (= (x16 2 56) 72057594037927936) (= 1048576 (x16 2 20)) (= (x16 2 90) 1237940039285380274899124224) (= (x16 2 252) 7237005577332262213973186563042994240829374041602535252466099000494570602496) (= 26328072917139296674479506920917608079723773850137277813577744384 (x16 2 214)) (= 210624583337114373395836055367340864637790190801098222508621955072 (x16 2 217)) (= (x16 2 23) 8388608) (= (x16 2 162) 5846006549323611672814739330865132078623730171904) (= 34359738368 (x16 2 35)) (= 20282409603651670423947251286016 (x16 2 104)) (= 81129638414606681695789005144064 (x16 2 106)) (= 3369993333393829974333376885877453834204643052817571560137951281152 (x16 2 221)) (= (x16 2 135) 43556142965880123323311949751266331066368) (= (x16 2 237) 220855883097298041197912187592864814478435487109452369765200775161577472) (= 4 (x16 2 2)) (= 536870912 (x16 2 29)) (= 93536104789177786765035829293842113257979682750464 (x16 2 166)) (= 441711766194596082395824375185729628956870974218904739530401550323154944 (x16 2 238)) (= (x16 2 68) 295147905179352825856) (= 365375409332725729550921208179070754913983135744 (x16 2 158)) (= (x16 2 74) 18889465931478580854784) (= 4503599627370496 (x16 2 52)) (= (x16 2 117) 166153499473114484112975882535043072) (= 28948022309329048855892746252171976963317496166410141009864396001978282409984 (x16 2 254))))
(assert (x334 x118))
(assert (x334 x151))
(assert (x334 x457))
(assert (= 0 (x481 22163329580580053030292883849319169862539958002407764210677428189014622470144)))
(assert (= (or x408 x103) x425))
(assert (x334 x3))
(assert (x334 x376))
(assert (= 0 (x481 39473711962023174749424659199615060097653232135126263878786656434573155500032)))
(assert (x334 x155))
(assert (= 159 (x440 (x354 64 x271 159))))
(assert (= (=> (and (= (not (< x304 x332)) x182) (= x304 (+ x22 1))) (and x124 x182)) x428))
(assert (= x158 (or x449 x52)))
(assert (x334 x190))
(assert (x29 x378))
(assert (= (x433 (x368 32 154)) 32))
(assert (x334 x220))
(assert (= (and x337 x26) x442))
(assert (> (x354 64 x271 161) 10000))
(assert (= x167 (and x254 x340)))
(assert (x202 x19))
(assert (= 0 (x481 1889567281)))
(assert (x334 x308))
(assert (= x468 (and x293 x407)))
(assert (x334 x80))
(assert (= (x481 1461501637330902918203684832716283019655932542975) 0))
(assert (= (and x436 x158) x37))
(assert (= (=> (and (= x266 (+ 1 x215)) (= x123 (not (< x266 x63)))) (and x312 x123)) x176))
(assert (= (ite (> 256 x50) (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x16 2 x50)) 0) (x371 115792089237316195423570985008687907853269984665640564039457584007913129639935 x50)))
(assert (= x77 x168))
(assert (x334 x353))
(assert (= (and x307 x425) x337))
(assert (= (or x108 x262) x30))
(assert (x334 x247))
(assert (= (or x211 x259) x407))
(assert (x334 x412))
(assert (x202 x144))
(assert (not (x88 (x354 64 x271 159))))
(assert (= (ite (< x172 256) (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x16 2 x172)) 0) (x371 115792089237316195423570985008687907853269984665640564039457584007913129639935 x172)))
(assert (= (x433 (x354 64 x271 161)) 64))
(assert (x334 x476))
(assert (x334 x422))
(assert (= (and (not x293) x407) x288))
(assert (x334 x89))
(assert (x334 x136))
(assert (= 32 (x433 (x368 32 4))))
(assert (x334 x355))
(assert (= x114 (or x343 x138)))
(assert (= (x354 64 x271 159) (x481 (x354 64 x271 159))))
(assert (x334 x389))
(assert (= (x433 (x354 64 x271 156)) 64))
(assert (> (x354 64 x165 161) 10000))
(assert (x334 x2))
(assert (= (x481 72464927124685711895252664195178772226123872012682517813167109100718830649344) 0))
(assert (= (x354 64 x165 156) (x481 (x354 64 x165 156))))
(assert (x334 x420))
(assert (= 159 (x440 (x354 64 x165 159))))
(assert (x334 x358))
(assert (x334 x328))
(assert (x334 x208))
(assert (x334 x183))
(assert (x88 39473711962023174749424659199615060097653232135126263878786656434573155500032))
(assert (= 32 (x433 (x368 32 3))))
(assert (x334 x464))
(assert (x334 x146))
(assert (x334 x395))
(assert (x88 404098525))
(assert (= 0 (x481 34602258808455191227493136189427688107261027562213901346293687426555358216192)))
(assert (= (x354 64 x165 159) (x481 (x354 64 x165 159))))
(assert (x450 x435 x19))
(assert (x334 x44))
(assert (x29 x279))
(assert (x334 x142))
(assert (x334 x357))
(assert (< (x354 64 x165 156) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (x481 (x354 64 x271 156)) (x354 64 x271 156)))
(assert (x29 31))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x354 64 x165 158)))
(assert (x334 x129))
(assert (x334 x279))
(assert (x334 x451))
(assert (x334 x269))
(assert (x334 x475))
(assert (x334 x394))
(assert (x334 x441))
(assert (< 10000 (x368 32 4)))
(assert (= (x481 x22) (x481 (+ x22 1))))
(assert (not (x88 (x368 32 4))))
(assert (= (=> (and (or (and (and (= (x387 160) x255) (= (+ 1 x85) x105) (= x122 (x137 x255 x360)) (= x360 (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x371 115792089237316195423570985008687907853269984665640564039457584007913129639935 x50))) (= x318 (x368 32 154)) (= (* 8 x239) x50) (= (* x355 2) x85) (= x239 (x137 31 x355))) x322) (and (and (= (ite (>= 1 x144) x23 (x127 x144 x71)) x148) (= x23 (x225 (+ x71 x144))) (= x378 (x387 160)) (= (* 8 x355) x205) (= (x371 115792089237316195423570985008687907853269984665640564039457584007913129639935 x205) x326) (= (- 115792089237316195423570985008687907853269984665640564039457584007913129639935 x326) x423) (= (* 2 x355) x71) (<= 1 x326) (= (x137 x378 x423) x144)) (not x322))) (= (= 1 (ite (< 31 x355) 1 0)) x322)) x76) x201))
(assert (x334 x41))
(assert (x29 127))
(assert (x334 x478))
(assert (= (x227 (x354 64 x271 161)) x271))
(assert (x29 x483))
(assert (x334 x50))
(assert (x88 18446744073709551615))
(assert (< (x368 32 154) 115792089237316195423570985008687907853269984665640564039457584007913129639936))
(assert (= (x481 (+ x444 x33)) (x481 x33)))
(assert (= x165 (x227 (x354 64 x165 156))))
(assert (= (x440 (x354 64 x271 156)) 156))
(assert (x202 x110))
(assert (< 10000 (x368 32 155)))
(assert (x88 34602258808455191227493136189427688107261027562213901346293687426555358216192))
(assert (x88 72464927124685711895252664195178772226123872012682517813167109100718830649344))
(assert (= x48 (or x18 (and (not x96) x299))))
(assert (= (ite (> 256 x75) (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x16 2 x75)) 0) (x371 115792089237316195423570985008687907853269984665640564039457584007913129639935 x75)))
(assert (= (x354 64 x271 161) (x481 (x354 64 x271 161))))
(assert (x334 x212))
(assert (x334 x54))
(assert (x334 x245))
(assert (x29 x308))
(assert (= x108 (and (not x93) x37)))
(assert (x349 x44 x305))
(assert (= (=> (and (= false x150) (= false x161) (= x469 false) (= x20 false) (= x61 (>= x213 x86))) x61) x384))
(assert (x450 x358 x251))
(assert (x334 x294))
(assert (x334 x240))
(assert (x334 x59))
(assert (= (and (not x322) x174) x408))
(assert (= x124 x201))
(assert (= (x371 115792089237316195423570985008687907853269984665640564039457584007913129639935 x205) (ite (> 256 x205) (div 115792089237316195423570985008687907853269984665640564039457584007913129639935 (x16 2 x205)) 0)))
(assert (x334 x65))
(assert (x334 x409))
(assert (not (x88 (x354 64 x271 158))))
(assert (= x271 (x227 (x354 64 x271 159))))
(assert (=> (<= x248 10000) (= (x481 x248) 0)))
(assert (x29 x255))
(assert (x334 x237))
(assert (x349 x255 x360))
(assert (x334 x113))
(assert (x29 x406))
(assert (x334 x300))
(assert (= (x354 64 x271 158) (x481 (x354 64 x271 158))))
(assert (= (x227 (x368 32 154)) 154))
(assert (= x343 (and x96 x398)))
(assert (= x287 (and x214 x221)))
(assert (< 10000 (x368 32 3)))
(assert (= 0 (x481 57005)))
(assert (x334 x363))
(assert (= (x433 (x354 64 x165 156)) 64))
(assert (x334 x197))
(assert (x334 x74))
(assert (x349 x458 x8))
(assert (= (and x48 x109) x14))
(assert (x334 x415))
(assert (x334 x250))
(assert (x29 x487))
(assert (= 4 (x227 (x368 32 4))))
(assert (x334 x444))
(assert (x334 x73))
(assert (x334 x271))
(assert (not x177))
(assert (x334 x369))
(assert (= (x440 (x354 64 x165 156)) 156))
(assert (x334 x195))
(assert (x29 x112))
(assert (x334 x71))
(assert (x334 x483))
(assert (x334 x435))
(assert (x276 x244))
(assert (x334 x157))
(assert (< 10000 (x354 64 x271 158)))
(assert (x334 x310))
(assert (x29 x416))
(assert (= (x481 (+ x223 x215)) (x481 x215)))
(assert (< 10000 (x354 64 x271 159)))
(assert (x334 x68))
(assert (not (x88 (x354 64 x271 156))))
(assert (x334 x147))
(assert (= x149 (or x453 x442)))
(assert (= (x481 4294967295) 0))
(assert (= (x481 (+ x3 x22)) (x481 x22)))
(assert (x334 x448))
(assert (x334 x423))
(assert (= (or x30 x417) x174))
(assert (x29 x142))
(assert (x349 x308 x483))
(assert (= x449 (and x116 x217)))
(assert (x334 x443))
(assert (x29 x328))
(assert (> (x368 32 154) 10000))
(assert (= (x354 64 x165 158) (x481 (x354 64 x165 158))))
(assert (= (and x114 x96) x211))
(assert (x334 x402))
(assert (x334 x191))
(assert (= x76 (=> (and (<= x121 18446744073709551615) (= x121 (x455 192)) (= x307 (> x301 31)) (= x289 (x32 (- x306 (mod (ite (< x301 32) 1 0) 115792089237316195423570985008687907853269984665640564039457584007913129639936)))) (= (div x244 2) x419) (= x301 (ite (> x306 0) x419 (x137 127 x419))) (= x306 (x137 1 x244)) (or (= 1 x289) (= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x289))) (and (=> (not x307) x429) (=> (and x307 (and (= (< x215 x63) x26) (= (+ x215 x223) x63) (= x215 (x368 32 155)) (= (div (+ 31 x301) 32) x223))) (and (=> x26 x176) (=> (not x26) x312)))))))
(assert (not (x88 (x354 64 x165 156))))
(assert (x334 x316))
(assert (x334 x181))
(assert (x29 x333))
(assert (= (x481 (x368 32 4)) (x368 32 4)))
(assert (x120 x197))
(assert (x334 x187))
(assert (= x115 (=> (and (and (= (x461 x87) x43) (>= x447 1) (= x443 352) (= x314 (= (x24 382502381645197248123620639812464696550576095234) x388)) x314 (>= x465 1) (= (>= (x24 x87) x43) x286) (= (x461 382502381645197248123620639812464696550576095234) x388) x286 (<= x296 4294967295) (= (x12 382502381645197248123620639812464696550576095234) x465)) (or (not x96) (and (= 0 x395) x96))) x60)))
(assert (= (and x93 x37) x262))
(assert (x334 x284))
(assert (= x52 (and (not x116) x217)))
(assert (x334 x306))
(assert (= (and x340 (not x254)) x275))
(assert (x29 x355))
(assert (x334 x388))
(assert (x334 x64))
(assert (= x103 (and x322 x174)))
(assert (x276 x290))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x354 64 x271 156)))
(assert (= (x481 (x368 32 3)) (x368 32 3)))
(assert (x29 x419))
(assert (x334 x110))
(assert (= (and x62 x152) x340))
(assert (x29 x121))
(assert (x334 x223))
(assert (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (x354 64 x165 159)))
(assert (= x233 (and x486 x336)))
(assert (x276 x487))
(assert (= (x481 (+ x215 1)) (x481 x215)))
(assert (= (=> (and (and (= x129 128) (= x146 256) (= (< 0 x208) x293) (>= x151 32) (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x151) (= 192 x410)) (or (and x293 (and (>= 4294967295 x151) (<= 32 x151) (= x415 1))) (and (= x208 x415) (not x293)))) x170) x401))
(assert (x88 1461501637330902918203684832716283019655932542975))
(assert (x334 x309))
(assert (= x177 (=> (and (and (<= x231 127) (= x125 0) (>= x140 0) (= x414 false) (= 36 x475) (= x17 x164) (>= 4294967295 x188) (= x104 (+ x269 x41)) (not (= x173 x478)) (<= 0 x331) (< (+ x41 x269) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (= false x385) (>= x56 0) (= x348 (< 0 (x12 x87))) (= (x12 x87) x132) (= x260 false) (<= x56 115792089237316195423570985008687907853269984665640564039457584007913129639935) (>= x173 1) (>= 1461501637330902918203684832716283019655932542975 x350) (>= 1461501637330902918203684832716283019655932542975 x379) (<= 0 x104) (= (< 0 (x12 x478)) x452) (= x162 false) (not (= x248 x87)) (>= x95 0) (not (= x248 x173)) (<= 0 x196) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x267) (= x51 2167012380) (<= x59 1461501637330902918203684832716283019655932542975) (<= 0 x330) x348 (= false x339) (<= x95 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x173) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x196) x143 (>= 57896044618658097711785492504343953926634992332820282019728792003956564819967 x363) (<= 0 x281) (= false x278) (>= x101 0) (<= 4 x363) (<= x134 1461501637330902918203684832716283019655932542975) (= x399 (* x292 x79)) (= 0 x375) (<= x285 255) (<= x394 1461501637330902918203684832716283019655932542975) (>= 1461501637330902918203684832716283019655932542975 x248) (= x399 x269) x452 (<= 0 x219) (= false x45) (<= 1 x87) (= x143 (< 0 (x12 x248))) (<= 0 x188) (<= x478 1461501637330902918203684832716283019655932542975) (= x87 x400) (<= x231 127) (>= 1461501637330902918203684832716283019655932542975 x164) (>= 1461501637330902918203684832716283019655932542975 x330) (= x185 404098525) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x140) (not (= x87 x173)) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x101) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x219) (>= x478 1) (= x369 4) (not (= x248 x478)) (= x356 false) (>= 1461501637330902918203684832716283019655932542975 x281) (< (* x79 x292) 115792089237316195423570985008687907853269984665640564039457584007913129639936) (<= 0 x134) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x399) (<= 1 x132) (= x104 x270) (<= 0 x164) (>= x267 0) (>= 1461501637330902918203684832716283019655932542975 x87) (<= x331 115792089237316195423570985008687907853269984665640564039457584007913129639935) (= x381 (< 0 (x12 x173))) (not (= x478 x87)) (<= 0 x399) (>= x248 1) (= x186 false) (= x474 false) (<= x104 115792089237316195423570985008687907853269984665640564039457584007913129639935) x381) (and (or (and (not x221) (and (= (x263 x418) x21) (= x21 x357) (= x418 (x354 64 x165 159)))) (and x221 (and (= x154 (* x79 x300)) (= x382 (+ x473 x156)) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (* x300 x79)) (= x156 (x377 x36)) (= x390 x382) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x154) (= (x274 x31) x300) (= x36 (x354 64 x165 158)) (= x390 x357) (<= 0 x382) (> 115792089237316195423570985008687907853269984665640564039457584007913129639936 (+ x473 x156)) (= (x354 64 x165 156) x31) (>= 115792089237316195423570985008687907853269984665640564039457584007913129639935 x382) (= x154 x473) (<= 0 x154)))) (and (<= x232 127) (= x448 x165) (>= 2 x476) (<= x232 127) (>= x341 1) (= (= x476 0) x221) (= (x12 x87) x341) (= x165 x17) (= (x354 64 x165 161) x100) (= false x327) (= x39 false) (= (x413 x100) x476) (= x98 1889567281)))) x392)))
(assert (x349 x209 x112))
(assert (= (x354 64 x165 161) (x481 (x354 64 x165 161))))
(check-sat)
(exit)
