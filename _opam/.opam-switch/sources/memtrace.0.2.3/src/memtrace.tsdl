/* CTF 1.8 */
/* Format specification for Memtrace v002.

   This specification is in CTF format (see https://diamon.org/ctf/).

   The trace format consists of a sequence of packets, each containing
   a sequence of events.
 */

/* basic type definitions */
typealias integer {size = 8;}  := uint8;
typealias integer {size = 16;} := uint16;
typealias integer {size = 32;} := uint32;
typealias integer {size = 64;} := uint64;
typealias integer {size = 8; signed = true;}  := int8;
typealias integer {size = 16; signed = true;} := int16;
typealias integer {size = 32; signed = true;} := int32;
typealias floating_point {exp_dig = 11;mant_dig = 53;align = 8;} := float64;

/* vint: variable-length encoding for unsigned 64-bit integers that
   are usually small. */
typealias struct {
  enum : uint8
    { u8 = 0...252, u16 = 253, u32 = 254, u64 = 255 } tag;
  variant <tag> {
    struct {} u8;
    uint16 u16;
    uint32 u32;
    uint64 u64;
  } value;
} := vint;

/* timestamps: microseconds since Unix epoch */
clock {
  name = clk;
  freq = 1000000; /* microsecs */
  offset_s = 0;
};

typealias integer {
  size = 64;
  map = clock.clk.value;
} := clk64;

/* CTF header: CTF 1.8, with the CTF magic number */
trace {
  major = 1;
  minor = 8;
  byte_order = le;
  packet.header := struct { uint32 magic; };
};

stream {
  /* Packet header */
  packet.context := struct {
    /* Size of the packet, in bits, including header */
    uint32 packet_size;

    /* Timestamps of all events in this packet are between
       timestamp_begin and timestamp_end (inclusive) */
    clk64 timestamp_begin;
    clk64 timestamp_end;

    uint32 flush_duration;

    /* Version number of memtrace format.
       Same for all packets in the trace. */
    uint16 version;

    /* PID of the process that wrote the packet.
       Since PID can change via fork(), occasionally packets with
       the wrong PID can be found in a trace. These should be
       silently ignored. Packets are written atomically, so these
       bad packets can be skipped entirely. */
    uint64 pid;

    /* See below. */
    uint16 cache_verify_ix;
    uint16 cache_verify_pred;
    uint64 cache_verify_val;

    /* Allocation IDs of allocation events in this packet are
       between alloc_id_begin and alloc_id_end (inclusive) */
    uint64 alloc_id_begin;
    uint64 alloc_id_end;
  };

  /* Event header (32 bits)
     
     The timestamp field here is only 25 bits long, which means it
     wraps after 2^25us (a bit over 30 seconds). So that timestamps
     can be decoded unambiguously, no packet may contain more than 30
     seconds worth of data. */
  event.header := struct {
    integer {size=25; align=1; signed=false; map=clock.clk.value;} timestamp;
    integer {size=7; align=1; signed=false;} id;
  };
};


/* Event 0: trace info.

   Only one of these events is sent, in a packet by itself at the
   start of the trace. */
event {
  id = 0;
  name = "trace_info";
  fields := struct {
    float64 sample_rate;
    uint8 word_size;
    string executable_name;
    string host_name;
    string ocaml_runtime_params;
    uint64 pid;
    string context;
  };
};

/* Event 1: source code location information.
   
   Location information is large, so to save space locations are
   represented in backtraces by 64-bit opaque identifiers.

   Before the first occurrence of such an identifier in a backtrace,
   there must always be a location event explaining what that
   identifer maps to.

   The numeric fields below (line, start_char, end_char) have slightly
   odd widths, chosen to match those in OCaml's internal debug info
   format.

   The text fields below (filename, defname) are move-to-front coded.
   There is a 5-bit field for filename. Codes 0 to 30 refer to the
   most recently used 31 filenames, and code 31 means that the
   filename is not one of the most recent (Code 31 is followed by a
   string).

   Defnames (function and module names) are encoded in the same way,
   using 31 independent MTF tables for each of the 31 most recent
   files. */
typealias struct {
  integer {size=20; align=1; signed=false;} line;
  integer {size=8; align=1; signed=false;} start_char;
  integer {size=10; align=1; signed=false;} end_char;
  enum : integer {size=5; align=1; signed=false;}
    { mtf = 0...30, new = 31 } filename;
  enum : integer {size=5; align=1; signed=false;}
    { mtf = 0...30, new = 31 } defname;
  variant <filename> {
    struct {} mtf;
    string new;
  } opt_filename;
  variant <defname> {
    struct {} mtf;
    string new;
  } opt_defname;
} := location;

event {
  id = 1;
  name = "location";
  fields := struct {
    uint64 code;
    /* A single code refers to a sequence of locations,
       because of inlining */
    uint8 nlocs;
    location locs[nlocs];
  };
};


/* Event 2: Allocations.

   Most of the data in the trace is the backtrace for each allocation,
   so the format for backtraces does quite a lot to save space.

   The backtrace is a sequence of location IDs (64-bit opaque codes,
   see above). This sequence goes from caller to callee - main is at the
   start of the sequence, and the allocation point at the end.

   First, note that two successive backtraces likely share a long
   common prefix. These frames are not encoded at all: instead, a
   single vint common_prefix stores their length.

   The remaining suffix is a sequence of 64-bit opaque codes. A cache
   of size 2^14 is maintained. If one of the codes is present in the
   cache, only its 14-bit index need be encoded. If not, a cache slot
   is allocated to it, and the 14-bit index as well as the 64-bit code
   are encoded.

   Finally, each cache slot remembers which slot followed it the last
   time it was encoded, called its "prediction". If it's followed by
   the same slot next time, then the correctly predicted slot need not
   be encoded at all. Only the number of correct predictions is
   encoded, with a special case for the common cases of 0 or 1 correct
   predictions.

   In particular, this mechanism provides very short encodings of
   repetitive subsequences, as found in backtraces for e.g. List.map.

   Correct decoding of this requires that the decoder have precisely
   the same cache and prediction state as the encoder. As a check to
   ensure that these are not getting out of sync, a different slot's
   contents and current prediction are written in each packet header
   (see cache_verify_{ix,val,pred}), so that the decoder can verify
   that the states match what it expects. (This is not a particularly
   good defense against data corruption, although it will detect many
   errors eventually. It is intended mainly to detect bugs in the
   encoder and decoder implementation). */

typealias struct {
  enum : integer {size=2; align=1; signed=false;} { hit0 = 0, hit1 = 1, hitN = 2, miss = 3 } tag;
  integer {size=14; align=1; signed=false;} cache_bucket;
  variant <tag> {
    struct {} hit0;
    struct {} hit1;
    uint8 hitN;
    uint64 miss;
  } v;
} := backtrace_code;

typealias enum : uint8 { MINOR=0, MAJOR=1, EXTERNAL=2 } := allocation_source;

event {
  id = 2;
  name = "alloc";
  fields := struct {
    /* Wosize of the allocation (length, in words, excluding header) */
    vint length;
    /* Number of samples at this allocation. 1 <= samples <= length+1 */
    vint samples;
    /* major/minor/external */
    allocation_source source;
    /* Backtrace. See above. */
    vint common_prefix;
    uint16 new_suffix;
    backtrace_code backtrace[new_suffix];
  };
};

/* Event 3: Promotion.

   The only information needed for a promotion (beyond the timestamp,
   which is part of the header) is the ID of the object promoted.

   This ID must be less than or equal to the ID of the last allocation,
   so (last_alloc_id - promoted_id) is a nonnegative number, often small.
   This number is encoded as a vint */

event {
  id = 3;
  name = "promote";
  fields := struct {
    vint obj_id_delta;
  };
};

/* Event 4: Collection.

   Same coding as promotion */
event {
  id = 4;
  name = "collect";
  fields := struct {
    vint obj_id_delta;
  };
};


/* Events 101-116. Allocations (short format)

   Most allocations are small, on the minor heap, with a single sample,
   and a small number of new backtrace slots. These are given a shorter
   encoding, using the same format for backtraces */

typealias struct {
  vint common_prefix;
  uint8 new_suffix;
  backtrace_code backtrace[new_suffix];
} := short_alloc;
event { id = 101; name = "alloc01"; fields := short_alloc; };
event { id = 102; name = "alloc02"; fields := short_alloc; };
event { id = 103; name = "alloc03"; fields := short_alloc; };
event { id = 104; name = "alloc04"; fields := short_alloc; };
event { id = 105; name = "alloc05"; fields := short_alloc; };
event { id = 106; name = "alloc06"; fields := short_alloc; };
event { id = 107; name = "alloc07"; fields := short_alloc; };
event { id = 108; name = "alloc08"; fields := short_alloc; };
event { id = 109; name = "alloc09"; fields := short_alloc; };
event { id = 110; name = "alloc10"; fields := short_alloc; };
event { id = 111; name = "alloc11"; fields := short_alloc; };
event { id = 112; name = "alloc12"; fields := short_alloc; };
event { id = 113; name = "alloc13"; fields := short_alloc; };
event { id = 114; name = "alloc14"; fields := short_alloc; };
event { id = 115; name = "alloc15"; fields := short_alloc; };
event { id = 116; name = "alloc16"; fields := short_alloc; };
